
DigitalAlramProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000875c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000318  080088ec  080088ec  000098ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008c04  08008c04  0000a1b8  2**0
                  CONTENTS
  4 .ARM          00000008  08008c04  08008c04  00009c04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008c0c  08008c0c  0000a1b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008c0c  08008c0c  00009c0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008c10  08008c10  00009c10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001b8  20000000  08008c14  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000a1b8  2**0
                  CONTENTS
 10 .bss          000002dc  200001b8  200001b8  0000a1b8  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000494  20000494  0000a1b8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000a1b8  2**0
                  CONTENTS, READONLY
 13 .debug_info   000100ff  00000000  00000000  0000a1e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002d77  00000000  00000000  0001a2e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000fd8  00000000  00000000  0001d060  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c47  00000000  00000000  0001e038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022d88  00000000  00000000  0001ec7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015136  00000000  00000000  00041a07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cc7f6  00000000  00000000  00056b3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00123333  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000044dc  00000000  00000000  00123378  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006d  00000000  00000000  00127854  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001b8 	.word	0x200001b8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080088d4 	.word	0x080088d4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001bc 	.word	0x200001bc
 80001cc:	080088d4 	.word	0x080088d4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <_7SEG_GPIO_Init>:
#include "7seg.h"

void _7SEG_GPIO_Init()
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b08a      	sub	sp, #40	@ 0x28
 8000564:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct;

	/* GPIOA,D,E Periph clock enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000566:	2300      	movs	r3, #0
 8000568:	613b      	str	r3, [r7, #16]
 800056a:	4b6b      	ldr	r3, [pc, #428]	@ (8000718 <_7SEG_GPIO_Init+0x1b8>)
 800056c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800056e:	4a6a      	ldr	r2, [pc, #424]	@ (8000718 <_7SEG_GPIO_Init+0x1b8>)
 8000570:	f043 0301 	orr.w	r3, r3, #1
 8000574:	6313      	str	r3, [r2, #48]	@ 0x30
 8000576:	4b68      	ldr	r3, [pc, #416]	@ (8000718 <_7SEG_GPIO_Init+0x1b8>)
 8000578:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800057a:	f003 0301 	and.w	r3, r3, #1
 800057e:	613b      	str	r3, [r7, #16]
 8000580:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000582:	2300      	movs	r3, #0
 8000584:	60fb      	str	r3, [r7, #12]
 8000586:	4b64      	ldr	r3, [pc, #400]	@ (8000718 <_7SEG_GPIO_Init+0x1b8>)
 8000588:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800058a:	4a63      	ldr	r2, [pc, #396]	@ (8000718 <_7SEG_GPIO_Init+0x1b8>)
 800058c:	f043 0304 	orr.w	r3, r3, #4
 8000590:	6313      	str	r3, [r2, #48]	@ 0x30
 8000592:	4b61      	ldr	r3, [pc, #388]	@ (8000718 <_7SEG_GPIO_Init+0x1b8>)
 8000594:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000596:	f003 0304 	and.w	r3, r3, #4
 800059a:	60fb      	str	r3, [r7, #12]
 800059c:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800059e:	2300      	movs	r3, #0
 80005a0:	60bb      	str	r3, [r7, #8]
 80005a2:	4b5d      	ldr	r3, [pc, #372]	@ (8000718 <_7SEG_GPIO_Init+0x1b8>)
 80005a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005a6:	4a5c      	ldr	r2, [pc, #368]	@ (8000718 <_7SEG_GPIO_Init+0x1b8>)
 80005a8:	f043 0308 	orr.w	r3, r3, #8
 80005ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80005ae:	4b5a      	ldr	r3, [pc, #360]	@ (8000718 <_7SEG_GPIO_Init+0x1b8>)
 80005b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005b2:	f003 0308 	and.w	r3, r3, #8
 80005b6:	60bb      	str	r3, [r7, #8]
 80005b8:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 80005ba:	2300      	movs	r3, #0
 80005bc:	607b      	str	r3, [r7, #4]
 80005be:	4b56      	ldr	r3, [pc, #344]	@ (8000718 <_7SEG_GPIO_Init+0x1b8>)
 80005c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005c2:	4a55      	ldr	r2, [pc, #340]	@ (8000718 <_7SEG_GPIO_Init+0x1b8>)
 80005c4:	f043 0310 	orr.w	r3, r3, #16
 80005c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80005ca:	4b53      	ldr	r3, [pc, #332]	@ (8000718 <_7SEG_GPIO_Init+0x1b8>)
 80005cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ce:	f003 0310 	and.w	r3, r3, #16
 80005d2:	607b      	str	r3, [r7, #4]
 80005d4:	687b      	ldr	r3, [r7, #4]

	//Digit1
	GPIO_InitStruct.Pin = GPIO_PIN_DGT1_A;
 80005d6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80005da:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005dc:	2301      	movs	r3, #1
 80005de:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e0:	2300      	movs	r3, #0
 80005e2:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005e4:	2300      	movs	r3, #0
 80005e6:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIO_DGT1_A, &GPIO_InitStruct);
 80005e8:	f107 0314 	add.w	r3, r7, #20
 80005ec:	4619      	mov	r1, r3
 80005ee:	484b      	ldr	r0, [pc, #300]	@ (800071c <_7SEG_GPIO_Init+0x1bc>)
 80005f0:	f004 fe24 	bl	800523c <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_DGT1_B;
 80005f4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80005f8:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT1_B, &GPIO_InitStruct);
 80005fa:	f107 0314 	add.w	r3, r7, #20
 80005fe:	4619      	mov	r1, r3
 8000600:	4847      	ldr	r0, [pc, #284]	@ (8000720 <_7SEG_GPIO_Init+0x1c0>)
 8000602:	f004 fe1b 	bl	800523c <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_DGT1_C;
 8000606:	2340      	movs	r3, #64	@ 0x40
 8000608:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT1_C, &GPIO_InitStruct);
 800060a:	f107 0314 	add.w	r3, r7, #20
 800060e:	4619      	mov	r1, r3
 8000610:	4842      	ldr	r0, [pc, #264]	@ (800071c <_7SEG_GPIO_Init+0x1bc>)
 8000612:	f004 fe13 	bl	800523c <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_DGT1_D;
 8000616:	2320      	movs	r3, #32
 8000618:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT1_D, &GPIO_InitStruct);
 800061a:	f107 0314 	add.w	r3, r7, #20
 800061e:	4619      	mov	r1, r3
 8000620:	483e      	ldr	r0, [pc, #248]	@ (800071c <_7SEG_GPIO_Init+0x1bc>)
 8000622:	f004 fe0b 	bl	800523c <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_DGT1_E;
 8000626:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800062a:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT1_E, &GPIO_InitStruct);
 800062c:	f107 0314 	add.w	r3, r7, #20
 8000630:	4619      	mov	r1, r3
 8000632:	483c      	ldr	r0, [pc, #240]	@ (8000724 <_7SEG_GPIO_Init+0x1c4>)
 8000634:	f004 fe02 	bl	800523c <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_DGT1_F;
 8000638:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800063c:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT1_F, &GPIO_InitStruct);
 800063e:	f107 0314 	add.w	r3, r7, #20
 8000642:	4619      	mov	r1, r3
 8000644:	4837      	ldr	r0, [pc, #220]	@ (8000724 <_7SEG_GPIO_Init+0x1c4>)
 8000646:	f004 fdf9 	bl	800523c <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_DGT1_G;
 800064a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800064e:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT1_G, &GPIO_InitStruct);
 8000650:	f107 0314 	add.w	r3, r7, #20
 8000654:	4619      	mov	r1, r3
 8000656:	4831      	ldr	r0, [pc, #196]	@ (800071c <_7SEG_GPIO_Init+0x1bc>)
 8000658:	f004 fdf0 	bl	800523c <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_DGT1_DP;
 800065c:	2380      	movs	r3, #128	@ 0x80
 800065e:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT1_DP, &GPIO_InitStruct);
 8000660:	f107 0314 	add.w	r3, r7, #20
 8000664:	4619      	mov	r1, r3
 8000666:	482d      	ldr	r0, [pc, #180]	@ (800071c <_7SEG_GPIO_Init+0x1bc>)
 8000668:	f004 fde8 	bl	800523c <HAL_GPIO_Init>

	//Digit2
	GPIO_InitStruct.Pin = GPIO_PIN_DGT2_A;
 800066c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000670:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT2_A, &GPIO_InitStruct);
 8000672:	f107 0314 	add.w	r3, r7, #20
 8000676:	4619      	mov	r1, r3
 8000678:	482b      	ldr	r0, [pc, #172]	@ (8000728 <_7SEG_GPIO_Init+0x1c8>)
 800067a:	f004 fddf 	bl	800523c <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_DGT2_B;
 800067e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000682:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT2_B, &GPIO_InitStruct);
 8000684:	f107 0314 	add.w	r3, r7, #20
 8000688:	4619      	mov	r1, r3
 800068a:	4827      	ldr	r0, [pc, #156]	@ (8000728 <_7SEG_GPIO_Init+0x1c8>)
 800068c:	f004 fdd6 	bl	800523c <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_DGT2_C;
 8000690:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000694:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT2_C, &GPIO_InitStruct);
 8000696:	f107 0314 	add.w	r3, r7, #20
 800069a:	4619      	mov	r1, r3
 800069c:	4822      	ldr	r0, [pc, #136]	@ (8000728 <_7SEG_GPIO_Init+0x1c8>)
 800069e:	f004 fdcd 	bl	800523c <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_DGT2_D;
 80006a2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80006a6:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT2_D, &GPIO_InitStruct);
 80006a8:	f107 0314 	add.w	r3, r7, #20
 80006ac:	4619      	mov	r1, r3
 80006ae:	481e      	ldr	r0, [pc, #120]	@ (8000728 <_7SEG_GPIO_Init+0x1c8>)
 80006b0:	f004 fdc4 	bl	800523c <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_DGT2_E;
 80006b4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80006b8:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT2_E, &GPIO_InitStruct);
 80006ba:	f107 0314 	add.w	r3, r7, #20
 80006be:	4619      	mov	r1, r3
 80006c0:	4819      	ldr	r0, [pc, #100]	@ (8000728 <_7SEG_GPIO_Init+0x1c8>)
 80006c2:	f004 fdbb 	bl	800523c <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_DGT2_F;
 80006c6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80006ca:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT2_F, &GPIO_InitStruct);
 80006cc:	f107 0314 	add.w	r3, r7, #20
 80006d0:	4619      	mov	r1, r3
 80006d2:	4815      	ldr	r0, [pc, #84]	@ (8000728 <_7SEG_GPIO_Init+0x1c8>)
 80006d4:	f004 fdb2 	bl	800523c <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_DGT2_G;
 80006d8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80006dc:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT2_G, &GPIO_InitStruct);
 80006de:	f107 0314 	add.w	r3, r7, #20
 80006e2:	4619      	mov	r1, r3
 80006e4:	4810      	ldr	r0, [pc, #64]	@ (8000728 <_7SEG_GPIO_Init+0x1c8>)
 80006e6:	f004 fda9 	bl	800523c <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_DGT2_DP;
 80006ea:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80006ee:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT2_DP, &GPIO_InitStruct);
 80006f0:	f107 0314 	add.w	r3, r7, #20
 80006f4:	4619      	mov	r1, r3
 80006f6:	480c      	ldr	r0, [pc, #48]	@ (8000728 <_7SEG_GPIO_Init+0x1c8>)
 80006f8:	f004 fda0 	bl	800523c <HAL_GPIO_Init>

	
	_7SEG_SetNumber(DGT1, 0, ON);
 80006fc:	2201      	movs	r2, #1
 80006fe:	2100      	movs	r1, #0
 8000700:	2000      	movs	r0, #0
 8000702:	f000 f813 	bl	800072c <_7SEG_SetNumber>
	_7SEG_SetNumber(DGT2, 0, ON);
 8000706:	2201      	movs	r2, #1
 8000708:	2100      	movs	r1, #0
 800070a:	2001      	movs	r0, #1
 800070c:	f000 f80e 	bl	800072c <_7SEG_SetNumber>
}
 8000710:	bf00      	nop
 8000712:	3728      	adds	r7, #40	@ 0x28
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}
 8000718:	40023800 	.word	0x40023800
 800071c:	40020c00 	.word	0x40020c00
 8000720:	40020000 	.word	0x40020000
 8000724:	40020800 	.word	0x40020800
 8000728:	40021000 	.word	0x40021000

0800072c <_7SEG_SetNumber>:


void _7SEG_SetNumber(int dgt, int num, int dp)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b084      	sub	sp, #16
 8000730:	af00      	add	r7, sp, #0
 8000732:	60f8      	str	r0, [r7, #12]
 8000734:	60b9      	str	r1, [r7, #8]
 8000736:	607a      	str	r2, [r7, #4]
	if(dgt == DGT1)
 8000738:	68fb      	ldr	r3, [r7, #12]
 800073a:	2b00      	cmp	r3, #0
 800073c:	f040 81dc 	bne.w	8000af8 <_7SEG_SetNumber+0x3cc>
	{
		switch(num%10)
 8000740:	68b9      	ldr	r1, [r7, #8]
 8000742:	4bcb      	ldr	r3, [pc, #812]	@ (8000a70 <_7SEG_SetNumber+0x344>)
 8000744:	fb83 2301 	smull	r2, r3, r3, r1
 8000748:	109a      	asrs	r2, r3, #2
 800074a:	17cb      	asrs	r3, r1, #31
 800074c:	1ad2      	subs	r2, r2, r3
 800074e:	4613      	mov	r3, r2
 8000750:	009b      	lsls	r3, r3, #2
 8000752:	4413      	add	r3, r2
 8000754:	005b      	lsls	r3, r3, #1
 8000756:	1aca      	subs	r2, r1, r3
 8000758:	2a09      	cmp	r2, #9
 800075a:	f200 81ba 	bhi.w	8000ad2 <_7SEG_SetNumber+0x3a6>
 800075e:	a301      	add	r3, pc, #4	@ (adr r3, 8000764 <_7SEG_SetNumber+0x38>)
 8000760:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 8000764:	0800078d 	.word	0x0800078d
 8000768:	080007df 	.word	0x080007df
 800076c:	08000831 	.word	0x08000831
 8000770:	08000883 	.word	0x08000883
 8000774:	080008d5 	.word	0x080008d5
 8000778:	08000927 	.word	0x08000927
 800077c:	08000979 	.word	0x08000979
 8000780:	080009cb 	.word	0x080009cb
 8000784:	08000a1d 	.word	0x08000a1d
 8000788:	08000a81 	.word	0x08000a81
		{
			case 0: DGT1_A_ON; DGT1_B_ON; DGT1_C_ON; DGT1_D_ON; DGT1_E_ON; DGT1_F_ON;
 800078c:	2200      	movs	r2, #0
 800078e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000792:	48b8      	ldr	r0, [pc, #736]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 8000794:	f004 ff06 	bl	80055a4 <HAL_GPIO_WritePin>
 8000798:	2200      	movs	r2, #0
 800079a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800079e:	48b6      	ldr	r0, [pc, #728]	@ (8000a78 <_7SEG_SetNumber+0x34c>)
 80007a0:	f004 ff00 	bl	80055a4 <HAL_GPIO_WritePin>
 80007a4:	2200      	movs	r2, #0
 80007a6:	2140      	movs	r1, #64	@ 0x40
 80007a8:	48b2      	ldr	r0, [pc, #712]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 80007aa:	f004 fefb 	bl	80055a4 <HAL_GPIO_WritePin>
 80007ae:	2200      	movs	r2, #0
 80007b0:	2120      	movs	r1, #32
 80007b2:	48b0      	ldr	r0, [pc, #704]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 80007b4:	f004 fef6 	bl	80055a4 <HAL_GPIO_WritePin>
 80007b8:	2200      	movs	r2, #0
 80007ba:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80007be:	48af      	ldr	r0, [pc, #700]	@ (8000a7c <_7SEG_SetNumber+0x350>)
 80007c0:	f004 fef0 	bl	80055a4 <HAL_GPIO_WritePin>
 80007c4:	2200      	movs	r2, #0
 80007c6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80007ca:	48ac      	ldr	r0, [pc, #688]	@ (8000a7c <_7SEG_SetNumber+0x350>)
 80007cc:	f004 feea 	bl	80055a4 <HAL_GPIO_WritePin>
					DGT1_G_OFF;
 80007d0:	2201      	movs	r2, #1
 80007d2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80007d6:	48a7      	ldr	r0, [pc, #668]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 80007d8:	f004 fee4 	bl	80055a4 <HAL_GPIO_WritePin>
				break;
 80007dc:	e179      	b.n	8000ad2 <_7SEG_SetNumber+0x3a6>
			case 1: DGT1_B_ON; DGT1_C_ON;
 80007de:	2200      	movs	r2, #0
 80007e0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80007e4:	48a4      	ldr	r0, [pc, #656]	@ (8000a78 <_7SEG_SetNumber+0x34c>)
 80007e6:	f004 fedd 	bl	80055a4 <HAL_GPIO_WritePin>
 80007ea:	2200      	movs	r2, #0
 80007ec:	2140      	movs	r1, #64	@ 0x40
 80007ee:	48a1      	ldr	r0, [pc, #644]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 80007f0:	f004 fed8 	bl	80055a4 <HAL_GPIO_WritePin>
					DGT1_A_OFF; DGT1_D_OFF; DGT1_E_OFF; DGT1_F_OFF; DGT1_G_OFF;
 80007f4:	2201      	movs	r2, #1
 80007f6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80007fa:	489e      	ldr	r0, [pc, #632]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 80007fc:	f004 fed2 	bl	80055a4 <HAL_GPIO_WritePin>
 8000800:	2201      	movs	r2, #1
 8000802:	2120      	movs	r1, #32
 8000804:	489b      	ldr	r0, [pc, #620]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 8000806:	f004 fecd 	bl	80055a4 <HAL_GPIO_WritePin>
 800080a:	2201      	movs	r2, #1
 800080c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000810:	489a      	ldr	r0, [pc, #616]	@ (8000a7c <_7SEG_SetNumber+0x350>)
 8000812:	f004 fec7 	bl	80055a4 <HAL_GPIO_WritePin>
 8000816:	2201      	movs	r2, #1
 8000818:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800081c:	4897      	ldr	r0, [pc, #604]	@ (8000a7c <_7SEG_SetNumber+0x350>)
 800081e:	f004 fec1 	bl	80055a4 <HAL_GPIO_WritePin>
 8000822:	2201      	movs	r2, #1
 8000824:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000828:	4892      	ldr	r0, [pc, #584]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 800082a:	f004 febb 	bl	80055a4 <HAL_GPIO_WritePin>
				break;
 800082e:	e150      	b.n	8000ad2 <_7SEG_SetNumber+0x3a6>
			case 2: DGT1_A_ON; DGT1_B_ON; DGT1_G_ON; DGT1_E_ON; DGT1_D_ON;
 8000830:	2200      	movs	r2, #0
 8000832:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000836:	488f      	ldr	r0, [pc, #572]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 8000838:	f004 feb4 	bl	80055a4 <HAL_GPIO_WritePin>
 800083c:	2200      	movs	r2, #0
 800083e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000842:	488d      	ldr	r0, [pc, #564]	@ (8000a78 <_7SEG_SetNumber+0x34c>)
 8000844:	f004 feae 	bl	80055a4 <HAL_GPIO_WritePin>
 8000848:	2200      	movs	r2, #0
 800084a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800084e:	4889      	ldr	r0, [pc, #548]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 8000850:	f004 fea8 	bl	80055a4 <HAL_GPIO_WritePin>
 8000854:	2200      	movs	r2, #0
 8000856:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800085a:	4888      	ldr	r0, [pc, #544]	@ (8000a7c <_7SEG_SetNumber+0x350>)
 800085c:	f004 fea2 	bl	80055a4 <HAL_GPIO_WritePin>
 8000860:	2200      	movs	r2, #0
 8000862:	2120      	movs	r1, #32
 8000864:	4883      	ldr	r0, [pc, #524]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 8000866:	f004 fe9d 	bl	80055a4 <HAL_GPIO_WritePin>
					DGT1_C_OFF; DGT1_F_OFF;
 800086a:	2201      	movs	r2, #1
 800086c:	2140      	movs	r1, #64	@ 0x40
 800086e:	4881      	ldr	r0, [pc, #516]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 8000870:	f004 fe98 	bl	80055a4 <HAL_GPIO_WritePin>
 8000874:	2201      	movs	r2, #1
 8000876:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800087a:	4880      	ldr	r0, [pc, #512]	@ (8000a7c <_7SEG_SetNumber+0x350>)
 800087c:	f004 fe92 	bl	80055a4 <HAL_GPIO_WritePin>
				break;
 8000880:	e127      	b.n	8000ad2 <_7SEG_SetNumber+0x3a6>
			case 3: DGT1_A_ON; DGT1_B_ON; DGT1_C_ON; DGT1_D_ON; DGT1_G_ON;
 8000882:	2200      	movs	r2, #0
 8000884:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000888:	487a      	ldr	r0, [pc, #488]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 800088a:	f004 fe8b 	bl	80055a4 <HAL_GPIO_WritePin>
 800088e:	2200      	movs	r2, #0
 8000890:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000894:	4878      	ldr	r0, [pc, #480]	@ (8000a78 <_7SEG_SetNumber+0x34c>)
 8000896:	f004 fe85 	bl	80055a4 <HAL_GPIO_WritePin>
 800089a:	2200      	movs	r2, #0
 800089c:	2140      	movs	r1, #64	@ 0x40
 800089e:	4875      	ldr	r0, [pc, #468]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 80008a0:	f004 fe80 	bl	80055a4 <HAL_GPIO_WritePin>
 80008a4:	2200      	movs	r2, #0
 80008a6:	2120      	movs	r1, #32
 80008a8:	4872      	ldr	r0, [pc, #456]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 80008aa:	f004 fe7b 	bl	80055a4 <HAL_GPIO_WritePin>
 80008ae:	2200      	movs	r2, #0
 80008b0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80008b4:	486f      	ldr	r0, [pc, #444]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 80008b6:	f004 fe75 	bl	80055a4 <HAL_GPIO_WritePin>
					DGT1_E_OFF; DGT1_F_OFF;
 80008ba:	2201      	movs	r2, #1
 80008bc:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80008c0:	486e      	ldr	r0, [pc, #440]	@ (8000a7c <_7SEG_SetNumber+0x350>)
 80008c2:	f004 fe6f 	bl	80055a4 <HAL_GPIO_WritePin>
 80008c6:	2201      	movs	r2, #1
 80008c8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80008cc:	486b      	ldr	r0, [pc, #428]	@ (8000a7c <_7SEG_SetNumber+0x350>)
 80008ce:	f004 fe69 	bl	80055a4 <HAL_GPIO_WritePin>
				break;
 80008d2:	e0fe      	b.n	8000ad2 <_7SEG_SetNumber+0x3a6>
			case 4: DGT1_F_ON; DGT1_G_ON; DGT1_B_ON; DGT1_C_ON;
 80008d4:	2200      	movs	r2, #0
 80008d6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80008da:	4868      	ldr	r0, [pc, #416]	@ (8000a7c <_7SEG_SetNumber+0x350>)
 80008dc:	f004 fe62 	bl	80055a4 <HAL_GPIO_WritePin>
 80008e0:	2200      	movs	r2, #0
 80008e2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80008e6:	4863      	ldr	r0, [pc, #396]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 80008e8:	f004 fe5c 	bl	80055a4 <HAL_GPIO_WritePin>
 80008ec:	2200      	movs	r2, #0
 80008ee:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80008f2:	4861      	ldr	r0, [pc, #388]	@ (8000a78 <_7SEG_SetNumber+0x34c>)
 80008f4:	f004 fe56 	bl	80055a4 <HAL_GPIO_WritePin>
 80008f8:	2200      	movs	r2, #0
 80008fa:	2140      	movs	r1, #64	@ 0x40
 80008fc:	485d      	ldr	r0, [pc, #372]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 80008fe:	f004 fe51 	bl	80055a4 <HAL_GPIO_WritePin>
					DGT1_A_OFF; DGT1_D_OFF; DGT1_E_OFF;
 8000902:	2201      	movs	r2, #1
 8000904:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000908:	485a      	ldr	r0, [pc, #360]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 800090a:	f004 fe4b 	bl	80055a4 <HAL_GPIO_WritePin>
 800090e:	2201      	movs	r2, #1
 8000910:	2120      	movs	r1, #32
 8000912:	4858      	ldr	r0, [pc, #352]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 8000914:	f004 fe46 	bl	80055a4 <HAL_GPIO_WritePin>
 8000918:	2201      	movs	r2, #1
 800091a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800091e:	4857      	ldr	r0, [pc, #348]	@ (8000a7c <_7SEG_SetNumber+0x350>)
 8000920:	f004 fe40 	bl	80055a4 <HAL_GPIO_WritePin>
				break;
 8000924:	e0d5      	b.n	8000ad2 <_7SEG_SetNumber+0x3a6>
			case 5: DGT1_A_ON; DGT1_F_ON; DGT1_G_ON; DGT1_C_ON; DGT1_D_ON;
 8000926:	2200      	movs	r2, #0
 8000928:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800092c:	4851      	ldr	r0, [pc, #324]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 800092e:	f004 fe39 	bl	80055a4 <HAL_GPIO_WritePin>
 8000932:	2200      	movs	r2, #0
 8000934:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000938:	4850      	ldr	r0, [pc, #320]	@ (8000a7c <_7SEG_SetNumber+0x350>)
 800093a:	f004 fe33 	bl	80055a4 <HAL_GPIO_WritePin>
 800093e:	2200      	movs	r2, #0
 8000940:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000944:	484b      	ldr	r0, [pc, #300]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 8000946:	f004 fe2d 	bl	80055a4 <HAL_GPIO_WritePin>
 800094a:	2200      	movs	r2, #0
 800094c:	2140      	movs	r1, #64	@ 0x40
 800094e:	4849      	ldr	r0, [pc, #292]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 8000950:	f004 fe28 	bl	80055a4 <HAL_GPIO_WritePin>
 8000954:	2200      	movs	r2, #0
 8000956:	2120      	movs	r1, #32
 8000958:	4846      	ldr	r0, [pc, #280]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 800095a:	f004 fe23 	bl	80055a4 <HAL_GPIO_WritePin>
					DGT1_B_OFF; DGT1_E_OFF;
 800095e:	2201      	movs	r2, #1
 8000960:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000964:	4844      	ldr	r0, [pc, #272]	@ (8000a78 <_7SEG_SetNumber+0x34c>)
 8000966:	f004 fe1d 	bl	80055a4 <HAL_GPIO_WritePin>
 800096a:	2201      	movs	r2, #1
 800096c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000970:	4842      	ldr	r0, [pc, #264]	@ (8000a7c <_7SEG_SetNumber+0x350>)
 8000972:	f004 fe17 	bl	80055a4 <HAL_GPIO_WritePin>
				break;
 8000976:	e0ac      	b.n	8000ad2 <_7SEG_SetNumber+0x3a6>
			case 6: DGT1_A_ON; DGT1_C_ON; DGT1_D_ON; DGT1_E_ON; DGT1_F_ON; DGT1_G_ON;
 8000978:	2200      	movs	r2, #0
 800097a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800097e:	483d      	ldr	r0, [pc, #244]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 8000980:	f004 fe10 	bl	80055a4 <HAL_GPIO_WritePin>
 8000984:	2200      	movs	r2, #0
 8000986:	2140      	movs	r1, #64	@ 0x40
 8000988:	483a      	ldr	r0, [pc, #232]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 800098a:	f004 fe0b 	bl	80055a4 <HAL_GPIO_WritePin>
 800098e:	2200      	movs	r2, #0
 8000990:	2120      	movs	r1, #32
 8000992:	4838      	ldr	r0, [pc, #224]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 8000994:	f004 fe06 	bl	80055a4 <HAL_GPIO_WritePin>
 8000998:	2200      	movs	r2, #0
 800099a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800099e:	4837      	ldr	r0, [pc, #220]	@ (8000a7c <_7SEG_SetNumber+0x350>)
 80009a0:	f004 fe00 	bl	80055a4 <HAL_GPIO_WritePin>
 80009a4:	2200      	movs	r2, #0
 80009a6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80009aa:	4834      	ldr	r0, [pc, #208]	@ (8000a7c <_7SEG_SetNumber+0x350>)
 80009ac:	f004 fdfa 	bl	80055a4 <HAL_GPIO_WritePin>
 80009b0:	2200      	movs	r2, #0
 80009b2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80009b6:	482f      	ldr	r0, [pc, #188]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 80009b8:	f004 fdf4 	bl	80055a4 <HAL_GPIO_WritePin>
					DGT1_B_OFF;
 80009bc:	2201      	movs	r2, #1
 80009be:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80009c2:	482d      	ldr	r0, [pc, #180]	@ (8000a78 <_7SEG_SetNumber+0x34c>)
 80009c4:	f004 fdee 	bl	80055a4 <HAL_GPIO_WritePin>
				break;
 80009c8:	e083      	b.n	8000ad2 <_7SEG_SetNumber+0x3a6>
			case 7: DGT1_F_ON; DGT1_A_ON; DGT1_B_ON; DGT1_C_ON;
 80009ca:	2200      	movs	r2, #0
 80009cc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80009d0:	482a      	ldr	r0, [pc, #168]	@ (8000a7c <_7SEG_SetNumber+0x350>)
 80009d2:	f004 fde7 	bl	80055a4 <HAL_GPIO_WritePin>
 80009d6:	2200      	movs	r2, #0
 80009d8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80009dc:	4825      	ldr	r0, [pc, #148]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 80009de:	f004 fde1 	bl	80055a4 <HAL_GPIO_WritePin>
 80009e2:	2200      	movs	r2, #0
 80009e4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80009e8:	4823      	ldr	r0, [pc, #140]	@ (8000a78 <_7SEG_SetNumber+0x34c>)
 80009ea:	f004 fddb 	bl	80055a4 <HAL_GPIO_WritePin>
 80009ee:	2200      	movs	r2, #0
 80009f0:	2140      	movs	r1, #64	@ 0x40
 80009f2:	4820      	ldr	r0, [pc, #128]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 80009f4:	f004 fdd6 	bl	80055a4 <HAL_GPIO_WritePin>
					DGT1_D_OFF; DGT1_E_OFF; DGT1_G_OFF;
 80009f8:	2201      	movs	r2, #1
 80009fa:	2120      	movs	r1, #32
 80009fc:	481d      	ldr	r0, [pc, #116]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 80009fe:	f004 fdd1 	bl	80055a4 <HAL_GPIO_WritePin>
 8000a02:	2201      	movs	r2, #1
 8000a04:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000a08:	481c      	ldr	r0, [pc, #112]	@ (8000a7c <_7SEG_SetNumber+0x350>)
 8000a0a:	f004 fdcb 	bl	80055a4 <HAL_GPIO_WritePin>
 8000a0e:	2201      	movs	r2, #1
 8000a10:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000a14:	4817      	ldr	r0, [pc, #92]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 8000a16:	f004 fdc5 	bl	80055a4 <HAL_GPIO_WritePin>
				break;
 8000a1a:	e05a      	b.n	8000ad2 <_7SEG_SetNumber+0x3a6>
			case 8: DGT1_A_ON; DGT1_B_ON; DGT1_C_ON; DGT1_D_ON; DGT1_E_ON; DGT1_F_ON; DGT1_G_ON;
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000a22:	4814      	ldr	r0, [pc, #80]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 8000a24:	f004 fdbe 	bl	80055a4 <HAL_GPIO_WritePin>
 8000a28:	2200      	movs	r2, #0
 8000a2a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000a2e:	4812      	ldr	r0, [pc, #72]	@ (8000a78 <_7SEG_SetNumber+0x34c>)
 8000a30:	f004 fdb8 	bl	80055a4 <HAL_GPIO_WritePin>
 8000a34:	2200      	movs	r2, #0
 8000a36:	2140      	movs	r1, #64	@ 0x40
 8000a38:	480e      	ldr	r0, [pc, #56]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 8000a3a:	f004 fdb3 	bl	80055a4 <HAL_GPIO_WritePin>
 8000a3e:	2200      	movs	r2, #0
 8000a40:	2120      	movs	r1, #32
 8000a42:	480c      	ldr	r0, [pc, #48]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 8000a44:	f004 fdae 	bl	80055a4 <HAL_GPIO_WritePin>
 8000a48:	2200      	movs	r2, #0
 8000a4a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000a4e:	480b      	ldr	r0, [pc, #44]	@ (8000a7c <_7SEG_SetNumber+0x350>)
 8000a50:	f004 fda8 	bl	80055a4 <HAL_GPIO_WritePin>
 8000a54:	2200      	movs	r2, #0
 8000a56:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a5a:	4808      	ldr	r0, [pc, #32]	@ (8000a7c <_7SEG_SetNumber+0x350>)
 8000a5c:	f004 fda2 	bl	80055a4 <HAL_GPIO_WritePin>
 8000a60:	2200      	movs	r2, #0
 8000a62:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000a66:	4803      	ldr	r0, [pc, #12]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 8000a68:	f004 fd9c 	bl	80055a4 <HAL_GPIO_WritePin>
				break;
 8000a6c:	e031      	b.n	8000ad2 <_7SEG_SetNumber+0x3a6>
 8000a6e:	bf00      	nop
 8000a70:	66666667 	.word	0x66666667
 8000a74:	40020c00 	.word	0x40020c00
 8000a78:	40020000 	.word	0x40020000
 8000a7c:	40020800 	.word	0x40020800
			case 9: DGT1_A_ON; DGT1_B_ON; DGT1_C_ON; DGT1_D_ON; DGT1_F_ON; DGT1_G_ON;
 8000a80:	2200      	movs	r2, #0
 8000a82:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000a86:	48c8      	ldr	r0, [pc, #800]	@ (8000da8 <_7SEG_SetNumber+0x67c>)
 8000a88:	f004 fd8c 	bl	80055a4 <HAL_GPIO_WritePin>
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000a92:	48c6      	ldr	r0, [pc, #792]	@ (8000dac <_7SEG_SetNumber+0x680>)
 8000a94:	f004 fd86 	bl	80055a4 <HAL_GPIO_WritePin>
 8000a98:	2200      	movs	r2, #0
 8000a9a:	2140      	movs	r1, #64	@ 0x40
 8000a9c:	48c2      	ldr	r0, [pc, #776]	@ (8000da8 <_7SEG_SetNumber+0x67c>)
 8000a9e:	f004 fd81 	bl	80055a4 <HAL_GPIO_WritePin>
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	2120      	movs	r1, #32
 8000aa6:	48c0      	ldr	r0, [pc, #768]	@ (8000da8 <_7SEG_SetNumber+0x67c>)
 8000aa8:	f004 fd7c 	bl	80055a4 <HAL_GPIO_WritePin>
 8000aac:	2200      	movs	r2, #0
 8000aae:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000ab2:	48bf      	ldr	r0, [pc, #764]	@ (8000db0 <_7SEG_SetNumber+0x684>)
 8000ab4:	f004 fd76 	bl	80055a4 <HAL_GPIO_WritePin>
 8000ab8:	2200      	movs	r2, #0
 8000aba:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000abe:	48ba      	ldr	r0, [pc, #744]	@ (8000da8 <_7SEG_SetNumber+0x67c>)
 8000ac0:	f004 fd70 	bl	80055a4 <HAL_GPIO_WritePin>
					DGT1_E_OFF;
 8000ac4:	2201      	movs	r2, #1
 8000ac6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000aca:	48b9      	ldr	r0, [pc, #740]	@ (8000db0 <_7SEG_SetNumber+0x684>)
 8000acc:	f004 fd6a 	bl	80055a4 <HAL_GPIO_WritePin>
				break;
 8000ad0:	bf00      	nop
		}

		if(dp == ON)
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	2b01      	cmp	r3, #1
 8000ad6:	d105      	bne.n	8000ae4 <_7SEG_SetNumber+0x3b8>
		{
			DGT1_DP_ON;
 8000ad8:	2200      	movs	r2, #0
 8000ada:	2180      	movs	r1, #128	@ 0x80
 8000adc:	48b2      	ldr	r0, [pc, #712]	@ (8000da8 <_7SEG_SetNumber+0x67c>)
 8000ade:	f004 fd61 	bl	80055a4 <HAL_GPIO_WritePin>
		else if(dp == OFF)
		{
			DGT2_DP_OFF;
		}
	}
}
 8000ae2:	e1ff      	b.n	8000ee4 <_7SEG_SetNumber+0x7b8>
		else if(dp == OFF)
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	f040 81fc 	bne.w	8000ee4 <_7SEG_SetNumber+0x7b8>
			DGT1_DP_OFF;
 8000aec:	2201      	movs	r2, #1
 8000aee:	2180      	movs	r1, #128	@ 0x80
 8000af0:	48ad      	ldr	r0, [pc, #692]	@ (8000da8 <_7SEG_SetNumber+0x67c>)
 8000af2:	f004 fd57 	bl	80055a4 <HAL_GPIO_WritePin>
}
 8000af6:	e1f5      	b.n	8000ee4 <_7SEG_SetNumber+0x7b8>
	else if(dgt == DGT2)
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	2b01      	cmp	r3, #1
 8000afc:	f040 81f2 	bne.w	8000ee4 <_7SEG_SetNumber+0x7b8>
		switch(num%10)
 8000b00:	68b9      	ldr	r1, [r7, #8]
 8000b02:	4bac      	ldr	r3, [pc, #688]	@ (8000db4 <_7SEG_SetNumber+0x688>)
 8000b04:	fb83 2301 	smull	r2, r3, r3, r1
 8000b08:	109a      	asrs	r2, r3, #2
 8000b0a:	17cb      	asrs	r3, r1, #31
 8000b0c:	1ad2      	subs	r2, r2, r3
 8000b0e:	4613      	mov	r3, r2
 8000b10:	009b      	lsls	r3, r3, #2
 8000b12:	4413      	add	r3, r2
 8000b14:	005b      	lsls	r3, r3, #1
 8000b16:	1aca      	subs	r2, r1, r3
 8000b18:	2a09      	cmp	r2, #9
 8000b1a:	f200 81d0 	bhi.w	8000ebe <_7SEG_SetNumber+0x792>
 8000b1e:	a301      	add	r3, pc, #4	@ (adr r3, 8000b24 <_7SEG_SetNumber+0x3f8>)
 8000b20:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 8000b24:	08000b4d 	.word	0x08000b4d
 8000b28:	08000ba3 	.word	0x08000ba3
 8000b2c:	08000bf9 	.word	0x08000bf9
 8000b30:	08000c4f 	.word	0x08000c4f
 8000b34:	08000ca5 	.word	0x08000ca5
 8000b38:	08000cfb 	.word	0x08000cfb
 8000b3c:	08000d51 	.word	0x08000d51
 8000b40:	08000dbd 	.word	0x08000dbd
 8000b44:	08000e13 	.word	0x08000e13
 8000b48:	08000e69 	.word	0x08000e69
			case 0: DGT2_A_ON; DGT2_B_ON; DGT2_C_ON; DGT2_D_ON; DGT2_E_ON; DGT2_F_ON;
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000b52:	4899      	ldr	r0, [pc, #612]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000b54:	f004 fd26 	bl	80055a4 <HAL_GPIO_WritePin>
 8000b58:	2200      	movs	r2, #0
 8000b5a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000b5e:	4896      	ldr	r0, [pc, #600]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000b60:	f004 fd20 	bl	80055a4 <HAL_GPIO_WritePin>
 8000b64:	2200      	movs	r2, #0
 8000b66:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000b6a:	4893      	ldr	r0, [pc, #588]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000b6c:	f004 fd1a 	bl	80055a4 <HAL_GPIO_WritePin>
 8000b70:	2200      	movs	r2, #0
 8000b72:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000b76:	4890      	ldr	r0, [pc, #576]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000b78:	f004 fd14 	bl	80055a4 <HAL_GPIO_WritePin>
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000b82:	488d      	ldr	r0, [pc, #564]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000b84:	f004 fd0e 	bl	80055a4 <HAL_GPIO_WritePin>
 8000b88:	2200      	movs	r2, #0
 8000b8a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000b8e:	488a      	ldr	r0, [pc, #552]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000b90:	f004 fd08 	bl	80055a4 <HAL_GPIO_WritePin>
					DGT2_G_OFF;
 8000b94:	2201      	movs	r2, #1
 8000b96:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000b9a:	4887      	ldr	r0, [pc, #540]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000b9c:	f004 fd02 	bl	80055a4 <HAL_GPIO_WritePin>
				break;
 8000ba0:	e18d      	b.n	8000ebe <_7SEG_SetNumber+0x792>
			case 1: DGT2_B_ON; DGT2_C_ON;
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000ba8:	4883      	ldr	r0, [pc, #524]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000baa:	f004 fcfb 	bl	80055a4 <HAL_GPIO_WritePin>
 8000bae:	2200      	movs	r2, #0
 8000bb0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000bb4:	4880      	ldr	r0, [pc, #512]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000bb6:	f004 fcf5 	bl	80055a4 <HAL_GPIO_WritePin>
					DGT2_A_OFF; DGT2_D_OFF; DGT2_E_OFF; DGT2_F_OFF; DGT2_G_OFF;
 8000bba:	2201      	movs	r2, #1
 8000bbc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000bc0:	487d      	ldr	r0, [pc, #500]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000bc2:	f004 fcef 	bl	80055a4 <HAL_GPIO_WritePin>
 8000bc6:	2201      	movs	r2, #1
 8000bc8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000bcc:	487a      	ldr	r0, [pc, #488]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000bce:	f004 fce9 	bl	80055a4 <HAL_GPIO_WritePin>
 8000bd2:	2201      	movs	r2, #1
 8000bd4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000bd8:	4877      	ldr	r0, [pc, #476]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000bda:	f004 fce3 	bl	80055a4 <HAL_GPIO_WritePin>
 8000bde:	2201      	movs	r2, #1
 8000be0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000be4:	4874      	ldr	r0, [pc, #464]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000be6:	f004 fcdd 	bl	80055a4 <HAL_GPIO_WritePin>
 8000bea:	2201      	movs	r2, #1
 8000bec:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000bf0:	4871      	ldr	r0, [pc, #452]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000bf2:	f004 fcd7 	bl	80055a4 <HAL_GPIO_WritePin>
				break;
 8000bf6:	e162      	b.n	8000ebe <_7SEG_SetNumber+0x792>
			case 2: DGT2_A_ON; DGT2_B_ON; DGT2_G_ON; DGT2_E_ON; DGT2_D_ON;
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000bfe:	486e      	ldr	r0, [pc, #440]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000c00:	f004 fcd0 	bl	80055a4 <HAL_GPIO_WritePin>
 8000c04:	2200      	movs	r2, #0
 8000c06:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000c0a:	486b      	ldr	r0, [pc, #428]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000c0c:	f004 fcca 	bl	80055a4 <HAL_GPIO_WritePin>
 8000c10:	2200      	movs	r2, #0
 8000c12:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000c16:	4868      	ldr	r0, [pc, #416]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000c18:	f004 fcc4 	bl	80055a4 <HAL_GPIO_WritePin>
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000c22:	4865      	ldr	r0, [pc, #404]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000c24:	f004 fcbe 	bl	80055a4 <HAL_GPIO_WritePin>
 8000c28:	2200      	movs	r2, #0
 8000c2a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000c2e:	4862      	ldr	r0, [pc, #392]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000c30:	f004 fcb8 	bl	80055a4 <HAL_GPIO_WritePin>
					DGT2_C_OFF; DGT2_F_OFF;
 8000c34:	2201      	movs	r2, #1
 8000c36:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000c3a:	485f      	ldr	r0, [pc, #380]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000c3c:	f004 fcb2 	bl	80055a4 <HAL_GPIO_WritePin>
 8000c40:	2201      	movs	r2, #1
 8000c42:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000c46:	485c      	ldr	r0, [pc, #368]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000c48:	f004 fcac 	bl	80055a4 <HAL_GPIO_WritePin>
				break;
 8000c4c:	e137      	b.n	8000ebe <_7SEG_SetNumber+0x792>
			case 3: DGT2_A_ON; DGT2_B_ON; DGT2_C_ON; DGT2_D_ON; DGT2_G_ON;
 8000c4e:	2200      	movs	r2, #0
 8000c50:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000c54:	4858      	ldr	r0, [pc, #352]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000c56:	f004 fca5 	bl	80055a4 <HAL_GPIO_WritePin>
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000c60:	4855      	ldr	r0, [pc, #340]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000c62:	f004 fc9f 	bl	80055a4 <HAL_GPIO_WritePin>
 8000c66:	2200      	movs	r2, #0
 8000c68:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000c6c:	4852      	ldr	r0, [pc, #328]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000c6e:	f004 fc99 	bl	80055a4 <HAL_GPIO_WritePin>
 8000c72:	2200      	movs	r2, #0
 8000c74:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000c78:	484f      	ldr	r0, [pc, #316]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000c7a:	f004 fc93 	bl	80055a4 <HAL_GPIO_WritePin>
 8000c7e:	2200      	movs	r2, #0
 8000c80:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000c84:	484c      	ldr	r0, [pc, #304]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000c86:	f004 fc8d 	bl	80055a4 <HAL_GPIO_WritePin>
					DGT2_E_OFF; DGT2_F_OFF;
 8000c8a:	2201      	movs	r2, #1
 8000c8c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000c90:	4849      	ldr	r0, [pc, #292]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000c92:	f004 fc87 	bl	80055a4 <HAL_GPIO_WritePin>
 8000c96:	2201      	movs	r2, #1
 8000c98:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000c9c:	4846      	ldr	r0, [pc, #280]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000c9e:	f004 fc81 	bl	80055a4 <HAL_GPIO_WritePin>
				break;
 8000ca2:	e10c      	b.n	8000ebe <_7SEG_SetNumber+0x792>
			case 4: DGT2_F_ON; DGT2_G_ON; DGT2_B_ON; DGT2_C_ON;
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000caa:	4843      	ldr	r0, [pc, #268]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000cac:	f004 fc7a 	bl	80055a4 <HAL_GPIO_WritePin>
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000cb6:	4840      	ldr	r0, [pc, #256]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000cb8:	f004 fc74 	bl	80055a4 <HAL_GPIO_WritePin>
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000cc2:	483d      	ldr	r0, [pc, #244]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000cc4:	f004 fc6e 	bl	80055a4 <HAL_GPIO_WritePin>
 8000cc8:	2200      	movs	r2, #0
 8000cca:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000cce:	483a      	ldr	r0, [pc, #232]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000cd0:	f004 fc68 	bl	80055a4 <HAL_GPIO_WritePin>
					DGT2_A_OFF; DGT2_D_OFF; DGT2_E_OFF;
 8000cd4:	2201      	movs	r2, #1
 8000cd6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000cda:	4837      	ldr	r0, [pc, #220]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000cdc:	f004 fc62 	bl	80055a4 <HAL_GPIO_WritePin>
 8000ce0:	2201      	movs	r2, #1
 8000ce2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000ce6:	4834      	ldr	r0, [pc, #208]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000ce8:	f004 fc5c 	bl	80055a4 <HAL_GPIO_WritePin>
 8000cec:	2201      	movs	r2, #1
 8000cee:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000cf2:	4831      	ldr	r0, [pc, #196]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000cf4:	f004 fc56 	bl	80055a4 <HAL_GPIO_WritePin>
				break;
 8000cf8:	e0e1      	b.n	8000ebe <_7SEG_SetNumber+0x792>
			case 5: DGT2_A_ON; DGT2_F_ON; DGT2_G_ON; DGT2_C_ON; DGT2_D_ON;
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000d00:	482d      	ldr	r0, [pc, #180]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000d02:	f004 fc4f 	bl	80055a4 <HAL_GPIO_WritePin>
 8000d06:	2200      	movs	r2, #0
 8000d08:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000d0c:	482a      	ldr	r0, [pc, #168]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000d0e:	f004 fc49 	bl	80055a4 <HAL_GPIO_WritePin>
 8000d12:	2200      	movs	r2, #0
 8000d14:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000d18:	4827      	ldr	r0, [pc, #156]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000d1a:	f004 fc43 	bl	80055a4 <HAL_GPIO_WritePin>
 8000d1e:	2200      	movs	r2, #0
 8000d20:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000d24:	4824      	ldr	r0, [pc, #144]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000d26:	f004 fc3d 	bl	80055a4 <HAL_GPIO_WritePin>
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000d30:	4821      	ldr	r0, [pc, #132]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000d32:	f004 fc37 	bl	80055a4 <HAL_GPIO_WritePin>
					DGT2_B_OFF; DGT2_E_OFF;
 8000d36:	2201      	movs	r2, #1
 8000d38:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000d3c:	481e      	ldr	r0, [pc, #120]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000d3e:	f004 fc31 	bl	80055a4 <HAL_GPIO_WritePin>
 8000d42:	2201      	movs	r2, #1
 8000d44:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000d48:	481b      	ldr	r0, [pc, #108]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000d4a:	f004 fc2b 	bl	80055a4 <HAL_GPIO_WritePin>
				break;
 8000d4e:	e0b6      	b.n	8000ebe <_7SEG_SetNumber+0x792>
			case 6: DGT2_A_ON; DGT2_C_ON; DGT2_D_ON; DGT2_E_ON; DGT2_F_ON; DGT2_G_ON;
 8000d50:	2200      	movs	r2, #0
 8000d52:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000d56:	4818      	ldr	r0, [pc, #96]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000d58:	f004 fc24 	bl	80055a4 <HAL_GPIO_WritePin>
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000d62:	4815      	ldr	r0, [pc, #84]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000d64:	f004 fc1e 	bl	80055a4 <HAL_GPIO_WritePin>
 8000d68:	2200      	movs	r2, #0
 8000d6a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000d6e:	4812      	ldr	r0, [pc, #72]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000d70:	f004 fc18 	bl	80055a4 <HAL_GPIO_WritePin>
 8000d74:	2200      	movs	r2, #0
 8000d76:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000d7a:	480f      	ldr	r0, [pc, #60]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000d7c:	f004 fc12 	bl	80055a4 <HAL_GPIO_WritePin>
 8000d80:	2200      	movs	r2, #0
 8000d82:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000d86:	480c      	ldr	r0, [pc, #48]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000d88:	f004 fc0c 	bl	80055a4 <HAL_GPIO_WritePin>
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000d92:	4809      	ldr	r0, [pc, #36]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000d94:	f004 fc06 	bl	80055a4 <HAL_GPIO_WritePin>
					DGT2_B_OFF;
 8000d98:	2201      	movs	r2, #1
 8000d9a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000d9e:	4806      	ldr	r0, [pc, #24]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000da0:	f004 fc00 	bl	80055a4 <HAL_GPIO_WritePin>
				break;
 8000da4:	e08b      	b.n	8000ebe <_7SEG_SetNumber+0x792>
 8000da6:	bf00      	nop
 8000da8:	40020c00 	.word	0x40020c00
 8000dac:	40020000 	.word	0x40020000
 8000db0:	40020800 	.word	0x40020800
 8000db4:	66666667 	.word	0x66666667
 8000db8:	40021000 	.word	0x40021000
			case 7: DGT2_F_ON; DGT2_A_ON; DGT2_B_ON; DGT2_C_ON;
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000dc2:	484a      	ldr	r0, [pc, #296]	@ (8000eec <_7SEG_SetNumber+0x7c0>)
 8000dc4:	f004 fbee 	bl	80055a4 <HAL_GPIO_WritePin>
 8000dc8:	2200      	movs	r2, #0
 8000dca:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000dce:	4847      	ldr	r0, [pc, #284]	@ (8000eec <_7SEG_SetNumber+0x7c0>)
 8000dd0:	f004 fbe8 	bl	80055a4 <HAL_GPIO_WritePin>
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000dda:	4844      	ldr	r0, [pc, #272]	@ (8000eec <_7SEG_SetNumber+0x7c0>)
 8000ddc:	f004 fbe2 	bl	80055a4 <HAL_GPIO_WritePin>
 8000de0:	2200      	movs	r2, #0
 8000de2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000de6:	4841      	ldr	r0, [pc, #260]	@ (8000eec <_7SEG_SetNumber+0x7c0>)
 8000de8:	f004 fbdc 	bl	80055a4 <HAL_GPIO_WritePin>
					DGT2_D_OFF; DGT2_E_OFF; DGT2_G_OFF;
 8000dec:	2201      	movs	r2, #1
 8000dee:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000df2:	483e      	ldr	r0, [pc, #248]	@ (8000eec <_7SEG_SetNumber+0x7c0>)
 8000df4:	f004 fbd6 	bl	80055a4 <HAL_GPIO_WritePin>
 8000df8:	2201      	movs	r2, #1
 8000dfa:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000dfe:	483b      	ldr	r0, [pc, #236]	@ (8000eec <_7SEG_SetNumber+0x7c0>)
 8000e00:	f004 fbd0 	bl	80055a4 <HAL_GPIO_WritePin>
 8000e04:	2201      	movs	r2, #1
 8000e06:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000e0a:	4838      	ldr	r0, [pc, #224]	@ (8000eec <_7SEG_SetNumber+0x7c0>)
 8000e0c:	f004 fbca 	bl	80055a4 <HAL_GPIO_WritePin>
				break;
 8000e10:	e055      	b.n	8000ebe <_7SEG_SetNumber+0x792>
			case 8: DGT2_A_ON; DGT2_B_ON; DGT2_C_ON; DGT2_D_ON; DGT2_E_ON; DGT2_F_ON; DGT2_G_ON;
 8000e12:	2200      	movs	r2, #0
 8000e14:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000e18:	4834      	ldr	r0, [pc, #208]	@ (8000eec <_7SEG_SetNumber+0x7c0>)
 8000e1a:	f004 fbc3 	bl	80055a4 <HAL_GPIO_WritePin>
 8000e1e:	2200      	movs	r2, #0
 8000e20:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000e24:	4831      	ldr	r0, [pc, #196]	@ (8000eec <_7SEG_SetNumber+0x7c0>)
 8000e26:	f004 fbbd 	bl	80055a4 <HAL_GPIO_WritePin>
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000e30:	482e      	ldr	r0, [pc, #184]	@ (8000eec <_7SEG_SetNumber+0x7c0>)
 8000e32:	f004 fbb7 	bl	80055a4 <HAL_GPIO_WritePin>
 8000e36:	2200      	movs	r2, #0
 8000e38:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000e3c:	482b      	ldr	r0, [pc, #172]	@ (8000eec <_7SEG_SetNumber+0x7c0>)
 8000e3e:	f004 fbb1 	bl	80055a4 <HAL_GPIO_WritePin>
 8000e42:	2200      	movs	r2, #0
 8000e44:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000e48:	4828      	ldr	r0, [pc, #160]	@ (8000eec <_7SEG_SetNumber+0x7c0>)
 8000e4a:	f004 fbab 	bl	80055a4 <HAL_GPIO_WritePin>
 8000e4e:	2200      	movs	r2, #0
 8000e50:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000e54:	4825      	ldr	r0, [pc, #148]	@ (8000eec <_7SEG_SetNumber+0x7c0>)
 8000e56:	f004 fba5 	bl	80055a4 <HAL_GPIO_WritePin>
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000e60:	4822      	ldr	r0, [pc, #136]	@ (8000eec <_7SEG_SetNumber+0x7c0>)
 8000e62:	f004 fb9f 	bl	80055a4 <HAL_GPIO_WritePin>
				break;
 8000e66:	e02a      	b.n	8000ebe <_7SEG_SetNumber+0x792>
			case 9: DGT2_A_ON; DGT2_B_ON; DGT2_C_ON; DGT2_D_ON; DGT2_F_ON; DGT2_G_ON;
 8000e68:	2200      	movs	r2, #0
 8000e6a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000e6e:	481f      	ldr	r0, [pc, #124]	@ (8000eec <_7SEG_SetNumber+0x7c0>)
 8000e70:	f004 fb98 	bl	80055a4 <HAL_GPIO_WritePin>
 8000e74:	2200      	movs	r2, #0
 8000e76:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000e7a:	481c      	ldr	r0, [pc, #112]	@ (8000eec <_7SEG_SetNumber+0x7c0>)
 8000e7c:	f004 fb92 	bl	80055a4 <HAL_GPIO_WritePin>
 8000e80:	2200      	movs	r2, #0
 8000e82:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000e86:	4819      	ldr	r0, [pc, #100]	@ (8000eec <_7SEG_SetNumber+0x7c0>)
 8000e88:	f004 fb8c 	bl	80055a4 <HAL_GPIO_WritePin>
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000e92:	4816      	ldr	r0, [pc, #88]	@ (8000eec <_7SEG_SetNumber+0x7c0>)
 8000e94:	f004 fb86 	bl	80055a4 <HAL_GPIO_WritePin>
 8000e98:	2200      	movs	r2, #0
 8000e9a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000e9e:	4813      	ldr	r0, [pc, #76]	@ (8000eec <_7SEG_SetNumber+0x7c0>)
 8000ea0:	f004 fb80 	bl	80055a4 <HAL_GPIO_WritePin>
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000eaa:	4810      	ldr	r0, [pc, #64]	@ (8000eec <_7SEG_SetNumber+0x7c0>)
 8000eac:	f004 fb7a 	bl	80055a4 <HAL_GPIO_WritePin>
					DGT2_E_OFF;
 8000eb0:	2201      	movs	r2, #1
 8000eb2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000eb6:	480d      	ldr	r0, [pc, #52]	@ (8000eec <_7SEG_SetNumber+0x7c0>)
 8000eb8:	f004 fb74 	bl	80055a4 <HAL_GPIO_WritePin>
				break;
 8000ebc:	bf00      	nop
		if(dp == ON)
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	2b01      	cmp	r3, #1
 8000ec2:	d106      	bne.n	8000ed2 <_7SEG_SetNumber+0x7a6>
			DGT2_DP_ON;
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000eca:	4808      	ldr	r0, [pc, #32]	@ (8000eec <_7SEG_SetNumber+0x7c0>)
 8000ecc:	f004 fb6a 	bl	80055a4 <HAL_GPIO_WritePin>
}
 8000ed0:	e008      	b.n	8000ee4 <_7SEG_SetNumber+0x7b8>
		else if(dp == OFF)
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d105      	bne.n	8000ee4 <_7SEG_SetNumber+0x7b8>
			DGT2_DP_OFF;
 8000ed8:	2201      	movs	r2, #1
 8000eda:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000ede:	4803      	ldr	r0, [pc, #12]	@ (8000eec <_7SEG_SetNumber+0x7c0>)
 8000ee0:	f004 fb60 	bl	80055a4 <HAL_GPIO_WritePin>
}
 8000ee4:	bf00      	nop
 8000ee6:	3710      	adds	r7, #16
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	40021000 	.word	0x40021000

08000ef0 <CLCD_GPIO_Init>:
 */

#include "CLCD.h"

void CLCD_GPIO_Init(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b086      	sub	sp, #24
 8000ef4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct;

	/* GPIOE Periph clock enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	603b      	str	r3, [r7, #0]
 8000efa:	4b23      	ldr	r3, [pc, #140]	@ (8000f88 <CLCD_GPIO_Init+0x98>)
 8000efc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000efe:	4a22      	ldr	r2, [pc, #136]	@ (8000f88 <CLCD_GPIO_Init+0x98>)
 8000f00:	f043 0310 	orr.w	r3, r3, #16
 8000f04:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f06:	4b20      	ldr	r3, [pc, #128]	@ (8000f88 <CLCD_GPIO_Init+0x98>)
 8000f08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f0a:	f003 0310 	and.w	r3, r3, #16
 8000f0e:	603b      	str	r3, [r7, #0]
 8000f10:	683b      	ldr	r3, [r7, #0]

	/* Configure RS, RW, EN, D4, D5, D6, D7 in output pushpull mode */
	GPIO_InitStruct.Pin = GPIO_PIN_RS;
 8000f12:	2301      	movs	r3, #1
 8000f14:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f16:	2301      	movs	r3, #1
 8000f18:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIO_RS, &GPIO_InitStruct);
 8000f22:	1d3b      	adds	r3, r7, #4
 8000f24:	4619      	mov	r1, r3
 8000f26:	4819      	ldr	r0, [pc, #100]	@ (8000f8c <CLCD_GPIO_Init+0x9c>)
 8000f28:	f004 f988 	bl	800523c <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = GPIO_PIN_RW;
 8000f2c:	2302      	movs	r3, #2
 8000f2e:	607b      	str	r3, [r7, #4]
	HAL_GPIO_Init(GPIO_RW, &GPIO_InitStruct);
 8000f30:	1d3b      	adds	r3, r7, #4
 8000f32:	4619      	mov	r1, r3
 8000f34:	4815      	ldr	r0, [pc, #84]	@ (8000f8c <CLCD_GPIO_Init+0x9c>)
 8000f36:	f004 f981 	bl	800523c <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = GPIO_PIN_EN;
 8000f3a:	2304      	movs	r3, #4
 8000f3c:	607b      	str	r3, [r7, #4]
	HAL_GPIO_Init(GPIO_EN, &GPIO_InitStruct);
 8000f3e:	1d3b      	adds	r3, r7, #4
 8000f40:	4619      	mov	r1, r3
 8000f42:	4812      	ldr	r0, [pc, #72]	@ (8000f8c <CLCD_GPIO_Init+0x9c>)
 8000f44:	f004 f97a 	bl	800523c <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = GPIO_PIN_D4;
 8000f48:	2310      	movs	r3, #16
 8000f4a:	607b      	str	r3, [r7, #4]
	HAL_GPIO_Init(GPIO_D4, &GPIO_InitStruct);
 8000f4c:	1d3b      	adds	r3, r7, #4
 8000f4e:	4619      	mov	r1, r3
 8000f50:	480e      	ldr	r0, [pc, #56]	@ (8000f8c <CLCD_GPIO_Init+0x9c>)
 8000f52:	f004 f973 	bl	800523c <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = GPIO_PIN_D5;
 8000f56:	2320      	movs	r3, #32
 8000f58:	607b      	str	r3, [r7, #4]
	HAL_GPIO_Init(GPIO_D5, &GPIO_InitStruct);
 8000f5a:	1d3b      	adds	r3, r7, #4
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	480b      	ldr	r0, [pc, #44]	@ (8000f8c <CLCD_GPIO_Init+0x9c>)
 8000f60:	f004 f96c 	bl	800523c <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = GPIO_PIN_D6;
 8000f64:	2340      	movs	r3, #64	@ 0x40
 8000f66:	607b      	str	r3, [r7, #4]
	HAL_GPIO_Init(GPIO_D6, &GPIO_InitStruct);
 8000f68:	1d3b      	adds	r3, r7, #4
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	4807      	ldr	r0, [pc, #28]	@ (8000f8c <CLCD_GPIO_Init+0x9c>)
 8000f6e:	f004 f965 	bl	800523c <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = GPIO_PIN_D7;
 8000f72:	2380      	movs	r3, #128	@ 0x80
 8000f74:	607b      	str	r3, [r7, #4]
	HAL_GPIO_Init(GPIO_D7, &GPIO_InitStruct);
 8000f76:	1d3b      	adds	r3, r7, #4
 8000f78:	4619      	mov	r1, r3
 8000f7a:	4804      	ldr	r0, [pc, #16]	@ (8000f8c <CLCD_GPIO_Init+0x9c>)
 8000f7c:	f004 f95e 	bl	800523c <HAL_GPIO_Init>
}
 8000f80:	bf00      	nop
 8000f82:	3718      	adds	r7, #24
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	40023800 	.word	0x40023800
 8000f8c:	40021000 	.word	0x40021000

08000f90 <CLCD_Write_Instruction>:

void CLCD_Write_Instruction(unsigned char b)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b082      	sub	sp, #8
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	4603      	mov	r3, r0
 8000f98:	71fb      	strb	r3, [r7, #7]
	//���� 4��Ʈ
	GPIO_D7->ODR = (b & 0x80) ? GPIO_D7->ODR | GPIO_PIN_D7 : GPIO_D7->ODR & ~GPIO_PIN_D7; //D7
 8000f9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	da04      	bge.n	8000fac <CLCD_Write_Instruction+0x1c>
 8000fa2:	4b5f      	ldr	r3, [pc, #380]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 8000fa4:	695b      	ldr	r3, [r3, #20]
 8000fa6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000faa:	e003      	b.n	8000fb4 <CLCD_Write_Instruction+0x24>
 8000fac:	4b5c      	ldr	r3, [pc, #368]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 8000fae:	695b      	ldr	r3, [r3, #20]
 8000fb0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000fb4:	4a5a      	ldr	r2, [pc, #360]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 8000fb6:	6153      	str	r3, [r2, #20]
	GPIO_D6->ODR = (b & 0x40) ? GPIO_D6->ODR | GPIO_PIN_D6 : GPIO_D6->ODR & ~GPIO_PIN_D6; //D6
 8000fb8:	79fb      	ldrb	r3, [r7, #7]
 8000fba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d004      	beq.n	8000fcc <CLCD_Write_Instruction+0x3c>
 8000fc2:	4b57      	ldr	r3, [pc, #348]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 8000fc4:	695b      	ldr	r3, [r3, #20]
 8000fc6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000fca:	e003      	b.n	8000fd4 <CLCD_Write_Instruction+0x44>
 8000fcc:	4b54      	ldr	r3, [pc, #336]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 8000fce:	695b      	ldr	r3, [r3, #20]
 8000fd0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000fd4:	4a52      	ldr	r2, [pc, #328]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 8000fd6:	6153      	str	r3, [r2, #20]
	GPIO_D5->ODR = (b & 0x20) ? GPIO_D5->ODR | GPIO_PIN_D5 : GPIO_D5->ODR & ~GPIO_PIN_D5; //D5
 8000fd8:	79fb      	ldrb	r3, [r7, #7]
 8000fda:	f003 0320 	and.w	r3, r3, #32
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d004      	beq.n	8000fec <CLCD_Write_Instruction+0x5c>
 8000fe2:	4b4f      	ldr	r3, [pc, #316]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 8000fe4:	695b      	ldr	r3, [r3, #20]
 8000fe6:	f043 0320 	orr.w	r3, r3, #32
 8000fea:	e003      	b.n	8000ff4 <CLCD_Write_Instruction+0x64>
 8000fec:	4b4c      	ldr	r3, [pc, #304]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 8000fee:	695b      	ldr	r3, [r3, #20]
 8000ff0:	f023 0320 	bic.w	r3, r3, #32
 8000ff4:	4a4a      	ldr	r2, [pc, #296]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 8000ff6:	6153      	str	r3, [r2, #20]
	GPIO_D4->ODR = (b & 0x10) ? GPIO_D4->ODR | GPIO_PIN_D4 : GPIO_D4->ODR & ~GPIO_PIN_D4; //D4
 8000ff8:	79fb      	ldrb	r3, [r7, #7]
 8000ffa:	f003 0310 	and.w	r3, r3, #16
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d004      	beq.n	800100c <CLCD_Write_Instruction+0x7c>
 8001002:	4b47      	ldr	r3, [pc, #284]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 8001004:	695b      	ldr	r3, [r3, #20]
 8001006:	f043 0310 	orr.w	r3, r3, #16
 800100a:	e003      	b.n	8001014 <CLCD_Write_Instruction+0x84>
 800100c:	4b44      	ldr	r3, [pc, #272]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 800100e:	695b      	ldr	r3, [r3, #20]
 8001010:	f023 0310 	bic.w	r3, r3, #16
 8001014:	4a42      	ldr	r2, [pc, #264]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 8001016:	6153      	str	r3, [r2, #20]

	GPIO_RS->ODR = GPIO_RS->ODR & ~GPIO_PIN_RS; //RS�� Low
 8001018:	4b41      	ldr	r3, [pc, #260]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 800101a:	695b      	ldr	r3, [r3, #20]
 800101c:	4a40      	ldr	r2, [pc, #256]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 800101e:	f023 0301 	bic.w	r3, r3, #1
 8001022:	6153      	str	r3, [r2, #20]
	GPIO_RW->ODR = GPIO_RW->ODR & ~GPIO_PIN_RW; //RW�� Low
 8001024:	4b3e      	ldr	r3, [pc, #248]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 8001026:	695b      	ldr	r3, [r3, #20]
 8001028:	4a3d      	ldr	r2, [pc, #244]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 800102a:	f023 0302 	bic.w	r3, r3, #2
 800102e:	6153      	str	r3, [r2, #20]
	GPIO_EN->ODR = GPIO_EN->ODR & ~GPIO_PIN_EN; //EN�� Low
 8001030:	4b3b      	ldr	r3, [pc, #236]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 8001032:	695b      	ldr	r3, [r3, #20]
 8001034:	4a3a      	ldr	r2, [pc, #232]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 8001036:	f023 0304 	bic.w	r3, r3, #4
 800103a:	6153      	str	r3, [r2, #20]

	GPIO_EN->ODR = GPIO_EN->ODR | GPIO_PIN_EN; //EN�� High
 800103c:	4b38      	ldr	r3, [pc, #224]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 800103e:	695b      	ldr	r3, [r3, #20]
 8001040:	4a37      	ldr	r2, [pc, #220]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 8001042:	f043 0304 	orr.w	r3, r3, #4
 8001046:	6153      	str	r3, [r2, #20]
	GPIO_EN->ODR = GPIO_EN->ODR & ~GPIO_PIN_EN; //EN�� Low
 8001048:	4b35      	ldr	r3, [pc, #212]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 800104a:	695b      	ldr	r3, [r3, #20]
 800104c:	4a34      	ldr	r2, [pc, #208]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 800104e:	f023 0304 	bic.w	r3, r3, #4
 8001052:	6153      	str	r3, [r2, #20]

	//���� 4��Ʈ
	GPIO_D7->ODR = (b & 0x08) ? GPIO_D7->ODR | GPIO_PIN_D7 : GPIO_D7->ODR & ~GPIO_PIN_D7; //D7
 8001054:	79fb      	ldrb	r3, [r7, #7]
 8001056:	f003 0308 	and.w	r3, r3, #8
 800105a:	2b00      	cmp	r3, #0
 800105c:	d004      	beq.n	8001068 <CLCD_Write_Instruction+0xd8>
 800105e:	4b30      	ldr	r3, [pc, #192]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 8001060:	695b      	ldr	r3, [r3, #20]
 8001062:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001066:	e003      	b.n	8001070 <CLCD_Write_Instruction+0xe0>
 8001068:	4b2d      	ldr	r3, [pc, #180]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 800106a:	695b      	ldr	r3, [r3, #20]
 800106c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001070:	4a2b      	ldr	r2, [pc, #172]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 8001072:	6153      	str	r3, [r2, #20]
	GPIO_D6->ODR = (b & 0x04) ? GPIO_D6->ODR | GPIO_PIN_D6 : GPIO_D6->ODR & ~GPIO_PIN_D6; //D6
 8001074:	79fb      	ldrb	r3, [r7, #7]
 8001076:	f003 0304 	and.w	r3, r3, #4
 800107a:	2b00      	cmp	r3, #0
 800107c:	d004      	beq.n	8001088 <CLCD_Write_Instruction+0xf8>
 800107e:	4b28      	ldr	r3, [pc, #160]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 8001080:	695b      	ldr	r3, [r3, #20]
 8001082:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001086:	e003      	b.n	8001090 <CLCD_Write_Instruction+0x100>
 8001088:	4b25      	ldr	r3, [pc, #148]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 800108a:	695b      	ldr	r3, [r3, #20]
 800108c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001090:	4a23      	ldr	r2, [pc, #140]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 8001092:	6153      	str	r3, [r2, #20]
	GPIO_D5->ODR = (b & 0x02) ? GPIO_D5->ODR | GPIO_PIN_D5 : GPIO_D5->ODR & ~GPIO_PIN_D5; //D5
 8001094:	79fb      	ldrb	r3, [r7, #7]
 8001096:	f003 0302 	and.w	r3, r3, #2
 800109a:	2b00      	cmp	r3, #0
 800109c:	d004      	beq.n	80010a8 <CLCD_Write_Instruction+0x118>
 800109e:	4b20      	ldr	r3, [pc, #128]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 80010a0:	695b      	ldr	r3, [r3, #20]
 80010a2:	f043 0320 	orr.w	r3, r3, #32
 80010a6:	e003      	b.n	80010b0 <CLCD_Write_Instruction+0x120>
 80010a8:	4b1d      	ldr	r3, [pc, #116]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 80010aa:	695b      	ldr	r3, [r3, #20]
 80010ac:	f023 0320 	bic.w	r3, r3, #32
 80010b0:	4a1b      	ldr	r2, [pc, #108]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 80010b2:	6153      	str	r3, [r2, #20]
	GPIO_D4->ODR = (b & 0x01) ? GPIO_D4->ODR | GPIO_PIN_D4 : GPIO_D4->ODR & ~GPIO_PIN_D4; //D4
 80010b4:	79fb      	ldrb	r3, [r7, #7]
 80010b6:	f003 0301 	and.w	r3, r3, #1
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d004      	beq.n	80010c8 <CLCD_Write_Instruction+0x138>
 80010be:	4b18      	ldr	r3, [pc, #96]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 80010c0:	695b      	ldr	r3, [r3, #20]
 80010c2:	f043 0310 	orr.w	r3, r3, #16
 80010c6:	e003      	b.n	80010d0 <CLCD_Write_Instruction+0x140>
 80010c8:	4b15      	ldr	r3, [pc, #84]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 80010ca:	695b      	ldr	r3, [r3, #20]
 80010cc:	f023 0310 	bic.w	r3, r3, #16
 80010d0:	4a13      	ldr	r2, [pc, #76]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 80010d2:	6153      	str	r3, [r2, #20]

	GPIO_RS->ODR = GPIO_RS->ODR & ~GPIO_PIN_RS; //RS�� Low
 80010d4:	4b12      	ldr	r3, [pc, #72]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 80010d6:	695b      	ldr	r3, [r3, #20]
 80010d8:	4a11      	ldr	r2, [pc, #68]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 80010da:	f023 0301 	bic.w	r3, r3, #1
 80010de:	6153      	str	r3, [r2, #20]
	GPIO_RW->ODR = GPIO_RW->ODR & ~GPIO_PIN_RW; //RW�� Low
 80010e0:	4b0f      	ldr	r3, [pc, #60]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 80010e2:	695b      	ldr	r3, [r3, #20]
 80010e4:	4a0e      	ldr	r2, [pc, #56]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 80010e6:	f023 0302 	bic.w	r3, r3, #2
 80010ea:	6153      	str	r3, [r2, #20]
	GPIO_EN->ODR = GPIO_EN->ODR & ~GPIO_PIN_EN; //EN�� Low
 80010ec:	4b0c      	ldr	r3, [pc, #48]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 80010ee:	695b      	ldr	r3, [r3, #20]
 80010f0:	4a0b      	ldr	r2, [pc, #44]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 80010f2:	f023 0304 	bic.w	r3, r3, #4
 80010f6:	6153      	str	r3, [r2, #20]

	GPIO_EN->ODR = GPIO_EN->ODR | GPIO_PIN_EN; //EN�� High
 80010f8:	4b09      	ldr	r3, [pc, #36]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 80010fa:	695b      	ldr	r3, [r3, #20]
 80010fc:	4a08      	ldr	r2, [pc, #32]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 80010fe:	f043 0304 	orr.w	r3, r3, #4
 8001102:	6153      	str	r3, [r2, #20]
	GPIO_EN->ODR = GPIO_EN->ODR & ~GPIO_PIN_EN; //EN�� Low
 8001104:	4b06      	ldr	r3, [pc, #24]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 8001106:	695b      	ldr	r3, [r3, #20]
 8001108:	4a05      	ldr	r2, [pc, #20]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 800110a:	f023 0304 	bic.w	r3, r3, #4
 800110e:	6153      	str	r3, [r2, #20]

	HAL_Delay(1);
 8001110:	2001      	movs	r0, #1
 8001112:	f003 fecb 	bl	8004eac <HAL_Delay>
}
 8001116:	bf00      	nop
 8001118:	3708      	adds	r7, #8
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	40021000 	.word	0x40021000

08001124 <CLCD_Write_Display>:

void CLCD_Write_Display(unsigned char b)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b082      	sub	sp, #8
 8001128:	af00      	add	r7, sp, #0
 800112a:	4603      	mov	r3, r0
 800112c:	71fb      	strb	r3, [r7, #7]
	//���� 4��Ʈ
	GPIO_D7->ODR = (b & 0x80) ? GPIO_D7->ODR | GPIO_PIN_D7 : GPIO_D7->ODR & ~GPIO_PIN_D7; //D7
 800112e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001132:	2b00      	cmp	r3, #0
 8001134:	da04      	bge.n	8001140 <CLCD_Write_Display+0x1c>
 8001136:	4b5f      	ldr	r3, [pc, #380]	@ (80012b4 <CLCD_Write_Display+0x190>)
 8001138:	695b      	ldr	r3, [r3, #20]
 800113a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800113e:	e003      	b.n	8001148 <CLCD_Write_Display+0x24>
 8001140:	4b5c      	ldr	r3, [pc, #368]	@ (80012b4 <CLCD_Write_Display+0x190>)
 8001142:	695b      	ldr	r3, [r3, #20]
 8001144:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001148:	4a5a      	ldr	r2, [pc, #360]	@ (80012b4 <CLCD_Write_Display+0x190>)
 800114a:	6153      	str	r3, [r2, #20]
	GPIO_D6->ODR = (b & 0x40) ? GPIO_D6->ODR | GPIO_PIN_D6 : GPIO_D6->ODR & ~GPIO_PIN_D6; //D6
 800114c:	79fb      	ldrb	r3, [r7, #7]
 800114e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001152:	2b00      	cmp	r3, #0
 8001154:	d004      	beq.n	8001160 <CLCD_Write_Display+0x3c>
 8001156:	4b57      	ldr	r3, [pc, #348]	@ (80012b4 <CLCD_Write_Display+0x190>)
 8001158:	695b      	ldr	r3, [r3, #20]
 800115a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800115e:	e003      	b.n	8001168 <CLCD_Write_Display+0x44>
 8001160:	4b54      	ldr	r3, [pc, #336]	@ (80012b4 <CLCD_Write_Display+0x190>)
 8001162:	695b      	ldr	r3, [r3, #20]
 8001164:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001168:	4a52      	ldr	r2, [pc, #328]	@ (80012b4 <CLCD_Write_Display+0x190>)
 800116a:	6153      	str	r3, [r2, #20]
	GPIO_D5->ODR = (b & 0x20) ? GPIO_D5->ODR | GPIO_PIN_D5 : GPIO_D5->ODR & ~GPIO_PIN_D5; //D5
 800116c:	79fb      	ldrb	r3, [r7, #7]
 800116e:	f003 0320 	and.w	r3, r3, #32
 8001172:	2b00      	cmp	r3, #0
 8001174:	d004      	beq.n	8001180 <CLCD_Write_Display+0x5c>
 8001176:	4b4f      	ldr	r3, [pc, #316]	@ (80012b4 <CLCD_Write_Display+0x190>)
 8001178:	695b      	ldr	r3, [r3, #20]
 800117a:	f043 0320 	orr.w	r3, r3, #32
 800117e:	e003      	b.n	8001188 <CLCD_Write_Display+0x64>
 8001180:	4b4c      	ldr	r3, [pc, #304]	@ (80012b4 <CLCD_Write_Display+0x190>)
 8001182:	695b      	ldr	r3, [r3, #20]
 8001184:	f023 0320 	bic.w	r3, r3, #32
 8001188:	4a4a      	ldr	r2, [pc, #296]	@ (80012b4 <CLCD_Write_Display+0x190>)
 800118a:	6153      	str	r3, [r2, #20]
	GPIO_D4->ODR = (b & 0x10) ? GPIO_D4->ODR | GPIO_PIN_D4 : GPIO_D4->ODR & ~GPIO_PIN_D4; //D4
 800118c:	79fb      	ldrb	r3, [r7, #7]
 800118e:	f003 0310 	and.w	r3, r3, #16
 8001192:	2b00      	cmp	r3, #0
 8001194:	d004      	beq.n	80011a0 <CLCD_Write_Display+0x7c>
 8001196:	4b47      	ldr	r3, [pc, #284]	@ (80012b4 <CLCD_Write_Display+0x190>)
 8001198:	695b      	ldr	r3, [r3, #20]
 800119a:	f043 0310 	orr.w	r3, r3, #16
 800119e:	e003      	b.n	80011a8 <CLCD_Write_Display+0x84>
 80011a0:	4b44      	ldr	r3, [pc, #272]	@ (80012b4 <CLCD_Write_Display+0x190>)
 80011a2:	695b      	ldr	r3, [r3, #20]
 80011a4:	f023 0310 	bic.w	r3, r3, #16
 80011a8:	4a42      	ldr	r2, [pc, #264]	@ (80012b4 <CLCD_Write_Display+0x190>)
 80011aa:	6153      	str	r3, [r2, #20]

	GPIO_RS->ODR = GPIO_RS->ODR | GPIO_PIN_RS; //RS�� High
 80011ac:	4b41      	ldr	r3, [pc, #260]	@ (80012b4 <CLCD_Write_Display+0x190>)
 80011ae:	695b      	ldr	r3, [r3, #20]
 80011b0:	4a40      	ldr	r2, [pc, #256]	@ (80012b4 <CLCD_Write_Display+0x190>)
 80011b2:	f043 0301 	orr.w	r3, r3, #1
 80011b6:	6153      	str	r3, [r2, #20]
	GPIO_RW->ODR = GPIO_RW->ODR & ~GPIO_PIN_RW; //RW�� Low
 80011b8:	4b3e      	ldr	r3, [pc, #248]	@ (80012b4 <CLCD_Write_Display+0x190>)
 80011ba:	695b      	ldr	r3, [r3, #20]
 80011bc:	4a3d      	ldr	r2, [pc, #244]	@ (80012b4 <CLCD_Write_Display+0x190>)
 80011be:	f023 0302 	bic.w	r3, r3, #2
 80011c2:	6153      	str	r3, [r2, #20]
	GPIO_EN->ODR = GPIO_EN->ODR & ~GPIO_PIN_EN; //EN�� Low
 80011c4:	4b3b      	ldr	r3, [pc, #236]	@ (80012b4 <CLCD_Write_Display+0x190>)
 80011c6:	695b      	ldr	r3, [r3, #20]
 80011c8:	4a3a      	ldr	r2, [pc, #232]	@ (80012b4 <CLCD_Write_Display+0x190>)
 80011ca:	f023 0304 	bic.w	r3, r3, #4
 80011ce:	6153      	str	r3, [r2, #20]

	GPIO_EN->ODR = GPIO_EN->ODR | GPIO_PIN_EN; //EN�� High
 80011d0:	4b38      	ldr	r3, [pc, #224]	@ (80012b4 <CLCD_Write_Display+0x190>)
 80011d2:	695b      	ldr	r3, [r3, #20]
 80011d4:	4a37      	ldr	r2, [pc, #220]	@ (80012b4 <CLCD_Write_Display+0x190>)
 80011d6:	f043 0304 	orr.w	r3, r3, #4
 80011da:	6153      	str	r3, [r2, #20]
	GPIO_EN->ODR = GPIO_EN->ODR & ~GPIO_PIN_EN; //EN�� Low
 80011dc:	4b35      	ldr	r3, [pc, #212]	@ (80012b4 <CLCD_Write_Display+0x190>)
 80011de:	695b      	ldr	r3, [r3, #20]
 80011e0:	4a34      	ldr	r2, [pc, #208]	@ (80012b4 <CLCD_Write_Display+0x190>)
 80011e2:	f023 0304 	bic.w	r3, r3, #4
 80011e6:	6153      	str	r3, [r2, #20]

	//���� 4��Ʈ
	GPIO_D7->ODR = (b & 0x08) ? GPIO_D7->ODR | GPIO_PIN_D7 : GPIO_D7->ODR & ~GPIO_PIN_D7; //D7
 80011e8:	79fb      	ldrb	r3, [r7, #7]
 80011ea:	f003 0308 	and.w	r3, r3, #8
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d004      	beq.n	80011fc <CLCD_Write_Display+0xd8>
 80011f2:	4b30      	ldr	r3, [pc, #192]	@ (80012b4 <CLCD_Write_Display+0x190>)
 80011f4:	695b      	ldr	r3, [r3, #20]
 80011f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80011fa:	e003      	b.n	8001204 <CLCD_Write_Display+0xe0>
 80011fc:	4b2d      	ldr	r3, [pc, #180]	@ (80012b4 <CLCD_Write_Display+0x190>)
 80011fe:	695b      	ldr	r3, [r3, #20]
 8001200:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001204:	4a2b      	ldr	r2, [pc, #172]	@ (80012b4 <CLCD_Write_Display+0x190>)
 8001206:	6153      	str	r3, [r2, #20]
	GPIO_D6->ODR = (b & 0x04) ? GPIO_D6->ODR | GPIO_PIN_D6 : GPIO_D6->ODR & ~GPIO_PIN_D6; //D6
 8001208:	79fb      	ldrb	r3, [r7, #7]
 800120a:	f003 0304 	and.w	r3, r3, #4
 800120e:	2b00      	cmp	r3, #0
 8001210:	d004      	beq.n	800121c <CLCD_Write_Display+0xf8>
 8001212:	4b28      	ldr	r3, [pc, #160]	@ (80012b4 <CLCD_Write_Display+0x190>)
 8001214:	695b      	ldr	r3, [r3, #20]
 8001216:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800121a:	e003      	b.n	8001224 <CLCD_Write_Display+0x100>
 800121c:	4b25      	ldr	r3, [pc, #148]	@ (80012b4 <CLCD_Write_Display+0x190>)
 800121e:	695b      	ldr	r3, [r3, #20]
 8001220:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001224:	4a23      	ldr	r2, [pc, #140]	@ (80012b4 <CLCD_Write_Display+0x190>)
 8001226:	6153      	str	r3, [r2, #20]
	GPIO_D5->ODR = (b & 0x02) ? GPIO_D5->ODR | GPIO_PIN_D5 : GPIO_D5->ODR & ~GPIO_PIN_D5; //D5
 8001228:	79fb      	ldrb	r3, [r7, #7]
 800122a:	f003 0302 	and.w	r3, r3, #2
 800122e:	2b00      	cmp	r3, #0
 8001230:	d004      	beq.n	800123c <CLCD_Write_Display+0x118>
 8001232:	4b20      	ldr	r3, [pc, #128]	@ (80012b4 <CLCD_Write_Display+0x190>)
 8001234:	695b      	ldr	r3, [r3, #20]
 8001236:	f043 0320 	orr.w	r3, r3, #32
 800123a:	e003      	b.n	8001244 <CLCD_Write_Display+0x120>
 800123c:	4b1d      	ldr	r3, [pc, #116]	@ (80012b4 <CLCD_Write_Display+0x190>)
 800123e:	695b      	ldr	r3, [r3, #20]
 8001240:	f023 0320 	bic.w	r3, r3, #32
 8001244:	4a1b      	ldr	r2, [pc, #108]	@ (80012b4 <CLCD_Write_Display+0x190>)
 8001246:	6153      	str	r3, [r2, #20]
	GPIO_D4->ODR = (b & 0x01) ? GPIO_D4->ODR | GPIO_PIN_D4 : GPIO_D4->ODR & ~GPIO_PIN_D4; //D4
 8001248:	79fb      	ldrb	r3, [r7, #7]
 800124a:	f003 0301 	and.w	r3, r3, #1
 800124e:	2b00      	cmp	r3, #0
 8001250:	d004      	beq.n	800125c <CLCD_Write_Display+0x138>
 8001252:	4b18      	ldr	r3, [pc, #96]	@ (80012b4 <CLCD_Write_Display+0x190>)
 8001254:	695b      	ldr	r3, [r3, #20]
 8001256:	f043 0310 	orr.w	r3, r3, #16
 800125a:	e003      	b.n	8001264 <CLCD_Write_Display+0x140>
 800125c:	4b15      	ldr	r3, [pc, #84]	@ (80012b4 <CLCD_Write_Display+0x190>)
 800125e:	695b      	ldr	r3, [r3, #20]
 8001260:	f023 0310 	bic.w	r3, r3, #16
 8001264:	4a13      	ldr	r2, [pc, #76]	@ (80012b4 <CLCD_Write_Display+0x190>)
 8001266:	6153      	str	r3, [r2, #20]

	GPIO_RS->ODR = GPIO_RS->ODR | GPIO_PIN_RS; //RS�� High
 8001268:	4b12      	ldr	r3, [pc, #72]	@ (80012b4 <CLCD_Write_Display+0x190>)
 800126a:	695b      	ldr	r3, [r3, #20]
 800126c:	4a11      	ldr	r2, [pc, #68]	@ (80012b4 <CLCD_Write_Display+0x190>)
 800126e:	f043 0301 	orr.w	r3, r3, #1
 8001272:	6153      	str	r3, [r2, #20]
	GPIO_RW->ODR = GPIO_RW->ODR & ~GPIO_PIN_RW; //RW�� Low
 8001274:	4b0f      	ldr	r3, [pc, #60]	@ (80012b4 <CLCD_Write_Display+0x190>)
 8001276:	695b      	ldr	r3, [r3, #20]
 8001278:	4a0e      	ldr	r2, [pc, #56]	@ (80012b4 <CLCD_Write_Display+0x190>)
 800127a:	f023 0302 	bic.w	r3, r3, #2
 800127e:	6153      	str	r3, [r2, #20]
	GPIO_EN->ODR = GPIO_EN->ODR & ~GPIO_PIN_EN; //EN�� Low
 8001280:	4b0c      	ldr	r3, [pc, #48]	@ (80012b4 <CLCD_Write_Display+0x190>)
 8001282:	695b      	ldr	r3, [r3, #20]
 8001284:	4a0b      	ldr	r2, [pc, #44]	@ (80012b4 <CLCD_Write_Display+0x190>)
 8001286:	f023 0304 	bic.w	r3, r3, #4
 800128a:	6153      	str	r3, [r2, #20]

	GPIO_EN->ODR = GPIO_EN->ODR | GPIO_PIN_EN; //EN�� High
 800128c:	4b09      	ldr	r3, [pc, #36]	@ (80012b4 <CLCD_Write_Display+0x190>)
 800128e:	695b      	ldr	r3, [r3, #20]
 8001290:	4a08      	ldr	r2, [pc, #32]	@ (80012b4 <CLCD_Write_Display+0x190>)
 8001292:	f043 0304 	orr.w	r3, r3, #4
 8001296:	6153      	str	r3, [r2, #20]
	GPIO_EN->ODR = GPIO_EN->ODR & ~GPIO_PIN_EN; //EN�� Low
 8001298:	4b06      	ldr	r3, [pc, #24]	@ (80012b4 <CLCD_Write_Display+0x190>)
 800129a:	695b      	ldr	r3, [r3, #20]
 800129c:	4a05      	ldr	r2, [pc, #20]	@ (80012b4 <CLCD_Write_Display+0x190>)
 800129e:	f023 0304 	bic.w	r3, r3, #4
 80012a2:	6153      	str	r3, [r2, #20]

	HAL_Delay(1);
 80012a4:	2001      	movs	r0, #1
 80012a6:	f003 fe01 	bl	8004eac <HAL_Delay>
}
 80012aa:	bf00      	nop
 80012ac:	3708      	adds	r7, #8
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	40021000 	.word	0x40021000

080012b8 <CLCD_Gotoxy>:


void CLCD_Gotoxy(unsigned char x, unsigned char y)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b082      	sub	sp, #8
 80012bc:	af00      	add	r7, sp, #0
 80012be:	4603      	mov	r3, r0
 80012c0:	460a      	mov	r2, r1
 80012c2:	71fb      	strb	r3, [r7, #7]
 80012c4:	4613      	mov	r3, r2
 80012c6:	71bb      	strb	r3, [r7, #6]
	// 16 * 2 character LCD
	switch(y)
 80012c8:	79bb      	ldrb	r3, [r7, #6]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d002      	beq.n	80012d4 <CLCD_Gotoxy+0x1c>
 80012ce:	2b01      	cmp	r3, #1
 80012d0:	d007      	beq.n	80012e2 <CLCD_Gotoxy+0x2a>
		case 0 : CLCD_Write_Instruction(0x80 + x); break;
		case 1 : CLCD_Write_Instruction(0xC0 + x); break;
		//case 2 : CLCD_Write_Instruction(0x90+x); break; //Uncomment for 16 * 4 character LCD
		//case 3 : CLCD_Write_Instruction(0xd0+x); break; //Uncomment for 16 * 4 character LCD
	}
}
 80012d2:	e00d      	b.n	80012f0 <CLCD_Gotoxy+0x38>
		case 0 : CLCD_Write_Instruction(0x80 + x); break;
 80012d4:	79fb      	ldrb	r3, [r7, #7]
 80012d6:	3b80      	subs	r3, #128	@ 0x80
 80012d8:	b2db      	uxtb	r3, r3
 80012da:	4618      	mov	r0, r3
 80012dc:	f7ff fe58 	bl	8000f90 <CLCD_Write_Instruction>
 80012e0:	e006      	b.n	80012f0 <CLCD_Gotoxy+0x38>
		case 1 : CLCD_Write_Instruction(0xC0 + x); break;
 80012e2:	79fb      	ldrb	r3, [r7, #7]
 80012e4:	3b40      	subs	r3, #64	@ 0x40
 80012e6:	b2db      	uxtb	r3, r3
 80012e8:	4618      	mov	r0, r3
 80012ea:	f7ff fe51 	bl	8000f90 <CLCD_Write_Instruction>
 80012ee:	bf00      	nop
}
 80012f0:	bf00      	nop
 80012f2:	3708      	adds	r7, #8
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}

080012f8 <CLCD_Puts>:

void CLCD_Puts(unsigned char x, unsigned char y, unsigned char *str)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b084      	sub	sp, #16
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	4603      	mov	r3, r0
 8001300:	603a      	str	r2, [r7, #0]
 8001302:	71fb      	strb	r3, [r7, #7]
 8001304:	460b      	mov	r3, r1
 8001306:	71bb      	strb	r3, [r7, #6]
	unsigned int i=0;
 8001308:	2300      	movs	r3, #0
 800130a:	60fb      	str	r3, [r7, #12]

	CLCD_Gotoxy(x,y);
 800130c:	79ba      	ldrb	r2, [r7, #6]
 800130e:	79fb      	ldrb	r3, [r7, #7]
 8001310:	4611      	mov	r1, r2
 8001312:	4618      	mov	r0, r3
 8001314:	f7ff ffd0 	bl	80012b8 <CLCD_Gotoxy>
	do
	{
		CLCD_Write_Display(str[i]);
 8001318:	683a      	ldr	r2, [r7, #0]
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	4413      	add	r3, r2
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	4618      	mov	r0, r3
 8001322:	f7ff feff 	bl	8001124 <CLCD_Write_Display>
	}
	while(str[++i]!='\0');
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	3301      	adds	r3, #1
 800132a:	60fb      	str	r3, [r7, #12]
 800132c:	683a      	ldr	r2, [r7, #0]
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	4413      	add	r3, r2
 8001332:	781b      	ldrb	r3, [r3, #0]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d1ef      	bne.n	8001318 <CLCD_Puts+0x20>
}
 8001338:	bf00      	nop
 800133a:	bf00      	nop
 800133c:	3710      	adds	r7, #16
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}

08001342 <CLCD_Init>:

void CLCD_Init(void)
{
 8001342:	b580      	push	{r7, lr}
 8001344:	af00      	add	r7, sp, #0
	HAL_Delay(100);
 8001346:	2064      	movs	r0, #100	@ 0x64
 8001348:	f003 fdb0 	bl	8004eac <HAL_Delay>
	CLCD_Write_Instruction(0x28);
 800134c:	2028      	movs	r0, #40	@ 0x28
 800134e:	f7ff fe1f 	bl	8000f90 <CLCD_Write_Instruction>
	HAL_Delay(10);
 8001352:	200a      	movs	r0, #10
 8001354:	f003 fdaa 	bl	8004eac <HAL_Delay>
	CLCD_Write_Instruction(0x28);
 8001358:	2028      	movs	r0, #40	@ 0x28
 800135a:	f7ff fe19 	bl	8000f90 <CLCD_Write_Instruction>
	HAL_Delay(10);
 800135e:	200a      	movs	r0, #10
 8001360:	f003 fda4 	bl	8004eac <HAL_Delay>
	CLCD_Write_Instruction(0x0C);
 8001364:	200c      	movs	r0, #12
 8001366:	f7ff fe13 	bl	8000f90 <CLCD_Write_Instruction>
	CLCD_Write_Instruction(0x06);
 800136a:	2006      	movs	r0, #6
 800136c:	f7ff fe10 	bl	8000f90 <CLCD_Write_Instruction>
	CLCD_Write_Instruction(0x02);
 8001370:	2002      	movs	r0, #2
 8001372:	f7ff fe0d 	bl	8000f90 <CLCD_Write_Instruction>
	CLCD_Write_Instruction(0x01);
 8001376:	2001      	movs	r0, #1
 8001378:	f7ff fe0a 	bl	8000f90 <CLCD_Write_Instruction>
	CLCD_Write_Instruction(0x01);
 800137c:	2001      	movs	r0, #1
 800137e:	f7ff fe07 	bl	8000f90 <CLCD_Write_Instruction>
}
 8001382:	bf00      	nop
 8001384:	bd80      	pop	{r7, pc}

08001386 <CLCD_Clear>:

void CLCD_Clear(void)
{
 8001386:	b580      	push	{r7, lr}
 8001388:	af00      	add	r7, sp, #0
	CLCD_Write_Instruction(0x01);
 800138a:	2001      	movs	r0, #1
 800138c:	f7ff fe00 	bl	8000f90 <CLCD_Write_Instruction>
	HAL_Delay(10);
 8001390:	200a      	movs	r0, #10
 8001392:	f003 fd8b 	bl	8004eac <HAL_Delay>
}
 8001396:	bf00      	nop
 8001398:	bd80      	pop	{r7, pc}
	...

0800139c <clcdDisplayAlarm>:
extern modeSelector mode;
modeSelector tempMode;
alarmSt alarm = {{{13, 0, 0, 0}, {0, 0, 1, 0}, {14, 1, 0, 0}, {16, 0, 0, 0}, {0, 0, 1, 0}}, 0};
alarmSetting alarmSettingType = ALARM_NUM;

void clcdDisplayAlarm() {
 800139c:	b590      	push	{r4, r7, lr}
 800139e:	b083      	sub	sp, #12
 80013a0:	af02      	add	r7, sp, #8
	sprintf(alarm.buffer, "ALARM #%d %-3s %3s", alarm.select + 1, (alarm.set[alarm.select].enabled == FALSE ? "OFF" : "ON"), (alarm.set[alarm.select].repeat == TRUE ? "RPT" : "ONC"));
 80013a2:	4b49      	ldr	r3, [pc, #292]	@ (80014c8 <clcdDisplayAlarm+0x12c>)
 80013a4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80013a8:	1c5a      	adds	r2, r3, #1
 80013aa:	4b47      	ldr	r3, [pc, #284]	@ (80014c8 <clcdDisplayAlarm+0x12c>)
 80013ac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80013b0:	4618      	mov	r0, r3
 80013b2:	4945      	ldr	r1, [pc, #276]	@ (80014c8 <clcdDisplayAlarm+0x12c>)
 80013b4:	4603      	mov	r3, r0
 80013b6:	005b      	lsls	r3, r3, #1
 80013b8:	4403      	add	r3, r0
 80013ba:	009b      	lsls	r3, r3, #2
 80013bc:	440b      	add	r3, r1
 80013be:	3308      	adds	r3, #8
 80013c0:	781b      	ldrb	r3, [r3, #0]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d101      	bne.n	80013ca <clcdDisplayAlarm+0x2e>
 80013c6:	4941      	ldr	r1, [pc, #260]	@ (80014cc <clcdDisplayAlarm+0x130>)
 80013c8:	e000      	b.n	80013cc <clcdDisplayAlarm+0x30>
 80013ca:	4941      	ldr	r1, [pc, #260]	@ (80014d0 <clcdDisplayAlarm+0x134>)
 80013cc:	4b3e      	ldr	r3, [pc, #248]	@ (80014c8 <clcdDisplayAlarm+0x12c>)
 80013ce:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80013d2:	461c      	mov	r4, r3
 80013d4:	483c      	ldr	r0, [pc, #240]	@ (80014c8 <clcdDisplayAlarm+0x12c>)
 80013d6:	4623      	mov	r3, r4
 80013d8:	005b      	lsls	r3, r3, #1
 80013da:	4423      	add	r3, r4
 80013dc:	009b      	lsls	r3, r3, #2
 80013de:	4403      	add	r3, r0
 80013e0:	3309      	adds	r3, #9
 80013e2:	781b      	ldrb	r3, [r3, #0]
 80013e4:	2b01      	cmp	r3, #1
 80013e6:	d101      	bne.n	80013ec <clcdDisplayAlarm+0x50>
 80013e8:	4b3a      	ldr	r3, [pc, #232]	@ (80014d4 <clcdDisplayAlarm+0x138>)
 80013ea:	e000      	b.n	80013ee <clcdDisplayAlarm+0x52>
 80013ec:	4b3a      	ldr	r3, [pc, #232]	@ (80014d8 <clcdDisplayAlarm+0x13c>)
 80013ee:	9300      	str	r3, [sp, #0]
 80013f0:	460b      	mov	r3, r1
 80013f2:	493a      	ldr	r1, [pc, #232]	@ (80014dc <clcdDisplayAlarm+0x140>)
 80013f4:	483a      	ldr	r0, [pc, #232]	@ (80014e0 <clcdDisplayAlarm+0x144>)
 80013f6:	f006 fdcd 	bl	8007f94 <siprintf>
	CLCD_Puts(0, 0, alarm.buffer);
 80013fa:	4a39      	ldr	r2, [pc, #228]	@ (80014e0 <clcdDisplayAlarm+0x144>)
 80013fc:	2100      	movs	r1, #0
 80013fe:	2000      	movs	r0, #0
 8001400:	f7ff ff7a 	bl	80012f8 <CLCD_Puts>
	sprintf(alarm.buffer, "        %s %02d:%02d", (alarm.set[alarm.select].hour < 12 ? "AM" : "PM"),
 8001404:	4b30      	ldr	r3, [pc, #192]	@ (80014c8 <clcdDisplayAlarm+0x12c>)
 8001406:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800140a:	4619      	mov	r1, r3
 800140c:	4a2e      	ldr	r2, [pc, #184]	@ (80014c8 <clcdDisplayAlarm+0x12c>)
 800140e:	460b      	mov	r3, r1
 8001410:	005b      	lsls	r3, r3, #1
 8001412:	440b      	add	r3, r1
 8001414:	009b      	lsls	r3, r3, #2
 8001416:	4413      	add	r3, r2
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	2b0b      	cmp	r3, #11
 800141c:	dc01      	bgt.n	8001422 <clcdDisplayAlarm+0x86>
 800141e:	4931      	ldr	r1, [pc, #196]	@ (80014e4 <clcdDisplayAlarm+0x148>)
 8001420:	e000      	b.n	8001424 <clcdDisplayAlarm+0x88>
 8001422:	4931      	ldr	r1, [pc, #196]	@ (80014e8 <clcdDisplayAlarm+0x14c>)
			(alarm.set[alarm.select].hour > 12 ? (alarm.set[alarm.select].hour - 12) : alarm.set[alarm.select].hour == 0 ? 12 : alarm.set[alarm.select].hour),
 8001424:	4b28      	ldr	r3, [pc, #160]	@ (80014c8 <clcdDisplayAlarm+0x12c>)
 8001426:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800142a:	4618      	mov	r0, r3
 800142c:	4a26      	ldr	r2, [pc, #152]	@ (80014c8 <clcdDisplayAlarm+0x12c>)
 800142e:	4603      	mov	r3, r0
 8001430:	005b      	lsls	r3, r3, #1
 8001432:	4403      	add	r3, r0
 8001434:	009b      	lsls	r3, r3, #2
 8001436:	4413      	add	r3, r2
 8001438:	681b      	ldr	r3, [r3, #0]
	sprintf(alarm.buffer, "        %s %02d:%02d", (alarm.set[alarm.select].hour < 12 ? "AM" : "PM"),
 800143a:	2b0c      	cmp	r3, #12
 800143c:	dd0d      	ble.n	800145a <clcdDisplayAlarm+0xbe>
			(alarm.set[alarm.select].hour > 12 ? (alarm.set[alarm.select].hour - 12) : alarm.set[alarm.select].hour == 0 ? 12 : alarm.set[alarm.select].hour),
 800143e:	4b22      	ldr	r3, [pc, #136]	@ (80014c8 <clcdDisplayAlarm+0x12c>)
 8001440:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001444:	4618      	mov	r0, r3
 8001446:	4a20      	ldr	r2, [pc, #128]	@ (80014c8 <clcdDisplayAlarm+0x12c>)
 8001448:	4603      	mov	r3, r0
 800144a:	005b      	lsls	r3, r3, #1
 800144c:	4403      	add	r3, r0
 800144e:	009b      	lsls	r3, r3, #2
 8001450:	4413      	add	r3, r2
 8001452:	681b      	ldr	r3, [r3, #0]
	sprintf(alarm.buffer, "        %s %02d:%02d", (alarm.set[alarm.select].hour < 12 ? "AM" : "PM"),
 8001454:	f1a3 020c 	sub.w	r2, r3, #12
 8001458:	e019      	b.n	800148e <clcdDisplayAlarm+0xf2>
			(alarm.set[alarm.select].hour > 12 ? (alarm.set[alarm.select].hour - 12) : alarm.set[alarm.select].hour == 0 ? 12 : alarm.set[alarm.select].hour),
 800145a:	4b1b      	ldr	r3, [pc, #108]	@ (80014c8 <clcdDisplayAlarm+0x12c>)
 800145c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001460:	4618      	mov	r0, r3
 8001462:	4a19      	ldr	r2, [pc, #100]	@ (80014c8 <clcdDisplayAlarm+0x12c>)
 8001464:	4603      	mov	r3, r0
 8001466:	005b      	lsls	r3, r3, #1
 8001468:	4403      	add	r3, r0
 800146a:	009b      	lsls	r3, r3, #2
 800146c:	4413      	add	r3, r2
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	2b00      	cmp	r3, #0
 8001472:	d00b      	beq.n	800148c <clcdDisplayAlarm+0xf0>
 8001474:	4b14      	ldr	r3, [pc, #80]	@ (80014c8 <clcdDisplayAlarm+0x12c>)
 8001476:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800147a:	4618      	mov	r0, r3
 800147c:	4a12      	ldr	r2, [pc, #72]	@ (80014c8 <clcdDisplayAlarm+0x12c>)
 800147e:	4603      	mov	r3, r0
 8001480:	005b      	lsls	r3, r3, #1
 8001482:	4403      	add	r3, r0
 8001484:	009b      	lsls	r3, r3, #2
 8001486:	4413      	add	r3, r2
 8001488:	681a      	ldr	r2, [r3, #0]
 800148a:	e000      	b.n	800148e <clcdDisplayAlarm+0xf2>
 800148c:	220c      	movs	r2, #12
			alarm.set[alarm.select].minute);
 800148e:	4b0e      	ldr	r3, [pc, #56]	@ (80014c8 <clcdDisplayAlarm+0x12c>)
 8001490:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001494:	461c      	mov	r4, r3
	sprintf(alarm.buffer, "        %s %02d:%02d", (alarm.set[alarm.select].hour < 12 ? "AM" : "PM"),
 8001496:	480c      	ldr	r0, [pc, #48]	@ (80014c8 <clcdDisplayAlarm+0x12c>)
 8001498:	4623      	mov	r3, r4
 800149a:	005b      	lsls	r3, r3, #1
 800149c:	4423      	add	r3, r4
 800149e:	009b      	lsls	r3, r3, #2
 80014a0:	4403      	add	r3, r0
 80014a2:	3304      	adds	r3, #4
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	9300      	str	r3, [sp, #0]
 80014a8:	4613      	mov	r3, r2
 80014aa:	460a      	mov	r2, r1
 80014ac:	490f      	ldr	r1, [pc, #60]	@ (80014ec <clcdDisplayAlarm+0x150>)
 80014ae:	480c      	ldr	r0, [pc, #48]	@ (80014e0 <clcdDisplayAlarm+0x144>)
 80014b0:	f006 fd70 	bl	8007f94 <siprintf>
	CLCD_Puts(0, 1, alarm.buffer);
 80014b4:	4a0a      	ldr	r2, [pc, #40]	@ (80014e0 <clcdDisplayAlarm+0x144>)
 80014b6:	2101      	movs	r1, #1
 80014b8:	2000      	movs	r0, #0
 80014ba:	f7ff ff1d 	bl	80012f8 <CLCD_Puts>

}
 80014be:	bf00      	nop
 80014c0:	3704      	adds	r7, #4
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd90      	pop	{r4, r7, pc}
 80014c6:	bf00      	nop
 80014c8:	20000000 	.word	0x20000000
 80014cc:	080088ec 	.word	0x080088ec
 80014d0:	080088f0 	.word	0x080088f0
 80014d4:	080088f4 	.word	0x080088f4
 80014d8:	080088f8 	.word	0x080088f8
 80014dc:	080088fc 	.word	0x080088fc
 80014e0:	2000003d 	.word	0x2000003d
 80014e4:	08008910 	.word	0x08008910
 80014e8:	08008914 	.word	0x08008914
 80014ec:	08008918 	.word	0x08008918

080014f0 <clcdDisplayAlarmTrigger>:

void clcdDisplayAlarmTrigger() {
 80014f0:	b580      	push	{r7, lr}
 80014f2:	af00      	add	r7, sp, #0
	if(getBlink() == TRUE) {
 80014f4:	f003 fb36 	bl	8004b64 <getBlink>
 80014f8:	4603      	mov	r3, r0
 80014fa:	2b01      	cmp	r3, #1
 80014fc:	d104      	bne.n	8001508 <clcdDisplayAlarmTrigger+0x18>
		sprintf(alarm.buffer, "ALARM TRIGGERED!");
 80014fe:	490c      	ldr	r1, [pc, #48]	@ (8001530 <clcdDisplayAlarmTrigger+0x40>)
 8001500:	480c      	ldr	r0, [pc, #48]	@ (8001534 <clcdDisplayAlarmTrigger+0x44>)
 8001502:	f006 fd47 	bl	8007f94 <siprintf>
 8001506:	e003      	b.n	8001510 <clcdDisplayAlarmTrigger+0x20>
	} else {
		sprintf(alarm.buffer, "                ");
 8001508:	490b      	ldr	r1, [pc, #44]	@ (8001538 <clcdDisplayAlarmTrigger+0x48>)
 800150a:	480a      	ldr	r0, [pc, #40]	@ (8001534 <clcdDisplayAlarmTrigger+0x44>)
 800150c:	f006 fd42 	bl	8007f94 <siprintf>
	}
	CLCD_Puts(0, 0, alarm.buffer);
 8001510:	4a08      	ldr	r2, [pc, #32]	@ (8001534 <clcdDisplayAlarmTrigger+0x44>)
 8001512:	2100      	movs	r1, #0
 8001514:	2000      	movs	r0, #0
 8001516:	f7ff feef 	bl	80012f8 <CLCD_Puts>
	sprintf(alarm.buffer, "                ");
 800151a:	4907      	ldr	r1, [pc, #28]	@ (8001538 <clcdDisplayAlarmTrigger+0x48>)
 800151c:	4805      	ldr	r0, [pc, #20]	@ (8001534 <clcdDisplayAlarmTrigger+0x44>)
 800151e:	f006 fd39 	bl	8007f94 <siprintf>
	CLCD_Puts(0, 1, alarm.buffer);
 8001522:	4a04      	ldr	r2, [pc, #16]	@ (8001534 <clcdDisplayAlarmTrigger+0x44>)
 8001524:	2101      	movs	r1, #1
 8001526:	2000      	movs	r0, #0
 8001528:	f7ff fee6 	bl	80012f8 <CLCD_Puts>
}
 800152c:	bf00      	nop
 800152e:	bd80      	pop	{r7, pc}
 8001530:	08008930 	.word	0x08008930
 8001534:	2000003d 	.word	0x2000003d
 8001538:	08008944 	.word	0x08008944

0800153c <selectAlarm>:
void selectAlarm() {	// sw2 기능 알람 선택
 800153c:	b480      	push	{r7}
 800153e:	af00      	add	r7, sp, #0
	if(alarm.select >= ((sizeof(alarm) - 21) / sizeof(alarm.set[0])) - 1) { // 알람 구조체안에 set 구조체5개의 길이 - 21
 8001540:	4b0b      	ldr	r3, [pc, #44]	@ (8001570 <selectAlarm+0x34>)
 8001542:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001546:	2b03      	cmp	r3, #3
 8001548:	d904      	bls.n	8001554 <selectAlarm+0x18>
		alarm.select = 0;
 800154a:	4b09      	ldr	r3, [pc, #36]	@ (8001570 <selectAlarm+0x34>)
 800154c:	2200      	movs	r2, #0
 800154e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
	} else {
		alarm.select++;
	}
}
 8001552:	e007      	b.n	8001564 <selectAlarm+0x28>
		alarm.select++;
 8001554:	4b06      	ldr	r3, [pc, #24]	@ (8001570 <selectAlarm+0x34>)
 8001556:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800155a:	3301      	adds	r3, #1
 800155c:	b2da      	uxtb	r2, r3
 800155e:	4b04      	ldr	r3, [pc, #16]	@ (8001570 <selectAlarm+0x34>)
 8001560:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8001564:	bf00      	nop
 8001566:	46bd      	mov	sp, r7
 8001568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156c:	4770      	bx	lr
 800156e:	bf00      	nop
 8001570:	20000000 	.word	0x20000000

08001574 <alarmTrigger>:

void alarmTrigger() {	// 알람 울림
 8001574:	b580      	push	{r7, lr}
 8001576:	b082      	sub	sp, #8
 8001578:	af00      	add	r7, sp, #0
	if(mode == ALARM_TRIGGER) {
 800157a:	4b30      	ldr	r3, [pc, #192]	@ (800163c <alarmTrigger+0xc8>)
 800157c:	781b      	ldrb	r3, [r3, #0]
 800157e:	2b05      	cmp	r3, #5
 8001580:	d102      	bne.n	8001588 <alarmTrigger+0x14>
		playAlram();
 8001582:	f000 ff17 	bl	80023b4 <playAlram>
					mode = ALARM_TRIGGER;
				}
			}
		}
	}
}
 8001586:	e054      	b.n	8001632 <alarmTrigger+0xbe>
		for(int i = 0; i < (sizeof(alarm) - 21) / sizeof(alarm.set[0]); i++) {	// 5번 동작
 8001588:	2300      	movs	r3, #0
 800158a:	607b      	str	r3, [r7, #4]
 800158c:	e04e      	b.n	800162c <alarmTrigger+0xb8>
			if(alarm.set[i].enabled == TRUE) {	// 알람 활성화 확인
 800158e:	492c      	ldr	r1, [pc, #176]	@ (8001640 <alarmTrigger+0xcc>)
 8001590:	687a      	ldr	r2, [r7, #4]
 8001592:	4613      	mov	r3, r2
 8001594:	005b      	lsls	r3, r3, #1
 8001596:	4413      	add	r3, r2
 8001598:	009b      	lsls	r3, r3, #2
 800159a:	440b      	add	r3, r1
 800159c:	3308      	adds	r3, #8
 800159e:	781b      	ldrb	r3, [r3, #0]
 80015a0:	2b01      	cmp	r3, #1
 80015a2:	d140      	bne.n	8001626 <alarmTrigger+0xb2>
				if (alarm.set[i].hour == clock.hour
 80015a4:	4926      	ldr	r1, [pc, #152]	@ (8001640 <alarmTrigger+0xcc>)
 80015a6:	687a      	ldr	r2, [r7, #4]
 80015a8:	4613      	mov	r3, r2
 80015aa:	005b      	lsls	r3, r3, #1
 80015ac:	4413      	add	r3, r2
 80015ae:	009b      	lsls	r3, r3, #2
 80015b0:	440b      	add	r3, r1
 80015b2:	681a      	ldr	r2, [r3, #0]
 80015b4:	4b23      	ldr	r3, [pc, #140]	@ (8001644 <alarmTrigger+0xd0>)
 80015b6:	68db      	ldr	r3, [r3, #12]
 80015b8:	429a      	cmp	r2, r3
 80015ba:	d134      	bne.n	8001626 <alarmTrigger+0xb2>
						alarm.set[i].minute == clock.minute && clock.second == 0
 80015bc:	4920      	ldr	r1, [pc, #128]	@ (8001640 <alarmTrigger+0xcc>)
 80015be:	687a      	ldr	r2, [r7, #4]
 80015c0:	4613      	mov	r3, r2
 80015c2:	005b      	lsls	r3, r3, #1
 80015c4:	4413      	add	r3, r2
 80015c6:	009b      	lsls	r3, r3, #2
 80015c8:	440b      	add	r3, r1
 80015ca:	3304      	adds	r3, #4
 80015cc:	681a      	ldr	r2, [r3, #0]
 80015ce:	4b1d      	ldr	r3, [pc, #116]	@ (8001644 <alarmTrigger+0xd0>)
 80015d0:	691b      	ldr	r3, [r3, #16]
						&&	// 알람 설정 시간의 0초, 0밀리초 될 때 알람 온
 80015d2:	429a      	cmp	r2, r3
 80015d4:	d127      	bne.n	8001626 <alarmTrigger+0xb2>
						alarm.set[i].minute == clock.minute && clock.second == 0
 80015d6:	4b1b      	ldr	r3, [pc, #108]	@ (8001644 <alarmTrigger+0xd0>)
 80015d8:	695b      	ldr	r3, [r3, #20]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d123      	bne.n	8001626 <alarmTrigger+0xb2>
						&& clock.millisecond == 0) {
 80015de:	4b19      	ldr	r3, [pc, #100]	@ (8001644 <alarmTrigger+0xd0>)
 80015e0:	699b      	ldr	r3, [r3, #24]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d11f      	bne.n	8001626 <alarmTrigger+0xb2>
					if(alarm.set[i].repeat == FALSE) {
 80015e6:	4916      	ldr	r1, [pc, #88]	@ (8001640 <alarmTrigger+0xcc>)
 80015e8:	687a      	ldr	r2, [r7, #4]
 80015ea:	4613      	mov	r3, r2
 80015ec:	005b      	lsls	r3, r3, #1
 80015ee:	4413      	add	r3, r2
 80015f0:	009b      	lsls	r3, r3, #2
 80015f2:	440b      	add	r3, r1
 80015f4:	3309      	adds	r3, #9
 80015f6:	781b      	ldrb	r3, [r3, #0]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d109      	bne.n	8001610 <alarmTrigger+0x9c>
						alarm.set[i].enabled = 0;
 80015fc:	4910      	ldr	r1, [pc, #64]	@ (8001640 <alarmTrigger+0xcc>)
 80015fe:	687a      	ldr	r2, [r7, #4]
 8001600:	4613      	mov	r3, r2
 8001602:	005b      	lsls	r3, r3, #1
 8001604:	4413      	add	r3, r2
 8001606:	009b      	lsls	r3, r3, #2
 8001608:	440b      	add	r3, r1
 800160a:	3308      	adds	r3, #8
 800160c:	2200      	movs	r2, #0
 800160e:	701a      	strb	r2, [r3, #0]
					if(mode != ALARM_TRIGGER) { // 같은 시간에 알람이 여러개 있을 경우 알람이 울리면서 tempmode 가 ALARM_TRIGGER 모드로 바뀌는것을 방지
 8001610:	4b0a      	ldr	r3, [pc, #40]	@ (800163c <alarmTrigger+0xc8>)
 8001612:	781b      	ldrb	r3, [r3, #0]
 8001614:	2b05      	cmp	r3, #5
 8001616:	d003      	beq.n	8001620 <alarmTrigger+0xac>
						tempMode = mode;
 8001618:	4b08      	ldr	r3, [pc, #32]	@ (800163c <alarmTrigger+0xc8>)
 800161a:	781a      	ldrb	r2, [r3, #0]
 800161c:	4b0a      	ldr	r3, [pc, #40]	@ (8001648 <alarmTrigger+0xd4>)
 800161e:	701a      	strb	r2, [r3, #0]
					mode = ALARM_TRIGGER;
 8001620:	4b06      	ldr	r3, [pc, #24]	@ (800163c <alarmTrigger+0xc8>)
 8001622:	2205      	movs	r2, #5
 8001624:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < (sizeof(alarm) - 21) / sizeof(alarm.set[0]); i++) {	// 5번 동작
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	3301      	adds	r3, #1
 800162a:	607b      	str	r3, [r7, #4]
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	2b04      	cmp	r3, #4
 8001630:	d9ad      	bls.n	800158e <alarmTrigger+0x1a>
}
 8001632:	bf00      	nop
 8001634:	3708      	adds	r7, #8
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	2000033d 	.word	0x2000033d
 8001640:	20000000 	.word	0x20000000
 8001644:	2000006c 	.word	0x2000006c
 8001648:	200001d4 	.word	0x200001d4

0800164c <returnToPreviousMode>:

void returnToPreviousMode() {
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0
	mode = tempMode;
 8001650:	4b04      	ldr	r3, [pc, #16]	@ (8001664 <returnToPreviousMode+0x18>)
 8001652:	781a      	ldrb	r2, [r3, #0]
 8001654:	4b04      	ldr	r3, [pc, #16]	@ (8001668 <returnToPreviousMode+0x1c>)
 8001656:	701a      	strb	r2, [r3, #0]
}
 8001658:	bf00      	nop
 800165a:	46bd      	mov	sp, r7
 800165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001660:	4770      	bx	lr
 8001662:	bf00      	nop
 8001664:	200001d4 	.word	0x200001d4
 8001668:	2000033d 	.word	0x2000033d

0800166c <clcdDisplayAlarmSetting>:

void clcdDisplayAlarmSetting() {
 800166c:	b590      	push	{r4, r7, lr}
 800166e:	b083      	sub	sp, #12
 8001670:	af02      	add	r7, sp, #8
	switch(alarmSettingType) {
 8001672:	4bb3      	ldr	r3, [pc, #716]	@ (8001940 <clcdDisplayAlarmSetting+0x2d4>)
 8001674:	781b      	ldrb	r3, [r3, #0]
 8001676:	2b04      	cmp	r3, #4
 8001678:	f200 8401 	bhi.w	8001e7e <clcdDisplayAlarmSetting+0x812>
 800167c:	a201      	add	r2, pc, #4	@ (adr r2, 8001684 <clcdDisplayAlarmSetting+0x18>)
 800167e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001682:	bf00      	nop
 8001684:	08001699 	.word	0x08001699
 8001688:	08001819 	.word	0x08001819
 800168c:	08001a0d 	.word	0x08001a0d
 8001690:	08001b81 	.word	0x08001b81
 8001694:	08001d19 	.word	0x08001d19
	case ALARM_NUM:
		if(getWaitingTime() < 200 || getBlink() == TRUE) {
 8001698:	f003 fa70 	bl	8004b7c <getWaitingTime>
 800169c:	4603      	mov	r3, r0
 800169e:	2bc7      	cmp	r3, #199	@ 0xc7
 80016a0:	dd04      	ble.n	80016ac <clcdDisplayAlarmSetting+0x40>
 80016a2:	f003 fa5f 	bl	8004b64 <getBlink>
 80016a6:	4603      	mov	r3, r0
 80016a8:	2b01      	cmp	r3, #1
 80016aa:	d12c      	bne.n	8001706 <clcdDisplayAlarmSetting+0x9a>
			sprintf(alarm.buffer, "ALARM #%d %-3s %3s", alarm.select + 1,
 80016ac:	4ba5      	ldr	r3, [pc, #660]	@ (8001944 <clcdDisplayAlarmSetting+0x2d8>)
 80016ae:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80016b2:	1c5a      	adds	r2, r3, #1
					alarm.set[alarm.select].enabled == TRUE ? "ON" : "OFF",
 80016b4:	4ba3      	ldr	r3, [pc, #652]	@ (8001944 <clcdDisplayAlarmSetting+0x2d8>)
 80016b6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80016ba:	4618      	mov	r0, r3
 80016bc:	49a1      	ldr	r1, [pc, #644]	@ (8001944 <clcdDisplayAlarmSetting+0x2d8>)
 80016be:	4603      	mov	r3, r0
 80016c0:	005b      	lsls	r3, r3, #1
 80016c2:	4403      	add	r3, r0
 80016c4:	009b      	lsls	r3, r3, #2
 80016c6:	440b      	add	r3, r1
 80016c8:	3308      	adds	r3, #8
 80016ca:	781b      	ldrb	r3, [r3, #0]
			sprintf(alarm.buffer, "ALARM #%d %-3s %3s", alarm.select + 1,
 80016cc:	2b01      	cmp	r3, #1
 80016ce:	d101      	bne.n	80016d4 <clcdDisplayAlarmSetting+0x68>
 80016d0:	499d      	ldr	r1, [pc, #628]	@ (8001948 <clcdDisplayAlarmSetting+0x2dc>)
 80016d2:	e000      	b.n	80016d6 <clcdDisplayAlarmSetting+0x6a>
 80016d4:	499d      	ldr	r1, [pc, #628]	@ (800194c <clcdDisplayAlarmSetting+0x2e0>)
					alarm.set[alarm.select].repeat == TRUE ? "RPT" : "ONC");
 80016d6:	4b9b      	ldr	r3, [pc, #620]	@ (8001944 <clcdDisplayAlarmSetting+0x2d8>)
 80016d8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80016dc:	461c      	mov	r4, r3
 80016de:	4899      	ldr	r0, [pc, #612]	@ (8001944 <clcdDisplayAlarmSetting+0x2d8>)
 80016e0:	4623      	mov	r3, r4
 80016e2:	005b      	lsls	r3, r3, #1
 80016e4:	4423      	add	r3, r4
 80016e6:	009b      	lsls	r3, r3, #2
 80016e8:	4403      	add	r3, r0
 80016ea:	3309      	adds	r3, #9
 80016ec:	781b      	ldrb	r3, [r3, #0]
			sprintf(alarm.buffer, "ALARM #%d %-3s %3s", alarm.select + 1,
 80016ee:	2b01      	cmp	r3, #1
 80016f0:	d101      	bne.n	80016f6 <clcdDisplayAlarmSetting+0x8a>
 80016f2:	4b97      	ldr	r3, [pc, #604]	@ (8001950 <clcdDisplayAlarmSetting+0x2e4>)
 80016f4:	e000      	b.n	80016f8 <clcdDisplayAlarmSetting+0x8c>
 80016f6:	4b97      	ldr	r3, [pc, #604]	@ (8001954 <clcdDisplayAlarmSetting+0x2e8>)
 80016f8:	9300      	str	r3, [sp, #0]
 80016fa:	460b      	mov	r3, r1
 80016fc:	4996      	ldr	r1, [pc, #600]	@ (8001958 <clcdDisplayAlarmSetting+0x2ec>)
 80016fe:	4897      	ldr	r0, [pc, #604]	@ (800195c <clcdDisplayAlarmSetting+0x2f0>)
 8001700:	f006 fc48 	bl	8007f94 <siprintf>
 8001704:	e025      	b.n	8001752 <clcdDisplayAlarmSetting+0xe6>
		} else {
			sprintf(alarm.buffer, "ALARM #  %-3s %3s", alarm.set[alarm.select].enabled == TRUE ? "ON" : "OFF",
 8001706:	4b8f      	ldr	r3, [pc, #572]	@ (8001944 <clcdDisplayAlarmSetting+0x2d8>)
 8001708:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800170c:	4619      	mov	r1, r3
 800170e:	4a8d      	ldr	r2, [pc, #564]	@ (8001944 <clcdDisplayAlarmSetting+0x2d8>)
 8001710:	460b      	mov	r3, r1
 8001712:	005b      	lsls	r3, r3, #1
 8001714:	440b      	add	r3, r1
 8001716:	009b      	lsls	r3, r3, #2
 8001718:	4413      	add	r3, r2
 800171a:	3308      	adds	r3, #8
 800171c:	781b      	ldrb	r3, [r3, #0]
 800171e:	2b01      	cmp	r3, #1
 8001720:	d101      	bne.n	8001726 <clcdDisplayAlarmSetting+0xba>
 8001722:	4a89      	ldr	r2, [pc, #548]	@ (8001948 <clcdDisplayAlarmSetting+0x2dc>)
 8001724:	e000      	b.n	8001728 <clcdDisplayAlarmSetting+0xbc>
 8001726:	4a89      	ldr	r2, [pc, #548]	@ (800194c <clcdDisplayAlarmSetting+0x2e0>)
					alarm.set[alarm.select].repeat == TRUE ? "RPT" : "ONC");
 8001728:	4b86      	ldr	r3, [pc, #536]	@ (8001944 <clcdDisplayAlarmSetting+0x2d8>)
 800172a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800172e:	4618      	mov	r0, r3
 8001730:	4984      	ldr	r1, [pc, #528]	@ (8001944 <clcdDisplayAlarmSetting+0x2d8>)
 8001732:	4603      	mov	r3, r0
 8001734:	005b      	lsls	r3, r3, #1
 8001736:	4403      	add	r3, r0
 8001738:	009b      	lsls	r3, r3, #2
 800173a:	440b      	add	r3, r1
 800173c:	3309      	adds	r3, #9
 800173e:	781b      	ldrb	r3, [r3, #0]
			sprintf(alarm.buffer, "ALARM #  %-3s %3s", alarm.set[alarm.select].enabled == TRUE ? "ON" : "OFF",
 8001740:	2b01      	cmp	r3, #1
 8001742:	d101      	bne.n	8001748 <clcdDisplayAlarmSetting+0xdc>
 8001744:	4b82      	ldr	r3, [pc, #520]	@ (8001950 <clcdDisplayAlarmSetting+0x2e4>)
 8001746:	e000      	b.n	800174a <clcdDisplayAlarmSetting+0xde>
 8001748:	4b82      	ldr	r3, [pc, #520]	@ (8001954 <clcdDisplayAlarmSetting+0x2e8>)
 800174a:	4985      	ldr	r1, [pc, #532]	@ (8001960 <clcdDisplayAlarmSetting+0x2f4>)
 800174c:	4883      	ldr	r0, [pc, #524]	@ (800195c <clcdDisplayAlarmSetting+0x2f0>)
 800174e:	f006 fc21 	bl	8007f94 <siprintf>
		}

		CLCD_Puts(0, 0, alarm.buffer);
 8001752:	4a82      	ldr	r2, [pc, #520]	@ (800195c <clcdDisplayAlarmSetting+0x2f0>)
 8001754:	2100      	movs	r1, #0
 8001756:	2000      	movs	r0, #0
 8001758:	f7ff fdce 	bl	80012f8 <CLCD_Puts>

		sprintf(alarm.buffer, "SET     %s %02d:%02d", alarm.set[alarm.select].hour > 11 ? "PM" : "AM",
 800175c:	4b79      	ldr	r3, [pc, #484]	@ (8001944 <clcdDisplayAlarmSetting+0x2d8>)
 800175e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001762:	4619      	mov	r1, r3
 8001764:	4a77      	ldr	r2, [pc, #476]	@ (8001944 <clcdDisplayAlarmSetting+0x2d8>)
 8001766:	460b      	mov	r3, r1
 8001768:	005b      	lsls	r3, r3, #1
 800176a:	440b      	add	r3, r1
 800176c:	009b      	lsls	r3, r3, #2
 800176e:	4413      	add	r3, r2
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	2b0b      	cmp	r3, #11
 8001774:	dd01      	ble.n	800177a <clcdDisplayAlarmSetting+0x10e>
 8001776:	497b      	ldr	r1, [pc, #492]	@ (8001964 <clcdDisplayAlarmSetting+0x2f8>)
 8001778:	e000      	b.n	800177c <clcdDisplayAlarmSetting+0x110>
 800177a:	497b      	ldr	r1, [pc, #492]	@ (8001968 <clcdDisplayAlarmSetting+0x2fc>)
				(alarm.set[alarm.select].hour > 12 ? (alarm.set[alarm.select].hour - 12) : alarm.set[alarm.select].hour == 0 ? 12 : alarm.set[alarm.select].hour),
 800177c:	4b71      	ldr	r3, [pc, #452]	@ (8001944 <clcdDisplayAlarmSetting+0x2d8>)
 800177e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001782:	4618      	mov	r0, r3
 8001784:	4a6f      	ldr	r2, [pc, #444]	@ (8001944 <clcdDisplayAlarmSetting+0x2d8>)
 8001786:	4603      	mov	r3, r0
 8001788:	005b      	lsls	r3, r3, #1
 800178a:	4403      	add	r3, r0
 800178c:	009b      	lsls	r3, r3, #2
 800178e:	4413      	add	r3, r2
 8001790:	681b      	ldr	r3, [r3, #0]
		sprintf(alarm.buffer, "SET     %s %02d:%02d", alarm.set[alarm.select].hour > 11 ? "PM" : "AM",
 8001792:	2b0c      	cmp	r3, #12
 8001794:	dd0d      	ble.n	80017b2 <clcdDisplayAlarmSetting+0x146>
				(alarm.set[alarm.select].hour > 12 ? (alarm.set[alarm.select].hour - 12) : alarm.set[alarm.select].hour == 0 ? 12 : alarm.set[alarm.select].hour),
 8001796:	4b6b      	ldr	r3, [pc, #428]	@ (8001944 <clcdDisplayAlarmSetting+0x2d8>)
 8001798:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800179c:	4618      	mov	r0, r3
 800179e:	4a69      	ldr	r2, [pc, #420]	@ (8001944 <clcdDisplayAlarmSetting+0x2d8>)
 80017a0:	4603      	mov	r3, r0
 80017a2:	005b      	lsls	r3, r3, #1
 80017a4:	4403      	add	r3, r0
 80017a6:	009b      	lsls	r3, r3, #2
 80017a8:	4413      	add	r3, r2
 80017aa:	681b      	ldr	r3, [r3, #0]
		sprintf(alarm.buffer, "SET     %s %02d:%02d", alarm.set[alarm.select].hour > 11 ? "PM" : "AM",
 80017ac:	f1a3 020c 	sub.w	r2, r3, #12
 80017b0:	e019      	b.n	80017e6 <clcdDisplayAlarmSetting+0x17a>
				(alarm.set[alarm.select].hour > 12 ? (alarm.set[alarm.select].hour - 12) : alarm.set[alarm.select].hour == 0 ? 12 : alarm.set[alarm.select].hour),
 80017b2:	4b64      	ldr	r3, [pc, #400]	@ (8001944 <clcdDisplayAlarmSetting+0x2d8>)
 80017b4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80017b8:	4618      	mov	r0, r3
 80017ba:	4a62      	ldr	r2, [pc, #392]	@ (8001944 <clcdDisplayAlarmSetting+0x2d8>)
 80017bc:	4603      	mov	r3, r0
 80017be:	005b      	lsls	r3, r3, #1
 80017c0:	4403      	add	r3, r0
 80017c2:	009b      	lsls	r3, r3, #2
 80017c4:	4413      	add	r3, r2
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d00b      	beq.n	80017e4 <clcdDisplayAlarmSetting+0x178>
 80017cc:	4b5d      	ldr	r3, [pc, #372]	@ (8001944 <clcdDisplayAlarmSetting+0x2d8>)
 80017ce:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80017d2:	4618      	mov	r0, r3
 80017d4:	4a5b      	ldr	r2, [pc, #364]	@ (8001944 <clcdDisplayAlarmSetting+0x2d8>)
 80017d6:	4603      	mov	r3, r0
 80017d8:	005b      	lsls	r3, r3, #1
 80017da:	4403      	add	r3, r0
 80017dc:	009b      	lsls	r3, r3, #2
 80017de:	4413      	add	r3, r2
 80017e0:	681a      	ldr	r2, [r3, #0]
 80017e2:	e000      	b.n	80017e6 <clcdDisplayAlarmSetting+0x17a>
 80017e4:	220c      	movs	r2, #12
				 alarm.set[alarm.select].minute);
 80017e6:	4b57      	ldr	r3, [pc, #348]	@ (8001944 <clcdDisplayAlarmSetting+0x2d8>)
 80017e8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80017ec:	461c      	mov	r4, r3
		sprintf(alarm.buffer, "SET     %s %02d:%02d", alarm.set[alarm.select].hour > 11 ? "PM" : "AM",
 80017ee:	4855      	ldr	r0, [pc, #340]	@ (8001944 <clcdDisplayAlarmSetting+0x2d8>)
 80017f0:	4623      	mov	r3, r4
 80017f2:	005b      	lsls	r3, r3, #1
 80017f4:	4423      	add	r3, r4
 80017f6:	009b      	lsls	r3, r3, #2
 80017f8:	4403      	add	r3, r0
 80017fa:	3304      	adds	r3, #4
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	9300      	str	r3, [sp, #0]
 8001800:	4613      	mov	r3, r2
 8001802:	460a      	mov	r2, r1
 8001804:	4959      	ldr	r1, [pc, #356]	@ (800196c <clcdDisplayAlarmSetting+0x300>)
 8001806:	4855      	ldr	r0, [pc, #340]	@ (800195c <clcdDisplayAlarmSetting+0x2f0>)
 8001808:	f006 fbc4 	bl	8007f94 <siprintf>
		CLCD_Puts(0, 1, alarm.buffer);
 800180c:	4a53      	ldr	r2, [pc, #332]	@ (800195c <clcdDisplayAlarmSetting+0x2f0>)
 800180e:	2101      	movs	r1, #1
 8001810:	2000      	movs	r0, #0
 8001812:	f7ff fd71 	bl	80012f8 <CLCD_Puts>
		break;
 8001816:	e332      	b.n	8001e7e <clcdDisplayAlarmSetting+0x812>
	case ALARM_MINUTE:
		sprintf(alarm.buffer, "ALARM #%d %-3s %3s", alarm.select + 1,
 8001818:	4b4a      	ldr	r3, [pc, #296]	@ (8001944 <clcdDisplayAlarmSetting+0x2d8>)
 800181a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800181e:	1c5a      	adds	r2, r3, #1
				alarm.set[alarm.select].enabled == TRUE ? "ON" : "OFF",
 8001820:	4b48      	ldr	r3, [pc, #288]	@ (8001944 <clcdDisplayAlarmSetting+0x2d8>)
 8001822:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001826:	4618      	mov	r0, r3
 8001828:	4946      	ldr	r1, [pc, #280]	@ (8001944 <clcdDisplayAlarmSetting+0x2d8>)
 800182a:	4603      	mov	r3, r0
 800182c:	005b      	lsls	r3, r3, #1
 800182e:	4403      	add	r3, r0
 8001830:	009b      	lsls	r3, r3, #2
 8001832:	440b      	add	r3, r1
 8001834:	3308      	adds	r3, #8
 8001836:	781b      	ldrb	r3, [r3, #0]
		sprintf(alarm.buffer, "ALARM #%d %-3s %3s", alarm.select + 1,
 8001838:	2b01      	cmp	r3, #1
 800183a:	d101      	bne.n	8001840 <clcdDisplayAlarmSetting+0x1d4>
 800183c:	4942      	ldr	r1, [pc, #264]	@ (8001948 <clcdDisplayAlarmSetting+0x2dc>)
 800183e:	e000      	b.n	8001842 <clcdDisplayAlarmSetting+0x1d6>
 8001840:	4942      	ldr	r1, [pc, #264]	@ (800194c <clcdDisplayAlarmSetting+0x2e0>)
				alarm.set[alarm.select].repeat == TRUE ? "RPT" : "ONC");
 8001842:	4b40      	ldr	r3, [pc, #256]	@ (8001944 <clcdDisplayAlarmSetting+0x2d8>)
 8001844:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001848:	461c      	mov	r4, r3
 800184a:	483e      	ldr	r0, [pc, #248]	@ (8001944 <clcdDisplayAlarmSetting+0x2d8>)
 800184c:	4623      	mov	r3, r4
 800184e:	005b      	lsls	r3, r3, #1
 8001850:	4423      	add	r3, r4
 8001852:	009b      	lsls	r3, r3, #2
 8001854:	4403      	add	r3, r0
 8001856:	3309      	adds	r3, #9
 8001858:	781b      	ldrb	r3, [r3, #0]
		sprintf(alarm.buffer, "ALARM #%d %-3s %3s", alarm.select + 1,
 800185a:	2b01      	cmp	r3, #1
 800185c:	d101      	bne.n	8001862 <clcdDisplayAlarmSetting+0x1f6>
 800185e:	4b3c      	ldr	r3, [pc, #240]	@ (8001950 <clcdDisplayAlarmSetting+0x2e4>)
 8001860:	e000      	b.n	8001864 <clcdDisplayAlarmSetting+0x1f8>
 8001862:	4b3c      	ldr	r3, [pc, #240]	@ (8001954 <clcdDisplayAlarmSetting+0x2e8>)
 8001864:	9300      	str	r3, [sp, #0]
 8001866:	460b      	mov	r3, r1
 8001868:	493b      	ldr	r1, [pc, #236]	@ (8001958 <clcdDisplayAlarmSetting+0x2ec>)
 800186a:	483c      	ldr	r0, [pc, #240]	@ (800195c <clcdDisplayAlarmSetting+0x2f0>)
 800186c:	f006 fb92 	bl	8007f94 <siprintf>
		CLCD_Puts(0, 0, alarm.buffer);
 8001870:	4a3a      	ldr	r2, [pc, #232]	@ (800195c <clcdDisplayAlarmSetting+0x2f0>)
 8001872:	2100      	movs	r1, #0
 8001874:	2000      	movs	r0, #0
 8001876:	f7ff fd3f 	bl	80012f8 <CLCD_Puts>
		if(getWaitingTime() < 200 || getBlink() == TRUE) {
 800187a:	f003 f97f 	bl	8004b7c <getWaitingTime>
 800187e:	4603      	mov	r3, r0
 8001880:	2bc7      	cmp	r3, #199	@ 0xc7
 8001882:	dd04      	ble.n	800188e <clcdDisplayAlarmSetting+0x222>
 8001884:	f003 f96e 	bl	8004b64 <getBlink>
 8001888:	4603      	mov	r3, r0
 800188a:	2b01      	cmp	r3, #1
 800188c:	d170      	bne.n	8001970 <clcdDisplayAlarmSetting+0x304>
			sprintf(alarm.buffer, "SET     %s %02d:%02d", alarm.set[alarm.select].hour > 11 ? "PM" : "AM",
 800188e:	4b2d      	ldr	r3, [pc, #180]	@ (8001944 <clcdDisplayAlarmSetting+0x2d8>)
 8001890:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001894:	4619      	mov	r1, r3
 8001896:	4a2b      	ldr	r2, [pc, #172]	@ (8001944 <clcdDisplayAlarmSetting+0x2d8>)
 8001898:	460b      	mov	r3, r1
 800189a:	005b      	lsls	r3, r3, #1
 800189c:	440b      	add	r3, r1
 800189e:	009b      	lsls	r3, r3, #2
 80018a0:	4413      	add	r3, r2
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	2b0b      	cmp	r3, #11
 80018a6:	dd01      	ble.n	80018ac <clcdDisplayAlarmSetting+0x240>
 80018a8:	492e      	ldr	r1, [pc, #184]	@ (8001964 <clcdDisplayAlarmSetting+0x2f8>)
 80018aa:	e000      	b.n	80018ae <clcdDisplayAlarmSetting+0x242>
 80018ac:	492e      	ldr	r1, [pc, #184]	@ (8001968 <clcdDisplayAlarmSetting+0x2fc>)
					(alarm.set[alarm.select].hour > 12 ? (alarm.set[alarm.select].hour - 12) : alarm.set[alarm.select].hour == 0 ? 12 : alarm.set[alarm.select].hour),
 80018ae:	4b25      	ldr	r3, [pc, #148]	@ (8001944 <clcdDisplayAlarmSetting+0x2d8>)
 80018b0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80018b4:	4618      	mov	r0, r3
 80018b6:	4a23      	ldr	r2, [pc, #140]	@ (8001944 <clcdDisplayAlarmSetting+0x2d8>)
 80018b8:	4603      	mov	r3, r0
 80018ba:	005b      	lsls	r3, r3, #1
 80018bc:	4403      	add	r3, r0
 80018be:	009b      	lsls	r3, r3, #2
 80018c0:	4413      	add	r3, r2
 80018c2:	681b      	ldr	r3, [r3, #0]
			sprintf(alarm.buffer, "SET     %s %02d:%02d", alarm.set[alarm.select].hour > 11 ? "PM" : "AM",
 80018c4:	2b0c      	cmp	r3, #12
 80018c6:	dd0d      	ble.n	80018e4 <clcdDisplayAlarmSetting+0x278>
					(alarm.set[alarm.select].hour > 12 ? (alarm.set[alarm.select].hour - 12) : alarm.set[alarm.select].hour == 0 ? 12 : alarm.set[alarm.select].hour),
 80018c8:	4b1e      	ldr	r3, [pc, #120]	@ (8001944 <clcdDisplayAlarmSetting+0x2d8>)
 80018ca:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80018ce:	4618      	mov	r0, r3
 80018d0:	4a1c      	ldr	r2, [pc, #112]	@ (8001944 <clcdDisplayAlarmSetting+0x2d8>)
 80018d2:	4603      	mov	r3, r0
 80018d4:	005b      	lsls	r3, r3, #1
 80018d6:	4403      	add	r3, r0
 80018d8:	009b      	lsls	r3, r3, #2
 80018da:	4413      	add	r3, r2
 80018dc:	681b      	ldr	r3, [r3, #0]
			sprintf(alarm.buffer, "SET     %s %02d:%02d", alarm.set[alarm.select].hour > 11 ? "PM" : "AM",
 80018de:	f1a3 020c 	sub.w	r2, r3, #12
 80018e2:	e019      	b.n	8001918 <clcdDisplayAlarmSetting+0x2ac>
					(alarm.set[alarm.select].hour > 12 ? (alarm.set[alarm.select].hour - 12) : alarm.set[alarm.select].hour == 0 ? 12 : alarm.set[alarm.select].hour),
 80018e4:	4b17      	ldr	r3, [pc, #92]	@ (8001944 <clcdDisplayAlarmSetting+0x2d8>)
 80018e6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80018ea:	4618      	mov	r0, r3
 80018ec:	4a15      	ldr	r2, [pc, #84]	@ (8001944 <clcdDisplayAlarmSetting+0x2d8>)
 80018ee:	4603      	mov	r3, r0
 80018f0:	005b      	lsls	r3, r3, #1
 80018f2:	4403      	add	r3, r0
 80018f4:	009b      	lsls	r3, r3, #2
 80018f6:	4413      	add	r3, r2
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d00b      	beq.n	8001916 <clcdDisplayAlarmSetting+0x2aa>
 80018fe:	4b11      	ldr	r3, [pc, #68]	@ (8001944 <clcdDisplayAlarmSetting+0x2d8>)
 8001900:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001904:	4618      	mov	r0, r3
 8001906:	4a0f      	ldr	r2, [pc, #60]	@ (8001944 <clcdDisplayAlarmSetting+0x2d8>)
 8001908:	4603      	mov	r3, r0
 800190a:	005b      	lsls	r3, r3, #1
 800190c:	4403      	add	r3, r0
 800190e:	009b      	lsls	r3, r3, #2
 8001910:	4413      	add	r3, r2
 8001912:	681a      	ldr	r2, [r3, #0]
 8001914:	e000      	b.n	8001918 <clcdDisplayAlarmSetting+0x2ac>
 8001916:	220c      	movs	r2, #12
					alarm.set[alarm.select].minute);
 8001918:	4b0a      	ldr	r3, [pc, #40]	@ (8001944 <clcdDisplayAlarmSetting+0x2d8>)
 800191a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800191e:	461c      	mov	r4, r3
			sprintf(alarm.buffer, "SET     %s %02d:%02d", alarm.set[alarm.select].hour > 11 ? "PM" : "AM",
 8001920:	4808      	ldr	r0, [pc, #32]	@ (8001944 <clcdDisplayAlarmSetting+0x2d8>)
 8001922:	4623      	mov	r3, r4
 8001924:	005b      	lsls	r3, r3, #1
 8001926:	4423      	add	r3, r4
 8001928:	009b      	lsls	r3, r3, #2
 800192a:	4403      	add	r3, r0
 800192c:	3304      	adds	r3, #4
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	9300      	str	r3, [sp, #0]
 8001932:	4613      	mov	r3, r2
 8001934:	460a      	mov	r2, r1
 8001936:	490d      	ldr	r1, [pc, #52]	@ (800196c <clcdDisplayAlarmSetting+0x300>)
 8001938:	4808      	ldr	r0, [pc, #32]	@ (800195c <clcdDisplayAlarmSetting+0x2f0>)
 800193a:	f006 fb2b 	bl	8007f94 <siprintf>
 800193e:	e05f      	b.n	8001a00 <clcdDisplayAlarmSetting+0x394>
 8001940:	200001d5 	.word	0x200001d5
 8001944:	20000000 	.word	0x20000000
 8001948:	080088f0 	.word	0x080088f0
 800194c:	080088ec 	.word	0x080088ec
 8001950:	080088f4 	.word	0x080088f4
 8001954:	080088f8 	.word	0x080088f8
 8001958:	080088fc 	.word	0x080088fc
 800195c:	2000003d 	.word	0x2000003d
 8001960:	08008958 	.word	0x08008958
 8001964:	08008914 	.word	0x08008914
 8001968:	08008910 	.word	0x08008910
 800196c:	0800896c 	.word	0x0800896c
		} else {
			sprintf(alarm.buffer, "SET     %s %02d:  ", alarm.set[alarm.select].hour > 11 ? "PM" : "AM",
 8001970:	4ba9      	ldr	r3, [pc, #676]	@ (8001c18 <clcdDisplayAlarmSetting+0x5ac>)
 8001972:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001976:	4619      	mov	r1, r3
 8001978:	4aa7      	ldr	r2, [pc, #668]	@ (8001c18 <clcdDisplayAlarmSetting+0x5ac>)
 800197a:	460b      	mov	r3, r1
 800197c:	005b      	lsls	r3, r3, #1
 800197e:	440b      	add	r3, r1
 8001980:	009b      	lsls	r3, r3, #2
 8001982:	4413      	add	r3, r2
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	2b0b      	cmp	r3, #11
 8001988:	dd01      	ble.n	800198e <clcdDisplayAlarmSetting+0x322>
 800198a:	4aa4      	ldr	r2, [pc, #656]	@ (8001c1c <clcdDisplayAlarmSetting+0x5b0>)
 800198c:	e000      	b.n	8001990 <clcdDisplayAlarmSetting+0x324>
 800198e:	4aa4      	ldr	r2, [pc, #656]	@ (8001c20 <clcdDisplayAlarmSetting+0x5b4>)
					(alarm.set[alarm.select].hour > 12 ? (alarm.set[alarm.select].hour - 12) : alarm.set[alarm.select].hour == 0 ? 12 : alarm.set[alarm.select].hour));
 8001990:	4ba1      	ldr	r3, [pc, #644]	@ (8001c18 <clcdDisplayAlarmSetting+0x5ac>)
 8001992:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001996:	4618      	mov	r0, r3
 8001998:	499f      	ldr	r1, [pc, #636]	@ (8001c18 <clcdDisplayAlarmSetting+0x5ac>)
 800199a:	4603      	mov	r3, r0
 800199c:	005b      	lsls	r3, r3, #1
 800199e:	4403      	add	r3, r0
 80019a0:	009b      	lsls	r3, r3, #2
 80019a2:	440b      	add	r3, r1
 80019a4:	681b      	ldr	r3, [r3, #0]
			sprintf(alarm.buffer, "SET     %s %02d:  ", alarm.set[alarm.select].hour > 11 ? "PM" : "AM",
 80019a6:	2b0c      	cmp	r3, #12
 80019a8:	dd0c      	ble.n	80019c4 <clcdDisplayAlarmSetting+0x358>
					(alarm.set[alarm.select].hour > 12 ? (alarm.set[alarm.select].hour - 12) : alarm.set[alarm.select].hour == 0 ? 12 : alarm.set[alarm.select].hour));
 80019aa:	4b9b      	ldr	r3, [pc, #620]	@ (8001c18 <clcdDisplayAlarmSetting+0x5ac>)
 80019ac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80019b0:	4618      	mov	r0, r3
 80019b2:	4999      	ldr	r1, [pc, #612]	@ (8001c18 <clcdDisplayAlarmSetting+0x5ac>)
 80019b4:	4603      	mov	r3, r0
 80019b6:	005b      	lsls	r3, r3, #1
 80019b8:	4403      	add	r3, r0
 80019ba:	009b      	lsls	r3, r3, #2
 80019bc:	440b      	add	r3, r1
 80019be:	681b      	ldr	r3, [r3, #0]
			sprintf(alarm.buffer, "SET     %s %02d:  ", alarm.set[alarm.select].hour > 11 ? "PM" : "AM",
 80019c0:	3b0c      	subs	r3, #12
 80019c2:	e019      	b.n	80019f8 <clcdDisplayAlarmSetting+0x38c>
					(alarm.set[alarm.select].hour > 12 ? (alarm.set[alarm.select].hour - 12) : alarm.set[alarm.select].hour == 0 ? 12 : alarm.set[alarm.select].hour));
 80019c4:	4b94      	ldr	r3, [pc, #592]	@ (8001c18 <clcdDisplayAlarmSetting+0x5ac>)
 80019c6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80019ca:	4618      	mov	r0, r3
 80019cc:	4992      	ldr	r1, [pc, #584]	@ (8001c18 <clcdDisplayAlarmSetting+0x5ac>)
 80019ce:	4603      	mov	r3, r0
 80019d0:	005b      	lsls	r3, r3, #1
 80019d2:	4403      	add	r3, r0
 80019d4:	009b      	lsls	r3, r3, #2
 80019d6:	440b      	add	r3, r1
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d00b      	beq.n	80019f6 <clcdDisplayAlarmSetting+0x38a>
 80019de:	4b8e      	ldr	r3, [pc, #568]	@ (8001c18 <clcdDisplayAlarmSetting+0x5ac>)
 80019e0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80019e4:	4618      	mov	r0, r3
 80019e6:	498c      	ldr	r1, [pc, #560]	@ (8001c18 <clcdDisplayAlarmSetting+0x5ac>)
 80019e8:	4603      	mov	r3, r0
 80019ea:	005b      	lsls	r3, r3, #1
 80019ec:	4403      	add	r3, r0
 80019ee:	009b      	lsls	r3, r3, #2
 80019f0:	440b      	add	r3, r1
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	e000      	b.n	80019f8 <clcdDisplayAlarmSetting+0x38c>
 80019f6:	230c      	movs	r3, #12
			sprintf(alarm.buffer, "SET     %s %02d:  ", alarm.set[alarm.select].hour > 11 ? "PM" : "AM",
 80019f8:	498a      	ldr	r1, [pc, #552]	@ (8001c24 <clcdDisplayAlarmSetting+0x5b8>)
 80019fa:	488b      	ldr	r0, [pc, #556]	@ (8001c28 <clcdDisplayAlarmSetting+0x5bc>)
 80019fc:	f006 faca 	bl	8007f94 <siprintf>
		}

		CLCD_Puts(0, 1, alarm.buffer);
 8001a00:	4a89      	ldr	r2, [pc, #548]	@ (8001c28 <clcdDisplayAlarmSetting+0x5bc>)
 8001a02:	2101      	movs	r1, #1
 8001a04:	2000      	movs	r0, #0
 8001a06:	f7ff fc77 	bl	80012f8 <CLCD_Puts>
		break;
 8001a0a:	e238      	b.n	8001e7e <clcdDisplayAlarmSetting+0x812>
	case ALARM_HOUR:
		sprintf(alarm.buffer, "ALARM #%d %-3s %3s", alarm.select + 1,
 8001a0c:	4b82      	ldr	r3, [pc, #520]	@ (8001c18 <clcdDisplayAlarmSetting+0x5ac>)
 8001a0e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001a12:	1c5a      	adds	r2, r3, #1
				alarm.set[alarm.select].enabled == TRUE ? "ON" : "OFF",
 8001a14:	4b80      	ldr	r3, [pc, #512]	@ (8001c18 <clcdDisplayAlarmSetting+0x5ac>)
 8001a16:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	497e      	ldr	r1, [pc, #504]	@ (8001c18 <clcdDisplayAlarmSetting+0x5ac>)
 8001a1e:	4603      	mov	r3, r0
 8001a20:	005b      	lsls	r3, r3, #1
 8001a22:	4403      	add	r3, r0
 8001a24:	009b      	lsls	r3, r3, #2
 8001a26:	440b      	add	r3, r1
 8001a28:	3308      	adds	r3, #8
 8001a2a:	781b      	ldrb	r3, [r3, #0]
		sprintf(alarm.buffer, "ALARM #%d %-3s %3s", alarm.select + 1,
 8001a2c:	2b01      	cmp	r3, #1
 8001a2e:	d101      	bne.n	8001a34 <clcdDisplayAlarmSetting+0x3c8>
 8001a30:	497e      	ldr	r1, [pc, #504]	@ (8001c2c <clcdDisplayAlarmSetting+0x5c0>)
 8001a32:	e000      	b.n	8001a36 <clcdDisplayAlarmSetting+0x3ca>
 8001a34:	497e      	ldr	r1, [pc, #504]	@ (8001c30 <clcdDisplayAlarmSetting+0x5c4>)
				alarm.set[alarm.select].repeat == TRUE ? "RPT" : "ONC");
 8001a36:	4b78      	ldr	r3, [pc, #480]	@ (8001c18 <clcdDisplayAlarmSetting+0x5ac>)
 8001a38:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001a3c:	461c      	mov	r4, r3
 8001a3e:	4876      	ldr	r0, [pc, #472]	@ (8001c18 <clcdDisplayAlarmSetting+0x5ac>)
 8001a40:	4623      	mov	r3, r4
 8001a42:	005b      	lsls	r3, r3, #1
 8001a44:	4423      	add	r3, r4
 8001a46:	009b      	lsls	r3, r3, #2
 8001a48:	4403      	add	r3, r0
 8001a4a:	3309      	adds	r3, #9
 8001a4c:	781b      	ldrb	r3, [r3, #0]
		sprintf(alarm.buffer, "ALARM #%d %-3s %3s", alarm.select + 1,
 8001a4e:	2b01      	cmp	r3, #1
 8001a50:	d101      	bne.n	8001a56 <clcdDisplayAlarmSetting+0x3ea>
 8001a52:	4b78      	ldr	r3, [pc, #480]	@ (8001c34 <clcdDisplayAlarmSetting+0x5c8>)
 8001a54:	e000      	b.n	8001a58 <clcdDisplayAlarmSetting+0x3ec>
 8001a56:	4b78      	ldr	r3, [pc, #480]	@ (8001c38 <clcdDisplayAlarmSetting+0x5cc>)
 8001a58:	9300      	str	r3, [sp, #0]
 8001a5a:	460b      	mov	r3, r1
 8001a5c:	4977      	ldr	r1, [pc, #476]	@ (8001c3c <clcdDisplayAlarmSetting+0x5d0>)
 8001a5e:	4872      	ldr	r0, [pc, #456]	@ (8001c28 <clcdDisplayAlarmSetting+0x5bc>)
 8001a60:	f006 fa98 	bl	8007f94 <siprintf>
		CLCD_Puts(0, 0, alarm.buffer);
 8001a64:	4a70      	ldr	r2, [pc, #448]	@ (8001c28 <clcdDisplayAlarmSetting+0x5bc>)
 8001a66:	2100      	movs	r1, #0
 8001a68:	2000      	movs	r0, #0
 8001a6a:	f7ff fc45 	bl	80012f8 <CLCD_Puts>
		if(getWaitingTime() < 200 || getBlink() == TRUE) {
 8001a6e:	f003 f885 	bl	8004b7c <getWaitingTime>
 8001a72:	4603      	mov	r3, r0
 8001a74:	2bc7      	cmp	r3, #199	@ 0xc7
 8001a76:	dd04      	ble.n	8001a82 <clcdDisplayAlarmSetting+0x416>
 8001a78:	f003 f874 	bl	8004b64 <getBlink>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	2b01      	cmp	r3, #1
 8001a80:	d158      	bne.n	8001b34 <clcdDisplayAlarmSetting+0x4c8>
			sprintf(alarm.buffer, "SET     %s %02d:%02d", alarm.set[alarm.select].hour > 11 ? "PM" : "AM",
 8001a82:	4b65      	ldr	r3, [pc, #404]	@ (8001c18 <clcdDisplayAlarmSetting+0x5ac>)
 8001a84:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001a88:	4619      	mov	r1, r3
 8001a8a:	4a63      	ldr	r2, [pc, #396]	@ (8001c18 <clcdDisplayAlarmSetting+0x5ac>)
 8001a8c:	460b      	mov	r3, r1
 8001a8e:	005b      	lsls	r3, r3, #1
 8001a90:	440b      	add	r3, r1
 8001a92:	009b      	lsls	r3, r3, #2
 8001a94:	4413      	add	r3, r2
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	2b0b      	cmp	r3, #11
 8001a9a:	dd01      	ble.n	8001aa0 <clcdDisplayAlarmSetting+0x434>
 8001a9c:	495f      	ldr	r1, [pc, #380]	@ (8001c1c <clcdDisplayAlarmSetting+0x5b0>)
 8001a9e:	e000      	b.n	8001aa2 <clcdDisplayAlarmSetting+0x436>
 8001aa0:	495f      	ldr	r1, [pc, #380]	@ (8001c20 <clcdDisplayAlarmSetting+0x5b4>)
					(alarm.set[alarm.select].hour > 12 ? (alarm.set[alarm.select].hour - 12) : alarm.set[alarm.select].hour == 0 ? 12 : alarm.set[alarm.select].hour),
 8001aa2:	4b5d      	ldr	r3, [pc, #372]	@ (8001c18 <clcdDisplayAlarmSetting+0x5ac>)
 8001aa4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	4a5b      	ldr	r2, [pc, #364]	@ (8001c18 <clcdDisplayAlarmSetting+0x5ac>)
 8001aac:	4603      	mov	r3, r0
 8001aae:	005b      	lsls	r3, r3, #1
 8001ab0:	4403      	add	r3, r0
 8001ab2:	009b      	lsls	r3, r3, #2
 8001ab4:	4413      	add	r3, r2
 8001ab6:	681b      	ldr	r3, [r3, #0]
			sprintf(alarm.buffer, "SET     %s %02d:%02d", alarm.set[alarm.select].hour > 11 ? "PM" : "AM",
 8001ab8:	2b0c      	cmp	r3, #12
 8001aba:	dd0d      	ble.n	8001ad8 <clcdDisplayAlarmSetting+0x46c>
					(alarm.set[alarm.select].hour > 12 ? (alarm.set[alarm.select].hour - 12) : alarm.set[alarm.select].hour == 0 ? 12 : alarm.set[alarm.select].hour),
 8001abc:	4b56      	ldr	r3, [pc, #344]	@ (8001c18 <clcdDisplayAlarmSetting+0x5ac>)
 8001abe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	4a54      	ldr	r2, [pc, #336]	@ (8001c18 <clcdDisplayAlarmSetting+0x5ac>)
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	005b      	lsls	r3, r3, #1
 8001aca:	4403      	add	r3, r0
 8001acc:	009b      	lsls	r3, r3, #2
 8001ace:	4413      	add	r3, r2
 8001ad0:	681b      	ldr	r3, [r3, #0]
			sprintf(alarm.buffer, "SET     %s %02d:%02d", alarm.set[alarm.select].hour > 11 ? "PM" : "AM",
 8001ad2:	f1a3 020c 	sub.w	r2, r3, #12
 8001ad6:	e019      	b.n	8001b0c <clcdDisplayAlarmSetting+0x4a0>
					(alarm.set[alarm.select].hour > 12 ? (alarm.set[alarm.select].hour - 12) : alarm.set[alarm.select].hour == 0 ? 12 : alarm.set[alarm.select].hour),
 8001ad8:	4b4f      	ldr	r3, [pc, #316]	@ (8001c18 <clcdDisplayAlarmSetting+0x5ac>)
 8001ada:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001ade:	4618      	mov	r0, r3
 8001ae0:	4a4d      	ldr	r2, [pc, #308]	@ (8001c18 <clcdDisplayAlarmSetting+0x5ac>)
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	005b      	lsls	r3, r3, #1
 8001ae6:	4403      	add	r3, r0
 8001ae8:	009b      	lsls	r3, r3, #2
 8001aea:	4413      	add	r3, r2
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d00b      	beq.n	8001b0a <clcdDisplayAlarmSetting+0x49e>
 8001af2:	4b49      	ldr	r3, [pc, #292]	@ (8001c18 <clcdDisplayAlarmSetting+0x5ac>)
 8001af4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001af8:	4618      	mov	r0, r3
 8001afa:	4a47      	ldr	r2, [pc, #284]	@ (8001c18 <clcdDisplayAlarmSetting+0x5ac>)
 8001afc:	4603      	mov	r3, r0
 8001afe:	005b      	lsls	r3, r3, #1
 8001b00:	4403      	add	r3, r0
 8001b02:	009b      	lsls	r3, r3, #2
 8001b04:	4413      	add	r3, r2
 8001b06:	681a      	ldr	r2, [r3, #0]
 8001b08:	e000      	b.n	8001b0c <clcdDisplayAlarmSetting+0x4a0>
 8001b0a:	220c      	movs	r2, #12
					alarm.set[alarm.select].minute);
 8001b0c:	4b42      	ldr	r3, [pc, #264]	@ (8001c18 <clcdDisplayAlarmSetting+0x5ac>)
 8001b0e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001b12:	461c      	mov	r4, r3
			sprintf(alarm.buffer, "SET     %s %02d:%02d", alarm.set[alarm.select].hour > 11 ? "PM" : "AM",
 8001b14:	4840      	ldr	r0, [pc, #256]	@ (8001c18 <clcdDisplayAlarmSetting+0x5ac>)
 8001b16:	4623      	mov	r3, r4
 8001b18:	005b      	lsls	r3, r3, #1
 8001b1a:	4423      	add	r3, r4
 8001b1c:	009b      	lsls	r3, r3, #2
 8001b1e:	4403      	add	r3, r0
 8001b20:	3304      	adds	r3, #4
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	9300      	str	r3, [sp, #0]
 8001b26:	4613      	mov	r3, r2
 8001b28:	460a      	mov	r2, r1
 8001b2a:	4945      	ldr	r1, [pc, #276]	@ (8001c40 <clcdDisplayAlarmSetting+0x5d4>)
 8001b2c:	483e      	ldr	r0, [pc, #248]	@ (8001c28 <clcdDisplayAlarmSetting+0x5bc>)
 8001b2e:	f006 fa31 	bl	8007f94 <siprintf>
 8001b32:	e01f      	b.n	8001b74 <clcdDisplayAlarmSetting+0x508>
		} else {
			sprintf(alarm.buffer, "SET     %s   :%02d", alarm.set[alarm.select].hour > 11 ? "PM" : "AM",
 8001b34:	4b38      	ldr	r3, [pc, #224]	@ (8001c18 <clcdDisplayAlarmSetting+0x5ac>)
 8001b36:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001b3a:	4619      	mov	r1, r3
 8001b3c:	4a36      	ldr	r2, [pc, #216]	@ (8001c18 <clcdDisplayAlarmSetting+0x5ac>)
 8001b3e:	460b      	mov	r3, r1
 8001b40:	005b      	lsls	r3, r3, #1
 8001b42:	440b      	add	r3, r1
 8001b44:	009b      	lsls	r3, r3, #2
 8001b46:	4413      	add	r3, r2
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	2b0b      	cmp	r3, #11
 8001b4c:	dd01      	ble.n	8001b52 <clcdDisplayAlarmSetting+0x4e6>
 8001b4e:	4a33      	ldr	r2, [pc, #204]	@ (8001c1c <clcdDisplayAlarmSetting+0x5b0>)
 8001b50:	e000      	b.n	8001b54 <clcdDisplayAlarmSetting+0x4e8>
 8001b52:	4a33      	ldr	r2, [pc, #204]	@ (8001c20 <clcdDisplayAlarmSetting+0x5b4>)
					alarm.set[alarm.select].minute);
 8001b54:	4b30      	ldr	r3, [pc, #192]	@ (8001c18 <clcdDisplayAlarmSetting+0x5ac>)
 8001b56:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001b5a:	4618      	mov	r0, r3
			sprintf(alarm.buffer, "SET     %s   :%02d", alarm.set[alarm.select].hour > 11 ? "PM" : "AM",
 8001b5c:	492e      	ldr	r1, [pc, #184]	@ (8001c18 <clcdDisplayAlarmSetting+0x5ac>)
 8001b5e:	4603      	mov	r3, r0
 8001b60:	005b      	lsls	r3, r3, #1
 8001b62:	4403      	add	r3, r0
 8001b64:	009b      	lsls	r3, r3, #2
 8001b66:	440b      	add	r3, r1
 8001b68:	3304      	adds	r3, #4
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4935      	ldr	r1, [pc, #212]	@ (8001c44 <clcdDisplayAlarmSetting+0x5d8>)
 8001b6e:	482e      	ldr	r0, [pc, #184]	@ (8001c28 <clcdDisplayAlarmSetting+0x5bc>)
 8001b70:	f006 fa10 	bl	8007f94 <siprintf>
		}
		CLCD_Puts(0, 1, alarm.buffer);
 8001b74:	4a2c      	ldr	r2, [pc, #176]	@ (8001c28 <clcdDisplayAlarmSetting+0x5bc>)
 8001b76:	2101      	movs	r1, #1
 8001b78:	2000      	movs	r0, #0
 8001b7a:	f7ff fbbd 	bl	80012f8 <CLCD_Puts>
		break;
 8001b7e:	e17e      	b.n	8001e7e <clcdDisplayAlarmSetting+0x812>
	case ALARM_REPEAT:
		if(getWaitingTime() < 200 || getBlink() == TRUE) {
 8001b80:	f002 fffc 	bl	8004b7c <getWaitingTime>
 8001b84:	4603      	mov	r3, r0
 8001b86:	2bc7      	cmp	r3, #199	@ 0xc7
 8001b88:	dd04      	ble.n	8001b94 <clcdDisplayAlarmSetting+0x528>
 8001b8a:	f002 ffeb 	bl	8004b64 <getBlink>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	2b01      	cmp	r3, #1
 8001b92:	d12c      	bne.n	8001bee <clcdDisplayAlarmSetting+0x582>
			sprintf(alarm.buffer, "ALARM #%d %-3s %3s", alarm.select + 1,
 8001b94:	4b20      	ldr	r3, [pc, #128]	@ (8001c18 <clcdDisplayAlarmSetting+0x5ac>)
 8001b96:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001b9a:	1c5a      	adds	r2, r3, #1
							alarm.set[alarm.select].enabled == TRUE ? "ON" : "OFF",
 8001b9c:	4b1e      	ldr	r3, [pc, #120]	@ (8001c18 <clcdDisplayAlarmSetting+0x5ac>)
 8001b9e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	491c      	ldr	r1, [pc, #112]	@ (8001c18 <clcdDisplayAlarmSetting+0x5ac>)
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	005b      	lsls	r3, r3, #1
 8001baa:	4403      	add	r3, r0
 8001bac:	009b      	lsls	r3, r3, #2
 8001bae:	440b      	add	r3, r1
 8001bb0:	3308      	adds	r3, #8
 8001bb2:	781b      	ldrb	r3, [r3, #0]
			sprintf(alarm.buffer, "ALARM #%d %-3s %3s", alarm.select + 1,
 8001bb4:	2b01      	cmp	r3, #1
 8001bb6:	d101      	bne.n	8001bbc <clcdDisplayAlarmSetting+0x550>
 8001bb8:	491c      	ldr	r1, [pc, #112]	@ (8001c2c <clcdDisplayAlarmSetting+0x5c0>)
 8001bba:	e000      	b.n	8001bbe <clcdDisplayAlarmSetting+0x552>
 8001bbc:	491c      	ldr	r1, [pc, #112]	@ (8001c30 <clcdDisplayAlarmSetting+0x5c4>)
							alarm.set[alarm.select].repeat == TRUE ? "RPT" : "ONC");
 8001bbe:	4b16      	ldr	r3, [pc, #88]	@ (8001c18 <clcdDisplayAlarmSetting+0x5ac>)
 8001bc0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001bc4:	461c      	mov	r4, r3
 8001bc6:	4814      	ldr	r0, [pc, #80]	@ (8001c18 <clcdDisplayAlarmSetting+0x5ac>)
 8001bc8:	4623      	mov	r3, r4
 8001bca:	005b      	lsls	r3, r3, #1
 8001bcc:	4423      	add	r3, r4
 8001bce:	009b      	lsls	r3, r3, #2
 8001bd0:	4403      	add	r3, r0
 8001bd2:	3309      	adds	r3, #9
 8001bd4:	781b      	ldrb	r3, [r3, #0]
			sprintf(alarm.buffer, "ALARM #%d %-3s %3s", alarm.select + 1,
 8001bd6:	2b01      	cmp	r3, #1
 8001bd8:	d101      	bne.n	8001bde <clcdDisplayAlarmSetting+0x572>
 8001bda:	4b16      	ldr	r3, [pc, #88]	@ (8001c34 <clcdDisplayAlarmSetting+0x5c8>)
 8001bdc:	e000      	b.n	8001be0 <clcdDisplayAlarmSetting+0x574>
 8001bde:	4b16      	ldr	r3, [pc, #88]	@ (8001c38 <clcdDisplayAlarmSetting+0x5cc>)
 8001be0:	9300      	str	r3, [sp, #0]
 8001be2:	460b      	mov	r3, r1
 8001be4:	4915      	ldr	r1, [pc, #84]	@ (8001c3c <clcdDisplayAlarmSetting+0x5d0>)
 8001be6:	4810      	ldr	r0, [pc, #64]	@ (8001c28 <clcdDisplayAlarmSetting+0x5bc>)
 8001be8:	f006 f9d4 	bl	8007f94 <siprintf>
 8001bec:	e031      	b.n	8001c52 <clcdDisplayAlarmSetting+0x5e6>
		} else {
			sprintf(alarm.buffer, "ALARM #%d %-3s    ", alarm.select + 1,
 8001bee:	4b0a      	ldr	r3, [pc, #40]	@ (8001c18 <clcdDisplayAlarmSetting+0x5ac>)
 8001bf0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001bf4:	1c5a      	adds	r2, r3, #1
							alarm.set[alarm.select].enabled == TRUE ? "ON" : "OFF");
 8001bf6:	4b08      	ldr	r3, [pc, #32]	@ (8001c18 <clcdDisplayAlarmSetting+0x5ac>)
 8001bf8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	4906      	ldr	r1, [pc, #24]	@ (8001c18 <clcdDisplayAlarmSetting+0x5ac>)
 8001c00:	4603      	mov	r3, r0
 8001c02:	005b      	lsls	r3, r3, #1
 8001c04:	4403      	add	r3, r0
 8001c06:	009b      	lsls	r3, r3, #2
 8001c08:	440b      	add	r3, r1
 8001c0a:	3308      	adds	r3, #8
 8001c0c:	781b      	ldrb	r3, [r3, #0]
			sprintf(alarm.buffer, "ALARM #%d %-3s    ", alarm.select + 1,
 8001c0e:	2b01      	cmp	r3, #1
 8001c10:	d11a      	bne.n	8001c48 <clcdDisplayAlarmSetting+0x5dc>
 8001c12:	4b06      	ldr	r3, [pc, #24]	@ (8001c2c <clcdDisplayAlarmSetting+0x5c0>)
 8001c14:	e019      	b.n	8001c4a <clcdDisplayAlarmSetting+0x5de>
 8001c16:	bf00      	nop
 8001c18:	20000000 	.word	0x20000000
 8001c1c:	08008914 	.word	0x08008914
 8001c20:	08008910 	.word	0x08008910
 8001c24:	08008984 	.word	0x08008984
 8001c28:	2000003d 	.word	0x2000003d
 8001c2c:	080088f0 	.word	0x080088f0
 8001c30:	080088ec 	.word	0x080088ec
 8001c34:	080088f4 	.word	0x080088f4
 8001c38:	080088f8 	.word	0x080088f8
 8001c3c:	080088fc 	.word	0x080088fc
 8001c40:	0800896c 	.word	0x0800896c
 8001c44:	08008998 	.word	0x08008998
 8001c48:	4b8f      	ldr	r3, [pc, #572]	@ (8001e88 <clcdDisplayAlarmSetting+0x81c>)
 8001c4a:	4990      	ldr	r1, [pc, #576]	@ (8001e8c <clcdDisplayAlarmSetting+0x820>)
 8001c4c:	4890      	ldr	r0, [pc, #576]	@ (8001e90 <clcdDisplayAlarmSetting+0x824>)
 8001c4e:	f006 f9a1 	bl	8007f94 <siprintf>
		}

		CLCD_Puts(0, 0, alarm.buffer);
 8001c52:	4a8f      	ldr	r2, [pc, #572]	@ (8001e90 <clcdDisplayAlarmSetting+0x824>)
 8001c54:	2100      	movs	r1, #0
 8001c56:	2000      	movs	r0, #0
 8001c58:	f7ff fb4e 	bl	80012f8 <CLCD_Puts>

		sprintf(alarm.buffer, "SET     %s %02d:%02d", alarm.set[alarm.select].hour > 11 ? "PM" : "AM",
 8001c5c:	4b8d      	ldr	r3, [pc, #564]	@ (8001e94 <clcdDisplayAlarmSetting+0x828>)
 8001c5e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001c62:	4619      	mov	r1, r3
 8001c64:	4a8b      	ldr	r2, [pc, #556]	@ (8001e94 <clcdDisplayAlarmSetting+0x828>)
 8001c66:	460b      	mov	r3, r1
 8001c68:	005b      	lsls	r3, r3, #1
 8001c6a:	440b      	add	r3, r1
 8001c6c:	009b      	lsls	r3, r3, #2
 8001c6e:	4413      	add	r3, r2
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	2b0b      	cmp	r3, #11
 8001c74:	dd01      	ble.n	8001c7a <clcdDisplayAlarmSetting+0x60e>
 8001c76:	4988      	ldr	r1, [pc, #544]	@ (8001e98 <clcdDisplayAlarmSetting+0x82c>)
 8001c78:	e000      	b.n	8001c7c <clcdDisplayAlarmSetting+0x610>
 8001c7a:	4988      	ldr	r1, [pc, #544]	@ (8001e9c <clcdDisplayAlarmSetting+0x830>)
				(alarm.set[alarm.select].hour > 12 ? (alarm.set[alarm.select].hour - 12) : alarm.set[alarm.select].hour == 0 ? 12 : alarm.set[alarm.select].hour),
 8001c7c:	4b85      	ldr	r3, [pc, #532]	@ (8001e94 <clcdDisplayAlarmSetting+0x828>)
 8001c7e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001c82:	4618      	mov	r0, r3
 8001c84:	4a83      	ldr	r2, [pc, #524]	@ (8001e94 <clcdDisplayAlarmSetting+0x828>)
 8001c86:	4603      	mov	r3, r0
 8001c88:	005b      	lsls	r3, r3, #1
 8001c8a:	4403      	add	r3, r0
 8001c8c:	009b      	lsls	r3, r3, #2
 8001c8e:	4413      	add	r3, r2
 8001c90:	681b      	ldr	r3, [r3, #0]
		sprintf(alarm.buffer, "SET     %s %02d:%02d", alarm.set[alarm.select].hour > 11 ? "PM" : "AM",
 8001c92:	2b0c      	cmp	r3, #12
 8001c94:	dd0d      	ble.n	8001cb2 <clcdDisplayAlarmSetting+0x646>
				(alarm.set[alarm.select].hour > 12 ? (alarm.set[alarm.select].hour - 12) : alarm.set[alarm.select].hour == 0 ? 12 : alarm.set[alarm.select].hour),
 8001c96:	4b7f      	ldr	r3, [pc, #508]	@ (8001e94 <clcdDisplayAlarmSetting+0x828>)
 8001c98:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	4a7d      	ldr	r2, [pc, #500]	@ (8001e94 <clcdDisplayAlarmSetting+0x828>)
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	005b      	lsls	r3, r3, #1
 8001ca4:	4403      	add	r3, r0
 8001ca6:	009b      	lsls	r3, r3, #2
 8001ca8:	4413      	add	r3, r2
 8001caa:	681b      	ldr	r3, [r3, #0]
		sprintf(alarm.buffer, "SET     %s %02d:%02d", alarm.set[alarm.select].hour > 11 ? "PM" : "AM",
 8001cac:	f1a3 020c 	sub.w	r2, r3, #12
 8001cb0:	e019      	b.n	8001ce6 <clcdDisplayAlarmSetting+0x67a>
				(alarm.set[alarm.select].hour > 12 ? (alarm.set[alarm.select].hour - 12) : alarm.set[alarm.select].hour == 0 ? 12 : alarm.set[alarm.select].hour),
 8001cb2:	4b78      	ldr	r3, [pc, #480]	@ (8001e94 <clcdDisplayAlarmSetting+0x828>)
 8001cb4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001cb8:	4618      	mov	r0, r3
 8001cba:	4a76      	ldr	r2, [pc, #472]	@ (8001e94 <clcdDisplayAlarmSetting+0x828>)
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	005b      	lsls	r3, r3, #1
 8001cc0:	4403      	add	r3, r0
 8001cc2:	009b      	lsls	r3, r3, #2
 8001cc4:	4413      	add	r3, r2
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d00b      	beq.n	8001ce4 <clcdDisplayAlarmSetting+0x678>
 8001ccc:	4b71      	ldr	r3, [pc, #452]	@ (8001e94 <clcdDisplayAlarmSetting+0x828>)
 8001cce:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	4a6f      	ldr	r2, [pc, #444]	@ (8001e94 <clcdDisplayAlarmSetting+0x828>)
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	005b      	lsls	r3, r3, #1
 8001cda:	4403      	add	r3, r0
 8001cdc:	009b      	lsls	r3, r3, #2
 8001cde:	4413      	add	r3, r2
 8001ce0:	681a      	ldr	r2, [r3, #0]
 8001ce2:	e000      	b.n	8001ce6 <clcdDisplayAlarmSetting+0x67a>
 8001ce4:	220c      	movs	r2, #12
				alarm.set[alarm.select].minute);
 8001ce6:	4b6b      	ldr	r3, [pc, #428]	@ (8001e94 <clcdDisplayAlarmSetting+0x828>)
 8001ce8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001cec:	461c      	mov	r4, r3
		sprintf(alarm.buffer, "SET     %s %02d:%02d", alarm.set[alarm.select].hour > 11 ? "PM" : "AM",
 8001cee:	4869      	ldr	r0, [pc, #420]	@ (8001e94 <clcdDisplayAlarmSetting+0x828>)
 8001cf0:	4623      	mov	r3, r4
 8001cf2:	005b      	lsls	r3, r3, #1
 8001cf4:	4423      	add	r3, r4
 8001cf6:	009b      	lsls	r3, r3, #2
 8001cf8:	4403      	add	r3, r0
 8001cfa:	3304      	adds	r3, #4
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	9300      	str	r3, [sp, #0]
 8001d00:	4613      	mov	r3, r2
 8001d02:	460a      	mov	r2, r1
 8001d04:	4966      	ldr	r1, [pc, #408]	@ (8001ea0 <clcdDisplayAlarmSetting+0x834>)
 8001d06:	4862      	ldr	r0, [pc, #392]	@ (8001e90 <clcdDisplayAlarmSetting+0x824>)
 8001d08:	f006 f944 	bl	8007f94 <siprintf>
		CLCD_Puts(0, 1, alarm.buffer);
 8001d0c:	4a60      	ldr	r2, [pc, #384]	@ (8001e90 <clcdDisplayAlarmSetting+0x824>)
 8001d0e:	2101      	movs	r1, #1
 8001d10:	2000      	movs	r0, #0
 8001d12:	f7ff faf1 	bl	80012f8 <CLCD_Puts>
		break;
 8001d16:	e0b2      	b.n	8001e7e <clcdDisplayAlarmSetting+0x812>
	case ALARM_ENABLE:
		if(getWaitingTime() < 200 || getBlink() == TRUE) {
 8001d18:	f002 ff30 	bl	8004b7c <getWaitingTime>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	2bc7      	cmp	r3, #199	@ 0xc7
 8001d20:	dd04      	ble.n	8001d2c <clcdDisplayAlarmSetting+0x6c0>
 8001d22:	f002 ff1f 	bl	8004b64 <getBlink>
 8001d26:	4603      	mov	r3, r0
 8001d28:	2b01      	cmp	r3, #1
 8001d2a:	d12c      	bne.n	8001d86 <clcdDisplayAlarmSetting+0x71a>
			sprintf(alarm.buffer, "ALARM #%d %-3s %3s",alarm.select + 1,
 8001d2c:	4b59      	ldr	r3, [pc, #356]	@ (8001e94 <clcdDisplayAlarmSetting+0x828>)
 8001d2e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001d32:	1c5a      	adds	r2, r3, #1
					alarm.set[alarm.select].enabled == TRUE ? "ON" : "OFF",
 8001d34:	4b57      	ldr	r3, [pc, #348]	@ (8001e94 <clcdDisplayAlarmSetting+0x828>)
 8001d36:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	4955      	ldr	r1, [pc, #340]	@ (8001e94 <clcdDisplayAlarmSetting+0x828>)
 8001d3e:	4603      	mov	r3, r0
 8001d40:	005b      	lsls	r3, r3, #1
 8001d42:	4403      	add	r3, r0
 8001d44:	009b      	lsls	r3, r3, #2
 8001d46:	440b      	add	r3, r1
 8001d48:	3308      	adds	r3, #8
 8001d4a:	781b      	ldrb	r3, [r3, #0]
			sprintf(alarm.buffer, "ALARM #%d %-3s %3s",alarm.select + 1,
 8001d4c:	2b01      	cmp	r3, #1
 8001d4e:	d101      	bne.n	8001d54 <clcdDisplayAlarmSetting+0x6e8>
 8001d50:	4954      	ldr	r1, [pc, #336]	@ (8001ea4 <clcdDisplayAlarmSetting+0x838>)
 8001d52:	e000      	b.n	8001d56 <clcdDisplayAlarmSetting+0x6ea>
 8001d54:	494c      	ldr	r1, [pc, #304]	@ (8001e88 <clcdDisplayAlarmSetting+0x81c>)
					alarm.set[alarm.select].repeat == TRUE ? "RPT" : "ONC");
 8001d56:	4b4f      	ldr	r3, [pc, #316]	@ (8001e94 <clcdDisplayAlarmSetting+0x828>)
 8001d58:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001d5c:	461c      	mov	r4, r3
 8001d5e:	484d      	ldr	r0, [pc, #308]	@ (8001e94 <clcdDisplayAlarmSetting+0x828>)
 8001d60:	4623      	mov	r3, r4
 8001d62:	005b      	lsls	r3, r3, #1
 8001d64:	4423      	add	r3, r4
 8001d66:	009b      	lsls	r3, r3, #2
 8001d68:	4403      	add	r3, r0
 8001d6a:	3309      	adds	r3, #9
 8001d6c:	781b      	ldrb	r3, [r3, #0]
			sprintf(alarm.buffer, "ALARM #%d %-3s %3s",alarm.select + 1,
 8001d6e:	2b01      	cmp	r3, #1
 8001d70:	d101      	bne.n	8001d76 <clcdDisplayAlarmSetting+0x70a>
 8001d72:	4b4d      	ldr	r3, [pc, #308]	@ (8001ea8 <clcdDisplayAlarmSetting+0x83c>)
 8001d74:	e000      	b.n	8001d78 <clcdDisplayAlarmSetting+0x70c>
 8001d76:	4b4d      	ldr	r3, [pc, #308]	@ (8001eac <clcdDisplayAlarmSetting+0x840>)
 8001d78:	9300      	str	r3, [sp, #0]
 8001d7a:	460b      	mov	r3, r1
 8001d7c:	494c      	ldr	r1, [pc, #304]	@ (8001eb0 <clcdDisplayAlarmSetting+0x844>)
 8001d7e:	4844      	ldr	r0, [pc, #272]	@ (8001e90 <clcdDisplayAlarmSetting+0x824>)
 8001d80:	f006 f908 	bl	8007f94 <siprintf>
 8001d84:	e018      	b.n	8001db8 <clcdDisplayAlarmSetting+0x74c>
		} else {
			sprintf(alarm.buffer, "ALARM #%d     %3s",alarm.select + 1,
 8001d86:	4b43      	ldr	r3, [pc, #268]	@ (8001e94 <clcdDisplayAlarmSetting+0x828>)
 8001d88:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001d8c:	1c5a      	adds	r2, r3, #1
					alarm.set[alarm.select].repeat == TRUE ? "RPT" : "ONC");
 8001d8e:	4b41      	ldr	r3, [pc, #260]	@ (8001e94 <clcdDisplayAlarmSetting+0x828>)
 8001d90:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001d94:	4618      	mov	r0, r3
 8001d96:	493f      	ldr	r1, [pc, #252]	@ (8001e94 <clcdDisplayAlarmSetting+0x828>)
 8001d98:	4603      	mov	r3, r0
 8001d9a:	005b      	lsls	r3, r3, #1
 8001d9c:	4403      	add	r3, r0
 8001d9e:	009b      	lsls	r3, r3, #2
 8001da0:	440b      	add	r3, r1
 8001da2:	3309      	adds	r3, #9
 8001da4:	781b      	ldrb	r3, [r3, #0]
			sprintf(alarm.buffer, "ALARM #%d     %3s",alarm.select + 1,
 8001da6:	2b01      	cmp	r3, #1
 8001da8:	d101      	bne.n	8001dae <clcdDisplayAlarmSetting+0x742>
 8001daa:	4b3f      	ldr	r3, [pc, #252]	@ (8001ea8 <clcdDisplayAlarmSetting+0x83c>)
 8001dac:	e000      	b.n	8001db0 <clcdDisplayAlarmSetting+0x744>
 8001dae:	4b3f      	ldr	r3, [pc, #252]	@ (8001eac <clcdDisplayAlarmSetting+0x840>)
 8001db0:	4940      	ldr	r1, [pc, #256]	@ (8001eb4 <clcdDisplayAlarmSetting+0x848>)
 8001db2:	4837      	ldr	r0, [pc, #220]	@ (8001e90 <clcdDisplayAlarmSetting+0x824>)
 8001db4:	f006 f8ee 	bl	8007f94 <siprintf>
		}

		CLCD_Puts(0, 0, alarm.buffer);
 8001db8:	4a35      	ldr	r2, [pc, #212]	@ (8001e90 <clcdDisplayAlarmSetting+0x824>)
 8001dba:	2100      	movs	r1, #0
 8001dbc:	2000      	movs	r0, #0
 8001dbe:	f7ff fa9b 	bl	80012f8 <CLCD_Puts>

		sprintf(alarm.buffer, "SET     %s %02d:%02d", alarm.set[alarm.select].hour > 11 ? "PM" : "AM",
 8001dc2:	4b34      	ldr	r3, [pc, #208]	@ (8001e94 <clcdDisplayAlarmSetting+0x828>)
 8001dc4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001dc8:	4619      	mov	r1, r3
 8001dca:	4a32      	ldr	r2, [pc, #200]	@ (8001e94 <clcdDisplayAlarmSetting+0x828>)
 8001dcc:	460b      	mov	r3, r1
 8001dce:	005b      	lsls	r3, r3, #1
 8001dd0:	440b      	add	r3, r1
 8001dd2:	009b      	lsls	r3, r3, #2
 8001dd4:	4413      	add	r3, r2
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	2b0b      	cmp	r3, #11
 8001dda:	dd01      	ble.n	8001de0 <clcdDisplayAlarmSetting+0x774>
 8001ddc:	492e      	ldr	r1, [pc, #184]	@ (8001e98 <clcdDisplayAlarmSetting+0x82c>)
 8001dde:	e000      	b.n	8001de2 <clcdDisplayAlarmSetting+0x776>
 8001de0:	492e      	ldr	r1, [pc, #184]	@ (8001e9c <clcdDisplayAlarmSetting+0x830>)
				(alarm.set[alarm.select].hour > 12 ? (alarm.set[alarm.select].hour - 12) : alarm.set[alarm.select].hour == 0 ? 12 : alarm.set[alarm.select].hour),
 8001de2:	4b2c      	ldr	r3, [pc, #176]	@ (8001e94 <clcdDisplayAlarmSetting+0x828>)
 8001de4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001de8:	4618      	mov	r0, r3
 8001dea:	4a2a      	ldr	r2, [pc, #168]	@ (8001e94 <clcdDisplayAlarmSetting+0x828>)
 8001dec:	4603      	mov	r3, r0
 8001dee:	005b      	lsls	r3, r3, #1
 8001df0:	4403      	add	r3, r0
 8001df2:	009b      	lsls	r3, r3, #2
 8001df4:	4413      	add	r3, r2
 8001df6:	681b      	ldr	r3, [r3, #0]
		sprintf(alarm.buffer, "SET     %s %02d:%02d", alarm.set[alarm.select].hour > 11 ? "PM" : "AM",
 8001df8:	2b0c      	cmp	r3, #12
 8001dfa:	dd0d      	ble.n	8001e18 <clcdDisplayAlarmSetting+0x7ac>
				(alarm.set[alarm.select].hour > 12 ? (alarm.set[alarm.select].hour - 12) : alarm.set[alarm.select].hour == 0 ? 12 : alarm.set[alarm.select].hour),
 8001dfc:	4b25      	ldr	r3, [pc, #148]	@ (8001e94 <clcdDisplayAlarmSetting+0x828>)
 8001dfe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001e02:	4618      	mov	r0, r3
 8001e04:	4a23      	ldr	r2, [pc, #140]	@ (8001e94 <clcdDisplayAlarmSetting+0x828>)
 8001e06:	4603      	mov	r3, r0
 8001e08:	005b      	lsls	r3, r3, #1
 8001e0a:	4403      	add	r3, r0
 8001e0c:	009b      	lsls	r3, r3, #2
 8001e0e:	4413      	add	r3, r2
 8001e10:	681b      	ldr	r3, [r3, #0]
		sprintf(alarm.buffer, "SET     %s %02d:%02d", alarm.set[alarm.select].hour > 11 ? "PM" : "AM",
 8001e12:	f1a3 020c 	sub.w	r2, r3, #12
 8001e16:	e019      	b.n	8001e4c <clcdDisplayAlarmSetting+0x7e0>
				(alarm.set[alarm.select].hour > 12 ? (alarm.set[alarm.select].hour - 12) : alarm.set[alarm.select].hour == 0 ? 12 : alarm.set[alarm.select].hour),
 8001e18:	4b1e      	ldr	r3, [pc, #120]	@ (8001e94 <clcdDisplayAlarmSetting+0x828>)
 8001e1a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001e1e:	4618      	mov	r0, r3
 8001e20:	4a1c      	ldr	r2, [pc, #112]	@ (8001e94 <clcdDisplayAlarmSetting+0x828>)
 8001e22:	4603      	mov	r3, r0
 8001e24:	005b      	lsls	r3, r3, #1
 8001e26:	4403      	add	r3, r0
 8001e28:	009b      	lsls	r3, r3, #2
 8001e2a:	4413      	add	r3, r2
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d00b      	beq.n	8001e4a <clcdDisplayAlarmSetting+0x7de>
 8001e32:	4b18      	ldr	r3, [pc, #96]	@ (8001e94 <clcdDisplayAlarmSetting+0x828>)
 8001e34:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001e38:	4618      	mov	r0, r3
 8001e3a:	4a16      	ldr	r2, [pc, #88]	@ (8001e94 <clcdDisplayAlarmSetting+0x828>)
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	005b      	lsls	r3, r3, #1
 8001e40:	4403      	add	r3, r0
 8001e42:	009b      	lsls	r3, r3, #2
 8001e44:	4413      	add	r3, r2
 8001e46:	681a      	ldr	r2, [r3, #0]
 8001e48:	e000      	b.n	8001e4c <clcdDisplayAlarmSetting+0x7e0>
 8001e4a:	220c      	movs	r2, #12
				 alarm.set[alarm.select].minute);
 8001e4c:	4b11      	ldr	r3, [pc, #68]	@ (8001e94 <clcdDisplayAlarmSetting+0x828>)
 8001e4e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001e52:	461c      	mov	r4, r3
		sprintf(alarm.buffer, "SET     %s %02d:%02d", alarm.set[alarm.select].hour > 11 ? "PM" : "AM",
 8001e54:	480f      	ldr	r0, [pc, #60]	@ (8001e94 <clcdDisplayAlarmSetting+0x828>)
 8001e56:	4623      	mov	r3, r4
 8001e58:	005b      	lsls	r3, r3, #1
 8001e5a:	4423      	add	r3, r4
 8001e5c:	009b      	lsls	r3, r3, #2
 8001e5e:	4403      	add	r3, r0
 8001e60:	3304      	adds	r3, #4
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	9300      	str	r3, [sp, #0]
 8001e66:	4613      	mov	r3, r2
 8001e68:	460a      	mov	r2, r1
 8001e6a:	490d      	ldr	r1, [pc, #52]	@ (8001ea0 <clcdDisplayAlarmSetting+0x834>)
 8001e6c:	4808      	ldr	r0, [pc, #32]	@ (8001e90 <clcdDisplayAlarmSetting+0x824>)
 8001e6e:	f006 f891 	bl	8007f94 <siprintf>
		CLCD_Puts(0, 1, alarm.buffer);
 8001e72:	4a07      	ldr	r2, [pc, #28]	@ (8001e90 <clcdDisplayAlarmSetting+0x824>)
 8001e74:	2101      	movs	r1, #1
 8001e76:	2000      	movs	r0, #0
 8001e78:	f7ff fa3e 	bl	80012f8 <CLCD_Puts>
		break;
 8001e7c:	bf00      	nop
	}
}
 8001e7e:	bf00      	nop
 8001e80:	3704      	adds	r7, #4
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd90      	pop	{r4, r7, pc}
 8001e86:	bf00      	nop
 8001e88:	080088ec 	.word	0x080088ec
 8001e8c:	080089ac 	.word	0x080089ac
 8001e90:	2000003d 	.word	0x2000003d
 8001e94:	20000000 	.word	0x20000000
 8001e98:	08008914 	.word	0x08008914
 8001e9c:	08008910 	.word	0x08008910
 8001ea0:	0800896c 	.word	0x0800896c
 8001ea4:	080088f0 	.word	0x080088f0
 8001ea8:	080088f4 	.word	0x080088f4
 8001eac:	080088f8 	.word	0x080088f8
 8001eb0:	080088fc 	.word	0x080088fc
 8001eb4:	080089c0 	.word	0x080089c0

08001eb8 <switchAlarmMode>:

void switchAlarmMode() { // 알람모드에서 알람설정 모드전환 함수
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	af00      	add	r7, sp, #0
	if(mode == ALARM && getPressCount(1) == 700) {
 8001ebc:	4b18      	ldr	r3, [pc, #96]	@ (8001f20 <switchAlarmMode+0x68>)
 8001ebe:	781b      	ldrb	r3, [r3, #0]
 8001ec0:	2b01      	cmp	r3, #1
 8001ec2:	d110      	bne.n	8001ee6 <switchAlarmMode+0x2e>
 8001ec4:	2001      	movs	r0, #1
 8001ec6:	f002 fc75 	bl	80047b4 <getPressCount>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	f5b3 7f2f 	cmp.w	r3, #700	@ 0x2bc
 8001ed0:	d109      	bne.n	8001ee6 <switchAlarmMode+0x2e>
		// 알람모드 에서 누른 시간이 700 인경우
		mode = ALARM_SETTING;
 8001ed2:	4b13      	ldr	r3, [pc, #76]	@ (8001f20 <switchAlarmMode+0x68>)
 8001ed4:	2204      	movs	r2, #4
 8001ed6:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_5);
 8001ed8:	2120      	movs	r1, #32
 8001eda:	4812      	ldr	r0, [pc, #72]	@ (8001f24 <switchAlarmMode+0x6c>)
 8001edc:	f003 fb7b 	bl	80055d6 <HAL_GPIO_TogglePin>
		playMidTone();
 8001ee0:	f000 fa44 	bl	800236c <playMidTone>
		alarmSettingType = ALARM_NUM;
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_5);
		playMidTone();
		setWaitingTime(0);
	}
}
 8001ee4:	e019      	b.n	8001f1a <switchAlarmMode+0x62>
	} else if((mode == ALARM_SETTING && getPressCount(1) == 700)) {
 8001ee6:	4b0e      	ldr	r3, [pc, #56]	@ (8001f20 <switchAlarmMode+0x68>)
 8001ee8:	781b      	ldrb	r3, [r3, #0]
 8001eea:	2b04      	cmp	r3, #4
 8001eec:	d115      	bne.n	8001f1a <switchAlarmMode+0x62>
 8001eee:	2001      	movs	r0, #1
 8001ef0:	f002 fc60 	bl	80047b4 <getPressCount>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	f5b3 7f2f 	cmp.w	r3, #700	@ 0x2bc
 8001efa:	d10e      	bne.n	8001f1a <switchAlarmMode+0x62>
		mode = ALARM;
 8001efc:	4b08      	ldr	r3, [pc, #32]	@ (8001f20 <switchAlarmMode+0x68>)
 8001efe:	2201      	movs	r2, #1
 8001f00:	701a      	strb	r2, [r3, #0]
		alarmSettingType = ALARM_NUM;
 8001f02:	4b09      	ldr	r3, [pc, #36]	@ (8001f28 <switchAlarmMode+0x70>)
 8001f04:	2200      	movs	r2, #0
 8001f06:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_5);
 8001f08:	2120      	movs	r1, #32
 8001f0a:	4806      	ldr	r0, [pc, #24]	@ (8001f24 <switchAlarmMode+0x6c>)
 8001f0c:	f003 fb63 	bl	80055d6 <HAL_GPIO_TogglePin>
		playMidTone();
 8001f10:	f000 fa2c 	bl	800236c <playMidTone>
		setWaitingTime(0);
 8001f14:	2000      	movs	r0, #0
 8001f16:	f002 fe3d 	bl	8004b94 <setWaitingTime>
}
 8001f1a:	bf00      	nop
 8001f1c:	bd80      	pop	{r7, pc}
 8001f1e:	bf00      	nop
 8001f20:	2000033d 	.word	0x2000033d
 8001f24:	40020400 	.word	0x40020400
 8001f28:	200001d5 	.word	0x200001d5

08001f2c <settingAlarm>:

void settingAlarm() {	// 버튼 2번 동작 설정할 단위 변경
 8001f2c:	b480      	push	{r7}
 8001f2e:	af00      	add	r7, sp, #0
	if(alarmSettingType == ALARM_ENABLE) {
 8001f30:	4b09      	ldr	r3, [pc, #36]	@ (8001f58 <settingAlarm+0x2c>)
 8001f32:	781b      	ldrb	r3, [r3, #0]
 8001f34:	2b04      	cmp	r3, #4
 8001f36:	d103      	bne.n	8001f40 <settingAlarm+0x14>
		alarmSettingType = ALARM_NUM;
 8001f38:	4b07      	ldr	r3, [pc, #28]	@ (8001f58 <settingAlarm+0x2c>)
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	701a      	strb	r2, [r3, #0]
	} else {
		alarmSettingType++;
	}
}
 8001f3e:	e005      	b.n	8001f4c <settingAlarm+0x20>
		alarmSettingType++;
 8001f40:	4b05      	ldr	r3, [pc, #20]	@ (8001f58 <settingAlarm+0x2c>)
 8001f42:	781b      	ldrb	r3, [r3, #0]
 8001f44:	3301      	adds	r3, #1
 8001f46:	b2da      	uxtb	r2, r3
 8001f48:	4b03      	ldr	r3, [pc, #12]	@ (8001f58 <settingAlarm+0x2c>)
 8001f4a:	701a      	strb	r2, [r3, #0]
}
 8001f4c:	bf00      	nop
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f54:	4770      	bx	lr
 8001f56:	bf00      	nop
 8001f58:	200001d5 	.word	0x200001d5

08001f5c <incrementAlarmSetting>:

void incrementAlarmSetting() {	// 버튼 3번동작 (선택한 값 증가)
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	af00      	add	r7, sp, #0
	switch(alarmSettingType) {
 8001f60:	4b58      	ldr	r3, [pc, #352]	@ (80020c4 <incrementAlarmSetting+0x168>)
 8001f62:	781b      	ldrb	r3, [r3, #0]
 8001f64:	2b04      	cmp	r3, #4
 8001f66:	f200 80aa 	bhi.w	80020be <incrementAlarmSetting+0x162>
 8001f6a:	a201      	add	r2, pc, #4	@ (adr r2, 8001f70 <incrementAlarmSetting+0x14>)
 8001f6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f70:	08001f85 	.word	0x08001f85
 8001f74:	08001fab 	.word	0x08001fab
 8001f78:	0800200f 	.word	0x0800200f
 8001f7c:	0800206b 	.word	0x0800206b
 8001f80:	08002095 	.word	0x08002095
	case ALARM_NUM:
		if(alarm.select >= ((sizeof(alarm) - 21) / sizeof(alarm.set[0])) - 1) {
 8001f84:	4b50      	ldr	r3, [pc, #320]	@ (80020c8 <incrementAlarmSetting+0x16c>)
 8001f86:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001f8a:	2b03      	cmp	r3, #3
 8001f8c:	d904      	bls.n	8001f98 <incrementAlarmSetting+0x3c>
			alarm.select = 0;
 8001f8e:	4b4e      	ldr	r3, [pc, #312]	@ (80020c8 <incrementAlarmSetting+0x16c>)
 8001f90:	2200      	movs	r2, #0
 8001f92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
		} else {
			alarm.select++;
		}
		break;
 8001f96:	e092      	b.n	80020be <incrementAlarmSetting+0x162>
			alarm.select++;
 8001f98:	4b4b      	ldr	r3, [pc, #300]	@ (80020c8 <incrementAlarmSetting+0x16c>)
 8001f9a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001f9e:	3301      	adds	r3, #1
 8001fa0:	b2da      	uxtb	r2, r3
 8001fa2:	4b49      	ldr	r3, [pc, #292]	@ (80020c8 <incrementAlarmSetting+0x16c>)
 8001fa4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
		break;
 8001fa8:	e089      	b.n	80020be <incrementAlarmSetting+0x162>
	case ALARM_MINUTE:
		if(alarm.set[alarm.select].minute == 59) {
 8001faa:	4b47      	ldr	r3, [pc, #284]	@ (80020c8 <incrementAlarmSetting+0x16c>)
 8001fac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001fb0:	4619      	mov	r1, r3
 8001fb2:	4a45      	ldr	r2, [pc, #276]	@ (80020c8 <incrementAlarmSetting+0x16c>)
 8001fb4:	460b      	mov	r3, r1
 8001fb6:	005b      	lsls	r3, r3, #1
 8001fb8:	440b      	add	r3, r1
 8001fba:	009b      	lsls	r3, r3, #2
 8001fbc:	4413      	add	r3, r2
 8001fbe:	3304      	adds	r3, #4
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	2b3b      	cmp	r3, #59	@ 0x3b
 8001fc4:	d10d      	bne.n	8001fe2 <incrementAlarmSetting+0x86>
			alarm.set[alarm.select].minute = 0;
 8001fc6:	4b40      	ldr	r3, [pc, #256]	@ (80020c8 <incrementAlarmSetting+0x16c>)
 8001fc8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001fcc:	4619      	mov	r1, r3
 8001fce:	4a3e      	ldr	r2, [pc, #248]	@ (80020c8 <incrementAlarmSetting+0x16c>)
 8001fd0:	460b      	mov	r3, r1
 8001fd2:	005b      	lsls	r3, r3, #1
 8001fd4:	440b      	add	r3, r1
 8001fd6:	009b      	lsls	r3, r3, #2
 8001fd8:	4413      	add	r3, r2
 8001fda:	3304      	adds	r3, #4
 8001fdc:	2200      	movs	r2, #0
 8001fde:	601a      	str	r2, [r3, #0]
		} else {
			alarm.set[alarm.select].minute++;
		}
		break;
 8001fe0:	e06d      	b.n	80020be <incrementAlarmSetting+0x162>
			alarm.set[alarm.select].minute++;
 8001fe2:	4b39      	ldr	r3, [pc, #228]	@ (80020c8 <incrementAlarmSetting+0x16c>)
 8001fe4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001fe8:	461a      	mov	r2, r3
 8001fea:	4937      	ldr	r1, [pc, #220]	@ (80020c8 <incrementAlarmSetting+0x16c>)
 8001fec:	4613      	mov	r3, r2
 8001fee:	005b      	lsls	r3, r3, #1
 8001ff0:	4413      	add	r3, r2
 8001ff2:	009b      	lsls	r3, r3, #2
 8001ff4:	440b      	add	r3, r1
 8001ff6:	3304      	adds	r3, #4
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	1c59      	adds	r1, r3, #1
 8001ffc:	4832      	ldr	r0, [pc, #200]	@ (80020c8 <incrementAlarmSetting+0x16c>)
 8001ffe:	4613      	mov	r3, r2
 8002000:	005b      	lsls	r3, r3, #1
 8002002:	4413      	add	r3, r2
 8002004:	009b      	lsls	r3, r3, #2
 8002006:	4403      	add	r3, r0
 8002008:	3304      	adds	r3, #4
 800200a:	6019      	str	r1, [r3, #0]
		break;
 800200c:	e057      	b.n	80020be <incrementAlarmSetting+0x162>
	case ALARM_HOUR:
		if(alarm.set[alarm.select].hour == 23) {
 800200e:	4b2e      	ldr	r3, [pc, #184]	@ (80020c8 <incrementAlarmSetting+0x16c>)
 8002010:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002014:	4619      	mov	r1, r3
 8002016:	4a2c      	ldr	r2, [pc, #176]	@ (80020c8 <incrementAlarmSetting+0x16c>)
 8002018:	460b      	mov	r3, r1
 800201a:	005b      	lsls	r3, r3, #1
 800201c:	440b      	add	r3, r1
 800201e:	009b      	lsls	r3, r3, #2
 8002020:	4413      	add	r3, r2
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	2b17      	cmp	r3, #23
 8002026:	d10c      	bne.n	8002042 <incrementAlarmSetting+0xe6>
			alarm.set[alarm.select].hour = 0;
 8002028:	4b27      	ldr	r3, [pc, #156]	@ (80020c8 <incrementAlarmSetting+0x16c>)
 800202a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800202e:	4619      	mov	r1, r3
 8002030:	4a25      	ldr	r2, [pc, #148]	@ (80020c8 <incrementAlarmSetting+0x16c>)
 8002032:	460b      	mov	r3, r1
 8002034:	005b      	lsls	r3, r3, #1
 8002036:	440b      	add	r3, r1
 8002038:	009b      	lsls	r3, r3, #2
 800203a:	4413      	add	r3, r2
 800203c:	2200      	movs	r2, #0
 800203e:	601a      	str	r2, [r3, #0]
		} else {
			alarm.set[alarm.select].hour++;
		}
		break;
 8002040:	e03d      	b.n	80020be <incrementAlarmSetting+0x162>
			alarm.set[alarm.select].hour++;
 8002042:	4b21      	ldr	r3, [pc, #132]	@ (80020c8 <incrementAlarmSetting+0x16c>)
 8002044:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002048:	461a      	mov	r2, r3
 800204a:	491f      	ldr	r1, [pc, #124]	@ (80020c8 <incrementAlarmSetting+0x16c>)
 800204c:	4613      	mov	r3, r2
 800204e:	005b      	lsls	r3, r3, #1
 8002050:	4413      	add	r3, r2
 8002052:	009b      	lsls	r3, r3, #2
 8002054:	440b      	add	r3, r1
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	1c59      	adds	r1, r3, #1
 800205a:	481b      	ldr	r0, [pc, #108]	@ (80020c8 <incrementAlarmSetting+0x16c>)
 800205c:	4613      	mov	r3, r2
 800205e:	005b      	lsls	r3, r3, #1
 8002060:	4413      	add	r3, r2
 8002062:	009b      	lsls	r3, r3, #2
 8002064:	4403      	add	r3, r0
 8002066:	6019      	str	r1, [r3, #0]
		break;
 8002068:	e029      	b.n	80020be <incrementAlarmSetting+0x162>
	case ALARM_REPEAT:
		setAlarmRepeat(!getAlarmRepeat(alarm.select), alarm.select);
 800206a:	4b17      	ldr	r3, [pc, #92]	@ (80020c8 <incrementAlarmSetting+0x16c>)
 800206c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002070:	4618      	mov	r0, r3
 8002072:	f000 f91d 	bl	80022b0 <getAlarmRepeat>
 8002076:	4603      	mov	r3, r0
 8002078:	2b00      	cmp	r3, #0
 800207a:	bf0c      	ite	eq
 800207c:	2301      	moveq	r3, #1
 800207e:	2300      	movne	r3, #0
 8002080:	b2db      	uxtb	r3, r3
 8002082:	461a      	mov	r2, r3
 8002084:	4b10      	ldr	r3, [pc, #64]	@ (80020c8 <incrementAlarmSetting+0x16c>)
 8002086:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800208a:	4619      	mov	r1, r3
 800208c:	4610      	mov	r0, r2
 800208e:	f000 f925 	bl	80022dc <setAlarmRepeat>
		break;
 8002092:	e014      	b.n	80020be <incrementAlarmSetting+0x162>
	case ALARM_ENABLE:
		setAlarmEnabled(!getAlarmEnabled(alarm.select), alarm.select);
 8002094:	4b0c      	ldr	r3, [pc, #48]	@ (80020c8 <incrementAlarmSetting+0x16c>)
 8002096:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800209a:	4618      	mov	r0, r3
 800209c:	f000 f8da 	bl	8002254 <getAlarmEnabled>
 80020a0:	4603      	mov	r3, r0
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	bf0c      	ite	eq
 80020a6:	2301      	moveq	r3, #1
 80020a8:	2300      	movne	r3, #0
 80020aa:	b2db      	uxtb	r3, r3
 80020ac:	461a      	mov	r2, r3
 80020ae:	4b06      	ldr	r3, [pc, #24]	@ (80020c8 <incrementAlarmSetting+0x16c>)
 80020b0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80020b4:	4619      	mov	r1, r3
 80020b6:	4610      	mov	r0, r2
 80020b8:	f000 f8e2 	bl	8002280 <setAlarmEnabled>
		break;
 80020bc:	bf00      	nop
	}
}
 80020be:	bf00      	nop
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	bf00      	nop
 80020c4:	200001d5 	.word	0x200001d5
 80020c8:	20000000 	.word	0x20000000

080020cc <decrementAlarmSetting>:

void decrementAlarmSetting() {	// 버튼 4번동작 (선택한 값 감소)
 80020cc:	b580      	push	{r7, lr}
 80020ce:	af00      	add	r7, sp, #0
	switch(alarmSettingType) {
 80020d0:	4b58      	ldr	r3, [pc, #352]	@ (8002234 <decrementAlarmSetting+0x168>)
 80020d2:	781b      	ldrb	r3, [r3, #0]
 80020d4:	2b04      	cmp	r3, #4
 80020d6:	f200 80aa 	bhi.w	800222e <decrementAlarmSetting+0x162>
 80020da:	a201      	add	r2, pc, #4	@ (adr r2, 80020e0 <decrementAlarmSetting+0x14>)
 80020dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020e0:	080020f5 	.word	0x080020f5
 80020e4:	0800211b 	.word	0x0800211b
 80020e8:	0800217f 	.word	0x0800217f
 80020ec:	080021db 	.word	0x080021db
 80020f0:	08002205 	.word	0x08002205
	case ALARM_NUM:
		if(alarm.select == 0) {
 80020f4:	4b50      	ldr	r3, [pc, #320]	@ (8002238 <decrementAlarmSetting+0x16c>)
 80020f6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d104      	bne.n	8002108 <decrementAlarmSetting+0x3c>
			alarm.select = 4;
 80020fe:	4b4e      	ldr	r3, [pc, #312]	@ (8002238 <decrementAlarmSetting+0x16c>)
 8002100:	2204      	movs	r2, #4
 8002102:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
		} else {
			alarm.select--;
		}
		break;
 8002106:	e092      	b.n	800222e <decrementAlarmSetting+0x162>
			alarm.select--;
 8002108:	4b4b      	ldr	r3, [pc, #300]	@ (8002238 <decrementAlarmSetting+0x16c>)
 800210a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800210e:	3b01      	subs	r3, #1
 8002110:	b2da      	uxtb	r2, r3
 8002112:	4b49      	ldr	r3, [pc, #292]	@ (8002238 <decrementAlarmSetting+0x16c>)
 8002114:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
		break;
 8002118:	e089      	b.n	800222e <decrementAlarmSetting+0x162>
	case ALARM_MINUTE:
		if(alarm.set[alarm.select].minute == 0) {
 800211a:	4b47      	ldr	r3, [pc, #284]	@ (8002238 <decrementAlarmSetting+0x16c>)
 800211c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002120:	4619      	mov	r1, r3
 8002122:	4a45      	ldr	r2, [pc, #276]	@ (8002238 <decrementAlarmSetting+0x16c>)
 8002124:	460b      	mov	r3, r1
 8002126:	005b      	lsls	r3, r3, #1
 8002128:	440b      	add	r3, r1
 800212a:	009b      	lsls	r3, r3, #2
 800212c:	4413      	add	r3, r2
 800212e:	3304      	adds	r3, #4
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d10d      	bne.n	8002152 <decrementAlarmSetting+0x86>
			alarm.set[alarm.select].minute = 59;
 8002136:	4b40      	ldr	r3, [pc, #256]	@ (8002238 <decrementAlarmSetting+0x16c>)
 8002138:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800213c:	4619      	mov	r1, r3
 800213e:	4a3e      	ldr	r2, [pc, #248]	@ (8002238 <decrementAlarmSetting+0x16c>)
 8002140:	460b      	mov	r3, r1
 8002142:	005b      	lsls	r3, r3, #1
 8002144:	440b      	add	r3, r1
 8002146:	009b      	lsls	r3, r3, #2
 8002148:	4413      	add	r3, r2
 800214a:	3304      	adds	r3, #4
 800214c:	223b      	movs	r2, #59	@ 0x3b
 800214e:	601a      	str	r2, [r3, #0]
		} else {
			alarm.set[alarm.select].minute--;
		}
		break;
 8002150:	e06d      	b.n	800222e <decrementAlarmSetting+0x162>
			alarm.set[alarm.select].minute--;
 8002152:	4b39      	ldr	r3, [pc, #228]	@ (8002238 <decrementAlarmSetting+0x16c>)
 8002154:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002158:	461a      	mov	r2, r3
 800215a:	4937      	ldr	r1, [pc, #220]	@ (8002238 <decrementAlarmSetting+0x16c>)
 800215c:	4613      	mov	r3, r2
 800215e:	005b      	lsls	r3, r3, #1
 8002160:	4413      	add	r3, r2
 8002162:	009b      	lsls	r3, r3, #2
 8002164:	440b      	add	r3, r1
 8002166:	3304      	adds	r3, #4
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	1e59      	subs	r1, r3, #1
 800216c:	4832      	ldr	r0, [pc, #200]	@ (8002238 <decrementAlarmSetting+0x16c>)
 800216e:	4613      	mov	r3, r2
 8002170:	005b      	lsls	r3, r3, #1
 8002172:	4413      	add	r3, r2
 8002174:	009b      	lsls	r3, r3, #2
 8002176:	4403      	add	r3, r0
 8002178:	3304      	adds	r3, #4
 800217a:	6019      	str	r1, [r3, #0]
		break;
 800217c:	e057      	b.n	800222e <decrementAlarmSetting+0x162>
	case ALARM_HOUR:
		if(alarm.set[alarm.select].hour == 0) {
 800217e:	4b2e      	ldr	r3, [pc, #184]	@ (8002238 <decrementAlarmSetting+0x16c>)
 8002180:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002184:	4619      	mov	r1, r3
 8002186:	4a2c      	ldr	r2, [pc, #176]	@ (8002238 <decrementAlarmSetting+0x16c>)
 8002188:	460b      	mov	r3, r1
 800218a:	005b      	lsls	r3, r3, #1
 800218c:	440b      	add	r3, r1
 800218e:	009b      	lsls	r3, r3, #2
 8002190:	4413      	add	r3, r2
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d10c      	bne.n	80021b2 <decrementAlarmSetting+0xe6>
			alarm.set[alarm.select].hour = 23;
 8002198:	4b27      	ldr	r3, [pc, #156]	@ (8002238 <decrementAlarmSetting+0x16c>)
 800219a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800219e:	4619      	mov	r1, r3
 80021a0:	4a25      	ldr	r2, [pc, #148]	@ (8002238 <decrementAlarmSetting+0x16c>)
 80021a2:	460b      	mov	r3, r1
 80021a4:	005b      	lsls	r3, r3, #1
 80021a6:	440b      	add	r3, r1
 80021a8:	009b      	lsls	r3, r3, #2
 80021aa:	4413      	add	r3, r2
 80021ac:	2217      	movs	r2, #23
 80021ae:	601a      	str	r2, [r3, #0]
		} else {
			alarm.set[alarm.select].hour--;
		}
		break;
 80021b0:	e03d      	b.n	800222e <decrementAlarmSetting+0x162>
			alarm.set[alarm.select].hour--;
 80021b2:	4b21      	ldr	r3, [pc, #132]	@ (8002238 <decrementAlarmSetting+0x16c>)
 80021b4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80021b8:	461a      	mov	r2, r3
 80021ba:	491f      	ldr	r1, [pc, #124]	@ (8002238 <decrementAlarmSetting+0x16c>)
 80021bc:	4613      	mov	r3, r2
 80021be:	005b      	lsls	r3, r3, #1
 80021c0:	4413      	add	r3, r2
 80021c2:	009b      	lsls	r3, r3, #2
 80021c4:	440b      	add	r3, r1
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	1e59      	subs	r1, r3, #1
 80021ca:	481b      	ldr	r0, [pc, #108]	@ (8002238 <decrementAlarmSetting+0x16c>)
 80021cc:	4613      	mov	r3, r2
 80021ce:	005b      	lsls	r3, r3, #1
 80021d0:	4413      	add	r3, r2
 80021d2:	009b      	lsls	r3, r3, #2
 80021d4:	4403      	add	r3, r0
 80021d6:	6019      	str	r1, [r3, #0]
		break;
 80021d8:	e029      	b.n	800222e <decrementAlarmSetting+0x162>
	case ALARM_REPEAT:
		setAlarmRepeat(!getAlarmRepeat(alarm.select), alarm.select);
 80021da:	4b17      	ldr	r3, [pc, #92]	@ (8002238 <decrementAlarmSetting+0x16c>)
 80021dc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80021e0:	4618      	mov	r0, r3
 80021e2:	f000 f865 	bl	80022b0 <getAlarmRepeat>
 80021e6:	4603      	mov	r3, r0
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	bf0c      	ite	eq
 80021ec:	2301      	moveq	r3, #1
 80021ee:	2300      	movne	r3, #0
 80021f0:	b2db      	uxtb	r3, r3
 80021f2:	461a      	mov	r2, r3
 80021f4:	4b10      	ldr	r3, [pc, #64]	@ (8002238 <decrementAlarmSetting+0x16c>)
 80021f6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80021fa:	4619      	mov	r1, r3
 80021fc:	4610      	mov	r0, r2
 80021fe:	f000 f86d 	bl	80022dc <setAlarmRepeat>
		break;
 8002202:	e014      	b.n	800222e <decrementAlarmSetting+0x162>
	case ALARM_ENABLE:
		setAlarmEnabled(!getAlarmEnabled(alarm.select), alarm.select);
 8002204:	4b0c      	ldr	r3, [pc, #48]	@ (8002238 <decrementAlarmSetting+0x16c>)
 8002206:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800220a:	4618      	mov	r0, r3
 800220c:	f000 f822 	bl	8002254 <getAlarmEnabled>
 8002210:	4603      	mov	r3, r0
 8002212:	2b00      	cmp	r3, #0
 8002214:	bf0c      	ite	eq
 8002216:	2301      	moveq	r3, #1
 8002218:	2300      	movne	r3, #0
 800221a:	b2db      	uxtb	r3, r3
 800221c:	461a      	mov	r2, r3
 800221e:	4b06      	ldr	r3, [pc, #24]	@ (8002238 <decrementAlarmSetting+0x16c>)
 8002220:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002224:	4619      	mov	r1, r3
 8002226:	4610      	mov	r0, r2
 8002228:	f000 f82a 	bl	8002280 <setAlarmEnabled>
		break;
 800222c:	bf00      	nop
	}

}
 800222e:	bf00      	nop
 8002230:	bd80      	pop	{r7, pc}
 8002232:	bf00      	nop
 8002234:	200001d5 	.word	0x200001d5
 8002238:	20000000 	.word	0x20000000

0800223c <getSelect>:

uint8_t getSelect() {
 800223c:	b480      	push	{r7}
 800223e:	af00      	add	r7, sp, #0
	return alarm.select;
 8002240:	4b03      	ldr	r3, [pc, #12]	@ (8002250 <getSelect+0x14>)
 8002242:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
}
 8002246:	4618      	mov	r0, r3
 8002248:	46bd      	mov	sp, r7
 800224a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224e:	4770      	bx	lr
 8002250:	20000000 	.word	0x20000000

08002254 <getAlarmEnabled>:

void setSelect(uint8_t s) {
	alarm.select = s;
}
uint8_t getAlarmEnabled(int num) {
 8002254:	b480      	push	{r7}
 8002256:	b083      	sub	sp, #12
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
	return alarm.set[num].enabled;
 800225c:	4907      	ldr	r1, [pc, #28]	@ (800227c <getAlarmEnabled+0x28>)
 800225e:	687a      	ldr	r2, [r7, #4]
 8002260:	4613      	mov	r3, r2
 8002262:	005b      	lsls	r3, r3, #1
 8002264:	4413      	add	r3, r2
 8002266:	009b      	lsls	r3, r3, #2
 8002268:	440b      	add	r3, r1
 800226a:	3308      	adds	r3, #8
 800226c:	781b      	ldrb	r3, [r3, #0]
}
 800226e:	4618      	mov	r0, r3
 8002270:	370c      	adds	r7, #12
 8002272:	46bd      	mov	sp, r7
 8002274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002278:	4770      	bx	lr
 800227a:	bf00      	nop
 800227c:	20000000 	.word	0x20000000

08002280 <setAlarmEnabled>:
void setAlarmEnabled(uint8_t enabled, int num) {
 8002280:	b480      	push	{r7}
 8002282:	b083      	sub	sp, #12
 8002284:	af00      	add	r7, sp, #0
 8002286:	4603      	mov	r3, r0
 8002288:	6039      	str	r1, [r7, #0]
 800228a:	71fb      	strb	r3, [r7, #7]
	alarm.set[num].enabled = enabled;
 800228c:	4907      	ldr	r1, [pc, #28]	@ (80022ac <setAlarmEnabled+0x2c>)
 800228e:	683a      	ldr	r2, [r7, #0]
 8002290:	4613      	mov	r3, r2
 8002292:	005b      	lsls	r3, r3, #1
 8002294:	4413      	add	r3, r2
 8002296:	009b      	lsls	r3, r3, #2
 8002298:	440b      	add	r3, r1
 800229a:	3308      	adds	r3, #8
 800229c:	79fa      	ldrb	r2, [r7, #7]
 800229e:	701a      	strb	r2, [r3, #0]
}
 80022a0:	bf00      	nop
 80022a2:	370c      	adds	r7, #12
 80022a4:	46bd      	mov	sp, r7
 80022a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022aa:	4770      	bx	lr
 80022ac:	20000000 	.word	0x20000000

080022b0 <getAlarmRepeat>:

uint8_t getAlarmRepeat(int num) {
 80022b0:	b480      	push	{r7}
 80022b2:	b083      	sub	sp, #12
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
	return alarm.set[num].repeat;
 80022b8:	4907      	ldr	r1, [pc, #28]	@ (80022d8 <getAlarmRepeat+0x28>)
 80022ba:	687a      	ldr	r2, [r7, #4]
 80022bc:	4613      	mov	r3, r2
 80022be:	005b      	lsls	r3, r3, #1
 80022c0:	4413      	add	r3, r2
 80022c2:	009b      	lsls	r3, r3, #2
 80022c4:	440b      	add	r3, r1
 80022c6:	3309      	adds	r3, #9
 80022c8:	781b      	ldrb	r3, [r3, #0]
}
 80022ca:	4618      	mov	r0, r3
 80022cc:	370c      	adds	r7, #12
 80022ce:	46bd      	mov	sp, r7
 80022d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d4:	4770      	bx	lr
 80022d6:	bf00      	nop
 80022d8:	20000000 	.word	0x20000000

080022dc <setAlarmRepeat>:

void setAlarmRepeat(uint8_t repeat, int num) {
 80022dc:	b480      	push	{r7}
 80022de:	b083      	sub	sp, #12
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	4603      	mov	r3, r0
 80022e4:	6039      	str	r1, [r7, #0]
 80022e6:	71fb      	strb	r3, [r7, #7]
	alarm.set[num].repeat = repeat;
 80022e8:	4907      	ldr	r1, [pc, #28]	@ (8002308 <setAlarmRepeat+0x2c>)
 80022ea:	683a      	ldr	r2, [r7, #0]
 80022ec:	4613      	mov	r3, r2
 80022ee:	005b      	lsls	r3, r3, #1
 80022f0:	4413      	add	r3, r2
 80022f2:	009b      	lsls	r3, r3, #2
 80022f4:	440b      	add	r3, r1
 80022f6:	3309      	adds	r3, #9
 80022f8:	79fa      	ldrb	r2, [r7, #7]
 80022fa:	701a      	strb	r2, [r3, #0]
}
 80022fc:	bf00      	nop
 80022fe:	370c      	adds	r7, #12
 8002300:	46bd      	mov	sp, r7
 8002302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002306:	4770      	bx	lr
 8002308:	20000000 	.word	0x20000000

0800230c <buzOnOff>:

extern TIM_HandleTypeDef htim2;
buzzer buz = {1, 0, 0};
buz_tone_psc buzTone = BUZ_TONE_LOW_PSC;

void buzOnOff() {
 800230c:	b580      	push	{r7, lr}
 800230e:	af00      	add	r7, sp, #0
	if(buz.onOff == TRUE) {
 8002310:	4b13      	ldr	r3, [pc, #76]	@ (8002360 <buzOnOff+0x54>)
 8002312:	785b      	ldrb	r3, [r3, #1]
 8002314:	2b01      	cmp	r3, #1
 8002316:	d121      	bne.n	800235c <buzOnOff+0x50>
		buz.ms++;
 8002318:	4b11      	ldr	r3, [pc, #68]	@ (8002360 <buzOnOff+0x54>)
 800231a:	789b      	ldrb	r3, [r3, #2]
 800231c:	3301      	adds	r3, #1
 800231e:	b2da      	uxtb	r2, r3
 8002320:	4b0f      	ldr	r3, [pc, #60]	@ (8002360 <buzOnOff+0x54>)
 8002322:	709a      	strb	r2, [r3, #2]
		if(buz.ms < BUZ_OP_TIME) {
 8002324:	4b0e      	ldr	r3, [pc, #56]	@ (8002360 <buzOnOff+0x54>)
 8002326:	789b      	ldrb	r3, [r3, #2]
 8002328:	2b1d      	cmp	r3, #29
 800232a:	d809      	bhi.n	8002340 <buzOnOff+0x34>
			TIM2->PSC = buzTone;
 800232c:	4b0d      	ldr	r3, [pc, #52]	@ (8002364 <buzOnOff+0x58>)
 800232e:	881a      	ldrh	r2, [r3, #0]
 8002330:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002334:	629a      	str	r2, [r3, #40]	@ 0x28
			HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8002336:	2100      	movs	r1, #0
 8002338:	480b      	ldr	r0, [pc, #44]	@ (8002368 <buzOnOff+0x5c>)
 800233a:	f003 ff31 	bl	80061a0 <HAL_TIM_PWM_Start>
			buz.ms = 0;
			HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
		}
	}

}
 800233e:	e00d      	b.n	800235c <buzOnOff+0x50>
			buzTone = BUZ_TONE_LOW_PSC;
 8002340:	4b08      	ldr	r3, [pc, #32]	@ (8002364 <buzOnOff+0x58>)
 8002342:	f643 2298 	movw	r2, #15000	@ 0x3a98
 8002346:	801a      	strh	r2, [r3, #0]
			buz.onOff = 0;
 8002348:	4b05      	ldr	r3, [pc, #20]	@ (8002360 <buzOnOff+0x54>)
 800234a:	2200      	movs	r2, #0
 800234c:	705a      	strb	r2, [r3, #1]
			buz.ms = 0;
 800234e:	4b04      	ldr	r3, [pc, #16]	@ (8002360 <buzOnOff+0x54>)
 8002350:	2200      	movs	r2, #0
 8002352:	709a      	strb	r2, [r3, #2]
			HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 8002354:	2100      	movs	r1, #0
 8002356:	4804      	ldr	r0, [pc, #16]	@ (8002368 <buzOnOff+0x5c>)
 8002358:	f003 ffea 	bl	8006330 <HAL_TIM_PWM_Stop>
}
 800235c:	bf00      	nop
 800235e:	bd80      	pop	{r7, pc}
 8002360:	20000054 	.word	0x20000054
 8002364:	20000058 	.word	0x20000058
 8002368:	200001d8 	.word	0x200001d8

0800236c <playMidTone>:

void playMidTone() {
 800236c:	b580      	push	{r7, lr}
 800236e:	af00      	add	r7, sp, #0
	if(getBuzzEnabled() == TRUE) {
 8002370:	f000 f8e4 	bl	800253c <getBuzzEnabled>
 8002374:	4603      	mov	r3, r0
 8002376:	2b01      	cmp	r3, #1
 8002378:	d106      	bne.n	8002388 <playMidTone+0x1c>
		buzTone = BUZ_TONE_MID_PSC;
 800237a:	4b04      	ldr	r3, [pc, #16]	@ (800238c <playMidTone+0x20>)
 800237c:	f242 7210 	movw	r2, #10000	@ 0x2710
 8002380:	801a      	strh	r2, [r3, #0]
		setbuzzerOnOff(1);
 8002382:	2001      	movs	r0, #1
 8002384:	f000 f8f6 	bl	8002574 <setbuzzerOnOff>
	}
}
 8002388:	bf00      	nop
 800238a:	bd80      	pop	{r7, pc}
 800238c:	20000058 	.word	0x20000058

08002390 <playHighTone>:

void playHighTone() {
 8002390:	b580      	push	{r7, lr}
 8002392:	af00      	add	r7, sp, #0
	if(getBuzzEnabled() == TRUE) {
 8002394:	f000 f8d2 	bl	800253c <getBuzzEnabled>
 8002398:	4603      	mov	r3, r0
 800239a:	2b01      	cmp	r3, #1
 800239c:	d106      	bne.n	80023ac <playHighTone+0x1c>
		buzTone = BUZ_TONE_HIGH_PSC;
 800239e:	4b04      	ldr	r3, [pc, #16]	@ (80023b0 <playHighTone+0x20>)
 80023a0:	f641 524c 	movw	r2, #7500	@ 0x1d4c
 80023a4:	801a      	strh	r2, [r3, #0]
		setbuzzerOnOff(1);
 80023a6:	2001      	movs	r0, #1
 80023a8:	f000 f8e4 	bl	8002574 <setbuzzerOnOff>
	}
}
 80023ac:	bf00      	nop
 80023ae:	bd80      	pop	{r7, pc}
 80023b0:	20000058 	.word	0x20000058

080023b4 <playAlram>:

void playAlram() {
 80023b4:	b580      	push	{r7, lr}
 80023b6:	af00      	add	r7, sp, #0
	if(buz.ms < (BUZ_OP_TIME * 2)) {
 80023b8:	4b3c      	ldr	r3, [pc, #240]	@ (80024ac <playAlram+0xf8>)
 80023ba:	789b      	ldrb	r3, [r3, #2]
 80023bc:	2b3b      	cmp	r3, #59	@ 0x3b
 80023be:	d805      	bhi.n	80023cc <playAlram+0x18>
		buz.ms++;
 80023c0:	4b3a      	ldr	r3, [pc, #232]	@ (80024ac <playAlram+0xf8>)
 80023c2:	789b      	ldrb	r3, [r3, #2]
 80023c4:	3301      	adds	r3, #1
 80023c6:	b2da      	uxtb	r2, r3
 80023c8:	4b38      	ldr	r3, [pc, #224]	@ (80024ac <playAlram+0xf8>)
 80023ca:	709a      	strb	r2, [r3, #2]
	}


	if(buz.ms < BUZ_OP_TIME) {
 80023cc:	4b37      	ldr	r3, [pc, #220]	@ (80024ac <playAlram+0xf8>)
 80023ce:	789b      	ldrb	r3, [r3, #2]
 80023d0:	2b1d      	cmp	r3, #29
 80023d2:	d82f      	bhi.n	8002434 <playAlram+0x80>
		if(getBuzzEnabled() == TRUE) {
 80023d4:	f000 f8b2 	bl	800253c <getBuzzEnabled>
 80023d8:	4603      	mov	r3, r0
 80023da:	2b01      	cmp	r3, #1
 80023dc:	d108      	bne.n	80023f0 <playAlram+0x3c>
			TIM2->PSC = BUZ_TONE_HIGH_PSC;
 80023de:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80023e2:	f641 524c 	movw	r2, #7500	@ 0x1d4c
 80023e6:	629a      	str	r2, [r3, #40]	@ 0x28
			HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80023e8:	2100      	movs	r1, #0
 80023ea:	4831      	ldr	r0, [pc, #196]	@ (80024b0 <playAlram+0xfc>)
 80023ec:	f003 fed8 	bl	80061a0 <HAL_TIM_PWM_Start>
		}
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, 0);
 80023f0:	2200      	movs	r2, #0
 80023f2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80023f6:	482f      	ldr	r0, [pc, #188]	@ (80024b4 <playAlram+0x100>)
 80023f8:	f003 f8d4 	bl	80055a4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);
 80023fc:	2200      	movs	r2, #0
 80023fe:	2140      	movs	r1, #64	@ 0x40
 8002400:	482d      	ldr	r0, [pc, #180]	@ (80024b8 <playAlram+0x104>)
 8002402:	f003 f8cf 	bl	80055a4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, 0);
 8002406:	2200      	movs	r2, #0
 8002408:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800240c:	4829      	ldr	r0, [pc, #164]	@ (80024b4 <playAlram+0x100>)
 800240e:	f003 f8c9 	bl	80055a4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 0);
 8002412:	2200      	movs	r2, #0
 8002414:	2120      	movs	r1, #32
 8002416:	4829      	ldr	r0, [pc, #164]	@ (80024bc <playAlram+0x108>)
 8002418:	f003 f8c4 	bl	80055a4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, 0);
 800241c:	2200      	movs	r2, #0
 800241e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002422:	4824      	ldr	r0, [pc, #144]	@ (80024b4 <playAlram+0x100>)
 8002424:	f003 f8be 	bl	80055a4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 0);
 8002428:	2200      	movs	r2, #0
 800242a:	2101      	movs	r1, #1
 800242c:	4823      	ldr	r0, [pc, #140]	@ (80024bc <playAlram+0x108>)
 800242e:	f003 f8b9 	bl	80055a4 <HAL_GPIO_WritePin>
		if(buz.ms >= (BUZ_OP_TIME * 2)) {
			buz.ms = 0;
		}
	}

}
 8002432:	e039      	b.n	80024a8 <playAlram+0xf4>
	} else if(buz.ms > BUZ_OP_TIME) {
 8002434:	4b1d      	ldr	r3, [pc, #116]	@ (80024ac <playAlram+0xf8>)
 8002436:	789b      	ldrb	r3, [r3, #2]
 8002438:	2b1e      	cmp	r3, #30
 800243a:	d935      	bls.n	80024a8 <playAlram+0xf4>
		if(getBuzzEnabled() == TRUE) {
 800243c:	f000 f87e 	bl	800253c <getBuzzEnabled>
 8002440:	4603      	mov	r3, r0
 8002442:	2b01      	cmp	r3, #1
 8002444:	d108      	bne.n	8002458 <playAlram+0xa4>
			TIM2->PSC = BUZ_TONE_LOW_PSC;
 8002446:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800244a:	f643 2298 	movw	r2, #15000	@ 0x3a98
 800244e:	629a      	str	r2, [r3, #40]	@ 0x28
			HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 8002450:	2100      	movs	r1, #0
 8002452:	4817      	ldr	r0, [pc, #92]	@ (80024b0 <playAlram+0xfc>)
 8002454:	f003 ff6c 	bl	8006330 <HAL_TIM_PWM_Stop>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, 1);
 8002458:	2201      	movs	r2, #1
 800245a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800245e:	4815      	ldr	r0, [pc, #84]	@ (80024b4 <playAlram+0x100>)
 8002460:	f003 f8a0 	bl	80055a4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);
 8002464:	2201      	movs	r2, #1
 8002466:	2140      	movs	r1, #64	@ 0x40
 8002468:	4813      	ldr	r0, [pc, #76]	@ (80024b8 <playAlram+0x104>)
 800246a:	f003 f89b 	bl	80055a4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, 1);
 800246e:	2201      	movs	r2, #1
 8002470:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002474:	480f      	ldr	r0, [pc, #60]	@ (80024b4 <playAlram+0x100>)
 8002476:	f003 f895 	bl	80055a4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 1);
 800247a:	2201      	movs	r2, #1
 800247c:	2120      	movs	r1, #32
 800247e:	480f      	ldr	r0, [pc, #60]	@ (80024bc <playAlram+0x108>)
 8002480:	f003 f890 	bl	80055a4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, 1);
 8002484:	2201      	movs	r2, #1
 8002486:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800248a:	480a      	ldr	r0, [pc, #40]	@ (80024b4 <playAlram+0x100>)
 800248c:	f003 f88a 	bl	80055a4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 1);
 8002490:	2201      	movs	r2, #1
 8002492:	2101      	movs	r1, #1
 8002494:	4809      	ldr	r0, [pc, #36]	@ (80024bc <playAlram+0x108>)
 8002496:	f003 f885 	bl	80055a4 <HAL_GPIO_WritePin>
		if(buz.ms >= (BUZ_OP_TIME * 2)) {
 800249a:	4b04      	ldr	r3, [pc, #16]	@ (80024ac <playAlram+0xf8>)
 800249c:	789b      	ldrb	r3, [r3, #2]
 800249e:	2b3b      	cmp	r3, #59	@ 0x3b
 80024a0:	d902      	bls.n	80024a8 <playAlram+0xf4>
			buz.ms = 0;
 80024a2:	4b02      	ldr	r3, [pc, #8]	@ (80024ac <playAlram+0xf8>)
 80024a4:	2200      	movs	r2, #0
 80024a6:	709a      	strb	r2, [r3, #2]
}
 80024a8:	bf00      	nop
 80024aa:	bd80      	pop	{r7, pc}
 80024ac:	20000054 	.word	0x20000054
 80024b0:	200001d8 	.word	0x200001d8
 80024b4:	40020c00 	.word	0x40020c00
 80024b8:	40020800 	.word	0x40020800
 80024bc:	40020400 	.word	0x40020400

080024c0 <buzReset>:

void buzReset() {
 80024c0:	b580      	push	{r7, lr}
 80024c2:	af00      	add	r7, sp, #0
	buz.ms = 0;
 80024c4:	4b18      	ldr	r3, [pc, #96]	@ (8002528 <buzReset+0x68>)
 80024c6:	2200      	movs	r2, #0
 80024c8:	709a      	strb	r2, [r3, #2]
	buz.onOff = 0;
 80024ca:	4b17      	ldr	r3, [pc, #92]	@ (8002528 <buzReset+0x68>)
 80024cc:	2200      	movs	r2, #0
 80024ce:	705a      	strb	r2, [r3, #1]
	TIM2->PSC = BUZ_TONE_LOW_PSC;
 80024d0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80024d4:	f643 2298 	movw	r2, #15000	@ 0x3a98
 80024d8:	629a      	str	r2, [r3, #40]	@ 0x28
	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 80024da:	2100      	movs	r1, #0
 80024dc:	4813      	ldr	r0, [pc, #76]	@ (800252c <buzReset+0x6c>)
 80024de:	f003 ff27 	bl	8006330 <HAL_TIM_PWM_Stop>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, 1);
 80024e2:	2201      	movs	r2, #1
 80024e4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80024e8:	4811      	ldr	r0, [pc, #68]	@ (8002530 <buzReset+0x70>)
 80024ea:	f003 f85b 	bl	80055a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);
 80024ee:	2201      	movs	r2, #1
 80024f0:	2140      	movs	r1, #64	@ 0x40
 80024f2:	4810      	ldr	r0, [pc, #64]	@ (8002534 <buzReset+0x74>)
 80024f4:	f003 f856 	bl	80055a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, 1);
 80024f8:	2201      	movs	r2, #1
 80024fa:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80024fe:	480c      	ldr	r0, [pc, #48]	@ (8002530 <buzReset+0x70>)
 8002500:	f003 f850 	bl	80055a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 1);
 8002504:	2201      	movs	r2, #1
 8002506:	2120      	movs	r1, #32
 8002508:	480b      	ldr	r0, [pc, #44]	@ (8002538 <buzReset+0x78>)
 800250a:	f003 f84b 	bl	80055a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, 1);
 800250e:	2201      	movs	r2, #1
 8002510:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002514:	4806      	ldr	r0, [pc, #24]	@ (8002530 <buzReset+0x70>)
 8002516:	f003 f845 	bl	80055a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 1);
 800251a:	2201      	movs	r2, #1
 800251c:	2101      	movs	r1, #1
 800251e:	4806      	ldr	r0, [pc, #24]	@ (8002538 <buzReset+0x78>)
 8002520:	f003 f840 	bl	80055a4 <HAL_GPIO_WritePin>
}
 8002524:	bf00      	nop
 8002526:	bd80      	pop	{r7, pc}
 8002528:	20000054 	.word	0x20000054
 800252c:	200001d8 	.word	0x200001d8
 8002530:	40020c00 	.word	0x40020c00
 8002534:	40020800 	.word	0x40020800
 8002538:	40020400 	.word	0x40020400

0800253c <getBuzzEnabled>:

uint8_t getBuzzEnabled() {
 800253c:	b480      	push	{r7}
 800253e:	af00      	add	r7, sp, #0
	return buz.enabled;
 8002540:	4b03      	ldr	r3, [pc, #12]	@ (8002550 <getBuzzEnabled+0x14>)
 8002542:	781b      	ldrb	r3, [r3, #0]
}
 8002544:	4618      	mov	r0, r3
 8002546:	46bd      	mov	sp, r7
 8002548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254c:	4770      	bx	lr
 800254e:	bf00      	nop
 8002550:	20000054 	.word	0x20000054

08002554 <setBuzzEnabled>:

void setBuzzEnabled(uint8_t enabled) {
 8002554:	b480      	push	{r7}
 8002556:	b083      	sub	sp, #12
 8002558:	af00      	add	r7, sp, #0
 800255a:	4603      	mov	r3, r0
 800255c:	71fb      	strb	r3, [r7, #7]
	buz.enabled = enabled;
 800255e:	4a04      	ldr	r2, [pc, #16]	@ (8002570 <setBuzzEnabled+0x1c>)
 8002560:	79fb      	ldrb	r3, [r7, #7]
 8002562:	7013      	strb	r3, [r2, #0]
}
 8002564:	bf00      	nop
 8002566:	370c      	adds	r7, #12
 8002568:	46bd      	mov	sp, r7
 800256a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256e:	4770      	bx	lr
 8002570:	20000054 	.word	0x20000054

08002574 <setbuzzerOnOff>:

uint8_t getbuzzerOnOff() {
	return buz.onOff;
}

void setbuzzerOnOff(uint8_t onOff) {
 8002574:	b480      	push	{r7}
 8002576:	b083      	sub	sp, #12
 8002578:	af00      	add	r7, sp, #0
 800257a:	4603      	mov	r3, r0
 800257c:	71fb      	strb	r3, [r7, #7]
	buz.onOff = onOff;
 800257e:	4a04      	ldr	r2, [pc, #16]	@ (8002590 <setbuzzerOnOff+0x1c>)
 8002580:	79fb      	ldrb	r3, [r7, #7]
 8002582:	7053      	strb	r3, [r2, #1]
}
 8002584:	bf00      	nop
 8002586:	370c      	adds	r7, #12
 8002588:	46bd      	mov	sp, r7
 800258a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258e:	4770      	bx	lr
 8002590:	20000054 	.word	0x20000054

08002594 <startClock>:
extern clockSt clock;
extern modeSelector mode;
int thirtyDays[4] = {4, 6, 9, 11};
clockSetting clockSet = SECOND;

void startClock() {
 8002594:	b580      	push	{r7, lr}
 8002596:	af00      	add	r7, sp, #0
	// 시간 증가 함수
	clock.millisecond++;
 8002598:	4b5b      	ldr	r3, [pc, #364]	@ (8002708 <startClock+0x174>)
 800259a:	699b      	ldr	r3, [r3, #24]
 800259c:	3301      	adds	r3, #1
 800259e:	4a5a      	ldr	r2, [pc, #360]	@ (8002708 <startClock+0x174>)
 80025a0:	6193      	str	r3, [r2, #24]
	if(clock.millisecond == 1000) {
 80025a2:	4b59      	ldr	r3, [pc, #356]	@ (8002708 <startClock+0x174>)
 80025a4:	699b      	ldr	r3, [r3, #24]
 80025a6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80025aa:	d107      	bne.n	80025bc <startClock+0x28>
		clock.millisecond = 0;
 80025ac:	4b56      	ldr	r3, [pc, #344]	@ (8002708 <startClock+0x174>)
 80025ae:	2200      	movs	r2, #0
 80025b0:	619a      	str	r2, [r3, #24]
		clock.second++;
 80025b2:	4b55      	ldr	r3, [pc, #340]	@ (8002708 <startClock+0x174>)
 80025b4:	695b      	ldr	r3, [r3, #20]
 80025b6:	3301      	adds	r3, #1
 80025b8:	4a53      	ldr	r2, [pc, #332]	@ (8002708 <startClock+0x174>)
 80025ba:	6153      	str	r3, [r2, #20]
	}
	if(clock.second == 60) {
 80025bc:	4b52      	ldr	r3, [pc, #328]	@ (8002708 <startClock+0x174>)
 80025be:	695b      	ldr	r3, [r3, #20]
 80025c0:	2b3c      	cmp	r3, #60	@ 0x3c
 80025c2:	d107      	bne.n	80025d4 <startClock+0x40>
		clock.second = 0;
 80025c4:	4b50      	ldr	r3, [pc, #320]	@ (8002708 <startClock+0x174>)
 80025c6:	2200      	movs	r2, #0
 80025c8:	615a      	str	r2, [r3, #20]
		clock.minute++;
 80025ca:	4b4f      	ldr	r3, [pc, #316]	@ (8002708 <startClock+0x174>)
 80025cc:	691b      	ldr	r3, [r3, #16]
 80025ce:	3301      	adds	r3, #1
 80025d0:	4a4d      	ldr	r2, [pc, #308]	@ (8002708 <startClock+0x174>)
 80025d2:	6113      	str	r3, [r2, #16]
	}
	if(clock.minute == 60) {
 80025d4:	4b4c      	ldr	r3, [pc, #304]	@ (8002708 <startClock+0x174>)
 80025d6:	691b      	ldr	r3, [r3, #16]
 80025d8:	2b3c      	cmp	r3, #60	@ 0x3c
 80025da:	d109      	bne.n	80025f0 <startClock+0x5c>
		clock.minute = 0;
 80025dc:	4b4a      	ldr	r3, [pc, #296]	@ (8002708 <startClock+0x174>)
 80025de:	2200      	movs	r2, #0
 80025e0:	611a      	str	r2, [r3, #16]
		clock.hour++;
 80025e2:	4b49      	ldr	r3, [pc, #292]	@ (8002708 <startClock+0x174>)
 80025e4:	68db      	ldr	r3, [r3, #12]
 80025e6:	3301      	adds	r3, #1
 80025e8:	4a47      	ldr	r2, [pc, #284]	@ (8002708 <startClock+0x174>)
 80025ea:	60d3      	str	r3, [r2, #12]
		playMidTone();	// 정각에 부저 mid tone으로 울리는 함수
 80025ec:	f7ff febe 	bl	800236c <playMidTone>
	}
	if(clock.hour == 24) {
 80025f0:	4b45      	ldr	r3, [pc, #276]	@ (8002708 <startClock+0x174>)
 80025f2:	68db      	ldr	r3, [r3, #12]
 80025f4:	2b18      	cmp	r3, #24
 80025f6:	d109      	bne.n	800260c <startClock+0x78>
		clock.hour = 0;
 80025f8:	4b43      	ldr	r3, [pc, #268]	@ (8002708 <startClock+0x174>)
 80025fa:	2200      	movs	r2, #0
 80025fc:	60da      	str	r2, [r3, #12]
		clock.date++;
 80025fe:	4b42      	ldr	r3, [pc, #264]	@ (8002708 <startClock+0x174>)
 8002600:	689b      	ldr	r3, [r3, #8]
 8002602:	3301      	adds	r3, #1
 8002604:	4a40      	ldr	r2, [pc, #256]	@ (8002708 <startClock+0x174>)
 8002606:	6093      	str	r3, [r2, #8]
		playHighTone(); // 매일 0시에 부저 high tone으로 울리는 함수
 8002608:	f7ff fec2 	bl	8002390 <playHighTone>
	}
	if(clock.month == 2) {
 800260c:	4b3e      	ldr	r3, [pc, #248]	@ (8002708 <startClock+0x174>)
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	2b02      	cmp	r3, #2
 8002612:	d12f      	bne.n	8002674 <startClock+0xe0>
		if(clock.leapYear == TRUE) {
 8002614:	4b3c      	ldr	r3, [pc, #240]	@ (8002708 <startClock+0x174>)
 8002616:	7f1b      	ldrb	r3, [r3, #28]
 8002618:	2b01      	cmp	r3, #1
 800261a:	d115      	bne.n	8002648 <startClock+0xb4>
			if(clock.date > 29) {
 800261c:	4b3a      	ldr	r3, [pc, #232]	@ (8002708 <startClock+0x174>)
 800261e:	689b      	ldr	r3, [r3, #8]
 8002620:	2b1d      	cmp	r3, #29
 8002622:	dd5a      	ble.n	80026da <startClock+0x146>
				clock.date = 1;
 8002624:	4b38      	ldr	r3, [pc, #224]	@ (8002708 <startClock+0x174>)
 8002626:	2201      	movs	r2, #1
 8002628:	609a      	str	r2, [r3, #8]
				clock.month++;
 800262a:	4b37      	ldr	r3, [pc, #220]	@ (8002708 <startClock+0x174>)
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	3301      	adds	r3, #1
 8002630:	4a35      	ldr	r2, [pc, #212]	@ (8002708 <startClock+0x174>)
 8002632:	6053      	str	r3, [r2, #4]
				clock.thiryMonth = isThirtyDays(clock.month);
 8002634:	4b34      	ldr	r3, [pc, #208]	@ (8002708 <startClock+0x174>)
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	4618      	mov	r0, r3
 800263a:	f000 f9a7 	bl	800298c <isThirtyDays>
 800263e:	4603      	mov	r3, r0
 8002640:	b2da      	uxtb	r2, r3
 8002642:	4b31      	ldr	r3, [pc, #196]	@ (8002708 <startClock+0x174>)
 8002644:	775a      	strb	r2, [r3, #29]
 8002646:	e048      	b.n	80026da <startClock+0x146>
			}
		} else {
			if(clock.date > 28) {
 8002648:	4b2f      	ldr	r3, [pc, #188]	@ (8002708 <startClock+0x174>)
 800264a:	689b      	ldr	r3, [r3, #8]
 800264c:	2b1c      	cmp	r3, #28
 800264e:	dd44      	ble.n	80026da <startClock+0x146>
				clock.date = 1;
 8002650:	4b2d      	ldr	r3, [pc, #180]	@ (8002708 <startClock+0x174>)
 8002652:	2201      	movs	r2, #1
 8002654:	609a      	str	r2, [r3, #8]
				clock.month++;
 8002656:	4b2c      	ldr	r3, [pc, #176]	@ (8002708 <startClock+0x174>)
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	3301      	adds	r3, #1
 800265c:	4a2a      	ldr	r2, [pc, #168]	@ (8002708 <startClock+0x174>)
 800265e:	6053      	str	r3, [r2, #4]
				clock.thiryMonth = isThirtyDays(clock.month);
 8002660:	4b29      	ldr	r3, [pc, #164]	@ (8002708 <startClock+0x174>)
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	4618      	mov	r0, r3
 8002666:	f000 f991 	bl	800298c <isThirtyDays>
 800266a:	4603      	mov	r3, r0
 800266c:	b2da      	uxtb	r2, r3
 800266e:	4b26      	ldr	r3, [pc, #152]	@ (8002708 <startClock+0x174>)
 8002670:	775a      	strb	r2, [r3, #29]
 8002672:	e032      	b.n	80026da <startClock+0x146>
			}
		}
	} else if(clock.thiryMonth == TRUE) { // 말일이 30일인 달 4, 6, 9, 11
 8002674:	4b24      	ldr	r3, [pc, #144]	@ (8002708 <startClock+0x174>)
 8002676:	7f5b      	ldrb	r3, [r3, #29]
 8002678:	2b01      	cmp	r3, #1
 800267a:	d115      	bne.n	80026a8 <startClock+0x114>
		if(clock.date > 30) {
 800267c:	4b22      	ldr	r3, [pc, #136]	@ (8002708 <startClock+0x174>)
 800267e:	689b      	ldr	r3, [r3, #8]
 8002680:	2b1e      	cmp	r3, #30
 8002682:	dd2a      	ble.n	80026da <startClock+0x146>
			clock.date = 1;
 8002684:	4b20      	ldr	r3, [pc, #128]	@ (8002708 <startClock+0x174>)
 8002686:	2201      	movs	r2, #1
 8002688:	609a      	str	r2, [r3, #8]
			clock.month++;
 800268a:	4b1f      	ldr	r3, [pc, #124]	@ (8002708 <startClock+0x174>)
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	3301      	adds	r3, #1
 8002690:	4a1d      	ldr	r2, [pc, #116]	@ (8002708 <startClock+0x174>)
 8002692:	6053      	str	r3, [r2, #4]
			clock.thiryMonth = isThirtyDays(clock.month);
 8002694:	4b1c      	ldr	r3, [pc, #112]	@ (8002708 <startClock+0x174>)
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	4618      	mov	r0, r3
 800269a:	f000 f977 	bl	800298c <isThirtyDays>
 800269e:	4603      	mov	r3, r0
 80026a0:	b2da      	uxtb	r2, r3
 80026a2:	4b19      	ldr	r3, [pc, #100]	@ (8002708 <startClock+0x174>)
 80026a4:	775a      	strb	r2, [r3, #29]
 80026a6:	e018      	b.n	80026da <startClock+0x146>
		}
	} else if(clock.thiryMonth == FALSE) { // 말일이 31일인 달 1, 3, 5, 7, 8, 10, 12
 80026a8:	4b17      	ldr	r3, [pc, #92]	@ (8002708 <startClock+0x174>)
 80026aa:	7f5b      	ldrb	r3, [r3, #29]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d114      	bne.n	80026da <startClock+0x146>
		if(clock.date > 31) {
 80026b0:	4b15      	ldr	r3, [pc, #84]	@ (8002708 <startClock+0x174>)
 80026b2:	689b      	ldr	r3, [r3, #8]
 80026b4:	2b1f      	cmp	r3, #31
 80026b6:	dd10      	ble.n	80026da <startClock+0x146>
			clock.date = 1;
 80026b8:	4b13      	ldr	r3, [pc, #76]	@ (8002708 <startClock+0x174>)
 80026ba:	2201      	movs	r2, #1
 80026bc:	609a      	str	r2, [r3, #8]
			clock.month++;
 80026be:	4b12      	ldr	r3, [pc, #72]	@ (8002708 <startClock+0x174>)
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	3301      	adds	r3, #1
 80026c4:	4a10      	ldr	r2, [pc, #64]	@ (8002708 <startClock+0x174>)
 80026c6:	6053      	str	r3, [r2, #4]
			clock.thiryMonth = isThirtyDays(clock.month);
 80026c8:	4b0f      	ldr	r3, [pc, #60]	@ (8002708 <startClock+0x174>)
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	4618      	mov	r0, r3
 80026ce:	f000 f95d 	bl	800298c <isThirtyDays>
 80026d2:	4603      	mov	r3, r0
 80026d4:	b2da      	uxtb	r2, r3
 80026d6:	4b0c      	ldr	r3, [pc, #48]	@ (8002708 <startClock+0x174>)
 80026d8:	775a      	strb	r2, [r3, #29]
		}
	}

	if(clock.month > 12) {
 80026da:	4b0b      	ldr	r3, [pc, #44]	@ (8002708 <startClock+0x174>)
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	2b0c      	cmp	r3, #12
 80026e0:	dd10      	ble.n	8002704 <startClock+0x170>
		clock.month = 1;
 80026e2:	4b09      	ldr	r3, [pc, #36]	@ (8002708 <startClock+0x174>)
 80026e4:	2201      	movs	r2, #1
 80026e6:	605a      	str	r2, [r3, #4]
		clock.year++;
 80026e8:	4b07      	ldr	r3, [pc, #28]	@ (8002708 <startClock+0x174>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	3301      	adds	r3, #1
 80026ee:	4a06      	ldr	r2, [pc, #24]	@ (8002708 <startClock+0x174>)
 80026f0:	6013      	str	r3, [r2, #0]
		clock.leapYear = leapYearCalculator(clock.year);
 80026f2:	4b05      	ldr	r3, [pc, #20]	@ (8002708 <startClock+0x174>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4618      	mov	r0, r3
 80026f8:	f000 f914 	bl	8002924 <leapYearCalculator>
 80026fc:	4603      	mov	r3, r0
 80026fe:	b2da      	uxtb	r2, r3
 8002700:	4b01      	ldr	r3, [pc, #4]	@ (8002708 <startClock+0x174>)
 8002702:	771a      	strb	r2, [r3, #28]
	}
}
 8002704:	bf00      	nop
 8002706:	bd80      	pop	{r7, pc}
 8002708:	2000006c 	.word	0x2000006c

0800270c <clcdDisplayClock>:

void clcdDisplayClock() {
 800270c:	b580      	push	{r7, lr}
 800270e:	b088      	sub	sp, #32
 8002710:	af02      	add	r7, sp, #8
	// 시계기능 출력
	uint8_t buzzOnOff[8];
	uint8_t formet[12];
	if(clock.leapYear == TRUE) {
 8002712:	4b62      	ldr	r3, [pc, #392]	@ (800289c <clcdDisplayClock+0x190>)
 8002714:	7f1b      	ldrb	r3, [r3, #28]
 8002716:	2b01      	cmp	r3, #1
 8002718:	d10c      	bne.n	8002734 <clcdDisplayClock+0x28>
		sprintf(clock.buffer, "LEAP  %4d.%2d.%2d", clock.year, clock.month, clock.date);
 800271a:	4b60      	ldr	r3, [pc, #384]	@ (800289c <clcdDisplayClock+0x190>)
 800271c:	681a      	ldr	r2, [r3, #0]
 800271e:	4b5f      	ldr	r3, [pc, #380]	@ (800289c <clcdDisplayClock+0x190>)
 8002720:	6859      	ldr	r1, [r3, #4]
 8002722:	4b5e      	ldr	r3, [pc, #376]	@ (800289c <clcdDisplayClock+0x190>)
 8002724:	689b      	ldr	r3, [r3, #8]
 8002726:	9300      	str	r3, [sp, #0]
 8002728:	460b      	mov	r3, r1
 800272a:	495d      	ldr	r1, [pc, #372]	@ (80028a0 <clcdDisplayClock+0x194>)
 800272c:	485d      	ldr	r0, [pc, #372]	@ (80028a4 <clcdDisplayClock+0x198>)
 800272e:	f005 fc31 	bl	8007f94 <siprintf>
 8002732:	e00b      	b.n	800274c <clcdDisplayClock+0x40>
	} else {
		sprintf(clock.buffer, "      %4d.%2d.%2d", clock.year, clock.month, clock.date);
 8002734:	4b59      	ldr	r3, [pc, #356]	@ (800289c <clcdDisplayClock+0x190>)
 8002736:	681a      	ldr	r2, [r3, #0]
 8002738:	4b58      	ldr	r3, [pc, #352]	@ (800289c <clcdDisplayClock+0x190>)
 800273a:	6859      	ldr	r1, [r3, #4]
 800273c:	4b57      	ldr	r3, [pc, #348]	@ (800289c <clcdDisplayClock+0x190>)
 800273e:	689b      	ldr	r3, [r3, #8]
 8002740:	9300      	str	r3, [sp, #0]
 8002742:	460b      	mov	r3, r1
 8002744:	4958      	ldr	r1, [pc, #352]	@ (80028a8 <clcdDisplayClock+0x19c>)
 8002746:	4857      	ldr	r0, [pc, #348]	@ (80028a4 <clcdDisplayClock+0x198>)
 8002748:	f005 fc24 	bl	8007f94 <siprintf>
	}
	if(getBuzzEnabled() == TRUE) {	// 부저 상태 출력
 800274c:	f7ff fef6 	bl	800253c <getBuzzEnabled>
 8002750:	4603      	mov	r3, r0
 8002752:	2b01      	cmp	r3, #1
 8002754:	d106      	bne.n	8002764 <clcdDisplayClock+0x58>
		sprintf(buzzOnOff, "BZ ON ");
 8002756:	f107 0310 	add.w	r3, r7, #16
 800275a:	4954      	ldr	r1, [pc, #336]	@ (80028ac <clcdDisplayClock+0x1a0>)
 800275c:	4618      	mov	r0, r3
 800275e:	f005 fc19 	bl	8007f94 <siprintf>
 8002762:	e005      	b.n	8002770 <clcdDisplayClock+0x64>

	} else {
		sprintf(buzzOnOff, "BZ OFF");
 8002764:	f107 0310 	add.w	r3, r7, #16
 8002768:	4951      	ldr	r1, [pc, #324]	@ (80028b0 <clcdDisplayClock+0x1a4>)
 800276a:	4618      	mov	r0, r3
 800276c:	f005 fc12 	bl	8007f94 <siprintf>
	}

	if(getTimeFormet() == TRUE) {  // 24시간 포멧일경우
 8002770:	f000 fc9e 	bl	80030b0 <getTimeFormet>
 8002774:	4603      	mov	r3, r0
 8002776:	2b01      	cmp	r3, #1
 8002778:	d116      	bne.n	80027a8 <clcdDisplayClock+0x9c>
		if(getBlink() == TRUE) {
 800277a:	f002 f9f3 	bl	8004b64 <getBlink>
 800277e:	4603      	mov	r3, r0
 8002780:	2b01      	cmp	r3, #1
 8002782:	d108      	bne.n	8002796 <clcdDisplayClock+0x8a>
			sprintf(formet, "   %02d:%02d", clock.hour, clock.minute);
 8002784:	4b45      	ldr	r3, [pc, #276]	@ (800289c <clcdDisplayClock+0x190>)
 8002786:	68da      	ldr	r2, [r3, #12]
 8002788:	4b44      	ldr	r3, [pc, #272]	@ (800289c <clcdDisplayClock+0x190>)
 800278a:	691b      	ldr	r3, [r3, #16]
 800278c:	1d38      	adds	r0, r7, #4
 800278e:	4949      	ldr	r1, [pc, #292]	@ (80028b4 <clcdDisplayClock+0x1a8>)
 8002790:	f005 fc00 	bl	8007f94 <siprintf>
 8002794:	e06c      	b.n	8002870 <clcdDisplayClock+0x164>
		} else { 	// 콜론X
			sprintf(formet, "   %02d %02d", clock.hour, clock.minute);
 8002796:	4b41      	ldr	r3, [pc, #260]	@ (800289c <clcdDisplayClock+0x190>)
 8002798:	68da      	ldr	r2, [r3, #12]
 800279a:	4b40      	ldr	r3, [pc, #256]	@ (800289c <clcdDisplayClock+0x190>)
 800279c:	691b      	ldr	r3, [r3, #16]
 800279e:	1d38      	adds	r0, r7, #4
 80027a0:	4945      	ldr	r1, [pc, #276]	@ (80028b8 <clcdDisplayClock+0x1ac>)
 80027a2:	f005 fbf7 	bl	8007f94 <siprintf>
 80027a6:	e063      	b.n	8002870 <clcdDisplayClock+0x164>
		}
	} else {					// AM/PM (12시간 포멧) 일경우
		if(getBlink() == TRUE) {
 80027a8:	f002 f9dc 	bl	8004b64 <getBlink>
 80027ac:	4603      	mov	r3, r0
 80027ae:	2b01      	cmp	r3, #1
 80027b0:	d12f      	bne.n	8002812 <clcdDisplayClock+0x106>
			if(clock.hour < 12) {	// AM
 80027b2:	4b3a      	ldr	r3, [pc, #232]	@ (800289c <clcdDisplayClock+0x190>)
 80027b4:	68db      	ldr	r3, [r3, #12]
 80027b6:	2b0b      	cmp	r3, #11
 80027b8:	dc14      	bgt.n	80027e4 <clcdDisplayClock+0xd8>
				if(clock.hour == 0) {
 80027ba:	4b38      	ldr	r3, [pc, #224]	@ (800289c <clcdDisplayClock+0x190>)
 80027bc:	68db      	ldr	r3, [r3, #12]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d107      	bne.n	80027d2 <clcdDisplayClock+0xc6>
					// 24시 일때
					sprintf(formet, "AM %02d:%02d", 12, clock.minute);
 80027c2:	4b36      	ldr	r3, [pc, #216]	@ (800289c <clcdDisplayClock+0x190>)
 80027c4:	691b      	ldr	r3, [r3, #16]
 80027c6:	1d38      	adds	r0, r7, #4
 80027c8:	220c      	movs	r2, #12
 80027ca:	493c      	ldr	r1, [pc, #240]	@ (80028bc <clcdDisplayClock+0x1b0>)
 80027cc:	f005 fbe2 	bl	8007f94 <siprintf>
 80027d0:	e04e      	b.n	8002870 <clcdDisplayClock+0x164>
				} else {
					sprintf(formet, "AM %02d:%02d", clock.hour, clock.minute);
 80027d2:	4b32      	ldr	r3, [pc, #200]	@ (800289c <clcdDisplayClock+0x190>)
 80027d4:	68da      	ldr	r2, [r3, #12]
 80027d6:	4b31      	ldr	r3, [pc, #196]	@ (800289c <clcdDisplayClock+0x190>)
 80027d8:	691b      	ldr	r3, [r3, #16]
 80027da:	1d38      	adds	r0, r7, #4
 80027dc:	4937      	ldr	r1, [pc, #220]	@ (80028bc <clcdDisplayClock+0x1b0>)
 80027de:	f005 fbd9 	bl	8007f94 <siprintf>
 80027e2:	e045      	b.n	8002870 <clcdDisplayClock+0x164>
				}
			} else {				// PM
				if(clock.hour == 12) {
 80027e4:	4b2d      	ldr	r3, [pc, #180]	@ (800289c <clcdDisplayClock+0x190>)
 80027e6:	68db      	ldr	r3, [r3, #12]
 80027e8:	2b0c      	cmp	r3, #12
 80027ea:	d107      	bne.n	80027fc <clcdDisplayClock+0xf0>
					// 12시 일때
					sprintf(formet, "PM %02d:%02d", 12, clock.minute);
 80027ec:	4b2b      	ldr	r3, [pc, #172]	@ (800289c <clcdDisplayClock+0x190>)
 80027ee:	691b      	ldr	r3, [r3, #16]
 80027f0:	1d38      	adds	r0, r7, #4
 80027f2:	220c      	movs	r2, #12
 80027f4:	4932      	ldr	r1, [pc, #200]	@ (80028c0 <clcdDisplayClock+0x1b4>)
 80027f6:	f005 fbcd 	bl	8007f94 <siprintf>
 80027fa:	e039      	b.n	8002870 <clcdDisplayClock+0x164>
				} else {
					sprintf(formet, "PM %02d:%02d", (clock.hour - 12), clock.minute);
 80027fc:	4b27      	ldr	r3, [pc, #156]	@ (800289c <clcdDisplayClock+0x190>)
 80027fe:	68db      	ldr	r3, [r3, #12]
 8002800:	f1a3 020c 	sub.w	r2, r3, #12
 8002804:	4b25      	ldr	r3, [pc, #148]	@ (800289c <clcdDisplayClock+0x190>)
 8002806:	691b      	ldr	r3, [r3, #16]
 8002808:	1d38      	adds	r0, r7, #4
 800280a:	492d      	ldr	r1, [pc, #180]	@ (80028c0 <clcdDisplayClock+0x1b4>)
 800280c:	f005 fbc2 	bl	8007f94 <siprintf>
 8002810:	e02e      	b.n	8002870 <clcdDisplayClock+0x164>
				}
			}
		} else {	// 콜론X
			if(clock.hour < 12) {	// AM
 8002812:	4b22      	ldr	r3, [pc, #136]	@ (800289c <clcdDisplayClock+0x190>)
 8002814:	68db      	ldr	r3, [r3, #12]
 8002816:	2b0b      	cmp	r3, #11
 8002818:	dc14      	bgt.n	8002844 <clcdDisplayClock+0x138>
				if (clock.hour == 0) {
 800281a:	4b20      	ldr	r3, [pc, #128]	@ (800289c <clcdDisplayClock+0x190>)
 800281c:	68db      	ldr	r3, [r3, #12]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d107      	bne.n	8002832 <clcdDisplayClock+0x126>
					// 24시 일때
					sprintf(formet, "AM %02d %02d", 12, clock.minute);
 8002822:	4b1e      	ldr	r3, [pc, #120]	@ (800289c <clcdDisplayClock+0x190>)
 8002824:	691b      	ldr	r3, [r3, #16]
 8002826:	1d38      	adds	r0, r7, #4
 8002828:	220c      	movs	r2, #12
 800282a:	4926      	ldr	r1, [pc, #152]	@ (80028c4 <clcdDisplayClock+0x1b8>)
 800282c:	f005 fbb2 	bl	8007f94 <siprintf>
 8002830:	e01e      	b.n	8002870 <clcdDisplayClock+0x164>
				} else {
					sprintf(formet, "AM %02d %02d", clock.hour, clock.minute);
 8002832:	4b1a      	ldr	r3, [pc, #104]	@ (800289c <clcdDisplayClock+0x190>)
 8002834:	68da      	ldr	r2, [r3, #12]
 8002836:	4b19      	ldr	r3, [pc, #100]	@ (800289c <clcdDisplayClock+0x190>)
 8002838:	691b      	ldr	r3, [r3, #16]
 800283a:	1d38      	adds	r0, r7, #4
 800283c:	4921      	ldr	r1, [pc, #132]	@ (80028c4 <clcdDisplayClock+0x1b8>)
 800283e:	f005 fba9 	bl	8007f94 <siprintf>
 8002842:	e015      	b.n	8002870 <clcdDisplayClock+0x164>
				}
			} else {				// PM
				if (clock.hour == 12) {
 8002844:	4b15      	ldr	r3, [pc, #84]	@ (800289c <clcdDisplayClock+0x190>)
 8002846:	68db      	ldr	r3, [r3, #12]
 8002848:	2b0c      	cmp	r3, #12
 800284a:	d107      	bne.n	800285c <clcdDisplayClock+0x150>
					// 12시 일때
					sprintf(formet, "PM %02d %02d", 12, clock.minute);
 800284c:	4b13      	ldr	r3, [pc, #76]	@ (800289c <clcdDisplayClock+0x190>)
 800284e:	691b      	ldr	r3, [r3, #16]
 8002850:	1d38      	adds	r0, r7, #4
 8002852:	220c      	movs	r2, #12
 8002854:	491c      	ldr	r1, [pc, #112]	@ (80028c8 <clcdDisplayClock+0x1bc>)
 8002856:	f005 fb9d 	bl	8007f94 <siprintf>
 800285a:	e009      	b.n	8002870 <clcdDisplayClock+0x164>
				} else {
					sprintf(formet, "PM %02d %02d", (clock.hour - 12), clock.minute);
 800285c:	4b0f      	ldr	r3, [pc, #60]	@ (800289c <clcdDisplayClock+0x190>)
 800285e:	68db      	ldr	r3, [r3, #12]
 8002860:	f1a3 020c 	sub.w	r2, r3, #12
 8002864:	4b0d      	ldr	r3, [pc, #52]	@ (800289c <clcdDisplayClock+0x190>)
 8002866:	691b      	ldr	r3, [r3, #16]
 8002868:	1d38      	adds	r0, r7, #4
 800286a:	4917      	ldr	r1, [pc, #92]	@ (80028c8 <clcdDisplayClock+0x1bc>)
 800286c:	f005 fb92 	bl	8007f94 <siprintf>
				}
			}
		}
	}
	CLCD_Puts(0, 0, clock.buffer);
 8002870:	4a0c      	ldr	r2, [pc, #48]	@ (80028a4 <clcdDisplayClock+0x198>)
 8002872:	2100      	movs	r1, #0
 8002874:	2000      	movs	r0, #0
 8002876:	f7fe fd3f 	bl	80012f8 <CLCD_Puts>
	sprintf(clock.buffer, "%s  %s", buzzOnOff, formet);
 800287a:	1d3b      	adds	r3, r7, #4
 800287c:	f107 0210 	add.w	r2, r7, #16
 8002880:	4912      	ldr	r1, [pc, #72]	@ (80028cc <clcdDisplayClock+0x1c0>)
 8002882:	4808      	ldr	r0, [pc, #32]	@ (80028a4 <clcdDisplayClock+0x198>)
 8002884:	f005 fb86 	bl	8007f94 <siprintf>
	CLCD_Puts(0, 1, clock.buffer);
 8002888:	4a06      	ldr	r2, [pc, #24]	@ (80028a4 <clcdDisplayClock+0x198>)
 800288a:	2101      	movs	r1, #1
 800288c:	2000      	movs	r0, #0
 800288e:	f7fe fd33 	bl	80012f8 <CLCD_Puts>
}
 8002892:	bf00      	nop
 8002894:	3718      	adds	r7, #24
 8002896:	46bd      	mov	sp, r7
 8002898:	bd80      	pop	{r7, pc}
 800289a:	bf00      	nop
 800289c:	2000006c 	.word	0x2000006c
 80028a0:	080089d4 	.word	0x080089d4
 80028a4:	2000008b 	.word	0x2000008b
 80028a8:	080089e8 	.word	0x080089e8
 80028ac:	080089fc 	.word	0x080089fc
 80028b0:	08008a04 	.word	0x08008a04
 80028b4:	08008a0c 	.word	0x08008a0c
 80028b8:	08008a1c 	.word	0x08008a1c
 80028bc:	08008a2c 	.word	0x08008a2c
 80028c0:	08008a3c 	.word	0x08008a3c
 80028c4:	08008a4c 	.word	0x08008a4c
 80028c8:	08008a5c 	.word	0x08008a5c
 80028cc:	08008a6c 	.word	0x08008a6c

080028d0 <tickClock>:

void tickClock() {
 80028d0:	b598      	push	{r3, r4, r7, lr}
 80028d2:	af00      	add	r7, sp, #0
	// 7세그먼트에 초 단위 출력
	_7SEG_SetNumber(DGT1, clock.second / 10, 0);
 80028d4:	4b11      	ldr	r3, [pc, #68]	@ (800291c <tickClock+0x4c>)
 80028d6:	695b      	ldr	r3, [r3, #20]
 80028d8:	4a11      	ldr	r2, [pc, #68]	@ (8002920 <tickClock+0x50>)
 80028da:	fb82 1203 	smull	r1, r2, r2, r3
 80028de:	1092      	asrs	r2, r2, #2
 80028e0:	17db      	asrs	r3, r3, #31
 80028e2:	1ad3      	subs	r3, r2, r3
 80028e4:	2200      	movs	r2, #0
 80028e6:	4619      	mov	r1, r3
 80028e8:	2000      	movs	r0, #0
 80028ea:	f7fd ff1f 	bl	800072c <_7SEG_SetNumber>
	_7SEG_SetNumber(DGT2, clock.second % 10, getBlink());
 80028ee:	4b0b      	ldr	r3, [pc, #44]	@ (800291c <tickClock+0x4c>)
 80028f0:	695a      	ldr	r2, [r3, #20]
 80028f2:	4b0b      	ldr	r3, [pc, #44]	@ (8002920 <tickClock+0x50>)
 80028f4:	fb83 1302 	smull	r1, r3, r3, r2
 80028f8:	1099      	asrs	r1, r3, #2
 80028fa:	17d3      	asrs	r3, r2, #31
 80028fc:	1acc      	subs	r4, r1, r3
 80028fe:	4623      	mov	r3, r4
 8002900:	009b      	lsls	r3, r3, #2
 8002902:	4423      	add	r3, r4
 8002904:	005b      	lsls	r3, r3, #1
 8002906:	1ad4      	subs	r4, r2, r3
 8002908:	f002 f92c 	bl	8004b64 <getBlink>
 800290c:	4603      	mov	r3, r0
 800290e:	461a      	mov	r2, r3
 8002910:	4621      	mov	r1, r4
 8002912:	2001      	movs	r0, #1
 8002914:	f7fd ff0a 	bl	800072c <_7SEG_SetNumber>

}
 8002918:	bf00      	nop
 800291a:	bd98      	pop	{r3, r4, r7, pc}
 800291c:	2000006c 	.word	0x2000006c
 8002920:	66666667 	.word	0x66666667

08002924 <leapYearCalculator>:

int leapYearCalculator(int year) {
 8002924:	b480      	push	{r7}
 8002926:	b083      	sub	sp, #12
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
	// 윤년 계산
	if(year % 4 == 0){
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	f003 0303 	and.w	r3, r3, #3
 8002932:	2b00      	cmp	r3, #0
 8002934:	d120      	bne.n	8002978 <leapYearCalculator+0x54>
		if(year % 100 == 0) {
 8002936:	687a      	ldr	r2, [r7, #4]
 8002938:	4b13      	ldr	r3, [pc, #76]	@ (8002988 <leapYearCalculator+0x64>)
 800293a:	fb83 1302 	smull	r1, r3, r3, r2
 800293e:	1159      	asrs	r1, r3, #5
 8002940:	17d3      	asrs	r3, r2, #31
 8002942:	1acb      	subs	r3, r1, r3
 8002944:	2164      	movs	r1, #100	@ 0x64
 8002946:	fb01 f303 	mul.w	r3, r1, r3
 800294a:	1ad3      	subs	r3, r2, r3
 800294c:	2b00      	cmp	r3, #0
 800294e:	d111      	bne.n	8002974 <leapYearCalculator+0x50>
			if(year % 400 == 0) {
 8002950:	687a      	ldr	r2, [r7, #4]
 8002952:	4b0d      	ldr	r3, [pc, #52]	@ (8002988 <leapYearCalculator+0x64>)
 8002954:	fb83 1302 	smull	r1, r3, r3, r2
 8002958:	11d9      	asrs	r1, r3, #7
 800295a:	17d3      	asrs	r3, r2, #31
 800295c:	1acb      	subs	r3, r1, r3
 800295e:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8002962:	fb01 f303 	mul.w	r3, r1, r3
 8002966:	1ad3      	subs	r3, r2, r3
 8002968:	2b00      	cmp	r3, #0
 800296a:	d101      	bne.n	8002970 <leapYearCalculator+0x4c>
				return TRUE; // 4, 100, 400 으로 나누어 떨어지면 윤년
 800296c:	2301      	movs	r3, #1
 800296e:	e004      	b.n	800297a <leapYearCalculator+0x56>
			} else {
				return FALSE; // 4, 100 으로 나누어 떨어지고 400으로 나누어 떨어지지 않으면 평년
 8002970:	2300      	movs	r3, #0
 8002972:	e002      	b.n	800297a <leapYearCalculator+0x56>
			}
		} else {
			return TRUE;	// 4로 나누어 떨어지고 100으로 나누어 떨어지지 않으면 윤년
 8002974:	2301      	movs	r3, #1
 8002976:	e000      	b.n	800297a <leapYearCalculator+0x56>
		}
	} else {
		return FALSE;	// 4로 나누어 떨어지지 않으면 평년
 8002978:	2300      	movs	r3, #0
	}
}
 800297a:	4618      	mov	r0, r3
 800297c:	370c      	adds	r7, #12
 800297e:	46bd      	mov	sp, r7
 8002980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002984:	4770      	bx	lr
 8002986:	bf00      	nop
 8002988:	51eb851f 	.word	0x51eb851f

0800298c <isThirtyDays>:

int isThirtyDays(int month) {
 800298c:	b480      	push	{r7}
 800298e:	b085      	sub	sp, #20
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
	// 30일로 끝나는 달 구분
	int bool = FALSE;
 8002994:	2300      	movs	r3, #0
 8002996:	60fb      	str	r3, [r7, #12]
	for(int i = 0; i < sizeof(thirtyDays) / sizeof(int); i++) {
 8002998:	2300      	movs	r3, #0
 800299a:	60bb      	str	r3, [r7, #8]
 800299c:	e00c      	b.n	80029b8 <isThirtyDays+0x2c>
		if(thirtyDays[i] == month) {
 800299e:	4a0b      	ldr	r2, [pc, #44]	@ (80029cc <isThirtyDays+0x40>)
 80029a0:	68bb      	ldr	r3, [r7, #8]
 80029a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029a6:	687a      	ldr	r2, [r7, #4]
 80029a8:	429a      	cmp	r2, r3
 80029aa:	d102      	bne.n	80029b2 <isThirtyDays+0x26>
			bool = TRUE;
 80029ac:	2301      	movs	r3, #1
 80029ae:	60fb      	str	r3, [r7, #12]
			break;
 80029b0:	e005      	b.n	80029be <isThirtyDays+0x32>
	for(int i = 0; i < sizeof(thirtyDays) / sizeof(int); i++) {
 80029b2:	68bb      	ldr	r3, [r7, #8]
 80029b4:	3301      	adds	r3, #1
 80029b6:	60bb      	str	r3, [r7, #8]
 80029b8:	68bb      	ldr	r3, [r7, #8]
 80029ba:	2b03      	cmp	r3, #3
 80029bc:	d9ef      	bls.n	800299e <isThirtyDays+0x12>
		}
	}
	return bool;
 80029be:	68fb      	ldr	r3, [r7, #12]
}
 80029c0:	4618      	mov	r0, r3
 80029c2:	3714      	adds	r7, #20
 80029c4:	46bd      	mov	sp, r7
 80029c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ca:	4770      	bx	lr
 80029cc:	2000005c 	.word	0x2000005c

080029d0 <switchClockMode>:

void switchClockMode() { // 시계모드에서 시계설정 모드전환 함수
 80029d0:	b580      	push	{r7, lr}
 80029d2:	af00      	add	r7, sp, #0
	if(mode == CLOCK && getPressCount(1) == 700) {
 80029d4:	4b16      	ldr	r3, [pc, #88]	@ (8002a30 <switchClockMode+0x60>)
 80029d6:	781b      	ldrb	r3, [r3, #0]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d110      	bne.n	80029fe <switchClockMode+0x2e>
 80029dc:	2001      	movs	r0, #1
 80029de:	f001 fee9 	bl	80047b4 <getPressCount>
 80029e2:	4603      	mov	r3, r0
 80029e4:	f5b3 7f2f 	cmp.w	r3, #700	@ 0x2bc
 80029e8:	d109      	bne.n	80029fe <switchClockMode+0x2e>
		// 시계모드 이면서 누른 시간이 700 인경우
		mode = CLOCK_SETTING;
 80029ea:	4b11      	ldr	r3, [pc, #68]	@ (8002a30 <switchClockMode+0x60>)
 80029ec:	2203      	movs	r2, #3
 80029ee:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_5);
 80029f0:	2120      	movs	r1, #32
 80029f2:	4810      	ldr	r0, [pc, #64]	@ (8002a34 <switchClockMode+0x64>)
 80029f4:	f002 fdef 	bl	80055d6 <HAL_GPIO_TogglePin>
		playMidTone();
 80029f8:	f7ff fcb8 	bl	800236c <playMidTone>
		mode = CLOCK;
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_5);
		playMidTone();
		setWaitingTime(0);
	}
}
 80029fc:	e016      	b.n	8002a2c <switchClockMode+0x5c>
	} else if((mode == CLOCK_SETTING && getPressCount(1) == 700)) {
 80029fe:	4b0c      	ldr	r3, [pc, #48]	@ (8002a30 <switchClockMode+0x60>)
 8002a00:	781b      	ldrb	r3, [r3, #0]
 8002a02:	2b03      	cmp	r3, #3
 8002a04:	d112      	bne.n	8002a2c <switchClockMode+0x5c>
 8002a06:	2001      	movs	r0, #1
 8002a08:	f001 fed4 	bl	80047b4 <getPressCount>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	f5b3 7f2f 	cmp.w	r3, #700	@ 0x2bc
 8002a12:	d10b      	bne.n	8002a2c <switchClockMode+0x5c>
		mode = CLOCK;
 8002a14:	4b06      	ldr	r3, [pc, #24]	@ (8002a30 <switchClockMode+0x60>)
 8002a16:	2200      	movs	r2, #0
 8002a18:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_5);
 8002a1a:	2120      	movs	r1, #32
 8002a1c:	4805      	ldr	r0, [pc, #20]	@ (8002a34 <switchClockMode+0x64>)
 8002a1e:	f002 fdda 	bl	80055d6 <HAL_GPIO_TogglePin>
		playMidTone();
 8002a22:	f7ff fca3 	bl	800236c <playMidTone>
		setWaitingTime(0);
 8002a26:	2000      	movs	r0, #0
 8002a28:	f002 f8b4 	bl	8004b94 <setWaitingTime>
}
 8002a2c:	bf00      	nop
 8002a2e:	bd80      	pop	{r7, pc}
 8002a30:	2000033d 	.word	0x2000033d
 8002a34:	40020400 	.word	0x40020400

08002a38 <clcdDisplayClockSetting>:



void clcdDisplayClockSetting() { // 시계설정모드 clcd출력
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b082      	sub	sp, #8
 8002a3c:	af02      	add	r7, sp, #8
	// 0.5초 마다 점멸
	switch(clockSet) {
 8002a3e:	4b9d      	ldr	r3, [pc, #628]	@ (8002cb4 <clcdDisplayClockSetting+0x27c>)
 8002a40:	781b      	ldrb	r3, [r3, #0]
 8002a42:	2b05      	cmp	r3, #5
 8002a44:	f200 8169 	bhi.w	8002d1a <clcdDisplayClockSetting+0x2e2>
 8002a48:	a201      	add	r2, pc, #4	@ (adr r2, 8002a50 <clcdDisplayClockSetting+0x18>)
 8002a4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a4e:	bf00      	nop
 8002a50:	08002a69 	.word	0x08002a69
 8002a54:	08002ad5 	.word	0x08002ad5
 8002a58:	08002b41 	.word	0x08002b41
 8002a5c:	08002bad 	.word	0x08002bad
 8002a60:	08002c19 	.word	0x08002c19
 8002a64:	08002c85 	.word	0x08002c85
	case SECOND:
		sprintf(clock.buffer, "CLOCK %4d.%2d.%2d", clock.year, clock.month, clock.date);
 8002a68:	4b93      	ldr	r3, [pc, #588]	@ (8002cb8 <clcdDisplayClockSetting+0x280>)
 8002a6a:	681a      	ldr	r2, [r3, #0]
 8002a6c:	4b92      	ldr	r3, [pc, #584]	@ (8002cb8 <clcdDisplayClockSetting+0x280>)
 8002a6e:	6859      	ldr	r1, [r3, #4]
 8002a70:	4b91      	ldr	r3, [pc, #580]	@ (8002cb8 <clcdDisplayClockSetting+0x280>)
 8002a72:	689b      	ldr	r3, [r3, #8]
 8002a74:	9300      	str	r3, [sp, #0]
 8002a76:	460b      	mov	r3, r1
 8002a78:	4990      	ldr	r1, [pc, #576]	@ (8002cbc <clcdDisplayClockSetting+0x284>)
 8002a7a:	4891      	ldr	r0, [pc, #580]	@ (8002cc0 <clcdDisplayClockSetting+0x288>)
 8002a7c:	f005 fa8a 	bl	8007f94 <siprintf>
		CLCD_Puts(0, 0, clock.buffer);
 8002a80:	4a8f      	ldr	r2, [pc, #572]	@ (8002cc0 <clcdDisplayClockSetting+0x288>)
 8002a82:	2100      	movs	r1, #0
 8002a84:	2000      	movs	r0, #0
 8002a86:	f7fe fc37 	bl	80012f8 <CLCD_Puts>
		if(getWaitingTime() < 200|| getBlink() == TRUE) {
 8002a8a:	f002 f877 	bl	8004b7c <getWaitingTime>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	2bc7      	cmp	r3, #199	@ 0xc7
 8002a92:	dd04      	ble.n	8002a9e <clcdDisplayClockSetting+0x66>
 8002a94:	f002 f866 	bl	8004b64 <getBlink>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	2b01      	cmp	r3, #1
 8002a9c:	d10c      	bne.n	8002ab8 <clcdDisplayClockSetting+0x80>
			sprintf(clock.buffer, "SET     %02d:%02d:%02d", clock.hour, clock.minute, clock.second);
 8002a9e:	4b86      	ldr	r3, [pc, #536]	@ (8002cb8 <clcdDisplayClockSetting+0x280>)
 8002aa0:	68da      	ldr	r2, [r3, #12]
 8002aa2:	4b85      	ldr	r3, [pc, #532]	@ (8002cb8 <clcdDisplayClockSetting+0x280>)
 8002aa4:	6919      	ldr	r1, [r3, #16]
 8002aa6:	4b84      	ldr	r3, [pc, #528]	@ (8002cb8 <clcdDisplayClockSetting+0x280>)
 8002aa8:	695b      	ldr	r3, [r3, #20]
 8002aaa:	9300      	str	r3, [sp, #0]
 8002aac:	460b      	mov	r3, r1
 8002aae:	4985      	ldr	r1, [pc, #532]	@ (8002cc4 <clcdDisplayClockSetting+0x28c>)
 8002ab0:	4883      	ldr	r0, [pc, #524]	@ (8002cc0 <clcdDisplayClockSetting+0x288>)
 8002ab2:	f005 fa6f 	bl	8007f94 <siprintf>
 8002ab6:	e007      	b.n	8002ac8 <clcdDisplayClockSetting+0x90>
		} else {
			sprintf(clock.buffer, "SET     %02d:%02d:  ", clock.hour, clock.minute);
 8002ab8:	4b7f      	ldr	r3, [pc, #508]	@ (8002cb8 <clcdDisplayClockSetting+0x280>)
 8002aba:	68da      	ldr	r2, [r3, #12]
 8002abc:	4b7e      	ldr	r3, [pc, #504]	@ (8002cb8 <clcdDisplayClockSetting+0x280>)
 8002abe:	691b      	ldr	r3, [r3, #16]
 8002ac0:	4981      	ldr	r1, [pc, #516]	@ (8002cc8 <clcdDisplayClockSetting+0x290>)
 8002ac2:	487f      	ldr	r0, [pc, #508]	@ (8002cc0 <clcdDisplayClockSetting+0x288>)
 8002ac4:	f005 fa66 	bl	8007f94 <siprintf>
		}
		CLCD_Puts(0, 1, clock.buffer);
 8002ac8:	4a7d      	ldr	r2, [pc, #500]	@ (8002cc0 <clcdDisplayClockSetting+0x288>)
 8002aca:	2101      	movs	r1, #1
 8002acc:	2000      	movs	r0, #0
 8002ace:	f7fe fc13 	bl	80012f8 <CLCD_Puts>
		break;
 8002ad2:	e122      	b.n	8002d1a <clcdDisplayClockSetting+0x2e2>
	case MINUTE:
		sprintf(clock.buffer, "CLOCK %4d.%2d.%2d", clock.year, clock.month, clock.date);
 8002ad4:	4b78      	ldr	r3, [pc, #480]	@ (8002cb8 <clcdDisplayClockSetting+0x280>)
 8002ad6:	681a      	ldr	r2, [r3, #0]
 8002ad8:	4b77      	ldr	r3, [pc, #476]	@ (8002cb8 <clcdDisplayClockSetting+0x280>)
 8002ada:	6859      	ldr	r1, [r3, #4]
 8002adc:	4b76      	ldr	r3, [pc, #472]	@ (8002cb8 <clcdDisplayClockSetting+0x280>)
 8002ade:	689b      	ldr	r3, [r3, #8]
 8002ae0:	9300      	str	r3, [sp, #0]
 8002ae2:	460b      	mov	r3, r1
 8002ae4:	4975      	ldr	r1, [pc, #468]	@ (8002cbc <clcdDisplayClockSetting+0x284>)
 8002ae6:	4876      	ldr	r0, [pc, #472]	@ (8002cc0 <clcdDisplayClockSetting+0x288>)
 8002ae8:	f005 fa54 	bl	8007f94 <siprintf>
		CLCD_Puts(0, 0, clock.buffer);
 8002aec:	4a74      	ldr	r2, [pc, #464]	@ (8002cc0 <clcdDisplayClockSetting+0x288>)
 8002aee:	2100      	movs	r1, #0
 8002af0:	2000      	movs	r0, #0
 8002af2:	f7fe fc01 	bl	80012f8 <CLCD_Puts>
		if(getWaitingTime() < 200 || getBlink() == TRUE) {
 8002af6:	f002 f841 	bl	8004b7c <getWaitingTime>
 8002afa:	4603      	mov	r3, r0
 8002afc:	2bc7      	cmp	r3, #199	@ 0xc7
 8002afe:	dd04      	ble.n	8002b0a <clcdDisplayClockSetting+0xd2>
 8002b00:	f002 f830 	bl	8004b64 <getBlink>
 8002b04:	4603      	mov	r3, r0
 8002b06:	2b01      	cmp	r3, #1
 8002b08:	d10c      	bne.n	8002b24 <clcdDisplayClockSetting+0xec>
			sprintf(clock.buffer, "SET     %02d:%02d:%02d", clock.hour, clock.minute, clock.second);
 8002b0a:	4b6b      	ldr	r3, [pc, #428]	@ (8002cb8 <clcdDisplayClockSetting+0x280>)
 8002b0c:	68da      	ldr	r2, [r3, #12]
 8002b0e:	4b6a      	ldr	r3, [pc, #424]	@ (8002cb8 <clcdDisplayClockSetting+0x280>)
 8002b10:	6919      	ldr	r1, [r3, #16]
 8002b12:	4b69      	ldr	r3, [pc, #420]	@ (8002cb8 <clcdDisplayClockSetting+0x280>)
 8002b14:	695b      	ldr	r3, [r3, #20]
 8002b16:	9300      	str	r3, [sp, #0]
 8002b18:	460b      	mov	r3, r1
 8002b1a:	496a      	ldr	r1, [pc, #424]	@ (8002cc4 <clcdDisplayClockSetting+0x28c>)
 8002b1c:	4868      	ldr	r0, [pc, #416]	@ (8002cc0 <clcdDisplayClockSetting+0x288>)
 8002b1e:	f005 fa39 	bl	8007f94 <siprintf>
 8002b22:	e007      	b.n	8002b34 <clcdDisplayClockSetting+0xfc>
		} else {
			sprintf(clock.buffer, "SET     %02d:  :%02d", clock.hour, clock.second);
 8002b24:	4b64      	ldr	r3, [pc, #400]	@ (8002cb8 <clcdDisplayClockSetting+0x280>)
 8002b26:	68da      	ldr	r2, [r3, #12]
 8002b28:	4b63      	ldr	r3, [pc, #396]	@ (8002cb8 <clcdDisplayClockSetting+0x280>)
 8002b2a:	695b      	ldr	r3, [r3, #20]
 8002b2c:	4967      	ldr	r1, [pc, #412]	@ (8002ccc <clcdDisplayClockSetting+0x294>)
 8002b2e:	4864      	ldr	r0, [pc, #400]	@ (8002cc0 <clcdDisplayClockSetting+0x288>)
 8002b30:	f005 fa30 	bl	8007f94 <siprintf>
		}
		CLCD_Puts(0, 1, clock.buffer);
 8002b34:	4a62      	ldr	r2, [pc, #392]	@ (8002cc0 <clcdDisplayClockSetting+0x288>)
 8002b36:	2101      	movs	r1, #1
 8002b38:	2000      	movs	r0, #0
 8002b3a:	f7fe fbdd 	bl	80012f8 <CLCD_Puts>
		break;
 8002b3e:	e0ec      	b.n	8002d1a <clcdDisplayClockSetting+0x2e2>
	case HOUR:
		sprintf(clock.buffer, "CLOCK %4d.%2d.%2d", clock.year, clock.month, clock.date);
 8002b40:	4b5d      	ldr	r3, [pc, #372]	@ (8002cb8 <clcdDisplayClockSetting+0x280>)
 8002b42:	681a      	ldr	r2, [r3, #0]
 8002b44:	4b5c      	ldr	r3, [pc, #368]	@ (8002cb8 <clcdDisplayClockSetting+0x280>)
 8002b46:	6859      	ldr	r1, [r3, #4]
 8002b48:	4b5b      	ldr	r3, [pc, #364]	@ (8002cb8 <clcdDisplayClockSetting+0x280>)
 8002b4a:	689b      	ldr	r3, [r3, #8]
 8002b4c:	9300      	str	r3, [sp, #0]
 8002b4e:	460b      	mov	r3, r1
 8002b50:	495a      	ldr	r1, [pc, #360]	@ (8002cbc <clcdDisplayClockSetting+0x284>)
 8002b52:	485b      	ldr	r0, [pc, #364]	@ (8002cc0 <clcdDisplayClockSetting+0x288>)
 8002b54:	f005 fa1e 	bl	8007f94 <siprintf>
		CLCD_Puts(0, 0, clock.buffer);
 8002b58:	4a59      	ldr	r2, [pc, #356]	@ (8002cc0 <clcdDisplayClockSetting+0x288>)
 8002b5a:	2100      	movs	r1, #0
 8002b5c:	2000      	movs	r0, #0
 8002b5e:	f7fe fbcb 	bl	80012f8 <CLCD_Puts>
		if(getWaitingTime() < 200 || getBlink() == TRUE) {
 8002b62:	f002 f80b 	bl	8004b7c <getWaitingTime>
 8002b66:	4603      	mov	r3, r0
 8002b68:	2bc7      	cmp	r3, #199	@ 0xc7
 8002b6a:	dd04      	ble.n	8002b76 <clcdDisplayClockSetting+0x13e>
 8002b6c:	f001 fffa 	bl	8004b64 <getBlink>
 8002b70:	4603      	mov	r3, r0
 8002b72:	2b01      	cmp	r3, #1
 8002b74:	d10c      	bne.n	8002b90 <clcdDisplayClockSetting+0x158>
			sprintf(clock.buffer, "SET     %02d:%02d:%02d", clock.hour, clock.minute, clock.second);
 8002b76:	4b50      	ldr	r3, [pc, #320]	@ (8002cb8 <clcdDisplayClockSetting+0x280>)
 8002b78:	68da      	ldr	r2, [r3, #12]
 8002b7a:	4b4f      	ldr	r3, [pc, #316]	@ (8002cb8 <clcdDisplayClockSetting+0x280>)
 8002b7c:	6919      	ldr	r1, [r3, #16]
 8002b7e:	4b4e      	ldr	r3, [pc, #312]	@ (8002cb8 <clcdDisplayClockSetting+0x280>)
 8002b80:	695b      	ldr	r3, [r3, #20]
 8002b82:	9300      	str	r3, [sp, #0]
 8002b84:	460b      	mov	r3, r1
 8002b86:	494f      	ldr	r1, [pc, #316]	@ (8002cc4 <clcdDisplayClockSetting+0x28c>)
 8002b88:	484d      	ldr	r0, [pc, #308]	@ (8002cc0 <clcdDisplayClockSetting+0x288>)
 8002b8a:	f005 fa03 	bl	8007f94 <siprintf>
 8002b8e:	e007      	b.n	8002ba0 <clcdDisplayClockSetting+0x168>
		} else {
			sprintf(clock.buffer, "SET       :%02d:%02d", clock.minute, clock.second);
 8002b90:	4b49      	ldr	r3, [pc, #292]	@ (8002cb8 <clcdDisplayClockSetting+0x280>)
 8002b92:	691a      	ldr	r2, [r3, #16]
 8002b94:	4b48      	ldr	r3, [pc, #288]	@ (8002cb8 <clcdDisplayClockSetting+0x280>)
 8002b96:	695b      	ldr	r3, [r3, #20]
 8002b98:	494d      	ldr	r1, [pc, #308]	@ (8002cd0 <clcdDisplayClockSetting+0x298>)
 8002b9a:	4849      	ldr	r0, [pc, #292]	@ (8002cc0 <clcdDisplayClockSetting+0x288>)
 8002b9c:	f005 f9fa 	bl	8007f94 <siprintf>
		}
		CLCD_Puts(0, 1, clock.buffer);
 8002ba0:	4a47      	ldr	r2, [pc, #284]	@ (8002cc0 <clcdDisplayClockSetting+0x288>)
 8002ba2:	2101      	movs	r1, #1
 8002ba4:	2000      	movs	r0, #0
 8002ba6:	f7fe fba7 	bl	80012f8 <CLCD_Puts>
		break;
 8002baa:	e0b6      	b.n	8002d1a <clcdDisplayClockSetting+0x2e2>
	case DATE:
		if(getWaitingTime() < 200 || getBlink() == TRUE) {
 8002bac:	f001 ffe6 	bl	8004b7c <getWaitingTime>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	2bc7      	cmp	r3, #199	@ 0xc7
 8002bb4:	dd04      	ble.n	8002bc0 <clcdDisplayClockSetting+0x188>
 8002bb6:	f001 ffd5 	bl	8004b64 <getBlink>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	2b01      	cmp	r3, #1
 8002bbe:	d10c      	bne.n	8002bda <clcdDisplayClockSetting+0x1a2>
			sprintf(clock.buffer, "CLOCK %4d.%2d.%2d", clock.year, clock.month, clock.date);
 8002bc0:	4b3d      	ldr	r3, [pc, #244]	@ (8002cb8 <clcdDisplayClockSetting+0x280>)
 8002bc2:	681a      	ldr	r2, [r3, #0]
 8002bc4:	4b3c      	ldr	r3, [pc, #240]	@ (8002cb8 <clcdDisplayClockSetting+0x280>)
 8002bc6:	6859      	ldr	r1, [r3, #4]
 8002bc8:	4b3b      	ldr	r3, [pc, #236]	@ (8002cb8 <clcdDisplayClockSetting+0x280>)
 8002bca:	689b      	ldr	r3, [r3, #8]
 8002bcc:	9300      	str	r3, [sp, #0]
 8002bce:	460b      	mov	r3, r1
 8002bd0:	493a      	ldr	r1, [pc, #232]	@ (8002cbc <clcdDisplayClockSetting+0x284>)
 8002bd2:	483b      	ldr	r0, [pc, #236]	@ (8002cc0 <clcdDisplayClockSetting+0x288>)
 8002bd4:	f005 f9de 	bl	8007f94 <siprintf>
 8002bd8:	e007      	b.n	8002bea <clcdDisplayClockSetting+0x1b2>
		} else {
			sprintf(clock.buffer, "CLOCK %4d.%2d.  ", clock.year, clock.month);
 8002bda:	4b37      	ldr	r3, [pc, #220]	@ (8002cb8 <clcdDisplayClockSetting+0x280>)
 8002bdc:	681a      	ldr	r2, [r3, #0]
 8002bde:	4b36      	ldr	r3, [pc, #216]	@ (8002cb8 <clcdDisplayClockSetting+0x280>)
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	493c      	ldr	r1, [pc, #240]	@ (8002cd4 <clcdDisplayClockSetting+0x29c>)
 8002be4:	4836      	ldr	r0, [pc, #216]	@ (8002cc0 <clcdDisplayClockSetting+0x288>)
 8002be6:	f005 f9d5 	bl	8007f94 <siprintf>
		}
		CLCD_Puts(0, 0, clock.buffer);
 8002bea:	4a35      	ldr	r2, [pc, #212]	@ (8002cc0 <clcdDisplayClockSetting+0x288>)
 8002bec:	2100      	movs	r1, #0
 8002bee:	2000      	movs	r0, #0
 8002bf0:	f7fe fb82 	bl	80012f8 <CLCD_Puts>
		sprintf(clock.buffer, "SET     %02d:%02d:%02d", clock.hour, clock.minute, clock.second);
 8002bf4:	4b30      	ldr	r3, [pc, #192]	@ (8002cb8 <clcdDisplayClockSetting+0x280>)
 8002bf6:	68da      	ldr	r2, [r3, #12]
 8002bf8:	4b2f      	ldr	r3, [pc, #188]	@ (8002cb8 <clcdDisplayClockSetting+0x280>)
 8002bfa:	6919      	ldr	r1, [r3, #16]
 8002bfc:	4b2e      	ldr	r3, [pc, #184]	@ (8002cb8 <clcdDisplayClockSetting+0x280>)
 8002bfe:	695b      	ldr	r3, [r3, #20]
 8002c00:	9300      	str	r3, [sp, #0]
 8002c02:	460b      	mov	r3, r1
 8002c04:	492f      	ldr	r1, [pc, #188]	@ (8002cc4 <clcdDisplayClockSetting+0x28c>)
 8002c06:	482e      	ldr	r0, [pc, #184]	@ (8002cc0 <clcdDisplayClockSetting+0x288>)
 8002c08:	f005 f9c4 	bl	8007f94 <siprintf>
		CLCD_Puts(0, 1, clock.buffer);
 8002c0c:	4a2c      	ldr	r2, [pc, #176]	@ (8002cc0 <clcdDisplayClockSetting+0x288>)
 8002c0e:	2101      	movs	r1, #1
 8002c10:	2000      	movs	r0, #0
 8002c12:	f7fe fb71 	bl	80012f8 <CLCD_Puts>
		break;
 8002c16:	e080      	b.n	8002d1a <clcdDisplayClockSetting+0x2e2>
	case MONTH:
		if(getWaitingTime() < 200 || getBlink() == TRUE) {
 8002c18:	f001 ffb0 	bl	8004b7c <getWaitingTime>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	2bc7      	cmp	r3, #199	@ 0xc7
 8002c20:	dd04      	ble.n	8002c2c <clcdDisplayClockSetting+0x1f4>
 8002c22:	f001 ff9f 	bl	8004b64 <getBlink>
 8002c26:	4603      	mov	r3, r0
 8002c28:	2b01      	cmp	r3, #1
 8002c2a:	d10c      	bne.n	8002c46 <clcdDisplayClockSetting+0x20e>
			sprintf(clock.buffer, "CLOCK %4d.%2d.%2d", clock.year, clock.month, clock.date);
 8002c2c:	4b22      	ldr	r3, [pc, #136]	@ (8002cb8 <clcdDisplayClockSetting+0x280>)
 8002c2e:	681a      	ldr	r2, [r3, #0]
 8002c30:	4b21      	ldr	r3, [pc, #132]	@ (8002cb8 <clcdDisplayClockSetting+0x280>)
 8002c32:	6859      	ldr	r1, [r3, #4]
 8002c34:	4b20      	ldr	r3, [pc, #128]	@ (8002cb8 <clcdDisplayClockSetting+0x280>)
 8002c36:	689b      	ldr	r3, [r3, #8]
 8002c38:	9300      	str	r3, [sp, #0]
 8002c3a:	460b      	mov	r3, r1
 8002c3c:	491f      	ldr	r1, [pc, #124]	@ (8002cbc <clcdDisplayClockSetting+0x284>)
 8002c3e:	4820      	ldr	r0, [pc, #128]	@ (8002cc0 <clcdDisplayClockSetting+0x288>)
 8002c40:	f005 f9a8 	bl	8007f94 <siprintf>
 8002c44:	e007      	b.n	8002c56 <clcdDisplayClockSetting+0x21e>
		} else {
			sprintf(clock.buffer, "CLOCK %4d.  .%2d", clock.year, clock.date);
 8002c46:	4b1c      	ldr	r3, [pc, #112]	@ (8002cb8 <clcdDisplayClockSetting+0x280>)
 8002c48:	681a      	ldr	r2, [r3, #0]
 8002c4a:	4b1b      	ldr	r3, [pc, #108]	@ (8002cb8 <clcdDisplayClockSetting+0x280>)
 8002c4c:	689b      	ldr	r3, [r3, #8]
 8002c4e:	4922      	ldr	r1, [pc, #136]	@ (8002cd8 <clcdDisplayClockSetting+0x2a0>)
 8002c50:	481b      	ldr	r0, [pc, #108]	@ (8002cc0 <clcdDisplayClockSetting+0x288>)
 8002c52:	f005 f99f 	bl	8007f94 <siprintf>
		}
		CLCD_Puts(0, 0, clock.buffer);
 8002c56:	4a1a      	ldr	r2, [pc, #104]	@ (8002cc0 <clcdDisplayClockSetting+0x288>)
 8002c58:	2100      	movs	r1, #0
 8002c5a:	2000      	movs	r0, #0
 8002c5c:	f7fe fb4c 	bl	80012f8 <CLCD_Puts>
		sprintf(clock.buffer, "SET     %02d:%02d:%02d", clock.hour, clock.minute, clock.second);
 8002c60:	4b15      	ldr	r3, [pc, #84]	@ (8002cb8 <clcdDisplayClockSetting+0x280>)
 8002c62:	68da      	ldr	r2, [r3, #12]
 8002c64:	4b14      	ldr	r3, [pc, #80]	@ (8002cb8 <clcdDisplayClockSetting+0x280>)
 8002c66:	6919      	ldr	r1, [r3, #16]
 8002c68:	4b13      	ldr	r3, [pc, #76]	@ (8002cb8 <clcdDisplayClockSetting+0x280>)
 8002c6a:	695b      	ldr	r3, [r3, #20]
 8002c6c:	9300      	str	r3, [sp, #0]
 8002c6e:	460b      	mov	r3, r1
 8002c70:	4914      	ldr	r1, [pc, #80]	@ (8002cc4 <clcdDisplayClockSetting+0x28c>)
 8002c72:	4813      	ldr	r0, [pc, #76]	@ (8002cc0 <clcdDisplayClockSetting+0x288>)
 8002c74:	f005 f98e 	bl	8007f94 <siprintf>
		CLCD_Puts(0, 1, clock.buffer);
 8002c78:	4a11      	ldr	r2, [pc, #68]	@ (8002cc0 <clcdDisplayClockSetting+0x288>)
 8002c7a:	2101      	movs	r1, #1
 8002c7c:	2000      	movs	r0, #0
 8002c7e:	f7fe fb3b 	bl	80012f8 <CLCD_Puts>
		break;
 8002c82:	e04a      	b.n	8002d1a <clcdDisplayClockSetting+0x2e2>
	case YEAR:
		if(getWaitingTime() < 200 || getBlink() == TRUE) {
 8002c84:	f001 ff7a 	bl	8004b7c <getWaitingTime>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	2bc7      	cmp	r3, #199	@ 0xc7
 8002c8c:	dd04      	ble.n	8002c98 <clcdDisplayClockSetting+0x260>
 8002c8e:	f001 ff69 	bl	8004b64 <getBlink>
 8002c92:	4603      	mov	r3, r0
 8002c94:	2b01      	cmp	r3, #1
 8002c96:	d121      	bne.n	8002cdc <clcdDisplayClockSetting+0x2a4>
			sprintf(clock.buffer, "CLOCK %4d.%2d.%2d", clock.year, clock.month, clock.date);
 8002c98:	4b07      	ldr	r3, [pc, #28]	@ (8002cb8 <clcdDisplayClockSetting+0x280>)
 8002c9a:	681a      	ldr	r2, [r3, #0]
 8002c9c:	4b06      	ldr	r3, [pc, #24]	@ (8002cb8 <clcdDisplayClockSetting+0x280>)
 8002c9e:	6859      	ldr	r1, [r3, #4]
 8002ca0:	4b05      	ldr	r3, [pc, #20]	@ (8002cb8 <clcdDisplayClockSetting+0x280>)
 8002ca2:	689b      	ldr	r3, [r3, #8]
 8002ca4:	9300      	str	r3, [sp, #0]
 8002ca6:	460b      	mov	r3, r1
 8002ca8:	4904      	ldr	r1, [pc, #16]	@ (8002cbc <clcdDisplayClockSetting+0x284>)
 8002caa:	4805      	ldr	r0, [pc, #20]	@ (8002cc0 <clcdDisplayClockSetting+0x288>)
 8002cac:	f005 f972 	bl	8007f94 <siprintf>
 8002cb0:	e01c      	b.n	8002cec <clcdDisplayClockSetting+0x2b4>
 8002cb2:	bf00      	nop
 8002cb4:	200001d6 	.word	0x200001d6
 8002cb8:	2000006c 	.word	0x2000006c
 8002cbc:	08008a74 	.word	0x08008a74
 8002cc0:	2000008b 	.word	0x2000008b
 8002cc4:	08008a88 	.word	0x08008a88
 8002cc8:	08008aa0 	.word	0x08008aa0
 8002ccc:	08008ab8 	.word	0x08008ab8
 8002cd0:	08008ad0 	.word	0x08008ad0
 8002cd4:	08008ae8 	.word	0x08008ae8
 8002cd8:	08008afc 	.word	0x08008afc
		} else {
			sprintf(clock.buffer, "CLOCK     .%2d.%2d", clock.month, clock.date);
 8002cdc:	4b10      	ldr	r3, [pc, #64]	@ (8002d20 <clcdDisplayClockSetting+0x2e8>)
 8002cde:	685a      	ldr	r2, [r3, #4]
 8002ce0:	4b0f      	ldr	r3, [pc, #60]	@ (8002d20 <clcdDisplayClockSetting+0x2e8>)
 8002ce2:	689b      	ldr	r3, [r3, #8]
 8002ce4:	490f      	ldr	r1, [pc, #60]	@ (8002d24 <clcdDisplayClockSetting+0x2ec>)
 8002ce6:	4810      	ldr	r0, [pc, #64]	@ (8002d28 <clcdDisplayClockSetting+0x2f0>)
 8002ce8:	f005 f954 	bl	8007f94 <siprintf>
		}
		CLCD_Puts(0, 0, clock.buffer);
 8002cec:	4a0e      	ldr	r2, [pc, #56]	@ (8002d28 <clcdDisplayClockSetting+0x2f0>)
 8002cee:	2100      	movs	r1, #0
 8002cf0:	2000      	movs	r0, #0
 8002cf2:	f7fe fb01 	bl	80012f8 <CLCD_Puts>
		sprintf(clock.buffer, "SET     %02d:%02d:%02d", clock.hour, clock.minute, clock.second);
 8002cf6:	4b0a      	ldr	r3, [pc, #40]	@ (8002d20 <clcdDisplayClockSetting+0x2e8>)
 8002cf8:	68da      	ldr	r2, [r3, #12]
 8002cfa:	4b09      	ldr	r3, [pc, #36]	@ (8002d20 <clcdDisplayClockSetting+0x2e8>)
 8002cfc:	6919      	ldr	r1, [r3, #16]
 8002cfe:	4b08      	ldr	r3, [pc, #32]	@ (8002d20 <clcdDisplayClockSetting+0x2e8>)
 8002d00:	695b      	ldr	r3, [r3, #20]
 8002d02:	9300      	str	r3, [sp, #0]
 8002d04:	460b      	mov	r3, r1
 8002d06:	4909      	ldr	r1, [pc, #36]	@ (8002d2c <clcdDisplayClockSetting+0x2f4>)
 8002d08:	4807      	ldr	r0, [pc, #28]	@ (8002d28 <clcdDisplayClockSetting+0x2f0>)
 8002d0a:	f005 f943 	bl	8007f94 <siprintf>
		CLCD_Puts(0, 1, clock.buffer);
 8002d0e:	4a06      	ldr	r2, [pc, #24]	@ (8002d28 <clcdDisplayClockSetting+0x2f0>)
 8002d10:	2101      	movs	r1, #1
 8002d12:	2000      	movs	r0, #0
 8002d14:	f7fe faf0 	bl	80012f8 <CLCD_Puts>
		break;
 8002d18:	bf00      	nop
	}
}
 8002d1a:	bf00      	nop
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bd80      	pop	{r7, pc}
 8002d20:	2000006c 	.word	0x2000006c
 8002d24:	08008b10 	.word	0x08008b10
 8002d28:	2000008b 	.word	0x2000008b
 8002d2c:	08008a88 	.word	0x08008a88

08002d30 <settingTime>:

void settingTime() {	// 버튼 2번 동작 설정할 단위 변경
 8002d30:	b480      	push	{r7}
 8002d32:	af00      	add	r7, sp, #0
	if(clockSet == YEAR) {
 8002d34:	4b09      	ldr	r3, [pc, #36]	@ (8002d5c <settingTime+0x2c>)
 8002d36:	781b      	ldrb	r3, [r3, #0]
 8002d38:	2b05      	cmp	r3, #5
 8002d3a:	d103      	bne.n	8002d44 <settingTime+0x14>
		clockSet = SECOND;
 8002d3c:	4b07      	ldr	r3, [pc, #28]	@ (8002d5c <settingTime+0x2c>)
 8002d3e:	2200      	movs	r2, #0
 8002d40:	701a      	strb	r2, [r3, #0]
	} else {
		clockSet++;
	}
}
 8002d42:	e005      	b.n	8002d50 <settingTime+0x20>
		clockSet++;
 8002d44:	4b05      	ldr	r3, [pc, #20]	@ (8002d5c <settingTime+0x2c>)
 8002d46:	781b      	ldrb	r3, [r3, #0]
 8002d48:	3301      	adds	r3, #1
 8002d4a:	b2da      	uxtb	r2, r3
 8002d4c:	4b03      	ldr	r3, [pc, #12]	@ (8002d5c <settingTime+0x2c>)
 8002d4e:	701a      	strb	r2, [r3, #0]
}
 8002d50:	bf00      	nop
 8002d52:	46bd      	mov	sp, r7
 8002d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d58:	4770      	bx	lr
 8002d5a:	bf00      	nop
 8002d5c:	200001d6 	.word	0x200001d6

08002d60 <incrementTime>:

void incrementTime() {	// 버튼 3번동작 (시간 증가)
 8002d60:	b580      	push	{r7, lr}
 8002d62:	af00      	add	r7, sp, #0
	switch(clockSet) {
 8002d64:	4b64      	ldr	r3, [pc, #400]	@ (8002ef8 <incrementTime+0x198>)
 8002d66:	781b      	ldrb	r3, [r3, #0]
 8002d68:	2b05      	cmp	r3, #5
 8002d6a:	f200 80c3 	bhi.w	8002ef4 <incrementTime+0x194>
 8002d6e:	a201      	add	r2, pc, #4	@ (adr r2, 8002d74 <incrementTime+0x14>)
 8002d70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d74:	08002d8d 	.word	0x08002d8d
 8002d78:	08002d9b 	.word	0x08002d9b
 8002d7c:	08002db7 	.word	0x08002db7
 8002d80:	08002dd3 	.word	0x08002dd3
 8002d84:	08002e3d 	.word	0x08002e3d
 8002d88:	08002eaf 	.word	0x08002eaf
	case SECOND:
		clock.second = 0;
 8002d8c:	4b5b      	ldr	r3, [pc, #364]	@ (8002efc <incrementTime+0x19c>)
 8002d8e:	2200      	movs	r2, #0
 8002d90:	615a      	str	r2, [r3, #20]
		clock.millisecond = 0;
 8002d92:	4b5a      	ldr	r3, [pc, #360]	@ (8002efc <incrementTime+0x19c>)
 8002d94:	2200      	movs	r2, #0
 8002d96:	619a      	str	r2, [r3, #24]
		break;
 8002d98:	e0ac      	b.n	8002ef4 <incrementTime+0x194>
	case MINUTE:
		if(clock.minute == 59) {
 8002d9a:	4b58      	ldr	r3, [pc, #352]	@ (8002efc <incrementTime+0x19c>)
 8002d9c:	691b      	ldr	r3, [r3, #16]
 8002d9e:	2b3b      	cmp	r3, #59	@ 0x3b
 8002da0:	d103      	bne.n	8002daa <incrementTime+0x4a>
			clock.minute = 0;
 8002da2:	4b56      	ldr	r3, [pc, #344]	@ (8002efc <incrementTime+0x19c>)
 8002da4:	2200      	movs	r2, #0
 8002da6:	611a      	str	r2, [r3, #16]
		} else {
			clock.minute++;
		}
		break;
 8002da8:	e0a4      	b.n	8002ef4 <incrementTime+0x194>
			clock.minute++;
 8002daa:	4b54      	ldr	r3, [pc, #336]	@ (8002efc <incrementTime+0x19c>)
 8002dac:	691b      	ldr	r3, [r3, #16]
 8002dae:	3301      	adds	r3, #1
 8002db0:	4a52      	ldr	r2, [pc, #328]	@ (8002efc <incrementTime+0x19c>)
 8002db2:	6113      	str	r3, [r2, #16]
		break;
 8002db4:	e09e      	b.n	8002ef4 <incrementTime+0x194>
	case HOUR:
		if(clock.hour == 23) {
 8002db6:	4b51      	ldr	r3, [pc, #324]	@ (8002efc <incrementTime+0x19c>)
 8002db8:	68db      	ldr	r3, [r3, #12]
 8002dba:	2b17      	cmp	r3, #23
 8002dbc:	d103      	bne.n	8002dc6 <incrementTime+0x66>
			clock.hour = 0;
 8002dbe:	4b4f      	ldr	r3, [pc, #316]	@ (8002efc <incrementTime+0x19c>)
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	60da      	str	r2, [r3, #12]
		} else {
			clock.hour++;
		}
		break;
 8002dc4:	e096      	b.n	8002ef4 <incrementTime+0x194>
			clock.hour++;
 8002dc6:	4b4d      	ldr	r3, [pc, #308]	@ (8002efc <incrementTime+0x19c>)
 8002dc8:	68db      	ldr	r3, [r3, #12]
 8002dca:	3301      	adds	r3, #1
 8002dcc:	4a4b      	ldr	r2, [pc, #300]	@ (8002efc <incrementTime+0x19c>)
 8002dce:	60d3      	str	r3, [r2, #12]
		break;
 8002dd0:	e090      	b.n	8002ef4 <incrementTime+0x194>
	case DATE:
		clock.date++;
 8002dd2:	4b4a      	ldr	r3, [pc, #296]	@ (8002efc <incrementTime+0x19c>)
 8002dd4:	689b      	ldr	r3, [r3, #8]
 8002dd6:	3301      	adds	r3, #1
 8002dd8:	4a48      	ldr	r2, [pc, #288]	@ (8002efc <incrementTime+0x19c>)
 8002dda:	6093      	str	r3, [r2, #8]
		if(clock.month == 2) {
 8002ddc:	4b47      	ldr	r3, [pc, #284]	@ (8002efc <incrementTime+0x19c>)
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	2b02      	cmp	r3, #2
 8002de2:	d113      	bne.n	8002e0c <incrementTime+0xac>
			if(clock.leapYear == TRUE) {
 8002de4:	4b45      	ldr	r3, [pc, #276]	@ (8002efc <incrementTime+0x19c>)
 8002de6:	7f1b      	ldrb	r3, [r3, #28]
 8002de8:	2b01      	cmp	r3, #1
 8002dea:	d107      	bne.n	8002dfc <incrementTime+0x9c>
				if(clock.date > 29) {
 8002dec:	4b43      	ldr	r3, [pc, #268]	@ (8002efc <incrementTime+0x19c>)
 8002dee:	689b      	ldr	r3, [r3, #8]
 8002df0:	2b1d      	cmp	r3, #29
 8002df2:	dd7a      	ble.n	8002eea <incrementTime+0x18a>
					clock.date = 1;
 8002df4:	4b41      	ldr	r3, [pc, #260]	@ (8002efc <incrementTime+0x19c>)
 8002df6:	2201      	movs	r2, #1
 8002df8:	609a      	str	r2, [r3, #8]
		} else if(clock.thiryMonth == FALSE) { // 말일이 31일인 달 1, 3, 5, 7, 8, 10, 12
			if(clock.date > 31) {
				clock.date = 1;
			}
		}
		break;
 8002dfa:	e076      	b.n	8002eea <incrementTime+0x18a>
				if(clock.date > 28) {
 8002dfc:	4b3f      	ldr	r3, [pc, #252]	@ (8002efc <incrementTime+0x19c>)
 8002dfe:	689b      	ldr	r3, [r3, #8]
 8002e00:	2b1c      	cmp	r3, #28
 8002e02:	dd72      	ble.n	8002eea <incrementTime+0x18a>
					clock.date = 1;
 8002e04:	4b3d      	ldr	r3, [pc, #244]	@ (8002efc <incrementTime+0x19c>)
 8002e06:	2201      	movs	r2, #1
 8002e08:	609a      	str	r2, [r3, #8]
		break;
 8002e0a:	e06e      	b.n	8002eea <incrementTime+0x18a>
		} else if(clock.thiryMonth == TRUE) { // 말일이 30일인 달 4, 6, 9, 11
 8002e0c:	4b3b      	ldr	r3, [pc, #236]	@ (8002efc <incrementTime+0x19c>)
 8002e0e:	7f5b      	ldrb	r3, [r3, #29]
 8002e10:	2b01      	cmp	r3, #1
 8002e12:	d107      	bne.n	8002e24 <incrementTime+0xc4>
			if(clock.date > 30) {
 8002e14:	4b39      	ldr	r3, [pc, #228]	@ (8002efc <incrementTime+0x19c>)
 8002e16:	689b      	ldr	r3, [r3, #8]
 8002e18:	2b1e      	cmp	r3, #30
 8002e1a:	dd66      	ble.n	8002eea <incrementTime+0x18a>
				clock.date = 1;
 8002e1c:	4b37      	ldr	r3, [pc, #220]	@ (8002efc <incrementTime+0x19c>)
 8002e1e:	2201      	movs	r2, #1
 8002e20:	609a      	str	r2, [r3, #8]
		break;
 8002e22:	e062      	b.n	8002eea <incrementTime+0x18a>
		} else if(clock.thiryMonth == FALSE) { // 말일이 31일인 달 1, 3, 5, 7, 8, 10, 12
 8002e24:	4b35      	ldr	r3, [pc, #212]	@ (8002efc <incrementTime+0x19c>)
 8002e26:	7f5b      	ldrb	r3, [r3, #29]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d15e      	bne.n	8002eea <incrementTime+0x18a>
			if(clock.date > 31) {
 8002e2c:	4b33      	ldr	r3, [pc, #204]	@ (8002efc <incrementTime+0x19c>)
 8002e2e:	689b      	ldr	r3, [r3, #8]
 8002e30:	2b1f      	cmp	r3, #31
 8002e32:	dd5a      	ble.n	8002eea <incrementTime+0x18a>
				clock.date = 1;
 8002e34:	4b31      	ldr	r3, [pc, #196]	@ (8002efc <incrementTime+0x19c>)
 8002e36:	2201      	movs	r2, #1
 8002e38:	609a      	str	r2, [r3, #8]
		break;
 8002e3a:	e056      	b.n	8002eea <incrementTime+0x18a>
	case MONTH:
		clock.month++;
 8002e3c:	4b2f      	ldr	r3, [pc, #188]	@ (8002efc <incrementTime+0x19c>)
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	3301      	adds	r3, #1
 8002e42:	4a2e      	ldr	r2, [pc, #184]	@ (8002efc <incrementTime+0x19c>)
 8002e44:	6053      	str	r3, [r2, #4]
		clock.thiryMonth = isThirtyDays(clock.month);
 8002e46:	4b2d      	ldr	r3, [pc, #180]	@ (8002efc <incrementTime+0x19c>)
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	f7ff fd9e 	bl	800298c <isThirtyDays>
 8002e50:	4603      	mov	r3, r0
 8002e52:	b2da      	uxtb	r2, r3
 8002e54:	4b29      	ldr	r3, [pc, #164]	@ (8002efc <incrementTime+0x19c>)
 8002e56:	775a      	strb	r2, [r3, #29]
		if(clock.month == 2) {
 8002e58:	4b28      	ldr	r3, [pc, #160]	@ (8002efc <incrementTime+0x19c>)
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	2b02      	cmp	r3, #2
 8002e5e:	d113      	bne.n	8002e88 <incrementTime+0x128>
			if(clock.leapYear == TRUE) {
 8002e60:	4b26      	ldr	r3, [pc, #152]	@ (8002efc <incrementTime+0x19c>)
 8002e62:	7f1b      	ldrb	r3, [r3, #28]
 8002e64:	2b01      	cmp	r3, #1
 8002e66:	d107      	bne.n	8002e78 <incrementTime+0x118>
				if(clock.date > 29) {
 8002e68:	4b24      	ldr	r3, [pc, #144]	@ (8002efc <incrementTime+0x19c>)
 8002e6a:	689b      	ldr	r3, [r3, #8]
 8002e6c:	2b1d      	cmp	r3, #29
 8002e6e:	dd16      	ble.n	8002e9e <incrementTime+0x13e>
					clock.date = 29;
 8002e70:	4b22      	ldr	r3, [pc, #136]	@ (8002efc <incrementTime+0x19c>)
 8002e72:	221d      	movs	r2, #29
 8002e74:	609a      	str	r2, [r3, #8]
 8002e76:	e012      	b.n	8002e9e <incrementTime+0x13e>
				}
			} else {
				if(clock.date > 28) {
 8002e78:	4b20      	ldr	r3, [pc, #128]	@ (8002efc <incrementTime+0x19c>)
 8002e7a:	689b      	ldr	r3, [r3, #8]
 8002e7c:	2b1c      	cmp	r3, #28
 8002e7e:	dd0e      	ble.n	8002e9e <incrementTime+0x13e>
					clock.date = 28;
 8002e80:	4b1e      	ldr	r3, [pc, #120]	@ (8002efc <incrementTime+0x19c>)
 8002e82:	221c      	movs	r2, #28
 8002e84:	609a      	str	r2, [r3, #8]
 8002e86:	e00a      	b.n	8002e9e <incrementTime+0x13e>
				}
			}
		} else if(clock.thiryMonth == TRUE) {
 8002e88:	4b1c      	ldr	r3, [pc, #112]	@ (8002efc <incrementTime+0x19c>)
 8002e8a:	7f5b      	ldrb	r3, [r3, #29]
 8002e8c:	2b01      	cmp	r3, #1
 8002e8e:	d106      	bne.n	8002e9e <incrementTime+0x13e>
			if(clock.date > 30) {
 8002e90:	4b1a      	ldr	r3, [pc, #104]	@ (8002efc <incrementTime+0x19c>)
 8002e92:	689b      	ldr	r3, [r3, #8]
 8002e94:	2b1e      	cmp	r3, #30
 8002e96:	dd02      	ble.n	8002e9e <incrementTime+0x13e>
				clock.date = 30;
 8002e98:	4b18      	ldr	r3, [pc, #96]	@ (8002efc <incrementTime+0x19c>)
 8002e9a:	221e      	movs	r2, #30
 8002e9c:	609a      	str	r2, [r3, #8]
			}
		}
		if(clock.month > 12) {
 8002e9e:	4b17      	ldr	r3, [pc, #92]	@ (8002efc <incrementTime+0x19c>)
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	2b0c      	cmp	r3, #12
 8002ea4:	dd23      	ble.n	8002eee <incrementTime+0x18e>
			clock.month = 1;
 8002ea6:	4b15      	ldr	r3, [pc, #84]	@ (8002efc <incrementTime+0x19c>)
 8002ea8:	2201      	movs	r2, #1
 8002eaa:	605a      	str	r2, [r3, #4]
		}
		break;
 8002eac:	e01f      	b.n	8002eee <incrementTime+0x18e>
	case YEAR:
		clock.year++;
 8002eae:	4b13      	ldr	r3, [pc, #76]	@ (8002efc <incrementTime+0x19c>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	3301      	adds	r3, #1
 8002eb4:	4a11      	ldr	r2, [pc, #68]	@ (8002efc <incrementTime+0x19c>)
 8002eb6:	6013      	str	r3, [r2, #0]
		clock.leapYear = leapYearCalculator(clock.year);
 8002eb8:	4b10      	ldr	r3, [pc, #64]	@ (8002efc <incrementTime+0x19c>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	f7ff fd31 	bl	8002924 <leapYearCalculator>
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	b2da      	uxtb	r2, r3
 8002ec6:	4b0d      	ldr	r3, [pc, #52]	@ (8002efc <incrementTime+0x19c>)
 8002ec8:	771a      	strb	r2, [r3, #28]
		if(clock.leapYear == FALSE) {
 8002eca:	4b0c      	ldr	r3, [pc, #48]	@ (8002efc <incrementTime+0x19c>)
 8002ecc:	7f1b      	ldrb	r3, [r3, #28]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d10f      	bne.n	8002ef2 <incrementTime+0x192>
			if(clock.month == 2 && clock.date > 28) {
 8002ed2:	4b0a      	ldr	r3, [pc, #40]	@ (8002efc <incrementTime+0x19c>)
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	2b02      	cmp	r3, #2
 8002ed8:	d10b      	bne.n	8002ef2 <incrementTime+0x192>
 8002eda:	4b08      	ldr	r3, [pc, #32]	@ (8002efc <incrementTime+0x19c>)
 8002edc:	689b      	ldr	r3, [r3, #8]
 8002ede:	2b1c      	cmp	r3, #28
 8002ee0:	dd07      	ble.n	8002ef2 <incrementTime+0x192>
				clock.date = 28;
 8002ee2:	4b06      	ldr	r3, [pc, #24]	@ (8002efc <incrementTime+0x19c>)
 8002ee4:	221c      	movs	r2, #28
 8002ee6:	609a      	str	r2, [r3, #8]
			}
		}
		break;
 8002ee8:	e003      	b.n	8002ef2 <incrementTime+0x192>
		break;
 8002eea:	bf00      	nop
 8002eec:	e002      	b.n	8002ef4 <incrementTime+0x194>
		break;
 8002eee:	bf00      	nop
 8002ef0:	e000      	b.n	8002ef4 <incrementTime+0x194>
		break;
 8002ef2:	bf00      	nop
	}
}
 8002ef4:	bf00      	nop
 8002ef6:	bd80      	pop	{r7, pc}
 8002ef8:	200001d6 	.word	0x200001d6
 8002efc:	2000006c 	.word	0x2000006c

08002f00 <decrementTime>:

void decrementTime() {	// 버튼 4번동작 (시간 감소)
 8002f00:	b580      	push	{r7, lr}
 8002f02:	af00      	add	r7, sp, #0
	switch(clockSet) {
 8002f04:	4b68      	ldr	r3, [pc, #416]	@ (80030a8 <decrementTime+0x1a8>)
 8002f06:	781b      	ldrb	r3, [r3, #0]
 8002f08:	2b05      	cmp	r3, #5
 8002f0a:	f200 80ca 	bhi.w	80030a2 <decrementTime+0x1a2>
 8002f0e:	a201      	add	r2, pc, #4	@ (adr r2, 8002f14 <decrementTime+0x14>)
 8002f10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f14:	08002f2d 	.word	0x08002f2d
 8002f18:	08002f3b 	.word	0x08002f3b
 8002f1c:	08002f57 	.word	0x08002f57
 8002f20:	08002f73 	.word	0x08002f73
 8002f24:	08002fdf 	.word	0x08002fdf
 8002f28:	08003051 	.word	0x08003051
	case SECOND:
		clock.second = 0;
 8002f2c:	4b5f      	ldr	r3, [pc, #380]	@ (80030ac <decrementTime+0x1ac>)
 8002f2e:	2200      	movs	r2, #0
 8002f30:	615a      	str	r2, [r3, #20]
		clock.millisecond = 0;
 8002f32:	4b5e      	ldr	r3, [pc, #376]	@ (80030ac <decrementTime+0x1ac>)
 8002f34:	2200      	movs	r2, #0
 8002f36:	619a      	str	r2, [r3, #24]
		break;
 8002f38:	e0b3      	b.n	80030a2 <decrementTime+0x1a2>
	case MINUTE:
		if(clock.minute == 0) {
 8002f3a:	4b5c      	ldr	r3, [pc, #368]	@ (80030ac <decrementTime+0x1ac>)
 8002f3c:	691b      	ldr	r3, [r3, #16]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d103      	bne.n	8002f4a <decrementTime+0x4a>
			clock.minute = 59;
 8002f42:	4b5a      	ldr	r3, [pc, #360]	@ (80030ac <decrementTime+0x1ac>)
 8002f44:	223b      	movs	r2, #59	@ 0x3b
 8002f46:	611a      	str	r2, [r3, #16]
		} else {
			clock.minute--;
		}
		break;
 8002f48:	e0ab      	b.n	80030a2 <decrementTime+0x1a2>
			clock.minute--;
 8002f4a:	4b58      	ldr	r3, [pc, #352]	@ (80030ac <decrementTime+0x1ac>)
 8002f4c:	691b      	ldr	r3, [r3, #16]
 8002f4e:	3b01      	subs	r3, #1
 8002f50:	4a56      	ldr	r2, [pc, #344]	@ (80030ac <decrementTime+0x1ac>)
 8002f52:	6113      	str	r3, [r2, #16]
		break;
 8002f54:	e0a5      	b.n	80030a2 <decrementTime+0x1a2>
	case HOUR:
		if(clock.hour == 0) {
 8002f56:	4b55      	ldr	r3, [pc, #340]	@ (80030ac <decrementTime+0x1ac>)
 8002f58:	68db      	ldr	r3, [r3, #12]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d103      	bne.n	8002f66 <decrementTime+0x66>
			clock.hour = 23;
 8002f5e:	4b53      	ldr	r3, [pc, #332]	@ (80030ac <decrementTime+0x1ac>)
 8002f60:	2217      	movs	r2, #23
 8002f62:	60da      	str	r2, [r3, #12]
		} else {
			clock.hour--;
		}
		break;
 8002f64:	e09d      	b.n	80030a2 <decrementTime+0x1a2>
			clock.hour--;
 8002f66:	4b51      	ldr	r3, [pc, #324]	@ (80030ac <decrementTime+0x1ac>)
 8002f68:	68db      	ldr	r3, [r3, #12]
 8002f6a:	3b01      	subs	r3, #1
 8002f6c:	4a4f      	ldr	r2, [pc, #316]	@ (80030ac <decrementTime+0x1ac>)
 8002f6e:	60d3      	str	r3, [r2, #12]
		break;
 8002f70:	e097      	b.n	80030a2 <decrementTime+0x1a2>
	case DATE:
		clock.date--;
 8002f72:	4b4e      	ldr	r3, [pc, #312]	@ (80030ac <decrementTime+0x1ac>)
 8002f74:	689b      	ldr	r3, [r3, #8]
 8002f76:	3b01      	subs	r3, #1
 8002f78:	4a4c      	ldr	r2, [pc, #304]	@ (80030ac <decrementTime+0x1ac>)
 8002f7a:	6093      	str	r3, [r2, #8]
		if(clock.month == 2) {
 8002f7c:	4b4b      	ldr	r3, [pc, #300]	@ (80030ac <decrementTime+0x1ac>)
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	2b02      	cmp	r3, #2
 8002f82:	d114      	bne.n	8002fae <decrementTime+0xae>
			if(clock.leapYear == TRUE) {
 8002f84:	4b49      	ldr	r3, [pc, #292]	@ (80030ac <decrementTime+0x1ac>)
 8002f86:	7f1b      	ldrb	r3, [r3, #28]
 8002f88:	2b01      	cmp	r3, #1
 8002f8a:	d108      	bne.n	8002f9e <decrementTime+0x9e>
				if(clock.date < 1) {
 8002f8c:	4b47      	ldr	r3, [pc, #284]	@ (80030ac <decrementTime+0x1ac>)
 8002f8e:	689b      	ldr	r3, [r3, #8]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	f300 8081 	bgt.w	8003098 <decrementTime+0x198>
					clock.date = 29;
 8002f96:	4b45      	ldr	r3, [pc, #276]	@ (80030ac <decrementTime+0x1ac>)
 8002f98:	221d      	movs	r2, #29
 8002f9a:	609a      	str	r2, [r3, #8]
		} else if(clock.thiryMonth == FALSE) { // 말일이 31일인 달 1, 3, 5, 7, 8, 10, 12
			if(clock.date < 1) {
				clock.date = 31;
			}
		}
		break;
 8002f9c:	e07c      	b.n	8003098 <decrementTime+0x198>
				if(clock.date < 1) {
 8002f9e:	4b43      	ldr	r3, [pc, #268]	@ (80030ac <decrementTime+0x1ac>)
 8002fa0:	689b      	ldr	r3, [r3, #8]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	dc78      	bgt.n	8003098 <decrementTime+0x198>
					clock.date = 28;
 8002fa6:	4b41      	ldr	r3, [pc, #260]	@ (80030ac <decrementTime+0x1ac>)
 8002fa8:	221c      	movs	r2, #28
 8002faa:	609a      	str	r2, [r3, #8]
		break;
 8002fac:	e074      	b.n	8003098 <decrementTime+0x198>
		} else if(clock.thiryMonth == TRUE) { // 말일이 30일인 달 4, 6, 9, 11
 8002fae:	4b3f      	ldr	r3, [pc, #252]	@ (80030ac <decrementTime+0x1ac>)
 8002fb0:	7f5b      	ldrb	r3, [r3, #29]
 8002fb2:	2b01      	cmp	r3, #1
 8002fb4:	d107      	bne.n	8002fc6 <decrementTime+0xc6>
			if(clock.date < 1) {
 8002fb6:	4b3d      	ldr	r3, [pc, #244]	@ (80030ac <decrementTime+0x1ac>)
 8002fb8:	689b      	ldr	r3, [r3, #8]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	dc6c      	bgt.n	8003098 <decrementTime+0x198>
				clock.date = 30;
 8002fbe:	4b3b      	ldr	r3, [pc, #236]	@ (80030ac <decrementTime+0x1ac>)
 8002fc0:	221e      	movs	r2, #30
 8002fc2:	609a      	str	r2, [r3, #8]
		break;
 8002fc4:	e068      	b.n	8003098 <decrementTime+0x198>
		} else if(clock.thiryMonth == FALSE) { // 말일이 31일인 달 1, 3, 5, 7, 8, 10, 12
 8002fc6:	4b39      	ldr	r3, [pc, #228]	@ (80030ac <decrementTime+0x1ac>)
 8002fc8:	7f5b      	ldrb	r3, [r3, #29]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d164      	bne.n	8003098 <decrementTime+0x198>
			if(clock.date < 1) {
 8002fce:	4b37      	ldr	r3, [pc, #220]	@ (80030ac <decrementTime+0x1ac>)
 8002fd0:	689b      	ldr	r3, [r3, #8]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	dc60      	bgt.n	8003098 <decrementTime+0x198>
				clock.date = 31;
 8002fd6:	4b35      	ldr	r3, [pc, #212]	@ (80030ac <decrementTime+0x1ac>)
 8002fd8:	221f      	movs	r2, #31
 8002fda:	609a      	str	r2, [r3, #8]
		break;
 8002fdc:	e05c      	b.n	8003098 <decrementTime+0x198>
	case MONTH:
		clock.month--;
 8002fde:	4b33      	ldr	r3, [pc, #204]	@ (80030ac <decrementTime+0x1ac>)
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	3b01      	subs	r3, #1
 8002fe4:	4a31      	ldr	r2, [pc, #196]	@ (80030ac <decrementTime+0x1ac>)
 8002fe6:	6053      	str	r3, [r2, #4]
		clock.thiryMonth = isThirtyDays(clock.month);
 8002fe8:	4b30      	ldr	r3, [pc, #192]	@ (80030ac <decrementTime+0x1ac>)
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	4618      	mov	r0, r3
 8002fee:	f7ff fccd 	bl	800298c <isThirtyDays>
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	b2da      	uxtb	r2, r3
 8002ff6:	4b2d      	ldr	r3, [pc, #180]	@ (80030ac <decrementTime+0x1ac>)
 8002ff8:	775a      	strb	r2, [r3, #29]
		if(clock.month == 2) {
 8002ffa:	4b2c      	ldr	r3, [pc, #176]	@ (80030ac <decrementTime+0x1ac>)
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	2b02      	cmp	r3, #2
 8003000:	d113      	bne.n	800302a <decrementTime+0x12a>
			if(clock.leapYear == TRUE) {
 8003002:	4b2a      	ldr	r3, [pc, #168]	@ (80030ac <decrementTime+0x1ac>)
 8003004:	7f1b      	ldrb	r3, [r3, #28]
 8003006:	2b01      	cmp	r3, #1
 8003008:	d107      	bne.n	800301a <decrementTime+0x11a>
				if(clock.date > 29) {
 800300a:	4b28      	ldr	r3, [pc, #160]	@ (80030ac <decrementTime+0x1ac>)
 800300c:	689b      	ldr	r3, [r3, #8]
 800300e:	2b1d      	cmp	r3, #29
 8003010:	dd16      	ble.n	8003040 <decrementTime+0x140>
					clock.date = 29;
 8003012:	4b26      	ldr	r3, [pc, #152]	@ (80030ac <decrementTime+0x1ac>)
 8003014:	221d      	movs	r2, #29
 8003016:	609a      	str	r2, [r3, #8]
 8003018:	e012      	b.n	8003040 <decrementTime+0x140>
				}
			} else {
				if(clock.date > 28) {
 800301a:	4b24      	ldr	r3, [pc, #144]	@ (80030ac <decrementTime+0x1ac>)
 800301c:	689b      	ldr	r3, [r3, #8]
 800301e:	2b1c      	cmp	r3, #28
 8003020:	dd0e      	ble.n	8003040 <decrementTime+0x140>
					clock.date = 28;
 8003022:	4b22      	ldr	r3, [pc, #136]	@ (80030ac <decrementTime+0x1ac>)
 8003024:	221c      	movs	r2, #28
 8003026:	609a      	str	r2, [r3, #8]
 8003028:	e00a      	b.n	8003040 <decrementTime+0x140>
				}
			}
		} else if(clock.thiryMonth == TRUE) {
 800302a:	4b20      	ldr	r3, [pc, #128]	@ (80030ac <decrementTime+0x1ac>)
 800302c:	7f5b      	ldrb	r3, [r3, #29]
 800302e:	2b01      	cmp	r3, #1
 8003030:	d106      	bne.n	8003040 <decrementTime+0x140>
			if(clock.date > 30) {
 8003032:	4b1e      	ldr	r3, [pc, #120]	@ (80030ac <decrementTime+0x1ac>)
 8003034:	689b      	ldr	r3, [r3, #8]
 8003036:	2b1e      	cmp	r3, #30
 8003038:	dd02      	ble.n	8003040 <decrementTime+0x140>
				clock.date = 30;
 800303a:	4b1c      	ldr	r3, [pc, #112]	@ (80030ac <decrementTime+0x1ac>)
 800303c:	221e      	movs	r2, #30
 800303e:	609a      	str	r2, [r3, #8]
			}
		}
		if(clock.month < 1) {
 8003040:	4b1a      	ldr	r3, [pc, #104]	@ (80030ac <decrementTime+0x1ac>)
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	2b00      	cmp	r3, #0
 8003046:	dc29      	bgt.n	800309c <decrementTime+0x19c>
			clock.month = 12;
 8003048:	4b18      	ldr	r3, [pc, #96]	@ (80030ac <decrementTime+0x1ac>)
 800304a:	220c      	movs	r2, #12
 800304c:	605a      	str	r2, [r3, #4]
		}
		break;
 800304e:	e025      	b.n	800309c <decrementTime+0x19c>
	case YEAR:
		if(clock.year > 1900) {
 8003050:	4b16      	ldr	r3, [pc, #88]	@ (80030ac <decrementTime+0x1ac>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f240 726c 	movw	r2, #1900	@ 0x76c
 8003058:	4293      	cmp	r3, r2
 800305a:	dd04      	ble.n	8003066 <decrementTime+0x166>
			clock.year--;
 800305c:	4b13      	ldr	r3, [pc, #76]	@ (80030ac <decrementTime+0x1ac>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	3b01      	subs	r3, #1
 8003062:	4a12      	ldr	r2, [pc, #72]	@ (80030ac <decrementTime+0x1ac>)
 8003064:	6013      	str	r3, [r2, #0]
		}
		clock.leapYear = leapYearCalculator(clock.year);
 8003066:	4b11      	ldr	r3, [pc, #68]	@ (80030ac <decrementTime+0x1ac>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4618      	mov	r0, r3
 800306c:	f7ff fc5a 	bl	8002924 <leapYearCalculator>
 8003070:	4603      	mov	r3, r0
 8003072:	b2da      	uxtb	r2, r3
 8003074:	4b0d      	ldr	r3, [pc, #52]	@ (80030ac <decrementTime+0x1ac>)
 8003076:	771a      	strb	r2, [r3, #28]
		if(clock.leapYear == FALSE) {
 8003078:	4b0c      	ldr	r3, [pc, #48]	@ (80030ac <decrementTime+0x1ac>)
 800307a:	7f1b      	ldrb	r3, [r3, #28]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d10f      	bne.n	80030a0 <decrementTime+0x1a0>
			if(clock.month == 2 && clock.date > 28) {
 8003080:	4b0a      	ldr	r3, [pc, #40]	@ (80030ac <decrementTime+0x1ac>)
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	2b02      	cmp	r3, #2
 8003086:	d10b      	bne.n	80030a0 <decrementTime+0x1a0>
 8003088:	4b08      	ldr	r3, [pc, #32]	@ (80030ac <decrementTime+0x1ac>)
 800308a:	689b      	ldr	r3, [r3, #8]
 800308c:	2b1c      	cmp	r3, #28
 800308e:	dd07      	ble.n	80030a0 <decrementTime+0x1a0>
				clock.date = 28;
 8003090:	4b06      	ldr	r3, [pc, #24]	@ (80030ac <decrementTime+0x1ac>)
 8003092:	221c      	movs	r2, #28
 8003094:	609a      	str	r2, [r3, #8]
			}
		}
		break;
 8003096:	e003      	b.n	80030a0 <decrementTime+0x1a0>
		break;
 8003098:	bf00      	nop
 800309a:	e002      	b.n	80030a2 <decrementTime+0x1a2>
		break;
 800309c:	bf00      	nop
 800309e:	e000      	b.n	80030a2 <decrementTime+0x1a2>
		break;
 80030a0:	bf00      	nop
	}

}
 80030a2:	bf00      	nop
 80030a4:	bd80      	pop	{r7, pc}
 80030a6:	bf00      	nop
 80030a8:	200001d6 	.word	0x200001d6
 80030ac:	2000006c 	.word	0x2000006c

080030b0 <getTimeFormet>:

uint8_t getTimeFormet() {
 80030b0:	b480      	push	{r7}
 80030b2:	af00      	add	r7, sp, #0
	return clock.timeFormet;
 80030b4:	4b03      	ldr	r3, [pc, #12]	@ (80030c4 <getTimeFormet+0x14>)
 80030b6:	7f9b      	ldrb	r3, [r3, #30]
}
 80030b8:	4618      	mov	r0, r3
 80030ba:	46bd      	mov	sp, r7
 80030bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c0:	4770      	bx	lr
 80030c2:	bf00      	nop
 80030c4:	2000006c 	.word	0x2000006c

080030c8 <setTimeFormet>:

void setTimeFormet(int onOff) {
 80030c8:	b480      	push	{r7}
 80030ca:	b083      	sub	sp, #12
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
	clock.timeFormet = onOff;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	b2da      	uxtb	r2, r3
 80030d4:	4b03      	ldr	r3, [pc, #12]	@ (80030e4 <setTimeFormet+0x1c>)
 80030d6:	779a      	strb	r2, [r3, #30]
}
 80030d8:	bf00      	nop
 80030da:	370c      	adds	r7, #12
 80030dc:	46bd      	mov	sp, r7
 80030de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e2:	4770      	bx	lr
 80030e4:	2000006c 	.word	0x2000006c

080030e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80030ec:	f001 fe6c 	bl	8004dc8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80030f0:	f000 f86a 	bl	80031c8 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  clock.leapYear = leapYearCalculator(Y);// 시스템 시작 시 초기 설정된 년이 윤년인지 확인
 80030f4:	f44f 60fd 	mov.w	r0, #2024	@ 0x7e8
 80030f8:	f7ff fc14 	bl	8002924 <leapYearCalculator>
 80030fc:	4603      	mov	r3, r0
 80030fe:	b2da      	uxtb	r2, r3
 8003100:	4b2a      	ldr	r3, [pc, #168]	@ (80031ac <main+0xc4>)
 8003102:	771a      	strb	r2, [r3, #28]
  clock.thiryMonth = isThirtyDays(M); 	// 시스템 시작 시 초기 설정된 달을 넣어서 말일이 30일인지 아닌지 확인
 8003104:	2002      	movs	r0, #2
 8003106:	f7ff fc41 	bl	800298c <isThirtyDays>
 800310a:	4603      	mov	r3, r0
 800310c:	b2da      	uxtb	r2, r3
 800310e:	4b27      	ldr	r3, [pc, #156]	@ (80031ac <main+0xc4>)
 8003110:	775a      	strb	r2, [r3, #29]
  CLCD_GPIO_Init();
 8003112:	f7fd feed 	bl	8000ef0 <CLCD_GPIO_Init>
  CLCD_Init();
 8003116:	f7fe f914 	bl	8001342 <CLCD_Init>
  _7SEG_GPIO_Init();
 800311a:	f7fd fa21 	bl	8000560 <_7SEG_GPIO_Init>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800311e:	f000 f9b7 	bl	8003490 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8003122:	f000 f98b 	bl	800343c <MX_USART3_UART_Init>
  MX_TIM6_Init();
 8003126:	f000 f953 	bl	80033d0 <MX_TIM6_Init>
  MX_TIM2_Init();
 800312a:	f000 f8db 	bl	80032e4 <MX_TIM2_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 800312e:	f000 f8b5 	bl	800329c <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  // UART call
  HAL_UART_Receive_IT(&huart3, &uartRxfd.uart3_rx_data, sizeof(uartRxfd.uart3_rx_data));
 8003132:	2201      	movs	r2, #1
 8003134:	491e      	ldr	r1, [pc, #120]	@ (80031b0 <main+0xc8>)
 8003136:	481f      	ldr	r0, [pc, #124]	@ (80031b4 <main+0xcc>)
 8003138:	f004 f808 	bl	800714c <HAL_UART_Receive_IT>
  HAL_TIM_Base_Start_IT(&htim6);
 800313c:	481e      	ldr	r0, [pc, #120]	@ (80031b8 <main+0xd0>)
 800313e:	f002 ff65 	bl	800600c <HAL_TIM_Base_Start_IT>

  TIM2 -> CCR1 = TIM2 -> ARR / 2;
 8003142:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8003146:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003148:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800314c:	085b      	lsrs	r3, r3, #1
 800314e:	6353      	str	r3, [r2, #52]	@ 0x34

  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, 1);
 8003150:	2201      	movs	r2, #1
 8003152:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003156:	4819      	ldr	r0, [pc, #100]	@ (80031bc <main+0xd4>)
 8003158:	f002 fa24 	bl	80055a4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);
 800315c:	2201      	movs	r2, #1
 800315e:	2140      	movs	r1, #64	@ 0x40
 8003160:	4817      	ldr	r0, [pc, #92]	@ (80031c0 <main+0xd8>)
 8003162:	f002 fa1f 	bl	80055a4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, 1);
 8003166:	2201      	movs	r2, #1
 8003168:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800316c:	4813      	ldr	r0, [pc, #76]	@ (80031bc <main+0xd4>)
 800316e:	f002 fa19 	bl	80055a4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 1);
 8003172:	2201      	movs	r2, #1
 8003174:	2120      	movs	r1, #32
 8003176:	4813      	ldr	r0, [pc, #76]	@ (80031c4 <main+0xdc>)
 8003178:	f002 fa14 	bl	80055a4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, 1);
 800317c:	2201      	movs	r2, #1
 800317e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003182:	480e      	ldr	r0, [pc, #56]	@ (80031bc <main+0xd4>)
 8003184:	f002 fa0e 	bl	80055a4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 1);
 8003188:	2201      	movs	r2, #1
 800318a:	2101      	movs	r1, #1
 800318c:	480d      	ldr	r0, [pc, #52]	@ (80031c4 <main+0xdc>)
 800318e:	f002 fa09 	bl	80055a4 <HAL_GPIO_WritePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  running();
 8003192:	f000 feab 	bl	8003eec <running>
	  sw1Controll();
 8003196:	f000 fee1 	bl	8003f5c <sw1Controll>
	  sw2Controll();
 800319a:	f000 ff45 	bl	8004028 <sw2Controll>
	  sw3Controll();
 800319e:	f001 f87f 	bl	80042a0 <sw3Controll>
	  sw4Controll();
 80031a2:	f001 f9e9 	bl	8004578 <sw4Controll>
	  running();
 80031a6:	bf00      	nop
 80031a8:	e7f3      	b.n	8003192 <main+0xaa>
 80031aa:	bf00      	nop
 80031ac:	2000006c 	.word	0x2000006c
 80031b0:	20000344 	.word	0x20000344
 80031b4:	20000268 	.word	0x20000268
 80031b8:	20000220 	.word	0x20000220
 80031bc:	40020c00 	.word	0x40020c00
 80031c0:	40020800 	.word	0x40020800
 80031c4:	40020400 	.word	0x40020400

080031c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b094      	sub	sp, #80	@ 0x50
 80031cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80031ce:	f107 0320 	add.w	r3, r7, #32
 80031d2:	2230      	movs	r2, #48	@ 0x30
 80031d4:	2100      	movs	r1, #0
 80031d6:	4618      	mov	r0, r3
 80031d8:	f004 fefc 	bl	8007fd4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80031dc:	f107 030c 	add.w	r3, r7, #12
 80031e0:	2200      	movs	r2, #0
 80031e2:	601a      	str	r2, [r3, #0]
 80031e4:	605a      	str	r2, [r3, #4]
 80031e6:	609a      	str	r2, [r3, #8]
 80031e8:	60da      	str	r2, [r3, #12]
 80031ea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80031ec:	2300      	movs	r3, #0
 80031ee:	60bb      	str	r3, [r7, #8]
 80031f0:	4b28      	ldr	r3, [pc, #160]	@ (8003294 <SystemClock_Config+0xcc>)
 80031f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031f4:	4a27      	ldr	r2, [pc, #156]	@ (8003294 <SystemClock_Config+0xcc>)
 80031f6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80031fa:	6413      	str	r3, [r2, #64]	@ 0x40
 80031fc:	4b25      	ldr	r3, [pc, #148]	@ (8003294 <SystemClock_Config+0xcc>)
 80031fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003200:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003204:	60bb      	str	r3, [r7, #8]
 8003206:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003208:	2300      	movs	r3, #0
 800320a:	607b      	str	r3, [r7, #4]
 800320c:	4b22      	ldr	r3, [pc, #136]	@ (8003298 <SystemClock_Config+0xd0>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a21      	ldr	r2, [pc, #132]	@ (8003298 <SystemClock_Config+0xd0>)
 8003212:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003216:	6013      	str	r3, [r2, #0]
 8003218:	4b1f      	ldr	r3, [pc, #124]	@ (8003298 <SystemClock_Config+0xd0>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003220:	607b      	str	r3, [r7, #4]
 8003222:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003224:	2301      	movs	r3, #1
 8003226:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003228:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800322c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800322e:	2302      	movs	r3, #2
 8003230:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003232:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8003236:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8003238:	2304      	movs	r3, #4
 800323a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800323c:	23a8      	movs	r3, #168	@ 0xa8
 800323e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003240:	2302      	movs	r3, #2
 8003242:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8003244:	2304      	movs	r3, #4
 8003246:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003248:	f107 0320 	add.w	r3, r7, #32
 800324c:	4618      	mov	r0, r3
 800324e:	f002 f9f5 	bl	800563c <HAL_RCC_OscConfig>
 8003252:	4603      	mov	r3, r0
 8003254:	2b00      	cmp	r3, #0
 8003256:	d001      	beq.n	800325c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8003258:	f000 faa6 	bl	80037a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800325c:	230f      	movs	r3, #15
 800325e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003260:	2302      	movs	r3, #2
 8003262:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003264:	2300      	movs	r3, #0
 8003266:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003268:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800326c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800326e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003272:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003274:	f107 030c 	add.w	r3, r7, #12
 8003278:	2105      	movs	r1, #5
 800327a:	4618      	mov	r0, r3
 800327c:	f002 fc56 	bl	8005b2c <HAL_RCC_ClockConfig>
 8003280:	4603      	mov	r3, r0
 8003282:	2b00      	cmp	r3, #0
 8003284:	d001      	beq.n	800328a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8003286:	f000 fa8f 	bl	80037a8 <Error_Handler>
  }
}
 800328a:	bf00      	nop
 800328c:	3750      	adds	r7, #80	@ 0x50
 800328e:	46bd      	mov	sp, r7
 8003290:	bd80      	pop	{r7, pc}
 8003292:	bf00      	nop
 8003294:	40023800 	.word	0x40023800
 8003298:	40007000 	.word	0x40007000

0800329c <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	af00      	add	r7, sp, #0
  /* USART3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80032a0:	2200      	movs	r2, #0
 80032a2:	2100      	movs	r1, #0
 80032a4:	2027      	movs	r0, #39	@ 0x27
 80032a6:	f001 ff00 	bl	80050aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART3_IRQn);
 80032aa:	2027      	movs	r0, #39	@ 0x27
 80032ac:	f001 ff19 	bl	80050e2 <HAL_NVIC_EnableIRQ>
  /* EXTI4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80032b0:	2200      	movs	r2, #0
 80032b2:	2100      	movs	r1, #0
 80032b4:	200a      	movs	r0, #10
 80032b6:	f001 fef8 	bl	80050aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80032ba:	200a      	movs	r0, #10
 80032bc:	f001 ff11 	bl	80050e2 <HAL_NVIC_EnableIRQ>
  /* EXTI15_10_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80032c0:	2200      	movs	r2, #0
 80032c2:	2100      	movs	r1, #0
 80032c4:	2028      	movs	r0, #40	@ 0x28
 80032c6:	f001 fef0 	bl	80050aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80032ca:	2028      	movs	r0, #40	@ 0x28
 80032cc:	f001 ff09 	bl	80050e2 <HAL_NVIC_EnableIRQ>
  /* TIM6_DAC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80032d0:	2200      	movs	r2, #0
 80032d2:	2100      	movs	r1, #0
 80032d4:	2036      	movs	r0, #54	@ 0x36
 80032d6:	f001 fee8 	bl	80050aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80032da:	2036      	movs	r0, #54	@ 0x36
 80032dc:	f001 ff01 	bl	80050e2 <HAL_NVIC_EnableIRQ>
}
 80032e0:	bf00      	nop
 80032e2:	bd80      	pop	{r7, pc}

080032e4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b08e      	sub	sp, #56	@ 0x38
 80032e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80032ea:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80032ee:	2200      	movs	r2, #0
 80032f0:	601a      	str	r2, [r3, #0]
 80032f2:	605a      	str	r2, [r3, #4]
 80032f4:	609a      	str	r2, [r3, #8]
 80032f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80032f8:	f107 0320 	add.w	r3, r7, #32
 80032fc:	2200      	movs	r2, #0
 80032fe:	601a      	str	r2, [r3, #0]
 8003300:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003302:	1d3b      	adds	r3, r7, #4
 8003304:	2200      	movs	r2, #0
 8003306:	601a      	str	r2, [r3, #0]
 8003308:	605a      	str	r2, [r3, #4]
 800330a:	609a      	str	r2, [r3, #8]
 800330c:	60da      	str	r2, [r3, #12]
 800330e:	611a      	str	r2, [r3, #16]
 8003310:	615a      	str	r2, [r3, #20]
 8003312:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003314:	4b2d      	ldr	r3, [pc, #180]	@ (80033cc <MX_TIM2_Init+0xe8>)
 8003316:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800331a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 41999;
 800331c:	4b2b      	ldr	r3, [pc, #172]	@ (80033cc <MX_TIM2_Init+0xe8>)
 800331e:	f24a 420f 	movw	r2, #41999	@ 0xa40f
 8003322:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003324:	4b29      	ldr	r3, [pc, #164]	@ (80033cc <MX_TIM2_Init+0xe8>)
 8003326:	2200      	movs	r2, #0
 8003328:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 800332a:	4b28      	ldr	r3, [pc, #160]	@ (80033cc <MX_TIM2_Init+0xe8>)
 800332c:	2209      	movs	r2, #9
 800332e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003330:	4b26      	ldr	r3, [pc, #152]	@ (80033cc <MX_TIM2_Init+0xe8>)
 8003332:	2200      	movs	r2, #0
 8003334:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003336:	4b25      	ldr	r3, [pc, #148]	@ (80033cc <MX_TIM2_Init+0xe8>)
 8003338:	2200      	movs	r2, #0
 800333a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800333c:	4823      	ldr	r0, [pc, #140]	@ (80033cc <MX_TIM2_Init+0xe8>)
 800333e:	f002 fe15 	bl	8005f6c <HAL_TIM_Base_Init>
 8003342:	4603      	mov	r3, r0
 8003344:	2b00      	cmp	r3, #0
 8003346:	d001      	beq.n	800334c <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8003348:	f000 fa2e 	bl	80037a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800334c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003350:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003352:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003356:	4619      	mov	r1, r3
 8003358:	481c      	ldr	r0, [pc, #112]	@ (80033cc <MX_TIM2_Init+0xe8>)
 800335a:	f003 fa0b 	bl	8006774 <HAL_TIM_ConfigClockSource>
 800335e:	4603      	mov	r3, r0
 8003360:	2b00      	cmp	r3, #0
 8003362:	d001      	beq.n	8003368 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8003364:	f000 fa20 	bl	80037a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8003368:	4818      	ldr	r0, [pc, #96]	@ (80033cc <MX_TIM2_Init+0xe8>)
 800336a:	f002 febf 	bl	80060ec <HAL_TIM_PWM_Init>
 800336e:	4603      	mov	r3, r0
 8003370:	2b00      	cmp	r3, #0
 8003372:	d001      	beq.n	8003378 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8003374:	f000 fa18 	bl	80037a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003378:	2300      	movs	r3, #0
 800337a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800337c:	2300      	movs	r3, #0
 800337e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003380:	f107 0320 	add.w	r3, r7, #32
 8003384:	4619      	mov	r1, r3
 8003386:	4811      	ldr	r0, [pc, #68]	@ (80033cc <MX_TIM2_Init+0xe8>)
 8003388:	f003 fe00 	bl	8006f8c <HAL_TIMEx_MasterConfigSynchronization>
 800338c:	4603      	mov	r3, r0
 800338e:	2b00      	cmp	r3, #0
 8003390:	d001      	beq.n	8003396 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8003392:	f000 fa09 	bl	80037a8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003396:	2360      	movs	r3, #96	@ 0x60
 8003398:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800339a:	2300      	movs	r3, #0
 800339c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800339e:	2300      	movs	r3, #0
 80033a0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80033a2:	2300      	movs	r3, #0
 80033a4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80033a6:	1d3b      	adds	r3, r7, #4
 80033a8:	2200      	movs	r2, #0
 80033aa:	4619      	mov	r1, r3
 80033ac:	4807      	ldr	r0, [pc, #28]	@ (80033cc <MX_TIM2_Init+0xe8>)
 80033ae:	f003 f91f 	bl	80065f0 <HAL_TIM_PWM_ConfigChannel>
 80033b2:	4603      	mov	r3, r0
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d001      	beq.n	80033bc <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80033b8:	f000 f9f6 	bl	80037a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80033bc:	4803      	ldr	r0, [pc, #12]	@ (80033cc <MX_TIM2_Init+0xe8>)
 80033be:	f000 fa57 	bl	8003870 <HAL_TIM_MspPostInit>

}
 80033c2:	bf00      	nop
 80033c4:	3738      	adds	r7, #56	@ 0x38
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bd80      	pop	{r7, pc}
 80033ca:	bf00      	nop
 80033cc:	200001d8 	.word	0x200001d8

080033d0 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b082      	sub	sp, #8
 80033d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80033d6:	463b      	mov	r3, r7
 80033d8:	2200      	movs	r2, #0
 80033da:	601a      	str	r2, [r3, #0]
 80033dc:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80033de:	4b15      	ldr	r3, [pc, #84]	@ (8003434 <MX_TIM6_Init+0x64>)
 80033e0:	4a15      	ldr	r2, [pc, #84]	@ (8003438 <MX_TIM6_Init+0x68>)
 80033e2:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 99;
 80033e4:	4b13      	ldr	r3, [pc, #76]	@ (8003434 <MX_TIM6_Init+0x64>)
 80033e6:	2263      	movs	r2, #99	@ 0x63
 80033e8:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80033ea:	4b12      	ldr	r3, [pc, #72]	@ (8003434 <MX_TIM6_Init+0x64>)
 80033ec:	2200      	movs	r2, #0
 80033ee:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 839;
 80033f0:	4b10      	ldr	r3, [pc, #64]	@ (8003434 <MX_TIM6_Init+0x64>)
 80033f2:	f240 3247 	movw	r2, #839	@ 0x347
 80033f6:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80033f8:	4b0e      	ldr	r3, [pc, #56]	@ (8003434 <MX_TIM6_Init+0x64>)
 80033fa:	2280      	movs	r2, #128	@ 0x80
 80033fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80033fe:	480d      	ldr	r0, [pc, #52]	@ (8003434 <MX_TIM6_Init+0x64>)
 8003400:	f002 fdb4 	bl	8005f6c <HAL_TIM_Base_Init>
 8003404:	4603      	mov	r3, r0
 8003406:	2b00      	cmp	r3, #0
 8003408:	d001      	beq.n	800340e <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 800340a:	f000 f9cd 	bl	80037a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800340e:	2300      	movs	r3, #0
 8003410:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003412:	2300      	movs	r3, #0
 8003414:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8003416:	463b      	mov	r3, r7
 8003418:	4619      	mov	r1, r3
 800341a:	4806      	ldr	r0, [pc, #24]	@ (8003434 <MX_TIM6_Init+0x64>)
 800341c:	f003 fdb6 	bl	8006f8c <HAL_TIMEx_MasterConfigSynchronization>
 8003420:	4603      	mov	r3, r0
 8003422:	2b00      	cmp	r3, #0
 8003424:	d001      	beq.n	800342a <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8003426:	f000 f9bf 	bl	80037a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800342a:	bf00      	nop
 800342c:	3708      	adds	r7, #8
 800342e:	46bd      	mov	sp, r7
 8003430:	bd80      	pop	{r7, pc}
 8003432:	bf00      	nop
 8003434:	20000220 	.word	0x20000220
 8003438:	40001000 	.word	0x40001000

0800343c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003440:	4b11      	ldr	r3, [pc, #68]	@ (8003488 <MX_USART3_UART_Init+0x4c>)
 8003442:	4a12      	ldr	r2, [pc, #72]	@ (800348c <MX_USART3_UART_Init+0x50>)
 8003444:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8003446:	4b10      	ldr	r3, [pc, #64]	@ (8003488 <MX_USART3_UART_Init+0x4c>)
 8003448:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800344c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800344e:	4b0e      	ldr	r3, [pc, #56]	@ (8003488 <MX_USART3_UART_Init+0x4c>)
 8003450:	2200      	movs	r2, #0
 8003452:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003454:	4b0c      	ldr	r3, [pc, #48]	@ (8003488 <MX_USART3_UART_Init+0x4c>)
 8003456:	2200      	movs	r2, #0
 8003458:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800345a:	4b0b      	ldr	r3, [pc, #44]	@ (8003488 <MX_USART3_UART_Init+0x4c>)
 800345c:	2200      	movs	r2, #0
 800345e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003460:	4b09      	ldr	r3, [pc, #36]	@ (8003488 <MX_USART3_UART_Init+0x4c>)
 8003462:	220c      	movs	r2, #12
 8003464:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003466:	4b08      	ldr	r3, [pc, #32]	@ (8003488 <MX_USART3_UART_Init+0x4c>)
 8003468:	2200      	movs	r2, #0
 800346a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800346c:	4b06      	ldr	r3, [pc, #24]	@ (8003488 <MX_USART3_UART_Init+0x4c>)
 800346e:	2200      	movs	r2, #0
 8003470:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003472:	4805      	ldr	r0, [pc, #20]	@ (8003488 <MX_USART3_UART_Init+0x4c>)
 8003474:	f003 fe1a 	bl	80070ac <HAL_UART_Init>
 8003478:	4603      	mov	r3, r0
 800347a:	2b00      	cmp	r3, #0
 800347c:	d001      	beq.n	8003482 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800347e:	f000 f993 	bl	80037a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8003482:	bf00      	nop
 8003484:	bd80      	pop	{r7, pc}
 8003486:	bf00      	nop
 8003488:	20000268 	.word	0x20000268
 800348c:	40004800 	.word	0x40004800

08003490 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b08c      	sub	sp, #48	@ 0x30
 8003494:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003496:	f107 031c 	add.w	r3, r7, #28
 800349a:	2200      	movs	r2, #0
 800349c:	601a      	str	r2, [r3, #0]
 800349e:	605a      	str	r2, [r3, #4]
 80034a0:	609a      	str	r2, [r3, #8]
 80034a2:	60da      	str	r2, [r3, #12]
 80034a4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80034a6:	2300      	movs	r3, #0
 80034a8:	61bb      	str	r3, [r7, #24]
 80034aa:	4b61      	ldr	r3, [pc, #388]	@ (8003630 <MX_GPIO_Init+0x1a0>)
 80034ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034ae:	4a60      	ldr	r2, [pc, #384]	@ (8003630 <MX_GPIO_Init+0x1a0>)
 80034b0:	f043 0310 	orr.w	r3, r3, #16
 80034b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80034b6:	4b5e      	ldr	r3, [pc, #376]	@ (8003630 <MX_GPIO_Init+0x1a0>)
 80034b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034ba:	f003 0310 	and.w	r3, r3, #16
 80034be:	61bb      	str	r3, [r7, #24]
 80034c0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80034c2:	2300      	movs	r3, #0
 80034c4:	617b      	str	r3, [r7, #20]
 80034c6:	4b5a      	ldr	r3, [pc, #360]	@ (8003630 <MX_GPIO_Init+0x1a0>)
 80034c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034ca:	4a59      	ldr	r2, [pc, #356]	@ (8003630 <MX_GPIO_Init+0x1a0>)
 80034cc:	f043 0304 	orr.w	r3, r3, #4
 80034d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80034d2:	4b57      	ldr	r3, [pc, #348]	@ (8003630 <MX_GPIO_Init+0x1a0>)
 80034d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034d6:	f003 0304 	and.w	r3, r3, #4
 80034da:	617b      	str	r3, [r7, #20]
 80034dc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80034de:	2300      	movs	r3, #0
 80034e0:	613b      	str	r3, [r7, #16]
 80034e2:	4b53      	ldr	r3, [pc, #332]	@ (8003630 <MX_GPIO_Init+0x1a0>)
 80034e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034e6:	4a52      	ldr	r2, [pc, #328]	@ (8003630 <MX_GPIO_Init+0x1a0>)
 80034e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80034ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80034ee:	4b50      	ldr	r3, [pc, #320]	@ (8003630 <MX_GPIO_Init+0x1a0>)
 80034f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034f6:	613b      	str	r3, [r7, #16]
 80034f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80034fa:	2300      	movs	r3, #0
 80034fc:	60fb      	str	r3, [r7, #12]
 80034fe:	4b4c      	ldr	r3, [pc, #304]	@ (8003630 <MX_GPIO_Init+0x1a0>)
 8003500:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003502:	4a4b      	ldr	r2, [pc, #300]	@ (8003630 <MX_GPIO_Init+0x1a0>)
 8003504:	f043 0301 	orr.w	r3, r3, #1
 8003508:	6313      	str	r3, [r2, #48]	@ 0x30
 800350a:	4b49      	ldr	r3, [pc, #292]	@ (8003630 <MX_GPIO_Init+0x1a0>)
 800350c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800350e:	f003 0301 	and.w	r3, r3, #1
 8003512:	60fb      	str	r3, [r7, #12]
 8003514:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003516:	2300      	movs	r3, #0
 8003518:	60bb      	str	r3, [r7, #8]
 800351a:	4b45      	ldr	r3, [pc, #276]	@ (8003630 <MX_GPIO_Init+0x1a0>)
 800351c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800351e:	4a44      	ldr	r2, [pc, #272]	@ (8003630 <MX_GPIO_Init+0x1a0>)
 8003520:	f043 0302 	orr.w	r3, r3, #2
 8003524:	6313      	str	r3, [r2, #48]	@ 0x30
 8003526:	4b42      	ldr	r3, [pc, #264]	@ (8003630 <MX_GPIO_Init+0x1a0>)
 8003528:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800352a:	f003 0302 	and.w	r3, r3, #2
 800352e:	60bb      	str	r3, [r7, #8]
 8003530:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003532:	2300      	movs	r3, #0
 8003534:	607b      	str	r3, [r7, #4]
 8003536:	4b3e      	ldr	r3, [pc, #248]	@ (8003630 <MX_GPIO_Init+0x1a0>)
 8003538:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800353a:	4a3d      	ldr	r2, [pc, #244]	@ (8003630 <MX_GPIO_Init+0x1a0>)
 800353c:	f043 0308 	orr.w	r3, r3, #8
 8003540:	6313      	str	r3, [r2, #48]	@ 0x30
 8003542:	4b3b      	ldr	r3, [pc, #236]	@ (8003630 <MX_GPIO_Init+0x1a0>)
 8003544:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003546:	f003 0308 	and.w	r3, r3, #8
 800354a:	607b      	str	r3, [r7, #4]
 800354c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_5, GPIO_PIN_RESET);
 800354e:	2200      	movs	r2, #0
 8003550:	2121      	movs	r1, #33	@ 0x21
 8003552:	4838      	ldr	r0, [pc, #224]	@ (8003634 <MX_GPIO_Init+0x1a4>)
 8003554:	f002 f826 	bl	80055a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 8003558:	2200      	movs	r2, #0
 800355a:	f44f 41e0 	mov.w	r1, #28672	@ 0x7000
 800355e:	4836      	ldr	r0, [pc, #216]	@ (8003638 <MX_GPIO_Init+0x1a8>)
 8003560:	f002 f820 	bl	80055a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 8003564:	2200      	movs	r2, #0
 8003566:	2140      	movs	r1, #64	@ 0x40
 8003568:	4834      	ldr	r0, [pc, #208]	@ (800363c <MX_GPIO_Init+0x1ac>)
 800356a:	f002 f81b 	bl	80055a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800356e:	2308      	movs	r3, #8
 8003570:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8003572:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8003576:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003578:	2300      	movs	r3, #0
 800357a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800357c:	f107 031c 	add.w	r3, r7, #28
 8003580:	4619      	mov	r1, r3
 8003582:	482f      	ldr	r0, [pc, #188]	@ (8003640 <MX_GPIO_Init+0x1b0>)
 8003584:	f001 fe5a 	bl	800523c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003588:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800358c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800358e:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8003592:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003594:	2300      	movs	r3, #0
 8003596:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003598:	f107 031c 	add.w	r3, r7, #28
 800359c:	4619      	mov	r1, r3
 800359e:	4827      	ldr	r0, [pc, #156]	@ (800363c <MX_GPIO_Init+0x1ac>)
 80035a0:	f001 fe4c 	bl	800523c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_5;
 80035a4:	2321      	movs	r3, #33	@ 0x21
 80035a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80035a8:	2301      	movs	r3, #1
 80035aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035ac:	2300      	movs	r3, #0
 80035ae:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035b0:	2300      	movs	r3, #0
 80035b2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035b4:	f107 031c 	add.w	r3, r7, #28
 80035b8:	4619      	mov	r1, r3
 80035ba:	481e      	ldr	r0, [pc, #120]	@ (8003634 <MX_GPIO_Init+0x1a4>)
 80035bc:	f001 fe3e 	bl	800523c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD10 PD4 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_4;
 80035c0:	f44f 6382 	mov.w	r3, #1040	@ 0x410
 80035c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80035c6:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 80035ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035cc:	2300      	movs	r3, #0
 80035ce:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80035d0:	f107 031c 	add.w	r3, r7, #28
 80035d4:	4619      	mov	r1, r3
 80035d6:	4818      	ldr	r0, [pc, #96]	@ (8003638 <MX_GPIO_Init+0x1a8>)
 80035d8:	f001 fe30 	bl	800523c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 80035dc:	f44f 43e0 	mov.w	r3, #28672	@ 0x7000
 80035e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80035e2:	2301      	movs	r3, #1
 80035e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035e6:	2300      	movs	r3, #0
 80035e8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035ea:	2300      	movs	r3, #0
 80035ec:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80035ee:	f107 031c 	add.w	r3, r7, #28
 80035f2:	4619      	mov	r1, r3
 80035f4:	4810      	ldr	r0, [pc, #64]	@ (8003638 <MX_GPIO_Init+0x1a8>)
 80035f6:	f001 fe21 	bl	800523c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80035fa:	2340      	movs	r3, #64	@ 0x40
 80035fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80035fe:	2301      	movs	r3, #1
 8003600:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003602:	2300      	movs	r3, #0
 8003604:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003606:	2300      	movs	r3, #0
 8003608:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800360a:	f107 031c 	add.w	r3, r7, #28
 800360e:	4619      	mov	r1, r3
 8003610:	480a      	ldr	r0, [pc, #40]	@ (800363c <MX_GPIO_Init+0x1ac>)
 8003612:	f001 fe13 	bl	800523c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8003616:	2200      	movs	r2, #0
 8003618:	2100      	movs	r1, #0
 800361a:	2009      	movs	r0, #9
 800361c:	f001 fd45 	bl	80050aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8003620:	2009      	movs	r0, #9
 8003622:	f001 fd5e 	bl	80050e2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003626:	bf00      	nop
 8003628:	3730      	adds	r7, #48	@ 0x30
 800362a:	46bd      	mov	sp, r7
 800362c:	bd80      	pop	{r7, pc}
 800362e:	bf00      	nop
 8003630:	40023800 	.word	0x40023800
 8003634:	40020400 	.word	0x40020400
 8003638:	40020c00 	.word	0x40020c00
 800363c:	40020800 	.word	0x40020800
 8003640:	40021000 	.word	0x40021000

08003644 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b082      	sub	sp, #8
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
  if(huart -> Instance == USART3) {
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a07      	ldr	r2, [pc, #28]	@ (8003670 <HAL_UART_RxCpltCallback+0x2c>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d107      	bne.n	8003666 <HAL_UART_RxCpltCallback+0x22>
	  HAL_UART_Receive_IT(&huart3, &uartRxfd.uart3_rx_data, sizeof(uartRxfd.uart3_rx_data));
 8003656:	2201      	movs	r2, #1
 8003658:	4906      	ldr	r1, [pc, #24]	@ (8003674 <HAL_UART_RxCpltCallback+0x30>)
 800365a:	4807      	ldr	r0, [pc, #28]	@ (8003678 <HAL_UART_RxCpltCallback+0x34>)
 800365c:	f003 fd76 	bl	800714c <HAL_UART_Receive_IT>
	  uartRxfd.uart3_rx_flag = 1;
 8003660:	4b04      	ldr	r3, [pc, #16]	@ (8003674 <HAL_UART_RxCpltCallback+0x30>)
 8003662:	2201      	movs	r2, #1
 8003664:	705a      	strb	r2, [r3, #1]
  }
}
 8003666:	bf00      	nop
 8003668:	3708      	adds	r7, #8
 800366a:	46bd      	mov	sp, r7
 800366c:	bd80      	pop	{r7, pc}
 800366e:	bf00      	nop
 8003670:	40004800 	.word	0x40004800
 8003674:	20000344 	.word	0x20000344
 8003678:	20000268 	.word	0x20000268

0800367c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b082      	sub	sp, #8
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM6) {
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a0d      	ldr	r2, [pc, #52]	@ (80036c0 <HAL_TIM_PeriodElapsedCallback+0x44>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d113      	bne.n	80036b6 <HAL_TIM_PeriodElapsedCallback+0x3a>
		systemMillisecondCount();
 800368e:	f001 fa91 	bl	8004bb4 <systemMillisecondCount>
		blinking();
 8003692:	f001 faa7 	bl	8004be4 <blinking>
		stopwatchTime(); 	// 스탑워치 시간 카운트
 8003696:	f000 fa67 	bl	8003b68 <stopwatchTime>
		holdEvent();		// presstime 측정
 800369a:	f001 f8bf 	bl	800481c <holdEvent>
		startClock(); 		// 시계모드 시간 카운트
 800369e:	f7fe ff79 	bl	8002594 <startClock>
		switchClockMode(); 	// 시계모드 -> 시계설정모드 | 시계설정모드 -> 시계모드 전환
 80036a2:	f7ff f995 	bl	80029d0 <switchClockMode>
		switchAlarmMode();	// 알람모드 -> 알람설정모드 | 알람설정모드 -> 알람모드 전환
 80036a6:	f7fe fc07 	bl	8001eb8 <switchAlarmMode>
		buzOnOff();
 80036aa:	f7fe fe2f 	bl	800230c <buzOnOff>
		waitingTimeCnt();
 80036ae:	f001 faaf 	bl	8004c10 <waitingTimeCnt>
		alarmTrigger();		// 알람 울림
 80036b2:	f7fd ff5f 	bl	8001574 <alarmTrigger>
	}

}
 80036b6:	bf00      	nop
 80036b8:	3708      	adds	r7, #8
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bd80      	pop	{r7, pc}
 80036be:	bf00      	nop
 80036c0:	40001000 	.word	0x40001000

080036c4 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b082      	sub	sp, #8
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	4603      	mov	r3, r0
 80036cc:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_3 && HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_3)) {
 80036ce:	88fb      	ldrh	r3, [r7, #6]
 80036d0:	2b08      	cmp	r3, #8
 80036d2:	d10a      	bne.n	80036ea <HAL_GPIO_EXTI_Callback+0x26>
 80036d4:	2108      	movs	r1, #8
 80036d6:	482b      	ldr	r0, [pc, #172]	@ (8003784 <HAL_GPIO_EXTI_Callback+0xc0>)
 80036d8:	f001 ff4c 	bl	8005574 <HAL_GPIO_ReadPin>
 80036dc:	4603      	mov	r3, r0
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d003      	beq.n	80036ea <HAL_GPIO_EXTI_Callback+0x26>
		sw1.state = 1;
 80036e2:	4b29      	ldr	r3, [pc, #164]	@ (8003788 <HAL_GPIO_EXTI_Callback+0xc4>)
 80036e4:	2201      	movs	r2, #1
 80036e6:	701a      	strb	r2, [r3, #0]
 80036e8:	e002      	b.n	80036f0 <HAL_GPIO_EXTI_Callback+0x2c>
	} else {
		sw1.state = 0;
 80036ea:	4b27      	ldr	r3, [pc, #156]	@ (8003788 <HAL_GPIO_EXTI_Callback+0xc4>)
 80036ec:	2200      	movs	r2, #0
 80036ee:	701a      	strb	r2, [r3, #0]
	}

	if(GPIO_Pin == GPIO_PIN_15 && HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_15)) {
 80036f0:	88fb      	ldrh	r3, [r7, #6]
 80036f2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80036f6:	d119      	bne.n	800372c <HAL_GPIO_EXTI_Callback+0x68>
 80036f8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80036fc:	4823      	ldr	r0, [pc, #140]	@ (800378c <HAL_GPIO_EXTI_Callback+0xc8>)
 80036fe:	f001 ff39 	bl	8005574 <HAL_GPIO_ReadPin>
 8003702:	4603      	mov	r3, r0
 8003704:	2b00      	cmp	r3, #0
 8003706:	d011      	beq.n	800372c <HAL_GPIO_EXTI_Callback+0x68>
		sw2.state = 1;
 8003708:	4b21      	ldr	r3, [pc, #132]	@ (8003790 <HAL_GPIO_EXTI_Callback+0xcc>)
 800370a:	2201      	movs	r2, #1
 800370c:	701a      	strb	r2, [r3, #0]
		if(mode == STOPWATCH) {
 800370e:	4b21      	ldr	r3, [pc, #132]	@ (8003794 <HAL_GPIO_EXTI_Callback+0xd0>)
 8003710:	781b      	ldrb	r3, [r3, #0]
 8003712:	2b02      	cmp	r3, #2
 8003714:	d10d      	bne.n	8003732 <HAL_GPIO_EXTI_Callback+0x6e>
			stopwatch.onOffState = !stopwatch.onOffState;
 8003716:	4b20      	ldr	r3, [pc, #128]	@ (8003798 <HAL_GPIO_EXTI_Callback+0xd4>)
 8003718:	781b      	ldrb	r3, [r3, #0]
 800371a:	2b00      	cmp	r3, #0
 800371c:	bf0c      	ite	eq
 800371e:	2301      	moveq	r3, #1
 8003720:	2300      	movne	r3, #0
 8003722:	b2db      	uxtb	r3, r3
 8003724:	461a      	mov	r2, r3
 8003726:	4b1c      	ldr	r3, [pc, #112]	@ (8003798 <HAL_GPIO_EXTI_Callback+0xd4>)
 8003728:	701a      	strb	r2, [r3, #0]
		if(mode == STOPWATCH) {
 800372a:	e002      	b.n	8003732 <HAL_GPIO_EXTI_Callback+0x6e>
		}

	} else {
		sw2.state = 0;
 800372c:	4b18      	ldr	r3, [pc, #96]	@ (8003790 <HAL_GPIO_EXTI_Callback+0xcc>)
 800372e:	2200      	movs	r2, #0
 8003730:	701a      	strb	r2, [r3, #0]
	}
	if(GPIO_Pin == GPIO_PIN_4 && HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_4)) {
 8003732:	88fb      	ldrh	r3, [r7, #6]
 8003734:	2b10      	cmp	r3, #16
 8003736:	d10a      	bne.n	800374e <HAL_GPIO_EXTI_Callback+0x8a>
 8003738:	2110      	movs	r1, #16
 800373a:	4818      	ldr	r0, [pc, #96]	@ (800379c <HAL_GPIO_EXTI_Callback+0xd8>)
 800373c:	f001 ff1a 	bl	8005574 <HAL_GPIO_ReadPin>
 8003740:	4603      	mov	r3, r0
 8003742:	2b00      	cmp	r3, #0
 8003744:	d003      	beq.n	800374e <HAL_GPIO_EXTI_Callback+0x8a>
		sw3.state = 1;
 8003746:	4b16      	ldr	r3, [pc, #88]	@ (80037a0 <HAL_GPIO_EXTI_Callback+0xdc>)
 8003748:	2201      	movs	r2, #1
 800374a:	701a      	strb	r2, [r3, #0]
 800374c:	e002      	b.n	8003754 <HAL_GPIO_EXTI_Callback+0x90>
	} else {
		sw3.state = 0;
 800374e:	4b14      	ldr	r3, [pc, #80]	@ (80037a0 <HAL_GPIO_EXTI_Callback+0xdc>)
 8003750:	2200      	movs	r2, #0
 8003752:	701a      	strb	r2, [r3, #0]
	}
	if(GPIO_Pin == GPIO_PIN_10 && HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_10)) {
 8003754:	88fb      	ldrh	r3, [r7, #6]
 8003756:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800375a:	d10b      	bne.n	8003774 <HAL_GPIO_EXTI_Callback+0xb0>
 800375c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003760:	480e      	ldr	r0, [pc, #56]	@ (800379c <HAL_GPIO_EXTI_Callback+0xd8>)
 8003762:	f001 ff07 	bl	8005574 <HAL_GPIO_ReadPin>
 8003766:	4603      	mov	r3, r0
 8003768:	2b00      	cmp	r3, #0
 800376a:	d003      	beq.n	8003774 <HAL_GPIO_EXTI_Callback+0xb0>
		sw4.state = 1;
 800376c:	4b0d      	ldr	r3, [pc, #52]	@ (80037a4 <HAL_GPIO_EXTI_Callback+0xe0>)
 800376e:	2201      	movs	r2, #1
 8003770:	701a      	strb	r2, [r3, #0]
 8003772:	e003      	b.n	800377c <HAL_GPIO_EXTI_Callback+0xb8>
	} else {
		sw4.state = 0;
 8003774:	4b0b      	ldr	r3, [pc, #44]	@ (80037a4 <HAL_GPIO_EXTI_Callback+0xe0>)
 8003776:	2200      	movs	r2, #0
 8003778:	701a      	strb	r2, [r3, #0]
	}

}
 800377a:	bf00      	nop
 800377c:	bf00      	nop
 800377e:	3708      	adds	r7, #8
 8003780:	46bd      	mov	sp, r7
 8003782:	bd80      	pop	{r7, pc}
 8003784:	40021000 	.word	0x40021000
 8003788:	200002bc 	.word	0x200002bc
 800378c:	40020800 	.word	0x40020800
 8003790:	200002d8 	.word	0x200002d8
 8003794:	2000033d 	.word	0x2000033d
 8003798:	200000a0 	.word	0x200000a0
 800379c:	40020c00 	.word	0x40020c00
 80037a0:	200002f4 	.word	0x200002f4
 80037a4:	20000310 	.word	0x20000310

080037a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80037a8:	b480      	push	{r7}
 80037aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80037ac:	b672      	cpsid	i
}
 80037ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80037b0:	bf00      	nop
 80037b2:	e7fd      	b.n	80037b0 <Error_Handler+0x8>

080037b4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80037b4:	b480      	push	{r7}
 80037b6:	b083      	sub	sp, #12
 80037b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037ba:	2300      	movs	r3, #0
 80037bc:	607b      	str	r3, [r7, #4]
 80037be:	4b10      	ldr	r3, [pc, #64]	@ (8003800 <HAL_MspInit+0x4c>)
 80037c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037c2:	4a0f      	ldr	r2, [pc, #60]	@ (8003800 <HAL_MspInit+0x4c>)
 80037c4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80037c8:	6453      	str	r3, [r2, #68]	@ 0x44
 80037ca:	4b0d      	ldr	r3, [pc, #52]	@ (8003800 <HAL_MspInit+0x4c>)
 80037cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037ce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80037d2:	607b      	str	r3, [r7, #4]
 80037d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80037d6:	2300      	movs	r3, #0
 80037d8:	603b      	str	r3, [r7, #0]
 80037da:	4b09      	ldr	r3, [pc, #36]	@ (8003800 <HAL_MspInit+0x4c>)
 80037dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037de:	4a08      	ldr	r2, [pc, #32]	@ (8003800 <HAL_MspInit+0x4c>)
 80037e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80037e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80037e6:	4b06      	ldr	r3, [pc, #24]	@ (8003800 <HAL_MspInit+0x4c>)
 80037e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80037ee:	603b      	str	r3, [r7, #0]
 80037f0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80037f2:	bf00      	nop
 80037f4:	370c      	adds	r7, #12
 80037f6:	46bd      	mov	sp, r7
 80037f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fc:	4770      	bx	lr
 80037fe:	bf00      	nop
 8003800:	40023800 	.word	0x40023800

08003804 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003804:	b480      	push	{r7}
 8003806:	b085      	sub	sp, #20
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003814:	d10e      	bne.n	8003834 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003816:	2300      	movs	r3, #0
 8003818:	60fb      	str	r3, [r7, #12]
 800381a:	4b13      	ldr	r3, [pc, #76]	@ (8003868 <HAL_TIM_Base_MspInit+0x64>)
 800381c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800381e:	4a12      	ldr	r2, [pc, #72]	@ (8003868 <HAL_TIM_Base_MspInit+0x64>)
 8003820:	f043 0301 	orr.w	r3, r3, #1
 8003824:	6413      	str	r3, [r2, #64]	@ 0x40
 8003826:	4b10      	ldr	r3, [pc, #64]	@ (8003868 <HAL_TIM_Base_MspInit+0x64>)
 8003828:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800382a:	f003 0301 	and.w	r3, r3, #1
 800382e:	60fb      	str	r3, [r7, #12]
 8003830:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8003832:	e012      	b.n	800385a <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM6)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4a0c      	ldr	r2, [pc, #48]	@ (800386c <HAL_TIM_Base_MspInit+0x68>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d10d      	bne.n	800385a <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800383e:	2300      	movs	r3, #0
 8003840:	60bb      	str	r3, [r7, #8]
 8003842:	4b09      	ldr	r3, [pc, #36]	@ (8003868 <HAL_TIM_Base_MspInit+0x64>)
 8003844:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003846:	4a08      	ldr	r2, [pc, #32]	@ (8003868 <HAL_TIM_Base_MspInit+0x64>)
 8003848:	f043 0310 	orr.w	r3, r3, #16
 800384c:	6413      	str	r3, [r2, #64]	@ 0x40
 800384e:	4b06      	ldr	r3, [pc, #24]	@ (8003868 <HAL_TIM_Base_MspInit+0x64>)
 8003850:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003852:	f003 0310 	and.w	r3, r3, #16
 8003856:	60bb      	str	r3, [r7, #8]
 8003858:	68bb      	ldr	r3, [r7, #8]
}
 800385a:	bf00      	nop
 800385c:	3714      	adds	r7, #20
 800385e:	46bd      	mov	sp, r7
 8003860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003864:	4770      	bx	lr
 8003866:	bf00      	nop
 8003868:	40023800 	.word	0x40023800
 800386c:	40001000 	.word	0x40001000

08003870 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b088      	sub	sp, #32
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003878:	f107 030c 	add.w	r3, r7, #12
 800387c:	2200      	movs	r2, #0
 800387e:	601a      	str	r2, [r3, #0]
 8003880:	605a      	str	r2, [r3, #4]
 8003882:	609a      	str	r2, [r3, #8]
 8003884:	60da      	str	r2, [r3, #12]
 8003886:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003890:	d11d      	bne.n	80038ce <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003892:	2300      	movs	r3, #0
 8003894:	60bb      	str	r3, [r7, #8]
 8003896:	4b10      	ldr	r3, [pc, #64]	@ (80038d8 <HAL_TIM_MspPostInit+0x68>)
 8003898:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800389a:	4a0f      	ldr	r2, [pc, #60]	@ (80038d8 <HAL_TIM_MspPostInit+0x68>)
 800389c:	f043 0301 	orr.w	r3, r3, #1
 80038a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80038a2:	4b0d      	ldr	r3, [pc, #52]	@ (80038d8 <HAL_TIM_MspPostInit+0x68>)
 80038a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038a6:	f003 0301 	and.w	r3, r3, #1
 80038aa:	60bb      	str	r3, [r7, #8]
 80038ac:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80038ae:	2320      	movs	r3, #32
 80038b0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038b2:	2302      	movs	r3, #2
 80038b4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038b6:	2300      	movs	r3, #0
 80038b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038ba:	2300      	movs	r3, #0
 80038bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80038be:	2301      	movs	r3, #1
 80038c0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038c2:	f107 030c 	add.w	r3, r7, #12
 80038c6:	4619      	mov	r1, r3
 80038c8:	4804      	ldr	r0, [pc, #16]	@ (80038dc <HAL_TIM_MspPostInit+0x6c>)
 80038ca:	f001 fcb7 	bl	800523c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80038ce:	bf00      	nop
 80038d0:	3720      	adds	r7, #32
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd80      	pop	{r7, pc}
 80038d6:	bf00      	nop
 80038d8:	40023800 	.word	0x40023800
 80038dc:	40020000 	.word	0x40020000

080038e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b08a      	sub	sp, #40	@ 0x28
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038e8:	f107 0314 	add.w	r3, r7, #20
 80038ec:	2200      	movs	r2, #0
 80038ee:	601a      	str	r2, [r3, #0]
 80038f0:	605a      	str	r2, [r3, #4]
 80038f2:	609a      	str	r2, [r3, #8]
 80038f4:	60da      	str	r2, [r3, #12]
 80038f6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4a19      	ldr	r2, [pc, #100]	@ (8003964 <HAL_UART_MspInit+0x84>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d12c      	bne.n	800395c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8003902:	2300      	movs	r3, #0
 8003904:	613b      	str	r3, [r7, #16]
 8003906:	4b18      	ldr	r3, [pc, #96]	@ (8003968 <HAL_UART_MspInit+0x88>)
 8003908:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800390a:	4a17      	ldr	r2, [pc, #92]	@ (8003968 <HAL_UART_MspInit+0x88>)
 800390c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003910:	6413      	str	r3, [r2, #64]	@ 0x40
 8003912:	4b15      	ldr	r3, [pc, #84]	@ (8003968 <HAL_UART_MspInit+0x88>)
 8003914:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003916:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800391a:	613b      	str	r3, [r7, #16]
 800391c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800391e:	2300      	movs	r3, #0
 8003920:	60fb      	str	r3, [r7, #12]
 8003922:	4b11      	ldr	r3, [pc, #68]	@ (8003968 <HAL_UART_MspInit+0x88>)
 8003924:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003926:	4a10      	ldr	r2, [pc, #64]	@ (8003968 <HAL_UART_MspInit+0x88>)
 8003928:	f043 0308 	orr.w	r3, r3, #8
 800392c:	6313      	str	r3, [r2, #48]	@ 0x30
 800392e:	4b0e      	ldr	r3, [pc, #56]	@ (8003968 <HAL_UART_MspInit+0x88>)
 8003930:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003932:	f003 0308 	and.w	r3, r3, #8
 8003936:	60fb      	str	r3, [r7, #12]
 8003938:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800393a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800393e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003940:	2302      	movs	r3, #2
 8003942:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003944:	2300      	movs	r3, #0
 8003946:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003948:	2303      	movs	r3, #3
 800394a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800394c:	2307      	movs	r3, #7
 800394e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003950:	f107 0314 	add.w	r3, r7, #20
 8003954:	4619      	mov	r1, r3
 8003956:	4805      	ldr	r0, [pc, #20]	@ (800396c <HAL_UART_MspInit+0x8c>)
 8003958:	f001 fc70 	bl	800523c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800395c:	bf00      	nop
 800395e:	3728      	adds	r7, #40	@ 0x28
 8003960:	46bd      	mov	sp, r7
 8003962:	bd80      	pop	{r7, pc}
 8003964:	40004800 	.word	0x40004800
 8003968:	40023800 	.word	0x40023800
 800396c:	40020c00 	.word	0x40020c00

08003970 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003970:	b480      	push	{r7}
 8003972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003974:	bf00      	nop
 8003976:	e7fd      	b.n	8003974 <NMI_Handler+0x4>

08003978 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003978:	b480      	push	{r7}
 800397a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800397c:	bf00      	nop
 800397e:	e7fd      	b.n	800397c <HardFault_Handler+0x4>

08003980 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003980:	b480      	push	{r7}
 8003982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003984:	bf00      	nop
 8003986:	e7fd      	b.n	8003984 <MemManage_Handler+0x4>

08003988 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003988:	b480      	push	{r7}
 800398a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800398c:	bf00      	nop
 800398e:	e7fd      	b.n	800398c <BusFault_Handler+0x4>

08003990 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003990:	b480      	push	{r7}
 8003992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003994:	bf00      	nop
 8003996:	e7fd      	b.n	8003994 <UsageFault_Handler+0x4>

08003998 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003998:	b480      	push	{r7}
 800399a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800399c:	bf00      	nop
 800399e:	46bd      	mov	sp, r7
 80039a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a4:	4770      	bx	lr

080039a6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80039a6:	b480      	push	{r7}
 80039a8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80039aa:	bf00      	nop
 80039ac:	46bd      	mov	sp, r7
 80039ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b2:	4770      	bx	lr

080039b4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80039b4:	b480      	push	{r7}
 80039b6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80039b8:	bf00      	nop
 80039ba:	46bd      	mov	sp, r7
 80039bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c0:	4770      	bx	lr

080039c2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80039c2:	b580      	push	{r7, lr}
 80039c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80039c6:	f001 fa51 	bl	8004e6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80039ca:	bf00      	nop
 80039cc:	bd80      	pop	{r7, pc}

080039ce <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80039ce:	b580      	push	{r7, lr}
 80039d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 80039d2:	2008      	movs	r0, #8
 80039d4:	f001 fe1a 	bl	800560c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80039d8:	bf00      	nop
 80039da:	bd80      	pop	{r7, pc}

080039dc <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 80039e0:	2010      	movs	r0, #16
 80039e2:	f001 fe13 	bl	800560c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80039e6:	bf00      	nop
 80039e8:	bd80      	pop	{r7, pc}
	...

080039ec <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80039f0:	4802      	ldr	r0, [pc, #8]	@ (80039fc <USART3_IRQHandler+0x10>)
 80039f2:	f003 fbd1 	bl	8007198 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80039f6:	bf00      	nop
 80039f8:	bd80      	pop	{r7, pc}
 80039fa:	bf00      	nop
 80039fc:	20000268 	.word	0x20000268

08003a00 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8003a04:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8003a08:	f001 fe00 	bl	800560c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8003a0c:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8003a10:	f001 fdfc 	bl	800560c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003a14:	bf00      	nop
 8003a16:	bd80      	pop	{r7, pc}

08003a18 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003a1c:	4802      	ldr	r0, [pc, #8]	@ (8003a28 <TIM6_DAC_IRQHandler+0x10>)
 8003a1e:	f002 fcf7 	bl	8006410 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003a22:	bf00      	nop
 8003a24:	bd80      	pop	{r7, pc}
 8003a26:	bf00      	nop
 8003a28:	20000220 	.word	0x20000220

08003a2c <segUpCount>:

#include "stopWatch.h"
stopWatchTime pausedTimer = {0, 0, 0, 0};
extern stopWatch stopwatch;

void segUpCount() {
 8003a2c:	b598      	push	{r3, r4, r7, lr}
 8003a2e:	af00      	add	r7, sp, #0
	// 스탑워치 시작 함수
	if(stopwatch.state == RUN) {
 8003a30:	4b1c      	ldr	r3, [pc, #112]	@ (8003aa4 <segUpCount+0x78>)
 8003a32:	785b      	ldrb	r3, [r3, #1]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d115      	bne.n	8003a64 <segUpCount+0x38>
		_7SEG_SetNumber(DGT1, stopwatch.time.second % 10, getBlink());
 8003a38:	4b1a      	ldr	r3, [pc, #104]	@ (8003aa4 <segUpCount+0x78>)
 8003a3a:	68da      	ldr	r2, [r3, #12]
 8003a3c:	4b1a      	ldr	r3, [pc, #104]	@ (8003aa8 <segUpCount+0x7c>)
 8003a3e:	fb83 1302 	smull	r1, r3, r3, r2
 8003a42:	1099      	asrs	r1, r3, #2
 8003a44:	17d3      	asrs	r3, r2, #31
 8003a46:	1acc      	subs	r4, r1, r3
 8003a48:	4623      	mov	r3, r4
 8003a4a:	009b      	lsls	r3, r3, #2
 8003a4c:	4423      	add	r3, r4
 8003a4e:	005b      	lsls	r3, r3, #1
 8003a50:	1ad4      	subs	r4, r2, r3
 8003a52:	f001 f887 	bl	8004b64 <getBlink>
 8003a56:	4603      	mov	r3, r0
 8003a58:	461a      	mov	r2, r3
 8003a5a:	4621      	mov	r1, r4
 8003a5c:	2000      	movs	r0, #0
 8003a5e:	f7fc fe65 	bl	800072c <_7SEG_SetNumber>
 8003a62:	e010      	b.n	8003a86 <segUpCount+0x5a>
	} else {
		_7SEG_SetNumber(DGT1, stopwatch.time.second % 10, 0);
 8003a64:	4b0f      	ldr	r3, [pc, #60]	@ (8003aa4 <segUpCount+0x78>)
 8003a66:	68da      	ldr	r2, [r3, #12]
 8003a68:	4b0f      	ldr	r3, [pc, #60]	@ (8003aa8 <segUpCount+0x7c>)
 8003a6a:	fb83 1302 	smull	r1, r3, r3, r2
 8003a6e:	1099      	asrs	r1, r3, #2
 8003a70:	17d3      	asrs	r3, r2, #31
 8003a72:	1ac9      	subs	r1, r1, r3
 8003a74:	460b      	mov	r3, r1
 8003a76:	009b      	lsls	r3, r3, #2
 8003a78:	440b      	add	r3, r1
 8003a7a:	005b      	lsls	r3, r3, #1
 8003a7c:	1ad1      	subs	r1, r2, r3
 8003a7e:	2200      	movs	r2, #0
 8003a80:	2000      	movs	r0, #0
 8003a82:	f7fc fe53 	bl	800072c <_7SEG_SetNumber>
	}
	_7SEG_SetNumber(DGT2, stopwatch.time.millisecond / 100, 0);
 8003a86:	4b07      	ldr	r3, [pc, #28]	@ (8003aa4 <segUpCount+0x78>)
 8003a88:	691b      	ldr	r3, [r3, #16]
 8003a8a:	4a08      	ldr	r2, [pc, #32]	@ (8003aac <segUpCount+0x80>)
 8003a8c:	fb82 1203 	smull	r1, r2, r2, r3
 8003a90:	1152      	asrs	r2, r2, #5
 8003a92:	17db      	asrs	r3, r3, #31
 8003a94:	1ad3      	subs	r3, r2, r3
 8003a96:	2200      	movs	r2, #0
 8003a98:	4619      	mov	r1, r3
 8003a9a:	2001      	movs	r0, #1
 8003a9c:	f7fc fe46 	bl	800072c <_7SEG_SetNumber>

}
 8003aa0:	bf00      	nop
 8003aa2:	bd98      	pop	{r3, r4, r7, pc}
 8003aa4:	200000a0 	.word	0x200000a0
 8003aa8:	66666667 	.word	0x66666667
 8003aac:	51eb851f 	.word	0x51eb851f

08003ab0 <segReset>:

void segReset() {
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	af00      	add	r7, sp, #0
	// 7세그먼트 초기화 함수
	_7SEG_SetNumber(DGT1, 0, 1);
 8003ab4:	2201      	movs	r2, #1
 8003ab6:	2100      	movs	r1, #0
 8003ab8:	2000      	movs	r0, #0
 8003aba:	f7fc fe37 	bl	800072c <_7SEG_SetNumber>
	_7SEG_SetNumber(DGT2, 0, 0);
 8003abe:	2200      	movs	r2, #0
 8003ac0:	2100      	movs	r1, #0
 8003ac2:	2001      	movs	r0, #1
 8003ac4:	f7fc fe32 	bl	800072c <_7SEG_SetNumber>
}
 8003ac8:	bf00      	nop
 8003aca:	bd80      	pop	{r7, pc}

08003acc <timerReset>:

void timerReset() {
 8003acc:	b480      	push	{r7}
 8003ace:	af00      	add	r7, sp, #0
	// 스탑워치 시간 초기화 함수
	stopwatch.time.hour = 0;
 8003ad0:	4b08      	ldr	r3, [pc, #32]	@ (8003af4 <timerReset+0x28>)
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	605a      	str	r2, [r3, #4]
	stopwatch.time.minute = 0;
 8003ad6:	4b07      	ldr	r3, [pc, #28]	@ (8003af4 <timerReset+0x28>)
 8003ad8:	2200      	movs	r2, #0
 8003ada:	609a      	str	r2, [r3, #8]
	stopwatch.time.second = 0;
 8003adc:	4b05      	ldr	r3, [pc, #20]	@ (8003af4 <timerReset+0x28>)
 8003ade:	2200      	movs	r2, #0
 8003ae0:	60da      	str	r2, [r3, #12]
	stopwatch.time.millisecond = 0;
 8003ae2:	4b04      	ldr	r3, [pc, #16]	@ (8003af4 <timerReset+0x28>)
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	611a      	str	r2, [r3, #16]
}
 8003ae8:	bf00      	nop
 8003aea:	46bd      	mov	sp, r7
 8003aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af0:	4770      	bx	lr
 8003af2:	bf00      	nop
 8003af4:	200000a0 	.word	0x200000a0

08003af8 <timerPaused>:

void timerPaused() {
 8003af8:	b480      	push	{r7}
 8003afa:	af00      	add	r7, sp, #0
	// 스탑워치 일시정지 함수
	pausedTimer.hour = stopwatch.time.hour;
 8003afc:	4b0a      	ldr	r3, [pc, #40]	@ (8003b28 <timerPaused+0x30>)
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	4a0a      	ldr	r2, [pc, #40]	@ (8003b2c <timerPaused+0x34>)
 8003b02:	6013      	str	r3, [r2, #0]
	pausedTimer.minute = stopwatch.time.minute;
 8003b04:	4b08      	ldr	r3, [pc, #32]	@ (8003b28 <timerPaused+0x30>)
 8003b06:	689b      	ldr	r3, [r3, #8]
 8003b08:	4a08      	ldr	r2, [pc, #32]	@ (8003b2c <timerPaused+0x34>)
 8003b0a:	6053      	str	r3, [r2, #4]
	pausedTimer.second = stopwatch.time.second;
 8003b0c:	4b06      	ldr	r3, [pc, #24]	@ (8003b28 <timerPaused+0x30>)
 8003b0e:	68db      	ldr	r3, [r3, #12]
 8003b10:	4a06      	ldr	r2, [pc, #24]	@ (8003b2c <timerPaused+0x34>)
 8003b12:	6093      	str	r3, [r2, #8]
	pausedTimer.millisecond = stopwatch.time.millisecond;
 8003b14:	4b04      	ldr	r3, [pc, #16]	@ (8003b28 <timerPaused+0x30>)
 8003b16:	691b      	ldr	r3, [r3, #16]
 8003b18:	4a04      	ldr	r2, [pc, #16]	@ (8003b2c <timerPaused+0x34>)
 8003b1a:	60d3      	str	r3, [r2, #12]
}
 8003b1c:	bf00      	nop
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b24:	4770      	bx	lr
 8003b26:	bf00      	nop
 8003b28:	200000a0 	.word	0x200000a0
 8003b2c:	2000032c 	.word	0x2000032c

08003b30 <timerResum>:

void timerResum() {
 8003b30:	b480      	push	{r7}
 8003b32:	af00      	add	r7, sp, #0
	// 스탑워치 재개 함수
	stopwatch.time.hour = pausedTimer.hour;
 8003b34:	4b0a      	ldr	r3, [pc, #40]	@ (8003b60 <timerResum+0x30>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4a0a      	ldr	r2, [pc, #40]	@ (8003b64 <timerResum+0x34>)
 8003b3a:	6053      	str	r3, [r2, #4]
	stopwatch.time.minute = pausedTimer.minute;
 8003b3c:	4b08      	ldr	r3, [pc, #32]	@ (8003b60 <timerResum+0x30>)
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	4a08      	ldr	r2, [pc, #32]	@ (8003b64 <timerResum+0x34>)
 8003b42:	6093      	str	r3, [r2, #8]
	stopwatch.time.second = pausedTimer.second;
 8003b44:	4b06      	ldr	r3, [pc, #24]	@ (8003b60 <timerResum+0x30>)
 8003b46:	689b      	ldr	r3, [r3, #8]
 8003b48:	4a06      	ldr	r2, [pc, #24]	@ (8003b64 <timerResum+0x34>)
 8003b4a:	60d3      	str	r3, [r2, #12]
	stopwatch.time.millisecond = pausedTimer.millisecond;
 8003b4c:	4b04      	ldr	r3, [pc, #16]	@ (8003b60 <timerResum+0x30>)
 8003b4e:	68db      	ldr	r3, [r3, #12]
 8003b50:	4a04      	ldr	r2, [pc, #16]	@ (8003b64 <timerResum+0x34>)
 8003b52:	6113      	str	r3, [r2, #16]
}
 8003b54:	bf00      	nop
 8003b56:	46bd      	mov	sp, r7
 8003b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5c:	4770      	bx	lr
 8003b5e:	bf00      	nop
 8003b60:	2000032c 	.word	0x2000032c
 8003b64:	200000a0 	.word	0x200000a0

08003b68 <stopwatchTime>:

void stopwatchTime() {
 8003b68:	b480      	push	{r7}
 8003b6a:	af00      	add	r7, sp, #0
	// 스탑워치 시간 저장함수
	if(stopwatch.state == RUN) {
 8003b6c:	4b21      	ldr	r3, [pc, #132]	@ (8003bf4 <stopwatchTime+0x8c>)
 8003b6e:	785b      	ldrb	r3, [r3, #1]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d13a      	bne.n	8003bea <stopwatchTime+0x82>
		stopwatch.time.millisecond++;
 8003b74:	4b1f      	ldr	r3, [pc, #124]	@ (8003bf4 <stopwatchTime+0x8c>)
 8003b76:	691b      	ldr	r3, [r3, #16]
 8003b78:	3301      	adds	r3, #1
 8003b7a:	4a1e      	ldr	r2, [pc, #120]	@ (8003bf4 <stopwatchTime+0x8c>)
 8003b7c:	6113      	str	r3, [r2, #16]
		if(stopwatch.time.millisecond % 1000 == 0) {
 8003b7e:	4b1d      	ldr	r3, [pc, #116]	@ (8003bf4 <stopwatchTime+0x8c>)
 8003b80:	691a      	ldr	r2, [r3, #16]
 8003b82:	4b1d      	ldr	r3, [pc, #116]	@ (8003bf8 <stopwatchTime+0x90>)
 8003b84:	fb83 1302 	smull	r1, r3, r3, r2
 8003b88:	1199      	asrs	r1, r3, #6
 8003b8a:	17d3      	asrs	r3, r2, #31
 8003b8c:	1acb      	subs	r3, r1, r3
 8003b8e:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8003b92:	fb01 f303 	mul.w	r3, r1, r3
 8003b96:	1ad3      	subs	r3, r2, r3
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d107      	bne.n	8003bac <stopwatchTime+0x44>
			stopwatch.time.millisecond = 0;
 8003b9c:	4b15      	ldr	r3, [pc, #84]	@ (8003bf4 <stopwatchTime+0x8c>)
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	611a      	str	r2, [r3, #16]
			stopwatch.time.second++;
 8003ba2:	4b14      	ldr	r3, [pc, #80]	@ (8003bf4 <stopwatchTime+0x8c>)
 8003ba4:	68db      	ldr	r3, [r3, #12]
 8003ba6:	3301      	adds	r3, #1
 8003ba8:	4a12      	ldr	r2, [pc, #72]	@ (8003bf4 <stopwatchTime+0x8c>)
 8003baa:	60d3      	str	r3, [r2, #12]
		}
		if(stopwatch.time.second == 60) {
 8003bac:	4b11      	ldr	r3, [pc, #68]	@ (8003bf4 <stopwatchTime+0x8c>)
 8003bae:	68db      	ldr	r3, [r3, #12]
 8003bb0:	2b3c      	cmp	r3, #60	@ 0x3c
 8003bb2:	d107      	bne.n	8003bc4 <stopwatchTime+0x5c>
			stopwatch.time.second = 0;
 8003bb4:	4b0f      	ldr	r3, [pc, #60]	@ (8003bf4 <stopwatchTime+0x8c>)
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	60da      	str	r2, [r3, #12]
			stopwatch.time.minute++;
 8003bba:	4b0e      	ldr	r3, [pc, #56]	@ (8003bf4 <stopwatchTime+0x8c>)
 8003bbc:	689b      	ldr	r3, [r3, #8]
 8003bbe:	3301      	adds	r3, #1
 8003bc0:	4a0c      	ldr	r2, [pc, #48]	@ (8003bf4 <stopwatchTime+0x8c>)
 8003bc2:	6093      	str	r3, [r2, #8]
		}
		if(stopwatch.time.minute == 60) {
 8003bc4:	4b0b      	ldr	r3, [pc, #44]	@ (8003bf4 <stopwatchTime+0x8c>)
 8003bc6:	689b      	ldr	r3, [r3, #8]
 8003bc8:	2b3c      	cmp	r3, #60	@ 0x3c
 8003bca:	d107      	bne.n	8003bdc <stopwatchTime+0x74>
			stopwatch.time.minute = 0;
 8003bcc:	4b09      	ldr	r3, [pc, #36]	@ (8003bf4 <stopwatchTime+0x8c>)
 8003bce:	2200      	movs	r2, #0
 8003bd0:	609a      	str	r2, [r3, #8]
			stopwatch.time.hour++;
 8003bd2:	4b08      	ldr	r3, [pc, #32]	@ (8003bf4 <stopwatchTime+0x8c>)
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	3301      	adds	r3, #1
 8003bd8:	4a06      	ldr	r2, [pc, #24]	@ (8003bf4 <stopwatchTime+0x8c>)
 8003bda:	6053      	str	r3, [r2, #4]
		}
		if(stopwatch.time.hour == 24) {
 8003bdc:	4b05      	ldr	r3, [pc, #20]	@ (8003bf4 <stopwatchTime+0x8c>)
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	2b18      	cmp	r3, #24
 8003be2:	d102      	bne.n	8003bea <stopwatchTime+0x82>
			stopwatch.time.hour = 0;
 8003be4:	4b03      	ldr	r3, [pc, #12]	@ (8003bf4 <stopwatchTime+0x8c>)
 8003be6:	2200      	movs	r2, #0
 8003be8:	605a      	str	r2, [r3, #4]
		}
	}
}
 8003bea:	bf00      	nop
 8003bec:	46bd      	mov	sp, r7
 8003bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf2:	4770      	bx	lr
 8003bf4:	200000a0 	.word	0x200000a0
 8003bf8:	10624dd3 	.word	0x10624dd3

08003bfc <laptimeSave>:

void laptimeSave() {
 8003bfc:	b5b0      	push	{r4, r5, r7, lr}
 8003bfe:	b084      	sub	sp, #16
 8003c00:	af04      	add	r7, sp, #16
	// 랩타임 저장 함수
	if(stopwatch.laptime.cnt < 9) {
 8003c02:	4b41      	ldr	r3, [pc, #260]	@ (8003d08 <laptimeSave+0x10c>)
 8003c04:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 8003c08:	2b08      	cmp	r3, #8
 8003c0a:	d86a      	bhi.n	8003ce2 <laptimeSave+0xe6>
		stopwatch.laptime.saveSpace[stopwatch.laptime.cnt].hour  = stopwatch.time.hour;
 8003c0c:	4b3e      	ldr	r3, [pc, #248]	@ (8003d08 <laptimeSave+0x10c>)
 8003c0e:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 8003c12:	4618      	mov	r0, r3
 8003c14:	4b3c      	ldr	r3, [pc, #240]	@ (8003d08 <laptimeSave+0x10c>)
 8003c16:	685a      	ldr	r2, [r3, #4]
 8003c18:	493b      	ldr	r1, [pc, #236]	@ (8003d08 <laptimeSave+0x10c>)
 8003c1a:	1c43      	adds	r3, r0, #1
 8003c1c:	011b      	lsls	r3, r3, #4
 8003c1e:	440b      	add	r3, r1
 8003c20:	3304      	adds	r3, #4
 8003c22:	601a      	str	r2, [r3, #0]
		stopwatch.laptime.saveSpace[stopwatch.laptime.cnt].minute = stopwatch.time.minute;
 8003c24:	4b38      	ldr	r3, [pc, #224]	@ (8003d08 <laptimeSave+0x10c>)
 8003c26:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	4b36      	ldr	r3, [pc, #216]	@ (8003d08 <laptimeSave+0x10c>)
 8003c2e:	689a      	ldr	r2, [r3, #8]
 8003c30:	4935      	ldr	r1, [pc, #212]	@ (8003d08 <laptimeSave+0x10c>)
 8003c32:	1c43      	adds	r3, r0, #1
 8003c34:	011b      	lsls	r3, r3, #4
 8003c36:	440b      	add	r3, r1
 8003c38:	3308      	adds	r3, #8
 8003c3a:	601a      	str	r2, [r3, #0]
		stopwatch.laptime.saveSpace[stopwatch.laptime.cnt].second = stopwatch.time.second;
 8003c3c:	4b32      	ldr	r3, [pc, #200]	@ (8003d08 <laptimeSave+0x10c>)
 8003c3e:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 8003c42:	4618      	mov	r0, r3
 8003c44:	4b30      	ldr	r3, [pc, #192]	@ (8003d08 <laptimeSave+0x10c>)
 8003c46:	68da      	ldr	r2, [r3, #12]
 8003c48:	492f      	ldr	r1, [pc, #188]	@ (8003d08 <laptimeSave+0x10c>)
 8003c4a:	0103      	lsls	r3, r0, #4
 8003c4c:	440b      	add	r3, r1
 8003c4e:	331c      	adds	r3, #28
 8003c50:	601a      	str	r2, [r3, #0]
		stopwatch.laptime.saveSpace[stopwatch.laptime.cnt].millisecond = stopwatch.time.millisecond;
 8003c52:	4b2d      	ldr	r3, [pc, #180]	@ (8003d08 <laptimeSave+0x10c>)
 8003c54:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 8003c58:	4618      	mov	r0, r3
 8003c5a:	4b2b      	ldr	r3, [pc, #172]	@ (8003d08 <laptimeSave+0x10c>)
 8003c5c:	691a      	ldr	r2, [r3, #16]
 8003c5e:	492a      	ldr	r1, [pc, #168]	@ (8003d08 <laptimeSave+0x10c>)
 8003c60:	0103      	lsls	r3, r0, #4
 8003c62:	440b      	add	r3, r1
 8003c64:	3320      	adds	r3, #32
 8003c66:	601a      	str	r2, [r3, #0]

		sprintf(stopwatch.laptime.buffer, "LP%d %02d:%02d:%02d.%03d", // 랩타임 저장
				(stopwatch.laptime.cnt + 1),
 8003c68:	4b27      	ldr	r3, [pc, #156]	@ (8003d08 <laptimeSave+0x10c>)
 8003c6a:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
		sprintf(stopwatch.laptime.buffer, "LP%d %02d:%02d:%02d.%03d", // 랩타임 저장
 8003c6e:	1c58      	adds	r0, r3, #1
				stopwatch.laptime.saveSpace[stopwatch.laptime.cnt].hour,
 8003c70:	4b25      	ldr	r3, [pc, #148]	@ (8003d08 <laptimeSave+0x10c>)
 8003c72:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
		sprintf(stopwatch.laptime.buffer, "LP%d %02d:%02d:%02d.%03d", // 랩타임 저장
 8003c76:	4a24      	ldr	r2, [pc, #144]	@ (8003d08 <laptimeSave+0x10c>)
 8003c78:	3301      	adds	r3, #1
 8003c7a:	011b      	lsls	r3, r3, #4
 8003c7c:	4413      	add	r3, r2
 8003c7e:	3304      	adds	r3, #4
 8003c80:	681c      	ldr	r4, [r3, #0]
				stopwatch.laptime.saveSpace[stopwatch.laptime.cnt].minute,
 8003c82:	4b21      	ldr	r3, [pc, #132]	@ (8003d08 <laptimeSave+0x10c>)
 8003c84:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
		sprintf(stopwatch.laptime.buffer, "LP%d %02d:%02d:%02d.%03d", // 랩타임 저장
 8003c88:	4a1f      	ldr	r2, [pc, #124]	@ (8003d08 <laptimeSave+0x10c>)
 8003c8a:	3301      	adds	r3, #1
 8003c8c:	011b      	lsls	r3, r3, #4
 8003c8e:	4413      	add	r3, r2
 8003c90:	3308      	adds	r3, #8
 8003c92:	681b      	ldr	r3, [r3, #0]
				stopwatch.laptime.saveSpace[stopwatch.laptime.cnt].second,
 8003c94:	4a1c      	ldr	r2, [pc, #112]	@ (8003d08 <laptimeSave+0x10c>)
 8003c96:	f892 20a4 	ldrb.w	r2, [r2, #164]	@ 0xa4
		sprintf(stopwatch.laptime.buffer, "LP%d %02d:%02d:%02d.%03d", // 랩타임 저장
 8003c9a:	491b      	ldr	r1, [pc, #108]	@ (8003d08 <laptimeSave+0x10c>)
 8003c9c:	0112      	lsls	r2, r2, #4
 8003c9e:	440a      	add	r2, r1
 8003ca0:	321c      	adds	r2, #28
 8003ca2:	6812      	ldr	r2, [r2, #0]
				stopwatch.laptime.saveSpace[stopwatch.laptime.cnt].millisecond);
 8003ca4:	4918      	ldr	r1, [pc, #96]	@ (8003d08 <laptimeSave+0x10c>)
 8003ca6:	f891 10a4 	ldrb.w	r1, [r1, #164]	@ 0xa4
		sprintf(stopwatch.laptime.buffer, "LP%d %02d:%02d:%02d.%03d", // 랩타임 저장
 8003caa:	4d17      	ldr	r5, [pc, #92]	@ (8003d08 <laptimeSave+0x10c>)
 8003cac:	0109      	lsls	r1, r1, #4
 8003cae:	4429      	add	r1, r5
 8003cb0:	3120      	adds	r1, #32
 8003cb2:	6809      	ldr	r1, [r1, #0]
 8003cb4:	9102      	str	r1, [sp, #8]
 8003cb6:	9201      	str	r2, [sp, #4]
 8003cb8:	9300      	str	r3, [sp, #0]
 8003cba:	4623      	mov	r3, r4
 8003cbc:	4602      	mov	r2, r0
 8003cbe:	4913      	ldr	r1, [pc, #76]	@ (8003d0c <laptimeSave+0x110>)
 8003cc0:	4813      	ldr	r0, [pc, #76]	@ (8003d10 <laptimeSave+0x114>)
 8003cc2:	f004 f967 	bl	8007f94 <siprintf>
		CLCD_Puts(0, 1, stopwatch.laptime.buffer); // 랩타임 출력
 8003cc6:	4a12      	ldr	r2, [pc, #72]	@ (8003d10 <laptimeSave+0x114>)
 8003cc8:	2101      	movs	r1, #1
 8003cca:	2000      	movs	r0, #0
 8003ccc:	f7fd fb14 	bl	80012f8 <CLCD_Puts>
		stopwatch.laptime.cnt++; // 카운트 증가
 8003cd0:	4b0d      	ldr	r3, [pc, #52]	@ (8003d08 <laptimeSave+0x10c>)
 8003cd2:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 8003cd6:	3301      	adds	r3, #1
 8003cd8:	b2da      	uxtb	r2, r3
 8003cda:	4b0b      	ldr	r3, [pc, #44]	@ (8003d08 <laptimeSave+0x10c>)
 8003cdc:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	} else if(stopwatch.laptime.cnt >= 9) {

		CLCD_Puts(0, 1, "                ");
		CLCD_Puts(0, 1, "LAP FULL(9/9)");
	}
}
 8003ce0:	e00e      	b.n	8003d00 <laptimeSave+0x104>
	} else if(stopwatch.laptime.cnt >= 9) {
 8003ce2:	4b09      	ldr	r3, [pc, #36]	@ (8003d08 <laptimeSave+0x10c>)
 8003ce4:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 8003ce8:	2b08      	cmp	r3, #8
 8003cea:	d909      	bls.n	8003d00 <laptimeSave+0x104>
		CLCD_Puts(0, 1, "                ");
 8003cec:	4a09      	ldr	r2, [pc, #36]	@ (8003d14 <laptimeSave+0x118>)
 8003cee:	2101      	movs	r1, #1
 8003cf0:	2000      	movs	r0, #0
 8003cf2:	f7fd fb01 	bl	80012f8 <CLCD_Puts>
		CLCD_Puts(0, 1, "LAP FULL(9/9)");
 8003cf6:	4a08      	ldr	r2, [pc, #32]	@ (8003d18 <laptimeSave+0x11c>)
 8003cf8:	2101      	movs	r1, #1
 8003cfa:	2000      	movs	r0, #0
 8003cfc:	f7fd fafc 	bl	80012f8 <CLCD_Puts>
}
 8003d00:	bf00      	nop
 8003d02:	46bd      	mov	sp, r7
 8003d04:	bdb0      	pop	{r4, r5, r7, pc}
 8003d06:	bf00      	nop
 8003d08:	200000a0 	.word	0x200000a0
 8003d0c:	08008b24 	.word	0x08008b24
 8003d10:	20000146 	.word	0x20000146
 8003d14:	08008b40 	.word	0x08008b40
 8003d18:	08008b54 	.word	0x08008b54

08003d1c <laptimeDisplay>:

void laptimeDisplay() {
 8003d1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d1e:	b085      	sub	sp, #20
 8003d20:	af04      	add	r7, sp, #16
	// CLCD 랩타임 출력 함수
	if(stopwatch.laptime.cnt > 0) {
 8003d22:	4b30      	ldr	r3, [pc, #192]	@ (8003de4 <laptimeDisplay+0xc8>)
 8003d24:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d04d      	beq.n	8003dc8 <laptimeDisplay+0xac>

		if(stopwatch.laptime.cnt <= stopwatch.laptime.displayCnt) {
 8003d2c:	4b2d      	ldr	r3, [pc, #180]	@ (8003de4 <laptimeDisplay+0xc8>)
 8003d2e:	f893 20a4 	ldrb.w	r2, [r3, #164]	@ 0xa4
 8003d32:	4b2c      	ldr	r3, [pc, #176]	@ (8003de4 <laptimeDisplay+0xc8>)
 8003d34:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8003d38:	429a      	cmp	r2, r3
 8003d3a:	d803      	bhi.n	8003d44 <laptimeDisplay+0x28>
			stopwatch.laptime.displayCnt = 0;
 8003d3c:	4b29      	ldr	r3, [pc, #164]	@ (8003de4 <laptimeDisplay+0xc8>)
 8003d3e:	2200      	movs	r2, #0
 8003d40:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
		}

		sprintf(stopwatch.laptime.buffer, "%d/%d %02d:%02d:%02d.%03d",
				(stopwatch.laptime.displayCnt + 1), stopwatch.laptime.cnt,
 8003d44:	4b27      	ldr	r3, [pc, #156]	@ (8003de4 <laptimeDisplay+0xc8>)
 8003d46:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
		sprintf(stopwatch.laptime.buffer, "%d/%d %02d:%02d:%02d.%03d",
 8003d4a:	1c5c      	adds	r4, r3, #1
				(stopwatch.laptime.displayCnt + 1), stopwatch.laptime.cnt,
 8003d4c:	4b25      	ldr	r3, [pc, #148]	@ (8003de4 <laptimeDisplay+0xc8>)
 8003d4e:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
		sprintf(stopwatch.laptime.buffer, "%d/%d %02d:%02d:%02d.%03d",
 8003d52:	461e      	mov	r6, r3
				stopwatch.laptime.saveSpace[stopwatch.laptime.displayCnt].hour,
 8003d54:	4b23      	ldr	r3, [pc, #140]	@ (8003de4 <laptimeDisplay+0xc8>)
 8003d56:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
		sprintf(stopwatch.laptime.buffer, "%d/%d %02d:%02d:%02d.%03d",
 8003d5a:	4a22      	ldr	r2, [pc, #136]	@ (8003de4 <laptimeDisplay+0xc8>)
 8003d5c:	3301      	adds	r3, #1
 8003d5e:	011b      	lsls	r3, r3, #4
 8003d60:	4413      	add	r3, r2
 8003d62:	3304      	adds	r3, #4
 8003d64:	681b      	ldr	r3, [r3, #0]
				stopwatch.laptime.saveSpace[stopwatch.laptime.displayCnt].minute,
 8003d66:	4a1f      	ldr	r2, [pc, #124]	@ (8003de4 <laptimeDisplay+0xc8>)
 8003d68:	f892 20a5 	ldrb.w	r2, [r2, #165]	@ 0xa5
		sprintf(stopwatch.laptime.buffer, "%d/%d %02d:%02d:%02d.%03d",
 8003d6c:	491d      	ldr	r1, [pc, #116]	@ (8003de4 <laptimeDisplay+0xc8>)
 8003d6e:	3201      	adds	r2, #1
 8003d70:	0112      	lsls	r2, r2, #4
 8003d72:	440a      	add	r2, r1
 8003d74:	3208      	adds	r2, #8
 8003d76:	6812      	ldr	r2, [r2, #0]
				stopwatch.laptime.saveSpace[stopwatch.laptime.displayCnt].second,
 8003d78:	491a      	ldr	r1, [pc, #104]	@ (8003de4 <laptimeDisplay+0xc8>)
 8003d7a:	f891 10a5 	ldrb.w	r1, [r1, #165]	@ 0xa5
		sprintf(stopwatch.laptime.buffer, "%d/%d %02d:%02d:%02d.%03d",
 8003d7e:	4819      	ldr	r0, [pc, #100]	@ (8003de4 <laptimeDisplay+0xc8>)
 8003d80:	0109      	lsls	r1, r1, #4
 8003d82:	4401      	add	r1, r0
 8003d84:	311c      	adds	r1, #28
 8003d86:	6809      	ldr	r1, [r1, #0]
				stopwatch.laptime.saveSpace[stopwatch.laptime.displayCnt].millisecond);
 8003d88:	4816      	ldr	r0, [pc, #88]	@ (8003de4 <laptimeDisplay+0xc8>)
 8003d8a:	f890 00a5 	ldrb.w	r0, [r0, #165]	@ 0xa5
		sprintf(stopwatch.laptime.buffer, "%d/%d %02d:%02d:%02d.%03d",
 8003d8e:	4d15      	ldr	r5, [pc, #84]	@ (8003de4 <laptimeDisplay+0xc8>)
 8003d90:	0100      	lsls	r0, r0, #4
 8003d92:	4428      	add	r0, r5
 8003d94:	3020      	adds	r0, #32
 8003d96:	6800      	ldr	r0, [r0, #0]
 8003d98:	9003      	str	r0, [sp, #12]
 8003d9a:	9102      	str	r1, [sp, #8]
 8003d9c:	9201      	str	r2, [sp, #4]
 8003d9e:	9300      	str	r3, [sp, #0]
 8003da0:	4633      	mov	r3, r6
 8003da2:	4622      	mov	r2, r4
 8003da4:	4910      	ldr	r1, [pc, #64]	@ (8003de8 <laptimeDisplay+0xcc>)
 8003da6:	4811      	ldr	r0, [pc, #68]	@ (8003dec <laptimeDisplay+0xd0>)
 8003da8:	f004 f8f4 	bl	8007f94 <siprintf>

		CLCD_Puts(0, 1,stopwatch.laptime.buffer);
 8003dac:	4a0f      	ldr	r2, [pc, #60]	@ (8003dec <laptimeDisplay+0xd0>)
 8003dae:	2101      	movs	r1, #1
 8003db0:	2000      	movs	r0, #0
 8003db2:	f7fd faa1 	bl	80012f8 <CLCD_Puts>

		stopwatch.laptime.displayCnt++;
 8003db6:	4b0b      	ldr	r3, [pc, #44]	@ (8003de4 <laptimeDisplay+0xc8>)
 8003db8:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8003dbc:	3301      	adds	r3, #1
 8003dbe:	b2da      	uxtb	r2, r3
 8003dc0:	4b08      	ldr	r3, [pc, #32]	@ (8003de4 <laptimeDisplay+0xc8>)
 8003dc2:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
	} else {
		CLCD_Puts(0, 1, "                ");
		CLCD_Puts(0, 1, "NO LAP");
	}

}
 8003dc6:	e009      	b.n	8003ddc <laptimeDisplay+0xc0>
		CLCD_Puts(0, 1, "                ");
 8003dc8:	4a09      	ldr	r2, [pc, #36]	@ (8003df0 <laptimeDisplay+0xd4>)
 8003dca:	2101      	movs	r1, #1
 8003dcc:	2000      	movs	r0, #0
 8003dce:	f7fd fa93 	bl	80012f8 <CLCD_Puts>
		CLCD_Puts(0, 1, "NO LAP");
 8003dd2:	4a08      	ldr	r2, [pc, #32]	@ (8003df4 <laptimeDisplay+0xd8>)
 8003dd4:	2101      	movs	r1, #1
 8003dd6:	2000      	movs	r0, #0
 8003dd8:	f7fd fa8e 	bl	80012f8 <CLCD_Puts>
}
 8003ddc:	bf00      	nop
 8003dde:	3704      	adds	r7, #4
 8003de0:	46bd      	mov	sp, r7
 8003de2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003de4:	200000a0 	.word	0x200000a0
 8003de8:	08008b64 	.word	0x08008b64
 8003dec:	20000146 	.word	0x20000146
 8003df0:	08008b40 	.word	0x08008b40
 8003df4:	08008b80 	.word	0x08008b80

08003df8 <clcdStopWatchClear>:

void clcdStopWatchClear() {
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b082      	sub	sp, #8
 8003dfc:	af00      	add	r7, sp, #0
	// CLCD 스탑워치 초기화 함수
	for(int i = 0; i < 9; i++) {
 8003dfe:	2300      	movs	r3, #0
 8003e00:	607b      	str	r3, [r7, #4]
 8003e02:	e020      	b.n	8003e46 <clcdStopWatchClear+0x4e>
		// 랩타임 초기화
		stopwatch.laptime.saveSpace[i].hour = 0;
 8003e04:	4a19      	ldr	r2, [pc, #100]	@ (8003e6c <clcdStopWatchClear+0x74>)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	3301      	adds	r3, #1
 8003e0a:	011b      	lsls	r3, r3, #4
 8003e0c:	4413      	add	r3, r2
 8003e0e:	3304      	adds	r3, #4
 8003e10:	2200      	movs	r2, #0
 8003e12:	601a      	str	r2, [r3, #0]
		stopwatch.laptime.saveSpace[i].minute = 0;
 8003e14:	4a15      	ldr	r2, [pc, #84]	@ (8003e6c <clcdStopWatchClear+0x74>)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	3301      	adds	r3, #1
 8003e1a:	011b      	lsls	r3, r3, #4
 8003e1c:	4413      	add	r3, r2
 8003e1e:	3308      	adds	r3, #8
 8003e20:	2200      	movs	r2, #0
 8003e22:	601a      	str	r2, [r3, #0]
		stopwatch.laptime.saveSpace[i].second = 0;
 8003e24:	4a11      	ldr	r2, [pc, #68]	@ (8003e6c <clcdStopWatchClear+0x74>)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	011b      	lsls	r3, r3, #4
 8003e2a:	4413      	add	r3, r2
 8003e2c:	331c      	adds	r3, #28
 8003e2e:	2200      	movs	r2, #0
 8003e30:	601a      	str	r2, [r3, #0]
		stopwatch.laptime.saveSpace[i].millisecond = 0;
 8003e32:	4a0e      	ldr	r2, [pc, #56]	@ (8003e6c <clcdStopWatchClear+0x74>)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	011b      	lsls	r3, r3, #4
 8003e38:	4413      	add	r3, r2
 8003e3a:	3320      	adds	r3, #32
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < 9; i++) {
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	3301      	adds	r3, #1
 8003e44:	607b      	str	r3, [r7, #4]
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2b08      	cmp	r3, #8
 8003e4a:	dddb      	ble.n	8003e04 <clcdStopWatchClear+0xc>
	}
	stopwatch.laptime.cnt = 0;
 8003e4c:	4b07      	ldr	r3, [pc, #28]	@ (8003e6c <clcdStopWatchClear+0x74>)
 8003e4e:	2200      	movs	r2, #0
 8003e50:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	stopwatch.laptime.displayCnt = 0;
 8003e54:	4b05      	ldr	r3, [pc, #20]	@ (8003e6c <clcdStopWatchClear+0x74>)
 8003e56:	2200      	movs	r2, #0
 8003e58:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
	timerReset();
 8003e5c:	f7ff fe36 	bl	8003acc <timerReset>
	CLCD_Clear();
 8003e60:	f7fd fa91 	bl	8001386 <CLCD_Clear>
}
 8003e64:	bf00      	nop
 8003e66:	3708      	adds	r7, #8
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	bd80      	pop	{r7, pc}
 8003e6c:	200000a0 	.word	0x200000a0

08003e70 <clcdStopWatchMeasure>:

void clcdStopWatchMeasure() {
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b082      	sub	sp, #8
 8003e74:	af02      	add	r7, sp, #8
	// CLCD 스탑워치 출력함수
	if(getBlink() == TRUE || stopwatch.state != RUN) {
 8003e76:	f000 fe75 	bl	8004b64 <getBlink>
 8003e7a:	4603      	mov	r3, r0
 8003e7c:	2b01      	cmp	r3, #1
 8003e7e:	d003      	beq.n	8003e88 <clcdStopWatchMeasure+0x18>
 8003e80:	4b16      	ldr	r3, [pc, #88]	@ (8003edc <clcdStopWatchMeasure+0x6c>)
 8003e82:	785b      	ldrb	r3, [r3, #1]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d010      	beq.n	8003eaa <clcdStopWatchMeasure+0x3a>
		sprintf(stopwatch.laptime.buffer, "STW %02d:%02d:%02d.%03d",
 8003e88:	4b14      	ldr	r3, [pc, #80]	@ (8003edc <clcdStopWatchMeasure+0x6c>)
 8003e8a:	6859      	ldr	r1, [r3, #4]
 8003e8c:	4b13      	ldr	r3, [pc, #76]	@ (8003edc <clcdStopWatchMeasure+0x6c>)
 8003e8e:	6898      	ldr	r0, [r3, #8]
 8003e90:	4b12      	ldr	r3, [pc, #72]	@ (8003edc <clcdStopWatchMeasure+0x6c>)
 8003e92:	68db      	ldr	r3, [r3, #12]
 8003e94:	4a11      	ldr	r2, [pc, #68]	@ (8003edc <clcdStopWatchMeasure+0x6c>)
 8003e96:	6912      	ldr	r2, [r2, #16]
 8003e98:	9201      	str	r2, [sp, #4]
 8003e9a:	9300      	str	r3, [sp, #0]
 8003e9c:	4603      	mov	r3, r0
 8003e9e:	460a      	mov	r2, r1
 8003ea0:	490f      	ldr	r1, [pc, #60]	@ (8003ee0 <clcdStopWatchMeasure+0x70>)
 8003ea2:	4810      	ldr	r0, [pc, #64]	@ (8003ee4 <clcdStopWatchMeasure+0x74>)
 8003ea4:	f004 f876 	bl	8007f94 <siprintf>
 8003ea8:	e00f      	b.n	8003eca <clcdStopWatchMeasure+0x5a>
					stopwatch.time.hour, stopwatch.time.minute,
					stopwatch.time.second, stopwatch.time.millisecond);
	} else {
		sprintf(stopwatch.laptime.buffer, "STW %02d:%02d:%02d %03d",
 8003eaa:	4b0c      	ldr	r3, [pc, #48]	@ (8003edc <clcdStopWatchMeasure+0x6c>)
 8003eac:	6859      	ldr	r1, [r3, #4]
 8003eae:	4b0b      	ldr	r3, [pc, #44]	@ (8003edc <clcdStopWatchMeasure+0x6c>)
 8003eb0:	6898      	ldr	r0, [r3, #8]
 8003eb2:	4b0a      	ldr	r3, [pc, #40]	@ (8003edc <clcdStopWatchMeasure+0x6c>)
 8003eb4:	68db      	ldr	r3, [r3, #12]
 8003eb6:	4a09      	ldr	r2, [pc, #36]	@ (8003edc <clcdStopWatchMeasure+0x6c>)
 8003eb8:	6912      	ldr	r2, [r2, #16]
 8003eba:	9201      	str	r2, [sp, #4]
 8003ebc:	9300      	str	r3, [sp, #0]
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	460a      	mov	r2, r1
 8003ec2:	4909      	ldr	r1, [pc, #36]	@ (8003ee8 <clcdStopWatchMeasure+0x78>)
 8003ec4:	4807      	ldr	r0, [pc, #28]	@ (8003ee4 <clcdStopWatchMeasure+0x74>)
 8003ec6:	f004 f865 	bl	8007f94 <siprintf>
					stopwatch.time.hour, stopwatch.time.minute,
					stopwatch.time.second, stopwatch.time.millisecond);
	}
	CLCD_Puts(0, 0, stopwatch.laptime.buffer);
 8003eca:	4a06      	ldr	r2, [pc, #24]	@ (8003ee4 <clcdStopWatchMeasure+0x74>)
 8003ecc:	2100      	movs	r1, #0
 8003ece:	2000      	movs	r0, #0
 8003ed0:	f7fd fa12 	bl	80012f8 <CLCD_Puts>
}
 8003ed4:	bf00      	nop
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	bd80      	pop	{r7, pc}
 8003eda:	bf00      	nop
 8003edc:	200000a0 	.word	0x200000a0
 8003ee0:	08008b88 	.word	0x08008b88
 8003ee4:	20000146 	.word	0x20000146
 8003ee8:	08008ba0 	.word	0x08008ba0

08003eec <running>:
extern button sw2;
extern button sw3;
extern button sw4;
extern system sys;

void running() {
 8003eec:	b580      	push	{r7, lr}
 8003eee:	af00      	add	r7, sp, #0
	// 모드 동작
	switch (mode) {
 8003ef0:	4b19      	ldr	r3, [pc, #100]	@ (8003f58 <running+0x6c>)
 8003ef2:	781b      	ldrb	r3, [r3, #0]
 8003ef4:	2b05      	cmp	r3, #5
 8003ef6:	d82d      	bhi.n	8003f54 <running+0x68>
 8003ef8:	a201      	add	r2, pc, #4	@ (adr r2, 8003f00 <running+0x14>)
 8003efa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003efe:	bf00      	nop
 8003f00:	08003f19 	.word	0x08003f19
 8003f04:	08003f23 	.word	0x08003f23
 8003f08:	08003f2d 	.word	0x08003f2d
 8003f0c:	08003f37 	.word	0x08003f37
 8003f10:	08003f41 	.word	0x08003f41
 8003f14:	08003f4b 	.word	0x08003f4b
	case CLOCK:
		clcdDisplayClock();
 8003f18:	f7fe fbf8 	bl	800270c <clcdDisplayClock>
		tickClock();
 8003f1c:	f7fe fcd8 	bl	80028d0 <tickClock>
		break;
 8003f20:	e018      	b.n	8003f54 <running+0x68>
	case ALARM:
		clcdDisplayAlarm();
 8003f22:	f7fd fa3b 	bl	800139c <clcdDisplayAlarm>
		tickClock();
 8003f26:	f7fe fcd3 	bl	80028d0 <tickClock>
		break;
 8003f2a:	e013      	b.n	8003f54 <running+0x68>

	case STOPWATCH:
		clcdStopWatchMeasure();
 8003f2c:	f7ff ffa0 	bl	8003e70 <clcdStopWatchMeasure>
		segUpCount();
 8003f30:	f7ff fd7c 	bl	8003a2c <segUpCount>
		break;
 8003f34:	e00e      	b.n	8003f54 <running+0x68>
	case CLOCK_SETTING:
		clcdDisplayClockSetting();
 8003f36:	f7fe fd7f 	bl	8002a38 <clcdDisplayClockSetting>
		tickClock();
 8003f3a:	f7fe fcc9 	bl	80028d0 <tickClock>
		break;
 8003f3e:	e009      	b.n	8003f54 <running+0x68>
	case ALARM_SETTING:
		clcdDisplayAlarmSetting();
 8003f40:	f7fd fb94 	bl	800166c <clcdDisplayAlarmSetting>
		tickClock();
 8003f44:	f7fe fcc4 	bl	80028d0 <tickClock>
		break;
 8003f48:	e004      	b.n	8003f54 <running+0x68>
	case ALARM_TRIGGER:
		clcdDisplayAlarmTrigger();
 8003f4a:	f7fd fad1 	bl	80014f0 <clcdDisplayAlarmTrigger>
		tickClock();
 8003f4e:	f7fe fcbf 	bl	80028d0 <tickClock>
		break;
 8003f52:	bf00      	nop
	}


}
 8003f54:	bf00      	nop
 8003f56:	bd80      	pop	{r7, pc}
 8003f58:	2000033d 	.word	0x2000033d

08003f5c <sw1Controll>:

void sw1Controll() {
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	af00      	add	r7, sp, #0
	// SW1 PE3
	// 모드 변경 기능
	if(mode != ALARM_TRIGGER) {
 8003f60:	4b2c      	ldr	r3, [pc, #176]	@ (8004014 <sw1Controll+0xb8>)
 8003f62:	781b      	ldrb	r3, [r3, #0]
 8003f64:	2b05      	cmp	r3, #5
 8003f66:	d03c      	beq.n	8003fe2 <sw1Controll+0x86>
		if (sw1.state == TRUE) {
 8003f68:	4b2b      	ldr	r3, [pc, #172]	@ (8004018 <sw1Controll+0xbc>)
 8003f6a:	781b      	ldrb	r3, [r3, #0]
 8003f6c:	2b01      	cmp	r3, #1
 8003f6e:	d114      	bne.n	8003f9a <sw1Controll+0x3e>
			if (sw1.flag == FALSE) {
 8003f70:	4b29      	ldr	r3, [pc, #164]	@ (8004018 <sw1Controll+0xbc>)
 8003f72:	785b      	ldrb	r3, [r3, #1]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d10c      	bne.n	8003f92 <sw1Controll+0x36>
				HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 8003f78:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003f7c:	4827      	ldr	r0, [pc, #156]	@ (800401c <sw1Controll+0xc0>)
 8003f7e:	f001 fb2a 	bl	80055d6 <HAL_GPIO_TogglePin>
				sw1DefaultHandler();
 8003f82:	f000 fda7 	bl	8004ad4 <sw1DefaultHandler>
				setWaitingTime(0);
 8003f86:	2000      	movs	r0, #0
 8003f88:	f000 fe04 	bl	8004b94 <setWaitingTime>
				sw1.flag = 1;		// 플래그 변수를 1로 만들어서 버튼을 누르고 있을 때 다시 동작하는 경우 방지
 8003f8c:	4b22      	ldr	r3, [pc, #136]	@ (8004018 <sw1Controll+0xbc>)
 8003f8e:	2201      	movs	r2, #1
 8003f90:	705a      	strb	r2, [r3, #1]
			}
			releasePointing(1);
 8003f92:	2001      	movs	r0, #1
 8003f94:	f000 fd78 	bl	8004a88 <releasePointing>
				sw1.flag = 0;
			}
		}
	}

}
 8003f98:	e03a      	b.n	8004010 <sw1Controll+0xb4>
			if (sw1.flag == TRUE) {
 8003f9a:	4b1f      	ldr	r3, [pc, #124]	@ (8004018 <sw1Controll+0xbc>)
 8003f9c:	785b      	ldrb	r3, [r3, #1]
 8003f9e:	2b01      	cmp	r3, #1
 8003fa0:	d136      	bne.n	8004010 <sw1Controll+0xb4>
				if(rsp == SHORT) {
 8003fa2:	4b1f      	ldr	r3, [pc, #124]	@ (8004020 <sw1Controll+0xc4>)
 8003fa4:	781b      	ldrb	r3, [r3, #0]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d117      	bne.n	8003fda <sw1Controll+0x7e>
					if(mode <= STOPWATCH) {
 8003faa:	4b1a      	ldr	r3, [pc, #104]	@ (8004014 <sw1Controll+0xb8>)
 8003fac:	781b      	ldrb	r3, [r3, #0]
 8003fae:	2b02      	cmp	r3, #2
 8003fb0:	d80d      	bhi.n	8003fce <sw1Controll+0x72>
						if (mode == STOPWATCH) { // 모드변경
 8003fb2:	4b18      	ldr	r3, [pc, #96]	@ (8004014 <sw1Controll+0xb8>)
 8003fb4:	781b      	ldrb	r3, [r3, #0]
 8003fb6:	2b02      	cmp	r3, #2
 8003fb8:	d103      	bne.n	8003fc2 <sw1Controll+0x66>
							mode = CLOCK;
 8003fba:	4b16      	ldr	r3, [pc, #88]	@ (8004014 <sw1Controll+0xb8>)
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	701a      	strb	r2, [r3, #0]
 8003fc0:	e005      	b.n	8003fce <sw1Controll+0x72>
							mode++;
 8003fc2:	4b14      	ldr	r3, [pc, #80]	@ (8004014 <sw1Controll+0xb8>)
 8003fc4:	781b      	ldrb	r3, [r3, #0]
 8003fc6:	3301      	adds	r3, #1
 8003fc8:	b2da      	uxtb	r2, r3
 8003fca:	4b12      	ldr	r3, [pc, #72]	@ (8004014 <sw1Controll+0xb8>)
 8003fcc:	701a      	strb	r2, [r3, #0]
					CLCD_Clear();
 8003fce:	f7fd f9da 	bl	8001386 <CLCD_Clear>
					HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_6);
 8003fd2:	2140      	movs	r1, #64	@ 0x40
 8003fd4:	4813      	ldr	r0, [pc, #76]	@ (8004024 <sw1Controll+0xc8>)
 8003fd6:	f001 fafe 	bl	80055d6 <HAL_GPIO_TogglePin>
				sw1.flag = 0;
 8003fda:	4b0f      	ldr	r3, [pc, #60]	@ (8004018 <sw1Controll+0xbc>)
 8003fdc:	2200      	movs	r2, #0
 8003fde:	705a      	strb	r2, [r3, #1]
}
 8003fe0:	e016      	b.n	8004010 <sw1Controll+0xb4>
		if(sw1.state == TRUE) {
 8003fe2:	4b0d      	ldr	r3, [pc, #52]	@ (8004018 <sw1Controll+0xbc>)
 8003fe4:	781b      	ldrb	r3, [r3, #0]
 8003fe6:	2b01      	cmp	r3, #1
 8003fe8:	d107      	bne.n	8003ffa <sw1Controll+0x9e>
			if(sw1.flag == FALSE) {
 8003fea:	4b0b      	ldr	r3, [pc, #44]	@ (8004018 <sw1Controll+0xbc>)
 8003fec:	785b      	ldrb	r3, [r3, #1]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d10e      	bne.n	8004010 <sw1Controll+0xb4>
				sw1.flag = 1;
 8003ff2:	4b09      	ldr	r3, [pc, #36]	@ (8004018 <sw1Controll+0xbc>)
 8003ff4:	2201      	movs	r2, #1
 8003ff6:	705a      	strb	r2, [r3, #1]
}
 8003ff8:	e00a      	b.n	8004010 <sw1Controll+0xb4>
			if(sw1.flag == TRUE) {
 8003ffa:	4b07      	ldr	r3, [pc, #28]	@ (8004018 <sw1Controll+0xbc>)
 8003ffc:	785b      	ldrb	r3, [r3, #1]
 8003ffe:	2b01      	cmp	r3, #1
 8004000:	d106      	bne.n	8004010 <sw1Controll+0xb4>
				returnToPreviousMode();
 8004002:	f7fd fb23 	bl	800164c <returnToPreviousMode>
				buzReset();
 8004006:	f7fe fa5b 	bl	80024c0 <buzReset>
				sw1.flag = 0;
 800400a:	4b03      	ldr	r3, [pc, #12]	@ (8004018 <sw1Controll+0xbc>)
 800400c:	2200      	movs	r2, #0
 800400e:	705a      	strb	r2, [r3, #1]
}
 8004010:	bf00      	nop
 8004012:	bd80      	pop	{r7, pc}
 8004014:	2000033d 	.word	0x2000033d
 8004018:	200002bc 	.word	0x200002bc
 800401c:	40020c00 	.word	0x40020c00
 8004020:	2000033c 	.word	0x2000033c
 8004024:	40020800 	.word	0x40020800

08004028 <sw2Controll>:

void sw2Controll() {
 8004028:	b580      	push	{r7, lr}
 800402a:	af00      	add	r7, sp, #0
	// SW2 PC15
	switch (mode) {
 800402c:	4b96      	ldr	r3, [pc, #600]	@ (8004288 <sw2Controll+0x260>)
 800402e:	781b      	ldrb	r3, [r3, #0]
 8004030:	2b05      	cmp	r3, #5
 8004032:	f200 8127 	bhi.w	8004284 <sw2Controll+0x25c>
 8004036:	a201      	add	r2, pc, #4	@ (adr r2, 800403c <sw2Controll+0x14>)
 8004038:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800403c:	08004055 	.word	0x08004055
 8004040:	080040b9 	.word	0x080040b9
 8004044:	08004111 	.word	0x08004111
 8004048:	080041a3 	.word	0x080041a3
 800404c:	080041f1 	.word	0x080041f1
 8004050:	0800423f 	.word	0x0800423f
	case CLOCK:		// 시계모드 일때 PC15 기능
		// 부저 on, off
		if(sw2.state == TRUE) {
 8004054:	4b8d      	ldr	r3, [pc, #564]	@ (800428c <sw2Controll+0x264>)
 8004056:	781b      	ldrb	r3, [r3, #0]
 8004058:	2b01      	cmp	r3, #1
 800405a:	d111      	bne.n	8004080 <sw2Controll+0x58>
			if (sw2.flag == FALSE) {
 800405c:	4b8b      	ldr	r3, [pc, #556]	@ (800428c <sw2Controll+0x264>)
 800405e:	785b      	ldrb	r3, [r3, #1]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d109      	bne.n	8004078 <sw2Controll+0x50>
				sw2.flag = 1;
 8004064:	4b89      	ldr	r3, [pc, #548]	@ (800428c <sw2Controll+0x264>)
 8004066:	2201      	movs	r2, #1
 8004068:	705a      	strb	r2, [r3, #1]
				sw2DefaultHandler();
 800406a:	f000 fd45 	bl	8004af8 <sw2DefaultHandler>
				HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 800406e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8004072:	4887      	ldr	r0, [pc, #540]	@ (8004290 <sw2Controll+0x268>)
 8004074:	f001 faaf 	bl	80055d6 <HAL_GPIO_TogglePin>

			}
			releasePointing(2);
 8004078:	2002      	movs	r0, #2
 800407a:	f000 fd05 	bl	8004a88 <releasePointing>
				sw2.flag = 0;
			}
		}


		break;
 800407e:	e0f6      	b.n	800426e <sw2Controll+0x246>
			if (sw2.flag == TRUE) {
 8004080:	4b82      	ldr	r3, [pc, #520]	@ (800428c <sw2Controll+0x264>)
 8004082:	785b      	ldrb	r3, [r3, #1]
 8004084:	2b01      	cmp	r3, #1
 8004086:	f040 80f2 	bne.w	800426e <sw2Controll+0x246>
				if (rsp == SHORT) {
 800408a:	4b82      	ldr	r3, [pc, #520]	@ (8004294 <sw2Controll+0x26c>)
 800408c:	781b      	ldrb	r3, [r3, #0]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d10a      	bne.n	80040a8 <sw2Controll+0x80>
					setBuzzEnabled(!getBuzzEnabled()); 	// 부저 활성, 비활성 함수
 8004092:	f7fe fa53 	bl	800253c <getBuzzEnabled>
 8004096:	4603      	mov	r3, r0
 8004098:	2b00      	cmp	r3, #0
 800409a:	bf0c      	ite	eq
 800409c:	2301      	moveq	r3, #1
 800409e:	2300      	movne	r3, #0
 80040a0:	b2db      	uxtb	r3, r3
 80040a2:	4618      	mov	r0, r3
 80040a4:	f7fe fa56 	bl	8002554 <setBuzzEnabled>
				HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_6);
 80040a8:	2140      	movs	r1, #64	@ 0x40
 80040aa:	487b      	ldr	r0, [pc, #492]	@ (8004298 <sw2Controll+0x270>)
 80040ac:	f001 fa93 	bl	80055d6 <HAL_GPIO_TogglePin>
				sw2.flag = 0;
 80040b0:	4b76      	ldr	r3, [pc, #472]	@ (800428c <sw2Controll+0x264>)
 80040b2:	2200      	movs	r2, #0
 80040b4:	705a      	strb	r2, [r3, #1]
		break;
 80040b6:	e0da      	b.n	800426e <sw2Controll+0x246>
	case ALARM:	// 알람 모드일 때 PC15 기능
		if (sw2.state == TRUE) {
 80040b8:	4b74      	ldr	r3, [pc, #464]	@ (800428c <sw2Controll+0x264>)
 80040ba:	781b      	ldrb	r3, [r3, #0]
 80040bc:	2b01      	cmp	r3, #1
 80040be:	d114      	bne.n	80040ea <sw2Controll+0xc2>
			if (sw2.flag == FALSE) {
 80040c0:	4b72      	ldr	r3, [pc, #456]	@ (800428c <sw2Controll+0x264>)
 80040c2:	785b      	ldrb	r3, [r3, #1]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d10c      	bne.n	80040e2 <sw2Controll+0xba>
				sw2.flag = 1;
 80040c8:	4b70      	ldr	r3, [pc, #448]	@ (800428c <sw2Controll+0x264>)
 80040ca:	2201      	movs	r2, #1
 80040cc:	705a      	strb	r2, [r3, #1]
				sw2DefaultHandler();
 80040ce:	f000 fd13 	bl	8004af8 <sw2DefaultHandler>
				setWaitingTime(0);
 80040d2:	2000      	movs	r0, #0
 80040d4:	f000 fd5e 	bl	8004b94 <setWaitingTime>
				HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 80040d8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80040dc:	486c      	ldr	r0, [pc, #432]	@ (8004290 <sw2Controll+0x268>)
 80040de:	f001 fa7a 	bl	80055d6 <HAL_GPIO_TogglePin>
			}
			releasePointing(2);
 80040e2:	2002      	movs	r0, #2
 80040e4:	f000 fcd0 	bl	8004a88 <releasePointing>
				sw2.flag = 0;
				HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_6);
			}
		}

		break;
 80040e8:	e0c3      	b.n	8004272 <sw2Controll+0x24a>
			if(sw2.flag == TRUE) {
 80040ea:	4b68      	ldr	r3, [pc, #416]	@ (800428c <sw2Controll+0x264>)
 80040ec:	785b      	ldrb	r3, [r3, #1]
 80040ee:	2b01      	cmp	r3, #1
 80040f0:	f040 80bf 	bne.w	8004272 <sw2Controll+0x24a>
				if (rsp == SHORT) {
 80040f4:	4b67      	ldr	r3, [pc, #412]	@ (8004294 <sw2Controll+0x26c>)
 80040f6:	781b      	ldrb	r3, [r3, #0]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d101      	bne.n	8004100 <sw2Controll+0xd8>
					selectAlarm();
 80040fc:	f7fd fa1e 	bl	800153c <selectAlarm>
				sw2.flag = 0;
 8004100:	4b62      	ldr	r3, [pc, #392]	@ (800428c <sw2Controll+0x264>)
 8004102:	2200      	movs	r2, #0
 8004104:	705a      	strb	r2, [r3, #1]
				HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_6);
 8004106:	2140      	movs	r1, #64	@ 0x40
 8004108:	4863      	ldr	r0, [pc, #396]	@ (8004298 <sw2Controll+0x270>)
 800410a:	f001 fa64 	bl	80055d6 <HAL_GPIO_TogglePin>
		break;
 800410e:	e0b0      	b.n	8004272 <sw2Controll+0x24a>
	case STOPWATCH: // 스탑워치 모드일 때 PC15 기능
		// 스탑워치 시작, 일시정지, 재개 함수
		if(sw2.state == TRUE) {
 8004110:	4b5e      	ldr	r3, [pc, #376]	@ (800428c <sw2Controll+0x264>)
 8004112:	781b      	ldrb	r3, [r3, #0]
 8004114:	2b01      	cmp	r3, #1
 8004116:	d111      	bne.n	800413c <sw2Controll+0x114>
			if (sw2.flag == FALSE) {
 8004118:	4b5c      	ldr	r3, [pc, #368]	@ (800428c <sw2Controll+0x264>)
 800411a:	785b      	ldrb	r3, [r3, #1]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d118      	bne.n	8004152 <sw2Controll+0x12a>
				sw2.flag = 1;
 8004120:	4b5a      	ldr	r3, [pc, #360]	@ (800428c <sw2Controll+0x264>)
 8004122:	2201      	movs	r2, #1
 8004124:	705a      	strb	r2, [r3, #1]
				sw2DefaultHandler();
 8004126:	f000 fce7 	bl	8004af8 <sw2DefaultHandler>
				setWaitingTime(0);
 800412a:	2000      	movs	r0, #0
 800412c:	f000 fd32 	bl	8004b94 <setWaitingTime>
				HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 8004130:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8004134:	4856      	ldr	r0, [pc, #344]	@ (8004290 <sw2Controll+0x268>)
 8004136:	f001 fa4e 	bl	80055d6 <HAL_GPIO_TogglePin>
 800413a:	e00a      	b.n	8004152 <sw2Controll+0x12a>
			}

		} else {
			if (sw2.flag == TRUE) {
 800413c:	4b53      	ldr	r3, [pc, #332]	@ (800428c <sw2Controll+0x264>)
 800413e:	785b      	ldrb	r3, [r3, #1]
 8004140:	2b01      	cmp	r3, #1
 8004142:	d106      	bne.n	8004152 <sw2Controll+0x12a>
				sw2.flag = 0;
 8004144:	4b51      	ldr	r3, [pc, #324]	@ (800428c <sw2Controll+0x264>)
 8004146:	2200      	movs	r2, #0
 8004148:	705a      	strb	r2, [r3, #1]
				HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_6);
 800414a:	2140      	movs	r1, #64	@ 0x40
 800414c:	4852      	ldr	r0, [pc, #328]	@ (8004298 <sw2Controll+0x270>)
 800414e:	f001 fa42 	bl	80055d6 <HAL_GPIO_TogglePin>
			}
		}
		if(stopwatch.onOffState == TRUE) {
 8004152:	4b52      	ldr	r3, [pc, #328]	@ (800429c <sw2Controll+0x274>)
 8004154:	781b      	ldrb	r3, [r3, #0]
 8004156:	2b01      	cmp	r3, #1
 8004158:	d115      	bne.n	8004186 <sw2Controll+0x15e>

			switch (stopwatch.state) {
 800415a:	4b50      	ldr	r3, [pc, #320]	@ (800429c <sw2Controll+0x274>)
 800415c:	785b      	ldrb	r3, [r3, #1]
 800415e:	2b02      	cmp	r3, #2
 8004160:	d006      	beq.n	8004170 <sw2Controll+0x148>
 8004162:	2b02      	cmp	r3, #2
 8004164:	dc0b      	bgt.n	800417e <sw2Controll+0x156>
 8004166:	2b00      	cmp	r3, #0
 8004168:	d008      	beq.n	800417c <sw2Controll+0x154>
 800416a:	2b01      	cmp	r3, #1
 800416c:	d003      	beq.n	8004176 <sw2Controll+0x14e>
 800416e:	e006      	b.n	800417e <sw2Controll+0x156>
			case STOP:
				timerReset(); // 시작 전 타이머 0으로 리셋
 8004170:	f7ff fcac 	bl	8003acc <timerReset>
				break;
 8004174:	e003      	b.n	800417e <sw2Controll+0x156>
			case PAUSE:
				timerResum(); // 일시정지 전 흘렀던 시간 가져오기
 8004176:	f7ff fcdb 	bl	8003b30 <timerResum>
				break;
 800417a:	e000      	b.n	800417e <sw2Controll+0x156>
			case RUN:
				break;
 800417c:	bf00      	nop
			}
			// 스탑워치 동작상태 RUN 으로 변경
			stopwatch.state = RUN;
 800417e:	4b47      	ldr	r3, [pc, #284]	@ (800429c <sw2Controll+0x274>)
 8004180:	2200      	movs	r2, #0
 8004182:	705a      	strb	r2, [r3, #1]
			// 스탑워치 동작상태 PAUSE 로 변경 후 흘렀던 시간 저장
			stopwatch.state = PAUSE;
			timerPaused();
		}

		break;
 8004184:	e077      	b.n	8004276 <sw2Controll+0x24e>
		} else if(stopwatch.onOffState == FALSE && stopwatch.state == RUN) {
 8004186:	4b45      	ldr	r3, [pc, #276]	@ (800429c <sw2Controll+0x274>)
 8004188:	781b      	ldrb	r3, [r3, #0]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d173      	bne.n	8004276 <sw2Controll+0x24e>
 800418e:	4b43      	ldr	r3, [pc, #268]	@ (800429c <sw2Controll+0x274>)
 8004190:	785b      	ldrb	r3, [r3, #1]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d16f      	bne.n	8004276 <sw2Controll+0x24e>
			stopwatch.state = PAUSE;
 8004196:	4b41      	ldr	r3, [pc, #260]	@ (800429c <sw2Controll+0x274>)
 8004198:	2201      	movs	r2, #1
 800419a:	705a      	strb	r2, [r3, #1]
			timerPaused();
 800419c:	f7ff fcac 	bl	8003af8 <timerPaused>
		break;
 80041a0:	e069      	b.n	8004276 <sw2Controll+0x24e>
	case CLOCK_SETTING: // 시계설정모드 일때 PC15 기능
		if(sw2.state == TRUE) {
 80041a2:	4b3a      	ldr	r3, [pc, #232]	@ (800428c <sw2Controll+0x264>)
 80041a4:	781b      	ldrb	r3, [r3, #0]
 80041a6:	2b01      	cmp	r3, #1
 80041a8:	d116      	bne.n	80041d8 <sw2Controll+0x1b0>
			if(sw2.flag == FALSE) {
 80041aa:	4b38      	ldr	r3, [pc, #224]	@ (800428c <sw2Controll+0x264>)
 80041ac:	785b      	ldrb	r3, [r3, #1]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d10e      	bne.n	80041d0 <sw2Controll+0x1a8>
				sw2.flag = 1;
 80041b2:	4b36      	ldr	r3, [pc, #216]	@ (800428c <sw2Controll+0x264>)
 80041b4:	2201      	movs	r2, #1
 80041b6:	705a      	strb	r2, [r3, #1]
				sw2DefaultHandler();
 80041b8:	f000 fc9e 	bl	8004af8 <sw2DefaultHandler>
				setWaitingTime(0);
 80041bc:	2000      	movs	r0, #0
 80041be:	f000 fce9 	bl	8004b94 <setWaitingTime>
				settingTime();
 80041c2:	f7fe fdb5 	bl	8002d30 <settingTime>
				HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 80041c6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80041ca:	4831      	ldr	r0, [pc, #196]	@ (8004290 <sw2Controll+0x268>)
 80041cc:	f001 fa03 	bl	80055d6 <HAL_GPIO_TogglePin>
			}
			releasePointing(2);
 80041d0:	2002      	movs	r0, #2
 80041d2:	f000 fc59 	bl	8004a88 <releasePointing>
			if(sw2.flag == TRUE) {
				sw2.flag = 0;
				HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_6);
			}
		}
		break;
 80041d6:	e050      	b.n	800427a <sw2Controll+0x252>
			if(sw2.flag == TRUE) {
 80041d8:	4b2c      	ldr	r3, [pc, #176]	@ (800428c <sw2Controll+0x264>)
 80041da:	785b      	ldrb	r3, [r3, #1]
 80041dc:	2b01      	cmp	r3, #1
 80041de:	d14c      	bne.n	800427a <sw2Controll+0x252>
				sw2.flag = 0;
 80041e0:	4b2a      	ldr	r3, [pc, #168]	@ (800428c <sw2Controll+0x264>)
 80041e2:	2200      	movs	r2, #0
 80041e4:	705a      	strb	r2, [r3, #1]
				HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_6);
 80041e6:	2140      	movs	r1, #64	@ 0x40
 80041e8:	482b      	ldr	r0, [pc, #172]	@ (8004298 <sw2Controll+0x270>)
 80041ea:	f001 f9f4 	bl	80055d6 <HAL_GPIO_TogglePin>
		break;
 80041ee:	e044      	b.n	800427a <sw2Controll+0x252>
	case ALARM_SETTING:
		if(sw2.state == TRUE) {
 80041f0:	4b26      	ldr	r3, [pc, #152]	@ (800428c <sw2Controll+0x264>)
 80041f2:	781b      	ldrb	r3, [r3, #0]
 80041f4:	2b01      	cmp	r3, #1
 80041f6:	d116      	bne.n	8004226 <sw2Controll+0x1fe>
			if(sw2.flag == FALSE) {
 80041f8:	4b24      	ldr	r3, [pc, #144]	@ (800428c <sw2Controll+0x264>)
 80041fa:	785b      	ldrb	r3, [r3, #1]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d10e      	bne.n	800421e <sw2Controll+0x1f6>
				sw2.flag = 1;
 8004200:	4b22      	ldr	r3, [pc, #136]	@ (800428c <sw2Controll+0x264>)
 8004202:	2201      	movs	r2, #1
 8004204:	705a      	strb	r2, [r3, #1]
				sw2DefaultHandler();
 8004206:	f000 fc77 	bl	8004af8 <sw2DefaultHandler>
				setWaitingTime(0);
 800420a:	2000      	movs	r0, #0
 800420c:	f000 fcc2 	bl	8004b94 <setWaitingTime>
				settingAlarm();
 8004210:	f7fd fe8c 	bl	8001f2c <settingAlarm>
				HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 8004214:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8004218:	481d      	ldr	r0, [pc, #116]	@ (8004290 <sw2Controll+0x268>)
 800421a:	f001 f9dc 	bl	80055d6 <HAL_GPIO_TogglePin>
			}
			releasePointing(2);
 800421e:	2002      	movs	r0, #2
 8004220:	f000 fc32 	bl	8004a88 <releasePointing>
			if(sw2.flag == TRUE) {
				sw2.flag = 0;
				HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_6);
			}
		}
		break;
 8004224:	e02b      	b.n	800427e <sw2Controll+0x256>
			if(sw2.flag == TRUE) {
 8004226:	4b19      	ldr	r3, [pc, #100]	@ (800428c <sw2Controll+0x264>)
 8004228:	785b      	ldrb	r3, [r3, #1]
 800422a:	2b01      	cmp	r3, #1
 800422c:	d127      	bne.n	800427e <sw2Controll+0x256>
				sw2.flag = 0;
 800422e:	4b17      	ldr	r3, [pc, #92]	@ (800428c <sw2Controll+0x264>)
 8004230:	2200      	movs	r2, #0
 8004232:	705a      	strb	r2, [r3, #1]
				HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_6);
 8004234:	2140      	movs	r1, #64	@ 0x40
 8004236:	4818      	ldr	r0, [pc, #96]	@ (8004298 <sw2Controll+0x270>)
 8004238:	f001 f9cd 	bl	80055d6 <HAL_GPIO_TogglePin>
		break;
 800423c:	e01f      	b.n	800427e <sw2Controll+0x256>
	case ALARM_TRIGGER:
		if(sw2.state == TRUE) {
 800423e:	4b13      	ldr	r3, [pc, #76]	@ (800428c <sw2Controll+0x264>)
 8004240:	781b      	ldrb	r3, [r3, #0]
 8004242:	2b01      	cmp	r3, #1
 8004244:	d107      	bne.n	8004256 <sw2Controll+0x22e>
			if(sw2.flag == FALSE) {
 8004246:	4b11      	ldr	r3, [pc, #68]	@ (800428c <sw2Controll+0x264>)
 8004248:	785b      	ldrb	r3, [r3, #1]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d119      	bne.n	8004282 <sw2Controll+0x25a>
				sw2.flag = 1;
 800424e:	4b0f      	ldr	r3, [pc, #60]	@ (800428c <sw2Controll+0x264>)
 8004250:	2201      	movs	r2, #1
 8004252:	705a      	strb	r2, [r3, #1]
				returnToPreviousMode();
				buzReset();
				sw2.flag = 0;
			}
		}
		break;
 8004254:	e015      	b.n	8004282 <sw2Controll+0x25a>
			if(sw2.flag == TRUE) {
 8004256:	4b0d      	ldr	r3, [pc, #52]	@ (800428c <sw2Controll+0x264>)
 8004258:	785b      	ldrb	r3, [r3, #1]
 800425a:	2b01      	cmp	r3, #1
 800425c:	d111      	bne.n	8004282 <sw2Controll+0x25a>
				returnToPreviousMode();
 800425e:	f7fd f9f5 	bl	800164c <returnToPreviousMode>
				buzReset();
 8004262:	f7fe f92d 	bl	80024c0 <buzReset>
				sw2.flag = 0;
 8004266:	4b09      	ldr	r3, [pc, #36]	@ (800428c <sw2Controll+0x264>)
 8004268:	2200      	movs	r2, #0
 800426a:	705a      	strb	r2, [r3, #1]
		break;
 800426c:	e009      	b.n	8004282 <sw2Controll+0x25a>
		break;
 800426e:	bf00      	nop
 8004270:	e008      	b.n	8004284 <sw2Controll+0x25c>
		break;
 8004272:	bf00      	nop
 8004274:	e006      	b.n	8004284 <sw2Controll+0x25c>
		break;
 8004276:	bf00      	nop
 8004278:	e004      	b.n	8004284 <sw2Controll+0x25c>
		break;
 800427a:	bf00      	nop
 800427c:	e002      	b.n	8004284 <sw2Controll+0x25c>
		break;
 800427e:	bf00      	nop
 8004280:	e000      	b.n	8004284 <sw2Controll+0x25c>
		break;
 8004282:	bf00      	nop
	}
}
 8004284:	bf00      	nop
 8004286:	bd80      	pop	{r7, pc}
 8004288:	2000033d 	.word	0x2000033d
 800428c:	200002d8 	.word	0x200002d8
 8004290:	40020c00 	.word	0x40020c00
 8004294:	2000033c 	.word	0x2000033c
 8004298:	40020800 	.word	0x40020800
 800429c:	200000a0 	.word	0x200000a0

080042a0 <sw3Controll>:

void sw3Controll() {
 80042a0:	b598      	push	{r3, r4, r7, lr}
 80042a2:	af00      	add	r7, sp, #0
	// SW3 PD4
	switch (mode) {
 80042a4:	4bac      	ldr	r3, [pc, #688]	@ (8004558 <sw3Controll+0x2b8>)
 80042a6:	781b      	ldrb	r3, [r3, #0]
 80042a8:	2b05      	cmp	r3, #5
 80042aa:	f200 8162 	bhi.w	8004572 <sw3Controll+0x2d2>
 80042ae:	a201      	add	r2, pc, #4	@ (adr r2, 80042b4 <sw3Controll+0x14>)
 80042b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042b4:	080042cd 	.word	0x080042cd
 80042b8:	08004331 	.word	0x08004331
 80042bc:	080043ad 	.word	0x080043ad
 80042c0:	0800446d 	.word	0x0800446d
 80042c4:	080044c1 	.word	0x080044c1
 80042c8:	08004515 	.word	0x08004515
	case CLOCK:		// 시계모드 일때 PD4 기능
		//	시간 포멧 변경
		if (sw3.state == TRUE) {
 80042cc:	4ba3      	ldr	r3, [pc, #652]	@ (800455c <sw3Controll+0x2bc>)
 80042ce:	781b      	ldrb	r3, [r3, #0]
 80042d0:	2b01      	cmp	r3, #1
 80042d2:	d111      	bne.n	80042f8 <sw3Controll+0x58>
			if (sw3.flag == FALSE) {
 80042d4:	4ba1      	ldr	r3, [pc, #644]	@ (800455c <sw3Controll+0x2bc>)
 80042d6:	785b      	ldrb	r3, [r3, #1]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d109      	bne.n	80042f0 <sw3Controll+0x50>
				sw3.flag = 1;
 80042dc:	4b9f      	ldr	r3, [pc, #636]	@ (800455c <sw3Controll+0x2bc>)
 80042de:	2201      	movs	r2, #1
 80042e0:	705a      	strb	r2, [r3, #1]
				sw3DefaultHandler();
 80042e2:	f000 fc1b 	bl	8004b1c <sw3DefaultHandler>
				HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 80042e6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80042ea:	489d      	ldr	r0, [pc, #628]	@ (8004560 <sw3Controll+0x2c0>)
 80042ec:	f001 f973 	bl	80055d6 <HAL_GPIO_TogglePin>
			}
			releasePointing(3);
 80042f0:	2003      	movs	r0, #3
 80042f2:	f000 fbc9 	bl	8004a88 <releasePointing>
				sw3.flag = 0;
				HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_6);
			}
		}

		break;
 80042f6:	e125      	b.n	8004544 <sw3Controll+0x2a4>
			if (sw3.flag == TRUE) {
 80042f8:	4b98      	ldr	r3, [pc, #608]	@ (800455c <sw3Controll+0x2bc>)
 80042fa:	785b      	ldrb	r3, [r3, #1]
 80042fc:	2b01      	cmp	r3, #1
 80042fe:	f040 8121 	bne.w	8004544 <sw3Controll+0x2a4>
				if (rsp == SHORT) {
 8004302:	4b98      	ldr	r3, [pc, #608]	@ (8004564 <sw3Controll+0x2c4>)
 8004304:	781b      	ldrb	r3, [r3, #0]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d10a      	bne.n	8004320 <sw3Controll+0x80>
					setTimeFormet(!getTimeFormet()); // 시간포멧 변경
 800430a:	f7fe fed1 	bl	80030b0 <getTimeFormet>
 800430e:	4603      	mov	r3, r0
 8004310:	2b00      	cmp	r3, #0
 8004312:	bf0c      	ite	eq
 8004314:	2301      	moveq	r3, #1
 8004316:	2300      	movne	r3, #0
 8004318:	b2db      	uxtb	r3, r3
 800431a:	4618      	mov	r0, r3
 800431c:	f7fe fed4 	bl	80030c8 <setTimeFormet>
				sw3.flag = 0;
 8004320:	4b8e      	ldr	r3, [pc, #568]	@ (800455c <sw3Controll+0x2bc>)
 8004322:	2200      	movs	r2, #0
 8004324:	705a      	strb	r2, [r3, #1]
				HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_6);
 8004326:	2140      	movs	r1, #64	@ 0x40
 8004328:	488f      	ldr	r0, [pc, #572]	@ (8004568 <sw3Controll+0x2c8>)
 800432a:	f001 f954 	bl	80055d6 <HAL_GPIO_TogglePin>
		break;
 800432e:	e109      	b.n	8004544 <sw3Controll+0x2a4>
	case ALARM:	// 알람 모드일 때 PD4 기능
		if (sw3.state == TRUE) {
 8004330:	4b8a      	ldr	r3, [pc, #552]	@ (800455c <sw3Controll+0x2bc>)
 8004332:	781b      	ldrb	r3, [r3, #0]
 8004334:	2b01      	cmp	r3, #1
 8004336:	d114      	bne.n	8004362 <sw3Controll+0xc2>
			if (sw3.flag == FALSE) {
 8004338:	4b88      	ldr	r3, [pc, #544]	@ (800455c <sw3Controll+0x2bc>)
 800433a:	785b      	ldrb	r3, [r3, #1]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d10c      	bne.n	800435a <sw3Controll+0xba>
				sw3.flag = 1;
 8004340:	4b86      	ldr	r3, [pc, #536]	@ (800455c <sw3Controll+0x2bc>)
 8004342:	2201      	movs	r2, #1
 8004344:	705a      	strb	r2, [r3, #1]
				sw3DefaultHandler();
 8004346:	f000 fbe9 	bl	8004b1c <sw3DefaultHandler>
				setWaitingTime(0);
 800434a:	2000      	movs	r0, #0
 800434c:	f000 fc22 	bl	8004b94 <setWaitingTime>
				HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 8004350:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8004354:	4882      	ldr	r0, [pc, #520]	@ (8004560 <sw3Controll+0x2c0>)
 8004356:	f001 f93e 	bl	80055d6 <HAL_GPIO_TogglePin>
			}
			releasePointing(3);
 800435a:	2003      	movs	r0, #3
 800435c:	f000 fb94 	bl	8004a88 <releasePointing>
				}
				sw3.flag = 0;
				HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_6);
			}
		}
		break;
 8004360:	e0f2      	b.n	8004548 <sw3Controll+0x2a8>
			if (sw3.flag == TRUE) {
 8004362:	4b7e      	ldr	r3, [pc, #504]	@ (800455c <sw3Controll+0x2bc>)
 8004364:	785b      	ldrb	r3, [r3, #1]
 8004366:	2b01      	cmp	r3, #1
 8004368:	f040 80ee 	bne.w	8004548 <sw3Controll+0x2a8>
				if (rsp == SHORT) {
 800436c:	4b7d      	ldr	r3, [pc, #500]	@ (8004564 <sw3Controll+0x2c4>)
 800436e:	781b      	ldrb	r3, [r3, #0]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d113      	bne.n	800439c <sw3Controll+0xfc>
					setAlarmEnabled(!getAlarmEnabled(getSelect()), getSelect());
 8004374:	f7fd ff62 	bl	800223c <getSelect>
 8004378:	4603      	mov	r3, r0
 800437a:	4618      	mov	r0, r3
 800437c:	f7fd ff6a 	bl	8002254 <getAlarmEnabled>
 8004380:	4603      	mov	r3, r0
 8004382:	2b00      	cmp	r3, #0
 8004384:	bf0c      	ite	eq
 8004386:	2301      	moveq	r3, #1
 8004388:	2300      	movne	r3, #0
 800438a:	b2db      	uxtb	r3, r3
 800438c:	461c      	mov	r4, r3
 800438e:	f7fd ff55 	bl	800223c <getSelect>
 8004392:	4603      	mov	r3, r0
 8004394:	4619      	mov	r1, r3
 8004396:	4620      	mov	r0, r4
 8004398:	f7fd ff72 	bl	8002280 <setAlarmEnabled>
				sw3.flag = 0;
 800439c:	4b6f      	ldr	r3, [pc, #444]	@ (800455c <sw3Controll+0x2bc>)
 800439e:	2200      	movs	r2, #0
 80043a0:	705a      	strb	r2, [r3, #1]
				HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_6);
 80043a2:	2140      	movs	r1, #64	@ 0x40
 80043a4:	4870      	ldr	r0, [pc, #448]	@ (8004568 <sw3Controll+0x2c8>)
 80043a6:	f001 f916 	bl	80055d6 <HAL_GPIO_TogglePin>
		break;
 80043aa:	e0cd      	b.n	8004548 <sw3Controll+0x2a8>
	case STOPWATCH:	// 스탑워치 모드일 때 PD4 기능
		// 스탑워치리셋, 랩타임저장, CLCD초기화 함수
		if (sw3.state == TRUE) {
 80043ac:	4b6b      	ldr	r3, [pc, #428]	@ (800455c <sw3Controll+0x2bc>)
 80043ae:	781b      	ldrb	r3, [r3, #0]
 80043b0:	2b01      	cmp	r3, #1
 80043b2:	d149      	bne.n	8004448 <sw3Controll+0x1a8>
			setWaitingTime(0);
 80043b4:	2000      	movs	r0, #0
 80043b6:	f000 fbed 	bl	8004b94 <setWaitingTime>
			switch (stopwatch.state) {
 80043ba:	4b6c      	ldr	r3, [pc, #432]	@ (800456c <sw3Controll+0x2cc>)
 80043bc:	785b      	ldrb	r3, [r3, #1]
 80043be:	2b02      	cmp	r3, #2
 80043c0:	d007      	beq.n	80043d2 <sw3Controll+0x132>
 80043c2:	2b02      	cmp	r3, #2
 80043c4:	f300 80c2 	bgt.w	800454c <sw3Controll+0x2ac>
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d02c      	beq.n	8004426 <sw3Controll+0x186>
 80043cc:	2b01      	cmp	r3, #1
 80043ce:	d016      	beq.n	80043fe <sw3Controll+0x15e>
			if(sw3.flag == TRUE) {
				sw3.flag = 0;
				HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_6);
			}
		}
		break;
 80043d0:	e0bc      	b.n	800454c <sw3Controll+0x2ac>
				if (sw3.flag == FALSE) {
 80043d2:	4b62      	ldr	r3, [pc, #392]	@ (800455c <sw3Controll+0x2bc>)
 80043d4:	785b      	ldrb	r3, [r3, #1]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d142      	bne.n	8004460 <sw3Controll+0x1c0>
					stopwatch.state = STOP;
 80043da:	4b64      	ldr	r3, [pc, #400]	@ (800456c <sw3Controll+0x2cc>)
 80043dc:	2202      	movs	r2, #2
 80043de:	705a      	strb	r2, [r3, #1]
					segReset(); // 7세그먼트 초기화, clcd와 랩타임 저장 초기화
 80043e0:	f7ff fb66 	bl	8003ab0 <segReset>
					clcdStopWatchClear();
 80043e4:	f7ff fd08 	bl	8003df8 <clcdStopWatchClear>
					sw4DefaultHandler();
 80043e8:	f000 fbaa 	bl	8004b40 <sw4DefaultHandler>
					HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 80043ec:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80043f0:	485b      	ldr	r0, [pc, #364]	@ (8004560 <sw3Controll+0x2c0>)
 80043f2:	f001 f8f0 	bl	80055d6 <HAL_GPIO_TogglePin>
					sw3.flag = 1;
 80043f6:	4b59      	ldr	r3, [pc, #356]	@ (800455c <sw3Controll+0x2bc>)
 80043f8:	2201      	movs	r2, #1
 80043fa:	705a      	strb	r2, [r3, #1]
				break;
 80043fc:	e030      	b.n	8004460 <sw3Controll+0x1c0>
				if (sw3.flag == FALSE) {
 80043fe:	4b57      	ldr	r3, [pc, #348]	@ (800455c <sw3Controll+0x2bc>)
 8004400:	785b      	ldrb	r3, [r3, #1]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d12e      	bne.n	8004464 <sw3Controll+0x1c4>
					stopwatch.state = STOP;
 8004406:	4b59      	ldr	r3, [pc, #356]	@ (800456c <sw3Controll+0x2cc>)
 8004408:	2202      	movs	r2, #2
 800440a:	705a      	strb	r2, [r3, #1]
					clcdStopWatchClear();// clcd와 랩타임 저장 초기화
 800440c:	f7ff fcf4 	bl	8003df8 <clcdStopWatchClear>
					sw4DefaultHandler();
 8004410:	f000 fb96 	bl	8004b40 <sw4DefaultHandler>
					HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 8004414:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8004418:	4851      	ldr	r0, [pc, #324]	@ (8004560 <sw3Controll+0x2c0>)
 800441a:	f001 f8dc 	bl	80055d6 <HAL_GPIO_TogglePin>
					sw3.flag = 1;
 800441e:	4b4f      	ldr	r3, [pc, #316]	@ (800455c <sw3Controll+0x2bc>)
 8004420:	2201      	movs	r2, #1
 8004422:	705a      	strb	r2, [r3, #1]
				break;
 8004424:	e01e      	b.n	8004464 <sw3Controll+0x1c4>
				if (sw3.flag == FALSE) {
 8004426:	4b4d      	ldr	r3, [pc, #308]	@ (800455c <sw3Controll+0x2bc>)
 8004428:	785b      	ldrb	r3, [r3, #1]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d11c      	bne.n	8004468 <sw3Controll+0x1c8>
					laptimeSave(); // 랩타임 저장
 800442e:	f7ff fbe5 	bl	8003bfc <laptimeSave>
					sw4DefaultHandler();
 8004432:	f000 fb85 	bl	8004b40 <sw4DefaultHandler>
					HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 8004436:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800443a:	4849      	ldr	r0, [pc, #292]	@ (8004560 <sw3Controll+0x2c0>)
 800443c:	f001 f8cb 	bl	80055d6 <HAL_GPIO_TogglePin>
					sw3.flag = 1;
 8004440:	4b46      	ldr	r3, [pc, #280]	@ (800455c <sw3Controll+0x2bc>)
 8004442:	2201      	movs	r2, #1
 8004444:	705a      	strb	r2, [r3, #1]
				break;
 8004446:	e00f      	b.n	8004468 <sw3Controll+0x1c8>
			if(sw3.flag == TRUE) {
 8004448:	4b44      	ldr	r3, [pc, #272]	@ (800455c <sw3Controll+0x2bc>)
 800444a:	785b      	ldrb	r3, [r3, #1]
 800444c:	2b01      	cmp	r3, #1
 800444e:	d17d      	bne.n	800454c <sw3Controll+0x2ac>
				sw3.flag = 0;
 8004450:	4b42      	ldr	r3, [pc, #264]	@ (800455c <sw3Controll+0x2bc>)
 8004452:	2200      	movs	r2, #0
 8004454:	705a      	strb	r2, [r3, #1]
				HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_6);
 8004456:	2140      	movs	r1, #64	@ 0x40
 8004458:	4843      	ldr	r0, [pc, #268]	@ (8004568 <sw3Controll+0x2c8>)
 800445a:	f001 f8bc 	bl	80055d6 <HAL_GPIO_TogglePin>
		break;
 800445e:	e075      	b.n	800454c <sw3Controll+0x2ac>
				break;
 8004460:	bf00      	nop
 8004462:	e073      	b.n	800454c <sw3Controll+0x2ac>
				break;
 8004464:	bf00      	nop
 8004466:	e071      	b.n	800454c <sw3Controll+0x2ac>
				break;
 8004468:	bf00      	nop
		break;
 800446a:	e06f      	b.n	800454c <sw3Controll+0x2ac>
	case CLOCK_SETTING: // 시계설정모드 일때 PD4 기능
		if (sw3.state == TRUE) {
 800446c:	4b3b      	ldr	r3, [pc, #236]	@ (800455c <sw3Controll+0x2bc>)
 800446e:	781b      	ldrb	r3, [r3, #0]
 8004470:	2b01      	cmp	r3, #1
 8004472:	d116      	bne.n	80044a2 <sw3Controll+0x202>
			if (sw3.flag == FALSE) {
 8004474:	4b39      	ldr	r3, [pc, #228]	@ (800455c <sw3Controll+0x2bc>)
 8004476:	785b      	ldrb	r3, [r3, #1]
 8004478:	2b00      	cmp	r3, #0
 800447a:	d10b      	bne.n	8004494 <sw3Controll+0x1f4>
				sw3.flag = 1;
 800447c:	4b37      	ldr	r3, [pc, #220]	@ (800455c <sw3Controll+0x2bc>)
 800447e:	2201      	movs	r2, #1
 8004480:	705a      	strb	r2, [r3, #1]
				sw3DefaultHandler();
 8004482:	f000 fb4b 	bl	8004b1c <sw3DefaultHandler>
				incrementTime();
 8004486:	f7fe fc6b 	bl	8002d60 <incrementTime>
				HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 800448a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800448e:	4834      	ldr	r0, [pc, #208]	@ (8004560 <sw3Controll+0x2c0>)
 8004490:	f001 f8a1 	bl	80055d6 <HAL_GPIO_TogglePin>
			}
			setWaitingTime(0);
 8004494:	2000      	movs	r0, #0
 8004496:	f000 fb7d 	bl	8004b94 <setWaitingTime>
			releasePointing(3);
 800449a:	2003      	movs	r0, #3
 800449c:	f000 faf4 	bl	8004a88 <releasePointing>
				sw3.flag = 0;
				rsp = SHORT;
				HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_6);
			}
		}
		break;
 80044a0:	e056      	b.n	8004550 <sw3Controll+0x2b0>
			if (sw3.flag == TRUE) {
 80044a2:	4b2e      	ldr	r3, [pc, #184]	@ (800455c <sw3Controll+0x2bc>)
 80044a4:	785b      	ldrb	r3, [r3, #1]
 80044a6:	2b01      	cmp	r3, #1
 80044a8:	d152      	bne.n	8004550 <sw3Controll+0x2b0>
				sw3.flag = 0;
 80044aa:	4b2c      	ldr	r3, [pc, #176]	@ (800455c <sw3Controll+0x2bc>)
 80044ac:	2200      	movs	r2, #0
 80044ae:	705a      	strb	r2, [r3, #1]
				rsp = SHORT;
 80044b0:	4b2c      	ldr	r3, [pc, #176]	@ (8004564 <sw3Controll+0x2c4>)
 80044b2:	2200      	movs	r2, #0
 80044b4:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_6);
 80044b6:	2140      	movs	r1, #64	@ 0x40
 80044b8:	482b      	ldr	r0, [pc, #172]	@ (8004568 <sw3Controll+0x2c8>)
 80044ba:	f001 f88c 	bl	80055d6 <HAL_GPIO_TogglePin>
		break;
 80044be:	e047      	b.n	8004550 <sw3Controll+0x2b0>
	case ALARM_SETTING:
		if (sw3.state == TRUE) {
 80044c0:	4b26      	ldr	r3, [pc, #152]	@ (800455c <sw3Controll+0x2bc>)
 80044c2:	781b      	ldrb	r3, [r3, #0]
 80044c4:	2b01      	cmp	r3, #1
 80044c6:	d116      	bne.n	80044f6 <sw3Controll+0x256>
			if (sw3.flag == FALSE) {
 80044c8:	4b24      	ldr	r3, [pc, #144]	@ (800455c <sw3Controll+0x2bc>)
 80044ca:	785b      	ldrb	r3, [r3, #1]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d10b      	bne.n	80044e8 <sw3Controll+0x248>
				sw3.flag = 1;
 80044d0:	4b22      	ldr	r3, [pc, #136]	@ (800455c <sw3Controll+0x2bc>)
 80044d2:	2201      	movs	r2, #1
 80044d4:	705a      	strb	r2, [r3, #1]
				sw3DefaultHandler();
 80044d6:	f000 fb21 	bl	8004b1c <sw3DefaultHandler>
				incrementAlarmSetting();
 80044da:	f7fd fd3f 	bl	8001f5c <incrementAlarmSetting>
				HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 80044de:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80044e2:	481f      	ldr	r0, [pc, #124]	@ (8004560 <sw3Controll+0x2c0>)
 80044e4:	f001 f877 	bl	80055d6 <HAL_GPIO_TogglePin>
			}
			setWaitingTime(0);
 80044e8:	2000      	movs	r0, #0
 80044ea:	f000 fb53 	bl	8004b94 <setWaitingTime>
			releasePointing(3);
 80044ee:	2003      	movs	r0, #3
 80044f0:	f000 faca 	bl	8004a88 <releasePointing>
				sw3.flag = 0;
				rsp = SHORT;
				HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_6);
			}
		}
		break;
 80044f4:	e02e      	b.n	8004554 <sw3Controll+0x2b4>
			if (sw3.flag == TRUE) {
 80044f6:	4b19      	ldr	r3, [pc, #100]	@ (800455c <sw3Controll+0x2bc>)
 80044f8:	785b      	ldrb	r3, [r3, #1]
 80044fa:	2b01      	cmp	r3, #1
 80044fc:	d12a      	bne.n	8004554 <sw3Controll+0x2b4>
				sw3.flag = 0;
 80044fe:	4b17      	ldr	r3, [pc, #92]	@ (800455c <sw3Controll+0x2bc>)
 8004500:	2200      	movs	r2, #0
 8004502:	705a      	strb	r2, [r3, #1]
				rsp = SHORT;
 8004504:	4b17      	ldr	r3, [pc, #92]	@ (8004564 <sw3Controll+0x2c4>)
 8004506:	2200      	movs	r2, #0
 8004508:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_6);
 800450a:	2140      	movs	r1, #64	@ 0x40
 800450c:	4816      	ldr	r0, [pc, #88]	@ (8004568 <sw3Controll+0x2c8>)
 800450e:	f001 f862 	bl	80055d6 <HAL_GPIO_TogglePin>
		break;
 8004512:	e01f      	b.n	8004554 <sw3Controll+0x2b4>
	case ALARM_TRIGGER:
		if(sw3.state == TRUE) {
 8004514:	4b11      	ldr	r3, [pc, #68]	@ (800455c <sw3Controll+0x2bc>)
 8004516:	781b      	ldrb	r3, [r3, #0]
 8004518:	2b01      	cmp	r3, #1
 800451a:	d107      	bne.n	800452c <sw3Controll+0x28c>
			if(sw3.flag == FALSE) {
 800451c:	4b0f      	ldr	r3, [pc, #60]	@ (800455c <sw3Controll+0x2bc>)
 800451e:	785b      	ldrb	r3, [r3, #1]
 8004520:	2b00      	cmp	r3, #0
 8004522:	d125      	bne.n	8004570 <sw3Controll+0x2d0>
				sw3.flag = 1;
 8004524:	4b0d      	ldr	r3, [pc, #52]	@ (800455c <sw3Controll+0x2bc>)
 8004526:	2201      	movs	r2, #1
 8004528:	705a      	strb	r2, [r3, #1]
				returnToPreviousMode();
				buzReset();
				sw3.flag = 0;
			}
		}
		break;
 800452a:	e021      	b.n	8004570 <sw3Controll+0x2d0>
			if(sw3.flag == TRUE) {
 800452c:	4b0b      	ldr	r3, [pc, #44]	@ (800455c <sw3Controll+0x2bc>)
 800452e:	785b      	ldrb	r3, [r3, #1]
 8004530:	2b01      	cmp	r3, #1
 8004532:	d11d      	bne.n	8004570 <sw3Controll+0x2d0>
				returnToPreviousMode();
 8004534:	f7fd f88a 	bl	800164c <returnToPreviousMode>
				buzReset();
 8004538:	f7fd ffc2 	bl	80024c0 <buzReset>
				sw3.flag = 0;
 800453c:	4b07      	ldr	r3, [pc, #28]	@ (800455c <sw3Controll+0x2bc>)
 800453e:	2200      	movs	r2, #0
 8004540:	705a      	strb	r2, [r3, #1]
		break;
 8004542:	e015      	b.n	8004570 <sw3Controll+0x2d0>
		break;
 8004544:	bf00      	nop
 8004546:	e014      	b.n	8004572 <sw3Controll+0x2d2>
		break;
 8004548:	bf00      	nop
 800454a:	e012      	b.n	8004572 <sw3Controll+0x2d2>
		break;
 800454c:	bf00      	nop
 800454e:	e010      	b.n	8004572 <sw3Controll+0x2d2>
		break;
 8004550:	bf00      	nop
 8004552:	e00e      	b.n	8004572 <sw3Controll+0x2d2>
		break;
 8004554:	bf00      	nop
 8004556:	e00c      	b.n	8004572 <sw3Controll+0x2d2>
 8004558:	2000033d 	.word	0x2000033d
 800455c:	200002f4 	.word	0x200002f4
 8004560:	40020c00 	.word	0x40020c00
 8004564:	2000033c 	.word	0x2000033c
 8004568:	40020800 	.word	0x40020800
 800456c:	200000a0 	.word	0x200000a0
		break;
 8004570:	bf00      	nop
	}
}
 8004572:	bf00      	nop
 8004574:	bd98      	pop	{r3, r4, r7, pc}
 8004576:	bf00      	nop

08004578 <sw4Controll>:

void sw4Controll() {
 8004578:	b598      	push	{r3, r4, r7, lr}
 800457a:	af00      	add	r7, sp, #0
	// SW4 PD10
	switch (mode) {
 800457c:	4b88      	ldr	r3, [pc, #544]	@ (80047a0 <sw4Controll+0x228>)
 800457e:	781b      	ldrb	r3, [r3, #0]
 8004580:	2b05      	cmp	r3, #5
 8004582:	f200 810a 	bhi.w	800479a <sw4Controll+0x222>
 8004586:	a201      	add	r2, pc, #4	@ (adr r2, 800458c <sw4Controll+0x14>)
 8004588:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800458c:	080045a5 	.word	0x080045a5
 8004590:	080045eb 	.word	0x080045eb
 8004594:	08004667 	.word	0x08004667
 8004598:	080046b1 	.word	0x080046b1
 800459c:	08004705 	.word	0x08004705
 80045a0:	08004759 	.word	0x08004759
	case CLOCK:		// 시계모드 일때 PD10 기능
		if (sw4.state == TRUE) {
 80045a4:	4b7f      	ldr	r3, [pc, #508]	@ (80047a4 <sw4Controll+0x22c>)
 80045a6:	781b      	ldrb	r3, [r3, #0]
 80045a8:	2b01      	cmp	r3, #1
 80045aa:	d111      	bne.n	80045d0 <sw4Controll+0x58>
			if (sw4.flag == FALSE) {
 80045ac:	4b7d      	ldr	r3, [pc, #500]	@ (80047a4 <sw4Controll+0x22c>)
 80045ae:	785b      	ldrb	r3, [r3, #1]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d109      	bne.n	80045c8 <sw4Controll+0x50>
				sw4.flag = 1;
 80045b4:	4b7b      	ldr	r3, [pc, #492]	@ (80047a4 <sw4Controll+0x22c>)
 80045b6:	2201      	movs	r2, #1
 80045b8:	705a      	strb	r2, [r3, #1]
				sw4DefaultHandler();
 80045ba:	f000 fac1 	bl	8004b40 <sw4DefaultHandler>
				HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 80045be:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80045c2:	4879      	ldr	r0, [pc, #484]	@ (80047a8 <sw4Controll+0x230>)
 80045c4:	f001 f807 	bl	80055d6 <HAL_GPIO_TogglePin>
			}
			releasePointing(4);
 80045c8:	2004      	movs	r0, #4
 80045ca:	f000 fa5d 	bl	8004a88 <releasePointing>
			if (sw4.flag == TRUE) {
				HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_6);
				sw4.flag = 0;
			}
		}
		break;
 80045ce:	e0db      	b.n	8004788 <sw4Controll+0x210>
			if (sw4.flag == TRUE) {
 80045d0:	4b74      	ldr	r3, [pc, #464]	@ (80047a4 <sw4Controll+0x22c>)
 80045d2:	785b      	ldrb	r3, [r3, #1]
 80045d4:	2b01      	cmp	r3, #1
 80045d6:	f040 80d7 	bne.w	8004788 <sw4Controll+0x210>
				HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_6);
 80045da:	2140      	movs	r1, #64	@ 0x40
 80045dc:	4873      	ldr	r0, [pc, #460]	@ (80047ac <sw4Controll+0x234>)
 80045de:	f000 fffa 	bl	80055d6 <HAL_GPIO_TogglePin>
				sw4.flag = 0;
 80045e2:	4b70      	ldr	r3, [pc, #448]	@ (80047a4 <sw4Controll+0x22c>)
 80045e4:	2200      	movs	r2, #0
 80045e6:	705a      	strb	r2, [r3, #1]
		break;
 80045e8:	e0ce      	b.n	8004788 <sw4Controll+0x210>
	case ALARM:	// 알람 모드일 때 PD10 기능
		if (sw4.state == TRUE) {
 80045ea:	4b6e      	ldr	r3, [pc, #440]	@ (80047a4 <sw4Controll+0x22c>)
 80045ec:	781b      	ldrb	r3, [r3, #0]
 80045ee:	2b01      	cmp	r3, #1
 80045f0:	d114      	bne.n	800461c <sw4Controll+0xa4>
			if (sw4.flag == FALSE) {
 80045f2:	4b6c      	ldr	r3, [pc, #432]	@ (80047a4 <sw4Controll+0x22c>)
 80045f4:	785b      	ldrb	r3, [r3, #1]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d10c      	bne.n	8004614 <sw4Controll+0x9c>
				sw4.flag = 1;
 80045fa:	4b6a      	ldr	r3, [pc, #424]	@ (80047a4 <sw4Controll+0x22c>)
 80045fc:	2201      	movs	r2, #1
 80045fe:	705a      	strb	r2, [r3, #1]
				setWaitingTime(0);
 8004600:	2000      	movs	r0, #0
 8004602:	f000 fac7 	bl	8004b94 <setWaitingTime>
				sw4DefaultHandler();
 8004606:	f000 fa9b 	bl	8004b40 <sw4DefaultHandler>
				HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 800460a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800460e:	4866      	ldr	r0, [pc, #408]	@ (80047a8 <sw4Controll+0x230>)
 8004610:	f000 ffe1 	bl	80055d6 <HAL_GPIO_TogglePin>
			}
			releasePointing(4);
 8004614:	2004      	movs	r0, #4
 8004616:	f000 fa37 	bl	8004a88 <releasePointing>
				}
				sw4.flag = 0;
				HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_6);
			}
		}
		break;
 800461a:	e0b7      	b.n	800478c <sw4Controll+0x214>
			if (sw4.flag == TRUE) {
 800461c:	4b61      	ldr	r3, [pc, #388]	@ (80047a4 <sw4Controll+0x22c>)
 800461e:	785b      	ldrb	r3, [r3, #1]
 8004620:	2b01      	cmp	r3, #1
 8004622:	f040 80b3 	bne.w	800478c <sw4Controll+0x214>
				if(rsp == SHORT) {
 8004626:	4b62      	ldr	r3, [pc, #392]	@ (80047b0 <sw4Controll+0x238>)
 8004628:	781b      	ldrb	r3, [r3, #0]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d113      	bne.n	8004656 <sw4Controll+0xde>
					setAlarmRepeat(!getAlarmRepeat(getSelect()), getSelect());
 800462e:	f7fd fe05 	bl	800223c <getSelect>
 8004632:	4603      	mov	r3, r0
 8004634:	4618      	mov	r0, r3
 8004636:	f7fd fe3b 	bl	80022b0 <getAlarmRepeat>
 800463a:	4603      	mov	r3, r0
 800463c:	2b00      	cmp	r3, #0
 800463e:	bf0c      	ite	eq
 8004640:	2301      	moveq	r3, #1
 8004642:	2300      	movne	r3, #0
 8004644:	b2db      	uxtb	r3, r3
 8004646:	461c      	mov	r4, r3
 8004648:	f7fd fdf8 	bl	800223c <getSelect>
 800464c:	4603      	mov	r3, r0
 800464e:	4619      	mov	r1, r3
 8004650:	4620      	mov	r0, r4
 8004652:	f7fd fe43 	bl	80022dc <setAlarmRepeat>
				sw4.flag = 0;
 8004656:	4b53      	ldr	r3, [pc, #332]	@ (80047a4 <sw4Controll+0x22c>)
 8004658:	2200      	movs	r2, #0
 800465a:	705a      	strb	r2, [r3, #1]
				HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_6);
 800465c:	2140      	movs	r1, #64	@ 0x40
 800465e:	4853      	ldr	r0, [pc, #332]	@ (80047ac <sw4Controll+0x234>)
 8004660:	f000 ffb9 	bl	80055d6 <HAL_GPIO_TogglePin>
		break;
 8004664:	e092      	b.n	800478c <sw4Controll+0x214>
	case STOPWATCH: // 스탑워치 모드일 때 PD10 기능
		// 저장된 laptime 출력
		if (sw4.state == TRUE) {
 8004666:	4b4f      	ldr	r3, [pc, #316]	@ (80047a4 <sw4Controll+0x22c>)
 8004668:	781b      	ldrb	r3, [r3, #0]
 800466a:	2b01      	cmp	r3, #1
 800466c:	d114      	bne.n	8004698 <sw4Controll+0x120>
			if (sw4.flag == FALSE) {
 800466e:	4b4d      	ldr	r3, [pc, #308]	@ (80047a4 <sw4Controll+0x22c>)
 8004670:	785b      	ldrb	r3, [r3, #1]
 8004672:	2b00      	cmp	r3, #0
 8004674:	f040 808c 	bne.w	8004790 <sw4Controll+0x218>
				laptimeDisplay(); // 랩타임 순서대로 출력
 8004678:	f7ff fb50 	bl	8003d1c <laptimeDisplay>
				setWaitingTime(0);
 800467c:	2000      	movs	r0, #0
 800467e:	f000 fa89 	bl	8004b94 <setWaitingTime>
				sw4DefaultHandler();
 8004682:	f000 fa5d 	bl	8004b40 <sw4DefaultHandler>
				HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 8004686:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800468a:	4847      	ldr	r0, [pc, #284]	@ (80047a8 <sw4Controll+0x230>)
 800468c:	f000 ffa3 	bl	80055d6 <HAL_GPIO_TogglePin>
				sw4.flag = 1;
 8004690:	4b44      	ldr	r3, [pc, #272]	@ (80047a4 <sw4Controll+0x22c>)
 8004692:	2201      	movs	r2, #1
 8004694:	705a      	strb	r2, [r3, #1]
			if (sw4.flag == TRUE) {
				sw4.flag = 0;
				HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_6);
			}
		}
		break;
 8004696:	e07b      	b.n	8004790 <sw4Controll+0x218>
			if (sw4.flag == TRUE) {
 8004698:	4b42      	ldr	r3, [pc, #264]	@ (80047a4 <sw4Controll+0x22c>)
 800469a:	785b      	ldrb	r3, [r3, #1]
 800469c:	2b01      	cmp	r3, #1
 800469e:	d177      	bne.n	8004790 <sw4Controll+0x218>
				sw4.flag = 0;
 80046a0:	4b40      	ldr	r3, [pc, #256]	@ (80047a4 <sw4Controll+0x22c>)
 80046a2:	2200      	movs	r2, #0
 80046a4:	705a      	strb	r2, [r3, #1]
				HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_6);
 80046a6:	2140      	movs	r1, #64	@ 0x40
 80046a8:	4840      	ldr	r0, [pc, #256]	@ (80047ac <sw4Controll+0x234>)
 80046aa:	f000 ff94 	bl	80055d6 <HAL_GPIO_TogglePin>
		break;
 80046ae:	e06f      	b.n	8004790 <sw4Controll+0x218>
	case CLOCK_SETTING:  // 시계설정모드 일때 PD10 기능
		if (sw4.state == TRUE) {
 80046b0:	4b3c      	ldr	r3, [pc, #240]	@ (80047a4 <sw4Controll+0x22c>)
 80046b2:	781b      	ldrb	r3, [r3, #0]
 80046b4:	2b01      	cmp	r3, #1
 80046b6:	d116      	bne.n	80046e6 <sw4Controll+0x16e>
			if (sw4.flag == FALSE) {
 80046b8:	4b3a      	ldr	r3, [pc, #232]	@ (80047a4 <sw4Controll+0x22c>)
 80046ba:	785b      	ldrb	r3, [r3, #1]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d10b      	bne.n	80046d8 <sw4Controll+0x160>
				sw4.flag = 1;
 80046c0:	4b38      	ldr	r3, [pc, #224]	@ (80047a4 <sw4Controll+0x22c>)
 80046c2:	2201      	movs	r2, #1
 80046c4:	705a      	strb	r2, [r3, #1]
				sw4DefaultHandler();
 80046c6:	f000 fa3b 	bl	8004b40 <sw4DefaultHandler>
				decrementTime();
 80046ca:	f7fe fc19 	bl	8002f00 <decrementTime>
				HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 80046ce:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80046d2:	4835      	ldr	r0, [pc, #212]	@ (80047a8 <sw4Controll+0x230>)
 80046d4:	f000 ff7f 	bl	80055d6 <HAL_GPIO_TogglePin>
			}
			setWaitingTime(0);
 80046d8:	2000      	movs	r0, #0
 80046da:	f000 fa5b 	bl	8004b94 <setWaitingTime>
			releasePointing(4);
 80046de:	2004      	movs	r0, #4
 80046e0:	f000 f9d2 	bl	8004a88 <releasePointing>
				sw4.flag = 0;
				rsp = SHORT;
				HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_6);
			}
		}
		break;
 80046e4:	e056      	b.n	8004794 <sw4Controll+0x21c>
			if (sw4.flag == TRUE) {
 80046e6:	4b2f      	ldr	r3, [pc, #188]	@ (80047a4 <sw4Controll+0x22c>)
 80046e8:	785b      	ldrb	r3, [r3, #1]
 80046ea:	2b01      	cmp	r3, #1
 80046ec:	d152      	bne.n	8004794 <sw4Controll+0x21c>
				sw4.flag = 0;
 80046ee:	4b2d      	ldr	r3, [pc, #180]	@ (80047a4 <sw4Controll+0x22c>)
 80046f0:	2200      	movs	r2, #0
 80046f2:	705a      	strb	r2, [r3, #1]
				rsp = SHORT;
 80046f4:	4b2e      	ldr	r3, [pc, #184]	@ (80047b0 <sw4Controll+0x238>)
 80046f6:	2200      	movs	r2, #0
 80046f8:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_6);
 80046fa:	2140      	movs	r1, #64	@ 0x40
 80046fc:	482b      	ldr	r0, [pc, #172]	@ (80047ac <sw4Controll+0x234>)
 80046fe:	f000 ff6a 	bl	80055d6 <HAL_GPIO_TogglePin>
		break;
 8004702:	e047      	b.n	8004794 <sw4Controll+0x21c>
	case ALARM_SETTING:
		if(sw4.state == TRUE) {
 8004704:	4b27      	ldr	r3, [pc, #156]	@ (80047a4 <sw4Controll+0x22c>)
 8004706:	781b      	ldrb	r3, [r3, #0]
 8004708:	2b01      	cmp	r3, #1
 800470a:	d116      	bne.n	800473a <sw4Controll+0x1c2>
			if(sw4.flag == FALSE) {
 800470c:	4b25      	ldr	r3, [pc, #148]	@ (80047a4 <sw4Controll+0x22c>)
 800470e:	785b      	ldrb	r3, [r3, #1]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d10b      	bne.n	800472c <sw4Controll+0x1b4>
				sw4.flag = 1;
 8004714:	4b23      	ldr	r3, [pc, #140]	@ (80047a4 <sw4Controll+0x22c>)
 8004716:	2201      	movs	r2, #1
 8004718:	705a      	strb	r2, [r3, #1]
				sw4DefaultHandler();
 800471a:	f000 fa11 	bl	8004b40 <sw4DefaultHandler>
				decrementAlarmSetting();
 800471e:	f7fd fcd5 	bl	80020cc <decrementAlarmSetting>
				HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 8004722:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8004726:	4820      	ldr	r0, [pc, #128]	@ (80047a8 <sw4Controll+0x230>)
 8004728:	f000 ff55 	bl	80055d6 <HAL_GPIO_TogglePin>
			}
			setWaitingTime(0);
 800472c:	2000      	movs	r0, #0
 800472e:	f000 fa31 	bl	8004b94 <setWaitingTime>
			releasePointing(4);
 8004732:	2004      	movs	r0, #4
 8004734:	f000 f9a8 	bl	8004a88 <releasePointing>
				sw4.flag = 0;
				rsp = SHORT;
				HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_6);
			}
		}
		break;
 8004738:	e02e      	b.n	8004798 <sw4Controll+0x220>
			if(sw4.flag == TRUE) {
 800473a:	4b1a      	ldr	r3, [pc, #104]	@ (80047a4 <sw4Controll+0x22c>)
 800473c:	785b      	ldrb	r3, [r3, #1]
 800473e:	2b01      	cmp	r3, #1
 8004740:	d12a      	bne.n	8004798 <sw4Controll+0x220>
				sw4.flag = 0;
 8004742:	4b18      	ldr	r3, [pc, #96]	@ (80047a4 <sw4Controll+0x22c>)
 8004744:	2200      	movs	r2, #0
 8004746:	705a      	strb	r2, [r3, #1]
				rsp = SHORT;
 8004748:	4b19      	ldr	r3, [pc, #100]	@ (80047b0 <sw4Controll+0x238>)
 800474a:	2200      	movs	r2, #0
 800474c:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_6);
 800474e:	2140      	movs	r1, #64	@ 0x40
 8004750:	4816      	ldr	r0, [pc, #88]	@ (80047ac <sw4Controll+0x234>)
 8004752:	f000 ff40 	bl	80055d6 <HAL_GPIO_TogglePin>
		break;
 8004756:	e01f      	b.n	8004798 <sw4Controll+0x220>
	case ALARM_TRIGGER:
		if(sw4.state == TRUE) {
 8004758:	4b12      	ldr	r3, [pc, #72]	@ (80047a4 <sw4Controll+0x22c>)
 800475a:	781b      	ldrb	r3, [r3, #0]
 800475c:	2b01      	cmp	r3, #1
 800475e:	d107      	bne.n	8004770 <sw4Controll+0x1f8>
			if(sw4.flag == FALSE) {
 8004760:	4b10      	ldr	r3, [pc, #64]	@ (80047a4 <sw4Controll+0x22c>)
 8004762:	785b      	ldrb	r3, [r3, #1]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d118      	bne.n	800479a <sw4Controll+0x222>
				sw4.flag = 1;
 8004768:	4b0e      	ldr	r3, [pc, #56]	@ (80047a4 <sw4Controll+0x22c>)
 800476a:	2201      	movs	r2, #1
 800476c:	705a      	strb	r2, [r3, #1]
				buzReset();
				sw4.flag = 0;
			}
		}
	}
}
 800476e:	e014      	b.n	800479a <sw4Controll+0x222>
			if(sw4.flag == TRUE) {
 8004770:	4b0c      	ldr	r3, [pc, #48]	@ (80047a4 <sw4Controll+0x22c>)
 8004772:	785b      	ldrb	r3, [r3, #1]
 8004774:	2b01      	cmp	r3, #1
 8004776:	d110      	bne.n	800479a <sw4Controll+0x222>
				returnToPreviousMode();
 8004778:	f7fc ff68 	bl	800164c <returnToPreviousMode>
				buzReset();
 800477c:	f7fd fea0 	bl	80024c0 <buzReset>
				sw4.flag = 0;
 8004780:	4b08      	ldr	r3, [pc, #32]	@ (80047a4 <sw4Controll+0x22c>)
 8004782:	2200      	movs	r2, #0
 8004784:	705a      	strb	r2, [r3, #1]
}
 8004786:	e008      	b.n	800479a <sw4Controll+0x222>
		break;
 8004788:	bf00      	nop
 800478a:	e006      	b.n	800479a <sw4Controll+0x222>
		break;
 800478c:	bf00      	nop
 800478e:	e004      	b.n	800479a <sw4Controll+0x222>
		break;
 8004790:	bf00      	nop
 8004792:	e002      	b.n	800479a <sw4Controll+0x222>
		break;
 8004794:	bf00      	nop
 8004796:	e000      	b.n	800479a <sw4Controll+0x222>
		break;
 8004798:	bf00      	nop
}
 800479a:	bf00      	nop
 800479c:	bd98      	pop	{r3, r4, r7, pc}
 800479e:	bf00      	nop
 80047a0:	2000033d 	.word	0x2000033d
 80047a4:	20000310 	.word	0x20000310
 80047a8:	40020c00 	.word	0x40020c00
 80047ac:	40020800 	.word	0x40020800
 80047b0:	2000033c 	.word	0x2000033c

080047b4 <getPressCount>:

int getPressCount(int swNum) {
 80047b4:	b480      	push	{r7}
 80047b6:	b085      	sub	sp, #20
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
	int temp;
	switch(swNum) {
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	3b01      	subs	r3, #1
 80047c0:	2b03      	cmp	r3, #3
 80047c2:	d81b      	bhi.n	80047fc <getPressCount+0x48>
 80047c4:	a201      	add	r2, pc, #4	@ (adr r2, 80047cc <getPressCount+0x18>)
 80047c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047ca:	bf00      	nop
 80047cc:	080047dd 	.word	0x080047dd
 80047d0:	080047e5 	.word	0x080047e5
 80047d4:	080047ed 	.word	0x080047ed
 80047d8:	080047f5 	.word	0x080047f5
	case 1:
		temp = sw1.pressCnt;
 80047dc:	4b0b      	ldr	r3, [pc, #44]	@ (800480c <getPressCount+0x58>)
 80047de:	685b      	ldr	r3, [r3, #4]
 80047e0:	60fb      	str	r3, [r7, #12]
		break;
 80047e2:	e00b      	b.n	80047fc <getPressCount+0x48>
	case 2:
		temp = sw2.pressCnt;
 80047e4:	4b0a      	ldr	r3, [pc, #40]	@ (8004810 <getPressCount+0x5c>)
 80047e6:	685b      	ldr	r3, [r3, #4]
 80047e8:	60fb      	str	r3, [r7, #12]
		break;
 80047ea:	e007      	b.n	80047fc <getPressCount+0x48>
	case 3:
		temp = sw3.pressCnt;
 80047ec:	4b09      	ldr	r3, [pc, #36]	@ (8004814 <getPressCount+0x60>)
 80047ee:	685b      	ldr	r3, [r3, #4]
 80047f0:	60fb      	str	r3, [r7, #12]
		break;
 80047f2:	e003      	b.n	80047fc <getPressCount+0x48>
	case 4:
		temp = sw4.pressCnt;
 80047f4:	4b08      	ldr	r3, [pc, #32]	@ (8004818 <getPressCount+0x64>)
 80047f6:	685b      	ldr	r3, [r3, #4]
 80047f8:	60fb      	str	r3, [r7, #12]
		break;
 80047fa:	bf00      	nop
	}
	return temp;
 80047fc:	68fb      	ldr	r3, [r7, #12]

}
 80047fe:	4618      	mov	r0, r3
 8004800:	3714      	adds	r7, #20
 8004802:	46bd      	mov	sp, r7
 8004804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004808:	4770      	bx	lr
 800480a:	bf00      	nop
 800480c:	200002bc 	.word	0x200002bc
 8004810:	200002d8 	.word	0x200002d8
 8004814:	200002f4 	.word	0x200002f4
 8004818:	20000310 	.word	0x20000310

0800481c <holdEvent>:

void holdEvent() {
 800481c:	b580      	push	{r7, lr}
 800481e:	af00      	add	r7, sp, #0
	if(sw1.state == TRUE) {
 8004820:	4b90      	ldr	r3, [pc, #576]	@ (8004a64 <holdEvent+0x248>)
 8004822:	781b      	ldrb	r3, [r3, #0]
 8004824:	2b01      	cmp	r3, #1
 8004826:	d115      	bne.n	8004854 <holdEvent+0x38>
		if(sw1.pressCnt <= LONG_PRESS) {
 8004828:	4b8e      	ldr	r3, [pc, #568]	@ (8004a64 <holdEvent+0x248>)
 800482a:	685b      	ldr	r3, [r3, #4]
 800482c:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 8004830:	4293      	cmp	r3, r2
 8004832:	dc04      	bgt.n	800483e <holdEvent+0x22>
			sw1.pressCnt++;
 8004834:	4b8b      	ldr	r3, [pc, #556]	@ (8004a64 <holdEvent+0x248>)
 8004836:	685b      	ldr	r3, [r3, #4]
 8004838:	3301      	adds	r3, #1
 800483a:	4a8a      	ldr	r2, [pc, #552]	@ (8004a64 <holdEvent+0x248>)
 800483c:	6053      	str	r3, [r2, #4]
		}
		switch(rsp) {
 800483e:	4b8a      	ldr	r3, [pc, #552]	@ (8004a68 <holdEvent+0x24c>)
 8004840:	781b      	ldrb	r3, [r3, #0]
 8004842:	2b02      	cmp	r3, #2
 8004844:	d006      	beq.n	8004854 <holdEvent+0x38>
 8004846:	2b02      	cmp	r3, #2
 8004848:	dc04      	bgt.n	8004854 <holdEvent+0x38>
 800484a:	2b00      	cmp	r3, #0
 800484c:	d001      	beq.n	8004852 <holdEvent+0x36>
 800484e:	2b01      	cmp	r3, #1
 8004850:	e000      	b.n	8004854 <holdEvent+0x38>
		case SHORT:
			break;
 8004852:	bf00      	nop
			}
			break;

		}
	}
	if(sw2.state == TRUE) {
 8004854:	4b85      	ldr	r3, [pc, #532]	@ (8004a6c <holdEvent+0x250>)
 8004856:	781b      	ldrb	r3, [r3, #0]
 8004858:	2b01      	cmp	r3, #1
 800485a:	d115      	bne.n	8004888 <holdEvent+0x6c>
		if(sw2.pressCnt <= LONG_PRESS) {
 800485c:	4b83      	ldr	r3, [pc, #524]	@ (8004a6c <holdEvent+0x250>)
 800485e:	685b      	ldr	r3, [r3, #4]
 8004860:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 8004864:	4293      	cmp	r3, r2
 8004866:	dc04      	bgt.n	8004872 <holdEvent+0x56>
			sw2.pressCnt++;
 8004868:	4b80      	ldr	r3, [pc, #512]	@ (8004a6c <holdEvent+0x250>)
 800486a:	685b      	ldr	r3, [r3, #4]
 800486c:	3301      	adds	r3, #1
 800486e:	4a7f      	ldr	r2, [pc, #508]	@ (8004a6c <holdEvent+0x250>)
 8004870:	6053      	str	r3, [r2, #4]
		}
		switch(rsp) {
 8004872:	4b7d      	ldr	r3, [pc, #500]	@ (8004a68 <holdEvent+0x24c>)
 8004874:	781b      	ldrb	r3, [r3, #0]
 8004876:	2b02      	cmp	r3, #2
 8004878:	d006      	beq.n	8004888 <holdEvent+0x6c>
 800487a:	2b02      	cmp	r3, #2
 800487c:	dc04      	bgt.n	8004888 <holdEvent+0x6c>
 800487e:	2b00      	cmp	r3, #0
 8004880:	d001      	beq.n	8004886 <holdEvent+0x6a>
 8004882:	2b01      	cmp	r3, #1
 8004884:	e000      	b.n	8004888 <holdEvent+0x6c>
		case SHORT:
			break;
 8004886:	bf00      	nop
			}
			break;

		}
	}
	if(sw3.state == TRUE) {
 8004888:	4b79      	ldr	r3, [pc, #484]	@ (8004a70 <holdEvent+0x254>)
 800488a:	781b      	ldrb	r3, [r3, #0]
 800488c:	2b01      	cmp	r3, #1
 800488e:	d170      	bne.n	8004972 <holdEvent+0x156>
		if(sw3.pressCnt <= LONG_PRESS) {
 8004890:	4b77      	ldr	r3, [pc, #476]	@ (8004a70 <holdEvent+0x254>)
 8004892:	685b      	ldr	r3, [r3, #4]
 8004894:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 8004898:	4293      	cmp	r3, r2
 800489a:	dc04      	bgt.n	80048a6 <holdEvent+0x8a>
			sw3.pressCnt++;
 800489c:	4b74      	ldr	r3, [pc, #464]	@ (8004a70 <holdEvent+0x254>)
 800489e:	685b      	ldr	r3, [r3, #4]
 80048a0:	3301      	adds	r3, #1
 80048a2:	4a73      	ldr	r2, [pc, #460]	@ (8004a70 <holdEvent+0x254>)
 80048a4:	6053      	str	r3, [r2, #4]
		}
		if(sw3.pressCnt == MID_PRESS && (mode == CLOCK_SETTING || mode == ALARM_SETTING)) {
 80048a6:	4b72      	ldr	r3, [pc, #456]	@ (8004a70 <holdEvent+0x254>)
 80048a8:	685b      	ldr	r3, [r3, #4]
 80048aa:	f5b3 7f2f 	cmp.w	r3, #700	@ 0x2bc
 80048ae:	d10a      	bne.n	80048c6 <holdEvent+0xaa>
 80048b0:	4b70      	ldr	r3, [pc, #448]	@ (8004a74 <holdEvent+0x258>)
 80048b2:	781b      	ldrb	r3, [r3, #0]
 80048b4:	2b03      	cmp	r3, #3
 80048b6:	d003      	beq.n	80048c0 <holdEvent+0xa4>
 80048b8:	4b6e      	ldr	r3, [pc, #440]	@ (8004a74 <holdEvent+0x258>)
 80048ba:	781b      	ldrb	r3, [r3, #0]
 80048bc:	2b04      	cmp	r3, #4
 80048be:	d102      	bne.n	80048c6 <holdEvent+0xaa>
			playMidTone();
 80048c0:	f7fd fd54 	bl	800236c <playMidTone>
 80048c4:	e00f      	b.n	80048e6 <holdEvent+0xca>
		} else if(sw3.pressCnt == LONG_PRESS && (mode == CLOCK_SETTING || mode == ALARM_SETTING)) {
 80048c6:	4b6a      	ldr	r3, [pc, #424]	@ (8004a70 <holdEvent+0x254>)
 80048c8:	685b      	ldr	r3, [r3, #4]
 80048ca:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d109      	bne.n	80048e6 <holdEvent+0xca>
 80048d2:	4b68      	ldr	r3, [pc, #416]	@ (8004a74 <holdEvent+0x258>)
 80048d4:	781b      	ldrb	r3, [r3, #0]
 80048d6:	2b03      	cmp	r3, #3
 80048d8:	d003      	beq.n	80048e2 <holdEvent+0xc6>
 80048da:	4b66      	ldr	r3, [pc, #408]	@ (8004a74 <holdEvent+0x258>)
 80048dc:	781b      	ldrb	r3, [r3, #0]
 80048de:	2b04      	cmp	r3, #4
 80048e0:	d101      	bne.n	80048e6 <holdEvent+0xca>
			playHighTone();
 80048e2:	f7fd fd55 	bl	8002390 <playHighTone>
		}
		switch(rsp) {
 80048e6:	4b60      	ldr	r3, [pc, #384]	@ (8004a68 <holdEvent+0x24c>)
 80048e8:	781b      	ldrb	r3, [r3, #0]
 80048ea:	2b02      	cmp	r3, #2
 80048ec:	d020      	beq.n	8004930 <holdEvent+0x114>
 80048ee:	2b02      	cmp	r3, #2
 80048f0:	dc3f      	bgt.n	8004972 <holdEvent+0x156>
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d038      	beq.n	8004968 <holdEvent+0x14c>
 80048f6:	2b01      	cmp	r3, #1
 80048f8:	d13b      	bne.n	8004972 <holdEvent+0x156>
		case SHORT:
			break;
		case MID:
			if(sys.millisecond % 150 == 0) {
 80048fa:	4b5f      	ldr	r3, [pc, #380]	@ (8004a78 <holdEvent+0x25c>)
 80048fc:	681a      	ldr	r2, [r3, #0]
 80048fe:	4b5f      	ldr	r3, [pc, #380]	@ (8004a7c <holdEvent+0x260>)
 8004900:	fb83 1302 	smull	r1, r3, r3, r2
 8004904:	1119      	asrs	r1, r3, #4
 8004906:	17d3      	asrs	r3, r2, #31
 8004908:	1acb      	subs	r3, r1, r3
 800490a:	2196      	movs	r1, #150	@ 0x96
 800490c:	fb01 f303 	mul.w	r3, r1, r3
 8004910:	1ad3      	subs	r3, r2, r3
 8004912:	2b00      	cmp	r3, #0
 8004914:	d12a      	bne.n	800496c <holdEvent+0x150>
				if(mode == CLOCK_SETTING) {
 8004916:	4b57      	ldr	r3, [pc, #348]	@ (8004a74 <holdEvent+0x258>)
 8004918:	781b      	ldrb	r3, [r3, #0]
 800491a:	2b03      	cmp	r3, #3
 800491c:	d101      	bne.n	8004922 <holdEvent+0x106>
					incrementTime();
 800491e:	f7fe fa1f 	bl	8002d60 <incrementTime>
				}
				if(mode == ALARM_SETTING) {
 8004922:	4b54      	ldr	r3, [pc, #336]	@ (8004a74 <holdEvent+0x258>)
 8004924:	781b      	ldrb	r3, [r3, #0]
 8004926:	2b04      	cmp	r3, #4
 8004928:	d120      	bne.n	800496c <holdEvent+0x150>
					incrementAlarmSetting();
 800492a:	f7fd fb17 	bl	8001f5c <incrementAlarmSetting>
				}
			}
			break;
 800492e:	e01d      	b.n	800496c <holdEvent+0x150>
		case LONG:
			if(sys.millisecond % 20 == 0) {
 8004930:	4b51      	ldr	r3, [pc, #324]	@ (8004a78 <holdEvent+0x25c>)
 8004932:	6819      	ldr	r1, [r3, #0]
 8004934:	4b52      	ldr	r3, [pc, #328]	@ (8004a80 <holdEvent+0x264>)
 8004936:	fb83 2301 	smull	r2, r3, r3, r1
 800493a:	10da      	asrs	r2, r3, #3
 800493c:	17cb      	asrs	r3, r1, #31
 800493e:	1ad2      	subs	r2, r2, r3
 8004940:	4613      	mov	r3, r2
 8004942:	009b      	lsls	r3, r3, #2
 8004944:	4413      	add	r3, r2
 8004946:	009b      	lsls	r3, r3, #2
 8004948:	1aca      	subs	r2, r1, r3
 800494a:	2a00      	cmp	r2, #0
 800494c:	d110      	bne.n	8004970 <holdEvent+0x154>
				if(mode == CLOCK_SETTING) {
 800494e:	4b49      	ldr	r3, [pc, #292]	@ (8004a74 <holdEvent+0x258>)
 8004950:	781b      	ldrb	r3, [r3, #0]
 8004952:	2b03      	cmp	r3, #3
 8004954:	d101      	bne.n	800495a <holdEvent+0x13e>
					incrementTime();
 8004956:	f7fe fa03 	bl	8002d60 <incrementTime>
				}
				if(mode == ALARM_SETTING) {
 800495a:	4b46      	ldr	r3, [pc, #280]	@ (8004a74 <holdEvent+0x258>)
 800495c:	781b      	ldrb	r3, [r3, #0]
 800495e:	2b04      	cmp	r3, #4
 8004960:	d106      	bne.n	8004970 <holdEvent+0x154>
					incrementAlarmSetting();
 8004962:	f7fd fafb 	bl	8001f5c <incrementAlarmSetting>
				}
			}
			break;
 8004966:	e003      	b.n	8004970 <holdEvent+0x154>
			break;
 8004968:	bf00      	nop
 800496a:	e002      	b.n	8004972 <holdEvent+0x156>
			break;
 800496c:	bf00      	nop
 800496e:	e000      	b.n	8004972 <holdEvent+0x156>
			break;
 8004970:	bf00      	nop

		}
	}
	if(sw4.state == TRUE) {
 8004972:	4b44      	ldr	r3, [pc, #272]	@ (8004a84 <holdEvent+0x268>)
 8004974:	781b      	ldrb	r3, [r3, #0]
 8004976:	2b01      	cmp	r3, #1
 8004978:	d171      	bne.n	8004a5e <holdEvent+0x242>
		if(sw4.pressCnt <= LONG_PRESS) {
 800497a:	4b42      	ldr	r3, [pc, #264]	@ (8004a84 <holdEvent+0x268>)
 800497c:	685b      	ldr	r3, [r3, #4]
 800497e:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 8004982:	4293      	cmp	r3, r2
 8004984:	dc04      	bgt.n	8004990 <holdEvent+0x174>
			sw4.pressCnt++;
 8004986:	4b3f      	ldr	r3, [pc, #252]	@ (8004a84 <holdEvent+0x268>)
 8004988:	685b      	ldr	r3, [r3, #4]
 800498a:	3301      	adds	r3, #1
 800498c:	4a3d      	ldr	r2, [pc, #244]	@ (8004a84 <holdEvent+0x268>)
 800498e:	6053      	str	r3, [r2, #4]
		}
		if(sw4.pressCnt == MID_PRESS && (mode == CLOCK_SETTING || mode == ALARM_SETTING)) {
 8004990:	4b3c      	ldr	r3, [pc, #240]	@ (8004a84 <holdEvent+0x268>)
 8004992:	685b      	ldr	r3, [r3, #4]
 8004994:	f5b3 7f2f 	cmp.w	r3, #700	@ 0x2bc
 8004998:	d10a      	bne.n	80049b0 <holdEvent+0x194>
 800499a:	4b36      	ldr	r3, [pc, #216]	@ (8004a74 <holdEvent+0x258>)
 800499c:	781b      	ldrb	r3, [r3, #0]
 800499e:	2b03      	cmp	r3, #3
 80049a0:	d003      	beq.n	80049aa <holdEvent+0x18e>
 80049a2:	4b34      	ldr	r3, [pc, #208]	@ (8004a74 <holdEvent+0x258>)
 80049a4:	781b      	ldrb	r3, [r3, #0]
 80049a6:	2b04      	cmp	r3, #4
 80049a8:	d102      	bne.n	80049b0 <holdEvent+0x194>
			playMidTone();
 80049aa:	f7fd fcdf 	bl	800236c <playMidTone>
 80049ae:	e00f      	b.n	80049d0 <holdEvent+0x1b4>
		} else if(sw4.pressCnt == LONG_PRESS && (mode == CLOCK_SETTING || mode == ALARM_SETTING)) {
 80049b0:	4b34      	ldr	r3, [pc, #208]	@ (8004a84 <holdEvent+0x268>)
 80049b2:	685b      	ldr	r3, [r3, #4]
 80049b4:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 80049b8:	4293      	cmp	r3, r2
 80049ba:	d109      	bne.n	80049d0 <holdEvent+0x1b4>
 80049bc:	4b2d      	ldr	r3, [pc, #180]	@ (8004a74 <holdEvent+0x258>)
 80049be:	781b      	ldrb	r3, [r3, #0]
 80049c0:	2b03      	cmp	r3, #3
 80049c2:	d003      	beq.n	80049cc <holdEvent+0x1b0>
 80049c4:	4b2b      	ldr	r3, [pc, #172]	@ (8004a74 <holdEvent+0x258>)
 80049c6:	781b      	ldrb	r3, [r3, #0]
 80049c8:	2b04      	cmp	r3, #4
 80049ca:	d101      	bne.n	80049d0 <holdEvent+0x1b4>
			playHighTone();
 80049cc:	f7fd fce0 	bl	8002390 <playHighTone>
		}
		switch(rsp) {
 80049d0:	4b25      	ldr	r3, [pc, #148]	@ (8004a68 <holdEvent+0x24c>)
 80049d2:	781b      	ldrb	r3, [r3, #0]
 80049d4:	2b02      	cmp	r3, #2
 80049d6:	d021      	beq.n	8004a1c <holdEvent+0x200>
 80049d8:	2b02      	cmp	r3, #2
 80049da:	dc40      	bgt.n	8004a5e <holdEvent+0x242>
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d039      	beq.n	8004a54 <holdEvent+0x238>
 80049e0:	2b01      	cmp	r3, #1
 80049e2:	d000      	beq.n	80049e6 <holdEvent+0x1ca>
			}
			break;

		}
	}
}
 80049e4:	e03b      	b.n	8004a5e <holdEvent+0x242>
			if(sys.millisecond % 150 == 0) {
 80049e6:	4b24      	ldr	r3, [pc, #144]	@ (8004a78 <holdEvent+0x25c>)
 80049e8:	681a      	ldr	r2, [r3, #0]
 80049ea:	4b24      	ldr	r3, [pc, #144]	@ (8004a7c <holdEvent+0x260>)
 80049ec:	fb83 1302 	smull	r1, r3, r3, r2
 80049f0:	1119      	asrs	r1, r3, #4
 80049f2:	17d3      	asrs	r3, r2, #31
 80049f4:	1acb      	subs	r3, r1, r3
 80049f6:	2196      	movs	r1, #150	@ 0x96
 80049f8:	fb01 f303 	mul.w	r3, r1, r3
 80049fc:	1ad3      	subs	r3, r2, r3
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d12a      	bne.n	8004a58 <holdEvent+0x23c>
				if(mode == CLOCK_SETTING) {
 8004a02:	4b1c      	ldr	r3, [pc, #112]	@ (8004a74 <holdEvent+0x258>)
 8004a04:	781b      	ldrb	r3, [r3, #0]
 8004a06:	2b03      	cmp	r3, #3
 8004a08:	d101      	bne.n	8004a0e <holdEvent+0x1f2>
					decrementTime();
 8004a0a:	f7fe fa79 	bl	8002f00 <decrementTime>
				if(mode == ALARM_SETTING) {
 8004a0e:	4b19      	ldr	r3, [pc, #100]	@ (8004a74 <holdEvent+0x258>)
 8004a10:	781b      	ldrb	r3, [r3, #0]
 8004a12:	2b04      	cmp	r3, #4
 8004a14:	d120      	bne.n	8004a58 <holdEvent+0x23c>
					decrementAlarmSetting();
 8004a16:	f7fd fb59 	bl	80020cc <decrementAlarmSetting>
			break;
 8004a1a:	e01d      	b.n	8004a58 <holdEvent+0x23c>
			if(sys.millisecond % 20 == 0) {
 8004a1c:	4b16      	ldr	r3, [pc, #88]	@ (8004a78 <holdEvent+0x25c>)
 8004a1e:	6819      	ldr	r1, [r3, #0]
 8004a20:	4b17      	ldr	r3, [pc, #92]	@ (8004a80 <holdEvent+0x264>)
 8004a22:	fb83 2301 	smull	r2, r3, r3, r1
 8004a26:	10da      	asrs	r2, r3, #3
 8004a28:	17cb      	asrs	r3, r1, #31
 8004a2a:	1ad2      	subs	r2, r2, r3
 8004a2c:	4613      	mov	r3, r2
 8004a2e:	009b      	lsls	r3, r3, #2
 8004a30:	4413      	add	r3, r2
 8004a32:	009b      	lsls	r3, r3, #2
 8004a34:	1aca      	subs	r2, r1, r3
 8004a36:	2a00      	cmp	r2, #0
 8004a38:	d110      	bne.n	8004a5c <holdEvent+0x240>
				if(mode == CLOCK_SETTING) {
 8004a3a:	4b0e      	ldr	r3, [pc, #56]	@ (8004a74 <holdEvent+0x258>)
 8004a3c:	781b      	ldrb	r3, [r3, #0]
 8004a3e:	2b03      	cmp	r3, #3
 8004a40:	d101      	bne.n	8004a46 <holdEvent+0x22a>
					decrementTime();
 8004a42:	f7fe fa5d 	bl	8002f00 <decrementTime>
				if(mode == ALARM_SETTING) {
 8004a46:	4b0b      	ldr	r3, [pc, #44]	@ (8004a74 <holdEvent+0x258>)
 8004a48:	781b      	ldrb	r3, [r3, #0]
 8004a4a:	2b04      	cmp	r3, #4
 8004a4c:	d106      	bne.n	8004a5c <holdEvent+0x240>
					decrementAlarmSetting();
 8004a4e:	f7fd fb3d 	bl	80020cc <decrementAlarmSetting>
			break;
 8004a52:	e003      	b.n	8004a5c <holdEvent+0x240>
			break;
 8004a54:	bf00      	nop
 8004a56:	e002      	b.n	8004a5e <holdEvent+0x242>
			break;
 8004a58:	bf00      	nop
 8004a5a:	e000      	b.n	8004a5e <holdEvent+0x242>
			break;
 8004a5c:	bf00      	nop
}
 8004a5e:	bf00      	nop
 8004a60:	bd80      	pop	{r7, pc}
 8004a62:	bf00      	nop
 8004a64:	200002bc 	.word	0x200002bc
 8004a68:	2000033c 	.word	0x2000033c
 8004a6c:	200002d8 	.word	0x200002d8
 8004a70:	200002f4 	.word	0x200002f4
 8004a74:	2000033d 	.word	0x2000033d
 8004a78:	200002b0 	.word	0x200002b0
 8004a7c:	1b4e81b5 	.word	0x1b4e81b5
 8004a80:	66666667 	.word	0x66666667
 8004a84:	20000310 	.word	0x20000310

08004a88 <releasePointing>:
void releasePointing(int swNum) {
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b084      	sub	sp, #16
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
		int cnt = getPressCount(swNum);
 8004a90:	6878      	ldr	r0, [r7, #4]
 8004a92:	f7ff fe8f 	bl	80047b4 <getPressCount>
 8004a96:	60f8      	str	r0, [r7, #12]
		if(cnt < MID_PRESS) {
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	f5b3 7f2f 	cmp.w	r3, #700	@ 0x2bc
 8004a9e:	da03      	bge.n	8004aa8 <releasePointing+0x20>
			rsp = SHORT;
 8004aa0:	4b0b      	ldr	r3, [pc, #44]	@ (8004ad0 <releasePointing+0x48>)
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	701a      	strb	r2, [r3, #0]
		} else if(cnt > MID_PRESS && cnt < LONG_PRESS) {
			rsp = MID;
		} else {
			rsp = LONG;
		}
}
 8004aa6:	e00f      	b.n	8004ac8 <releasePointing+0x40>
		} else if(cnt > MID_PRESS && cnt < LONG_PRESS) {
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	f5b3 7f2f 	cmp.w	r3, #700	@ 0x2bc
 8004aae:	dd08      	ble.n	8004ac2 <releasePointing+0x3a>
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	f640 12c3 	movw	r2, #2499	@ 0x9c3
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	dc03      	bgt.n	8004ac2 <releasePointing+0x3a>
			rsp = MID;
 8004aba:	4b05      	ldr	r3, [pc, #20]	@ (8004ad0 <releasePointing+0x48>)
 8004abc:	2201      	movs	r2, #1
 8004abe:	701a      	strb	r2, [r3, #0]
}
 8004ac0:	e002      	b.n	8004ac8 <releasePointing+0x40>
			rsp = LONG;
 8004ac2:	4b03      	ldr	r3, [pc, #12]	@ (8004ad0 <releasePointing+0x48>)
 8004ac4:	2202      	movs	r2, #2
 8004ac6:	701a      	strb	r2, [r3, #0]
}
 8004ac8:	bf00      	nop
 8004aca:	3710      	adds	r7, #16
 8004acc:	46bd      	mov	sp, r7
 8004ace:	bd80      	pop	{r7, pc}
 8004ad0:	2000033c 	.word	0x2000033c

08004ad4 <sw1DefaultHandler>:

void sw1DefaultHandler() {
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	af00      	add	r7, sp, #0
	sw1.pressCnt = 0;
 8004ad8:	4b06      	ldr	r3, [pc, #24]	@ (8004af4 <sw1DefaultHandler+0x20>)
 8004ada:	2200      	movs	r2, #0
 8004adc:	605a      	str	r2, [r3, #4]
	if(getBuzzEnabled() == TRUE) {
 8004ade:	f7fd fd2d 	bl	800253c <getBuzzEnabled>
 8004ae2:	4603      	mov	r3, r0
 8004ae4:	2b01      	cmp	r3, #1
 8004ae6:	d102      	bne.n	8004aee <sw1DefaultHandler+0x1a>
		setbuzzerOnOff(1);		   // 부저 on
 8004ae8:	2001      	movs	r0, #1
 8004aea:	f7fd fd43 	bl	8002574 <setbuzzerOnOff>
	}
}
 8004aee:	bf00      	nop
 8004af0:	bd80      	pop	{r7, pc}
 8004af2:	bf00      	nop
 8004af4:	200002bc 	.word	0x200002bc

08004af8 <sw2DefaultHandler>:
void sw2DefaultHandler() {
 8004af8:	b580      	push	{r7, lr}
 8004afa:	af00      	add	r7, sp, #0
	sw2.pressCnt = 0;
 8004afc:	4b06      	ldr	r3, [pc, #24]	@ (8004b18 <sw2DefaultHandler+0x20>)
 8004afe:	2200      	movs	r2, #0
 8004b00:	605a      	str	r2, [r3, #4]
	if(getBuzzEnabled() == TRUE) {
 8004b02:	f7fd fd1b 	bl	800253c <getBuzzEnabled>
 8004b06:	4603      	mov	r3, r0
 8004b08:	2b01      	cmp	r3, #1
 8004b0a:	d102      	bne.n	8004b12 <sw2DefaultHandler+0x1a>
		setbuzzerOnOff(1);		   // 부저 on
 8004b0c:	2001      	movs	r0, #1
 8004b0e:	f7fd fd31 	bl	8002574 <setbuzzerOnOff>
	}
}
 8004b12:	bf00      	nop
 8004b14:	bd80      	pop	{r7, pc}
 8004b16:	bf00      	nop
 8004b18:	200002d8 	.word	0x200002d8

08004b1c <sw3DefaultHandler>:
void sw3DefaultHandler() {
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	af00      	add	r7, sp, #0
	sw3.pressCnt = 0;
 8004b20:	4b06      	ldr	r3, [pc, #24]	@ (8004b3c <sw3DefaultHandler+0x20>)
 8004b22:	2200      	movs	r2, #0
 8004b24:	605a      	str	r2, [r3, #4]
	if(getBuzzEnabled() == TRUE) {
 8004b26:	f7fd fd09 	bl	800253c <getBuzzEnabled>
 8004b2a:	4603      	mov	r3, r0
 8004b2c:	2b01      	cmp	r3, #1
 8004b2e:	d102      	bne.n	8004b36 <sw3DefaultHandler+0x1a>
		setbuzzerOnOff(1);		   // 부저 on
 8004b30:	2001      	movs	r0, #1
 8004b32:	f7fd fd1f 	bl	8002574 <setbuzzerOnOff>
	}
}
 8004b36:	bf00      	nop
 8004b38:	bd80      	pop	{r7, pc}
 8004b3a:	bf00      	nop
 8004b3c:	200002f4 	.word	0x200002f4

08004b40 <sw4DefaultHandler>:
void sw4DefaultHandler() {
 8004b40:	b580      	push	{r7, lr}
 8004b42:	af00      	add	r7, sp, #0
	sw4.pressCnt = 0;
 8004b44:	4b06      	ldr	r3, [pc, #24]	@ (8004b60 <sw4DefaultHandler+0x20>)
 8004b46:	2200      	movs	r2, #0
 8004b48:	605a      	str	r2, [r3, #4]
	if(getBuzzEnabled() == TRUE) {
 8004b4a:	f7fd fcf7 	bl	800253c <getBuzzEnabled>
 8004b4e:	4603      	mov	r3, r0
 8004b50:	2b01      	cmp	r3, #1
 8004b52:	d102      	bne.n	8004b5a <sw4DefaultHandler+0x1a>
		setbuzzerOnOff(1);		   // 부저 on
 8004b54:	2001      	movs	r0, #1
 8004b56:	f7fd fd0d 	bl	8002574 <setbuzzerOnOff>
	}
}
 8004b5a:	bf00      	nop
 8004b5c:	bd80      	pop	{r7, pc}
 8004b5e:	bf00      	nop
 8004b60:	20000310 	.word	0x20000310

08004b64 <getBlink>:

int getSystemMillisecond() {
	return sys.millisecond;
}

uint8_t getBlink() {
 8004b64:	b480      	push	{r7}
 8004b66:	af00      	add	r7, sp, #0
	return sys.blink;
 8004b68:	4b03      	ldr	r3, [pc, #12]	@ (8004b78 <getBlink+0x14>)
 8004b6a:	791b      	ldrb	r3, [r3, #4]
}
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b74:	4770      	bx	lr
 8004b76:	bf00      	nop
 8004b78:	200002b0 	.word	0x200002b0

08004b7c <getWaitingTime>:

int getWaitingTime() {
 8004b7c:	b480      	push	{r7}
 8004b7e:	af00      	add	r7, sp, #0
	return sys.waitingTime;
 8004b80:	4b03      	ldr	r3, [pc, #12]	@ (8004b90 <getWaitingTime+0x14>)
 8004b82:	689b      	ldr	r3, [r3, #8]
}
 8004b84:	4618      	mov	r0, r3
 8004b86:	46bd      	mov	sp, r7
 8004b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8c:	4770      	bx	lr
 8004b8e:	bf00      	nop
 8004b90:	200002b0 	.word	0x200002b0

08004b94 <setWaitingTime>:

void setWaitingTime(int t) {
 8004b94:	b480      	push	{r7}
 8004b96:	b083      	sub	sp, #12
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
	sys.waitingTime = t;
 8004b9c:	4a04      	ldr	r2, [pc, #16]	@ (8004bb0 <setWaitingTime+0x1c>)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6093      	str	r3, [r2, #8]
}
 8004ba2:	bf00      	nop
 8004ba4:	370c      	adds	r7, #12
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bac:	4770      	bx	lr
 8004bae:	bf00      	nop
 8004bb0:	200002b0 	.word	0x200002b0

08004bb4 <systemMillisecondCount>:

void systemMillisecondCount() {
 8004bb4:	b480      	push	{r7}
 8004bb6:	af00      	add	r7, sp, #0
	if(sys.millisecond < 1000) {
 8004bb8:	4b09      	ldr	r3, [pc, #36]	@ (8004be0 <systemMillisecondCount+0x2c>)
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004bc0:	da05      	bge.n	8004bce <systemMillisecondCount+0x1a>
		sys.millisecond++;
 8004bc2:	4b07      	ldr	r3, [pc, #28]	@ (8004be0 <systemMillisecondCount+0x2c>)
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	3301      	adds	r3, #1
 8004bc8:	4a05      	ldr	r2, [pc, #20]	@ (8004be0 <systemMillisecondCount+0x2c>)
 8004bca:	6013      	str	r3, [r2, #0]
	} else {
		sys.millisecond = 0;
	}
}
 8004bcc:	e002      	b.n	8004bd4 <systemMillisecondCount+0x20>
		sys.millisecond = 0;
 8004bce:	4b04      	ldr	r3, [pc, #16]	@ (8004be0 <systemMillisecondCount+0x2c>)
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	601a      	str	r2, [r3, #0]
}
 8004bd4:	bf00      	nop
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bdc:	4770      	bx	lr
 8004bde:	bf00      	nop
 8004be0:	200002b0 	.word	0x200002b0

08004be4 <blinking>:

void blinking() {
 8004be4:	b480      	push	{r7}
 8004be6:	af00      	add	r7, sp, #0
	if(sys.millisecond > 500) {
 8004be8:	4b08      	ldr	r3, [pc, #32]	@ (8004c0c <blinking+0x28>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8004bf0:	dd03      	ble.n	8004bfa <blinking+0x16>
		sys.blink = 1;
 8004bf2:	4b06      	ldr	r3, [pc, #24]	@ (8004c0c <blinking+0x28>)
 8004bf4:	2201      	movs	r2, #1
 8004bf6:	711a      	strb	r2, [r3, #4]
	} else {
		sys.blink = 0;
	}
}
 8004bf8:	e002      	b.n	8004c00 <blinking+0x1c>
		sys.blink = 0;
 8004bfa:	4b04      	ldr	r3, [pc, #16]	@ (8004c0c <blinking+0x28>)
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	711a      	strb	r2, [r3, #4]
}
 8004c00:	bf00      	nop
 8004c02:	46bd      	mov	sp, r7
 8004c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c08:	4770      	bx	lr
 8004c0a:	bf00      	nop
 8004c0c:	200002b0 	.word	0x200002b0

08004c10 <waitingTimeCnt>:
void waitingTimeCnt() {
 8004c10:	b580      	push	{r7, lr}
 8004c12:	af00      	add	r7, sp, #0
	if(mode == CLOCK_SETTING || mode == ALARM || mode == ALARM_SETTING || (mode == STOPWATCH && stopwatch.state == STOP)){
 8004c14:	4b2f      	ldr	r3, [pc, #188]	@ (8004cd4 <waitingTimeCnt+0xc4>)
 8004c16:	781b      	ldrb	r3, [r3, #0]
 8004c18:	2b03      	cmp	r3, #3
 8004c1a:	d00f      	beq.n	8004c3c <waitingTimeCnt+0x2c>
 8004c1c:	4b2d      	ldr	r3, [pc, #180]	@ (8004cd4 <waitingTimeCnt+0xc4>)
 8004c1e:	781b      	ldrb	r3, [r3, #0]
 8004c20:	2b01      	cmp	r3, #1
 8004c22:	d00b      	beq.n	8004c3c <waitingTimeCnt+0x2c>
 8004c24:	4b2b      	ldr	r3, [pc, #172]	@ (8004cd4 <waitingTimeCnt+0xc4>)
 8004c26:	781b      	ldrb	r3, [r3, #0]
 8004c28:	2b04      	cmp	r3, #4
 8004c2a:	d007      	beq.n	8004c3c <waitingTimeCnt+0x2c>
 8004c2c:	4b29      	ldr	r3, [pc, #164]	@ (8004cd4 <waitingTimeCnt+0xc4>)
 8004c2e:	781b      	ldrb	r3, [r3, #0]
 8004c30:	2b02      	cmp	r3, #2
 8004c32:	d14c      	bne.n	8004cce <waitingTimeCnt+0xbe>
 8004c34:	4b28      	ldr	r3, [pc, #160]	@ (8004cd8 <waitingTimeCnt+0xc8>)
 8004c36:	785b      	ldrb	r3, [r3, #1]
 8004c38:	2b02      	cmp	r3, #2
 8004c3a:	d148      	bne.n	8004cce <waitingTimeCnt+0xbe>
		if(sys.waitingTime <= 30000) { // 30초 대기
 8004c3c:	4b27      	ldr	r3, [pc, #156]	@ (8004cdc <waitingTimeCnt+0xcc>)
 8004c3e:	689b      	ldr	r3, [r3, #8]
 8004c40:	f247 5230 	movw	r2, #30000	@ 0x7530
 8004c44:	4293      	cmp	r3, r2
 8004c46:	dc05      	bgt.n	8004c54 <waitingTimeCnt+0x44>
			sys.waitingTime++;
 8004c48:	4b24      	ldr	r3, [pc, #144]	@ (8004cdc <waitingTimeCnt+0xcc>)
 8004c4a:	689b      	ldr	r3, [r3, #8]
 8004c4c:	3301      	adds	r3, #1
 8004c4e:	4a23      	ldr	r2, [pc, #140]	@ (8004cdc <waitingTimeCnt+0xcc>)
 8004c50:	6093      	str	r3, [r2, #8]
			sys.waitingTime = 0;
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 1);
			mode = ALARM;
		}
	}
}
 8004c52:	e03c      	b.n	8004cce <waitingTimeCnt+0xbe>
		} else if((mode == CLOCK_SETTING || mode == ALARM || mode == STOPWATCH) && sys.waitingTime > 30000){
 8004c54:	4b1f      	ldr	r3, [pc, #124]	@ (8004cd4 <waitingTimeCnt+0xc4>)
 8004c56:	781b      	ldrb	r3, [r3, #0]
 8004c58:	2b03      	cmp	r3, #3
 8004c5a:	d007      	beq.n	8004c6c <waitingTimeCnt+0x5c>
 8004c5c:	4b1d      	ldr	r3, [pc, #116]	@ (8004cd4 <waitingTimeCnt+0xc4>)
 8004c5e:	781b      	ldrb	r3, [r3, #0]
 8004c60:	2b01      	cmp	r3, #1
 8004c62:	d003      	beq.n	8004c6c <waitingTimeCnt+0x5c>
 8004c64:	4b1b      	ldr	r3, [pc, #108]	@ (8004cd4 <waitingTimeCnt+0xc4>)
 8004c66:	781b      	ldrb	r3, [r3, #0]
 8004c68:	2b02      	cmp	r3, #2
 8004c6a:	d118      	bne.n	8004c9e <waitingTimeCnt+0x8e>
 8004c6c:	4b1b      	ldr	r3, [pc, #108]	@ (8004cdc <waitingTimeCnt+0xcc>)
 8004c6e:	689b      	ldr	r3, [r3, #8]
 8004c70:	f247 5230 	movw	r2, #30000	@ 0x7530
 8004c74:	4293      	cmp	r3, r2
 8004c76:	dd12      	ble.n	8004c9e <waitingTimeCnt+0x8e>
			if(mode == CLOCK_SETTING) {
 8004c78:	4b16      	ldr	r3, [pc, #88]	@ (8004cd4 <waitingTimeCnt+0xc4>)
 8004c7a:	781b      	ldrb	r3, [r3, #0]
 8004c7c:	2b03      	cmp	r3, #3
 8004c7e:	d104      	bne.n	8004c8a <waitingTimeCnt+0x7a>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 1);
 8004c80:	2201      	movs	r2, #1
 8004c82:	2120      	movs	r1, #32
 8004c84:	4816      	ldr	r0, [pc, #88]	@ (8004ce0 <waitingTimeCnt+0xd0>)
 8004c86:	f000 fc8d 	bl	80055a4 <HAL_GPIO_WritePin>
			setbuzzerOnOff(1);
 8004c8a:	2001      	movs	r0, #1
 8004c8c:	f7fd fc72 	bl	8002574 <setbuzzerOnOff>
			sys.waitingTime = 0;
 8004c90:	4b12      	ldr	r3, [pc, #72]	@ (8004cdc <waitingTimeCnt+0xcc>)
 8004c92:	2200      	movs	r2, #0
 8004c94:	609a      	str	r2, [r3, #8]
			mode = CLOCK;
 8004c96:	4b0f      	ldr	r3, [pc, #60]	@ (8004cd4 <waitingTimeCnt+0xc4>)
 8004c98:	2200      	movs	r2, #0
 8004c9a:	701a      	strb	r2, [r3, #0]
}
 8004c9c:	e017      	b.n	8004cce <waitingTimeCnt+0xbe>
		} else if(mode == ALARM_SETTING && sys.waitingTime > 30000) {
 8004c9e:	4b0d      	ldr	r3, [pc, #52]	@ (8004cd4 <waitingTimeCnt+0xc4>)
 8004ca0:	781b      	ldrb	r3, [r3, #0]
 8004ca2:	2b04      	cmp	r3, #4
 8004ca4:	d113      	bne.n	8004cce <waitingTimeCnt+0xbe>
 8004ca6:	4b0d      	ldr	r3, [pc, #52]	@ (8004cdc <waitingTimeCnt+0xcc>)
 8004ca8:	689b      	ldr	r3, [r3, #8]
 8004caa:	f247 5230 	movw	r2, #30000	@ 0x7530
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	dd0d      	ble.n	8004cce <waitingTimeCnt+0xbe>
			setbuzzerOnOff(1);
 8004cb2:	2001      	movs	r0, #1
 8004cb4:	f7fd fc5e 	bl	8002574 <setbuzzerOnOff>
			sys.waitingTime = 0;
 8004cb8:	4b08      	ldr	r3, [pc, #32]	@ (8004cdc <waitingTimeCnt+0xcc>)
 8004cba:	2200      	movs	r2, #0
 8004cbc:	609a      	str	r2, [r3, #8]
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 1);
 8004cbe:	2201      	movs	r2, #1
 8004cc0:	2120      	movs	r1, #32
 8004cc2:	4807      	ldr	r0, [pc, #28]	@ (8004ce0 <waitingTimeCnt+0xd0>)
 8004cc4:	f000 fc6e 	bl	80055a4 <HAL_GPIO_WritePin>
			mode = ALARM;
 8004cc8:	4b02      	ldr	r3, [pc, #8]	@ (8004cd4 <waitingTimeCnt+0xc4>)
 8004cca:	2201      	movs	r2, #1
 8004ccc:	701a      	strb	r2, [r3, #0]
}
 8004cce:	bf00      	nop
 8004cd0:	bd80      	pop	{r7, pc}
 8004cd2:	bf00      	nop
 8004cd4:	2000033d 	.word	0x2000033d
 8004cd8:	200000a0 	.word	0x200000a0
 8004cdc:	200002b0 	.word	0x200002b0
 8004ce0:	40020400 	.word	0x40020400

08004ce4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b086      	sub	sp, #24
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004cec:	4a14      	ldr	r2, [pc, #80]	@ (8004d40 <_sbrk+0x5c>)
 8004cee:	4b15      	ldr	r3, [pc, #84]	@ (8004d44 <_sbrk+0x60>)
 8004cf0:	1ad3      	subs	r3, r2, r3
 8004cf2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004cf4:	697b      	ldr	r3, [r7, #20]
 8004cf6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004cf8:	4b13      	ldr	r3, [pc, #76]	@ (8004d48 <_sbrk+0x64>)
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d102      	bne.n	8004d06 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004d00:	4b11      	ldr	r3, [pc, #68]	@ (8004d48 <_sbrk+0x64>)
 8004d02:	4a12      	ldr	r2, [pc, #72]	@ (8004d4c <_sbrk+0x68>)
 8004d04:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004d06:	4b10      	ldr	r3, [pc, #64]	@ (8004d48 <_sbrk+0x64>)
 8004d08:	681a      	ldr	r2, [r3, #0]
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	4413      	add	r3, r2
 8004d0e:	693a      	ldr	r2, [r7, #16]
 8004d10:	429a      	cmp	r2, r3
 8004d12:	d207      	bcs.n	8004d24 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004d14:	f003 f966 	bl	8007fe4 <__errno>
 8004d18:	4603      	mov	r3, r0
 8004d1a:	220c      	movs	r2, #12
 8004d1c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004d1e:	f04f 33ff 	mov.w	r3, #4294967295
 8004d22:	e009      	b.n	8004d38 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004d24:	4b08      	ldr	r3, [pc, #32]	@ (8004d48 <_sbrk+0x64>)
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004d2a:	4b07      	ldr	r3, [pc, #28]	@ (8004d48 <_sbrk+0x64>)
 8004d2c:	681a      	ldr	r2, [r3, #0]
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	4413      	add	r3, r2
 8004d32:	4a05      	ldr	r2, [pc, #20]	@ (8004d48 <_sbrk+0x64>)
 8004d34:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004d36:	68fb      	ldr	r3, [r7, #12]
}
 8004d38:	4618      	mov	r0, r3
 8004d3a:	3718      	adds	r7, #24
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	bd80      	pop	{r7, pc}
 8004d40:	20020000 	.word	0x20020000
 8004d44:	00000400 	.word	0x00000400
 8004d48:	20000340 	.word	0x20000340
 8004d4c:	20000498 	.word	0x20000498

08004d50 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004d50:	b480      	push	{r7}
 8004d52:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004d54:	4b06      	ldr	r3, [pc, #24]	@ (8004d70 <SystemInit+0x20>)
 8004d56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d5a:	4a05      	ldr	r2, [pc, #20]	@ (8004d70 <SystemInit+0x20>)
 8004d5c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004d60:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004d64:	bf00      	nop
 8004d66:	46bd      	mov	sp, r7
 8004d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6c:	4770      	bx	lr
 8004d6e:	bf00      	nop
 8004d70:	e000ed00 	.word	0xe000ed00

08004d74 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8004d74:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004dac <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8004d78:	f7ff ffea 	bl	8004d50 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004d7c:	480c      	ldr	r0, [pc, #48]	@ (8004db0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004d7e:	490d      	ldr	r1, [pc, #52]	@ (8004db4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004d80:	4a0d      	ldr	r2, [pc, #52]	@ (8004db8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004d82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004d84:	e002      	b.n	8004d8c <LoopCopyDataInit>

08004d86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004d86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004d88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004d8a:	3304      	adds	r3, #4

08004d8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004d8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004d8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004d90:	d3f9      	bcc.n	8004d86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004d92:	4a0a      	ldr	r2, [pc, #40]	@ (8004dbc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004d94:	4c0a      	ldr	r4, [pc, #40]	@ (8004dc0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8004d96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004d98:	e001      	b.n	8004d9e <LoopFillZerobss>

08004d9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004d9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004d9c:	3204      	adds	r2, #4

08004d9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004d9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004da0:	d3fb      	bcc.n	8004d9a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004da2:	f003 f925 	bl	8007ff0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004da6:	f7fe f99f 	bl	80030e8 <main>
  bx  lr    
 8004daa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004dac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004db0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004db4:	200001b8 	.word	0x200001b8
  ldr r2, =_sidata
 8004db8:	08008c14 	.word	0x08008c14
  ldr r2, =_sbss
 8004dbc:	200001b8 	.word	0x200001b8
  ldr r4, =_ebss
 8004dc0:	20000494 	.word	0x20000494

08004dc4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004dc4:	e7fe      	b.n	8004dc4 <ADC_IRQHandler>
	...

08004dc8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004dcc:	4b0e      	ldr	r3, [pc, #56]	@ (8004e08 <HAL_Init+0x40>)
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	4a0d      	ldr	r2, [pc, #52]	@ (8004e08 <HAL_Init+0x40>)
 8004dd2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004dd6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004dd8:	4b0b      	ldr	r3, [pc, #44]	@ (8004e08 <HAL_Init+0x40>)
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	4a0a      	ldr	r2, [pc, #40]	@ (8004e08 <HAL_Init+0x40>)
 8004dde:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004de2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004de4:	4b08      	ldr	r3, [pc, #32]	@ (8004e08 <HAL_Init+0x40>)
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	4a07      	ldr	r2, [pc, #28]	@ (8004e08 <HAL_Init+0x40>)
 8004dea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004dee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004df0:	2003      	movs	r0, #3
 8004df2:	f000 f94f 	bl	8005094 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004df6:	200f      	movs	r0, #15
 8004df8:	f000 f808 	bl	8004e0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004dfc:	f7fe fcda 	bl	80037b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004e00:	2300      	movs	r3, #0
}
 8004e02:	4618      	mov	r0, r3
 8004e04:	bd80      	pop	{r7, pc}
 8004e06:	bf00      	nop
 8004e08:	40023c00 	.word	0x40023c00

08004e0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b082      	sub	sp, #8
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004e14:	4b12      	ldr	r3, [pc, #72]	@ (8004e60 <HAL_InitTick+0x54>)
 8004e16:	681a      	ldr	r2, [r3, #0]
 8004e18:	4b12      	ldr	r3, [pc, #72]	@ (8004e64 <HAL_InitTick+0x58>)
 8004e1a:	781b      	ldrb	r3, [r3, #0]
 8004e1c:	4619      	mov	r1, r3
 8004e1e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004e22:	fbb3 f3f1 	udiv	r3, r3, r1
 8004e26:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	f000 f967 	bl	80050fe <HAL_SYSTICK_Config>
 8004e30:	4603      	mov	r3, r0
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d001      	beq.n	8004e3a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004e36:	2301      	movs	r3, #1
 8004e38:	e00e      	b.n	8004e58 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2b0f      	cmp	r3, #15
 8004e3e:	d80a      	bhi.n	8004e56 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004e40:	2200      	movs	r2, #0
 8004e42:	6879      	ldr	r1, [r7, #4]
 8004e44:	f04f 30ff 	mov.w	r0, #4294967295
 8004e48:	f000 f92f 	bl	80050aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004e4c:	4a06      	ldr	r2, [pc, #24]	@ (8004e68 <HAL_InitTick+0x5c>)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004e52:	2300      	movs	r3, #0
 8004e54:	e000      	b.n	8004e58 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004e56:	2301      	movs	r3, #1
}
 8004e58:	4618      	mov	r0, r3
 8004e5a:	3708      	adds	r7, #8
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	bd80      	pop	{r7, pc}
 8004e60:	2000015c 	.word	0x2000015c
 8004e64:	20000164 	.word	0x20000164
 8004e68:	20000160 	.word	0x20000160

08004e6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004e6c:	b480      	push	{r7}
 8004e6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004e70:	4b06      	ldr	r3, [pc, #24]	@ (8004e8c <HAL_IncTick+0x20>)
 8004e72:	781b      	ldrb	r3, [r3, #0]
 8004e74:	461a      	mov	r2, r3
 8004e76:	4b06      	ldr	r3, [pc, #24]	@ (8004e90 <HAL_IncTick+0x24>)
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	4413      	add	r3, r2
 8004e7c:	4a04      	ldr	r2, [pc, #16]	@ (8004e90 <HAL_IncTick+0x24>)
 8004e7e:	6013      	str	r3, [r2, #0]
}
 8004e80:	bf00      	nop
 8004e82:	46bd      	mov	sp, r7
 8004e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e88:	4770      	bx	lr
 8004e8a:	bf00      	nop
 8004e8c:	20000164 	.word	0x20000164
 8004e90:	20000348 	.word	0x20000348

08004e94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004e94:	b480      	push	{r7}
 8004e96:	af00      	add	r7, sp, #0
  return uwTick;
 8004e98:	4b03      	ldr	r3, [pc, #12]	@ (8004ea8 <HAL_GetTick+0x14>)
 8004e9a:	681b      	ldr	r3, [r3, #0]
}
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea4:	4770      	bx	lr
 8004ea6:	bf00      	nop
 8004ea8:	20000348 	.word	0x20000348

08004eac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b084      	sub	sp, #16
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004eb4:	f7ff ffee 	bl	8004e94 <HAL_GetTick>
 8004eb8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ec4:	d005      	beq.n	8004ed2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004ec6:	4b0a      	ldr	r3, [pc, #40]	@ (8004ef0 <HAL_Delay+0x44>)
 8004ec8:	781b      	ldrb	r3, [r3, #0]
 8004eca:	461a      	mov	r2, r3
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	4413      	add	r3, r2
 8004ed0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004ed2:	bf00      	nop
 8004ed4:	f7ff ffde 	bl	8004e94 <HAL_GetTick>
 8004ed8:	4602      	mov	r2, r0
 8004eda:	68bb      	ldr	r3, [r7, #8]
 8004edc:	1ad3      	subs	r3, r2, r3
 8004ede:	68fa      	ldr	r2, [r7, #12]
 8004ee0:	429a      	cmp	r2, r3
 8004ee2:	d8f7      	bhi.n	8004ed4 <HAL_Delay+0x28>
  {
  }
}
 8004ee4:	bf00      	nop
 8004ee6:	bf00      	nop
 8004ee8:	3710      	adds	r7, #16
 8004eea:	46bd      	mov	sp, r7
 8004eec:	bd80      	pop	{r7, pc}
 8004eee:	bf00      	nop
 8004ef0:	20000164 	.word	0x20000164

08004ef4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004ef4:	b480      	push	{r7}
 8004ef6:	b085      	sub	sp, #20
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	f003 0307 	and.w	r3, r3, #7
 8004f02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004f04:	4b0c      	ldr	r3, [pc, #48]	@ (8004f38 <__NVIC_SetPriorityGrouping+0x44>)
 8004f06:	68db      	ldr	r3, [r3, #12]
 8004f08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004f0a:	68ba      	ldr	r2, [r7, #8]
 8004f0c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004f10:	4013      	ands	r3, r2
 8004f12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004f18:	68bb      	ldr	r3, [r7, #8]
 8004f1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004f1c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004f20:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004f24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004f26:	4a04      	ldr	r2, [pc, #16]	@ (8004f38 <__NVIC_SetPriorityGrouping+0x44>)
 8004f28:	68bb      	ldr	r3, [r7, #8]
 8004f2a:	60d3      	str	r3, [r2, #12]
}
 8004f2c:	bf00      	nop
 8004f2e:	3714      	adds	r7, #20
 8004f30:	46bd      	mov	sp, r7
 8004f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f36:	4770      	bx	lr
 8004f38:	e000ed00 	.word	0xe000ed00

08004f3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004f3c:	b480      	push	{r7}
 8004f3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004f40:	4b04      	ldr	r3, [pc, #16]	@ (8004f54 <__NVIC_GetPriorityGrouping+0x18>)
 8004f42:	68db      	ldr	r3, [r3, #12]
 8004f44:	0a1b      	lsrs	r3, r3, #8
 8004f46:	f003 0307 	and.w	r3, r3, #7
}
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f52:	4770      	bx	lr
 8004f54:	e000ed00 	.word	0xe000ed00

08004f58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004f58:	b480      	push	{r7}
 8004f5a:	b083      	sub	sp, #12
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	4603      	mov	r3, r0
 8004f60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004f62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	db0b      	blt.n	8004f82 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004f6a:	79fb      	ldrb	r3, [r7, #7]
 8004f6c:	f003 021f 	and.w	r2, r3, #31
 8004f70:	4907      	ldr	r1, [pc, #28]	@ (8004f90 <__NVIC_EnableIRQ+0x38>)
 8004f72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f76:	095b      	lsrs	r3, r3, #5
 8004f78:	2001      	movs	r0, #1
 8004f7a:	fa00 f202 	lsl.w	r2, r0, r2
 8004f7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004f82:	bf00      	nop
 8004f84:	370c      	adds	r7, #12
 8004f86:	46bd      	mov	sp, r7
 8004f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8c:	4770      	bx	lr
 8004f8e:	bf00      	nop
 8004f90:	e000e100 	.word	0xe000e100

08004f94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004f94:	b480      	push	{r7}
 8004f96:	b083      	sub	sp, #12
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	4603      	mov	r3, r0
 8004f9c:	6039      	str	r1, [r7, #0]
 8004f9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004fa0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	db0a      	blt.n	8004fbe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	b2da      	uxtb	r2, r3
 8004fac:	490c      	ldr	r1, [pc, #48]	@ (8004fe0 <__NVIC_SetPriority+0x4c>)
 8004fae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fb2:	0112      	lsls	r2, r2, #4
 8004fb4:	b2d2      	uxtb	r2, r2
 8004fb6:	440b      	add	r3, r1
 8004fb8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004fbc:	e00a      	b.n	8004fd4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	b2da      	uxtb	r2, r3
 8004fc2:	4908      	ldr	r1, [pc, #32]	@ (8004fe4 <__NVIC_SetPriority+0x50>)
 8004fc4:	79fb      	ldrb	r3, [r7, #7]
 8004fc6:	f003 030f 	and.w	r3, r3, #15
 8004fca:	3b04      	subs	r3, #4
 8004fcc:	0112      	lsls	r2, r2, #4
 8004fce:	b2d2      	uxtb	r2, r2
 8004fd0:	440b      	add	r3, r1
 8004fd2:	761a      	strb	r2, [r3, #24]
}
 8004fd4:	bf00      	nop
 8004fd6:	370c      	adds	r7, #12
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fde:	4770      	bx	lr
 8004fe0:	e000e100 	.word	0xe000e100
 8004fe4:	e000ed00 	.word	0xe000ed00

08004fe8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004fe8:	b480      	push	{r7}
 8004fea:	b089      	sub	sp, #36	@ 0x24
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	60f8      	str	r0, [r7, #12]
 8004ff0:	60b9      	str	r1, [r7, #8]
 8004ff2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	f003 0307 	and.w	r3, r3, #7
 8004ffa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004ffc:	69fb      	ldr	r3, [r7, #28]
 8004ffe:	f1c3 0307 	rsb	r3, r3, #7
 8005002:	2b04      	cmp	r3, #4
 8005004:	bf28      	it	cs
 8005006:	2304      	movcs	r3, #4
 8005008:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800500a:	69fb      	ldr	r3, [r7, #28]
 800500c:	3304      	adds	r3, #4
 800500e:	2b06      	cmp	r3, #6
 8005010:	d902      	bls.n	8005018 <NVIC_EncodePriority+0x30>
 8005012:	69fb      	ldr	r3, [r7, #28]
 8005014:	3b03      	subs	r3, #3
 8005016:	e000      	b.n	800501a <NVIC_EncodePriority+0x32>
 8005018:	2300      	movs	r3, #0
 800501a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800501c:	f04f 32ff 	mov.w	r2, #4294967295
 8005020:	69bb      	ldr	r3, [r7, #24]
 8005022:	fa02 f303 	lsl.w	r3, r2, r3
 8005026:	43da      	mvns	r2, r3
 8005028:	68bb      	ldr	r3, [r7, #8]
 800502a:	401a      	ands	r2, r3
 800502c:	697b      	ldr	r3, [r7, #20]
 800502e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005030:	f04f 31ff 	mov.w	r1, #4294967295
 8005034:	697b      	ldr	r3, [r7, #20]
 8005036:	fa01 f303 	lsl.w	r3, r1, r3
 800503a:	43d9      	mvns	r1, r3
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005040:	4313      	orrs	r3, r2
         );
}
 8005042:	4618      	mov	r0, r3
 8005044:	3724      	adds	r7, #36	@ 0x24
 8005046:	46bd      	mov	sp, r7
 8005048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504c:	4770      	bx	lr
	...

08005050 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005050:	b580      	push	{r7, lr}
 8005052:	b082      	sub	sp, #8
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	3b01      	subs	r3, #1
 800505c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005060:	d301      	bcc.n	8005066 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005062:	2301      	movs	r3, #1
 8005064:	e00f      	b.n	8005086 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005066:	4a0a      	ldr	r2, [pc, #40]	@ (8005090 <SysTick_Config+0x40>)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	3b01      	subs	r3, #1
 800506c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800506e:	210f      	movs	r1, #15
 8005070:	f04f 30ff 	mov.w	r0, #4294967295
 8005074:	f7ff ff8e 	bl	8004f94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005078:	4b05      	ldr	r3, [pc, #20]	@ (8005090 <SysTick_Config+0x40>)
 800507a:	2200      	movs	r2, #0
 800507c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800507e:	4b04      	ldr	r3, [pc, #16]	@ (8005090 <SysTick_Config+0x40>)
 8005080:	2207      	movs	r2, #7
 8005082:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005084:	2300      	movs	r3, #0
}
 8005086:	4618      	mov	r0, r3
 8005088:	3708      	adds	r7, #8
 800508a:	46bd      	mov	sp, r7
 800508c:	bd80      	pop	{r7, pc}
 800508e:	bf00      	nop
 8005090:	e000e010 	.word	0xe000e010

08005094 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005094:	b580      	push	{r7, lr}
 8005096:	b082      	sub	sp, #8
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800509c:	6878      	ldr	r0, [r7, #4]
 800509e:	f7ff ff29 	bl	8004ef4 <__NVIC_SetPriorityGrouping>
}
 80050a2:	bf00      	nop
 80050a4:	3708      	adds	r7, #8
 80050a6:	46bd      	mov	sp, r7
 80050a8:	bd80      	pop	{r7, pc}

080050aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80050aa:	b580      	push	{r7, lr}
 80050ac:	b086      	sub	sp, #24
 80050ae:	af00      	add	r7, sp, #0
 80050b0:	4603      	mov	r3, r0
 80050b2:	60b9      	str	r1, [r7, #8]
 80050b4:	607a      	str	r2, [r7, #4]
 80050b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80050b8:	2300      	movs	r3, #0
 80050ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80050bc:	f7ff ff3e 	bl	8004f3c <__NVIC_GetPriorityGrouping>
 80050c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80050c2:	687a      	ldr	r2, [r7, #4]
 80050c4:	68b9      	ldr	r1, [r7, #8]
 80050c6:	6978      	ldr	r0, [r7, #20]
 80050c8:	f7ff ff8e 	bl	8004fe8 <NVIC_EncodePriority>
 80050cc:	4602      	mov	r2, r0
 80050ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80050d2:	4611      	mov	r1, r2
 80050d4:	4618      	mov	r0, r3
 80050d6:	f7ff ff5d 	bl	8004f94 <__NVIC_SetPriority>
}
 80050da:	bf00      	nop
 80050dc:	3718      	adds	r7, #24
 80050de:	46bd      	mov	sp, r7
 80050e0:	bd80      	pop	{r7, pc}

080050e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80050e2:	b580      	push	{r7, lr}
 80050e4:	b082      	sub	sp, #8
 80050e6:	af00      	add	r7, sp, #0
 80050e8:	4603      	mov	r3, r0
 80050ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80050ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050f0:	4618      	mov	r0, r3
 80050f2:	f7ff ff31 	bl	8004f58 <__NVIC_EnableIRQ>
}
 80050f6:	bf00      	nop
 80050f8:	3708      	adds	r7, #8
 80050fa:	46bd      	mov	sp, r7
 80050fc:	bd80      	pop	{r7, pc}

080050fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80050fe:	b580      	push	{r7, lr}
 8005100:	b082      	sub	sp, #8
 8005102:	af00      	add	r7, sp, #0
 8005104:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005106:	6878      	ldr	r0, [r7, #4]
 8005108:	f7ff ffa2 	bl	8005050 <SysTick_Config>
 800510c:	4603      	mov	r3, r0
}
 800510e:	4618      	mov	r0, r3
 8005110:	3708      	adds	r7, #8
 8005112:	46bd      	mov	sp, r7
 8005114:	bd80      	pop	{r7, pc}

08005116 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005116:	b580      	push	{r7, lr}
 8005118:	b084      	sub	sp, #16
 800511a:	af00      	add	r7, sp, #0
 800511c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005122:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005124:	f7ff feb6 	bl	8004e94 <HAL_GetTick>
 8005128:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005130:	b2db      	uxtb	r3, r3
 8005132:	2b02      	cmp	r3, #2
 8005134:	d008      	beq.n	8005148 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2280      	movs	r2, #128	@ 0x80
 800513a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2200      	movs	r2, #0
 8005140:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8005144:	2301      	movs	r3, #1
 8005146:	e052      	b.n	80051ee <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	681a      	ldr	r2, [r3, #0]
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f022 0216 	bic.w	r2, r2, #22
 8005156:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	695a      	ldr	r2, [r3, #20]
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005166:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800516c:	2b00      	cmp	r3, #0
 800516e:	d103      	bne.n	8005178 <HAL_DMA_Abort+0x62>
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005174:	2b00      	cmp	r3, #0
 8005176:	d007      	beq.n	8005188 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	681a      	ldr	r2, [r3, #0]
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f022 0208 	bic.w	r2, r2, #8
 8005186:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	681a      	ldr	r2, [r3, #0]
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f022 0201 	bic.w	r2, r2, #1
 8005196:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005198:	e013      	b.n	80051c2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800519a:	f7ff fe7b 	bl	8004e94 <HAL_GetTick>
 800519e:	4602      	mov	r2, r0
 80051a0:	68bb      	ldr	r3, [r7, #8]
 80051a2:	1ad3      	subs	r3, r2, r3
 80051a4:	2b05      	cmp	r3, #5
 80051a6:	d90c      	bls.n	80051c2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2220      	movs	r2, #32
 80051ac:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	2203      	movs	r2, #3
 80051b2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2200      	movs	r2, #0
 80051ba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80051be:	2303      	movs	r3, #3
 80051c0:	e015      	b.n	80051ee <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f003 0301 	and.w	r3, r3, #1
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d1e4      	bne.n	800519a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80051d4:	223f      	movs	r2, #63	@ 0x3f
 80051d6:	409a      	lsls	r2, r3
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2201      	movs	r2, #1
 80051e0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2200      	movs	r2, #0
 80051e8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80051ec:	2300      	movs	r3, #0
}
 80051ee:	4618      	mov	r0, r3
 80051f0:	3710      	adds	r7, #16
 80051f2:	46bd      	mov	sp, r7
 80051f4:	bd80      	pop	{r7, pc}

080051f6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80051f6:	b480      	push	{r7}
 80051f8:	b083      	sub	sp, #12
 80051fa:	af00      	add	r7, sp, #0
 80051fc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005204:	b2db      	uxtb	r3, r3
 8005206:	2b02      	cmp	r3, #2
 8005208:	d004      	beq.n	8005214 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2280      	movs	r2, #128	@ 0x80
 800520e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8005210:	2301      	movs	r3, #1
 8005212:	e00c      	b.n	800522e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2205      	movs	r2, #5
 8005218:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	681a      	ldr	r2, [r3, #0]
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f022 0201 	bic.w	r2, r2, #1
 800522a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800522c:	2300      	movs	r3, #0
}
 800522e:	4618      	mov	r0, r3
 8005230:	370c      	adds	r7, #12
 8005232:	46bd      	mov	sp, r7
 8005234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005238:	4770      	bx	lr
	...

0800523c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800523c:	b480      	push	{r7}
 800523e:	b089      	sub	sp, #36	@ 0x24
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
 8005244:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005246:	2300      	movs	r3, #0
 8005248:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800524a:	2300      	movs	r3, #0
 800524c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800524e:	2300      	movs	r3, #0
 8005250:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005252:	2300      	movs	r3, #0
 8005254:	61fb      	str	r3, [r7, #28]
 8005256:	e16b      	b.n	8005530 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005258:	2201      	movs	r2, #1
 800525a:	69fb      	ldr	r3, [r7, #28]
 800525c:	fa02 f303 	lsl.w	r3, r2, r3
 8005260:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	697a      	ldr	r2, [r7, #20]
 8005268:	4013      	ands	r3, r2
 800526a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800526c:	693a      	ldr	r2, [r7, #16]
 800526e:	697b      	ldr	r3, [r7, #20]
 8005270:	429a      	cmp	r2, r3
 8005272:	f040 815a 	bne.w	800552a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	685b      	ldr	r3, [r3, #4]
 800527a:	f003 0303 	and.w	r3, r3, #3
 800527e:	2b01      	cmp	r3, #1
 8005280:	d005      	beq.n	800528e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	685b      	ldr	r3, [r3, #4]
 8005286:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800528a:	2b02      	cmp	r3, #2
 800528c:	d130      	bne.n	80052f0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	689b      	ldr	r3, [r3, #8]
 8005292:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005294:	69fb      	ldr	r3, [r7, #28]
 8005296:	005b      	lsls	r3, r3, #1
 8005298:	2203      	movs	r2, #3
 800529a:	fa02 f303 	lsl.w	r3, r2, r3
 800529e:	43db      	mvns	r3, r3
 80052a0:	69ba      	ldr	r2, [r7, #24]
 80052a2:	4013      	ands	r3, r2
 80052a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	68da      	ldr	r2, [r3, #12]
 80052aa:	69fb      	ldr	r3, [r7, #28]
 80052ac:	005b      	lsls	r3, r3, #1
 80052ae:	fa02 f303 	lsl.w	r3, r2, r3
 80052b2:	69ba      	ldr	r2, [r7, #24]
 80052b4:	4313      	orrs	r3, r2
 80052b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	69ba      	ldr	r2, [r7, #24]
 80052bc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	685b      	ldr	r3, [r3, #4]
 80052c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80052c4:	2201      	movs	r2, #1
 80052c6:	69fb      	ldr	r3, [r7, #28]
 80052c8:	fa02 f303 	lsl.w	r3, r2, r3
 80052cc:	43db      	mvns	r3, r3
 80052ce:	69ba      	ldr	r2, [r7, #24]
 80052d0:	4013      	ands	r3, r2
 80052d2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	685b      	ldr	r3, [r3, #4]
 80052d8:	091b      	lsrs	r3, r3, #4
 80052da:	f003 0201 	and.w	r2, r3, #1
 80052de:	69fb      	ldr	r3, [r7, #28]
 80052e0:	fa02 f303 	lsl.w	r3, r2, r3
 80052e4:	69ba      	ldr	r2, [r7, #24]
 80052e6:	4313      	orrs	r3, r2
 80052e8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	69ba      	ldr	r2, [r7, #24]
 80052ee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	685b      	ldr	r3, [r3, #4]
 80052f4:	f003 0303 	and.w	r3, r3, #3
 80052f8:	2b03      	cmp	r3, #3
 80052fa:	d017      	beq.n	800532c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	68db      	ldr	r3, [r3, #12]
 8005300:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005302:	69fb      	ldr	r3, [r7, #28]
 8005304:	005b      	lsls	r3, r3, #1
 8005306:	2203      	movs	r2, #3
 8005308:	fa02 f303 	lsl.w	r3, r2, r3
 800530c:	43db      	mvns	r3, r3
 800530e:	69ba      	ldr	r2, [r7, #24]
 8005310:	4013      	ands	r3, r2
 8005312:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	689a      	ldr	r2, [r3, #8]
 8005318:	69fb      	ldr	r3, [r7, #28]
 800531a:	005b      	lsls	r3, r3, #1
 800531c:	fa02 f303 	lsl.w	r3, r2, r3
 8005320:	69ba      	ldr	r2, [r7, #24]
 8005322:	4313      	orrs	r3, r2
 8005324:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	69ba      	ldr	r2, [r7, #24]
 800532a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800532c:	683b      	ldr	r3, [r7, #0]
 800532e:	685b      	ldr	r3, [r3, #4]
 8005330:	f003 0303 	and.w	r3, r3, #3
 8005334:	2b02      	cmp	r3, #2
 8005336:	d123      	bne.n	8005380 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005338:	69fb      	ldr	r3, [r7, #28]
 800533a:	08da      	lsrs	r2, r3, #3
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	3208      	adds	r2, #8
 8005340:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005344:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005346:	69fb      	ldr	r3, [r7, #28]
 8005348:	f003 0307 	and.w	r3, r3, #7
 800534c:	009b      	lsls	r3, r3, #2
 800534e:	220f      	movs	r2, #15
 8005350:	fa02 f303 	lsl.w	r3, r2, r3
 8005354:	43db      	mvns	r3, r3
 8005356:	69ba      	ldr	r2, [r7, #24]
 8005358:	4013      	ands	r3, r2
 800535a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	691a      	ldr	r2, [r3, #16]
 8005360:	69fb      	ldr	r3, [r7, #28]
 8005362:	f003 0307 	and.w	r3, r3, #7
 8005366:	009b      	lsls	r3, r3, #2
 8005368:	fa02 f303 	lsl.w	r3, r2, r3
 800536c:	69ba      	ldr	r2, [r7, #24]
 800536e:	4313      	orrs	r3, r2
 8005370:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005372:	69fb      	ldr	r3, [r7, #28]
 8005374:	08da      	lsrs	r2, r3, #3
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	3208      	adds	r2, #8
 800537a:	69b9      	ldr	r1, [r7, #24]
 800537c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005386:	69fb      	ldr	r3, [r7, #28]
 8005388:	005b      	lsls	r3, r3, #1
 800538a:	2203      	movs	r2, #3
 800538c:	fa02 f303 	lsl.w	r3, r2, r3
 8005390:	43db      	mvns	r3, r3
 8005392:	69ba      	ldr	r2, [r7, #24]
 8005394:	4013      	ands	r3, r2
 8005396:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	685b      	ldr	r3, [r3, #4]
 800539c:	f003 0203 	and.w	r2, r3, #3
 80053a0:	69fb      	ldr	r3, [r7, #28]
 80053a2:	005b      	lsls	r3, r3, #1
 80053a4:	fa02 f303 	lsl.w	r3, r2, r3
 80053a8:	69ba      	ldr	r2, [r7, #24]
 80053aa:	4313      	orrs	r3, r2
 80053ac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	69ba      	ldr	r2, [r7, #24]
 80053b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	685b      	ldr	r3, [r3, #4]
 80053b8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80053bc:	2b00      	cmp	r3, #0
 80053be:	f000 80b4 	beq.w	800552a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80053c2:	2300      	movs	r3, #0
 80053c4:	60fb      	str	r3, [r7, #12]
 80053c6:	4b60      	ldr	r3, [pc, #384]	@ (8005548 <HAL_GPIO_Init+0x30c>)
 80053c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053ca:	4a5f      	ldr	r2, [pc, #380]	@ (8005548 <HAL_GPIO_Init+0x30c>)
 80053cc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80053d0:	6453      	str	r3, [r2, #68]	@ 0x44
 80053d2:	4b5d      	ldr	r3, [pc, #372]	@ (8005548 <HAL_GPIO_Init+0x30c>)
 80053d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053d6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80053da:	60fb      	str	r3, [r7, #12]
 80053dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80053de:	4a5b      	ldr	r2, [pc, #364]	@ (800554c <HAL_GPIO_Init+0x310>)
 80053e0:	69fb      	ldr	r3, [r7, #28]
 80053e2:	089b      	lsrs	r3, r3, #2
 80053e4:	3302      	adds	r3, #2
 80053e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80053ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80053ec:	69fb      	ldr	r3, [r7, #28]
 80053ee:	f003 0303 	and.w	r3, r3, #3
 80053f2:	009b      	lsls	r3, r3, #2
 80053f4:	220f      	movs	r2, #15
 80053f6:	fa02 f303 	lsl.w	r3, r2, r3
 80053fa:	43db      	mvns	r3, r3
 80053fc:	69ba      	ldr	r2, [r7, #24]
 80053fe:	4013      	ands	r3, r2
 8005400:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	4a52      	ldr	r2, [pc, #328]	@ (8005550 <HAL_GPIO_Init+0x314>)
 8005406:	4293      	cmp	r3, r2
 8005408:	d02b      	beq.n	8005462 <HAL_GPIO_Init+0x226>
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	4a51      	ldr	r2, [pc, #324]	@ (8005554 <HAL_GPIO_Init+0x318>)
 800540e:	4293      	cmp	r3, r2
 8005410:	d025      	beq.n	800545e <HAL_GPIO_Init+0x222>
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	4a50      	ldr	r2, [pc, #320]	@ (8005558 <HAL_GPIO_Init+0x31c>)
 8005416:	4293      	cmp	r3, r2
 8005418:	d01f      	beq.n	800545a <HAL_GPIO_Init+0x21e>
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	4a4f      	ldr	r2, [pc, #316]	@ (800555c <HAL_GPIO_Init+0x320>)
 800541e:	4293      	cmp	r3, r2
 8005420:	d019      	beq.n	8005456 <HAL_GPIO_Init+0x21a>
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	4a4e      	ldr	r2, [pc, #312]	@ (8005560 <HAL_GPIO_Init+0x324>)
 8005426:	4293      	cmp	r3, r2
 8005428:	d013      	beq.n	8005452 <HAL_GPIO_Init+0x216>
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	4a4d      	ldr	r2, [pc, #308]	@ (8005564 <HAL_GPIO_Init+0x328>)
 800542e:	4293      	cmp	r3, r2
 8005430:	d00d      	beq.n	800544e <HAL_GPIO_Init+0x212>
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	4a4c      	ldr	r2, [pc, #304]	@ (8005568 <HAL_GPIO_Init+0x32c>)
 8005436:	4293      	cmp	r3, r2
 8005438:	d007      	beq.n	800544a <HAL_GPIO_Init+0x20e>
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	4a4b      	ldr	r2, [pc, #300]	@ (800556c <HAL_GPIO_Init+0x330>)
 800543e:	4293      	cmp	r3, r2
 8005440:	d101      	bne.n	8005446 <HAL_GPIO_Init+0x20a>
 8005442:	2307      	movs	r3, #7
 8005444:	e00e      	b.n	8005464 <HAL_GPIO_Init+0x228>
 8005446:	2308      	movs	r3, #8
 8005448:	e00c      	b.n	8005464 <HAL_GPIO_Init+0x228>
 800544a:	2306      	movs	r3, #6
 800544c:	e00a      	b.n	8005464 <HAL_GPIO_Init+0x228>
 800544e:	2305      	movs	r3, #5
 8005450:	e008      	b.n	8005464 <HAL_GPIO_Init+0x228>
 8005452:	2304      	movs	r3, #4
 8005454:	e006      	b.n	8005464 <HAL_GPIO_Init+0x228>
 8005456:	2303      	movs	r3, #3
 8005458:	e004      	b.n	8005464 <HAL_GPIO_Init+0x228>
 800545a:	2302      	movs	r3, #2
 800545c:	e002      	b.n	8005464 <HAL_GPIO_Init+0x228>
 800545e:	2301      	movs	r3, #1
 8005460:	e000      	b.n	8005464 <HAL_GPIO_Init+0x228>
 8005462:	2300      	movs	r3, #0
 8005464:	69fa      	ldr	r2, [r7, #28]
 8005466:	f002 0203 	and.w	r2, r2, #3
 800546a:	0092      	lsls	r2, r2, #2
 800546c:	4093      	lsls	r3, r2
 800546e:	69ba      	ldr	r2, [r7, #24]
 8005470:	4313      	orrs	r3, r2
 8005472:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005474:	4935      	ldr	r1, [pc, #212]	@ (800554c <HAL_GPIO_Init+0x310>)
 8005476:	69fb      	ldr	r3, [r7, #28]
 8005478:	089b      	lsrs	r3, r3, #2
 800547a:	3302      	adds	r3, #2
 800547c:	69ba      	ldr	r2, [r7, #24]
 800547e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005482:	4b3b      	ldr	r3, [pc, #236]	@ (8005570 <HAL_GPIO_Init+0x334>)
 8005484:	689b      	ldr	r3, [r3, #8]
 8005486:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005488:	693b      	ldr	r3, [r7, #16]
 800548a:	43db      	mvns	r3, r3
 800548c:	69ba      	ldr	r2, [r7, #24]
 800548e:	4013      	ands	r3, r2
 8005490:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	685b      	ldr	r3, [r3, #4]
 8005496:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800549a:	2b00      	cmp	r3, #0
 800549c:	d003      	beq.n	80054a6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800549e:	69ba      	ldr	r2, [r7, #24]
 80054a0:	693b      	ldr	r3, [r7, #16]
 80054a2:	4313      	orrs	r3, r2
 80054a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80054a6:	4a32      	ldr	r2, [pc, #200]	@ (8005570 <HAL_GPIO_Init+0x334>)
 80054a8:	69bb      	ldr	r3, [r7, #24]
 80054aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80054ac:	4b30      	ldr	r3, [pc, #192]	@ (8005570 <HAL_GPIO_Init+0x334>)
 80054ae:	68db      	ldr	r3, [r3, #12]
 80054b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80054b2:	693b      	ldr	r3, [r7, #16]
 80054b4:	43db      	mvns	r3, r3
 80054b6:	69ba      	ldr	r2, [r7, #24]
 80054b8:	4013      	ands	r3, r2
 80054ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	685b      	ldr	r3, [r3, #4]
 80054c0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d003      	beq.n	80054d0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80054c8:	69ba      	ldr	r2, [r7, #24]
 80054ca:	693b      	ldr	r3, [r7, #16]
 80054cc:	4313      	orrs	r3, r2
 80054ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80054d0:	4a27      	ldr	r2, [pc, #156]	@ (8005570 <HAL_GPIO_Init+0x334>)
 80054d2:	69bb      	ldr	r3, [r7, #24]
 80054d4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80054d6:	4b26      	ldr	r3, [pc, #152]	@ (8005570 <HAL_GPIO_Init+0x334>)
 80054d8:	685b      	ldr	r3, [r3, #4]
 80054da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80054dc:	693b      	ldr	r3, [r7, #16]
 80054de:	43db      	mvns	r3, r3
 80054e0:	69ba      	ldr	r2, [r7, #24]
 80054e2:	4013      	ands	r3, r2
 80054e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	685b      	ldr	r3, [r3, #4]
 80054ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d003      	beq.n	80054fa <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80054f2:	69ba      	ldr	r2, [r7, #24]
 80054f4:	693b      	ldr	r3, [r7, #16]
 80054f6:	4313      	orrs	r3, r2
 80054f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80054fa:	4a1d      	ldr	r2, [pc, #116]	@ (8005570 <HAL_GPIO_Init+0x334>)
 80054fc:	69bb      	ldr	r3, [r7, #24]
 80054fe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005500:	4b1b      	ldr	r3, [pc, #108]	@ (8005570 <HAL_GPIO_Init+0x334>)
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005506:	693b      	ldr	r3, [r7, #16]
 8005508:	43db      	mvns	r3, r3
 800550a:	69ba      	ldr	r2, [r7, #24]
 800550c:	4013      	ands	r3, r2
 800550e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	685b      	ldr	r3, [r3, #4]
 8005514:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005518:	2b00      	cmp	r3, #0
 800551a:	d003      	beq.n	8005524 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800551c:	69ba      	ldr	r2, [r7, #24]
 800551e:	693b      	ldr	r3, [r7, #16]
 8005520:	4313      	orrs	r3, r2
 8005522:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005524:	4a12      	ldr	r2, [pc, #72]	@ (8005570 <HAL_GPIO_Init+0x334>)
 8005526:	69bb      	ldr	r3, [r7, #24]
 8005528:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800552a:	69fb      	ldr	r3, [r7, #28]
 800552c:	3301      	adds	r3, #1
 800552e:	61fb      	str	r3, [r7, #28]
 8005530:	69fb      	ldr	r3, [r7, #28]
 8005532:	2b0f      	cmp	r3, #15
 8005534:	f67f ae90 	bls.w	8005258 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005538:	bf00      	nop
 800553a:	bf00      	nop
 800553c:	3724      	adds	r7, #36	@ 0x24
 800553e:	46bd      	mov	sp, r7
 8005540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005544:	4770      	bx	lr
 8005546:	bf00      	nop
 8005548:	40023800 	.word	0x40023800
 800554c:	40013800 	.word	0x40013800
 8005550:	40020000 	.word	0x40020000
 8005554:	40020400 	.word	0x40020400
 8005558:	40020800 	.word	0x40020800
 800555c:	40020c00 	.word	0x40020c00
 8005560:	40021000 	.word	0x40021000
 8005564:	40021400 	.word	0x40021400
 8005568:	40021800 	.word	0x40021800
 800556c:	40021c00 	.word	0x40021c00
 8005570:	40013c00 	.word	0x40013c00

08005574 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005574:	b480      	push	{r7}
 8005576:	b085      	sub	sp, #20
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
 800557c:	460b      	mov	r3, r1
 800557e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	691a      	ldr	r2, [r3, #16]
 8005584:	887b      	ldrh	r3, [r7, #2]
 8005586:	4013      	ands	r3, r2
 8005588:	2b00      	cmp	r3, #0
 800558a:	d002      	beq.n	8005592 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800558c:	2301      	movs	r3, #1
 800558e:	73fb      	strb	r3, [r7, #15]
 8005590:	e001      	b.n	8005596 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005592:	2300      	movs	r3, #0
 8005594:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005596:	7bfb      	ldrb	r3, [r7, #15]
}
 8005598:	4618      	mov	r0, r3
 800559a:	3714      	adds	r7, #20
 800559c:	46bd      	mov	sp, r7
 800559e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a2:	4770      	bx	lr

080055a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80055a4:	b480      	push	{r7}
 80055a6:	b083      	sub	sp, #12
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
 80055ac:	460b      	mov	r3, r1
 80055ae:	807b      	strh	r3, [r7, #2]
 80055b0:	4613      	mov	r3, r2
 80055b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80055b4:	787b      	ldrb	r3, [r7, #1]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d003      	beq.n	80055c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80055ba:	887a      	ldrh	r2, [r7, #2]
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80055c0:	e003      	b.n	80055ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80055c2:	887b      	ldrh	r3, [r7, #2]
 80055c4:	041a      	lsls	r2, r3, #16
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	619a      	str	r2, [r3, #24]
}
 80055ca:	bf00      	nop
 80055cc:	370c      	adds	r7, #12
 80055ce:	46bd      	mov	sp, r7
 80055d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d4:	4770      	bx	lr

080055d6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80055d6:	b480      	push	{r7}
 80055d8:	b085      	sub	sp, #20
 80055da:	af00      	add	r7, sp, #0
 80055dc:	6078      	str	r0, [r7, #4]
 80055de:	460b      	mov	r3, r1
 80055e0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	695b      	ldr	r3, [r3, #20]
 80055e6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80055e8:	887a      	ldrh	r2, [r7, #2]
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	4013      	ands	r3, r2
 80055ee:	041a      	lsls	r2, r3, #16
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	43d9      	mvns	r1, r3
 80055f4:	887b      	ldrh	r3, [r7, #2]
 80055f6:	400b      	ands	r3, r1
 80055f8:	431a      	orrs	r2, r3
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	619a      	str	r2, [r3, #24]
}
 80055fe:	bf00      	nop
 8005600:	3714      	adds	r7, #20
 8005602:	46bd      	mov	sp, r7
 8005604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005608:	4770      	bx	lr
	...

0800560c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800560c:	b580      	push	{r7, lr}
 800560e:	b082      	sub	sp, #8
 8005610:	af00      	add	r7, sp, #0
 8005612:	4603      	mov	r3, r0
 8005614:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8005616:	4b08      	ldr	r3, [pc, #32]	@ (8005638 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005618:	695a      	ldr	r2, [r3, #20]
 800561a:	88fb      	ldrh	r3, [r7, #6]
 800561c:	4013      	ands	r3, r2
 800561e:	2b00      	cmp	r3, #0
 8005620:	d006      	beq.n	8005630 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005622:	4a05      	ldr	r2, [pc, #20]	@ (8005638 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005624:	88fb      	ldrh	r3, [r7, #6]
 8005626:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005628:	88fb      	ldrh	r3, [r7, #6]
 800562a:	4618      	mov	r0, r3
 800562c:	f7fe f84a 	bl	80036c4 <HAL_GPIO_EXTI_Callback>
  }
}
 8005630:	bf00      	nop
 8005632:	3708      	adds	r7, #8
 8005634:	46bd      	mov	sp, r7
 8005636:	bd80      	pop	{r7, pc}
 8005638:	40013c00 	.word	0x40013c00

0800563c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800563c:	b580      	push	{r7, lr}
 800563e:	b086      	sub	sp, #24
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d101      	bne.n	800564e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800564a:	2301      	movs	r3, #1
 800564c:	e267      	b.n	8005b1e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f003 0301 	and.w	r3, r3, #1
 8005656:	2b00      	cmp	r3, #0
 8005658:	d075      	beq.n	8005746 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800565a:	4b88      	ldr	r3, [pc, #544]	@ (800587c <HAL_RCC_OscConfig+0x240>)
 800565c:	689b      	ldr	r3, [r3, #8]
 800565e:	f003 030c 	and.w	r3, r3, #12
 8005662:	2b04      	cmp	r3, #4
 8005664:	d00c      	beq.n	8005680 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005666:	4b85      	ldr	r3, [pc, #532]	@ (800587c <HAL_RCC_OscConfig+0x240>)
 8005668:	689b      	ldr	r3, [r3, #8]
 800566a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800566e:	2b08      	cmp	r3, #8
 8005670:	d112      	bne.n	8005698 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005672:	4b82      	ldr	r3, [pc, #520]	@ (800587c <HAL_RCC_OscConfig+0x240>)
 8005674:	685b      	ldr	r3, [r3, #4]
 8005676:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800567a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800567e:	d10b      	bne.n	8005698 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005680:	4b7e      	ldr	r3, [pc, #504]	@ (800587c <HAL_RCC_OscConfig+0x240>)
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005688:	2b00      	cmp	r3, #0
 800568a:	d05b      	beq.n	8005744 <HAL_RCC_OscConfig+0x108>
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	685b      	ldr	r3, [r3, #4]
 8005690:	2b00      	cmp	r3, #0
 8005692:	d157      	bne.n	8005744 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005694:	2301      	movs	r3, #1
 8005696:	e242      	b.n	8005b1e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	685b      	ldr	r3, [r3, #4]
 800569c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80056a0:	d106      	bne.n	80056b0 <HAL_RCC_OscConfig+0x74>
 80056a2:	4b76      	ldr	r3, [pc, #472]	@ (800587c <HAL_RCC_OscConfig+0x240>)
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	4a75      	ldr	r2, [pc, #468]	@ (800587c <HAL_RCC_OscConfig+0x240>)
 80056a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80056ac:	6013      	str	r3, [r2, #0]
 80056ae:	e01d      	b.n	80056ec <HAL_RCC_OscConfig+0xb0>
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	685b      	ldr	r3, [r3, #4]
 80056b4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80056b8:	d10c      	bne.n	80056d4 <HAL_RCC_OscConfig+0x98>
 80056ba:	4b70      	ldr	r3, [pc, #448]	@ (800587c <HAL_RCC_OscConfig+0x240>)
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	4a6f      	ldr	r2, [pc, #444]	@ (800587c <HAL_RCC_OscConfig+0x240>)
 80056c0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80056c4:	6013      	str	r3, [r2, #0]
 80056c6:	4b6d      	ldr	r3, [pc, #436]	@ (800587c <HAL_RCC_OscConfig+0x240>)
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	4a6c      	ldr	r2, [pc, #432]	@ (800587c <HAL_RCC_OscConfig+0x240>)
 80056cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80056d0:	6013      	str	r3, [r2, #0]
 80056d2:	e00b      	b.n	80056ec <HAL_RCC_OscConfig+0xb0>
 80056d4:	4b69      	ldr	r3, [pc, #420]	@ (800587c <HAL_RCC_OscConfig+0x240>)
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	4a68      	ldr	r2, [pc, #416]	@ (800587c <HAL_RCC_OscConfig+0x240>)
 80056da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80056de:	6013      	str	r3, [r2, #0]
 80056e0:	4b66      	ldr	r3, [pc, #408]	@ (800587c <HAL_RCC_OscConfig+0x240>)
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	4a65      	ldr	r2, [pc, #404]	@ (800587c <HAL_RCC_OscConfig+0x240>)
 80056e6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80056ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	685b      	ldr	r3, [r3, #4]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d013      	beq.n	800571c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056f4:	f7ff fbce 	bl	8004e94 <HAL_GetTick>
 80056f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80056fa:	e008      	b.n	800570e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80056fc:	f7ff fbca 	bl	8004e94 <HAL_GetTick>
 8005700:	4602      	mov	r2, r0
 8005702:	693b      	ldr	r3, [r7, #16]
 8005704:	1ad3      	subs	r3, r2, r3
 8005706:	2b64      	cmp	r3, #100	@ 0x64
 8005708:	d901      	bls.n	800570e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800570a:	2303      	movs	r3, #3
 800570c:	e207      	b.n	8005b1e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800570e:	4b5b      	ldr	r3, [pc, #364]	@ (800587c <HAL_RCC_OscConfig+0x240>)
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005716:	2b00      	cmp	r3, #0
 8005718:	d0f0      	beq.n	80056fc <HAL_RCC_OscConfig+0xc0>
 800571a:	e014      	b.n	8005746 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800571c:	f7ff fbba 	bl	8004e94 <HAL_GetTick>
 8005720:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005722:	e008      	b.n	8005736 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005724:	f7ff fbb6 	bl	8004e94 <HAL_GetTick>
 8005728:	4602      	mov	r2, r0
 800572a:	693b      	ldr	r3, [r7, #16]
 800572c:	1ad3      	subs	r3, r2, r3
 800572e:	2b64      	cmp	r3, #100	@ 0x64
 8005730:	d901      	bls.n	8005736 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005732:	2303      	movs	r3, #3
 8005734:	e1f3      	b.n	8005b1e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005736:	4b51      	ldr	r3, [pc, #324]	@ (800587c <HAL_RCC_OscConfig+0x240>)
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800573e:	2b00      	cmp	r3, #0
 8005740:	d1f0      	bne.n	8005724 <HAL_RCC_OscConfig+0xe8>
 8005742:	e000      	b.n	8005746 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005744:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f003 0302 	and.w	r3, r3, #2
 800574e:	2b00      	cmp	r3, #0
 8005750:	d063      	beq.n	800581a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005752:	4b4a      	ldr	r3, [pc, #296]	@ (800587c <HAL_RCC_OscConfig+0x240>)
 8005754:	689b      	ldr	r3, [r3, #8]
 8005756:	f003 030c 	and.w	r3, r3, #12
 800575a:	2b00      	cmp	r3, #0
 800575c:	d00b      	beq.n	8005776 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800575e:	4b47      	ldr	r3, [pc, #284]	@ (800587c <HAL_RCC_OscConfig+0x240>)
 8005760:	689b      	ldr	r3, [r3, #8]
 8005762:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005766:	2b08      	cmp	r3, #8
 8005768:	d11c      	bne.n	80057a4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800576a:	4b44      	ldr	r3, [pc, #272]	@ (800587c <HAL_RCC_OscConfig+0x240>)
 800576c:	685b      	ldr	r3, [r3, #4]
 800576e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005772:	2b00      	cmp	r3, #0
 8005774:	d116      	bne.n	80057a4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005776:	4b41      	ldr	r3, [pc, #260]	@ (800587c <HAL_RCC_OscConfig+0x240>)
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f003 0302 	and.w	r3, r3, #2
 800577e:	2b00      	cmp	r3, #0
 8005780:	d005      	beq.n	800578e <HAL_RCC_OscConfig+0x152>
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	68db      	ldr	r3, [r3, #12]
 8005786:	2b01      	cmp	r3, #1
 8005788:	d001      	beq.n	800578e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800578a:	2301      	movs	r3, #1
 800578c:	e1c7      	b.n	8005b1e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800578e:	4b3b      	ldr	r3, [pc, #236]	@ (800587c <HAL_RCC_OscConfig+0x240>)
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	691b      	ldr	r3, [r3, #16]
 800579a:	00db      	lsls	r3, r3, #3
 800579c:	4937      	ldr	r1, [pc, #220]	@ (800587c <HAL_RCC_OscConfig+0x240>)
 800579e:	4313      	orrs	r3, r2
 80057a0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80057a2:	e03a      	b.n	800581a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	68db      	ldr	r3, [r3, #12]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d020      	beq.n	80057ee <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80057ac:	4b34      	ldr	r3, [pc, #208]	@ (8005880 <HAL_RCC_OscConfig+0x244>)
 80057ae:	2201      	movs	r2, #1
 80057b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057b2:	f7ff fb6f 	bl	8004e94 <HAL_GetTick>
 80057b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80057b8:	e008      	b.n	80057cc <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80057ba:	f7ff fb6b 	bl	8004e94 <HAL_GetTick>
 80057be:	4602      	mov	r2, r0
 80057c0:	693b      	ldr	r3, [r7, #16]
 80057c2:	1ad3      	subs	r3, r2, r3
 80057c4:	2b02      	cmp	r3, #2
 80057c6:	d901      	bls.n	80057cc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80057c8:	2303      	movs	r3, #3
 80057ca:	e1a8      	b.n	8005b1e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80057cc:	4b2b      	ldr	r3, [pc, #172]	@ (800587c <HAL_RCC_OscConfig+0x240>)
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f003 0302 	and.w	r3, r3, #2
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d0f0      	beq.n	80057ba <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80057d8:	4b28      	ldr	r3, [pc, #160]	@ (800587c <HAL_RCC_OscConfig+0x240>)
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	691b      	ldr	r3, [r3, #16]
 80057e4:	00db      	lsls	r3, r3, #3
 80057e6:	4925      	ldr	r1, [pc, #148]	@ (800587c <HAL_RCC_OscConfig+0x240>)
 80057e8:	4313      	orrs	r3, r2
 80057ea:	600b      	str	r3, [r1, #0]
 80057ec:	e015      	b.n	800581a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80057ee:	4b24      	ldr	r3, [pc, #144]	@ (8005880 <HAL_RCC_OscConfig+0x244>)
 80057f0:	2200      	movs	r2, #0
 80057f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057f4:	f7ff fb4e 	bl	8004e94 <HAL_GetTick>
 80057f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80057fa:	e008      	b.n	800580e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80057fc:	f7ff fb4a 	bl	8004e94 <HAL_GetTick>
 8005800:	4602      	mov	r2, r0
 8005802:	693b      	ldr	r3, [r7, #16]
 8005804:	1ad3      	subs	r3, r2, r3
 8005806:	2b02      	cmp	r3, #2
 8005808:	d901      	bls.n	800580e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800580a:	2303      	movs	r3, #3
 800580c:	e187      	b.n	8005b1e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800580e:	4b1b      	ldr	r3, [pc, #108]	@ (800587c <HAL_RCC_OscConfig+0x240>)
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f003 0302 	and.w	r3, r3, #2
 8005816:	2b00      	cmp	r3, #0
 8005818:	d1f0      	bne.n	80057fc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f003 0308 	and.w	r3, r3, #8
 8005822:	2b00      	cmp	r3, #0
 8005824:	d036      	beq.n	8005894 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	695b      	ldr	r3, [r3, #20]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d016      	beq.n	800585c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800582e:	4b15      	ldr	r3, [pc, #84]	@ (8005884 <HAL_RCC_OscConfig+0x248>)
 8005830:	2201      	movs	r2, #1
 8005832:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005834:	f7ff fb2e 	bl	8004e94 <HAL_GetTick>
 8005838:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800583a:	e008      	b.n	800584e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800583c:	f7ff fb2a 	bl	8004e94 <HAL_GetTick>
 8005840:	4602      	mov	r2, r0
 8005842:	693b      	ldr	r3, [r7, #16]
 8005844:	1ad3      	subs	r3, r2, r3
 8005846:	2b02      	cmp	r3, #2
 8005848:	d901      	bls.n	800584e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800584a:	2303      	movs	r3, #3
 800584c:	e167      	b.n	8005b1e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800584e:	4b0b      	ldr	r3, [pc, #44]	@ (800587c <HAL_RCC_OscConfig+0x240>)
 8005850:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005852:	f003 0302 	and.w	r3, r3, #2
 8005856:	2b00      	cmp	r3, #0
 8005858:	d0f0      	beq.n	800583c <HAL_RCC_OscConfig+0x200>
 800585a:	e01b      	b.n	8005894 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800585c:	4b09      	ldr	r3, [pc, #36]	@ (8005884 <HAL_RCC_OscConfig+0x248>)
 800585e:	2200      	movs	r2, #0
 8005860:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005862:	f7ff fb17 	bl	8004e94 <HAL_GetTick>
 8005866:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005868:	e00e      	b.n	8005888 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800586a:	f7ff fb13 	bl	8004e94 <HAL_GetTick>
 800586e:	4602      	mov	r2, r0
 8005870:	693b      	ldr	r3, [r7, #16]
 8005872:	1ad3      	subs	r3, r2, r3
 8005874:	2b02      	cmp	r3, #2
 8005876:	d907      	bls.n	8005888 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005878:	2303      	movs	r3, #3
 800587a:	e150      	b.n	8005b1e <HAL_RCC_OscConfig+0x4e2>
 800587c:	40023800 	.word	0x40023800
 8005880:	42470000 	.word	0x42470000
 8005884:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005888:	4b88      	ldr	r3, [pc, #544]	@ (8005aac <HAL_RCC_OscConfig+0x470>)
 800588a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800588c:	f003 0302 	and.w	r3, r3, #2
 8005890:	2b00      	cmp	r3, #0
 8005892:	d1ea      	bne.n	800586a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f003 0304 	and.w	r3, r3, #4
 800589c:	2b00      	cmp	r3, #0
 800589e:	f000 8097 	beq.w	80059d0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80058a2:	2300      	movs	r3, #0
 80058a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80058a6:	4b81      	ldr	r3, [pc, #516]	@ (8005aac <HAL_RCC_OscConfig+0x470>)
 80058a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d10f      	bne.n	80058d2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80058b2:	2300      	movs	r3, #0
 80058b4:	60bb      	str	r3, [r7, #8]
 80058b6:	4b7d      	ldr	r3, [pc, #500]	@ (8005aac <HAL_RCC_OscConfig+0x470>)
 80058b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058ba:	4a7c      	ldr	r2, [pc, #496]	@ (8005aac <HAL_RCC_OscConfig+0x470>)
 80058bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80058c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80058c2:	4b7a      	ldr	r3, [pc, #488]	@ (8005aac <HAL_RCC_OscConfig+0x470>)
 80058c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80058ca:	60bb      	str	r3, [r7, #8]
 80058cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80058ce:	2301      	movs	r3, #1
 80058d0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058d2:	4b77      	ldr	r3, [pc, #476]	@ (8005ab0 <HAL_RCC_OscConfig+0x474>)
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d118      	bne.n	8005910 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80058de:	4b74      	ldr	r3, [pc, #464]	@ (8005ab0 <HAL_RCC_OscConfig+0x474>)
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	4a73      	ldr	r2, [pc, #460]	@ (8005ab0 <HAL_RCC_OscConfig+0x474>)
 80058e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80058e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80058ea:	f7ff fad3 	bl	8004e94 <HAL_GetTick>
 80058ee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058f0:	e008      	b.n	8005904 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80058f2:	f7ff facf 	bl	8004e94 <HAL_GetTick>
 80058f6:	4602      	mov	r2, r0
 80058f8:	693b      	ldr	r3, [r7, #16]
 80058fa:	1ad3      	subs	r3, r2, r3
 80058fc:	2b02      	cmp	r3, #2
 80058fe:	d901      	bls.n	8005904 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005900:	2303      	movs	r3, #3
 8005902:	e10c      	b.n	8005b1e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005904:	4b6a      	ldr	r3, [pc, #424]	@ (8005ab0 <HAL_RCC_OscConfig+0x474>)
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800590c:	2b00      	cmp	r3, #0
 800590e:	d0f0      	beq.n	80058f2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	689b      	ldr	r3, [r3, #8]
 8005914:	2b01      	cmp	r3, #1
 8005916:	d106      	bne.n	8005926 <HAL_RCC_OscConfig+0x2ea>
 8005918:	4b64      	ldr	r3, [pc, #400]	@ (8005aac <HAL_RCC_OscConfig+0x470>)
 800591a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800591c:	4a63      	ldr	r2, [pc, #396]	@ (8005aac <HAL_RCC_OscConfig+0x470>)
 800591e:	f043 0301 	orr.w	r3, r3, #1
 8005922:	6713      	str	r3, [r2, #112]	@ 0x70
 8005924:	e01c      	b.n	8005960 <HAL_RCC_OscConfig+0x324>
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	689b      	ldr	r3, [r3, #8]
 800592a:	2b05      	cmp	r3, #5
 800592c:	d10c      	bne.n	8005948 <HAL_RCC_OscConfig+0x30c>
 800592e:	4b5f      	ldr	r3, [pc, #380]	@ (8005aac <HAL_RCC_OscConfig+0x470>)
 8005930:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005932:	4a5e      	ldr	r2, [pc, #376]	@ (8005aac <HAL_RCC_OscConfig+0x470>)
 8005934:	f043 0304 	orr.w	r3, r3, #4
 8005938:	6713      	str	r3, [r2, #112]	@ 0x70
 800593a:	4b5c      	ldr	r3, [pc, #368]	@ (8005aac <HAL_RCC_OscConfig+0x470>)
 800593c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800593e:	4a5b      	ldr	r2, [pc, #364]	@ (8005aac <HAL_RCC_OscConfig+0x470>)
 8005940:	f043 0301 	orr.w	r3, r3, #1
 8005944:	6713      	str	r3, [r2, #112]	@ 0x70
 8005946:	e00b      	b.n	8005960 <HAL_RCC_OscConfig+0x324>
 8005948:	4b58      	ldr	r3, [pc, #352]	@ (8005aac <HAL_RCC_OscConfig+0x470>)
 800594a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800594c:	4a57      	ldr	r2, [pc, #348]	@ (8005aac <HAL_RCC_OscConfig+0x470>)
 800594e:	f023 0301 	bic.w	r3, r3, #1
 8005952:	6713      	str	r3, [r2, #112]	@ 0x70
 8005954:	4b55      	ldr	r3, [pc, #340]	@ (8005aac <HAL_RCC_OscConfig+0x470>)
 8005956:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005958:	4a54      	ldr	r2, [pc, #336]	@ (8005aac <HAL_RCC_OscConfig+0x470>)
 800595a:	f023 0304 	bic.w	r3, r3, #4
 800595e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	689b      	ldr	r3, [r3, #8]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d015      	beq.n	8005994 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005968:	f7ff fa94 	bl	8004e94 <HAL_GetTick>
 800596c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800596e:	e00a      	b.n	8005986 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005970:	f7ff fa90 	bl	8004e94 <HAL_GetTick>
 8005974:	4602      	mov	r2, r0
 8005976:	693b      	ldr	r3, [r7, #16]
 8005978:	1ad3      	subs	r3, r2, r3
 800597a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800597e:	4293      	cmp	r3, r2
 8005980:	d901      	bls.n	8005986 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005982:	2303      	movs	r3, #3
 8005984:	e0cb      	b.n	8005b1e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005986:	4b49      	ldr	r3, [pc, #292]	@ (8005aac <HAL_RCC_OscConfig+0x470>)
 8005988:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800598a:	f003 0302 	and.w	r3, r3, #2
 800598e:	2b00      	cmp	r3, #0
 8005990:	d0ee      	beq.n	8005970 <HAL_RCC_OscConfig+0x334>
 8005992:	e014      	b.n	80059be <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005994:	f7ff fa7e 	bl	8004e94 <HAL_GetTick>
 8005998:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800599a:	e00a      	b.n	80059b2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800599c:	f7ff fa7a 	bl	8004e94 <HAL_GetTick>
 80059a0:	4602      	mov	r2, r0
 80059a2:	693b      	ldr	r3, [r7, #16]
 80059a4:	1ad3      	subs	r3, r2, r3
 80059a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d901      	bls.n	80059b2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80059ae:	2303      	movs	r3, #3
 80059b0:	e0b5      	b.n	8005b1e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80059b2:	4b3e      	ldr	r3, [pc, #248]	@ (8005aac <HAL_RCC_OscConfig+0x470>)
 80059b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80059b6:	f003 0302 	and.w	r3, r3, #2
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d1ee      	bne.n	800599c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80059be:	7dfb      	ldrb	r3, [r7, #23]
 80059c0:	2b01      	cmp	r3, #1
 80059c2:	d105      	bne.n	80059d0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80059c4:	4b39      	ldr	r3, [pc, #228]	@ (8005aac <HAL_RCC_OscConfig+0x470>)
 80059c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059c8:	4a38      	ldr	r2, [pc, #224]	@ (8005aac <HAL_RCC_OscConfig+0x470>)
 80059ca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80059ce:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	699b      	ldr	r3, [r3, #24]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	f000 80a1 	beq.w	8005b1c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80059da:	4b34      	ldr	r3, [pc, #208]	@ (8005aac <HAL_RCC_OscConfig+0x470>)
 80059dc:	689b      	ldr	r3, [r3, #8]
 80059de:	f003 030c 	and.w	r3, r3, #12
 80059e2:	2b08      	cmp	r3, #8
 80059e4:	d05c      	beq.n	8005aa0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	699b      	ldr	r3, [r3, #24]
 80059ea:	2b02      	cmp	r3, #2
 80059ec:	d141      	bne.n	8005a72 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80059ee:	4b31      	ldr	r3, [pc, #196]	@ (8005ab4 <HAL_RCC_OscConfig+0x478>)
 80059f0:	2200      	movs	r2, #0
 80059f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059f4:	f7ff fa4e 	bl	8004e94 <HAL_GetTick>
 80059f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80059fa:	e008      	b.n	8005a0e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80059fc:	f7ff fa4a 	bl	8004e94 <HAL_GetTick>
 8005a00:	4602      	mov	r2, r0
 8005a02:	693b      	ldr	r3, [r7, #16]
 8005a04:	1ad3      	subs	r3, r2, r3
 8005a06:	2b02      	cmp	r3, #2
 8005a08:	d901      	bls.n	8005a0e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005a0a:	2303      	movs	r3, #3
 8005a0c:	e087      	b.n	8005b1e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a0e:	4b27      	ldr	r3, [pc, #156]	@ (8005aac <HAL_RCC_OscConfig+0x470>)
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d1f0      	bne.n	80059fc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	69da      	ldr	r2, [r3, #28]
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6a1b      	ldr	r3, [r3, #32]
 8005a22:	431a      	orrs	r2, r3
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a28:	019b      	lsls	r3, r3, #6
 8005a2a:	431a      	orrs	r2, r3
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a30:	085b      	lsrs	r3, r3, #1
 8005a32:	3b01      	subs	r3, #1
 8005a34:	041b      	lsls	r3, r3, #16
 8005a36:	431a      	orrs	r2, r3
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a3c:	061b      	lsls	r3, r3, #24
 8005a3e:	491b      	ldr	r1, [pc, #108]	@ (8005aac <HAL_RCC_OscConfig+0x470>)
 8005a40:	4313      	orrs	r3, r2
 8005a42:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005a44:	4b1b      	ldr	r3, [pc, #108]	@ (8005ab4 <HAL_RCC_OscConfig+0x478>)
 8005a46:	2201      	movs	r2, #1
 8005a48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a4a:	f7ff fa23 	bl	8004e94 <HAL_GetTick>
 8005a4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a50:	e008      	b.n	8005a64 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a52:	f7ff fa1f 	bl	8004e94 <HAL_GetTick>
 8005a56:	4602      	mov	r2, r0
 8005a58:	693b      	ldr	r3, [r7, #16]
 8005a5a:	1ad3      	subs	r3, r2, r3
 8005a5c:	2b02      	cmp	r3, #2
 8005a5e:	d901      	bls.n	8005a64 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005a60:	2303      	movs	r3, #3
 8005a62:	e05c      	b.n	8005b1e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a64:	4b11      	ldr	r3, [pc, #68]	@ (8005aac <HAL_RCC_OscConfig+0x470>)
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d0f0      	beq.n	8005a52 <HAL_RCC_OscConfig+0x416>
 8005a70:	e054      	b.n	8005b1c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a72:	4b10      	ldr	r3, [pc, #64]	@ (8005ab4 <HAL_RCC_OscConfig+0x478>)
 8005a74:	2200      	movs	r2, #0
 8005a76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a78:	f7ff fa0c 	bl	8004e94 <HAL_GetTick>
 8005a7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a7e:	e008      	b.n	8005a92 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a80:	f7ff fa08 	bl	8004e94 <HAL_GetTick>
 8005a84:	4602      	mov	r2, r0
 8005a86:	693b      	ldr	r3, [r7, #16]
 8005a88:	1ad3      	subs	r3, r2, r3
 8005a8a:	2b02      	cmp	r3, #2
 8005a8c:	d901      	bls.n	8005a92 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005a8e:	2303      	movs	r3, #3
 8005a90:	e045      	b.n	8005b1e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a92:	4b06      	ldr	r3, [pc, #24]	@ (8005aac <HAL_RCC_OscConfig+0x470>)
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d1f0      	bne.n	8005a80 <HAL_RCC_OscConfig+0x444>
 8005a9e:	e03d      	b.n	8005b1c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	699b      	ldr	r3, [r3, #24]
 8005aa4:	2b01      	cmp	r3, #1
 8005aa6:	d107      	bne.n	8005ab8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005aa8:	2301      	movs	r3, #1
 8005aaa:	e038      	b.n	8005b1e <HAL_RCC_OscConfig+0x4e2>
 8005aac:	40023800 	.word	0x40023800
 8005ab0:	40007000 	.word	0x40007000
 8005ab4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005ab8:	4b1b      	ldr	r3, [pc, #108]	@ (8005b28 <HAL_RCC_OscConfig+0x4ec>)
 8005aba:	685b      	ldr	r3, [r3, #4]
 8005abc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	699b      	ldr	r3, [r3, #24]
 8005ac2:	2b01      	cmp	r3, #1
 8005ac4:	d028      	beq.n	8005b18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005ad0:	429a      	cmp	r2, r3
 8005ad2:	d121      	bne.n	8005b18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ade:	429a      	cmp	r2, r3
 8005ae0:	d11a      	bne.n	8005b18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005ae2:	68fa      	ldr	r2, [r7, #12]
 8005ae4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005ae8:	4013      	ands	r3, r2
 8005aea:	687a      	ldr	r2, [r7, #4]
 8005aec:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005aee:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005af0:	4293      	cmp	r3, r2
 8005af2:	d111      	bne.n	8005b18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005afe:	085b      	lsrs	r3, r3, #1
 8005b00:	3b01      	subs	r3, #1
 8005b02:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005b04:	429a      	cmp	r2, r3
 8005b06:	d107      	bne.n	8005b18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b12:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005b14:	429a      	cmp	r2, r3
 8005b16:	d001      	beq.n	8005b1c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005b18:	2301      	movs	r3, #1
 8005b1a:	e000      	b.n	8005b1e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005b1c:	2300      	movs	r3, #0
}
 8005b1e:	4618      	mov	r0, r3
 8005b20:	3718      	adds	r7, #24
 8005b22:	46bd      	mov	sp, r7
 8005b24:	bd80      	pop	{r7, pc}
 8005b26:	bf00      	nop
 8005b28:	40023800 	.word	0x40023800

08005b2c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	b084      	sub	sp, #16
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
 8005b34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d101      	bne.n	8005b40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005b3c:	2301      	movs	r3, #1
 8005b3e:	e0cc      	b.n	8005cda <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005b40:	4b68      	ldr	r3, [pc, #416]	@ (8005ce4 <HAL_RCC_ClockConfig+0x1b8>)
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f003 0307 	and.w	r3, r3, #7
 8005b48:	683a      	ldr	r2, [r7, #0]
 8005b4a:	429a      	cmp	r2, r3
 8005b4c:	d90c      	bls.n	8005b68 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b4e:	4b65      	ldr	r3, [pc, #404]	@ (8005ce4 <HAL_RCC_ClockConfig+0x1b8>)
 8005b50:	683a      	ldr	r2, [r7, #0]
 8005b52:	b2d2      	uxtb	r2, r2
 8005b54:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b56:	4b63      	ldr	r3, [pc, #396]	@ (8005ce4 <HAL_RCC_ClockConfig+0x1b8>)
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f003 0307 	and.w	r3, r3, #7
 8005b5e:	683a      	ldr	r2, [r7, #0]
 8005b60:	429a      	cmp	r2, r3
 8005b62:	d001      	beq.n	8005b68 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005b64:	2301      	movs	r3, #1
 8005b66:	e0b8      	b.n	8005cda <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f003 0302 	and.w	r3, r3, #2
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d020      	beq.n	8005bb6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f003 0304 	and.w	r3, r3, #4
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d005      	beq.n	8005b8c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005b80:	4b59      	ldr	r3, [pc, #356]	@ (8005ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8005b82:	689b      	ldr	r3, [r3, #8]
 8005b84:	4a58      	ldr	r2, [pc, #352]	@ (8005ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8005b86:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005b8a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f003 0308 	and.w	r3, r3, #8
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d005      	beq.n	8005ba4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005b98:	4b53      	ldr	r3, [pc, #332]	@ (8005ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8005b9a:	689b      	ldr	r3, [r3, #8]
 8005b9c:	4a52      	ldr	r2, [pc, #328]	@ (8005ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8005b9e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005ba2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005ba4:	4b50      	ldr	r3, [pc, #320]	@ (8005ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8005ba6:	689b      	ldr	r3, [r3, #8]
 8005ba8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	689b      	ldr	r3, [r3, #8]
 8005bb0:	494d      	ldr	r1, [pc, #308]	@ (8005ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8005bb2:	4313      	orrs	r3, r2
 8005bb4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f003 0301 	and.w	r3, r3, #1
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d044      	beq.n	8005c4c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	685b      	ldr	r3, [r3, #4]
 8005bc6:	2b01      	cmp	r3, #1
 8005bc8:	d107      	bne.n	8005bda <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005bca:	4b47      	ldr	r3, [pc, #284]	@ (8005ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d119      	bne.n	8005c0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005bd6:	2301      	movs	r3, #1
 8005bd8:	e07f      	b.n	8005cda <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	685b      	ldr	r3, [r3, #4]
 8005bde:	2b02      	cmp	r3, #2
 8005be0:	d003      	beq.n	8005bea <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005be6:	2b03      	cmp	r3, #3
 8005be8:	d107      	bne.n	8005bfa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005bea:	4b3f      	ldr	r3, [pc, #252]	@ (8005ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d109      	bne.n	8005c0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005bf6:	2301      	movs	r3, #1
 8005bf8:	e06f      	b.n	8005cda <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005bfa:	4b3b      	ldr	r3, [pc, #236]	@ (8005ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f003 0302 	and.w	r3, r3, #2
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d101      	bne.n	8005c0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005c06:	2301      	movs	r3, #1
 8005c08:	e067      	b.n	8005cda <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005c0a:	4b37      	ldr	r3, [pc, #220]	@ (8005ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8005c0c:	689b      	ldr	r3, [r3, #8]
 8005c0e:	f023 0203 	bic.w	r2, r3, #3
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	685b      	ldr	r3, [r3, #4]
 8005c16:	4934      	ldr	r1, [pc, #208]	@ (8005ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8005c18:	4313      	orrs	r3, r2
 8005c1a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005c1c:	f7ff f93a 	bl	8004e94 <HAL_GetTick>
 8005c20:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c22:	e00a      	b.n	8005c3a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c24:	f7ff f936 	bl	8004e94 <HAL_GetTick>
 8005c28:	4602      	mov	r2, r0
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	1ad3      	subs	r3, r2, r3
 8005c2e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d901      	bls.n	8005c3a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005c36:	2303      	movs	r3, #3
 8005c38:	e04f      	b.n	8005cda <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c3a:	4b2b      	ldr	r3, [pc, #172]	@ (8005ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8005c3c:	689b      	ldr	r3, [r3, #8]
 8005c3e:	f003 020c 	and.w	r2, r3, #12
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	685b      	ldr	r3, [r3, #4]
 8005c46:	009b      	lsls	r3, r3, #2
 8005c48:	429a      	cmp	r2, r3
 8005c4a:	d1eb      	bne.n	8005c24 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005c4c:	4b25      	ldr	r3, [pc, #148]	@ (8005ce4 <HAL_RCC_ClockConfig+0x1b8>)
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f003 0307 	and.w	r3, r3, #7
 8005c54:	683a      	ldr	r2, [r7, #0]
 8005c56:	429a      	cmp	r2, r3
 8005c58:	d20c      	bcs.n	8005c74 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c5a:	4b22      	ldr	r3, [pc, #136]	@ (8005ce4 <HAL_RCC_ClockConfig+0x1b8>)
 8005c5c:	683a      	ldr	r2, [r7, #0]
 8005c5e:	b2d2      	uxtb	r2, r2
 8005c60:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c62:	4b20      	ldr	r3, [pc, #128]	@ (8005ce4 <HAL_RCC_ClockConfig+0x1b8>)
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f003 0307 	and.w	r3, r3, #7
 8005c6a:	683a      	ldr	r2, [r7, #0]
 8005c6c:	429a      	cmp	r2, r3
 8005c6e:	d001      	beq.n	8005c74 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005c70:	2301      	movs	r3, #1
 8005c72:	e032      	b.n	8005cda <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f003 0304 	and.w	r3, r3, #4
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d008      	beq.n	8005c92 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005c80:	4b19      	ldr	r3, [pc, #100]	@ (8005ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8005c82:	689b      	ldr	r3, [r3, #8]
 8005c84:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	68db      	ldr	r3, [r3, #12]
 8005c8c:	4916      	ldr	r1, [pc, #88]	@ (8005ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8005c8e:	4313      	orrs	r3, r2
 8005c90:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f003 0308 	and.w	r3, r3, #8
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d009      	beq.n	8005cb2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005c9e:	4b12      	ldr	r3, [pc, #72]	@ (8005ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8005ca0:	689b      	ldr	r3, [r3, #8]
 8005ca2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	691b      	ldr	r3, [r3, #16]
 8005caa:	00db      	lsls	r3, r3, #3
 8005cac:	490e      	ldr	r1, [pc, #56]	@ (8005ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8005cae:	4313      	orrs	r3, r2
 8005cb0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005cb2:	f000 f821 	bl	8005cf8 <HAL_RCC_GetSysClockFreq>
 8005cb6:	4602      	mov	r2, r0
 8005cb8:	4b0b      	ldr	r3, [pc, #44]	@ (8005ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8005cba:	689b      	ldr	r3, [r3, #8]
 8005cbc:	091b      	lsrs	r3, r3, #4
 8005cbe:	f003 030f 	and.w	r3, r3, #15
 8005cc2:	490a      	ldr	r1, [pc, #40]	@ (8005cec <HAL_RCC_ClockConfig+0x1c0>)
 8005cc4:	5ccb      	ldrb	r3, [r1, r3]
 8005cc6:	fa22 f303 	lsr.w	r3, r2, r3
 8005cca:	4a09      	ldr	r2, [pc, #36]	@ (8005cf0 <HAL_RCC_ClockConfig+0x1c4>)
 8005ccc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8005cce:	4b09      	ldr	r3, [pc, #36]	@ (8005cf4 <HAL_RCC_ClockConfig+0x1c8>)
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	f7ff f89a 	bl	8004e0c <HAL_InitTick>

  return HAL_OK;
 8005cd8:	2300      	movs	r3, #0
}
 8005cda:	4618      	mov	r0, r3
 8005cdc:	3710      	adds	r7, #16
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	bd80      	pop	{r7, pc}
 8005ce2:	bf00      	nop
 8005ce4:	40023c00 	.word	0x40023c00
 8005ce8:	40023800 	.word	0x40023800
 8005cec:	08008bb8 	.word	0x08008bb8
 8005cf0:	2000015c 	.word	0x2000015c
 8005cf4:	20000160 	.word	0x20000160

08005cf8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005cf8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005cfc:	b094      	sub	sp, #80	@ 0x50
 8005cfe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005d00:	2300      	movs	r3, #0
 8005d02:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8005d04:	2300      	movs	r3, #0
 8005d06:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8005d08:	2300      	movs	r3, #0
 8005d0a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005d10:	4b79      	ldr	r3, [pc, #484]	@ (8005ef8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005d12:	689b      	ldr	r3, [r3, #8]
 8005d14:	f003 030c 	and.w	r3, r3, #12
 8005d18:	2b08      	cmp	r3, #8
 8005d1a:	d00d      	beq.n	8005d38 <HAL_RCC_GetSysClockFreq+0x40>
 8005d1c:	2b08      	cmp	r3, #8
 8005d1e:	f200 80e1 	bhi.w	8005ee4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d002      	beq.n	8005d2c <HAL_RCC_GetSysClockFreq+0x34>
 8005d26:	2b04      	cmp	r3, #4
 8005d28:	d003      	beq.n	8005d32 <HAL_RCC_GetSysClockFreq+0x3a>
 8005d2a:	e0db      	b.n	8005ee4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005d2c:	4b73      	ldr	r3, [pc, #460]	@ (8005efc <HAL_RCC_GetSysClockFreq+0x204>)
 8005d2e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005d30:	e0db      	b.n	8005eea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005d32:	4b73      	ldr	r3, [pc, #460]	@ (8005f00 <HAL_RCC_GetSysClockFreq+0x208>)
 8005d34:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005d36:	e0d8      	b.n	8005eea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005d38:	4b6f      	ldr	r3, [pc, #444]	@ (8005ef8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005d3a:	685b      	ldr	r3, [r3, #4]
 8005d3c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005d40:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005d42:	4b6d      	ldr	r3, [pc, #436]	@ (8005ef8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005d44:	685b      	ldr	r3, [r3, #4]
 8005d46:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d063      	beq.n	8005e16 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005d4e:	4b6a      	ldr	r3, [pc, #424]	@ (8005ef8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005d50:	685b      	ldr	r3, [r3, #4]
 8005d52:	099b      	lsrs	r3, r3, #6
 8005d54:	2200      	movs	r2, #0
 8005d56:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005d58:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005d5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d60:	633b      	str	r3, [r7, #48]	@ 0x30
 8005d62:	2300      	movs	r3, #0
 8005d64:	637b      	str	r3, [r7, #52]	@ 0x34
 8005d66:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8005d6a:	4622      	mov	r2, r4
 8005d6c:	462b      	mov	r3, r5
 8005d6e:	f04f 0000 	mov.w	r0, #0
 8005d72:	f04f 0100 	mov.w	r1, #0
 8005d76:	0159      	lsls	r1, r3, #5
 8005d78:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005d7c:	0150      	lsls	r0, r2, #5
 8005d7e:	4602      	mov	r2, r0
 8005d80:	460b      	mov	r3, r1
 8005d82:	4621      	mov	r1, r4
 8005d84:	1a51      	subs	r1, r2, r1
 8005d86:	6139      	str	r1, [r7, #16]
 8005d88:	4629      	mov	r1, r5
 8005d8a:	eb63 0301 	sbc.w	r3, r3, r1
 8005d8e:	617b      	str	r3, [r7, #20]
 8005d90:	f04f 0200 	mov.w	r2, #0
 8005d94:	f04f 0300 	mov.w	r3, #0
 8005d98:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005d9c:	4659      	mov	r1, fp
 8005d9e:	018b      	lsls	r3, r1, #6
 8005da0:	4651      	mov	r1, sl
 8005da2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005da6:	4651      	mov	r1, sl
 8005da8:	018a      	lsls	r2, r1, #6
 8005daa:	4651      	mov	r1, sl
 8005dac:	ebb2 0801 	subs.w	r8, r2, r1
 8005db0:	4659      	mov	r1, fp
 8005db2:	eb63 0901 	sbc.w	r9, r3, r1
 8005db6:	f04f 0200 	mov.w	r2, #0
 8005dba:	f04f 0300 	mov.w	r3, #0
 8005dbe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005dc2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005dc6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005dca:	4690      	mov	r8, r2
 8005dcc:	4699      	mov	r9, r3
 8005dce:	4623      	mov	r3, r4
 8005dd0:	eb18 0303 	adds.w	r3, r8, r3
 8005dd4:	60bb      	str	r3, [r7, #8]
 8005dd6:	462b      	mov	r3, r5
 8005dd8:	eb49 0303 	adc.w	r3, r9, r3
 8005ddc:	60fb      	str	r3, [r7, #12]
 8005dde:	f04f 0200 	mov.w	r2, #0
 8005de2:	f04f 0300 	mov.w	r3, #0
 8005de6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005dea:	4629      	mov	r1, r5
 8005dec:	024b      	lsls	r3, r1, #9
 8005dee:	4621      	mov	r1, r4
 8005df0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005df4:	4621      	mov	r1, r4
 8005df6:	024a      	lsls	r2, r1, #9
 8005df8:	4610      	mov	r0, r2
 8005dfa:	4619      	mov	r1, r3
 8005dfc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005dfe:	2200      	movs	r2, #0
 8005e00:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005e02:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005e04:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005e08:	f7fa fa32 	bl	8000270 <__aeabi_uldivmod>
 8005e0c:	4602      	mov	r2, r0
 8005e0e:	460b      	mov	r3, r1
 8005e10:	4613      	mov	r3, r2
 8005e12:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005e14:	e058      	b.n	8005ec8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005e16:	4b38      	ldr	r3, [pc, #224]	@ (8005ef8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005e18:	685b      	ldr	r3, [r3, #4]
 8005e1a:	099b      	lsrs	r3, r3, #6
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	4618      	mov	r0, r3
 8005e20:	4611      	mov	r1, r2
 8005e22:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005e26:	623b      	str	r3, [r7, #32]
 8005e28:	2300      	movs	r3, #0
 8005e2a:	627b      	str	r3, [r7, #36]	@ 0x24
 8005e2c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005e30:	4642      	mov	r2, r8
 8005e32:	464b      	mov	r3, r9
 8005e34:	f04f 0000 	mov.w	r0, #0
 8005e38:	f04f 0100 	mov.w	r1, #0
 8005e3c:	0159      	lsls	r1, r3, #5
 8005e3e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005e42:	0150      	lsls	r0, r2, #5
 8005e44:	4602      	mov	r2, r0
 8005e46:	460b      	mov	r3, r1
 8005e48:	4641      	mov	r1, r8
 8005e4a:	ebb2 0a01 	subs.w	sl, r2, r1
 8005e4e:	4649      	mov	r1, r9
 8005e50:	eb63 0b01 	sbc.w	fp, r3, r1
 8005e54:	f04f 0200 	mov.w	r2, #0
 8005e58:	f04f 0300 	mov.w	r3, #0
 8005e5c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005e60:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005e64:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005e68:	ebb2 040a 	subs.w	r4, r2, sl
 8005e6c:	eb63 050b 	sbc.w	r5, r3, fp
 8005e70:	f04f 0200 	mov.w	r2, #0
 8005e74:	f04f 0300 	mov.w	r3, #0
 8005e78:	00eb      	lsls	r3, r5, #3
 8005e7a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005e7e:	00e2      	lsls	r2, r4, #3
 8005e80:	4614      	mov	r4, r2
 8005e82:	461d      	mov	r5, r3
 8005e84:	4643      	mov	r3, r8
 8005e86:	18e3      	adds	r3, r4, r3
 8005e88:	603b      	str	r3, [r7, #0]
 8005e8a:	464b      	mov	r3, r9
 8005e8c:	eb45 0303 	adc.w	r3, r5, r3
 8005e90:	607b      	str	r3, [r7, #4]
 8005e92:	f04f 0200 	mov.w	r2, #0
 8005e96:	f04f 0300 	mov.w	r3, #0
 8005e9a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005e9e:	4629      	mov	r1, r5
 8005ea0:	028b      	lsls	r3, r1, #10
 8005ea2:	4621      	mov	r1, r4
 8005ea4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005ea8:	4621      	mov	r1, r4
 8005eaa:	028a      	lsls	r2, r1, #10
 8005eac:	4610      	mov	r0, r2
 8005eae:	4619      	mov	r1, r3
 8005eb0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	61bb      	str	r3, [r7, #24]
 8005eb6:	61fa      	str	r2, [r7, #28]
 8005eb8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005ebc:	f7fa f9d8 	bl	8000270 <__aeabi_uldivmod>
 8005ec0:	4602      	mov	r2, r0
 8005ec2:	460b      	mov	r3, r1
 8005ec4:	4613      	mov	r3, r2
 8005ec6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005ec8:	4b0b      	ldr	r3, [pc, #44]	@ (8005ef8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005eca:	685b      	ldr	r3, [r3, #4]
 8005ecc:	0c1b      	lsrs	r3, r3, #16
 8005ece:	f003 0303 	and.w	r3, r3, #3
 8005ed2:	3301      	adds	r3, #1
 8005ed4:	005b      	lsls	r3, r3, #1
 8005ed6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8005ed8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005eda:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005edc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ee0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005ee2:	e002      	b.n	8005eea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005ee4:	4b05      	ldr	r3, [pc, #20]	@ (8005efc <HAL_RCC_GetSysClockFreq+0x204>)
 8005ee6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005ee8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005eea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005eec:	4618      	mov	r0, r3
 8005eee:	3750      	adds	r7, #80	@ 0x50
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005ef6:	bf00      	nop
 8005ef8:	40023800 	.word	0x40023800
 8005efc:	00f42400 	.word	0x00f42400
 8005f00:	007a1200 	.word	0x007a1200

08005f04 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005f04:	b480      	push	{r7}
 8005f06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005f08:	4b03      	ldr	r3, [pc, #12]	@ (8005f18 <HAL_RCC_GetHCLKFreq+0x14>)
 8005f0a:	681b      	ldr	r3, [r3, #0]
}
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f14:	4770      	bx	lr
 8005f16:	bf00      	nop
 8005f18:	2000015c 	.word	0x2000015c

08005f1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005f1c:	b580      	push	{r7, lr}
 8005f1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005f20:	f7ff fff0 	bl	8005f04 <HAL_RCC_GetHCLKFreq>
 8005f24:	4602      	mov	r2, r0
 8005f26:	4b05      	ldr	r3, [pc, #20]	@ (8005f3c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005f28:	689b      	ldr	r3, [r3, #8]
 8005f2a:	0a9b      	lsrs	r3, r3, #10
 8005f2c:	f003 0307 	and.w	r3, r3, #7
 8005f30:	4903      	ldr	r1, [pc, #12]	@ (8005f40 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005f32:	5ccb      	ldrb	r3, [r1, r3]
 8005f34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005f38:	4618      	mov	r0, r3
 8005f3a:	bd80      	pop	{r7, pc}
 8005f3c:	40023800 	.word	0x40023800
 8005f40:	08008bc8 	.word	0x08008bc8

08005f44 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005f44:	b580      	push	{r7, lr}
 8005f46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005f48:	f7ff ffdc 	bl	8005f04 <HAL_RCC_GetHCLKFreq>
 8005f4c:	4602      	mov	r2, r0
 8005f4e:	4b05      	ldr	r3, [pc, #20]	@ (8005f64 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005f50:	689b      	ldr	r3, [r3, #8]
 8005f52:	0b5b      	lsrs	r3, r3, #13
 8005f54:	f003 0307 	and.w	r3, r3, #7
 8005f58:	4903      	ldr	r1, [pc, #12]	@ (8005f68 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005f5a:	5ccb      	ldrb	r3, [r1, r3]
 8005f5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005f60:	4618      	mov	r0, r3
 8005f62:	bd80      	pop	{r7, pc}
 8005f64:	40023800 	.word	0x40023800
 8005f68:	08008bc8 	.word	0x08008bc8

08005f6c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	b082      	sub	sp, #8
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d101      	bne.n	8005f7e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005f7a:	2301      	movs	r3, #1
 8005f7c:	e041      	b.n	8006002 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005f84:	b2db      	uxtb	r3, r3
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d106      	bne.n	8005f98 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005f92:	6878      	ldr	r0, [r7, #4]
 8005f94:	f7fd fc36 	bl	8003804 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2202      	movs	r2, #2
 8005f9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681a      	ldr	r2, [r3, #0]
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	3304      	adds	r3, #4
 8005fa8:	4619      	mov	r1, r3
 8005faa:	4610      	mov	r0, r2
 8005fac:	f000 fcd2 	bl	8006954 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2201      	movs	r2, #1
 8005fb4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2201      	movs	r2, #1
 8005fbc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2201      	movs	r2, #1
 8005fc4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2201      	movs	r2, #1
 8005fcc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2201      	movs	r2, #1
 8005fd4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2201      	movs	r2, #1
 8005fdc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	2201      	movs	r2, #1
 8005fe4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2201      	movs	r2, #1
 8005fec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2201      	movs	r2, #1
 8005ff4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2201      	movs	r2, #1
 8005ffc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006000:	2300      	movs	r3, #0
}
 8006002:	4618      	mov	r0, r3
 8006004:	3708      	adds	r7, #8
 8006006:	46bd      	mov	sp, r7
 8006008:	bd80      	pop	{r7, pc}
	...

0800600c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800600c:	b480      	push	{r7}
 800600e:	b085      	sub	sp, #20
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800601a:	b2db      	uxtb	r3, r3
 800601c:	2b01      	cmp	r3, #1
 800601e:	d001      	beq.n	8006024 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006020:	2301      	movs	r3, #1
 8006022:	e04e      	b.n	80060c2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2202      	movs	r2, #2
 8006028:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	68da      	ldr	r2, [r3, #12]
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f042 0201 	orr.w	r2, r2, #1
 800603a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	4a23      	ldr	r2, [pc, #140]	@ (80060d0 <HAL_TIM_Base_Start_IT+0xc4>)
 8006042:	4293      	cmp	r3, r2
 8006044:	d022      	beq.n	800608c <HAL_TIM_Base_Start_IT+0x80>
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800604e:	d01d      	beq.n	800608c <HAL_TIM_Base_Start_IT+0x80>
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	4a1f      	ldr	r2, [pc, #124]	@ (80060d4 <HAL_TIM_Base_Start_IT+0xc8>)
 8006056:	4293      	cmp	r3, r2
 8006058:	d018      	beq.n	800608c <HAL_TIM_Base_Start_IT+0x80>
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	4a1e      	ldr	r2, [pc, #120]	@ (80060d8 <HAL_TIM_Base_Start_IT+0xcc>)
 8006060:	4293      	cmp	r3, r2
 8006062:	d013      	beq.n	800608c <HAL_TIM_Base_Start_IT+0x80>
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	4a1c      	ldr	r2, [pc, #112]	@ (80060dc <HAL_TIM_Base_Start_IT+0xd0>)
 800606a:	4293      	cmp	r3, r2
 800606c:	d00e      	beq.n	800608c <HAL_TIM_Base_Start_IT+0x80>
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	4a1b      	ldr	r2, [pc, #108]	@ (80060e0 <HAL_TIM_Base_Start_IT+0xd4>)
 8006074:	4293      	cmp	r3, r2
 8006076:	d009      	beq.n	800608c <HAL_TIM_Base_Start_IT+0x80>
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	4a19      	ldr	r2, [pc, #100]	@ (80060e4 <HAL_TIM_Base_Start_IT+0xd8>)
 800607e:	4293      	cmp	r3, r2
 8006080:	d004      	beq.n	800608c <HAL_TIM_Base_Start_IT+0x80>
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	4a18      	ldr	r2, [pc, #96]	@ (80060e8 <HAL_TIM_Base_Start_IT+0xdc>)
 8006088:	4293      	cmp	r3, r2
 800608a:	d111      	bne.n	80060b0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	689b      	ldr	r3, [r3, #8]
 8006092:	f003 0307 	and.w	r3, r3, #7
 8006096:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	2b06      	cmp	r3, #6
 800609c:	d010      	beq.n	80060c0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	681a      	ldr	r2, [r3, #0]
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f042 0201 	orr.w	r2, r2, #1
 80060ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060ae:	e007      	b.n	80060c0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	681a      	ldr	r2, [r3, #0]
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	f042 0201 	orr.w	r2, r2, #1
 80060be:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80060c0:	2300      	movs	r3, #0
}
 80060c2:	4618      	mov	r0, r3
 80060c4:	3714      	adds	r7, #20
 80060c6:	46bd      	mov	sp, r7
 80060c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060cc:	4770      	bx	lr
 80060ce:	bf00      	nop
 80060d0:	40010000 	.word	0x40010000
 80060d4:	40000400 	.word	0x40000400
 80060d8:	40000800 	.word	0x40000800
 80060dc:	40000c00 	.word	0x40000c00
 80060e0:	40010400 	.word	0x40010400
 80060e4:	40014000 	.word	0x40014000
 80060e8:	40001800 	.word	0x40001800

080060ec <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80060ec:	b580      	push	{r7, lr}
 80060ee:	b082      	sub	sp, #8
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d101      	bne.n	80060fe <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80060fa:	2301      	movs	r3, #1
 80060fc:	e041      	b.n	8006182 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006104:	b2db      	uxtb	r3, r3
 8006106:	2b00      	cmp	r3, #0
 8006108:	d106      	bne.n	8006118 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	2200      	movs	r2, #0
 800610e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006112:	6878      	ldr	r0, [r7, #4]
 8006114:	f000 f839 	bl	800618a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2202      	movs	r2, #2
 800611c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681a      	ldr	r2, [r3, #0]
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	3304      	adds	r3, #4
 8006128:	4619      	mov	r1, r3
 800612a:	4610      	mov	r0, r2
 800612c:	f000 fc12 	bl	8006954 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2201      	movs	r2, #1
 8006134:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2201      	movs	r2, #1
 800613c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2201      	movs	r2, #1
 8006144:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2201      	movs	r2, #1
 800614c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2201      	movs	r2, #1
 8006154:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	2201      	movs	r2, #1
 800615c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2201      	movs	r2, #1
 8006164:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2201      	movs	r2, #1
 800616c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2201      	movs	r2, #1
 8006174:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2201      	movs	r2, #1
 800617c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006180:	2300      	movs	r3, #0
}
 8006182:	4618      	mov	r0, r3
 8006184:	3708      	adds	r7, #8
 8006186:	46bd      	mov	sp, r7
 8006188:	bd80      	pop	{r7, pc}

0800618a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800618a:	b480      	push	{r7}
 800618c:	b083      	sub	sp, #12
 800618e:	af00      	add	r7, sp, #0
 8006190:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006192:	bf00      	nop
 8006194:	370c      	adds	r7, #12
 8006196:	46bd      	mov	sp, r7
 8006198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619c:	4770      	bx	lr
	...

080061a0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80061a0:	b580      	push	{r7, lr}
 80061a2:	b084      	sub	sp, #16
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
 80061a8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80061aa:	683b      	ldr	r3, [r7, #0]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d109      	bne.n	80061c4 <HAL_TIM_PWM_Start+0x24>
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80061b6:	b2db      	uxtb	r3, r3
 80061b8:	2b01      	cmp	r3, #1
 80061ba:	bf14      	ite	ne
 80061bc:	2301      	movne	r3, #1
 80061be:	2300      	moveq	r3, #0
 80061c0:	b2db      	uxtb	r3, r3
 80061c2:	e022      	b.n	800620a <HAL_TIM_PWM_Start+0x6a>
 80061c4:	683b      	ldr	r3, [r7, #0]
 80061c6:	2b04      	cmp	r3, #4
 80061c8:	d109      	bne.n	80061de <HAL_TIM_PWM_Start+0x3e>
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80061d0:	b2db      	uxtb	r3, r3
 80061d2:	2b01      	cmp	r3, #1
 80061d4:	bf14      	ite	ne
 80061d6:	2301      	movne	r3, #1
 80061d8:	2300      	moveq	r3, #0
 80061da:	b2db      	uxtb	r3, r3
 80061dc:	e015      	b.n	800620a <HAL_TIM_PWM_Start+0x6a>
 80061de:	683b      	ldr	r3, [r7, #0]
 80061e0:	2b08      	cmp	r3, #8
 80061e2:	d109      	bne.n	80061f8 <HAL_TIM_PWM_Start+0x58>
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80061ea:	b2db      	uxtb	r3, r3
 80061ec:	2b01      	cmp	r3, #1
 80061ee:	bf14      	ite	ne
 80061f0:	2301      	movne	r3, #1
 80061f2:	2300      	moveq	r3, #0
 80061f4:	b2db      	uxtb	r3, r3
 80061f6:	e008      	b.n	800620a <HAL_TIM_PWM_Start+0x6a>
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80061fe:	b2db      	uxtb	r3, r3
 8006200:	2b01      	cmp	r3, #1
 8006202:	bf14      	ite	ne
 8006204:	2301      	movne	r3, #1
 8006206:	2300      	moveq	r3, #0
 8006208:	b2db      	uxtb	r3, r3
 800620a:	2b00      	cmp	r3, #0
 800620c:	d001      	beq.n	8006212 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800620e:	2301      	movs	r3, #1
 8006210:	e07c      	b.n	800630c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006212:	683b      	ldr	r3, [r7, #0]
 8006214:	2b00      	cmp	r3, #0
 8006216:	d104      	bne.n	8006222 <HAL_TIM_PWM_Start+0x82>
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2202      	movs	r2, #2
 800621c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006220:	e013      	b.n	800624a <HAL_TIM_PWM_Start+0xaa>
 8006222:	683b      	ldr	r3, [r7, #0]
 8006224:	2b04      	cmp	r3, #4
 8006226:	d104      	bne.n	8006232 <HAL_TIM_PWM_Start+0x92>
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	2202      	movs	r2, #2
 800622c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006230:	e00b      	b.n	800624a <HAL_TIM_PWM_Start+0xaa>
 8006232:	683b      	ldr	r3, [r7, #0]
 8006234:	2b08      	cmp	r3, #8
 8006236:	d104      	bne.n	8006242 <HAL_TIM_PWM_Start+0xa2>
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2202      	movs	r2, #2
 800623c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006240:	e003      	b.n	800624a <HAL_TIM_PWM_Start+0xaa>
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	2202      	movs	r2, #2
 8006246:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	2201      	movs	r2, #1
 8006250:	6839      	ldr	r1, [r7, #0]
 8006252:	4618      	mov	r0, r3
 8006254:	f000 fe74 	bl	8006f40 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	4a2d      	ldr	r2, [pc, #180]	@ (8006314 <HAL_TIM_PWM_Start+0x174>)
 800625e:	4293      	cmp	r3, r2
 8006260:	d004      	beq.n	800626c <HAL_TIM_PWM_Start+0xcc>
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	4a2c      	ldr	r2, [pc, #176]	@ (8006318 <HAL_TIM_PWM_Start+0x178>)
 8006268:	4293      	cmp	r3, r2
 800626a:	d101      	bne.n	8006270 <HAL_TIM_PWM_Start+0xd0>
 800626c:	2301      	movs	r3, #1
 800626e:	e000      	b.n	8006272 <HAL_TIM_PWM_Start+0xd2>
 8006270:	2300      	movs	r3, #0
 8006272:	2b00      	cmp	r3, #0
 8006274:	d007      	beq.n	8006286 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006284:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	4a22      	ldr	r2, [pc, #136]	@ (8006314 <HAL_TIM_PWM_Start+0x174>)
 800628c:	4293      	cmp	r3, r2
 800628e:	d022      	beq.n	80062d6 <HAL_TIM_PWM_Start+0x136>
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006298:	d01d      	beq.n	80062d6 <HAL_TIM_PWM_Start+0x136>
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	4a1f      	ldr	r2, [pc, #124]	@ (800631c <HAL_TIM_PWM_Start+0x17c>)
 80062a0:	4293      	cmp	r3, r2
 80062a2:	d018      	beq.n	80062d6 <HAL_TIM_PWM_Start+0x136>
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	4a1d      	ldr	r2, [pc, #116]	@ (8006320 <HAL_TIM_PWM_Start+0x180>)
 80062aa:	4293      	cmp	r3, r2
 80062ac:	d013      	beq.n	80062d6 <HAL_TIM_PWM_Start+0x136>
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	4a1c      	ldr	r2, [pc, #112]	@ (8006324 <HAL_TIM_PWM_Start+0x184>)
 80062b4:	4293      	cmp	r3, r2
 80062b6:	d00e      	beq.n	80062d6 <HAL_TIM_PWM_Start+0x136>
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	4a16      	ldr	r2, [pc, #88]	@ (8006318 <HAL_TIM_PWM_Start+0x178>)
 80062be:	4293      	cmp	r3, r2
 80062c0:	d009      	beq.n	80062d6 <HAL_TIM_PWM_Start+0x136>
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	4a18      	ldr	r2, [pc, #96]	@ (8006328 <HAL_TIM_PWM_Start+0x188>)
 80062c8:	4293      	cmp	r3, r2
 80062ca:	d004      	beq.n	80062d6 <HAL_TIM_PWM_Start+0x136>
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	4a16      	ldr	r2, [pc, #88]	@ (800632c <HAL_TIM_PWM_Start+0x18c>)
 80062d2:	4293      	cmp	r3, r2
 80062d4:	d111      	bne.n	80062fa <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	689b      	ldr	r3, [r3, #8]
 80062dc:	f003 0307 	and.w	r3, r3, #7
 80062e0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	2b06      	cmp	r3, #6
 80062e6:	d010      	beq.n	800630a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	681a      	ldr	r2, [r3, #0]
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f042 0201 	orr.w	r2, r2, #1
 80062f6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062f8:	e007      	b.n	800630a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	681a      	ldr	r2, [r3, #0]
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f042 0201 	orr.w	r2, r2, #1
 8006308:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800630a:	2300      	movs	r3, #0
}
 800630c:	4618      	mov	r0, r3
 800630e:	3710      	adds	r7, #16
 8006310:	46bd      	mov	sp, r7
 8006312:	bd80      	pop	{r7, pc}
 8006314:	40010000 	.word	0x40010000
 8006318:	40010400 	.word	0x40010400
 800631c:	40000400 	.word	0x40000400
 8006320:	40000800 	.word	0x40000800
 8006324:	40000c00 	.word	0x40000c00
 8006328:	40014000 	.word	0x40014000
 800632c:	40001800 	.word	0x40001800

08006330 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006330:	b580      	push	{r7, lr}
 8006332:	b082      	sub	sp, #8
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
 8006338:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	2200      	movs	r2, #0
 8006340:	6839      	ldr	r1, [r7, #0]
 8006342:	4618      	mov	r0, r3
 8006344:	f000 fdfc 	bl	8006f40 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	4a2e      	ldr	r2, [pc, #184]	@ (8006408 <HAL_TIM_PWM_Stop+0xd8>)
 800634e:	4293      	cmp	r3, r2
 8006350:	d004      	beq.n	800635c <HAL_TIM_PWM_Stop+0x2c>
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	4a2d      	ldr	r2, [pc, #180]	@ (800640c <HAL_TIM_PWM_Stop+0xdc>)
 8006358:	4293      	cmp	r3, r2
 800635a:	d101      	bne.n	8006360 <HAL_TIM_PWM_Stop+0x30>
 800635c:	2301      	movs	r3, #1
 800635e:	e000      	b.n	8006362 <HAL_TIM_PWM_Stop+0x32>
 8006360:	2300      	movs	r3, #0
 8006362:	2b00      	cmp	r3, #0
 8006364:	d017      	beq.n	8006396 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	6a1a      	ldr	r2, [r3, #32]
 800636c:	f241 1311 	movw	r3, #4369	@ 0x1111
 8006370:	4013      	ands	r3, r2
 8006372:	2b00      	cmp	r3, #0
 8006374:	d10f      	bne.n	8006396 <HAL_TIM_PWM_Stop+0x66>
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	6a1a      	ldr	r2, [r3, #32]
 800637c:	f240 4344 	movw	r3, #1092	@ 0x444
 8006380:	4013      	ands	r3, r2
 8006382:	2b00      	cmp	r3, #0
 8006384:	d107      	bne.n	8006396 <HAL_TIM_PWM_Stop+0x66>
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006394:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	6a1a      	ldr	r2, [r3, #32]
 800639c:	f241 1311 	movw	r3, #4369	@ 0x1111
 80063a0:	4013      	ands	r3, r2
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d10f      	bne.n	80063c6 <HAL_TIM_PWM_Stop+0x96>
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	6a1a      	ldr	r2, [r3, #32]
 80063ac:	f240 4344 	movw	r3, #1092	@ 0x444
 80063b0:	4013      	ands	r3, r2
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d107      	bne.n	80063c6 <HAL_TIM_PWM_Stop+0x96>
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	681a      	ldr	r2, [r3, #0]
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f022 0201 	bic.w	r2, r2, #1
 80063c4:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80063c6:	683b      	ldr	r3, [r7, #0]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d104      	bne.n	80063d6 <HAL_TIM_PWM_Stop+0xa6>
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2201      	movs	r2, #1
 80063d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80063d4:	e013      	b.n	80063fe <HAL_TIM_PWM_Stop+0xce>
 80063d6:	683b      	ldr	r3, [r7, #0]
 80063d8:	2b04      	cmp	r3, #4
 80063da:	d104      	bne.n	80063e6 <HAL_TIM_PWM_Stop+0xb6>
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2201      	movs	r2, #1
 80063e0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80063e4:	e00b      	b.n	80063fe <HAL_TIM_PWM_Stop+0xce>
 80063e6:	683b      	ldr	r3, [r7, #0]
 80063e8:	2b08      	cmp	r3, #8
 80063ea:	d104      	bne.n	80063f6 <HAL_TIM_PWM_Stop+0xc6>
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2201      	movs	r2, #1
 80063f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80063f4:	e003      	b.n	80063fe <HAL_TIM_PWM_Stop+0xce>
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	2201      	movs	r2, #1
 80063fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 80063fe:	2300      	movs	r3, #0
}
 8006400:	4618      	mov	r0, r3
 8006402:	3708      	adds	r7, #8
 8006404:	46bd      	mov	sp, r7
 8006406:	bd80      	pop	{r7, pc}
 8006408:	40010000 	.word	0x40010000
 800640c:	40010400 	.word	0x40010400

08006410 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006410:	b580      	push	{r7, lr}
 8006412:	b084      	sub	sp, #16
 8006414:	af00      	add	r7, sp, #0
 8006416:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	68db      	ldr	r3, [r3, #12]
 800641e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	691b      	ldr	r3, [r3, #16]
 8006426:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006428:	68bb      	ldr	r3, [r7, #8]
 800642a:	f003 0302 	and.w	r3, r3, #2
 800642e:	2b00      	cmp	r3, #0
 8006430:	d020      	beq.n	8006474 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	f003 0302 	and.w	r3, r3, #2
 8006438:	2b00      	cmp	r3, #0
 800643a:	d01b      	beq.n	8006474 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	f06f 0202 	mvn.w	r2, #2
 8006444:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	2201      	movs	r2, #1
 800644a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	699b      	ldr	r3, [r3, #24]
 8006452:	f003 0303 	and.w	r3, r3, #3
 8006456:	2b00      	cmp	r3, #0
 8006458:	d003      	beq.n	8006462 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800645a:	6878      	ldr	r0, [r7, #4]
 800645c:	f000 fa5b 	bl	8006916 <HAL_TIM_IC_CaptureCallback>
 8006460:	e005      	b.n	800646e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006462:	6878      	ldr	r0, [r7, #4]
 8006464:	f000 fa4d 	bl	8006902 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006468:	6878      	ldr	r0, [r7, #4]
 800646a:	f000 fa5e 	bl	800692a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	2200      	movs	r2, #0
 8006472:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006474:	68bb      	ldr	r3, [r7, #8]
 8006476:	f003 0304 	and.w	r3, r3, #4
 800647a:	2b00      	cmp	r3, #0
 800647c:	d020      	beq.n	80064c0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	f003 0304 	and.w	r3, r3, #4
 8006484:	2b00      	cmp	r3, #0
 8006486:	d01b      	beq.n	80064c0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f06f 0204 	mvn.w	r2, #4
 8006490:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	2202      	movs	r2, #2
 8006496:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	699b      	ldr	r3, [r3, #24]
 800649e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d003      	beq.n	80064ae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80064a6:	6878      	ldr	r0, [r7, #4]
 80064a8:	f000 fa35 	bl	8006916 <HAL_TIM_IC_CaptureCallback>
 80064ac:	e005      	b.n	80064ba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80064ae:	6878      	ldr	r0, [r7, #4]
 80064b0:	f000 fa27 	bl	8006902 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064b4:	6878      	ldr	r0, [r7, #4]
 80064b6:	f000 fa38 	bl	800692a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	2200      	movs	r2, #0
 80064be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80064c0:	68bb      	ldr	r3, [r7, #8]
 80064c2:	f003 0308 	and.w	r3, r3, #8
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d020      	beq.n	800650c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	f003 0308 	and.w	r3, r3, #8
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d01b      	beq.n	800650c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f06f 0208 	mvn.w	r2, #8
 80064dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	2204      	movs	r2, #4
 80064e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	69db      	ldr	r3, [r3, #28]
 80064ea:	f003 0303 	and.w	r3, r3, #3
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d003      	beq.n	80064fa <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80064f2:	6878      	ldr	r0, [r7, #4]
 80064f4:	f000 fa0f 	bl	8006916 <HAL_TIM_IC_CaptureCallback>
 80064f8:	e005      	b.n	8006506 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80064fa:	6878      	ldr	r0, [r7, #4]
 80064fc:	f000 fa01 	bl	8006902 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006500:	6878      	ldr	r0, [r7, #4]
 8006502:	f000 fa12 	bl	800692a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	2200      	movs	r2, #0
 800650a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800650c:	68bb      	ldr	r3, [r7, #8]
 800650e:	f003 0310 	and.w	r3, r3, #16
 8006512:	2b00      	cmp	r3, #0
 8006514:	d020      	beq.n	8006558 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	f003 0310 	and.w	r3, r3, #16
 800651c:	2b00      	cmp	r3, #0
 800651e:	d01b      	beq.n	8006558 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f06f 0210 	mvn.w	r2, #16
 8006528:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	2208      	movs	r2, #8
 800652e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	69db      	ldr	r3, [r3, #28]
 8006536:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800653a:	2b00      	cmp	r3, #0
 800653c:	d003      	beq.n	8006546 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800653e:	6878      	ldr	r0, [r7, #4]
 8006540:	f000 f9e9 	bl	8006916 <HAL_TIM_IC_CaptureCallback>
 8006544:	e005      	b.n	8006552 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006546:	6878      	ldr	r0, [r7, #4]
 8006548:	f000 f9db 	bl	8006902 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800654c:	6878      	ldr	r0, [r7, #4]
 800654e:	f000 f9ec 	bl	800692a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	2200      	movs	r2, #0
 8006556:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006558:	68bb      	ldr	r3, [r7, #8]
 800655a:	f003 0301 	and.w	r3, r3, #1
 800655e:	2b00      	cmp	r3, #0
 8006560:	d00c      	beq.n	800657c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	f003 0301 	and.w	r3, r3, #1
 8006568:	2b00      	cmp	r3, #0
 800656a:	d007      	beq.n	800657c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	f06f 0201 	mvn.w	r2, #1
 8006574:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006576:	6878      	ldr	r0, [r7, #4]
 8006578:	f7fd f880 	bl	800367c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800657c:	68bb      	ldr	r3, [r7, #8]
 800657e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006582:	2b00      	cmp	r3, #0
 8006584:	d00c      	beq.n	80065a0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800658c:	2b00      	cmp	r3, #0
 800658e:	d007      	beq.n	80065a0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006598:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800659a:	6878      	ldr	r0, [r7, #4]
 800659c:	f000 fd7c 	bl	8007098 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80065a0:	68bb      	ldr	r3, [r7, #8]
 80065a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d00c      	beq.n	80065c4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d007      	beq.n	80065c4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80065bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80065be:	6878      	ldr	r0, [r7, #4]
 80065c0:	f000 f9bd 	bl	800693e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80065c4:	68bb      	ldr	r3, [r7, #8]
 80065c6:	f003 0320 	and.w	r3, r3, #32
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d00c      	beq.n	80065e8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	f003 0320 	and.w	r3, r3, #32
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d007      	beq.n	80065e8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	f06f 0220 	mvn.w	r2, #32
 80065e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80065e2:	6878      	ldr	r0, [r7, #4]
 80065e4:	f000 fd4e 	bl	8007084 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80065e8:	bf00      	nop
 80065ea:	3710      	adds	r7, #16
 80065ec:	46bd      	mov	sp, r7
 80065ee:	bd80      	pop	{r7, pc}

080065f0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80065f0:	b580      	push	{r7, lr}
 80065f2:	b086      	sub	sp, #24
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	60f8      	str	r0, [r7, #12]
 80065f8:	60b9      	str	r1, [r7, #8]
 80065fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80065fc:	2300      	movs	r3, #0
 80065fe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006606:	2b01      	cmp	r3, #1
 8006608:	d101      	bne.n	800660e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800660a:	2302      	movs	r3, #2
 800660c:	e0ae      	b.n	800676c <HAL_TIM_PWM_ConfigChannel+0x17c>
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	2201      	movs	r2, #1
 8006612:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	2b0c      	cmp	r3, #12
 800661a:	f200 809f 	bhi.w	800675c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800661e:	a201      	add	r2, pc, #4	@ (adr r2, 8006624 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006620:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006624:	08006659 	.word	0x08006659
 8006628:	0800675d 	.word	0x0800675d
 800662c:	0800675d 	.word	0x0800675d
 8006630:	0800675d 	.word	0x0800675d
 8006634:	08006699 	.word	0x08006699
 8006638:	0800675d 	.word	0x0800675d
 800663c:	0800675d 	.word	0x0800675d
 8006640:	0800675d 	.word	0x0800675d
 8006644:	080066db 	.word	0x080066db
 8006648:	0800675d 	.word	0x0800675d
 800664c:	0800675d 	.word	0x0800675d
 8006650:	0800675d 	.word	0x0800675d
 8006654:	0800671b 	.word	0x0800671b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	68b9      	ldr	r1, [r7, #8]
 800665e:	4618      	mov	r0, r3
 8006660:	f000 fa24 	bl	8006aac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	699a      	ldr	r2, [r3, #24]
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	f042 0208 	orr.w	r2, r2, #8
 8006672:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	699a      	ldr	r2, [r3, #24]
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	f022 0204 	bic.w	r2, r2, #4
 8006682:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	6999      	ldr	r1, [r3, #24]
 800668a:	68bb      	ldr	r3, [r7, #8]
 800668c:	691a      	ldr	r2, [r3, #16]
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	430a      	orrs	r2, r1
 8006694:	619a      	str	r2, [r3, #24]
      break;
 8006696:	e064      	b.n	8006762 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	68b9      	ldr	r1, [r7, #8]
 800669e:	4618      	mov	r0, r3
 80066a0:	f000 fa74 	bl	8006b8c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	699a      	ldr	r2, [r3, #24]
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80066b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	699a      	ldr	r2, [r3, #24]
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80066c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	6999      	ldr	r1, [r3, #24]
 80066ca:	68bb      	ldr	r3, [r7, #8]
 80066cc:	691b      	ldr	r3, [r3, #16]
 80066ce:	021a      	lsls	r2, r3, #8
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	430a      	orrs	r2, r1
 80066d6:	619a      	str	r2, [r3, #24]
      break;
 80066d8:	e043      	b.n	8006762 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	68b9      	ldr	r1, [r7, #8]
 80066e0:	4618      	mov	r0, r3
 80066e2:	f000 fac9 	bl	8006c78 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	69da      	ldr	r2, [r3, #28]
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	f042 0208 	orr.w	r2, r2, #8
 80066f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	69da      	ldr	r2, [r3, #28]
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f022 0204 	bic.w	r2, r2, #4
 8006704:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	69d9      	ldr	r1, [r3, #28]
 800670c:	68bb      	ldr	r3, [r7, #8]
 800670e:	691a      	ldr	r2, [r3, #16]
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	430a      	orrs	r2, r1
 8006716:	61da      	str	r2, [r3, #28]
      break;
 8006718:	e023      	b.n	8006762 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	68b9      	ldr	r1, [r7, #8]
 8006720:	4618      	mov	r0, r3
 8006722:	f000 fb1d 	bl	8006d60 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	69da      	ldr	r2, [r3, #28]
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006734:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	69da      	ldr	r2, [r3, #28]
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006744:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	69d9      	ldr	r1, [r3, #28]
 800674c:	68bb      	ldr	r3, [r7, #8]
 800674e:	691b      	ldr	r3, [r3, #16]
 8006750:	021a      	lsls	r2, r3, #8
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	430a      	orrs	r2, r1
 8006758:	61da      	str	r2, [r3, #28]
      break;
 800675a:	e002      	b.n	8006762 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800675c:	2301      	movs	r3, #1
 800675e:	75fb      	strb	r3, [r7, #23]
      break;
 8006760:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	2200      	movs	r2, #0
 8006766:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800676a:	7dfb      	ldrb	r3, [r7, #23]
}
 800676c:	4618      	mov	r0, r3
 800676e:	3718      	adds	r7, #24
 8006770:	46bd      	mov	sp, r7
 8006772:	bd80      	pop	{r7, pc}

08006774 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006774:	b580      	push	{r7, lr}
 8006776:	b084      	sub	sp, #16
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
 800677c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800677e:	2300      	movs	r3, #0
 8006780:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006788:	2b01      	cmp	r3, #1
 800678a:	d101      	bne.n	8006790 <HAL_TIM_ConfigClockSource+0x1c>
 800678c:	2302      	movs	r3, #2
 800678e:	e0b4      	b.n	80068fa <HAL_TIM_ConfigClockSource+0x186>
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2201      	movs	r2, #1
 8006794:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2202      	movs	r2, #2
 800679c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	689b      	ldr	r3, [r3, #8]
 80067a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80067a8:	68bb      	ldr	r3, [r7, #8]
 80067aa:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80067ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80067b0:	68bb      	ldr	r3, [r7, #8]
 80067b2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80067b6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	68ba      	ldr	r2, [r7, #8]
 80067be:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80067c0:	683b      	ldr	r3, [r7, #0]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80067c8:	d03e      	beq.n	8006848 <HAL_TIM_ConfigClockSource+0xd4>
 80067ca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80067ce:	f200 8087 	bhi.w	80068e0 <HAL_TIM_ConfigClockSource+0x16c>
 80067d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80067d6:	f000 8086 	beq.w	80068e6 <HAL_TIM_ConfigClockSource+0x172>
 80067da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80067de:	d87f      	bhi.n	80068e0 <HAL_TIM_ConfigClockSource+0x16c>
 80067e0:	2b70      	cmp	r3, #112	@ 0x70
 80067e2:	d01a      	beq.n	800681a <HAL_TIM_ConfigClockSource+0xa6>
 80067e4:	2b70      	cmp	r3, #112	@ 0x70
 80067e6:	d87b      	bhi.n	80068e0 <HAL_TIM_ConfigClockSource+0x16c>
 80067e8:	2b60      	cmp	r3, #96	@ 0x60
 80067ea:	d050      	beq.n	800688e <HAL_TIM_ConfigClockSource+0x11a>
 80067ec:	2b60      	cmp	r3, #96	@ 0x60
 80067ee:	d877      	bhi.n	80068e0 <HAL_TIM_ConfigClockSource+0x16c>
 80067f0:	2b50      	cmp	r3, #80	@ 0x50
 80067f2:	d03c      	beq.n	800686e <HAL_TIM_ConfigClockSource+0xfa>
 80067f4:	2b50      	cmp	r3, #80	@ 0x50
 80067f6:	d873      	bhi.n	80068e0 <HAL_TIM_ConfigClockSource+0x16c>
 80067f8:	2b40      	cmp	r3, #64	@ 0x40
 80067fa:	d058      	beq.n	80068ae <HAL_TIM_ConfigClockSource+0x13a>
 80067fc:	2b40      	cmp	r3, #64	@ 0x40
 80067fe:	d86f      	bhi.n	80068e0 <HAL_TIM_ConfigClockSource+0x16c>
 8006800:	2b30      	cmp	r3, #48	@ 0x30
 8006802:	d064      	beq.n	80068ce <HAL_TIM_ConfigClockSource+0x15a>
 8006804:	2b30      	cmp	r3, #48	@ 0x30
 8006806:	d86b      	bhi.n	80068e0 <HAL_TIM_ConfigClockSource+0x16c>
 8006808:	2b20      	cmp	r3, #32
 800680a:	d060      	beq.n	80068ce <HAL_TIM_ConfigClockSource+0x15a>
 800680c:	2b20      	cmp	r3, #32
 800680e:	d867      	bhi.n	80068e0 <HAL_TIM_ConfigClockSource+0x16c>
 8006810:	2b00      	cmp	r3, #0
 8006812:	d05c      	beq.n	80068ce <HAL_TIM_ConfigClockSource+0x15a>
 8006814:	2b10      	cmp	r3, #16
 8006816:	d05a      	beq.n	80068ce <HAL_TIM_ConfigClockSource+0x15a>
 8006818:	e062      	b.n	80068e0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800681e:	683b      	ldr	r3, [r7, #0]
 8006820:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006822:	683b      	ldr	r3, [r7, #0]
 8006824:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006826:	683b      	ldr	r3, [r7, #0]
 8006828:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800682a:	f000 fb69 	bl	8006f00 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	689b      	ldr	r3, [r3, #8]
 8006834:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006836:	68bb      	ldr	r3, [r7, #8]
 8006838:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800683c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	68ba      	ldr	r2, [r7, #8]
 8006844:	609a      	str	r2, [r3, #8]
      break;
 8006846:	e04f      	b.n	80068e8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800684c:	683b      	ldr	r3, [r7, #0]
 800684e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006850:	683b      	ldr	r3, [r7, #0]
 8006852:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006854:	683b      	ldr	r3, [r7, #0]
 8006856:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006858:	f000 fb52 	bl	8006f00 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	689a      	ldr	r2, [r3, #8]
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800686a:	609a      	str	r2, [r3, #8]
      break;
 800686c:	e03c      	b.n	80068e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006872:	683b      	ldr	r3, [r7, #0]
 8006874:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006876:	683b      	ldr	r3, [r7, #0]
 8006878:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800687a:	461a      	mov	r2, r3
 800687c:	f000 fac6 	bl	8006e0c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	2150      	movs	r1, #80	@ 0x50
 8006886:	4618      	mov	r0, r3
 8006888:	f000 fb1f 	bl	8006eca <TIM_ITRx_SetConfig>
      break;
 800688c:	e02c      	b.n	80068e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006892:	683b      	ldr	r3, [r7, #0]
 8006894:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006896:	683b      	ldr	r3, [r7, #0]
 8006898:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800689a:	461a      	mov	r2, r3
 800689c:	f000 fae5 	bl	8006e6a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	2160      	movs	r1, #96	@ 0x60
 80068a6:	4618      	mov	r0, r3
 80068a8:	f000 fb0f 	bl	8006eca <TIM_ITRx_SetConfig>
      break;
 80068ac:	e01c      	b.n	80068e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80068b2:	683b      	ldr	r3, [r7, #0]
 80068b4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80068b6:	683b      	ldr	r3, [r7, #0]
 80068b8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80068ba:	461a      	mov	r2, r3
 80068bc:	f000 faa6 	bl	8006e0c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	2140      	movs	r1, #64	@ 0x40
 80068c6:	4618      	mov	r0, r3
 80068c8:	f000 faff 	bl	8006eca <TIM_ITRx_SetConfig>
      break;
 80068cc:	e00c      	b.n	80068e8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681a      	ldr	r2, [r3, #0]
 80068d2:	683b      	ldr	r3, [r7, #0]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	4619      	mov	r1, r3
 80068d8:	4610      	mov	r0, r2
 80068da:	f000 faf6 	bl	8006eca <TIM_ITRx_SetConfig>
      break;
 80068de:	e003      	b.n	80068e8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80068e0:	2301      	movs	r3, #1
 80068e2:	73fb      	strb	r3, [r7, #15]
      break;
 80068e4:	e000      	b.n	80068e8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80068e6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2201      	movs	r2, #1
 80068ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2200      	movs	r2, #0
 80068f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80068f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80068fa:	4618      	mov	r0, r3
 80068fc:	3710      	adds	r7, #16
 80068fe:	46bd      	mov	sp, r7
 8006900:	bd80      	pop	{r7, pc}

08006902 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006902:	b480      	push	{r7}
 8006904:	b083      	sub	sp, #12
 8006906:	af00      	add	r7, sp, #0
 8006908:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800690a:	bf00      	nop
 800690c:	370c      	adds	r7, #12
 800690e:	46bd      	mov	sp, r7
 8006910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006914:	4770      	bx	lr

08006916 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006916:	b480      	push	{r7}
 8006918:	b083      	sub	sp, #12
 800691a:	af00      	add	r7, sp, #0
 800691c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800691e:	bf00      	nop
 8006920:	370c      	adds	r7, #12
 8006922:	46bd      	mov	sp, r7
 8006924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006928:	4770      	bx	lr

0800692a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800692a:	b480      	push	{r7}
 800692c:	b083      	sub	sp, #12
 800692e:	af00      	add	r7, sp, #0
 8006930:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006932:	bf00      	nop
 8006934:	370c      	adds	r7, #12
 8006936:	46bd      	mov	sp, r7
 8006938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693c:	4770      	bx	lr

0800693e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800693e:	b480      	push	{r7}
 8006940:	b083      	sub	sp, #12
 8006942:	af00      	add	r7, sp, #0
 8006944:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006946:	bf00      	nop
 8006948:	370c      	adds	r7, #12
 800694a:	46bd      	mov	sp, r7
 800694c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006950:	4770      	bx	lr
	...

08006954 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006954:	b480      	push	{r7}
 8006956:	b085      	sub	sp, #20
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
 800695c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	4a46      	ldr	r2, [pc, #280]	@ (8006a80 <TIM_Base_SetConfig+0x12c>)
 8006968:	4293      	cmp	r3, r2
 800696a:	d013      	beq.n	8006994 <TIM_Base_SetConfig+0x40>
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006972:	d00f      	beq.n	8006994 <TIM_Base_SetConfig+0x40>
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	4a43      	ldr	r2, [pc, #268]	@ (8006a84 <TIM_Base_SetConfig+0x130>)
 8006978:	4293      	cmp	r3, r2
 800697a:	d00b      	beq.n	8006994 <TIM_Base_SetConfig+0x40>
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	4a42      	ldr	r2, [pc, #264]	@ (8006a88 <TIM_Base_SetConfig+0x134>)
 8006980:	4293      	cmp	r3, r2
 8006982:	d007      	beq.n	8006994 <TIM_Base_SetConfig+0x40>
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	4a41      	ldr	r2, [pc, #260]	@ (8006a8c <TIM_Base_SetConfig+0x138>)
 8006988:	4293      	cmp	r3, r2
 800698a:	d003      	beq.n	8006994 <TIM_Base_SetConfig+0x40>
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	4a40      	ldr	r2, [pc, #256]	@ (8006a90 <TIM_Base_SetConfig+0x13c>)
 8006990:	4293      	cmp	r3, r2
 8006992:	d108      	bne.n	80069a6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800699a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800699c:	683b      	ldr	r3, [r7, #0]
 800699e:	685b      	ldr	r3, [r3, #4]
 80069a0:	68fa      	ldr	r2, [r7, #12]
 80069a2:	4313      	orrs	r3, r2
 80069a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	4a35      	ldr	r2, [pc, #212]	@ (8006a80 <TIM_Base_SetConfig+0x12c>)
 80069aa:	4293      	cmp	r3, r2
 80069ac:	d02b      	beq.n	8006a06 <TIM_Base_SetConfig+0xb2>
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80069b4:	d027      	beq.n	8006a06 <TIM_Base_SetConfig+0xb2>
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	4a32      	ldr	r2, [pc, #200]	@ (8006a84 <TIM_Base_SetConfig+0x130>)
 80069ba:	4293      	cmp	r3, r2
 80069bc:	d023      	beq.n	8006a06 <TIM_Base_SetConfig+0xb2>
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	4a31      	ldr	r2, [pc, #196]	@ (8006a88 <TIM_Base_SetConfig+0x134>)
 80069c2:	4293      	cmp	r3, r2
 80069c4:	d01f      	beq.n	8006a06 <TIM_Base_SetConfig+0xb2>
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	4a30      	ldr	r2, [pc, #192]	@ (8006a8c <TIM_Base_SetConfig+0x138>)
 80069ca:	4293      	cmp	r3, r2
 80069cc:	d01b      	beq.n	8006a06 <TIM_Base_SetConfig+0xb2>
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	4a2f      	ldr	r2, [pc, #188]	@ (8006a90 <TIM_Base_SetConfig+0x13c>)
 80069d2:	4293      	cmp	r3, r2
 80069d4:	d017      	beq.n	8006a06 <TIM_Base_SetConfig+0xb2>
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	4a2e      	ldr	r2, [pc, #184]	@ (8006a94 <TIM_Base_SetConfig+0x140>)
 80069da:	4293      	cmp	r3, r2
 80069dc:	d013      	beq.n	8006a06 <TIM_Base_SetConfig+0xb2>
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	4a2d      	ldr	r2, [pc, #180]	@ (8006a98 <TIM_Base_SetConfig+0x144>)
 80069e2:	4293      	cmp	r3, r2
 80069e4:	d00f      	beq.n	8006a06 <TIM_Base_SetConfig+0xb2>
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	4a2c      	ldr	r2, [pc, #176]	@ (8006a9c <TIM_Base_SetConfig+0x148>)
 80069ea:	4293      	cmp	r3, r2
 80069ec:	d00b      	beq.n	8006a06 <TIM_Base_SetConfig+0xb2>
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	4a2b      	ldr	r2, [pc, #172]	@ (8006aa0 <TIM_Base_SetConfig+0x14c>)
 80069f2:	4293      	cmp	r3, r2
 80069f4:	d007      	beq.n	8006a06 <TIM_Base_SetConfig+0xb2>
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	4a2a      	ldr	r2, [pc, #168]	@ (8006aa4 <TIM_Base_SetConfig+0x150>)
 80069fa:	4293      	cmp	r3, r2
 80069fc:	d003      	beq.n	8006a06 <TIM_Base_SetConfig+0xb2>
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	4a29      	ldr	r2, [pc, #164]	@ (8006aa8 <TIM_Base_SetConfig+0x154>)
 8006a02:	4293      	cmp	r3, r2
 8006a04:	d108      	bne.n	8006a18 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006a0c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006a0e:	683b      	ldr	r3, [r7, #0]
 8006a10:	68db      	ldr	r3, [r3, #12]
 8006a12:	68fa      	ldr	r2, [r7, #12]
 8006a14:	4313      	orrs	r3, r2
 8006a16:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006a1e:	683b      	ldr	r3, [r7, #0]
 8006a20:	695b      	ldr	r3, [r3, #20]
 8006a22:	4313      	orrs	r3, r2
 8006a24:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	68fa      	ldr	r2, [r7, #12]
 8006a2a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006a2c:	683b      	ldr	r3, [r7, #0]
 8006a2e:	689a      	ldr	r2, [r3, #8]
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006a34:	683b      	ldr	r3, [r7, #0]
 8006a36:	681a      	ldr	r2, [r3, #0]
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	4a10      	ldr	r2, [pc, #64]	@ (8006a80 <TIM_Base_SetConfig+0x12c>)
 8006a40:	4293      	cmp	r3, r2
 8006a42:	d003      	beq.n	8006a4c <TIM_Base_SetConfig+0xf8>
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	4a12      	ldr	r2, [pc, #72]	@ (8006a90 <TIM_Base_SetConfig+0x13c>)
 8006a48:	4293      	cmp	r3, r2
 8006a4a:	d103      	bne.n	8006a54 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006a4c:	683b      	ldr	r3, [r7, #0]
 8006a4e:	691a      	ldr	r2, [r3, #16]
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2201      	movs	r2, #1
 8006a58:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	691b      	ldr	r3, [r3, #16]
 8006a5e:	f003 0301 	and.w	r3, r3, #1
 8006a62:	2b01      	cmp	r3, #1
 8006a64:	d105      	bne.n	8006a72 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	691b      	ldr	r3, [r3, #16]
 8006a6a:	f023 0201 	bic.w	r2, r3, #1
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	611a      	str	r2, [r3, #16]
  }
}
 8006a72:	bf00      	nop
 8006a74:	3714      	adds	r7, #20
 8006a76:	46bd      	mov	sp, r7
 8006a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7c:	4770      	bx	lr
 8006a7e:	bf00      	nop
 8006a80:	40010000 	.word	0x40010000
 8006a84:	40000400 	.word	0x40000400
 8006a88:	40000800 	.word	0x40000800
 8006a8c:	40000c00 	.word	0x40000c00
 8006a90:	40010400 	.word	0x40010400
 8006a94:	40014000 	.word	0x40014000
 8006a98:	40014400 	.word	0x40014400
 8006a9c:	40014800 	.word	0x40014800
 8006aa0:	40001800 	.word	0x40001800
 8006aa4:	40001c00 	.word	0x40001c00
 8006aa8:	40002000 	.word	0x40002000

08006aac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006aac:	b480      	push	{r7}
 8006aae:	b087      	sub	sp, #28
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	6078      	str	r0, [r7, #4]
 8006ab4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	6a1b      	ldr	r3, [r3, #32]
 8006aba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	6a1b      	ldr	r3, [r3, #32]
 8006ac0:	f023 0201 	bic.w	r2, r3, #1
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	685b      	ldr	r3, [r3, #4]
 8006acc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	699b      	ldr	r3, [r3, #24]
 8006ad2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ada:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	f023 0303 	bic.w	r3, r3, #3
 8006ae2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006ae4:	683b      	ldr	r3, [r7, #0]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	68fa      	ldr	r2, [r7, #12]
 8006aea:	4313      	orrs	r3, r2
 8006aec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006aee:	697b      	ldr	r3, [r7, #20]
 8006af0:	f023 0302 	bic.w	r3, r3, #2
 8006af4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006af6:	683b      	ldr	r3, [r7, #0]
 8006af8:	689b      	ldr	r3, [r3, #8]
 8006afa:	697a      	ldr	r2, [r7, #20]
 8006afc:	4313      	orrs	r3, r2
 8006afe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	4a20      	ldr	r2, [pc, #128]	@ (8006b84 <TIM_OC1_SetConfig+0xd8>)
 8006b04:	4293      	cmp	r3, r2
 8006b06:	d003      	beq.n	8006b10 <TIM_OC1_SetConfig+0x64>
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	4a1f      	ldr	r2, [pc, #124]	@ (8006b88 <TIM_OC1_SetConfig+0xdc>)
 8006b0c:	4293      	cmp	r3, r2
 8006b0e:	d10c      	bne.n	8006b2a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006b10:	697b      	ldr	r3, [r7, #20]
 8006b12:	f023 0308 	bic.w	r3, r3, #8
 8006b16:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	68db      	ldr	r3, [r3, #12]
 8006b1c:	697a      	ldr	r2, [r7, #20]
 8006b1e:	4313      	orrs	r3, r2
 8006b20:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006b22:	697b      	ldr	r3, [r7, #20]
 8006b24:	f023 0304 	bic.w	r3, r3, #4
 8006b28:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	4a15      	ldr	r2, [pc, #84]	@ (8006b84 <TIM_OC1_SetConfig+0xd8>)
 8006b2e:	4293      	cmp	r3, r2
 8006b30:	d003      	beq.n	8006b3a <TIM_OC1_SetConfig+0x8e>
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	4a14      	ldr	r2, [pc, #80]	@ (8006b88 <TIM_OC1_SetConfig+0xdc>)
 8006b36:	4293      	cmp	r3, r2
 8006b38:	d111      	bne.n	8006b5e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006b3a:	693b      	ldr	r3, [r7, #16]
 8006b3c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006b40:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006b42:	693b      	ldr	r3, [r7, #16]
 8006b44:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006b48:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006b4a:	683b      	ldr	r3, [r7, #0]
 8006b4c:	695b      	ldr	r3, [r3, #20]
 8006b4e:	693a      	ldr	r2, [r7, #16]
 8006b50:	4313      	orrs	r3, r2
 8006b52:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006b54:	683b      	ldr	r3, [r7, #0]
 8006b56:	699b      	ldr	r3, [r3, #24]
 8006b58:	693a      	ldr	r2, [r7, #16]
 8006b5a:	4313      	orrs	r3, r2
 8006b5c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	693a      	ldr	r2, [r7, #16]
 8006b62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	68fa      	ldr	r2, [r7, #12]
 8006b68:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006b6a:	683b      	ldr	r3, [r7, #0]
 8006b6c:	685a      	ldr	r2, [r3, #4]
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	697a      	ldr	r2, [r7, #20]
 8006b76:	621a      	str	r2, [r3, #32]
}
 8006b78:	bf00      	nop
 8006b7a:	371c      	adds	r7, #28
 8006b7c:	46bd      	mov	sp, r7
 8006b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b82:	4770      	bx	lr
 8006b84:	40010000 	.word	0x40010000
 8006b88:	40010400 	.word	0x40010400

08006b8c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006b8c:	b480      	push	{r7}
 8006b8e:	b087      	sub	sp, #28
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	6078      	str	r0, [r7, #4]
 8006b94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	6a1b      	ldr	r3, [r3, #32]
 8006b9a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	6a1b      	ldr	r3, [r3, #32]
 8006ba0:	f023 0210 	bic.w	r2, r3, #16
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	685b      	ldr	r3, [r3, #4]
 8006bac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	699b      	ldr	r3, [r3, #24]
 8006bb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006bba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006bc2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006bc4:	683b      	ldr	r3, [r7, #0]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	021b      	lsls	r3, r3, #8
 8006bca:	68fa      	ldr	r2, [r7, #12]
 8006bcc:	4313      	orrs	r3, r2
 8006bce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006bd0:	697b      	ldr	r3, [r7, #20]
 8006bd2:	f023 0320 	bic.w	r3, r3, #32
 8006bd6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006bd8:	683b      	ldr	r3, [r7, #0]
 8006bda:	689b      	ldr	r3, [r3, #8]
 8006bdc:	011b      	lsls	r3, r3, #4
 8006bde:	697a      	ldr	r2, [r7, #20]
 8006be0:	4313      	orrs	r3, r2
 8006be2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	4a22      	ldr	r2, [pc, #136]	@ (8006c70 <TIM_OC2_SetConfig+0xe4>)
 8006be8:	4293      	cmp	r3, r2
 8006bea:	d003      	beq.n	8006bf4 <TIM_OC2_SetConfig+0x68>
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	4a21      	ldr	r2, [pc, #132]	@ (8006c74 <TIM_OC2_SetConfig+0xe8>)
 8006bf0:	4293      	cmp	r3, r2
 8006bf2:	d10d      	bne.n	8006c10 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006bf4:	697b      	ldr	r3, [r7, #20]
 8006bf6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006bfa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006bfc:	683b      	ldr	r3, [r7, #0]
 8006bfe:	68db      	ldr	r3, [r3, #12]
 8006c00:	011b      	lsls	r3, r3, #4
 8006c02:	697a      	ldr	r2, [r7, #20]
 8006c04:	4313      	orrs	r3, r2
 8006c06:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006c08:	697b      	ldr	r3, [r7, #20]
 8006c0a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006c0e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	4a17      	ldr	r2, [pc, #92]	@ (8006c70 <TIM_OC2_SetConfig+0xe4>)
 8006c14:	4293      	cmp	r3, r2
 8006c16:	d003      	beq.n	8006c20 <TIM_OC2_SetConfig+0x94>
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	4a16      	ldr	r2, [pc, #88]	@ (8006c74 <TIM_OC2_SetConfig+0xe8>)
 8006c1c:	4293      	cmp	r3, r2
 8006c1e:	d113      	bne.n	8006c48 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006c20:	693b      	ldr	r3, [r7, #16]
 8006c22:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006c26:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006c28:	693b      	ldr	r3, [r7, #16]
 8006c2a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006c2e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006c30:	683b      	ldr	r3, [r7, #0]
 8006c32:	695b      	ldr	r3, [r3, #20]
 8006c34:	009b      	lsls	r3, r3, #2
 8006c36:	693a      	ldr	r2, [r7, #16]
 8006c38:	4313      	orrs	r3, r2
 8006c3a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006c3c:	683b      	ldr	r3, [r7, #0]
 8006c3e:	699b      	ldr	r3, [r3, #24]
 8006c40:	009b      	lsls	r3, r3, #2
 8006c42:	693a      	ldr	r2, [r7, #16]
 8006c44:	4313      	orrs	r3, r2
 8006c46:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	693a      	ldr	r2, [r7, #16]
 8006c4c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	68fa      	ldr	r2, [r7, #12]
 8006c52:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006c54:	683b      	ldr	r3, [r7, #0]
 8006c56:	685a      	ldr	r2, [r3, #4]
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	697a      	ldr	r2, [r7, #20]
 8006c60:	621a      	str	r2, [r3, #32]
}
 8006c62:	bf00      	nop
 8006c64:	371c      	adds	r7, #28
 8006c66:	46bd      	mov	sp, r7
 8006c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6c:	4770      	bx	lr
 8006c6e:	bf00      	nop
 8006c70:	40010000 	.word	0x40010000
 8006c74:	40010400 	.word	0x40010400

08006c78 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006c78:	b480      	push	{r7}
 8006c7a:	b087      	sub	sp, #28
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	6078      	str	r0, [r7, #4]
 8006c80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	6a1b      	ldr	r3, [r3, #32]
 8006c86:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	6a1b      	ldr	r3, [r3, #32]
 8006c8c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	685b      	ldr	r3, [r3, #4]
 8006c98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	69db      	ldr	r3, [r3, #28]
 8006c9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ca6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	f023 0303 	bic.w	r3, r3, #3
 8006cae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006cb0:	683b      	ldr	r3, [r7, #0]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	68fa      	ldr	r2, [r7, #12]
 8006cb6:	4313      	orrs	r3, r2
 8006cb8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006cba:	697b      	ldr	r3, [r7, #20]
 8006cbc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006cc0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006cc2:	683b      	ldr	r3, [r7, #0]
 8006cc4:	689b      	ldr	r3, [r3, #8]
 8006cc6:	021b      	lsls	r3, r3, #8
 8006cc8:	697a      	ldr	r2, [r7, #20]
 8006cca:	4313      	orrs	r3, r2
 8006ccc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	4a21      	ldr	r2, [pc, #132]	@ (8006d58 <TIM_OC3_SetConfig+0xe0>)
 8006cd2:	4293      	cmp	r3, r2
 8006cd4:	d003      	beq.n	8006cde <TIM_OC3_SetConfig+0x66>
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	4a20      	ldr	r2, [pc, #128]	@ (8006d5c <TIM_OC3_SetConfig+0xe4>)
 8006cda:	4293      	cmp	r3, r2
 8006cdc:	d10d      	bne.n	8006cfa <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006cde:	697b      	ldr	r3, [r7, #20]
 8006ce0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006ce4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006ce6:	683b      	ldr	r3, [r7, #0]
 8006ce8:	68db      	ldr	r3, [r3, #12]
 8006cea:	021b      	lsls	r3, r3, #8
 8006cec:	697a      	ldr	r2, [r7, #20]
 8006cee:	4313      	orrs	r3, r2
 8006cf0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006cf2:	697b      	ldr	r3, [r7, #20]
 8006cf4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006cf8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	4a16      	ldr	r2, [pc, #88]	@ (8006d58 <TIM_OC3_SetConfig+0xe0>)
 8006cfe:	4293      	cmp	r3, r2
 8006d00:	d003      	beq.n	8006d0a <TIM_OC3_SetConfig+0x92>
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	4a15      	ldr	r2, [pc, #84]	@ (8006d5c <TIM_OC3_SetConfig+0xe4>)
 8006d06:	4293      	cmp	r3, r2
 8006d08:	d113      	bne.n	8006d32 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006d0a:	693b      	ldr	r3, [r7, #16]
 8006d0c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006d10:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006d12:	693b      	ldr	r3, [r7, #16]
 8006d14:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006d18:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006d1a:	683b      	ldr	r3, [r7, #0]
 8006d1c:	695b      	ldr	r3, [r3, #20]
 8006d1e:	011b      	lsls	r3, r3, #4
 8006d20:	693a      	ldr	r2, [r7, #16]
 8006d22:	4313      	orrs	r3, r2
 8006d24:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006d26:	683b      	ldr	r3, [r7, #0]
 8006d28:	699b      	ldr	r3, [r3, #24]
 8006d2a:	011b      	lsls	r3, r3, #4
 8006d2c:	693a      	ldr	r2, [r7, #16]
 8006d2e:	4313      	orrs	r3, r2
 8006d30:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	693a      	ldr	r2, [r7, #16]
 8006d36:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	68fa      	ldr	r2, [r7, #12]
 8006d3c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006d3e:	683b      	ldr	r3, [r7, #0]
 8006d40:	685a      	ldr	r2, [r3, #4]
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	697a      	ldr	r2, [r7, #20]
 8006d4a:	621a      	str	r2, [r3, #32]
}
 8006d4c:	bf00      	nop
 8006d4e:	371c      	adds	r7, #28
 8006d50:	46bd      	mov	sp, r7
 8006d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d56:	4770      	bx	lr
 8006d58:	40010000 	.word	0x40010000
 8006d5c:	40010400 	.word	0x40010400

08006d60 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006d60:	b480      	push	{r7}
 8006d62:	b087      	sub	sp, #28
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
 8006d68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	6a1b      	ldr	r3, [r3, #32]
 8006d6e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	6a1b      	ldr	r3, [r3, #32]
 8006d74:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	685b      	ldr	r3, [r3, #4]
 8006d80:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	69db      	ldr	r3, [r3, #28]
 8006d86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006d8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006d96:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006d98:	683b      	ldr	r3, [r7, #0]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	021b      	lsls	r3, r3, #8
 8006d9e:	68fa      	ldr	r2, [r7, #12]
 8006da0:	4313      	orrs	r3, r2
 8006da2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006da4:	693b      	ldr	r3, [r7, #16]
 8006da6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006daa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	689b      	ldr	r3, [r3, #8]
 8006db0:	031b      	lsls	r3, r3, #12
 8006db2:	693a      	ldr	r2, [r7, #16]
 8006db4:	4313      	orrs	r3, r2
 8006db6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	4a12      	ldr	r2, [pc, #72]	@ (8006e04 <TIM_OC4_SetConfig+0xa4>)
 8006dbc:	4293      	cmp	r3, r2
 8006dbe:	d003      	beq.n	8006dc8 <TIM_OC4_SetConfig+0x68>
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	4a11      	ldr	r2, [pc, #68]	@ (8006e08 <TIM_OC4_SetConfig+0xa8>)
 8006dc4:	4293      	cmp	r3, r2
 8006dc6:	d109      	bne.n	8006ddc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006dc8:	697b      	ldr	r3, [r7, #20]
 8006dca:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006dce:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006dd0:	683b      	ldr	r3, [r7, #0]
 8006dd2:	695b      	ldr	r3, [r3, #20]
 8006dd4:	019b      	lsls	r3, r3, #6
 8006dd6:	697a      	ldr	r2, [r7, #20]
 8006dd8:	4313      	orrs	r3, r2
 8006dda:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	697a      	ldr	r2, [r7, #20]
 8006de0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	68fa      	ldr	r2, [r7, #12]
 8006de6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006de8:	683b      	ldr	r3, [r7, #0]
 8006dea:	685a      	ldr	r2, [r3, #4]
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	693a      	ldr	r2, [r7, #16]
 8006df4:	621a      	str	r2, [r3, #32]
}
 8006df6:	bf00      	nop
 8006df8:	371c      	adds	r7, #28
 8006dfa:	46bd      	mov	sp, r7
 8006dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e00:	4770      	bx	lr
 8006e02:	bf00      	nop
 8006e04:	40010000 	.word	0x40010000
 8006e08:	40010400 	.word	0x40010400

08006e0c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006e0c:	b480      	push	{r7}
 8006e0e:	b087      	sub	sp, #28
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	60f8      	str	r0, [r7, #12]
 8006e14:	60b9      	str	r1, [r7, #8]
 8006e16:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	6a1b      	ldr	r3, [r3, #32]
 8006e1c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	6a1b      	ldr	r3, [r3, #32]
 8006e22:	f023 0201 	bic.w	r2, r3, #1
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	699b      	ldr	r3, [r3, #24]
 8006e2e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006e30:	693b      	ldr	r3, [r7, #16]
 8006e32:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006e36:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	011b      	lsls	r3, r3, #4
 8006e3c:	693a      	ldr	r2, [r7, #16]
 8006e3e:	4313      	orrs	r3, r2
 8006e40:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006e42:	697b      	ldr	r3, [r7, #20]
 8006e44:	f023 030a 	bic.w	r3, r3, #10
 8006e48:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006e4a:	697a      	ldr	r2, [r7, #20]
 8006e4c:	68bb      	ldr	r3, [r7, #8]
 8006e4e:	4313      	orrs	r3, r2
 8006e50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	693a      	ldr	r2, [r7, #16]
 8006e56:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	697a      	ldr	r2, [r7, #20]
 8006e5c:	621a      	str	r2, [r3, #32]
}
 8006e5e:	bf00      	nop
 8006e60:	371c      	adds	r7, #28
 8006e62:	46bd      	mov	sp, r7
 8006e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e68:	4770      	bx	lr

08006e6a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006e6a:	b480      	push	{r7}
 8006e6c:	b087      	sub	sp, #28
 8006e6e:	af00      	add	r7, sp, #0
 8006e70:	60f8      	str	r0, [r7, #12]
 8006e72:	60b9      	str	r1, [r7, #8]
 8006e74:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	6a1b      	ldr	r3, [r3, #32]
 8006e7a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	6a1b      	ldr	r3, [r3, #32]
 8006e80:	f023 0210 	bic.w	r2, r3, #16
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	699b      	ldr	r3, [r3, #24]
 8006e8c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006e8e:	693b      	ldr	r3, [r7, #16]
 8006e90:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006e94:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	031b      	lsls	r3, r3, #12
 8006e9a:	693a      	ldr	r2, [r7, #16]
 8006e9c:	4313      	orrs	r3, r2
 8006e9e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006ea0:	697b      	ldr	r3, [r7, #20]
 8006ea2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006ea6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006ea8:	68bb      	ldr	r3, [r7, #8]
 8006eaa:	011b      	lsls	r3, r3, #4
 8006eac:	697a      	ldr	r2, [r7, #20]
 8006eae:	4313      	orrs	r3, r2
 8006eb0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	693a      	ldr	r2, [r7, #16]
 8006eb6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	697a      	ldr	r2, [r7, #20]
 8006ebc:	621a      	str	r2, [r3, #32]
}
 8006ebe:	bf00      	nop
 8006ec0:	371c      	adds	r7, #28
 8006ec2:	46bd      	mov	sp, r7
 8006ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec8:	4770      	bx	lr

08006eca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006eca:	b480      	push	{r7}
 8006ecc:	b085      	sub	sp, #20
 8006ece:	af00      	add	r7, sp, #0
 8006ed0:	6078      	str	r0, [r7, #4]
 8006ed2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	689b      	ldr	r3, [r3, #8]
 8006ed8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ee0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006ee2:	683a      	ldr	r2, [r7, #0]
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	4313      	orrs	r3, r2
 8006ee8:	f043 0307 	orr.w	r3, r3, #7
 8006eec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	68fa      	ldr	r2, [r7, #12]
 8006ef2:	609a      	str	r2, [r3, #8]
}
 8006ef4:	bf00      	nop
 8006ef6:	3714      	adds	r7, #20
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efe:	4770      	bx	lr

08006f00 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006f00:	b480      	push	{r7}
 8006f02:	b087      	sub	sp, #28
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	60f8      	str	r0, [r7, #12]
 8006f08:	60b9      	str	r1, [r7, #8]
 8006f0a:	607a      	str	r2, [r7, #4]
 8006f0c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	689b      	ldr	r3, [r3, #8]
 8006f12:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006f14:	697b      	ldr	r3, [r7, #20]
 8006f16:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006f1a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006f1c:	683b      	ldr	r3, [r7, #0]
 8006f1e:	021a      	lsls	r2, r3, #8
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	431a      	orrs	r2, r3
 8006f24:	68bb      	ldr	r3, [r7, #8]
 8006f26:	4313      	orrs	r3, r2
 8006f28:	697a      	ldr	r2, [r7, #20]
 8006f2a:	4313      	orrs	r3, r2
 8006f2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	697a      	ldr	r2, [r7, #20]
 8006f32:	609a      	str	r2, [r3, #8]
}
 8006f34:	bf00      	nop
 8006f36:	371c      	adds	r7, #28
 8006f38:	46bd      	mov	sp, r7
 8006f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3e:	4770      	bx	lr

08006f40 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006f40:	b480      	push	{r7}
 8006f42:	b087      	sub	sp, #28
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	60f8      	str	r0, [r7, #12]
 8006f48:	60b9      	str	r1, [r7, #8]
 8006f4a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006f4c:	68bb      	ldr	r3, [r7, #8]
 8006f4e:	f003 031f 	and.w	r3, r3, #31
 8006f52:	2201      	movs	r2, #1
 8006f54:	fa02 f303 	lsl.w	r3, r2, r3
 8006f58:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	6a1a      	ldr	r2, [r3, #32]
 8006f5e:	697b      	ldr	r3, [r7, #20]
 8006f60:	43db      	mvns	r3, r3
 8006f62:	401a      	ands	r2, r3
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	6a1a      	ldr	r2, [r3, #32]
 8006f6c:	68bb      	ldr	r3, [r7, #8]
 8006f6e:	f003 031f 	and.w	r3, r3, #31
 8006f72:	6879      	ldr	r1, [r7, #4]
 8006f74:	fa01 f303 	lsl.w	r3, r1, r3
 8006f78:	431a      	orrs	r2, r3
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	621a      	str	r2, [r3, #32]
}
 8006f7e:	bf00      	nop
 8006f80:	371c      	adds	r7, #28
 8006f82:	46bd      	mov	sp, r7
 8006f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f88:	4770      	bx	lr
	...

08006f8c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006f8c:	b480      	push	{r7}
 8006f8e:	b085      	sub	sp, #20
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	6078      	str	r0, [r7, #4]
 8006f94:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006f9c:	2b01      	cmp	r3, #1
 8006f9e:	d101      	bne.n	8006fa4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006fa0:	2302      	movs	r3, #2
 8006fa2:	e05a      	b.n	800705a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	2201      	movs	r2, #1
 8006fa8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	2202      	movs	r2, #2
 8006fb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	685b      	ldr	r3, [r3, #4]
 8006fba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	689b      	ldr	r3, [r3, #8]
 8006fc2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006fca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006fcc:	683b      	ldr	r3, [r7, #0]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	68fa      	ldr	r2, [r7, #12]
 8006fd2:	4313      	orrs	r3, r2
 8006fd4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	68fa      	ldr	r2, [r7, #12]
 8006fdc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	4a21      	ldr	r2, [pc, #132]	@ (8007068 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006fe4:	4293      	cmp	r3, r2
 8006fe6:	d022      	beq.n	800702e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006ff0:	d01d      	beq.n	800702e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	4a1d      	ldr	r2, [pc, #116]	@ (800706c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006ff8:	4293      	cmp	r3, r2
 8006ffa:	d018      	beq.n	800702e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	4a1b      	ldr	r2, [pc, #108]	@ (8007070 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007002:	4293      	cmp	r3, r2
 8007004:	d013      	beq.n	800702e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	4a1a      	ldr	r2, [pc, #104]	@ (8007074 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800700c:	4293      	cmp	r3, r2
 800700e:	d00e      	beq.n	800702e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	4a18      	ldr	r2, [pc, #96]	@ (8007078 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007016:	4293      	cmp	r3, r2
 8007018:	d009      	beq.n	800702e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	4a17      	ldr	r2, [pc, #92]	@ (800707c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007020:	4293      	cmp	r3, r2
 8007022:	d004      	beq.n	800702e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	4a15      	ldr	r2, [pc, #84]	@ (8007080 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800702a:	4293      	cmp	r3, r2
 800702c:	d10c      	bne.n	8007048 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800702e:	68bb      	ldr	r3, [r7, #8]
 8007030:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007034:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007036:	683b      	ldr	r3, [r7, #0]
 8007038:	685b      	ldr	r3, [r3, #4]
 800703a:	68ba      	ldr	r2, [r7, #8]
 800703c:	4313      	orrs	r3, r2
 800703e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	68ba      	ldr	r2, [r7, #8]
 8007046:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	2201      	movs	r2, #1
 800704c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	2200      	movs	r2, #0
 8007054:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007058:	2300      	movs	r3, #0
}
 800705a:	4618      	mov	r0, r3
 800705c:	3714      	adds	r7, #20
 800705e:	46bd      	mov	sp, r7
 8007060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007064:	4770      	bx	lr
 8007066:	bf00      	nop
 8007068:	40010000 	.word	0x40010000
 800706c:	40000400 	.word	0x40000400
 8007070:	40000800 	.word	0x40000800
 8007074:	40000c00 	.word	0x40000c00
 8007078:	40010400 	.word	0x40010400
 800707c:	40014000 	.word	0x40014000
 8007080:	40001800 	.word	0x40001800

08007084 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007084:	b480      	push	{r7}
 8007086:	b083      	sub	sp, #12
 8007088:	af00      	add	r7, sp, #0
 800708a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800708c:	bf00      	nop
 800708e:	370c      	adds	r7, #12
 8007090:	46bd      	mov	sp, r7
 8007092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007096:	4770      	bx	lr

08007098 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007098:	b480      	push	{r7}
 800709a:	b083      	sub	sp, #12
 800709c:	af00      	add	r7, sp, #0
 800709e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80070a0:	bf00      	nop
 80070a2:	370c      	adds	r7, #12
 80070a4:	46bd      	mov	sp, r7
 80070a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070aa:	4770      	bx	lr

080070ac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80070ac:	b580      	push	{r7, lr}
 80070ae:	b082      	sub	sp, #8
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d101      	bne.n	80070be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80070ba:	2301      	movs	r3, #1
 80070bc:	e042      	b.n	8007144 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80070c4:	b2db      	uxtb	r3, r3
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d106      	bne.n	80070d8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	2200      	movs	r2, #0
 80070ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80070d2:	6878      	ldr	r0, [r7, #4]
 80070d4:	f7fc fc04 	bl	80038e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	2224      	movs	r2, #36	@ 0x24
 80070dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	68da      	ldr	r2, [r3, #12]
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80070ee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80070f0:	6878      	ldr	r0, [r7, #4]
 80070f2:	f000 fcdb 	bl	8007aac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	691a      	ldr	r2, [r3, #16]
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007104:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	695a      	ldr	r2, [r3, #20]
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007114:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	68da      	ldr	r2, [r3, #12]
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007124:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	2200      	movs	r2, #0
 800712a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	2220      	movs	r2, #32
 8007130:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	2220      	movs	r2, #32
 8007138:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	2200      	movs	r2, #0
 8007140:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8007142:	2300      	movs	r3, #0
}
 8007144:	4618      	mov	r0, r3
 8007146:	3708      	adds	r7, #8
 8007148:	46bd      	mov	sp, r7
 800714a:	bd80      	pop	{r7, pc}

0800714c <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800714c:	b580      	push	{r7, lr}
 800714e:	b084      	sub	sp, #16
 8007150:	af00      	add	r7, sp, #0
 8007152:	60f8      	str	r0, [r7, #12]
 8007154:	60b9      	str	r1, [r7, #8]
 8007156:	4613      	mov	r3, r2
 8007158:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007160:	b2db      	uxtb	r3, r3
 8007162:	2b20      	cmp	r3, #32
 8007164:	d112      	bne.n	800718c <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8007166:	68bb      	ldr	r3, [r7, #8]
 8007168:	2b00      	cmp	r3, #0
 800716a:	d002      	beq.n	8007172 <HAL_UART_Receive_IT+0x26>
 800716c:	88fb      	ldrh	r3, [r7, #6]
 800716e:	2b00      	cmp	r3, #0
 8007170:	d101      	bne.n	8007176 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8007172:	2301      	movs	r3, #1
 8007174:	e00b      	b.n	800718e <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	2200      	movs	r2, #0
 800717a:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800717c:	88fb      	ldrh	r3, [r7, #6]
 800717e:	461a      	mov	r2, r3
 8007180:	68b9      	ldr	r1, [r7, #8]
 8007182:	68f8      	ldr	r0, [r7, #12]
 8007184:	f000 faba 	bl	80076fc <UART_Start_Receive_IT>
 8007188:	4603      	mov	r3, r0
 800718a:	e000      	b.n	800718e <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800718c:	2302      	movs	r3, #2
  }
}
 800718e:	4618      	mov	r0, r3
 8007190:	3710      	adds	r7, #16
 8007192:	46bd      	mov	sp, r7
 8007194:	bd80      	pop	{r7, pc}
	...

08007198 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007198:	b580      	push	{r7, lr}
 800719a:	b0ba      	sub	sp, #232	@ 0xe8
 800719c:	af00      	add	r7, sp, #0
 800719e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	68db      	ldr	r3, [r3, #12]
 80071b0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	695b      	ldr	r3, [r3, #20]
 80071ba:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80071be:	2300      	movs	r3, #0
 80071c0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80071c4:	2300      	movs	r3, #0
 80071c6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80071ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80071ce:	f003 030f 	and.w	r3, r3, #15
 80071d2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80071d6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d10f      	bne.n	80071fe <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80071de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80071e2:	f003 0320 	and.w	r3, r3, #32
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d009      	beq.n	80071fe <HAL_UART_IRQHandler+0x66>
 80071ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80071ee:	f003 0320 	and.w	r3, r3, #32
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d003      	beq.n	80071fe <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80071f6:	6878      	ldr	r0, [r7, #4]
 80071f8:	f000 fb99 	bl	800792e <UART_Receive_IT>
      return;
 80071fc:	e25b      	b.n	80076b6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80071fe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007202:	2b00      	cmp	r3, #0
 8007204:	f000 80de 	beq.w	80073c4 <HAL_UART_IRQHandler+0x22c>
 8007208:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800720c:	f003 0301 	and.w	r3, r3, #1
 8007210:	2b00      	cmp	r3, #0
 8007212:	d106      	bne.n	8007222 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007214:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007218:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800721c:	2b00      	cmp	r3, #0
 800721e:	f000 80d1 	beq.w	80073c4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007222:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007226:	f003 0301 	and.w	r3, r3, #1
 800722a:	2b00      	cmp	r3, #0
 800722c:	d00b      	beq.n	8007246 <HAL_UART_IRQHandler+0xae>
 800722e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007232:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007236:	2b00      	cmp	r3, #0
 8007238:	d005      	beq.n	8007246 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800723e:	f043 0201 	orr.w	r2, r3, #1
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007246:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800724a:	f003 0304 	and.w	r3, r3, #4
 800724e:	2b00      	cmp	r3, #0
 8007250:	d00b      	beq.n	800726a <HAL_UART_IRQHandler+0xd2>
 8007252:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007256:	f003 0301 	and.w	r3, r3, #1
 800725a:	2b00      	cmp	r3, #0
 800725c:	d005      	beq.n	800726a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007262:	f043 0202 	orr.w	r2, r3, #2
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800726a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800726e:	f003 0302 	and.w	r3, r3, #2
 8007272:	2b00      	cmp	r3, #0
 8007274:	d00b      	beq.n	800728e <HAL_UART_IRQHandler+0xf6>
 8007276:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800727a:	f003 0301 	and.w	r3, r3, #1
 800727e:	2b00      	cmp	r3, #0
 8007280:	d005      	beq.n	800728e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007286:	f043 0204 	orr.w	r2, r3, #4
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800728e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007292:	f003 0308 	and.w	r3, r3, #8
 8007296:	2b00      	cmp	r3, #0
 8007298:	d011      	beq.n	80072be <HAL_UART_IRQHandler+0x126>
 800729a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800729e:	f003 0320 	and.w	r3, r3, #32
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d105      	bne.n	80072b2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80072a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80072aa:	f003 0301 	and.w	r3, r3, #1
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d005      	beq.n	80072be <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80072b6:	f043 0208 	orr.w	r2, r3, #8
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	f000 81f2 	beq.w	80076ac <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80072c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80072cc:	f003 0320 	and.w	r3, r3, #32
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d008      	beq.n	80072e6 <HAL_UART_IRQHandler+0x14e>
 80072d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80072d8:	f003 0320 	and.w	r3, r3, #32
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d002      	beq.n	80072e6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80072e0:	6878      	ldr	r0, [r7, #4]
 80072e2:	f000 fb24 	bl	800792e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	695b      	ldr	r3, [r3, #20]
 80072ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80072f0:	2b40      	cmp	r3, #64	@ 0x40
 80072f2:	bf0c      	ite	eq
 80072f4:	2301      	moveq	r3, #1
 80072f6:	2300      	movne	r3, #0
 80072f8:	b2db      	uxtb	r3, r3
 80072fa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007302:	f003 0308 	and.w	r3, r3, #8
 8007306:	2b00      	cmp	r3, #0
 8007308:	d103      	bne.n	8007312 <HAL_UART_IRQHandler+0x17a>
 800730a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800730e:	2b00      	cmp	r3, #0
 8007310:	d04f      	beq.n	80073b2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007312:	6878      	ldr	r0, [r7, #4]
 8007314:	f000 fa2c 	bl	8007770 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	695b      	ldr	r3, [r3, #20]
 800731e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007322:	2b40      	cmp	r3, #64	@ 0x40
 8007324:	d141      	bne.n	80073aa <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	3314      	adds	r3, #20
 800732c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007330:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007334:	e853 3f00 	ldrex	r3, [r3]
 8007338:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800733c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007340:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007344:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	3314      	adds	r3, #20
 800734e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007352:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007356:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800735a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800735e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007362:	e841 2300 	strex	r3, r2, [r1]
 8007366:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800736a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800736e:	2b00      	cmp	r3, #0
 8007370:	d1d9      	bne.n	8007326 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007376:	2b00      	cmp	r3, #0
 8007378:	d013      	beq.n	80073a2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800737e:	4a7e      	ldr	r2, [pc, #504]	@ (8007578 <HAL_UART_IRQHandler+0x3e0>)
 8007380:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007386:	4618      	mov	r0, r3
 8007388:	f7fd ff35 	bl	80051f6 <HAL_DMA_Abort_IT>
 800738c:	4603      	mov	r3, r0
 800738e:	2b00      	cmp	r3, #0
 8007390:	d016      	beq.n	80073c0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007396:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007398:	687a      	ldr	r2, [r7, #4]
 800739a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800739c:	4610      	mov	r0, r2
 800739e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80073a0:	e00e      	b.n	80073c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80073a2:	6878      	ldr	r0, [r7, #4]
 80073a4:	f000 f994 	bl	80076d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80073a8:	e00a      	b.n	80073c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80073aa:	6878      	ldr	r0, [r7, #4]
 80073ac:	f000 f990 	bl	80076d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80073b0:	e006      	b.n	80073c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80073b2:	6878      	ldr	r0, [r7, #4]
 80073b4:	f000 f98c 	bl	80076d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	2200      	movs	r2, #0
 80073bc:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80073be:	e175      	b.n	80076ac <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80073c0:	bf00      	nop
    return;
 80073c2:	e173      	b.n	80076ac <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80073c8:	2b01      	cmp	r3, #1
 80073ca:	f040 814f 	bne.w	800766c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80073ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80073d2:	f003 0310 	and.w	r3, r3, #16
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	f000 8148 	beq.w	800766c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80073dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80073e0:	f003 0310 	and.w	r3, r3, #16
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	f000 8141 	beq.w	800766c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80073ea:	2300      	movs	r3, #0
 80073ec:	60bb      	str	r3, [r7, #8]
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	60bb      	str	r3, [r7, #8]
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	685b      	ldr	r3, [r3, #4]
 80073fc:	60bb      	str	r3, [r7, #8]
 80073fe:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	695b      	ldr	r3, [r3, #20]
 8007406:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800740a:	2b40      	cmp	r3, #64	@ 0x40
 800740c:	f040 80b6 	bne.w	800757c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	685b      	ldr	r3, [r3, #4]
 8007418:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800741c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007420:	2b00      	cmp	r3, #0
 8007422:	f000 8145 	beq.w	80076b0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800742a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800742e:	429a      	cmp	r2, r3
 8007430:	f080 813e 	bcs.w	80076b0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800743a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007440:	69db      	ldr	r3, [r3, #28]
 8007442:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007446:	f000 8088 	beq.w	800755a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	330c      	adds	r3, #12
 8007450:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007454:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007458:	e853 3f00 	ldrex	r3, [r3]
 800745c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007460:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007464:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007468:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	330c      	adds	r3, #12
 8007472:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8007476:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800747a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800747e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007482:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007486:	e841 2300 	strex	r3, r2, [r1]
 800748a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800748e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007492:	2b00      	cmp	r3, #0
 8007494:	d1d9      	bne.n	800744a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	3314      	adds	r3, #20
 800749c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800749e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80074a0:	e853 3f00 	ldrex	r3, [r3]
 80074a4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80074a6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80074a8:	f023 0301 	bic.w	r3, r3, #1
 80074ac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	3314      	adds	r3, #20
 80074b6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80074ba:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80074be:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074c0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80074c2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80074c6:	e841 2300 	strex	r3, r2, [r1]
 80074ca:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80074cc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d1e1      	bne.n	8007496 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	3314      	adds	r3, #20
 80074d8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074da:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80074dc:	e853 3f00 	ldrex	r3, [r3]
 80074e0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80074e2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80074e4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80074e8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	3314      	adds	r3, #20
 80074f2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80074f6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80074f8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074fa:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80074fc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80074fe:	e841 2300 	strex	r3, r2, [r1]
 8007502:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007504:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007506:	2b00      	cmp	r3, #0
 8007508:	d1e3      	bne.n	80074d2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	2220      	movs	r2, #32
 800750e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	2200      	movs	r2, #0
 8007516:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	330c      	adds	r3, #12
 800751e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007520:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007522:	e853 3f00 	ldrex	r3, [r3]
 8007526:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007528:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800752a:	f023 0310 	bic.w	r3, r3, #16
 800752e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	330c      	adds	r3, #12
 8007538:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800753c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800753e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007540:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007542:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007544:	e841 2300 	strex	r3, r2, [r1]
 8007548:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800754a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800754c:	2b00      	cmp	r3, #0
 800754e:	d1e3      	bne.n	8007518 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007554:	4618      	mov	r0, r3
 8007556:	f7fd fdde 	bl	8005116 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	2202      	movs	r2, #2
 800755e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007568:	b29b      	uxth	r3, r3
 800756a:	1ad3      	subs	r3, r2, r3
 800756c:	b29b      	uxth	r3, r3
 800756e:	4619      	mov	r1, r3
 8007570:	6878      	ldr	r0, [r7, #4]
 8007572:	f000 f8b7 	bl	80076e4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007576:	e09b      	b.n	80076b0 <HAL_UART_IRQHandler+0x518>
 8007578:	08007837 	.word	0x08007837
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007584:	b29b      	uxth	r3, r3
 8007586:	1ad3      	subs	r3, r2, r3
 8007588:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007590:	b29b      	uxth	r3, r3
 8007592:	2b00      	cmp	r3, #0
 8007594:	f000 808e 	beq.w	80076b4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8007598:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800759c:	2b00      	cmp	r3, #0
 800759e:	f000 8089 	beq.w	80076b4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	330c      	adds	r3, #12
 80075a8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075ac:	e853 3f00 	ldrex	r3, [r3]
 80075b0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80075b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80075b4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80075b8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	330c      	adds	r3, #12
 80075c2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80075c6:	647a      	str	r2, [r7, #68]	@ 0x44
 80075c8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075ca:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80075cc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80075ce:	e841 2300 	strex	r3, r2, [r1]
 80075d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80075d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d1e3      	bne.n	80075a2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	3314      	adds	r3, #20
 80075e0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075e4:	e853 3f00 	ldrex	r3, [r3]
 80075e8:	623b      	str	r3, [r7, #32]
   return(result);
 80075ea:	6a3b      	ldr	r3, [r7, #32]
 80075ec:	f023 0301 	bic.w	r3, r3, #1
 80075f0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	3314      	adds	r3, #20
 80075fa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80075fe:	633a      	str	r2, [r7, #48]	@ 0x30
 8007600:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007602:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007604:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007606:	e841 2300 	strex	r3, r2, [r1]
 800760a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800760c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800760e:	2b00      	cmp	r3, #0
 8007610:	d1e3      	bne.n	80075da <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	2220      	movs	r2, #32
 8007616:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	2200      	movs	r2, #0
 800761e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	330c      	adds	r3, #12
 8007626:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007628:	693b      	ldr	r3, [r7, #16]
 800762a:	e853 3f00 	ldrex	r3, [r3]
 800762e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	f023 0310 	bic.w	r3, r3, #16
 8007636:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	330c      	adds	r3, #12
 8007640:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8007644:	61fa      	str	r2, [r7, #28]
 8007646:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007648:	69b9      	ldr	r1, [r7, #24]
 800764a:	69fa      	ldr	r2, [r7, #28]
 800764c:	e841 2300 	strex	r3, r2, [r1]
 8007650:	617b      	str	r3, [r7, #20]
   return(result);
 8007652:	697b      	ldr	r3, [r7, #20]
 8007654:	2b00      	cmp	r3, #0
 8007656:	d1e3      	bne.n	8007620 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	2202      	movs	r2, #2
 800765c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800765e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007662:	4619      	mov	r1, r3
 8007664:	6878      	ldr	r0, [r7, #4]
 8007666:	f000 f83d 	bl	80076e4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800766a:	e023      	b.n	80076b4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800766c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007670:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007674:	2b00      	cmp	r3, #0
 8007676:	d009      	beq.n	800768c <HAL_UART_IRQHandler+0x4f4>
 8007678:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800767c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007680:	2b00      	cmp	r3, #0
 8007682:	d003      	beq.n	800768c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8007684:	6878      	ldr	r0, [r7, #4]
 8007686:	f000 f8ea 	bl	800785e <UART_Transmit_IT>
    return;
 800768a:	e014      	b.n	80076b6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800768c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007690:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007694:	2b00      	cmp	r3, #0
 8007696:	d00e      	beq.n	80076b6 <HAL_UART_IRQHandler+0x51e>
 8007698:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800769c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d008      	beq.n	80076b6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80076a4:	6878      	ldr	r0, [r7, #4]
 80076a6:	f000 f92a 	bl	80078fe <UART_EndTransmit_IT>
    return;
 80076aa:	e004      	b.n	80076b6 <HAL_UART_IRQHandler+0x51e>
    return;
 80076ac:	bf00      	nop
 80076ae:	e002      	b.n	80076b6 <HAL_UART_IRQHandler+0x51e>
      return;
 80076b0:	bf00      	nop
 80076b2:	e000      	b.n	80076b6 <HAL_UART_IRQHandler+0x51e>
      return;
 80076b4:	bf00      	nop
  }
}
 80076b6:	37e8      	adds	r7, #232	@ 0xe8
 80076b8:	46bd      	mov	sp, r7
 80076ba:	bd80      	pop	{r7, pc}

080076bc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80076bc:	b480      	push	{r7}
 80076be:	b083      	sub	sp, #12
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80076c4:	bf00      	nop
 80076c6:	370c      	adds	r7, #12
 80076c8:	46bd      	mov	sp, r7
 80076ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ce:	4770      	bx	lr

080076d0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80076d0:	b480      	push	{r7}
 80076d2:	b083      	sub	sp, #12
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80076d8:	bf00      	nop
 80076da:	370c      	adds	r7, #12
 80076dc:	46bd      	mov	sp, r7
 80076de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e2:	4770      	bx	lr

080076e4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80076e4:	b480      	push	{r7}
 80076e6:	b083      	sub	sp, #12
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	6078      	str	r0, [r7, #4]
 80076ec:	460b      	mov	r3, r1
 80076ee:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80076f0:	bf00      	nop
 80076f2:	370c      	adds	r7, #12
 80076f4:	46bd      	mov	sp, r7
 80076f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fa:	4770      	bx	lr

080076fc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80076fc:	b480      	push	{r7}
 80076fe:	b085      	sub	sp, #20
 8007700:	af00      	add	r7, sp, #0
 8007702:	60f8      	str	r0, [r7, #12]
 8007704:	60b9      	str	r1, [r7, #8]
 8007706:	4613      	mov	r3, r2
 8007708:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	68ba      	ldr	r2, [r7, #8]
 800770e:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	88fa      	ldrh	r2, [r7, #6]
 8007714:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	88fa      	ldrh	r2, [r7, #6]
 800771a:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	2200      	movs	r2, #0
 8007720:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	2222      	movs	r2, #34	@ 0x22
 8007726:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	691b      	ldr	r3, [r3, #16]
 800772e:	2b00      	cmp	r3, #0
 8007730:	d007      	beq.n	8007742 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	68da      	ldr	r2, [r3, #12]
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007740:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	695a      	ldr	r2, [r3, #20]
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	f042 0201 	orr.w	r2, r2, #1
 8007750:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	68da      	ldr	r2, [r3, #12]
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	f042 0220 	orr.w	r2, r2, #32
 8007760:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007762:	2300      	movs	r3, #0
}
 8007764:	4618      	mov	r0, r3
 8007766:	3714      	adds	r7, #20
 8007768:	46bd      	mov	sp, r7
 800776a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776e:	4770      	bx	lr

08007770 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007770:	b480      	push	{r7}
 8007772:	b095      	sub	sp, #84	@ 0x54
 8007774:	af00      	add	r7, sp, #0
 8007776:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	330c      	adds	r3, #12
 800777e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007780:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007782:	e853 3f00 	ldrex	r3, [r3]
 8007786:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007788:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800778a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800778e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	330c      	adds	r3, #12
 8007796:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007798:	643a      	str	r2, [r7, #64]	@ 0x40
 800779a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800779c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800779e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80077a0:	e841 2300 	strex	r3, r2, [r1]
 80077a4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80077a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d1e5      	bne.n	8007778 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	3314      	adds	r3, #20
 80077b2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077b4:	6a3b      	ldr	r3, [r7, #32]
 80077b6:	e853 3f00 	ldrex	r3, [r3]
 80077ba:	61fb      	str	r3, [r7, #28]
   return(result);
 80077bc:	69fb      	ldr	r3, [r7, #28]
 80077be:	f023 0301 	bic.w	r3, r3, #1
 80077c2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	3314      	adds	r3, #20
 80077ca:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80077cc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80077ce:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077d0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80077d2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80077d4:	e841 2300 	strex	r3, r2, [r1]
 80077d8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80077da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d1e5      	bne.n	80077ac <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80077e4:	2b01      	cmp	r3, #1
 80077e6:	d119      	bne.n	800781c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	330c      	adds	r3, #12
 80077ee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	e853 3f00 	ldrex	r3, [r3]
 80077f6:	60bb      	str	r3, [r7, #8]
   return(result);
 80077f8:	68bb      	ldr	r3, [r7, #8]
 80077fa:	f023 0310 	bic.w	r3, r3, #16
 80077fe:	647b      	str	r3, [r7, #68]	@ 0x44
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	330c      	adds	r3, #12
 8007806:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007808:	61ba      	str	r2, [r7, #24]
 800780a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800780c:	6979      	ldr	r1, [r7, #20]
 800780e:	69ba      	ldr	r2, [r7, #24]
 8007810:	e841 2300 	strex	r3, r2, [r1]
 8007814:	613b      	str	r3, [r7, #16]
   return(result);
 8007816:	693b      	ldr	r3, [r7, #16]
 8007818:	2b00      	cmp	r3, #0
 800781a:	d1e5      	bne.n	80077e8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	2220      	movs	r2, #32
 8007820:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	2200      	movs	r2, #0
 8007828:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800782a:	bf00      	nop
 800782c:	3754      	adds	r7, #84	@ 0x54
 800782e:	46bd      	mov	sp, r7
 8007830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007834:	4770      	bx	lr

08007836 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007836:	b580      	push	{r7, lr}
 8007838:	b084      	sub	sp, #16
 800783a:	af00      	add	r7, sp, #0
 800783c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007842:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	2200      	movs	r2, #0
 8007848:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	2200      	movs	r2, #0
 800784e:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007850:	68f8      	ldr	r0, [r7, #12]
 8007852:	f7ff ff3d 	bl	80076d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007856:	bf00      	nop
 8007858:	3710      	adds	r7, #16
 800785a:	46bd      	mov	sp, r7
 800785c:	bd80      	pop	{r7, pc}

0800785e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800785e:	b480      	push	{r7}
 8007860:	b085      	sub	sp, #20
 8007862:	af00      	add	r7, sp, #0
 8007864:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800786c:	b2db      	uxtb	r3, r3
 800786e:	2b21      	cmp	r3, #33	@ 0x21
 8007870:	d13e      	bne.n	80078f0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	689b      	ldr	r3, [r3, #8]
 8007876:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800787a:	d114      	bne.n	80078a6 <UART_Transmit_IT+0x48>
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	691b      	ldr	r3, [r3, #16]
 8007880:	2b00      	cmp	r3, #0
 8007882:	d110      	bne.n	80078a6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	6a1b      	ldr	r3, [r3, #32]
 8007888:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	881b      	ldrh	r3, [r3, #0]
 800788e:	461a      	mov	r2, r3
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007898:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	6a1b      	ldr	r3, [r3, #32]
 800789e:	1c9a      	adds	r2, r3, #2
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	621a      	str	r2, [r3, #32]
 80078a4:	e008      	b.n	80078b8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	6a1b      	ldr	r3, [r3, #32]
 80078aa:	1c59      	adds	r1, r3, #1
 80078ac:	687a      	ldr	r2, [r7, #4]
 80078ae:	6211      	str	r1, [r2, #32]
 80078b0:	781a      	ldrb	r2, [r3, #0]
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80078bc:	b29b      	uxth	r3, r3
 80078be:	3b01      	subs	r3, #1
 80078c0:	b29b      	uxth	r3, r3
 80078c2:	687a      	ldr	r2, [r7, #4]
 80078c4:	4619      	mov	r1, r3
 80078c6:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d10f      	bne.n	80078ec <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	68da      	ldr	r2, [r3, #12]
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80078da:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	68da      	ldr	r2, [r3, #12]
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80078ea:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80078ec:	2300      	movs	r3, #0
 80078ee:	e000      	b.n	80078f2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80078f0:	2302      	movs	r3, #2
  }
}
 80078f2:	4618      	mov	r0, r3
 80078f4:	3714      	adds	r7, #20
 80078f6:	46bd      	mov	sp, r7
 80078f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078fc:	4770      	bx	lr

080078fe <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80078fe:	b580      	push	{r7, lr}
 8007900:	b082      	sub	sp, #8
 8007902:	af00      	add	r7, sp, #0
 8007904:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	68da      	ldr	r2, [r3, #12]
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007914:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	2220      	movs	r2, #32
 800791a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800791e:	6878      	ldr	r0, [r7, #4]
 8007920:	f7ff fecc 	bl	80076bc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007924:	2300      	movs	r3, #0
}
 8007926:	4618      	mov	r0, r3
 8007928:	3708      	adds	r7, #8
 800792a:	46bd      	mov	sp, r7
 800792c:	bd80      	pop	{r7, pc}

0800792e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800792e:	b580      	push	{r7, lr}
 8007930:	b08c      	sub	sp, #48	@ 0x30
 8007932:	af00      	add	r7, sp, #0
 8007934:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800793c:	b2db      	uxtb	r3, r3
 800793e:	2b22      	cmp	r3, #34	@ 0x22
 8007940:	f040 80ae 	bne.w	8007aa0 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	689b      	ldr	r3, [r3, #8]
 8007948:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800794c:	d117      	bne.n	800797e <UART_Receive_IT+0x50>
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	691b      	ldr	r3, [r3, #16]
 8007952:	2b00      	cmp	r3, #0
 8007954:	d113      	bne.n	800797e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007956:	2300      	movs	r3, #0
 8007958:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800795e:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	685b      	ldr	r3, [r3, #4]
 8007966:	b29b      	uxth	r3, r3
 8007968:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800796c:	b29a      	uxth	r2, r3
 800796e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007970:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007976:	1c9a      	adds	r2, r3, #2
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	629a      	str	r2, [r3, #40]	@ 0x28
 800797c:	e026      	b.n	80079cc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007982:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8007984:	2300      	movs	r3, #0
 8007986:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	689b      	ldr	r3, [r3, #8]
 800798c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007990:	d007      	beq.n	80079a2 <UART_Receive_IT+0x74>
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	689b      	ldr	r3, [r3, #8]
 8007996:	2b00      	cmp	r3, #0
 8007998:	d10a      	bne.n	80079b0 <UART_Receive_IT+0x82>
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	691b      	ldr	r3, [r3, #16]
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d106      	bne.n	80079b0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	685b      	ldr	r3, [r3, #4]
 80079a8:	b2da      	uxtb	r2, r3
 80079aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079ac:	701a      	strb	r2, [r3, #0]
 80079ae:	e008      	b.n	80079c2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	685b      	ldr	r3, [r3, #4]
 80079b6:	b2db      	uxtb	r3, r3
 80079b8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80079bc:	b2da      	uxtb	r2, r3
 80079be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079c0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079c6:	1c5a      	adds	r2, r3, #1
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80079d0:	b29b      	uxth	r3, r3
 80079d2:	3b01      	subs	r3, #1
 80079d4:	b29b      	uxth	r3, r3
 80079d6:	687a      	ldr	r2, [r7, #4]
 80079d8:	4619      	mov	r1, r3
 80079da:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d15d      	bne.n	8007a9c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	68da      	ldr	r2, [r3, #12]
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	f022 0220 	bic.w	r2, r2, #32
 80079ee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	68da      	ldr	r2, [r3, #12]
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80079fe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	695a      	ldr	r2, [r3, #20]
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	f022 0201 	bic.w	r2, r2, #1
 8007a0e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	2220      	movs	r2, #32
 8007a14:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	2200      	movs	r2, #0
 8007a1c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a22:	2b01      	cmp	r3, #1
 8007a24:	d135      	bne.n	8007a92 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	2200      	movs	r2, #0
 8007a2a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	330c      	adds	r3, #12
 8007a32:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a34:	697b      	ldr	r3, [r7, #20]
 8007a36:	e853 3f00 	ldrex	r3, [r3]
 8007a3a:	613b      	str	r3, [r7, #16]
   return(result);
 8007a3c:	693b      	ldr	r3, [r7, #16]
 8007a3e:	f023 0310 	bic.w	r3, r3, #16
 8007a42:	627b      	str	r3, [r7, #36]	@ 0x24
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	330c      	adds	r3, #12
 8007a4a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007a4c:	623a      	str	r2, [r7, #32]
 8007a4e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a50:	69f9      	ldr	r1, [r7, #28]
 8007a52:	6a3a      	ldr	r2, [r7, #32]
 8007a54:	e841 2300 	strex	r3, r2, [r1]
 8007a58:	61bb      	str	r3, [r7, #24]
   return(result);
 8007a5a:	69bb      	ldr	r3, [r7, #24]
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d1e5      	bne.n	8007a2c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	f003 0310 	and.w	r3, r3, #16
 8007a6a:	2b10      	cmp	r3, #16
 8007a6c:	d10a      	bne.n	8007a84 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007a6e:	2300      	movs	r3, #0
 8007a70:	60fb      	str	r3, [r7, #12]
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	60fb      	str	r3, [r7, #12]
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	685b      	ldr	r3, [r3, #4]
 8007a80:	60fb      	str	r3, [r7, #12]
 8007a82:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007a88:	4619      	mov	r1, r3
 8007a8a:	6878      	ldr	r0, [r7, #4]
 8007a8c:	f7ff fe2a 	bl	80076e4 <HAL_UARTEx_RxEventCallback>
 8007a90:	e002      	b.n	8007a98 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007a92:	6878      	ldr	r0, [r7, #4]
 8007a94:	f7fb fdd6 	bl	8003644 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007a98:	2300      	movs	r3, #0
 8007a9a:	e002      	b.n	8007aa2 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8007a9c:	2300      	movs	r3, #0
 8007a9e:	e000      	b.n	8007aa2 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8007aa0:	2302      	movs	r3, #2
  }
}
 8007aa2:	4618      	mov	r0, r3
 8007aa4:	3730      	adds	r7, #48	@ 0x30
 8007aa6:	46bd      	mov	sp, r7
 8007aa8:	bd80      	pop	{r7, pc}
	...

08007aac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007aac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007ab0:	b0c0      	sub	sp, #256	@ 0x100
 8007ab2:	af00      	add	r7, sp, #0
 8007ab4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007ab8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	691b      	ldr	r3, [r3, #16]
 8007ac0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8007ac4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ac8:	68d9      	ldr	r1, [r3, #12]
 8007aca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ace:	681a      	ldr	r2, [r3, #0]
 8007ad0:	ea40 0301 	orr.w	r3, r0, r1
 8007ad4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007ad6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ada:	689a      	ldr	r2, [r3, #8]
 8007adc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ae0:	691b      	ldr	r3, [r3, #16]
 8007ae2:	431a      	orrs	r2, r3
 8007ae4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ae8:	695b      	ldr	r3, [r3, #20]
 8007aea:	431a      	orrs	r2, r3
 8007aec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007af0:	69db      	ldr	r3, [r3, #28]
 8007af2:	4313      	orrs	r3, r2
 8007af4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007af8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	68db      	ldr	r3, [r3, #12]
 8007b00:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8007b04:	f021 010c 	bic.w	r1, r1, #12
 8007b08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b0c:	681a      	ldr	r2, [r3, #0]
 8007b0e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007b12:	430b      	orrs	r3, r1
 8007b14:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007b16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	695b      	ldr	r3, [r3, #20]
 8007b1e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8007b22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b26:	6999      	ldr	r1, [r3, #24]
 8007b28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b2c:	681a      	ldr	r2, [r3, #0]
 8007b2e:	ea40 0301 	orr.w	r3, r0, r1
 8007b32:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007b34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b38:	681a      	ldr	r2, [r3, #0]
 8007b3a:	4b8f      	ldr	r3, [pc, #572]	@ (8007d78 <UART_SetConfig+0x2cc>)
 8007b3c:	429a      	cmp	r2, r3
 8007b3e:	d005      	beq.n	8007b4c <UART_SetConfig+0xa0>
 8007b40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b44:	681a      	ldr	r2, [r3, #0]
 8007b46:	4b8d      	ldr	r3, [pc, #564]	@ (8007d7c <UART_SetConfig+0x2d0>)
 8007b48:	429a      	cmp	r2, r3
 8007b4a:	d104      	bne.n	8007b56 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007b4c:	f7fe f9fa 	bl	8005f44 <HAL_RCC_GetPCLK2Freq>
 8007b50:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8007b54:	e003      	b.n	8007b5e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007b56:	f7fe f9e1 	bl	8005f1c <HAL_RCC_GetPCLK1Freq>
 8007b5a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007b5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b62:	69db      	ldr	r3, [r3, #28]
 8007b64:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007b68:	f040 810c 	bne.w	8007d84 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007b6c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007b70:	2200      	movs	r2, #0
 8007b72:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007b76:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8007b7a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8007b7e:	4622      	mov	r2, r4
 8007b80:	462b      	mov	r3, r5
 8007b82:	1891      	adds	r1, r2, r2
 8007b84:	65b9      	str	r1, [r7, #88]	@ 0x58
 8007b86:	415b      	adcs	r3, r3
 8007b88:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007b8a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8007b8e:	4621      	mov	r1, r4
 8007b90:	eb12 0801 	adds.w	r8, r2, r1
 8007b94:	4629      	mov	r1, r5
 8007b96:	eb43 0901 	adc.w	r9, r3, r1
 8007b9a:	f04f 0200 	mov.w	r2, #0
 8007b9e:	f04f 0300 	mov.w	r3, #0
 8007ba2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007ba6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007baa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007bae:	4690      	mov	r8, r2
 8007bb0:	4699      	mov	r9, r3
 8007bb2:	4623      	mov	r3, r4
 8007bb4:	eb18 0303 	adds.w	r3, r8, r3
 8007bb8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007bbc:	462b      	mov	r3, r5
 8007bbe:	eb49 0303 	adc.w	r3, r9, r3
 8007bc2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007bc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007bca:	685b      	ldr	r3, [r3, #4]
 8007bcc:	2200      	movs	r2, #0
 8007bce:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007bd2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8007bd6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007bda:	460b      	mov	r3, r1
 8007bdc:	18db      	adds	r3, r3, r3
 8007bde:	653b      	str	r3, [r7, #80]	@ 0x50
 8007be0:	4613      	mov	r3, r2
 8007be2:	eb42 0303 	adc.w	r3, r2, r3
 8007be6:	657b      	str	r3, [r7, #84]	@ 0x54
 8007be8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8007bec:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8007bf0:	f7f8 fb3e 	bl	8000270 <__aeabi_uldivmod>
 8007bf4:	4602      	mov	r2, r0
 8007bf6:	460b      	mov	r3, r1
 8007bf8:	4b61      	ldr	r3, [pc, #388]	@ (8007d80 <UART_SetConfig+0x2d4>)
 8007bfa:	fba3 2302 	umull	r2, r3, r3, r2
 8007bfe:	095b      	lsrs	r3, r3, #5
 8007c00:	011c      	lsls	r4, r3, #4
 8007c02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007c06:	2200      	movs	r2, #0
 8007c08:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007c0c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8007c10:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8007c14:	4642      	mov	r2, r8
 8007c16:	464b      	mov	r3, r9
 8007c18:	1891      	adds	r1, r2, r2
 8007c1a:	64b9      	str	r1, [r7, #72]	@ 0x48
 8007c1c:	415b      	adcs	r3, r3
 8007c1e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007c20:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007c24:	4641      	mov	r1, r8
 8007c26:	eb12 0a01 	adds.w	sl, r2, r1
 8007c2a:	4649      	mov	r1, r9
 8007c2c:	eb43 0b01 	adc.w	fp, r3, r1
 8007c30:	f04f 0200 	mov.w	r2, #0
 8007c34:	f04f 0300 	mov.w	r3, #0
 8007c38:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007c3c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007c40:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007c44:	4692      	mov	sl, r2
 8007c46:	469b      	mov	fp, r3
 8007c48:	4643      	mov	r3, r8
 8007c4a:	eb1a 0303 	adds.w	r3, sl, r3
 8007c4e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007c52:	464b      	mov	r3, r9
 8007c54:	eb4b 0303 	adc.w	r3, fp, r3
 8007c58:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007c5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c60:	685b      	ldr	r3, [r3, #4]
 8007c62:	2200      	movs	r2, #0
 8007c64:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007c68:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8007c6c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007c70:	460b      	mov	r3, r1
 8007c72:	18db      	adds	r3, r3, r3
 8007c74:	643b      	str	r3, [r7, #64]	@ 0x40
 8007c76:	4613      	mov	r3, r2
 8007c78:	eb42 0303 	adc.w	r3, r2, r3
 8007c7c:	647b      	str	r3, [r7, #68]	@ 0x44
 8007c7e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8007c82:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8007c86:	f7f8 faf3 	bl	8000270 <__aeabi_uldivmod>
 8007c8a:	4602      	mov	r2, r0
 8007c8c:	460b      	mov	r3, r1
 8007c8e:	4611      	mov	r1, r2
 8007c90:	4b3b      	ldr	r3, [pc, #236]	@ (8007d80 <UART_SetConfig+0x2d4>)
 8007c92:	fba3 2301 	umull	r2, r3, r3, r1
 8007c96:	095b      	lsrs	r3, r3, #5
 8007c98:	2264      	movs	r2, #100	@ 0x64
 8007c9a:	fb02 f303 	mul.w	r3, r2, r3
 8007c9e:	1acb      	subs	r3, r1, r3
 8007ca0:	00db      	lsls	r3, r3, #3
 8007ca2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8007ca6:	4b36      	ldr	r3, [pc, #216]	@ (8007d80 <UART_SetConfig+0x2d4>)
 8007ca8:	fba3 2302 	umull	r2, r3, r3, r2
 8007cac:	095b      	lsrs	r3, r3, #5
 8007cae:	005b      	lsls	r3, r3, #1
 8007cb0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8007cb4:	441c      	add	r4, r3
 8007cb6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007cba:	2200      	movs	r2, #0
 8007cbc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007cc0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8007cc4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8007cc8:	4642      	mov	r2, r8
 8007cca:	464b      	mov	r3, r9
 8007ccc:	1891      	adds	r1, r2, r2
 8007cce:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007cd0:	415b      	adcs	r3, r3
 8007cd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007cd4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007cd8:	4641      	mov	r1, r8
 8007cda:	1851      	adds	r1, r2, r1
 8007cdc:	6339      	str	r1, [r7, #48]	@ 0x30
 8007cde:	4649      	mov	r1, r9
 8007ce0:	414b      	adcs	r3, r1
 8007ce2:	637b      	str	r3, [r7, #52]	@ 0x34
 8007ce4:	f04f 0200 	mov.w	r2, #0
 8007ce8:	f04f 0300 	mov.w	r3, #0
 8007cec:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8007cf0:	4659      	mov	r1, fp
 8007cf2:	00cb      	lsls	r3, r1, #3
 8007cf4:	4651      	mov	r1, sl
 8007cf6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007cfa:	4651      	mov	r1, sl
 8007cfc:	00ca      	lsls	r2, r1, #3
 8007cfe:	4610      	mov	r0, r2
 8007d00:	4619      	mov	r1, r3
 8007d02:	4603      	mov	r3, r0
 8007d04:	4642      	mov	r2, r8
 8007d06:	189b      	adds	r3, r3, r2
 8007d08:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007d0c:	464b      	mov	r3, r9
 8007d0e:	460a      	mov	r2, r1
 8007d10:	eb42 0303 	adc.w	r3, r2, r3
 8007d14:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007d18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d1c:	685b      	ldr	r3, [r3, #4]
 8007d1e:	2200      	movs	r2, #0
 8007d20:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007d24:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8007d28:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007d2c:	460b      	mov	r3, r1
 8007d2e:	18db      	adds	r3, r3, r3
 8007d30:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007d32:	4613      	mov	r3, r2
 8007d34:	eb42 0303 	adc.w	r3, r2, r3
 8007d38:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007d3a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007d3e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8007d42:	f7f8 fa95 	bl	8000270 <__aeabi_uldivmod>
 8007d46:	4602      	mov	r2, r0
 8007d48:	460b      	mov	r3, r1
 8007d4a:	4b0d      	ldr	r3, [pc, #52]	@ (8007d80 <UART_SetConfig+0x2d4>)
 8007d4c:	fba3 1302 	umull	r1, r3, r3, r2
 8007d50:	095b      	lsrs	r3, r3, #5
 8007d52:	2164      	movs	r1, #100	@ 0x64
 8007d54:	fb01 f303 	mul.w	r3, r1, r3
 8007d58:	1ad3      	subs	r3, r2, r3
 8007d5a:	00db      	lsls	r3, r3, #3
 8007d5c:	3332      	adds	r3, #50	@ 0x32
 8007d5e:	4a08      	ldr	r2, [pc, #32]	@ (8007d80 <UART_SetConfig+0x2d4>)
 8007d60:	fba2 2303 	umull	r2, r3, r2, r3
 8007d64:	095b      	lsrs	r3, r3, #5
 8007d66:	f003 0207 	and.w	r2, r3, #7
 8007d6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	4422      	add	r2, r4
 8007d72:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007d74:	e106      	b.n	8007f84 <UART_SetConfig+0x4d8>
 8007d76:	bf00      	nop
 8007d78:	40011000 	.word	0x40011000
 8007d7c:	40011400 	.word	0x40011400
 8007d80:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007d84:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007d88:	2200      	movs	r2, #0
 8007d8a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007d8e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8007d92:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8007d96:	4642      	mov	r2, r8
 8007d98:	464b      	mov	r3, r9
 8007d9a:	1891      	adds	r1, r2, r2
 8007d9c:	6239      	str	r1, [r7, #32]
 8007d9e:	415b      	adcs	r3, r3
 8007da0:	627b      	str	r3, [r7, #36]	@ 0x24
 8007da2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007da6:	4641      	mov	r1, r8
 8007da8:	1854      	adds	r4, r2, r1
 8007daa:	4649      	mov	r1, r9
 8007dac:	eb43 0501 	adc.w	r5, r3, r1
 8007db0:	f04f 0200 	mov.w	r2, #0
 8007db4:	f04f 0300 	mov.w	r3, #0
 8007db8:	00eb      	lsls	r3, r5, #3
 8007dba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007dbe:	00e2      	lsls	r2, r4, #3
 8007dc0:	4614      	mov	r4, r2
 8007dc2:	461d      	mov	r5, r3
 8007dc4:	4643      	mov	r3, r8
 8007dc6:	18e3      	adds	r3, r4, r3
 8007dc8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007dcc:	464b      	mov	r3, r9
 8007dce:	eb45 0303 	adc.w	r3, r5, r3
 8007dd2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007dd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007dda:	685b      	ldr	r3, [r3, #4]
 8007ddc:	2200      	movs	r2, #0
 8007dde:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007de2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007de6:	f04f 0200 	mov.w	r2, #0
 8007dea:	f04f 0300 	mov.w	r3, #0
 8007dee:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8007df2:	4629      	mov	r1, r5
 8007df4:	008b      	lsls	r3, r1, #2
 8007df6:	4621      	mov	r1, r4
 8007df8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007dfc:	4621      	mov	r1, r4
 8007dfe:	008a      	lsls	r2, r1, #2
 8007e00:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8007e04:	f7f8 fa34 	bl	8000270 <__aeabi_uldivmod>
 8007e08:	4602      	mov	r2, r0
 8007e0a:	460b      	mov	r3, r1
 8007e0c:	4b60      	ldr	r3, [pc, #384]	@ (8007f90 <UART_SetConfig+0x4e4>)
 8007e0e:	fba3 2302 	umull	r2, r3, r3, r2
 8007e12:	095b      	lsrs	r3, r3, #5
 8007e14:	011c      	lsls	r4, r3, #4
 8007e16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007e1a:	2200      	movs	r2, #0
 8007e1c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007e20:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007e24:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8007e28:	4642      	mov	r2, r8
 8007e2a:	464b      	mov	r3, r9
 8007e2c:	1891      	adds	r1, r2, r2
 8007e2e:	61b9      	str	r1, [r7, #24]
 8007e30:	415b      	adcs	r3, r3
 8007e32:	61fb      	str	r3, [r7, #28]
 8007e34:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007e38:	4641      	mov	r1, r8
 8007e3a:	1851      	adds	r1, r2, r1
 8007e3c:	6139      	str	r1, [r7, #16]
 8007e3e:	4649      	mov	r1, r9
 8007e40:	414b      	adcs	r3, r1
 8007e42:	617b      	str	r3, [r7, #20]
 8007e44:	f04f 0200 	mov.w	r2, #0
 8007e48:	f04f 0300 	mov.w	r3, #0
 8007e4c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007e50:	4659      	mov	r1, fp
 8007e52:	00cb      	lsls	r3, r1, #3
 8007e54:	4651      	mov	r1, sl
 8007e56:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007e5a:	4651      	mov	r1, sl
 8007e5c:	00ca      	lsls	r2, r1, #3
 8007e5e:	4610      	mov	r0, r2
 8007e60:	4619      	mov	r1, r3
 8007e62:	4603      	mov	r3, r0
 8007e64:	4642      	mov	r2, r8
 8007e66:	189b      	adds	r3, r3, r2
 8007e68:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007e6c:	464b      	mov	r3, r9
 8007e6e:	460a      	mov	r2, r1
 8007e70:	eb42 0303 	adc.w	r3, r2, r3
 8007e74:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007e78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007e7c:	685b      	ldr	r3, [r3, #4]
 8007e7e:	2200      	movs	r2, #0
 8007e80:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007e82:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007e84:	f04f 0200 	mov.w	r2, #0
 8007e88:	f04f 0300 	mov.w	r3, #0
 8007e8c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8007e90:	4649      	mov	r1, r9
 8007e92:	008b      	lsls	r3, r1, #2
 8007e94:	4641      	mov	r1, r8
 8007e96:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007e9a:	4641      	mov	r1, r8
 8007e9c:	008a      	lsls	r2, r1, #2
 8007e9e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8007ea2:	f7f8 f9e5 	bl	8000270 <__aeabi_uldivmod>
 8007ea6:	4602      	mov	r2, r0
 8007ea8:	460b      	mov	r3, r1
 8007eaa:	4611      	mov	r1, r2
 8007eac:	4b38      	ldr	r3, [pc, #224]	@ (8007f90 <UART_SetConfig+0x4e4>)
 8007eae:	fba3 2301 	umull	r2, r3, r3, r1
 8007eb2:	095b      	lsrs	r3, r3, #5
 8007eb4:	2264      	movs	r2, #100	@ 0x64
 8007eb6:	fb02 f303 	mul.w	r3, r2, r3
 8007eba:	1acb      	subs	r3, r1, r3
 8007ebc:	011b      	lsls	r3, r3, #4
 8007ebe:	3332      	adds	r3, #50	@ 0x32
 8007ec0:	4a33      	ldr	r2, [pc, #204]	@ (8007f90 <UART_SetConfig+0x4e4>)
 8007ec2:	fba2 2303 	umull	r2, r3, r2, r3
 8007ec6:	095b      	lsrs	r3, r3, #5
 8007ec8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007ecc:	441c      	add	r4, r3
 8007ece:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007ed2:	2200      	movs	r2, #0
 8007ed4:	673b      	str	r3, [r7, #112]	@ 0x70
 8007ed6:	677a      	str	r2, [r7, #116]	@ 0x74
 8007ed8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8007edc:	4642      	mov	r2, r8
 8007ede:	464b      	mov	r3, r9
 8007ee0:	1891      	adds	r1, r2, r2
 8007ee2:	60b9      	str	r1, [r7, #8]
 8007ee4:	415b      	adcs	r3, r3
 8007ee6:	60fb      	str	r3, [r7, #12]
 8007ee8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007eec:	4641      	mov	r1, r8
 8007eee:	1851      	adds	r1, r2, r1
 8007ef0:	6039      	str	r1, [r7, #0]
 8007ef2:	4649      	mov	r1, r9
 8007ef4:	414b      	adcs	r3, r1
 8007ef6:	607b      	str	r3, [r7, #4]
 8007ef8:	f04f 0200 	mov.w	r2, #0
 8007efc:	f04f 0300 	mov.w	r3, #0
 8007f00:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007f04:	4659      	mov	r1, fp
 8007f06:	00cb      	lsls	r3, r1, #3
 8007f08:	4651      	mov	r1, sl
 8007f0a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007f0e:	4651      	mov	r1, sl
 8007f10:	00ca      	lsls	r2, r1, #3
 8007f12:	4610      	mov	r0, r2
 8007f14:	4619      	mov	r1, r3
 8007f16:	4603      	mov	r3, r0
 8007f18:	4642      	mov	r2, r8
 8007f1a:	189b      	adds	r3, r3, r2
 8007f1c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007f1e:	464b      	mov	r3, r9
 8007f20:	460a      	mov	r2, r1
 8007f22:	eb42 0303 	adc.w	r3, r2, r3
 8007f26:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007f28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f2c:	685b      	ldr	r3, [r3, #4]
 8007f2e:	2200      	movs	r2, #0
 8007f30:	663b      	str	r3, [r7, #96]	@ 0x60
 8007f32:	667a      	str	r2, [r7, #100]	@ 0x64
 8007f34:	f04f 0200 	mov.w	r2, #0
 8007f38:	f04f 0300 	mov.w	r3, #0
 8007f3c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8007f40:	4649      	mov	r1, r9
 8007f42:	008b      	lsls	r3, r1, #2
 8007f44:	4641      	mov	r1, r8
 8007f46:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007f4a:	4641      	mov	r1, r8
 8007f4c:	008a      	lsls	r2, r1, #2
 8007f4e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8007f52:	f7f8 f98d 	bl	8000270 <__aeabi_uldivmod>
 8007f56:	4602      	mov	r2, r0
 8007f58:	460b      	mov	r3, r1
 8007f5a:	4b0d      	ldr	r3, [pc, #52]	@ (8007f90 <UART_SetConfig+0x4e4>)
 8007f5c:	fba3 1302 	umull	r1, r3, r3, r2
 8007f60:	095b      	lsrs	r3, r3, #5
 8007f62:	2164      	movs	r1, #100	@ 0x64
 8007f64:	fb01 f303 	mul.w	r3, r1, r3
 8007f68:	1ad3      	subs	r3, r2, r3
 8007f6a:	011b      	lsls	r3, r3, #4
 8007f6c:	3332      	adds	r3, #50	@ 0x32
 8007f6e:	4a08      	ldr	r2, [pc, #32]	@ (8007f90 <UART_SetConfig+0x4e4>)
 8007f70:	fba2 2303 	umull	r2, r3, r2, r3
 8007f74:	095b      	lsrs	r3, r3, #5
 8007f76:	f003 020f 	and.w	r2, r3, #15
 8007f7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	4422      	add	r2, r4
 8007f82:	609a      	str	r2, [r3, #8]
}
 8007f84:	bf00      	nop
 8007f86:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8007f8a:	46bd      	mov	sp, r7
 8007f8c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007f90:	51eb851f 	.word	0x51eb851f

08007f94 <siprintf>:
 8007f94:	b40e      	push	{r1, r2, r3}
 8007f96:	b500      	push	{lr}
 8007f98:	b09c      	sub	sp, #112	@ 0x70
 8007f9a:	ab1d      	add	r3, sp, #116	@ 0x74
 8007f9c:	9002      	str	r0, [sp, #8]
 8007f9e:	9006      	str	r0, [sp, #24]
 8007fa0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007fa4:	4809      	ldr	r0, [pc, #36]	@ (8007fcc <siprintf+0x38>)
 8007fa6:	9107      	str	r1, [sp, #28]
 8007fa8:	9104      	str	r1, [sp, #16]
 8007faa:	4909      	ldr	r1, [pc, #36]	@ (8007fd0 <siprintf+0x3c>)
 8007fac:	f853 2b04 	ldr.w	r2, [r3], #4
 8007fb0:	9105      	str	r1, [sp, #20]
 8007fb2:	6800      	ldr	r0, [r0, #0]
 8007fb4:	9301      	str	r3, [sp, #4]
 8007fb6:	a902      	add	r1, sp, #8
 8007fb8:	f000 f994 	bl	80082e4 <_svfiprintf_r>
 8007fbc:	9b02      	ldr	r3, [sp, #8]
 8007fbe:	2200      	movs	r2, #0
 8007fc0:	701a      	strb	r2, [r3, #0]
 8007fc2:	b01c      	add	sp, #112	@ 0x70
 8007fc4:	f85d eb04 	ldr.w	lr, [sp], #4
 8007fc8:	b003      	add	sp, #12
 8007fca:	4770      	bx	lr
 8007fcc:	20000168 	.word	0x20000168
 8007fd0:	ffff0208 	.word	0xffff0208

08007fd4 <memset>:
 8007fd4:	4402      	add	r2, r0
 8007fd6:	4603      	mov	r3, r0
 8007fd8:	4293      	cmp	r3, r2
 8007fda:	d100      	bne.n	8007fde <memset+0xa>
 8007fdc:	4770      	bx	lr
 8007fde:	f803 1b01 	strb.w	r1, [r3], #1
 8007fe2:	e7f9      	b.n	8007fd8 <memset+0x4>

08007fe4 <__errno>:
 8007fe4:	4b01      	ldr	r3, [pc, #4]	@ (8007fec <__errno+0x8>)
 8007fe6:	6818      	ldr	r0, [r3, #0]
 8007fe8:	4770      	bx	lr
 8007fea:	bf00      	nop
 8007fec:	20000168 	.word	0x20000168

08007ff0 <__libc_init_array>:
 8007ff0:	b570      	push	{r4, r5, r6, lr}
 8007ff2:	4d0d      	ldr	r5, [pc, #52]	@ (8008028 <__libc_init_array+0x38>)
 8007ff4:	4c0d      	ldr	r4, [pc, #52]	@ (800802c <__libc_init_array+0x3c>)
 8007ff6:	1b64      	subs	r4, r4, r5
 8007ff8:	10a4      	asrs	r4, r4, #2
 8007ffa:	2600      	movs	r6, #0
 8007ffc:	42a6      	cmp	r6, r4
 8007ffe:	d109      	bne.n	8008014 <__libc_init_array+0x24>
 8008000:	4d0b      	ldr	r5, [pc, #44]	@ (8008030 <__libc_init_array+0x40>)
 8008002:	4c0c      	ldr	r4, [pc, #48]	@ (8008034 <__libc_init_array+0x44>)
 8008004:	f000 fc66 	bl	80088d4 <_init>
 8008008:	1b64      	subs	r4, r4, r5
 800800a:	10a4      	asrs	r4, r4, #2
 800800c:	2600      	movs	r6, #0
 800800e:	42a6      	cmp	r6, r4
 8008010:	d105      	bne.n	800801e <__libc_init_array+0x2e>
 8008012:	bd70      	pop	{r4, r5, r6, pc}
 8008014:	f855 3b04 	ldr.w	r3, [r5], #4
 8008018:	4798      	blx	r3
 800801a:	3601      	adds	r6, #1
 800801c:	e7ee      	b.n	8007ffc <__libc_init_array+0xc>
 800801e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008022:	4798      	blx	r3
 8008024:	3601      	adds	r6, #1
 8008026:	e7f2      	b.n	800800e <__libc_init_array+0x1e>
 8008028:	08008c0c 	.word	0x08008c0c
 800802c:	08008c0c 	.word	0x08008c0c
 8008030:	08008c0c 	.word	0x08008c0c
 8008034:	08008c10 	.word	0x08008c10

08008038 <__retarget_lock_acquire_recursive>:
 8008038:	4770      	bx	lr

0800803a <__retarget_lock_release_recursive>:
 800803a:	4770      	bx	lr

0800803c <_free_r>:
 800803c:	b538      	push	{r3, r4, r5, lr}
 800803e:	4605      	mov	r5, r0
 8008040:	2900      	cmp	r1, #0
 8008042:	d041      	beq.n	80080c8 <_free_r+0x8c>
 8008044:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008048:	1f0c      	subs	r4, r1, #4
 800804a:	2b00      	cmp	r3, #0
 800804c:	bfb8      	it	lt
 800804e:	18e4      	addlt	r4, r4, r3
 8008050:	f000 f8e0 	bl	8008214 <__malloc_lock>
 8008054:	4a1d      	ldr	r2, [pc, #116]	@ (80080cc <_free_r+0x90>)
 8008056:	6813      	ldr	r3, [r2, #0]
 8008058:	b933      	cbnz	r3, 8008068 <_free_r+0x2c>
 800805a:	6063      	str	r3, [r4, #4]
 800805c:	6014      	str	r4, [r2, #0]
 800805e:	4628      	mov	r0, r5
 8008060:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008064:	f000 b8dc 	b.w	8008220 <__malloc_unlock>
 8008068:	42a3      	cmp	r3, r4
 800806a:	d908      	bls.n	800807e <_free_r+0x42>
 800806c:	6820      	ldr	r0, [r4, #0]
 800806e:	1821      	adds	r1, r4, r0
 8008070:	428b      	cmp	r3, r1
 8008072:	bf01      	itttt	eq
 8008074:	6819      	ldreq	r1, [r3, #0]
 8008076:	685b      	ldreq	r3, [r3, #4]
 8008078:	1809      	addeq	r1, r1, r0
 800807a:	6021      	streq	r1, [r4, #0]
 800807c:	e7ed      	b.n	800805a <_free_r+0x1e>
 800807e:	461a      	mov	r2, r3
 8008080:	685b      	ldr	r3, [r3, #4]
 8008082:	b10b      	cbz	r3, 8008088 <_free_r+0x4c>
 8008084:	42a3      	cmp	r3, r4
 8008086:	d9fa      	bls.n	800807e <_free_r+0x42>
 8008088:	6811      	ldr	r1, [r2, #0]
 800808a:	1850      	adds	r0, r2, r1
 800808c:	42a0      	cmp	r0, r4
 800808e:	d10b      	bne.n	80080a8 <_free_r+0x6c>
 8008090:	6820      	ldr	r0, [r4, #0]
 8008092:	4401      	add	r1, r0
 8008094:	1850      	adds	r0, r2, r1
 8008096:	4283      	cmp	r3, r0
 8008098:	6011      	str	r1, [r2, #0]
 800809a:	d1e0      	bne.n	800805e <_free_r+0x22>
 800809c:	6818      	ldr	r0, [r3, #0]
 800809e:	685b      	ldr	r3, [r3, #4]
 80080a0:	6053      	str	r3, [r2, #4]
 80080a2:	4408      	add	r0, r1
 80080a4:	6010      	str	r0, [r2, #0]
 80080a6:	e7da      	b.n	800805e <_free_r+0x22>
 80080a8:	d902      	bls.n	80080b0 <_free_r+0x74>
 80080aa:	230c      	movs	r3, #12
 80080ac:	602b      	str	r3, [r5, #0]
 80080ae:	e7d6      	b.n	800805e <_free_r+0x22>
 80080b0:	6820      	ldr	r0, [r4, #0]
 80080b2:	1821      	adds	r1, r4, r0
 80080b4:	428b      	cmp	r3, r1
 80080b6:	bf04      	itt	eq
 80080b8:	6819      	ldreq	r1, [r3, #0]
 80080ba:	685b      	ldreq	r3, [r3, #4]
 80080bc:	6063      	str	r3, [r4, #4]
 80080be:	bf04      	itt	eq
 80080c0:	1809      	addeq	r1, r1, r0
 80080c2:	6021      	streq	r1, [r4, #0]
 80080c4:	6054      	str	r4, [r2, #4]
 80080c6:	e7ca      	b.n	800805e <_free_r+0x22>
 80080c8:	bd38      	pop	{r3, r4, r5, pc}
 80080ca:	bf00      	nop
 80080cc:	20000490 	.word	0x20000490

080080d0 <sbrk_aligned>:
 80080d0:	b570      	push	{r4, r5, r6, lr}
 80080d2:	4e0f      	ldr	r6, [pc, #60]	@ (8008110 <sbrk_aligned+0x40>)
 80080d4:	460c      	mov	r4, r1
 80080d6:	6831      	ldr	r1, [r6, #0]
 80080d8:	4605      	mov	r5, r0
 80080da:	b911      	cbnz	r1, 80080e2 <sbrk_aligned+0x12>
 80080dc:	f000 fba6 	bl	800882c <_sbrk_r>
 80080e0:	6030      	str	r0, [r6, #0]
 80080e2:	4621      	mov	r1, r4
 80080e4:	4628      	mov	r0, r5
 80080e6:	f000 fba1 	bl	800882c <_sbrk_r>
 80080ea:	1c43      	adds	r3, r0, #1
 80080ec:	d103      	bne.n	80080f6 <sbrk_aligned+0x26>
 80080ee:	f04f 34ff 	mov.w	r4, #4294967295
 80080f2:	4620      	mov	r0, r4
 80080f4:	bd70      	pop	{r4, r5, r6, pc}
 80080f6:	1cc4      	adds	r4, r0, #3
 80080f8:	f024 0403 	bic.w	r4, r4, #3
 80080fc:	42a0      	cmp	r0, r4
 80080fe:	d0f8      	beq.n	80080f2 <sbrk_aligned+0x22>
 8008100:	1a21      	subs	r1, r4, r0
 8008102:	4628      	mov	r0, r5
 8008104:	f000 fb92 	bl	800882c <_sbrk_r>
 8008108:	3001      	adds	r0, #1
 800810a:	d1f2      	bne.n	80080f2 <sbrk_aligned+0x22>
 800810c:	e7ef      	b.n	80080ee <sbrk_aligned+0x1e>
 800810e:	bf00      	nop
 8008110:	2000048c 	.word	0x2000048c

08008114 <_malloc_r>:
 8008114:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008118:	1ccd      	adds	r5, r1, #3
 800811a:	f025 0503 	bic.w	r5, r5, #3
 800811e:	3508      	adds	r5, #8
 8008120:	2d0c      	cmp	r5, #12
 8008122:	bf38      	it	cc
 8008124:	250c      	movcc	r5, #12
 8008126:	2d00      	cmp	r5, #0
 8008128:	4606      	mov	r6, r0
 800812a:	db01      	blt.n	8008130 <_malloc_r+0x1c>
 800812c:	42a9      	cmp	r1, r5
 800812e:	d904      	bls.n	800813a <_malloc_r+0x26>
 8008130:	230c      	movs	r3, #12
 8008132:	6033      	str	r3, [r6, #0]
 8008134:	2000      	movs	r0, #0
 8008136:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800813a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008210 <_malloc_r+0xfc>
 800813e:	f000 f869 	bl	8008214 <__malloc_lock>
 8008142:	f8d8 3000 	ldr.w	r3, [r8]
 8008146:	461c      	mov	r4, r3
 8008148:	bb44      	cbnz	r4, 800819c <_malloc_r+0x88>
 800814a:	4629      	mov	r1, r5
 800814c:	4630      	mov	r0, r6
 800814e:	f7ff ffbf 	bl	80080d0 <sbrk_aligned>
 8008152:	1c43      	adds	r3, r0, #1
 8008154:	4604      	mov	r4, r0
 8008156:	d158      	bne.n	800820a <_malloc_r+0xf6>
 8008158:	f8d8 4000 	ldr.w	r4, [r8]
 800815c:	4627      	mov	r7, r4
 800815e:	2f00      	cmp	r7, #0
 8008160:	d143      	bne.n	80081ea <_malloc_r+0xd6>
 8008162:	2c00      	cmp	r4, #0
 8008164:	d04b      	beq.n	80081fe <_malloc_r+0xea>
 8008166:	6823      	ldr	r3, [r4, #0]
 8008168:	4639      	mov	r1, r7
 800816a:	4630      	mov	r0, r6
 800816c:	eb04 0903 	add.w	r9, r4, r3
 8008170:	f000 fb5c 	bl	800882c <_sbrk_r>
 8008174:	4581      	cmp	r9, r0
 8008176:	d142      	bne.n	80081fe <_malloc_r+0xea>
 8008178:	6821      	ldr	r1, [r4, #0]
 800817a:	1a6d      	subs	r5, r5, r1
 800817c:	4629      	mov	r1, r5
 800817e:	4630      	mov	r0, r6
 8008180:	f7ff ffa6 	bl	80080d0 <sbrk_aligned>
 8008184:	3001      	adds	r0, #1
 8008186:	d03a      	beq.n	80081fe <_malloc_r+0xea>
 8008188:	6823      	ldr	r3, [r4, #0]
 800818a:	442b      	add	r3, r5
 800818c:	6023      	str	r3, [r4, #0]
 800818e:	f8d8 3000 	ldr.w	r3, [r8]
 8008192:	685a      	ldr	r2, [r3, #4]
 8008194:	bb62      	cbnz	r2, 80081f0 <_malloc_r+0xdc>
 8008196:	f8c8 7000 	str.w	r7, [r8]
 800819a:	e00f      	b.n	80081bc <_malloc_r+0xa8>
 800819c:	6822      	ldr	r2, [r4, #0]
 800819e:	1b52      	subs	r2, r2, r5
 80081a0:	d420      	bmi.n	80081e4 <_malloc_r+0xd0>
 80081a2:	2a0b      	cmp	r2, #11
 80081a4:	d917      	bls.n	80081d6 <_malloc_r+0xc2>
 80081a6:	1961      	adds	r1, r4, r5
 80081a8:	42a3      	cmp	r3, r4
 80081aa:	6025      	str	r5, [r4, #0]
 80081ac:	bf18      	it	ne
 80081ae:	6059      	strne	r1, [r3, #4]
 80081b0:	6863      	ldr	r3, [r4, #4]
 80081b2:	bf08      	it	eq
 80081b4:	f8c8 1000 	streq.w	r1, [r8]
 80081b8:	5162      	str	r2, [r4, r5]
 80081ba:	604b      	str	r3, [r1, #4]
 80081bc:	4630      	mov	r0, r6
 80081be:	f000 f82f 	bl	8008220 <__malloc_unlock>
 80081c2:	f104 000b 	add.w	r0, r4, #11
 80081c6:	1d23      	adds	r3, r4, #4
 80081c8:	f020 0007 	bic.w	r0, r0, #7
 80081cc:	1ac2      	subs	r2, r0, r3
 80081ce:	bf1c      	itt	ne
 80081d0:	1a1b      	subne	r3, r3, r0
 80081d2:	50a3      	strne	r3, [r4, r2]
 80081d4:	e7af      	b.n	8008136 <_malloc_r+0x22>
 80081d6:	6862      	ldr	r2, [r4, #4]
 80081d8:	42a3      	cmp	r3, r4
 80081da:	bf0c      	ite	eq
 80081dc:	f8c8 2000 	streq.w	r2, [r8]
 80081e0:	605a      	strne	r2, [r3, #4]
 80081e2:	e7eb      	b.n	80081bc <_malloc_r+0xa8>
 80081e4:	4623      	mov	r3, r4
 80081e6:	6864      	ldr	r4, [r4, #4]
 80081e8:	e7ae      	b.n	8008148 <_malloc_r+0x34>
 80081ea:	463c      	mov	r4, r7
 80081ec:	687f      	ldr	r7, [r7, #4]
 80081ee:	e7b6      	b.n	800815e <_malloc_r+0x4a>
 80081f0:	461a      	mov	r2, r3
 80081f2:	685b      	ldr	r3, [r3, #4]
 80081f4:	42a3      	cmp	r3, r4
 80081f6:	d1fb      	bne.n	80081f0 <_malloc_r+0xdc>
 80081f8:	2300      	movs	r3, #0
 80081fa:	6053      	str	r3, [r2, #4]
 80081fc:	e7de      	b.n	80081bc <_malloc_r+0xa8>
 80081fe:	230c      	movs	r3, #12
 8008200:	6033      	str	r3, [r6, #0]
 8008202:	4630      	mov	r0, r6
 8008204:	f000 f80c 	bl	8008220 <__malloc_unlock>
 8008208:	e794      	b.n	8008134 <_malloc_r+0x20>
 800820a:	6005      	str	r5, [r0, #0]
 800820c:	e7d6      	b.n	80081bc <_malloc_r+0xa8>
 800820e:	bf00      	nop
 8008210:	20000490 	.word	0x20000490

08008214 <__malloc_lock>:
 8008214:	4801      	ldr	r0, [pc, #4]	@ (800821c <__malloc_lock+0x8>)
 8008216:	f7ff bf0f 	b.w	8008038 <__retarget_lock_acquire_recursive>
 800821a:	bf00      	nop
 800821c:	20000488 	.word	0x20000488

08008220 <__malloc_unlock>:
 8008220:	4801      	ldr	r0, [pc, #4]	@ (8008228 <__malloc_unlock+0x8>)
 8008222:	f7ff bf0a 	b.w	800803a <__retarget_lock_release_recursive>
 8008226:	bf00      	nop
 8008228:	20000488 	.word	0x20000488

0800822c <__ssputs_r>:
 800822c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008230:	688e      	ldr	r6, [r1, #8]
 8008232:	461f      	mov	r7, r3
 8008234:	42be      	cmp	r6, r7
 8008236:	680b      	ldr	r3, [r1, #0]
 8008238:	4682      	mov	sl, r0
 800823a:	460c      	mov	r4, r1
 800823c:	4690      	mov	r8, r2
 800823e:	d82d      	bhi.n	800829c <__ssputs_r+0x70>
 8008240:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008244:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008248:	d026      	beq.n	8008298 <__ssputs_r+0x6c>
 800824a:	6965      	ldr	r5, [r4, #20]
 800824c:	6909      	ldr	r1, [r1, #16]
 800824e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008252:	eba3 0901 	sub.w	r9, r3, r1
 8008256:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800825a:	1c7b      	adds	r3, r7, #1
 800825c:	444b      	add	r3, r9
 800825e:	106d      	asrs	r5, r5, #1
 8008260:	429d      	cmp	r5, r3
 8008262:	bf38      	it	cc
 8008264:	461d      	movcc	r5, r3
 8008266:	0553      	lsls	r3, r2, #21
 8008268:	d527      	bpl.n	80082ba <__ssputs_r+0x8e>
 800826a:	4629      	mov	r1, r5
 800826c:	f7ff ff52 	bl	8008114 <_malloc_r>
 8008270:	4606      	mov	r6, r0
 8008272:	b360      	cbz	r0, 80082ce <__ssputs_r+0xa2>
 8008274:	6921      	ldr	r1, [r4, #16]
 8008276:	464a      	mov	r2, r9
 8008278:	f000 fae8 	bl	800884c <memcpy>
 800827c:	89a3      	ldrh	r3, [r4, #12]
 800827e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008282:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008286:	81a3      	strh	r3, [r4, #12]
 8008288:	6126      	str	r6, [r4, #16]
 800828a:	6165      	str	r5, [r4, #20]
 800828c:	444e      	add	r6, r9
 800828e:	eba5 0509 	sub.w	r5, r5, r9
 8008292:	6026      	str	r6, [r4, #0]
 8008294:	60a5      	str	r5, [r4, #8]
 8008296:	463e      	mov	r6, r7
 8008298:	42be      	cmp	r6, r7
 800829a:	d900      	bls.n	800829e <__ssputs_r+0x72>
 800829c:	463e      	mov	r6, r7
 800829e:	6820      	ldr	r0, [r4, #0]
 80082a0:	4632      	mov	r2, r6
 80082a2:	4641      	mov	r1, r8
 80082a4:	f000 faa8 	bl	80087f8 <memmove>
 80082a8:	68a3      	ldr	r3, [r4, #8]
 80082aa:	1b9b      	subs	r3, r3, r6
 80082ac:	60a3      	str	r3, [r4, #8]
 80082ae:	6823      	ldr	r3, [r4, #0]
 80082b0:	4433      	add	r3, r6
 80082b2:	6023      	str	r3, [r4, #0]
 80082b4:	2000      	movs	r0, #0
 80082b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80082ba:	462a      	mov	r2, r5
 80082bc:	f000 fad4 	bl	8008868 <_realloc_r>
 80082c0:	4606      	mov	r6, r0
 80082c2:	2800      	cmp	r0, #0
 80082c4:	d1e0      	bne.n	8008288 <__ssputs_r+0x5c>
 80082c6:	6921      	ldr	r1, [r4, #16]
 80082c8:	4650      	mov	r0, sl
 80082ca:	f7ff feb7 	bl	800803c <_free_r>
 80082ce:	230c      	movs	r3, #12
 80082d0:	f8ca 3000 	str.w	r3, [sl]
 80082d4:	89a3      	ldrh	r3, [r4, #12]
 80082d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80082da:	81a3      	strh	r3, [r4, #12]
 80082dc:	f04f 30ff 	mov.w	r0, #4294967295
 80082e0:	e7e9      	b.n	80082b6 <__ssputs_r+0x8a>
	...

080082e4 <_svfiprintf_r>:
 80082e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082e8:	4698      	mov	r8, r3
 80082ea:	898b      	ldrh	r3, [r1, #12]
 80082ec:	061b      	lsls	r3, r3, #24
 80082ee:	b09d      	sub	sp, #116	@ 0x74
 80082f0:	4607      	mov	r7, r0
 80082f2:	460d      	mov	r5, r1
 80082f4:	4614      	mov	r4, r2
 80082f6:	d510      	bpl.n	800831a <_svfiprintf_r+0x36>
 80082f8:	690b      	ldr	r3, [r1, #16]
 80082fa:	b973      	cbnz	r3, 800831a <_svfiprintf_r+0x36>
 80082fc:	2140      	movs	r1, #64	@ 0x40
 80082fe:	f7ff ff09 	bl	8008114 <_malloc_r>
 8008302:	6028      	str	r0, [r5, #0]
 8008304:	6128      	str	r0, [r5, #16]
 8008306:	b930      	cbnz	r0, 8008316 <_svfiprintf_r+0x32>
 8008308:	230c      	movs	r3, #12
 800830a:	603b      	str	r3, [r7, #0]
 800830c:	f04f 30ff 	mov.w	r0, #4294967295
 8008310:	b01d      	add	sp, #116	@ 0x74
 8008312:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008316:	2340      	movs	r3, #64	@ 0x40
 8008318:	616b      	str	r3, [r5, #20]
 800831a:	2300      	movs	r3, #0
 800831c:	9309      	str	r3, [sp, #36]	@ 0x24
 800831e:	2320      	movs	r3, #32
 8008320:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008324:	f8cd 800c 	str.w	r8, [sp, #12]
 8008328:	2330      	movs	r3, #48	@ 0x30
 800832a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80084c8 <_svfiprintf_r+0x1e4>
 800832e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008332:	f04f 0901 	mov.w	r9, #1
 8008336:	4623      	mov	r3, r4
 8008338:	469a      	mov	sl, r3
 800833a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800833e:	b10a      	cbz	r2, 8008344 <_svfiprintf_r+0x60>
 8008340:	2a25      	cmp	r2, #37	@ 0x25
 8008342:	d1f9      	bne.n	8008338 <_svfiprintf_r+0x54>
 8008344:	ebba 0b04 	subs.w	fp, sl, r4
 8008348:	d00b      	beq.n	8008362 <_svfiprintf_r+0x7e>
 800834a:	465b      	mov	r3, fp
 800834c:	4622      	mov	r2, r4
 800834e:	4629      	mov	r1, r5
 8008350:	4638      	mov	r0, r7
 8008352:	f7ff ff6b 	bl	800822c <__ssputs_r>
 8008356:	3001      	adds	r0, #1
 8008358:	f000 80a7 	beq.w	80084aa <_svfiprintf_r+0x1c6>
 800835c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800835e:	445a      	add	r2, fp
 8008360:	9209      	str	r2, [sp, #36]	@ 0x24
 8008362:	f89a 3000 	ldrb.w	r3, [sl]
 8008366:	2b00      	cmp	r3, #0
 8008368:	f000 809f 	beq.w	80084aa <_svfiprintf_r+0x1c6>
 800836c:	2300      	movs	r3, #0
 800836e:	f04f 32ff 	mov.w	r2, #4294967295
 8008372:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008376:	f10a 0a01 	add.w	sl, sl, #1
 800837a:	9304      	str	r3, [sp, #16]
 800837c:	9307      	str	r3, [sp, #28]
 800837e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008382:	931a      	str	r3, [sp, #104]	@ 0x68
 8008384:	4654      	mov	r4, sl
 8008386:	2205      	movs	r2, #5
 8008388:	f814 1b01 	ldrb.w	r1, [r4], #1
 800838c:	484e      	ldr	r0, [pc, #312]	@ (80084c8 <_svfiprintf_r+0x1e4>)
 800838e:	f7f7 ff1f 	bl	80001d0 <memchr>
 8008392:	9a04      	ldr	r2, [sp, #16]
 8008394:	b9d8      	cbnz	r0, 80083ce <_svfiprintf_r+0xea>
 8008396:	06d0      	lsls	r0, r2, #27
 8008398:	bf44      	itt	mi
 800839a:	2320      	movmi	r3, #32
 800839c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80083a0:	0711      	lsls	r1, r2, #28
 80083a2:	bf44      	itt	mi
 80083a4:	232b      	movmi	r3, #43	@ 0x2b
 80083a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80083aa:	f89a 3000 	ldrb.w	r3, [sl]
 80083ae:	2b2a      	cmp	r3, #42	@ 0x2a
 80083b0:	d015      	beq.n	80083de <_svfiprintf_r+0xfa>
 80083b2:	9a07      	ldr	r2, [sp, #28]
 80083b4:	4654      	mov	r4, sl
 80083b6:	2000      	movs	r0, #0
 80083b8:	f04f 0c0a 	mov.w	ip, #10
 80083bc:	4621      	mov	r1, r4
 80083be:	f811 3b01 	ldrb.w	r3, [r1], #1
 80083c2:	3b30      	subs	r3, #48	@ 0x30
 80083c4:	2b09      	cmp	r3, #9
 80083c6:	d94b      	bls.n	8008460 <_svfiprintf_r+0x17c>
 80083c8:	b1b0      	cbz	r0, 80083f8 <_svfiprintf_r+0x114>
 80083ca:	9207      	str	r2, [sp, #28]
 80083cc:	e014      	b.n	80083f8 <_svfiprintf_r+0x114>
 80083ce:	eba0 0308 	sub.w	r3, r0, r8
 80083d2:	fa09 f303 	lsl.w	r3, r9, r3
 80083d6:	4313      	orrs	r3, r2
 80083d8:	9304      	str	r3, [sp, #16]
 80083da:	46a2      	mov	sl, r4
 80083dc:	e7d2      	b.n	8008384 <_svfiprintf_r+0xa0>
 80083de:	9b03      	ldr	r3, [sp, #12]
 80083e0:	1d19      	adds	r1, r3, #4
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	9103      	str	r1, [sp, #12]
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	bfbb      	ittet	lt
 80083ea:	425b      	neglt	r3, r3
 80083ec:	f042 0202 	orrlt.w	r2, r2, #2
 80083f0:	9307      	strge	r3, [sp, #28]
 80083f2:	9307      	strlt	r3, [sp, #28]
 80083f4:	bfb8      	it	lt
 80083f6:	9204      	strlt	r2, [sp, #16]
 80083f8:	7823      	ldrb	r3, [r4, #0]
 80083fa:	2b2e      	cmp	r3, #46	@ 0x2e
 80083fc:	d10a      	bne.n	8008414 <_svfiprintf_r+0x130>
 80083fe:	7863      	ldrb	r3, [r4, #1]
 8008400:	2b2a      	cmp	r3, #42	@ 0x2a
 8008402:	d132      	bne.n	800846a <_svfiprintf_r+0x186>
 8008404:	9b03      	ldr	r3, [sp, #12]
 8008406:	1d1a      	adds	r2, r3, #4
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	9203      	str	r2, [sp, #12]
 800840c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008410:	3402      	adds	r4, #2
 8008412:	9305      	str	r3, [sp, #20]
 8008414:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80084d8 <_svfiprintf_r+0x1f4>
 8008418:	7821      	ldrb	r1, [r4, #0]
 800841a:	2203      	movs	r2, #3
 800841c:	4650      	mov	r0, sl
 800841e:	f7f7 fed7 	bl	80001d0 <memchr>
 8008422:	b138      	cbz	r0, 8008434 <_svfiprintf_r+0x150>
 8008424:	9b04      	ldr	r3, [sp, #16]
 8008426:	eba0 000a 	sub.w	r0, r0, sl
 800842a:	2240      	movs	r2, #64	@ 0x40
 800842c:	4082      	lsls	r2, r0
 800842e:	4313      	orrs	r3, r2
 8008430:	3401      	adds	r4, #1
 8008432:	9304      	str	r3, [sp, #16]
 8008434:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008438:	4824      	ldr	r0, [pc, #144]	@ (80084cc <_svfiprintf_r+0x1e8>)
 800843a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800843e:	2206      	movs	r2, #6
 8008440:	f7f7 fec6 	bl	80001d0 <memchr>
 8008444:	2800      	cmp	r0, #0
 8008446:	d036      	beq.n	80084b6 <_svfiprintf_r+0x1d2>
 8008448:	4b21      	ldr	r3, [pc, #132]	@ (80084d0 <_svfiprintf_r+0x1ec>)
 800844a:	bb1b      	cbnz	r3, 8008494 <_svfiprintf_r+0x1b0>
 800844c:	9b03      	ldr	r3, [sp, #12]
 800844e:	3307      	adds	r3, #7
 8008450:	f023 0307 	bic.w	r3, r3, #7
 8008454:	3308      	adds	r3, #8
 8008456:	9303      	str	r3, [sp, #12]
 8008458:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800845a:	4433      	add	r3, r6
 800845c:	9309      	str	r3, [sp, #36]	@ 0x24
 800845e:	e76a      	b.n	8008336 <_svfiprintf_r+0x52>
 8008460:	fb0c 3202 	mla	r2, ip, r2, r3
 8008464:	460c      	mov	r4, r1
 8008466:	2001      	movs	r0, #1
 8008468:	e7a8      	b.n	80083bc <_svfiprintf_r+0xd8>
 800846a:	2300      	movs	r3, #0
 800846c:	3401      	adds	r4, #1
 800846e:	9305      	str	r3, [sp, #20]
 8008470:	4619      	mov	r1, r3
 8008472:	f04f 0c0a 	mov.w	ip, #10
 8008476:	4620      	mov	r0, r4
 8008478:	f810 2b01 	ldrb.w	r2, [r0], #1
 800847c:	3a30      	subs	r2, #48	@ 0x30
 800847e:	2a09      	cmp	r2, #9
 8008480:	d903      	bls.n	800848a <_svfiprintf_r+0x1a6>
 8008482:	2b00      	cmp	r3, #0
 8008484:	d0c6      	beq.n	8008414 <_svfiprintf_r+0x130>
 8008486:	9105      	str	r1, [sp, #20]
 8008488:	e7c4      	b.n	8008414 <_svfiprintf_r+0x130>
 800848a:	fb0c 2101 	mla	r1, ip, r1, r2
 800848e:	4604      	mov	r4, r0
 8008490:	2301      	movs	r3, #1
 8008492:	e7f0      	b.n	8008476 <_svfiprintf_r+0x192>
 8008494:	ab03      	add	r3, sp, #12
 8008496:	9300      	str	r3, [sp, #0]
 8008498:	462a      	mov	r2, r5
 800849a:	4b0e      	ldr	r3, [pc, #56]	@ (80084d4 <_svfiprintf_r+0x1f0>)
 800849c:	a904      	add	r1, sp, #16
 800849e:	4638      	mov	r0, r7
 80084a0:	f3af 8000 	nop.w
 80084a4:	1c42      	adds	r2, r0, #1
 80084a6:	4606      	mov	r6, r0
 80084a8:	d1d6      	bne.n	8008458 <_svfiprintf_r+0x174>
 80084aa:	89ab      	ldrh	r3, [r5, #12]
 80084ac:	065b      	lsls	r3, r3, #25
 80084ae:	f53f af2d 	bmi.w	800830c <_svfiprintf_r+0x28>
 80084b2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80084b4:	e72c      	b.n	8008310 <_svfiprintf_r+0x2c>
 80084b6:	ab03      	add	r3, sp, #12
 80084b8:	9300      	str	r3, [sp, #0]
 80084ba:	462a      	mov	r2, r5
 80084bc:	4b05      	ldr	r3, [pc, #20]	@ (80084d4 <_svfiprintf_r+0x1f0>)
 80084be:	a904      	add	r1, sp, #16
 80084c0:	4638      	mov	r0, r7
 80084c2:	f000 f879 	bl	80085b8 <_printf_i>
 80084c6:	e7ed      	b.n	80084a4 <_svfiprintf_r+0x1c0>
 80084c8:	08008bd0 	.word	0x08008bd0
 80084cc:	08008bda 	.word	0x08008bda
 80084d0:	00000000 	.word	0x00000000
 80084d4:	0800822d 	.word	0x0800822d
 80084d8:	08008bd6 	.word	0x08008bd6

080084dc <_printf_common>:
 80084dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80084e0:	4616      	mov	r6, r2
 80084e2:	4698      	mov	r8, r3
 80084e4:	688a      	ldr	r2, [r1, #8]
 80084e6:	690b      	ldr	r3, [r1, #16]
 80084e8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80084ec:	4293      	cmp	r3, r2
 80084ee:	bfb8      	it	lt
 80084f0:	4613      	movlt	r3, r2
 80084f2:	6033      	str	r3, [r6, #0]
 80084f4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80084f8:	4607      	mov	r7, r0
 80084fa:	460c      	mov	r4, r1
 80084fc:	b10a      	cbz	r2, 8008502 <_printf_common+0x26>
 80084fe:	3301      	adds	r3, #1
 8008500:	6033      	str	r3, [r6, #0]
 8008502:	6823      	ldr	r3, [r4, #0]
 8008504:	0699      	lsls	r1, r3, #26
 8008506:	bf42      	ittt	mi
 8008508:	6833      	ldrmi	r3, [r6, #0]
 800850a:	3302      	addmi	r3, #2
 800850c:	6033      	strmi	r3, [r6, #0]
 800850e:	6825      	ldr	r5, [r4, #0]
 8008510:	f015 0506 	ands.w	r5, r5, #6
 8008514:	d106      	bne.n	8008524 <_printf_common+0x48>
 8008516:	f104 0a19 	add.w	sl, r4, #25
 800851a:	68e3      	ldr	r3, [r4, #12]
 800851c:	6832      	ldr	r2, [r6, #0]
 800851e:	1a9b      	subs	r3, r3, r2
 8008520:	42ab      	cmp	r3, r5
 8008522:	dc26      	bgt.n	8008572 <_printf_common+0x96>
 8008524:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008528:	6822      	ldr	r2, [r4, #0]
 800852a:	3b00      	subs	r3, #0
 800852c:	bf18      	it	ne
 800852e:	2301      	movne	r3, #1
 8008530:	0692      	lsls	r2, r2, #26
 8008532:	d42b      	bmi.n	800858c <_printf_common+0xb0>
 8008534:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008538:	4641      	mov	r1, r8
 800853a:	4638      	mov	r0, r7
 800853c:	47c8      	blx	r9
 800853e:	3001      	adds	r0, #1
 8008540:	d01e      	beq.n	8008580 <_printf_common+0xa4>
 8008542:	6823      	ldr	r3, [r4, #0]
 8008544:	6922      	ldr	r2, [r4, #16]
 8008546:	f003 0306 	and.w	r3, r3, #6
 800854a:	2b04      	cmp	r3, #4
 800854c:	bf02      	ittt	eq
 800854e:	68e5      	ldreq	r5, [r4, #12]
 8008550:	6833      	ldreq	r3, [r6, #0]
 8008552:	1aed      	subeq	r5, r5, r3
 8008554:	68a3      	ldr	r3, [r4, #8]
 8008556:	bf0c      	ite	eq
 8008558:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800855c:	2500      	movne	r5, #0
 800855e:	4293      	cmp	r3, r2
 8008560:	bfc4      	itt	gt
 8008562:	1a9b      	subgt	r3, r3, r2
 8008564:	18ed      	addgt	r5, r5, r3
 8008566:	2600      	movs	r6, #0
 8008568:	341a      	adds	r4, #26
 800856a:	42b5      	cmp	r5, r6
 800856c:	d11a      	bne.n	80085a4 <_printf_common+0xc8>
 800856e:	2000      	movs	r0, #0
 8008570:	e008      	b.n	8008584 <_printf_common+0xa8>
 8008572:	2301      	movs	r3, #1
 8008574:	4652      	mov	r2, sl
 8008576:	4641      	mov	r1, r8
 8008578:	4638      	mov	r0, r7
 800857a:	47c8      	blx	r9
 800857c:	3001      	adds	r0, #1
 800857e:	d103      	bne.n	8008588 <_printf_common+0xac>
 8008580:	f04f 30ff 	mov.w	r0, #4294967295
 8008584:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008588:	3501      	adds	r5, #1
 800858a:	e7c6      	b.n	800851a <_printf_common+0x3e>
 800858c:	18e1      	adds	r1, r4, r3
 800858e:	1c5a      	adds	r2, r3, #1
 8008590:	2030      	movs	r0, #48	@ 0x30
 8008592:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008596:	4422      	add	r2, r4
 8008598:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800859c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80085a0:	3302      	adds	r3, #2
 80085a2:	e7c7      	b.n	8008534 <_printf_common+0x58>
 80085a4:	2301      	movs	r3, #1
 80085a6:	4622      	mov	r2, r4
 80085a8:	4641      	mov	r1, r8
 80085aa:	4638      	mov	r0, r7
 80085ac:	47c8      	blx	r9
 80085ae:	3001      	adds	r0, #1
 80085b0:	d0e6      	beq.n	8008580 <_printf_common+0xa4>
 80085b2:	3601      	adds	r6, #1
 80085b4:	e7d9      	b.n	800856a <_printf_common+0x8e>
	...

080085b8 <_printf_i>:
 80085b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80085bc:	7e0f      	ldrb	r7, [r1, #24]
 80085be:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80085c0:	2f78      	cmp	r7, #120	@ 0x78
 80085c2:	4691      	mov	r9, r2
 80085c4:	4680      	mov	r8, r0
 80085c6:	460c      	mov	r4, r1
 80085c8:	469a      	mov	sl, r3
 80085ca:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80085ce:	d807      	bhi.n	80085e0 <_printf_i+0x28>
 80085d0:	2f62      	cmp	r7, #98	@ 0x62
 80085d2:	d80a      	bhi.n	80085ea <_printf_i+0x32>
 80085d4:	2f00      	cmp	r7, #0
 80085d6:	f000 80d2 	beq.w	800877e <_printf_i+0x1c6>
 80085da:	2f58      	cmp	r7, #88	@ 0x58
 80085dc:	f000 80b9 	beq.w	8008752 <_printf_i+0x19a>
 80085e0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80085e4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80085e8:	e03a      	b.n	8008660 <_printf_i+0xa8>
 80085ea:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80085ee:	2b15      	cmp	r3, #21
 80085f0:	d8f6      	bhi.n	80085e0 <_printf_i+0x28>
 80085f2:	a101      	add	r1, pc, #4	@ (adr r1, 80085f8 <_printf_i+0x40>)
 80085f4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80085f8:	08008651 	.word	0x08008651
 80085fc:	08008665 	.word	0x08008665
 8008600:	080085e1 	.word	0x080085e1
 8008604:	080085e1 	.word	0x080085e1
 8008608:	080085e1 	.word	0x080085e1
 800860c:	080085e1 	.word	0x080085e1
 8008610:	08008665 	.word	0x08008665
 8008614:	080085e1 	.word	0x080085e1
 8008618:	080085e1 	.word	0x080085e1
 800861c:	080085e1 	.word	0x080085e1
 8008620:	080085e1 	.word	0x080085e1
 8008624:	08008765 	.word	0x08008765
 8008628:	0800868f 	.word	0x0800868f
 800862c:	0800871f 	.word	0x0800871f
 8008630:	080085e1 	.word	0x080085e1
 8008634:	080085e1 	.word	0x080085e1
 8008638:	08008787 	.word	0x08008787
 800863c:	080085e1 	.word	0x080085e1
 8008640:	0800868f 	.word	0x0800868f
 8008644:	080085e1 	.word	0x080085e1
 8008648:	080085e1 	.word	0x080085e1
 800864c:	08008727 	.word	0x08008727
 8008650:	6833      	ldr	r3, [r6, #0]
 8008652:	1d1a      	adds	r2, r3, #4
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	6032      	str	r2, [r6, #0]
 8008658:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800865c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008660:	2301      	movs	r3, #1
 8008662:	e09d      	b.n	80087a0 <_printf_i+0x1e8>
 8008664:	6833      	ldr	r3, [r6, #0]
 8008666:	6820      	ldr	r0, [r4, #0]
 8008668:	1d19      	adds	r1, r3, #4
 800866a:	6031      	str	r1, [r6, #0]
 800866c:	0606      	lsls	r6, r0, #24
 800866e:	d501      	bpl.n	8008674 <_printf_i+0xbc>
 8008670:	681d      	ldr	r5, [r3, #0]
 8008672:	e003      	b.n	800867c <_printf_i+0xc4>
 8008674:	0645      	lsls	r5, r0, #25
 8008676:	d5fb      	bpl.n	8008670 <_printf_i+0xb8>
 8008678:	f9b3 5000 	ldrsh.w	r5, [r3]
 800867c:	2d00      	cmp	r5, #0
 800867e:	da03      	bge.n	8008688 <_printf_i+0xd0>
 8008680:	232d      	movs	r3, #45	@ 0x2d
 8008682:	426d      	negs	r5, r5
 8008684:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008688:	4859      	ldr	r0, [pc, #356]	@ (80087f0 <_printf_i+0x238>)
 800868a:	230a      	movs	r3, #10
 800868c:	e011      	b.n	80086b2 <_printf_i+0xfa>
 800868e:	6821      	ldr	r1, [r4, #0]
 8008690:	6833      	ldr	r3, [r6, #0]
 8008692:	0608      	lsls	r0, r1, #24
 8008694:	f853 5b04 	ldr.w	r5, [r3], #4
 8008698:	d402      	bmi.n	80086a0 <_printf_i+0xe8>
 800869a:	0649      	lsls	r1, r1, #25
 800869c:	bf48      	it	mi
 800869e:	b2ad      	uxthmi	r5, r5
 80086a0:	2f6f      	cmp	r7, #111	@ 0x6f
 80086a2:	4853      	ldr	r0, [pc, #332]	@ (80087f0 <_printf_i+0x238>)
 80086a4:	6033      	str	r3, [r6, #0]
 80086a6:	bf14      	ite	ne
 80086a8:	230a      	movne	r3, #10
 80086aa:	2308      	moveq	r3, #8
 80086ac:	2100      	movs	r1, #0
 80086ae:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80086b2:	6866      	ldr	r6, [r4, #4]
 80086b4:	60a6      	str	r6, [r4, #8]
 80086b6:	2e00      	cmp	r6, #0
 80086b8:	bfa2      	ittt	ge
 80086ba:	6821      	ldrge	r1, [r4, #0]
 80086bc:	f021 0104 	bicge.w	r1, r1, #4
 80086c0:	6021      	strge	r1, [r4, #0]
 80086c2:	b90d      	cbnz	r5, 80086c8 <_printf_i+0x110>
 80086c4:	2e00      	cmp	r6, #0
 80086c6:	d04b      	beq.n	8008760 <_printf_i+0x1a8>
 80086c8:	4616      	mov	r6, r2
 80086ca:	fbb5 f1f3 	udiv	r1, r5, r3
 80086ce:	fb03 5711 	mls	r7, r3, r1, r5
 80086d2:	5dc7      	ldrb	r7, [r0, r7]
 80086d4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80086d8:	462f      	mov	r7, r5
 80086da:	42bb      	cmp	r3, r7
 80086dc:	460d      	mov	r5, r1
 80086de:	d9f4      	bls.n	80086ca <_printf_i+0x112>
 80086e0:	2b08      	cmp	r3, #8
 80086e2:	d10b      	bne.n	80086fc <_printf_i+0x144>
 80086e4:	6823      	ldr	r3, [r4, #0]
 80086e6:	07df      	lsls	r7, r3, #31
 80086e8:	d508      	bpl.n	80086fc <_printf_i+0x144>
 80086ea:	6923      	ldr	r3, [r4, #16]
 80086ec:	6861      	ldr	r1, [r4, #4]
 80086ee:	4299      	cmp	r1, r3
 80086f0:	bfde      	ittt	le
 80086f2:	2330      	movle	r3, #48	@ 0x30
 80086f4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80086f8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80086fc:	1b92      	subs	r2, r2, r6
 80086fe:	6122      	str	r2, [r4, #16]
 8008700:	f8cd a000 	str.w	sl, [sp]
 8008704:	464b      	mov	r3, r9
 8008706:	aa03      	add	r2, sp, #12
 8008708:	4621      	mov	r1, r4
 800870a:	4640      	mov	r0, r8
 800870c:	f7ff fee6 	bl	80084dc <_printf_common>
 8008710:	3001      	adds	r0, #1
 8008712:	d14a      	bne.n	80087aa <_printf_i+0x1f2>
 8008714:	f04f 30ff 	mov.w	r0, #4294967295
 8008718:	b004      	add	sp, #16
 800871a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800871e:	6823      	ldr	r3, [r4, #0]
 8008720:	f043 0320 	orr.w	r3, r3, #32
 8008724:	6023      	str	r3, [r4, #0]
 8008726:	4833      	ldr	r0, [pc, #204]	@ (80087f4 <_printf_i+0x23c>)
 8008728:	2778      	movs	r7, #120	@ 0x78
 800872a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800872e:	6823      	ldr	r3, [r4, #0]
 8008730:	6831      	ldr	r1, [r6, #0]
 8008732:	061f      	lsls	r7, r3, #24
 8008734:	f851 5b04 	ldr.w	r5, [r1], #4
 8008738:	d402      	bmi.n	8008740 <_printf_i+0x188>
 800873a:	065f      	lsls	r7, r3, #25
 800873c:	bf48      	it	mi
 800873e:	b2ad      	uxthmi	r5, r5
 8008740:	6031      	str	r1, [r6, #0]
 8008742:	07d9      	lsls	r1, r3, #31
 8008744:	bf44      	itt	mi
 8008746:	f043 0320 	orrmi.w	r3, r3, #32
 800874a:	6023      	strmi	r3, [r4, #0]
 800874c:	b11d      	cbz	r5, 8008756 <_printf_i+0x19e>
 800874e:	2310      	movs	r3, #16
 8008750:	e7ac      	b.n	80086ac <_printf_i+0xf4>
 8008752:	4827      	ldr	r0, [pc, #156]	@ (80087f0 <_printf_i+0x238>)
 8008754:	e7e9      	b.n	800872a <_printf_i+0x172>
 8008756:	6823      	ldr	r3, [r4, #0]
 8008758:	f023 0320 	bic.w	r3, r3, #32
 800875c:	6023      	str	r3, [r4, #0]
 800875e:	e7f6      	b.n	800874e <_printf_i+0x196>
 8008760:	4616      	mov	r6, r2
 8008762:	e7bd      	b.n	80086e0 <_printf_i+0x128>
 8008764:	6833      	ldr	r3, [r6, #0]
 8008766:	6825      	ldr	r5, [r4, #0]
 8008768:	6961      	ldr	r1, [r4, #20]
 800876a:	1d18      	adds	r0, r3, #4
 800876c:	6030      	str	r0, [r6, #0]
 800876e:	062e      	lsls	r6, r5, #24
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	d501      	bpl.n	8008778 <_printf_i+0x1c0>
 8008774:	6019      	str	r1, [r3, #0]
 8008776:	e002      	b.n	800877e <_printf_i+0x1c6>
 8008778:	0668      	lsls	r0, r5, #25
 800877a:	d5fb      	bpl.n	8008774 <_printf_i+0x1bc>
 800877c:	8019      	strh	r1, [r3, #0]
 800877e:	2300      	movs	r3, #0
 8008780:	6123      	str	r3, [r4, #16]
 8008782:	4616      	mov	r6, r2
 8008784:	e7bc      	b.n	8008700 <_printf_i+0x148>
 8008786:	6833      	ldr	r3, [r6, #0]
 8008788:	1d1a      	adds	r2, r3, #4
 800878a:	6032      	str	r2, [r6, #0]
 800878c:	681e      	ldr	r6, [r3, #0]
 800878e:	6862      	ldr	r2, [r4, #4]
 8008790:	2100      	movs	r1, #0
 8008792:	4630      	mov	r0, r6
 8008794:	f7f7 fd1c 	bl	80001d0 <memchr>
 8008798:	b108      	cbz	r0, 800879e <_printf_i+0x1e6>
 800879a:	1b80      	subs	r0, r0, r6
 800879c:	6060      	str	r0, [r4, #4]
 800879e:	6863      	ldr	r3, [r4, #4]
 80087a0:	6123      	str	r3, [r4, #16]
 80087a2:	2300      	movs	r3, #0
 80087a4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80087a8:	e7aa      	b.n	8008700 <_printf_i+0x148>
 80087aa:	6923      	ldr	r3, [r4, #16]
 80087ac:	4632      	mov	r2, r6
 80087ae:	4649      	mov	r1, r9
 80087b0:	4640      	mov	r0, r8
 80087b2:	47d0      	blx	sl
 80087b4:	3001      	adds	r0, #1
 80087b6:	d0ad      	beq.n	8008714 <_printf_i+0x15c>
 80087b8:	6823      	ldr	r3, [r4, #0]
 80087ba:	079b      	lsls	r3, r3, #30
 80087bc:	d413      	bmi.n	80087e6 <_printf_i+0x22e>
 80087be:	68e0      	ldr	r0, [r4, #12]
 80087c0:	9b03      	ldr	r3, [sp, #12]
 80087c2:	4298      	cmp	r0, r3
 80087c4:	bfb8      	it	lt
 80087c6:	4618      	movlt	r0, r3
 80087c8:	e7a6      	b.n	8008718 <_printf_i+0x160>
 80087ca:	2301      	movs	r3, #1
 80087cc:	4632      	mov	r2, r6
 80087ce:	4649      	mov	r1, r9
 80087d0:	4640      	mov	r0, r8
 80087d2:	47d0      	blx	sl
 80087d4:	3001      	adds	r0, #1
 80087d6:	d09d      	beq.n	8008714 <_printf_i+0x15c>
 80087d8:	3501      	adds	r5, #1
 80087da:	68e3      	ldr	r3, [r4, #12]
 80087dc:	9903      	ldr	r1, [sp, #12]
 80087de:	1a5b      	subs	r3, r3, r1
 80087e0:	42ab      	cmp	r3, r5
 80087e2:	dcf2      	bgt.n	80087ca <_printf_i+0x212>
 80087e4:	e7eb      	b.n	80087be <_printf_i+0x206>
 80087e6:	2500      	movs	r5, #0
 80087e8:	f104 0619 	add.w	r6, r4, #25
 80087ec:	e7f5      	b.n	80087da <_printf_i+0x222>
 80087ee:	bf00      	nop
 80087f0:	08008be1 	.word	0x08008be1
 80087f4:	08008bf2 	.word	0x08008bf2

080087f8 <memmove>:
 80087f8:	4288      	cmp	r0, r1
 80087fa:	b510      	push	{r4, lr}
 80087fc:	eb01 0402 	add.w	r4, r1, r2
 8008800:	d902      	bls.n	8008808 <memmove+0x10>
 8008802:	4284      	cmp	r4, r0
 8008804:	4623      	mov	r3, r4
 8008806:	d807      	bhi.n	8008818 <memmove+0x20>
 8008808:	1e43      	subs	r3, r0, #1
 800880a:	42a1      	cmp	r1, r4
 800880c:	d008      	beq.n	8008820 <memmove+0x28>
 800880e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008812:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008816:	e7f8      	b.n	800880a <memmove+0x12>
 8008818:	4402      	add	r2, r0
 800881a:	4601      	mov	r1, r0
 800881c:	428a      	cmp	r2, r1
 800881e:	d100      	bne.n	8008822 <memmove+0x2a>
 8008820:	bd10      	pop	{r4, pc}
 8008822:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008826:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800882a:	e7f7      	b.n	800881c <memmove+0x24>

0800882c <_sbrk_r>:
 800882c:	b538      	push	{r3, r4, r5, lr}
 800882e:	4d06      	ldr	r5, [pc, #24]	@ (8008848 <_sbrk_r+0x1c>)
 8008830:	2300      	movs	r3, #0
 8008832:	4604      	mov	r4, r0
 8008834:	4608      	mov	r0, r1
 8008836:	602b      	str	r3, [r5, #0]
 8008838:	f7fc fa54 	bl	8004ce4 <_sbrk>
 800883c:	1c43      	adds	r3, r0, #1
 800883e:	d102      	bne.n	8008846 <_sbrk_r+0x1a>
 8008840:	682b      	ldr	r3, [r5, #0]
 8008842:	b103      	cbz	r3, 8008846 <_sbrk_r+0x1a>
 8008844:	6023      	str	r3, [r4, #0]
 8008846:	bd38      	pop	{r3, r4, r5, pc}
 8008848:	20000484 	.word	0x20000484

0800884c <memcpy>:
 800884c:	440a      	add	r2, r1
 800884e:	4291      	cmp	r1, r2
 8008850:	f100 33ff 	add.w	r3, r0, #4294967295
 8008854:	d100      	bne.n	8008858 <memcpy+0xc>
 8008856:	4770      	bx	lr
 8008858:	b510      	push	{r4, lr}
 800885a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800885e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008862:	4291      	cmp	r1, r2
 8008864:	d1f9      	bne.n	800885a <memcpy+0xe>
 8008866:	bd10      	pop	{r4, pc}

08008868 <_realloc_r>:
 8008868:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800886c:	4680      	mov	r8, r0
 800886e:	4615      	mov	r5, r2
 8008870:	460c      	mov	r4, r1
 8008872:	b921      	cbnz	r1, 800887e <_realloc_r+0x16>
 8008874:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008878:	4611      	mov	r1, r2
 800887a:	f7ff bc4b 	b.w	8008114 <_malloc_r>
 800887e:	b92a      	cbnz	r2, 800888c <_realloc_r+0x24>
 8008880:	f7ff fbdc 	bl	800803c <_free_r>
 8008884:	2400      	movs	r4, #0
 8008886:	4620      	mov	r0, r4
 8008888:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800888c:	f000 f81a 	bl	80088c4 <_malloc_usable_size_r>
 8008890:	4285      	cmp	r5, r0
 8008892:	4606      	mov	r6, r0
 8008894:	d802      	bhi.n	800889c <_realloc_r+0x34>
 8008896:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800889a:	d8f4      	bhi.n	8008886 <_realloc_r+0x1e>
 800889c:	4629      	mov	r1, r5
 800889e:	4640      	mov	r0, r8
 80088a0:	f7ff fc38 	bl	8008114 <_malloc_r>
 80088a4:	4607      	mov	r7, r0
 80088a6:	2800      	cmp	r0, #0
 80088a8:	d0ec      	beq.n	8008884 <_realloc_r+0x1c>
 80088aa:	42b5      	cmp	r5, r6
 80088ac:	462a      	mov	r2, r5
 80088ae:	4621      	mov	r1, r4
 80088b0:	bf28      	it	cs
 80088b2:	4632      	movcs	r2, r6
 80088b4:	f7ff ffca 	bl	800884c <memcpy>
 80088b8:	4621      	mov	r1, r4
 80088ba:	4640      	mov	r0, r8
 80088bc:	f7ff fbbe 	bl	800803c <_free_r>
 80088c0:	463c      	mov	r4, r7
 80088c2:	e7e0      	b.n	8008886 <_realloc_r+0x1e>

080088c4 <_malloc_usable_size_r>:
 80088c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80088c8:	1f18      	subs	r0, r3, #4
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	bfbc      	itt	lt
 80088ce:	580b      	ldrlt	r3, [r1, r0]
 80088d0:	18c0      	addlt	r0, r0, r3
 80088d2:	4770      	bx	lr

080088d4 <_init>:
 80088d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088d6:	bf00      	nop
 80088d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80088da:	bc08      	pop	{r3}
 80088dc:	469e      	mov	lr, r3
 80088de:	4770      	bx	lr

080088e0 <_fini>:
 80088e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088e2:	bf00      	nop
 80088e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80088e6:	bc08      	pop	{r3}
 80088e8:	469e      	mov	lr, r3
 80088ea:	4770      	bx	lr
