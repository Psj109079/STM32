
DigitalAlramProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007888  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002b0  08007a18  08007a18  00008a18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007cc8  08007cc8  00009190  2**0
                  CONTENTS
  4 .ARM          00000008  08007cc8  08007cc8  00008cc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007cd0  08007cd0  00009190  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007cd0  08007cd0  00008cd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007cd4  08007cd4  00008cd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000190  20000000  08007cd8  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00009190  2**0
                  CONTENTS
 10 .bss          000002dc  20000190  20000190  00009190  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000046c  2000046c  00009190  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00009190  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000fee5  00000000  00000000  000091c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002cb4  00000000  00000000  000190a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000fb0  00000000  00000000  0001bd60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c26  00000000  00000000  0001cd10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022d88  00000000  00000000  0001d936  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001490d  00000000  00000000  000406be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cc745  00000000  00000000  00054fcb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00121710  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004434  00000000  00000000  00121754  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006d  00000000  00000000  00125b88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000190 	.word	0x20000190
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007a00 	.word	0x08007a00

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000194 	.word	0x20000194
 80001cc:	08007a00 	.word	0x08007a00

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <_7SEG_GPIO_Init>:
#include "7seg.h"

void _7SEG_GPIO_Init()
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b08a      	sub	sp, #40	@ 0x28
 8000564:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct;

	/* GPIOA,D,E Periph clock enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000566:	2300      	movs	r3, #0
 8000568:	613b      	str	r3, [r7, #16]
 800056a:	4b6b      	ldr	r3, [pc, #428]	@ (8000718 <_7SEG_GPIO_Init+0x1b8>)
 800056c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800056e:	4a6a      	ldr	r2, [pc, #424]	@ (8000718 <_7SEG_GPIO_Init+0x1b8>)
 8000570:	f043 0301 	orr.w	r3, r3, #1
 8000574:	6313      	str	r3, [r2, #48]	@ 0x30
 8000576:	4b68      	ldr	r3, [pc, #416]	@ (8000718 <_7SEG_GPIO_Init+0x1b8>)
 8000578:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800057a:	f003 0301 	and.w	r3, r3, #1
 800057e:	613b      	str	r3, [r7, #16]
 8000580:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000582:	2300      	movs	r3, #0
 8000584:	60fb      	str	r3, [r7, #12]
 8000586:	4b64      	ldr	r3, [pc, #400]	@ (8000718 <_7SEG_GPIO_Init+0x1b8>)
 8000588:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800058a:	4a63      	ldr	r2, [pc, #396]	@ (8000718 <_7SEG_GPIO_Init+0x1b8>)
 800058c:	f043 0304 	orr.w	r3, r3, #4
 8000590:	6313      	str	r3, [r2, #48]	@ 0x30
 8000592:	4b61      	ldr	r3, [pc, #388]	@ (8000718 <_7SEG_GPIO_Init+0x1b8>)
 8000594:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000596:	f003 0304 	and.w	r3, r3, #4
 800059a:	60fb      	str	r3, [r7, #12]
 800059c:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800059e:	2300      	movs	r3, #0
 80005a0:	60bb      	str	r3, [r7, #8]
 80005a2:	4b5d      	ldr	r3, [pc, #372]	@ (8000718 <_7SEG_GPIO_Init+0x1b8>)
 80005a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005a6:	4a5c      	ldr	r2, [pc, #368]	@ (8000718 <_7SEG_GPIO_Init+0x1b8>)
 80005a8:	f043 0308 	orr.w	r3, r3, #8
 80005ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80005ae:	4b5a      	ldr	r3, [pc, #360]	@ (8000718 <_7SEG_GPIO_Init+0x1b8>)
 80005b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005b2:	f003 0308 	and.w	r3, r3, #8
 80005b6:	60bb      	str	r3, [r7, #8]
 80005b8:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 80005ba:	2300      	movs	r3, #0
 80005bc:	607b      	str	r3, [r7, #4]
 80005be:	4b56      	ldr	r3, [pc, #344]	@ (8000718 <_7SEG_GPIO_Init+0x1b8>)
 80005c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005c2:	4a55      	ldr	r2, [pc, #340]	@ (8000718 <_7SEG_GPIO_Init+0x1b8>)
 80005c4:	f043 0310 	orr.w	r3, r3, #16
 80005c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80005ca:	4b53      	ldr	r3, [pc, #332]	@ (8000718 <_7SEG_GPIO_Init+0x1b8>)
 80005cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ce:	f003 0310 	and.w	r3, r3, #16
 80005d2:	607b      	str	r3, [r7, #4]
 80005d4:	687b      	ldr	r3, [r7, #4]

	//Digit1
	GPIO_InitStruct.Pin = GPIO_PIN_DGT1_A;
 80005d6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80005da:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005dc:	2301      	movs	r3, #1
 80005de:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e0:	2300      	movs	r3, #0
 80005e2:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005e4:	2300      	movs	r3, #0
 80005e6:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIO_DGT1_A, &GPIO_InitStruct);
 80005e8:	f107 0314 	add.w	r3, r7, #20
 80005ec:	4619      	mov	r1, r3
 80005ee:	484b      	ldr	r0, [pc, #300]	@ (800071c <_7SEG_GPIO_Init+0x1bc>)
 80005f0:	f003 feba 	bl	8004368 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_DGT1_B;
 80005f4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80005f8:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT1_B, &GPIO_InitStruct);
 80005fa:	f107 0314 	add.w	r3, r7, #20
 80005fe:	4619      	mov	r1, r3
 8000600:	4847      	ldr	r0, [pc, #284]	@ (8000720 <_7SEG_GPIO_Init+0x1c0>)
 8000602:	f003 feb1 	bl	8004368 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_DGT1_C;
 8000606:	2340      	movs	r3, #64	@ 0x40
 8000608:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT1_C, &GPIO_InitStruct);
 800060a:	f107 0314 	add.w	r3, r7, #20
 800060e:	4619      	mov	r1, r3
 8000610:	4842      	ldr	r0, [pc, #264]	@ (800071c <_7SEG_GPIO_Init+0x1bc>)
 8000612:	f003 fea9 	bl	8004368 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_DGT1_D;
 8000616:	2320      	movs	r3, #32
 8000618:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT1_D, &GPIO_InitStruct);
 800061a:	f107 0314 	add.w	r3, r7, #20
 800061e:	4619      	mov	r1, r3
 8000620:	483e      	ldr	r0, [pc, #248]	@ (800071c <_7SEG_GPIO_Init+0x1bc>)
 8000622:	f003 fea1 	bl	8004368 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_DGT1_E;
 8000626:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800062a:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT1_E, &GPIO_InitStruct);
 800062c:	f107 0314 	add.w	r3, r7, #20
 8000630:	4619      	mov	r1, r3
 8000632:	483c      	ldr	r0, [pc, #240]	@ (8000724 <_7SEG_GPIO_Init+0x1c4>)
 8000634:	f003 fe98 	bl	8004368 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_DGT1_F;
 8000638:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800063c:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT1_F, &GPIO_InitStruct);
 800063e:	f107 0314 	add.w	r3, r7, #20
 8000642:	4619      	mov	r1, r3
 8000644:	4837      	ldr	r0, [pc, #220]	@ (8000724 <_7SEG_GPIO_Init+0x1c4>)
 8000646:	f003 fe8f 	bl	8004368 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_DGT1_G;
 800064a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800064e:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT1_G, &GPIO_InitStruct);
 8000650:	f107 0314 	add.w	r3, r7, #20
 8000654:	4619      	mov	r1, r3
 8000656:	4831      	ldr	r0, [pc, #196]	@ (800071c <_7SEG_GPIO_Init+0x1bc>)
 8000658:	f003 fe86 	bl	8004368 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_DGT1_DP;
 800065c:	2380      	movs	r3, #128	@ 0x80
 800065e:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT1_DP, &GPIO_InitStruct);
 8000660:	f107 0314 	add.w	r3, r7, #20
 8000664:	4619      	mov	r1, r3
 8000666:	482d      	ldr	r0, [pc, #180]	@ (800071c <_7SEG_GPIO_Init+0x1bc>)
 8000668:	f003 fe7e 	bl	8004368 <HAL_GPIO_Init>

	//Digit2
	GPIO_InitStruct.Pin = GPIO_PIN_DGT2_A;
 800066c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000670:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT2_A, &GPIO_InitStruct);
 8000672:	f107 0314 	add.w	r3, r7, #20
 8000676:	4619      	mov	r1, r3
 8000678:	482b      	ldr	r0, [pc, #172]	@ (8000728 <_7SEG_GPIO_Init+0x1c8>)
 800067a:	f003 fe75 	bl	8004368 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_DGT2_B;
 800067e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000682:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT2_B, &GPIO_InitStruct);
 8000684:	f107 0314 	add.w	r3, r7, #20
 8000688:	4619      	mov	r1, r3
 800068a:	4827      	ldr	r0, [pc, #156]	@ (8000728 <_7SEG_GPIO_Init+0x1c8>)
 800068c:	f003 fe6c 	bl	8004368 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_DGT2_C;
 8000690:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000694:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT2_C, &GPIO_InitStruct);
 8000696:	f107 0314 	add.w	r3, r7, #20
 800069a:	4619      	mov	r1, r3
 800069c:	4822      	ldr	r0, [pc, #136]	@ (8000728 <_7SEG_GPIO_Init+0x1c8>)
 800069e:	f003 fe63 	bl	8004368 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_DGT2_D;
 80006a2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80006a6:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT2_D, &GPIO_InitStruct);
 80006a8:	f107 0314 	add.w	r3, r7, #20
 80006ac:	4619      	mov	r1, r3
 80006ae:	481e      	ldr	r0, [pc, #120]	@ (8000728 <_7SEG_GPIO_Init+0x1c8>)
 80006b0:	f003 fe5a 	bl	8004368 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_DGT2_E;
 80006b4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80006b8:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT2_E, &GPIO_InitStruct);
 80006ba:	f107 0314 	add.w	r3, r7, #20
 80006be:	4619      	mov	r1, r3
 80006c0:	4819      	ldr	r0, [pc, #100]	@ (8000728 <_7SEG_GPIO_Init+0x1c8>)
 80006c2:	f003 fe51 	bl	8004368 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_DGT2_F;
 80006c6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80006ca:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT2_F, &GPIO_InitStruct);
 80006cc:	f107 0314 	add.w	r3, r7, #20
 80006d0:	4619      	mov	r1, r3
 80006d2:	4815      	ldr	r0, [pc, #84]	@ (8000728 <_7SEG_GPIO_Init+0x1c8>)
 80006d4:	f003 fe48 	bl	8004368 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_DGT2_G;
 80006d8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80006dc:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT2_G, &GPIO_InitStruct);
 80006de:	f107 0314 	add.w	r3, r7, #20
 80006e2:	4619      	mov	r1, r3
 80006e4:	4810      	ldr	r0, [pc, #64]	@ (8000728 <_7SEG_GPIO_Init+0x1c8>)
 80006e6:	f003 fe3f 	bl	8004368 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_DGT2_DP;
 80006ea:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80006ee:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT2_DP, &GPIO_InitStruct);
 80006f0:	f107 0314 	add.w	r3, r7, #20
 80006f4:	4619      	mov	r1, r3
 80006f6:	480c      	ldr	r0, [pc, #48]	@ (8000728 <_7SEG_GPIO_Init+0x1c8>)
 80006f8:	f003 fe36 	bl	8004368 <HAL_GPIO_Init>

	
	_7SEG_SetNumber(DGT1, 0, ON);
 80006fc:	2201      	movs	r2, #1
 80006fe:	2100      	movs	r1, #0
 8000700:	2000      	movs	r0, #0
 8000702:	f000 f813 	bl	800072c <_7SEG_SetNumber>
	_7SEG_SetNumber(DGT2, 0, ON);
 8000706:	2201      	movs	r2, #1
 8000708:	2100      	movs	r1, #0
 800070a:	2001      	movs	r0, #1
 800070c:	f000 f80e 	bl	800072c <_7SEG_SetNumber>
}
 8000710:	bf00      	nop
 8000712:	3728      	adds	r7, #40	@ 0x28
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}
 8000718:	40023800 	.word	0x40023800
 800071c:	40020c00 	.word	0x40020c00
 8000720:	40020000 	.word	0x40020000
 8000724:	40020800 	.word	0x40020800
 8000728:	40021000 	.word	0x40021000

0800072c <_7SEG_SetNumber>:


void _7SEG_SetNumber(int dgt, int num, int dp)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b084      	sub	sp, #16
 8000730:	af00      	add	r7, sp, #0
 8000732:	60f8      	str	r0, [r7, #12]
 8000734:	60b9      	str	r1, [r7, #8]
 8000736:	607a      	str	r2, [r7, #4]
	if(dgt == DGT1)
 8000738:	68fb      	ldr	r3, [r7, #12]
 800073a:	2b00      	cmp	r3, #0
 800073c:	f040 81dc 	bne.w	8000af8 <_7SEG_SetNumber+0x3cc>
	{
		switch(num%10)
 8000740:	68b9      	ldr	r1, [r7, #8]
 8000742:	4bcb      	ldr	r3, [pc, #812]	@ (8000a70 <_7SEG_SetNumber+0x344>)
 8000744:	fb83 2301 	smull	r2, r3, r3, r1
 8000748:	109a      	asrs	r2, r3, #2
 800074a:	17cb      	asrs	r3, r1, #31
 800074c:	1ad2      	subs	r2, r2, r3
 800074e:	4613      	mov	r3, r2
 8000750:	009b      	lsls	r3, r3, #2
 8000752:	4413      	add	r3, r2
 8000754:	005b      	lsls	r3, r3, #1
 8000756:	1aca      	subs	r2, r1, r3
 8000758:	2a09      	cmp	r2, #9
 800075a:	f200 81ba 	bhi.w	8000ad2 <_7SEG_SetNumber+0x3a6>
 800075e:	a301      	add	r3, pc, #4	@ (adr r3, 8000764 <_7SEG_SetNumber+0x38>)
 8000760:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 8000764:	0800078d 	.word	0x0800078d
 8000768:	080007df 	.word	0x080007df
 800076c:	08000831 	.word	0x08000831
 8000770:	08000883 	.word	0x08000883
 8000774:	080008d5 	.word	0x080008d5
 8000778:	08000927 	.word	0x08000927
 800077c:	08000979 	.word	0x08000979
 8000780:	080009cb 	.word	0x080009cb
 8000784:	08000a1d 	.word	0x08000a1d
 8000788:	08000a81 	.word	0x08000a81
		{
			case 0: DGT1_A_ON; DGT1_B_ON; DGT1_C_ON; DGT1_D_ON; DGT1_E_ON; DGT1_F_ON;
 800078c:	2200      	movs	r2, #0
 800078e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000792:	48b8      	ldr	r0, [pc, #736]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 8000794:	f003 ff9c 	bl	80046d0 <HAL_GPIO_WritePin>
 8000798:	2200      	movs	r2, #0
 800079a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800079e:	48b6      	ldr	r0, [pc, #728]	@ (8000a78 <_7SEG_SetNumber+0x34c>)
 80007a0:	f003 ff96 	bl	80046d0 <HAL_GPIO_WritePin>
 80007a4:	2200      	movs	r2, #0
 80007a6:	2140      	movs	r1, #64	@ 0x40
 80007a8:	48b2      	ldr	r0, [pc, #712]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 80007aa:	f003 ff91 	bl	80046d0 <HAL_GPIO_WritePin>
 80007ae:	2200      	movs	r2, #0
 80007b0:	2120      	movs	r1, #32
 80007b2:	48b0      	ldr	r0, [pc, #704]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 80007b4:	f003 ff8c 	bl	80046d0 <HAL_GPIO_WritePin>
 80007b8:	2200      	movs	r2, #0
 80007ba:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80007be:	48af      	ldr	r0, [pc, #700]	@ (8000a7c <_7SEG_SetNumber+0x350>)
 80007c0:	f003 ff86 	bl	80046d0 <HAL_GPIO_WritePin>
 80007c4:	2200      	movs	r2, #0
 80007c6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80007ca:	48ac      	ldr	r0, [pc, #688]	@ (8000a7c <_7SEG_SetNumber+0x350>)
 80007cc:	f003 ff80 	bl	80046d0 <HAL_GPIO_WritePin>
					DGT1_G_OFF;
 80007d0:	2201      	movs	r2, #1
 80007d2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80007d6:	48a7      	ldr	r0, [pc, #668]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 80007d8:	f003 ff7a 	bl	80046d0 <HAL_GPIO_WritePin>
				break;
 80007dc:	e179      	b.n	8000ad2 <_7SEG_SetNumber+0x3a6>
			case 1: DGT1_B_ON; DGT1_C_ON;
 80007de:	2200      	movs	r2, #0
 80007e0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80007e4:	48a4      	ldr	r0, [pc, #656]	@ (8000a78 <_7SEG_SetNumber+0x34c>)
 80007e6:	f003 ff73 	bl	80046d0 <HAL_GPIO_WritePin>
 80007ea:	2200      	movs	r2, #0
 80007ec:	2140      	movs	r1, #64	@ 0x40
 80007ee:	48a1      	ldr	r0, [pc, #644]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 80007f0:	f003 ff6e 	bl	80046d0 <HAL_GPIO_WritePin>
					DGT1_A_OFF; DGT1_D_OFF; DGT1_E_OFF; DGT1_F_OFF; DGT1_G_OFF;
 80007f4:	2201      	movs	r2, #1
 80007f6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80007fa:	489e      	ldr	r0, [pc, #632]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 80007fc:	f003 ff68 	bl	80046d0 <HAL_GPIO_WritePin>
 8000800:	2201      	movs	r2, #1
 8000802:	2120      	movs	r1, #32
 8000804:	489b      	ldr	r0, [pc, #620]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 8000806:	f003 ff63 	bl	80046d0 <HAL_GPIO_WritePin>
 800080a:	2201      	movs	r2, #1
 800080c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000810:	489a      	ldr	r0, [pc, #616]	@ (8000a7c <_7SEG_SetNumber+0x350>)
 8000812:	f003 ff5d 	bl	80046d0 <HAL_GPIO_WritePin>
 8000816:	2201      	movs	r2, #1
 8000818:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800081c:	4897      	ldr	r0, [pc, #604]	@ (8000a7c <_7SEG_SetNumber+0x350>)
 800081e:	f003 ff57 	bl	80046d0 <HAL_GPIO_WritePin>
 8000822:	2201      	movs	r2, #1
 8000824:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000828:	4892      	ldr	r0, [pc, #584]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 800082a:	f003 ff51 	bl	80046d0 <HAL_GPIO_WritePin>
				break;
 800082e:	e150      	b.n	8000ad2 <_7SEG_SetNumber+0x3a6>
			case 2: DGT1_A_ON; DGT1_B_ON; DGT1_G_ON; DGT1_E_ON; DGT1_D_ON;
 8000830:	2200      	movs	r2, #0
 8000832:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000836:	488f      	ldr	r0, [pc, #572]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 8000838:	f003 ff4a 	bl	80046d0 <HAL_GPIO_WritePin>
 800083c:	2200      	movs	r2, #0
 800083e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000842:	488d      	ldr	r0, [pc, #564]	@ (8000a78 <_7SEG_SetNumber+0x34c>)
 8000844:	f003 ff44 	bl	80046d0 <HAL_GPIO_WritePin>
 8000848:	2200      	movs	r2, #0
 800084a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800084e:	4889      	ldr	r0, [pc, #548]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 8000850:	f003 ff3e 	bl	80046d0 <HAL_GPIO_WritePin>
 8000854:	2200      	movs	r2, #0
 8000856:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800085a:	4888      	ldr	r0, [pc, #544]	@ (8000a7c <_7SEG_SetNumber+0x350>)
 800085c:	f003 ff38 	bl	80046d0 <HAL_GPIO_WritePin>
 8000860:	2200      	movs	r2, #0
 8000862:	2120      	movs	r1, #32
 8000864:	4883      	ldr	r0, [pc, #524]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 8000866:	f003 ff33 	bl	80046d0 <HAL_GPIO_WritePin>
					DGT1_C_OFF; DGT1_F_OFF;
 800086a:	2201      	movs	r2, #1
 800086c:	2140      	movs	r1, #64	@ 0x40
 800086e:	4881      	ldr	r0, [pc, #516]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 8000870:	f003 ff2e 	bl	80046d0 <HAL_GPIO_WritePin>
 8000874:	2201      	movs	r2, #1
 8000876:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800087a:	4880      	ldr	r0, [pc, #512]	@ (8000a7c <_7SEG_SetNumber+0x350>)
 800087c:	f003 ff28 	bl	80046d0 <HAL_GPIO_WritePin>
				break;
 8000880:	e127      	b.n	8000ad2 <_7SEG_SetNumber+0x3a6>
			case 3: DGT1_A_ON; DGT1_B_ON; DGT1_C_ON; DGT1_D_ON; DGT1_G_ON;
 8000882:	2200      	movs	r2, #0
 8000884:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000888:	487a      	ldr	r0, [pc, #488]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 800088a:	f003 ff21 	bl	80046d0 <HAL_GPIO_WritePin>
 800088e:	2200      	movs	r2, #0
 8000890:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000894:	4878      	ldr	r0, [pc, #480]	@ (8000a78 <_7SEG_SetNumber+0x34c>)
 8000896:	f003 ff1b 	bl	80046d0 <HAL_GPIO_WritePin>
 800089a:	2200      	movs	r2, #0
 800089c:	2140      	movs	r1, #64	@ 0x40
 800089e:	4875      	ldr	r0, [pc, #468]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 80008a0:	f003 ff16 	bl	80046d0 <HAL_GPIO_WritePin>
 80008a4:	2200      	movs	r2, #0
 80008a6:	2120      	movs	r1, #32
 80008a8:	4872      	ldr	r0, [pc, #456]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 80008aa:	f003 ff11 	bl	80046d0 <HAL_GPIO_WritePin>
 80008ae:	2200      	movs	r2, #0
 80008b0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80008b4:	486f      	ldr	r0, [pc, #444]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 80008b6:	f003 ff0b 	bl	80046d0 <HAL_GPIO_WritePin>
					DGT1_E_OFF; DGT1_F_OFF;
 80008ba:	2201      	movs	r2, #1
 80008bc:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80008c0:	486e      	ldr	r0, [pc, #440]	@ (8000a7c <_7SEG_SetNumber+0x350>)
 80008c2:	f003 ff05 	bl	80046d0 <HAL_GPIO_WritePin>
 80008c6:	2201      	movs	r2, #1
 80008c8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80008cc:	486b      	ldr	r0, [pc, #428]	@ (8000a7c <_7SEG_SetNumber+0x350>)
 80008ce:	f003 feff 	bl	80046d0 <HAL_GPIO_WritePin>
				break;
 80008d2:	e0fe      	b.n	8000ad2 <_7SEG_SetNumber+0x3a6>
			case 4: DGT1_F_ON; DGT1_G_ON; DGT1_B_ON; DGT1_C_ON;
 80008d4:	2200      	movs	r2, #0
 80008d6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80008da:	4868      	ldr	r0, [pc, #416]	@ (8000a7c <_7SEG_SetNumber+0x350>)
 80008dc:	f003 fef8 	bl	80046d0 <HAL_GPIO_WritePin>
 80008e0:	2200      	movs	r2, #0
 80008e2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80008e6:	4863      	ldr	r0, [pc, #396]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 80008e8:	f003 fef2 	bl	80046d0 <HAL_GPIO_WritePin>
 80008ec:	2200      	movs	r2, #0
 80008ee:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80008f2:	4861      	ldr	r0, [pc, #388]	@ (8000a78 <_7SEG_SetNumber+0x34c>)
 80008f4:	f003 feec 	bl	80046d0 <HAL_GPIO_WritePin>
 80008f8:	2200      	movs	r2, #0
 80008fa:	2140      	movs	r1, #64	@ 0x40
 80008fc:	485d      	ldr	r0, [pc, #372]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 80008fe:	f003 fee7 	bl	80046d0 <HAL_GPIO_WritePin>
					DGT1_A_OFF; DGT1_D_OFF; DGT1_E_OFF;
 8000902:	2201      	movs	r2, #1
 8000904:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000908:	485a      	ldr	r0, [pc, #360]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 800090a:	f003 fee1 	bl	80046d0 <HAL_GPIO_WritePin>
 800090e:	2201      	movs	r2, #1
 8000910:	2120      	movs	r1, #32
 8000912:	4858      	ldr	r0, [pc, #352]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 8000914:	f003 fedc 	bl	80046d0 <HAL_GPIO_WritePin>
 8000918:	2201      	movs	r2, #1
 800091a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800091e:	4857      	ldr	r0, [pc, #348]	@ (8000a7c <_7SEG_SetNumber+0x350>)
 8000920:	f003 fed6 	bl	80046d0 <HAL_GPIO_WritePin>
				break;
 8000924:	e0d5      	b.n	8000ad2 <_7SEG_SetNumber+0x3a6>
			case 5: DGT1_A_ON; DGT1_F_ON; DGT1_G_ON; DGT1_C_ON; DGT1_D_ON;
 8000926:	2200      	movs	r2, #0
 8000928:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800092c:	4851      	ldr	r0, [pc, #324]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 800092e:	f003 fecf 	bl	80046d0 <HAL_GPIO_WritePin>
 8000932:	2200      	movs	r2, #0
 8000934:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000938:	4850      	ldr	r0, [pc, #320]	@ (8000a7c <_7SEG_SetNumber+0x350>)
 800093a:	f003 fec9 	bl	80046d0 <HAL_GPIO_WritePin>
 800093e:	2200      	movs	r2, #0
 8000940:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000944:	484b      	ldr	r0, [pc, #300]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 8000946:	f003 fec3 	bl	80046d0 <HAL_GPIO_WritePin>
 800094a:	2200      	movs	r2, #0
 800094c:	2140      	movs	r1, #64	@ 0x40
 800094e:	4849      	ldr	r0, [pc, #292]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 8000950:	f003 febe 	bl	80046d0 <HAL_GPIO_WritePin>
 8000954:	2200      	movs	r2, #0
 8000956:	2120      	movs	r1, #32
 8000958:	4846      	ldr	r0, [pc, #280]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 800095a:	f003 feb9 	bl	80046d0 <HAL_GPIO_WritePin>
					DGT1_B_OFF; DGT1_E_OFF;
 800095e:	2201      	movs	r2, #1
 8000960:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000964:	4844      	ldr	r0, [pc, #272]	@ (8000a78 <_7SEG_SetNumber+0x34c>)
 8000966:	f003 feb3 	bl	80046d0 <HAL_GPIO_WritePin>
 800096a:	2201      	movs	r2, #1
 800096c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000970:	4842      	ldr	r0, [pc, #264]	@ (8000a7c <_7SEG_SetNumber+0x350>)
 8000972:	f003 fead 	bl	80046d0 <HAL_GPIO_WritePin>
				break;
 8000976:	e0ac      	b.n	8000ad2 <_7SEG_SetNumber+0x3a6>
			case 6: DGT1_A_ON; DGT1_C_ON; DGT1_D_ON; DGT1_E_ON; DGT1_F_ON; DGT1_G_ON;
 8000978:	2200      	movs	r2, #0
 800097a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800097e:	483d      	ldr	r0, [pc, #244]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 8000980:	f003 fea6 	bl	80046d0 <HAL_GPIO_WritePin>
 8000984:	2200      	movs	r2, #0
 8000986:	2140      	movs	r1, #64	@ 0x40
 8000988:	483a      	ldr	r0, [pc, #232]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 800098a:	f003 fea1 	bl	80046d0 <HAL_GPIO_WritePin>
 800098e:	2200      	movs	r2, #0
 8000990:	2120      	movs	r1, #32
 8000992:	4838      	ldr	r0, [pc, #224]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 8000994:	f003 fe9c 	bl	80046d0 <HAL_GPIO_WritePin>
 8000998:	2200      	movs	r2, #0
 800099a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800099e:	4837      	ldr	r0, [pc, #220]	@ (8000a7c <_7SEG_SetNumber+0x350>)
 80009a0:	f003 fe96 	bl	80046d0 <HAL_GPIO_WritePin>
 80009a4:	2200      	movs	r2, #0
 80009a6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80009aa:	4834      	ldr	r0, [pc, #208]	@ (8000a7c <_7SEG_SetNumber+0x350>)
 80009ac:	f003 fe90 	bl	80046d0 <HAL_GPIO_WritePin>
 80009b0:	2200      	movs	r2, #0
 80009b2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80009b6:	482f      	ldr	r0, [pc, #188]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 80009b8:	f003 fe8a 	bl	80046d0 <HAL_GPIO_WritePin>
					DGT1_B_OFF;
 80009bc:	2201      	movs	r2, #1
 80009be:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80009c2:	482d      	ldr	r0, [pc, #180]	@ (8000a78 <_7SEG_SetNumber+0x34c>)
 80009c4:	f003 fe84 	bl	80046d0 <HAL_GPIO_WritePin>
				break;
 80009c8:	e083      	b.n	8000ad2 <_7SEG_SetNumber+0x3a6>
			case 7: DGT1_F_ON; DGT1_A_ON; DGT1_B_ON; DGT1_C_ON;
 80009ca:	2200      	movs	r2, #0
 80009cc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80009d0:	482a      	ldr	r0, [pc, #168]	@ (8000a7c <_7SEG_SetNumber+0x350>)
 80009d2:	f003 fe7d 	bl	80046d0 <HAL_GPIO_WritePin>
 80009d6:	2200      	movs	r2, #0
 80009d8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80009dc:	4825      	ldr	r0, [pc, #148]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 80009de:	f003 fe77 	bl	80046d0 <HAL_GPIO_WritePin>
 80009e2:	2200      	movs	r2, #0
 80009e4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80009e8:	4823      	ldr	r0, [pc, #140]	@ (8000a78 <_7SEG_SetNumber+0x34c>)
 80009ea:	f003 fe71 	bl	80046d0 <HAL_GPIO_WritePin>
 80009ee:	2200      	movs	r2, #0
 80009f0:	2140      	movs	r1, #64	@ 0x40
 80009f2:	4820      	ldr	r0, [pc, #128]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 80009f4:	f003 fe6c 	bl	80046d0 <HAL_GPIO_WritePin>
					DGT1_D_OFF; DGT1_E_OFF; DGT1_G_OFF;
 80009f8:	2201      	movs	r2, #1
 80009fa:	2120      	movs	r1, #32
 80009fc:	481d      	ldr	r0, [pc, #116]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 80009fe:	f003 fe67 	bl	80046d0 <HAL_GPIO_WritePin>
 8000a02:	2201      	movs	r2, #1
 8000a04:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000a08:	481c      	ldr	r0, [pc, #112]	@ (8000a7c <_7SEG_SetNumber+0x350>)
 8000a0a:	f003 fe61 	bl	80046d0 <HAL_GPIO_WritePin>
 8000a0e:	2201      	movs	r2, #1
 8000a10:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000a14:	4817      	ldr	r0, [pc, #92]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 8000a16:	f003 fe5b 	bl	80046d0 <HAL_GPIO_WritePin>
				break;
 8000a1a:	e05a      	b.n	8000ad2 <_7SEG_SetNumber+0x3a6>
			case 8: DGT1_A_ON; DGT1_B_ON; DGT1_C_ON; DGT1_D_ON; DGT1_E_ON; DGT1_F_ON; DGT1_G_ON;
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000a22:	4814      	ldr	r0, [pc, #80]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 8000a24:	f003 fe54 	bl	80046d0 <HAL_GPIO_WritePin>
 8000a28:	2200      	movs	r2, #0
 8000a2a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000a2e:	4812      	ldr	r0, [pc, #72]	@ (8000a78 <_7SEG_SetNumber+0x34c>)
 8000a30:	f003 fe4e 	bl	80046d0 <HAL_GPIO_WritePin>
 8000a34:	2200      	movs	r2, #0
 8000a36:	2140      	movs	r1, #64	@ 0x40
 8000a38:	480e      	ldr	r0, [pc, #56]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 8000a3a:	f003 fe49 	bl	80046d0 <HAL_GPIO_WritePin>
 8000a3e:	2200      	movs	r2, #0
 8000a40:	2120      	movs	r1, #32
 8000a42:	480c      	ldr	r0, [pc, #48]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 8000a44:	f003 fe44 	bl	80046d0 <HAL_GPIO_WritePin>
 8000a48:	2200      	movs	r2, #0
 8000a4a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000a4e:	480b      	ldr	r0, [pc, #44]	@ (8000a7c <_7SEG_SetNumber+0x350>)
 8000a50:	f003 fe3e 	bl	80046d0 <HAL_GPIO_WritePin>
 8000a54:	2200      	movs	r2, #0
 8000a56:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a5a:	4808      	ldr	r0, [pc, #32]	@ (8000a7c <_7SEG_SetNumber+0x350>)
 8000a5c:	f003 fe38 	bl	80046d0 <HAL_GPIO_WritePin>
 8000a60:	2200      	movs	r2, #0
 8000a62:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000a66:	4803      	ldr	r0, [pc, #12]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 8000a68:	f003 fe32 	bl	80046d0 <HAL_GPIO_WritePin>
				break;
 8000a6c:	e031      	b.n	8000ad2 <_7SEG_SetNumber+0x3a6>
 8000a6e:	bf00      	nop
 8000a70:	66666667 	.word	0x66666667
 8000a74:	40020c00 	.word	0x40020c00
 8000a78:	40020000 	.word	0x40020000
 8000a7c:	40020800 	.word	0x40020800
			case 9: DGT1_A_ON; DGT1_B_ON; DGT1_C_ON; DGT1_D_ON; DGT1_F_ON; DGT1_G_ON;
 8000a80:	2200      	movs	r2, #0
 8000a82:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000a86:	48c8      	ldr	r0, [pc, #800]	@ (8000da8 <_7SEG_SetNumber+0x67c>)
 8000a88:	f003 fe22 	bl	80046d0 <HAL_GPIO_WritePin>
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000a92:	48c6      	ldr	r0, [pc, #792]	@ (8000dac <_7SEG_SetNumber+0x680>)
 8000a94:	f003 fe1c 	bl	80046d0 <HAL_GPIO_WritePin>
 8000a98:	2200      	movs	r2, #0
 8000a9a:	2140      	movs	r1, #64	@ 0x40
 8000a9c:	48c2      	ldr	r0, [pc, #776]	@ (8000da8 <_7SEG_SetNumber+0x67c>)
 8000a9e:	f003 fe17 	bl	80046d0 <HAL_GPIO_WritePin>
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	2120      	movs	r1, #32
 8000aa6:	48c0      	ldr	r0, [pc, #768]	@ (8000da8 <_7SEG_SetNumber+0x67c>)
 8000aa8:	f003 fe12 	bl	80046d0 <HAL_GPIO_WritePin>
 8000aac:	2200      	movs	r2, #0
 8000aae:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000ab2:	48bf      	ldr	r0, [pc, #764]	@ (8000db0 <_7SEG_SetNumber+0x684>)
 8000ab4:	f003 fe0c 	bl	80046d0 <HAL_GPIO_WritePin>
 8000ab8:	2200      	movs	r2, #0
 8000aba:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000abe:	48ba      	ldr	r0, [pc, #744]	@ (8000da8 <_7SEG_SetNumber+0x67c>)
 8000ac0:	f003 fe06 	bl	80046d0 <HAL_GPIO_WritePin>
					DGT1_E_OFF;
 8000ac4:	2201      	movs	r2, #1
 8000ac6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000aca:	48b9      	ldr	r0, [pc, #740]	@ (8000db0 <_7SEG_SetNumber+0x684>)
 8000acc:	f003 fe00 	bl	80046d0 <HAL_GPIO_WritePin>
				break;
 8000ad0:	bf00      	nop
		}

		if(dp == ON)
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	2b01      	cmp	r3, #1
 8000ad6:	d105      	bne.n	8000ae4 <_7SEG_SetNumber+0x3b8>
		{
			DGT1_DP_ON;
 8000ad8:	2200      	movs	r2, #0
 8000ada:	2180      	movs	r1, #128	@ 0x80
 8000adc:	48b2      	ldr	r0, [pc, #712]	@ (8000da8 <_7SEG_SetNumber+0x67c>)
 8000ade:	f003 fdf7 	bl	80046d0 <HAL_GPIO_WritePin>
		else if(dp == OFF)
		{
			DGT2_DP_OFF;
		}
	}
}
 8000ae2:	e1ff      	b.n	8000ee4 <_7SEG_SetNumber+0x7b8>
		else if(dp == OFF)
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	f040 81fc 	bne.w	8000ee4 <_7SEG_SetNumber+0x7b8>
			DGT1_DP_OFF;
 8000aec:	2201      	movs	r2, #1
 8000aee:	2180      	movs	r1, #128	@ 0x80
 8000af0:	48ad      	ldr	r0, [pc, #692]	@ (8000da8 <_7SEG_SetNumber+0x67c>)
 8000af2:	f003 fded 	bl	80046d0 <HAL_GPIO_WritePin>
}
 8000af6:	e1f5      	b.n	8000ee4 <_7SEG_SetNumber+0x7b8>
	else if(dgt == DGT2)
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	2b01      	cmp	r3, #1
 8000afc:	f040 81f2 	bne.w	8000ee4 <_7SEG_SetNumber+0x7b8>
		switch(num%10)
 8000b00:	68b9      	ldr	r1, [r7, #8]
 8000b02:	4bac      	ldr	r3, [pc, #688]	@ (8000db4 <_7SEG_SetNumber+0x688>)
 8000b04:	fb83 2301 	smull	r2, r3, r3, r1
 8000b08:	109a      	asrs	r2, r3, #2
 8000b0a:	17cb      	asrs	r3, r1, #31
 8000b0c:	1ad2      	subs	r2, r2, r3
 8000b0e:	4613      	mov	r3, r2
 8000b10:	009b      	lsls	r3, r3, #2
 8000b12:	4413      	add	r3, r2
 8000b14:	005b      	lsls	r3, r3, #1
 8000b16:	1aca      	subs	r2, r1, r3
 8000b18:	2a09      	cmp	r2, #9
 8000b1a:	f200 81d0 	bhi.w	8000ebe <_7SEG_SetNumber+0x792>
 8000b1e:	a301      	add	r3, pc, #4	@ (adr r3, 8000b24 <_7SEG_SetNumber+0x3f8>)
 8000b20:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 8000b24:	08000b4d 	.word	0x08000b4d
 8000b28:	08000ba3 	.word	0x08000ba3
 8000b2c:	08000bf9 	.word	0x08000bf9
 8000b30:	08000c4f 	.word	0x08000c4f
 8000b34:	08000ca5 	.word	0x08000ca5
 8000b38:	08000cfb 	.word	0x08000cfb
 8000b3c:	08000d51 	.word	0x08000d51
 8000b40:	08000dbd 	.word	0x08000dbd
 8000b44:	08000e13 	.word	0x08000e13
 8000b48:	08000e69 	.word	0x08000e69
			case 0: DGT2_A_ON; DGT2_B_ON; DGT2_C_ON; DGT2_D_ON; DGT2_E_ON; DGT2_F_ON;
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000b52:	4899      	ldr	r0, [pc, #612]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000b54:	f003 fdbc 	bl	80046d0 <HAL_GPIO_WritePin>
 8000b58:	2200      	movs	r2, #0
 8000b5a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000b5e:	4896      	ldr	r0, [pc, #600]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000b60:	f003 fdb6 	bl	80046d0 <HAL_GPIO_WritePin>
 8000b64:	2200      	movs	r2, #0
 8000b66:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000b6a:	4893      	ldr	r0, [pc, #588]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000b6c:	f003 fdb0 	bl	80046d0 <HAL_GPIO_WritePin>
 8000b70:	2200      	movs	r2, #0
 8000b72:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000b76:	4890      	ldr	r0, [pc, #576]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000b78:	f003 fdaa 	bl	80046d0 <HAL_GPIO_WritePin>
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000b82:	488d      	ldr	r0, [pc, #564]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000b84:	f003 fda4 	bl	80046d0 <HAL_GPIO_WritePin>
 8000b88:	2200      	movs	r2, #0
 8000b8a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000b8e:	488a      	ldr	r0, [pc, #552]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000b90:	f003 fd9e 	bl	80046d0 <HAL_GPIO_WritePin>
					DGT2_G_OFF;
 8000b94:	2201      	movs	r2, #1
 8000b96:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000b9a:	4887      	ldr	r0, [pc, #540]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000b9c:	f003 fd98 	bl	80046d0 <HAL_GPIO_WritePin>
				break;
 8000ba0:	e18d      	b.n	8000ebe <_7SEG_SetNumber+0x792>
			case 1: DGT2_B_ON; DGT2_C_ON;
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000ba8:	4883      	ldr	r0, [pc, #524]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000baa:	f003 fd91 	bl	80046d0 <HAL_GPIO_WritePin>
 8000bae:	2200      	movs	r2, #0
 8000bb0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000bb4:	4880      	ldr	r0, [pc, #512]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000bb6:	f003 fd8b 	bl	80046d0 <HAL_GPIO_WritePin>
					DGT2_A_OFF; DGT2_D_OFF; DGT2_E_OFF; DGT2_F_OFF; DGT2_G_OFF;
 8000bba:	2201      	movs	r2, #1
 8000bbc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000bc0:	487d      	ldr	r0, [pc, #500]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000bc2:	f003 fd85 	bl	80046d0 <HAL_GPIO_WritePin>
 8000bc6:	2201      	movs	r2, #1
 8000bc8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000bcc:	487a      	ldr	r0, [pc, #488]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000bce:	f003 fd7f 	bl	80046d0 <HAL_GPIO_WritePin>
 8000bd2:	2201      	movs	r2, #1
 8000bd4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000bd8:	4877      	ldr	r0, [pc, #476]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000bda:	f003 fd79 	bl	80046d0 <HAL_GPIO_WritePin>
 8000bde:	2201      	movs	r2, #1
 8000be0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000be4:	4874      	ldr	r0, [pc, #464]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000be6:	f003 fd73 	bl	80046d0 <HAL_GPIO_WritePin>
 8000bea:	2201      	movs	r2, #1
 8000bec:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000bf0:	4871      	ldr	r0, [pc, #452]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000bf2:	f003 fd6d 	bl	80046d0 <HAL_GPIO_WritePin>
				break;
 8000bf6:	e162      	b.n	8000ebe <_7SEG_SetNumber+0x792>
			case 2: DGT2_A_ON; DGT2_B_ON; DGT2_G_ON; DGT2_E_ON; DGT2_D_ON;
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000bfe:	486e      	ldr	r0, [pc, #440]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000c00:	f003 fd66 	bl	80046d0 <HAL_GPIO_WritePin>
 8000c04:	2200      	movs	r2, #0
 8000c06:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000c0a:	486b      	ldr	r0, [pc, #428]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000c0c:	f003 fd60 	bl	80046d0 <HAL_GPIO_WritePin>
 8000c10:	2200      	movs	r2, #0
 8000c12:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000c16:	4868      	ldr	r0, [pc, #416]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000c18:	f003 fd5a 	bl	80046d0 <HAL_GPIO_WritePin>
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000c22:	4865      	ldr	r0, [pc, #404]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000c24:	f003 fd54 	bl	80046d0 <HAL_GPIO_WritePin>
 8000c28:	2200      	movs	r2, #0
 8000c2a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000c2e:	4862      	ldr	r0, [pc, #392]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000c30:	f003 fd4e 	bl	80046d0 <HAL_GPIO_WritePin>
					DGT2_C_OFF; DGT2_F_OFF;
 8000c34:	2201      	movs	r2, #1
 8000c36:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000c3a:	485f      	ldr	r0, [pc, #380]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000c3c:	f003 fd48 	bl	80046d0 <HAL_GPIO_WritePin>
 8000c40:	2201      	movs	r2, #1
 8000c42:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000c46:	485c      	ldr	r0, [pc, #368]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000c48:	f003 fd42 	bl	80046d0 <HAL_GPIO_WritePin>
				break;
 8000c4c:	e137      	b.n	8000ebe <_7SEG_SetNumber+0x792>
			case 3: DGT2_A_ON; DGT2_B_ON; DGT2_C_ON; DGT2_D_ON; DGT2_G_ON;
 8000c4e:	2200      	movs	r2, #0
 8000c50:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000c54:	4858      	ldr	r0, [pc, #352]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000c56:	f003 fd3b 	bl	80046d0 <HAL_GPIO_WritePin>
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000c60:	4855      	ldr	r0, [pc, #340]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000c62:	f003 fd35 	bl	80046d0 <HAL_GPIO_WritePin>
 8000c66:	2200      	movs	r2, #0
 8000c68:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000c6c:	4852      	ldr	r0, [pc, #328]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000c6e:	f003 fd2f 	bl	80046d0 <HAL_GPIO_WritePin>
 8000c72:	2200      	movs	r2, #0
 8000c74:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000c78:	484f      	ldr	r0, [pc, #316]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000c7a:	f003 fd29 	bl	80046d0 <HAL_GPIO_WritePin>
 8000c7e:	2200      	movs	r2, #0
 8000c80:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000c84:	484c      	ldr	r0, [pc, #304]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000c86:	f003 fd23 	bl	80046d0 <HAL_GPIO_WritePin>
					DGT2_E_OFF; DGT2_F_OFF;
 8000c8a:	2201      	movs	r2, #1
 8000c8c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000c90:	4849      	ldr	r0, [pc, #292]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000c92:	f003 fd1d 	bl	80046d0 <HAL_GPIO_WritePin>
 8000c96:	2201      	movs	r2, #1
 8000c98:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000c9c:	4846      	ldr	r0, [pc, #280]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000c9e:	f003 fd17 	bl	80046d0 <HAL_GPIO_WritePin>
				break;
 8000ca2:	e10c      	b.n	8000ebe <_7SEG_SetNumber+0x792>
			case 4: DGT2_F_ON; DGT2_G_ON; DGT2_B_ON; DGT2_C_ON;
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000caa:	4843      	ldr	r0, [pc, #268]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000cac:	f003 fd10 	bl	80046d0 <HAL_GPIO_WritePin>
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000cb6:	4840      	ldr	r0, [pc, #256]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000cb8:	f003 fd0a 	bl	80046d0 <HAL_GPIO_WritePin>
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000cc2:	483d      	ldr	r0, [pc, #244]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000cc4:	f003 fd04 	bl	80046d0 <HAL_GPIO_WritePin>
 8000cc8:	2200      	movs	r2, #0
 8000cca:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000cce:	483a      	ldr	r0, [pc, #232]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000cd0:	f003 fcfe 	bl	80046d0 <HAL_GPIO_WritePin>
					DGT2_A_OFF; DGT2_D_OFF; DGT2_E_OFF;
 8000cd4:	2201      	movs	r2, #1
 8000cd6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000cda:	4837      	ldr	r0, [pc, #220]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000cdc:	f003 fcf8 	bl	80046d0 <HAL_GPIO_WritePin>
 8000ce0:	2201      	movs	r2, #1
 8000ce2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000ce6:	4834      	ldr	r0, [pc, #208]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000ce8:	f003 fcf2 	bl	80046d0 <HAL_GPIO_WritePin>
 8000cec:	2201      	movs	r2, #1
 8000cee:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000cf2:	4831      	ldr	r0, [pc, #196]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000cf4:	f003 fcec 	bl	80046d0 <HAL_GPIO_WritePin>
				break;
 8000cf8:	e0e1      	b.n	8000ebe <_7SEG_SetNumber+0x792>
			case 5: DGT2_A_ON; DGT2_F_ON; DGT2_G_ON; DGT2_C_ON; DGT2_D_ON;
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000d00:	482d      	ldr	r0, [pc, #180]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000d02:	f003 fce5 	bl	80046d0 <HAL_GPIO_WritePin>
 8000d06:	2200      	movs	r2, #0
 8000d08:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000d0c:	482a      	ldr	r0, [pc, #168]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000d0e:	f003 fcdf 	bl	80046d0 <HAL_GPIO_WritePin>
 8000d12:	2200      	movs	r2, #0
 8000d14:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000d18:	4827      	ldr	r0, [pc, #156]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000d1a:	f003 fcd9 	bl	80046d0 <HAL_GPIO_WritePin>
 8000d1e:	2200      	movs	r2, #0
 8000d20:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000d24:	4824      	ldr	r0, [pc, #144]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000d26:	f003 fcd3 	bl	80046d0 <HAL_GPIO_WritePin>
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000d30:	4821      	ldr	r0, [pc, #132]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000d32:	f003 fccd 	bl	80046d0 <HAL_GPIO_WritePin>
					DGT2_B_OFF; DGT2_E_OFF;
 8000d36:	2201      	movs	r2, #1
 8000d38:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000d3c:	481e      	ldr	r0, [pc, #120]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000d3e:	f003 fcc7 	bl	80046d0 <HAL_GPIO_WritePin>
 8000d42:	2201      	movs	r2, #1
 8000d44:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000d48:	481b      	ldr	r0, [pc, #108]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000d4a:	f003 fcc1 	bl	80046d0 <HAL_GPIO_WritePin>
				break;
 8000d4e:	e0b6      	b.n	8000ebe <_7SEG_SetNumber+0x792>
			case 6: DGT2_A_ON; DGT2_C_ON; DGT2_D_ON; DGT2_E_ON; DGT2_F_ON; DGT2_G_ON;
 8000d50:	2200      	movs	r2, #0
 8000d52:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000d56:	4818      	ldr	r0, [pc, #96]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000d58:	f003 fcba 	bl	80046d0 <HAL_GPIO_WritePin>
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000d62:	4815      	ldr	r0, [pc, #84]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000d64:	f003 fcb4 	bl	80046d0 <HAL_GPIO_WritePin>
 8000d68:	2200      	movs	r2, #0
 8000d6a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000d6e:	4812      	ldr	r0, [pc, #72]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000d70:	f003 fcae 	bl	80046d0 <HAL_GPIO_WritePin>
 8000d74:	2200      	movs	r2, #0
 8000d76:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000d7a:	480f      	ldr	r0, [pc, #60]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000d7c:	f003 fca8 	bl	80046d0 <HAL_GPIO_WritePin>
 8000d80:	2200      	movs	r2, #0
 8000d82:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000d86:	480c      	ldr	r0, [pc, #48]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000d88:	f003 fca2 	bl	80046d0 <HAL_GPIO_WritePin>
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000d92:	4809      	ldr	r0, [pc, #36]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000d94:	f003 fc9c 	bl	80046d0 <HAL_GPIO_WritePin>
					DGT2_B_OFF;
 8000d98:	2201      	movs	r2, #1
 8000d9a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000d9e:	4806      	ldr	r0, [pc, #24]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000da0:	f003 fc96 	bl	80046d0 <HAL_GPIO_WritePin>
				break;
 8000da4:	e08b      	b.n	8000ebe <_7SEG_SetNumber+0x792>
 8000da6:	bf00      	nop
 8000da8:	40020c00 	.word	0x40020c00
 8000dac:	40020000 	.word	0x40020000
 8000db0:	40020800 	.word	0x40020800
 8000db4:	66666667 	.word	0x66666667
 8000db8:	40021000 	.word	0x40021000
			case 7: DGT2_F_ON; DGT2_A_ON; DGT2_B_ON; DGT2_C_ON;
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000dc2:	484a      	ldr	r0, [pc, #296]	@ (8000eec <_7SEG_SetNumber+0x7c0>)
 8000dc4:	f003 fc84 	bl	80046d0 <HAL_GPIO_WritePin>
 8000dc8:	2200      	movs	r2, #0
 8000dca:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000dce:	4847      	ldr	r0, [pc, #284]	@ (8000eec <_7SEG_SetNumber+0x7c0>)
 8000dd0:	f003 fc7e 	bl	80046d0 <HAL_GPIO_WritePin>
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000dda:	4844      	ldr	r0, [pc, #272]	@ (8000eec <_7SEG_SetNumber+0x7c0>)
 8000ddc:	f003 fc78 	bl	80046d0 <HAL_GPIO_WritePin>
 8000de0:	2200      	movs	r2, #0
 8000de2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000de6:	4841      	ldr	r0, [pc, #260]	@ (8000eec <_7SEG_SetNumber+0x7c0>)
 8000de8:	f003 fc72 	bl	80046d0 <HAL_GPIO_WritePin>
					DGT2_D_OFF; DGT2_E_OFF; DGT2_G_OFF;
 8000dec:	2201      	movs	r2, #1
 8000dee:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000df2:	483e      	ldr	r0, [pc, #248]	@ (8000eec <_7SEG_SetNumber+0x7c0>)
 8000df4:	f003 fc6c 	bl	80046d0 <HAL_GPIO_WritePin>
 8000df8:	2201      	movs	r2, #1
 8000dfa:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000dfe:	483b      	ldr	r0, [pc, #236]	@ (8000eec <_7SEG_SetNumber+0x7c0>)
 8000e00:	f003 fc66 	bl	80046d0 <HAL_GPIO_WritePin>
 8000e04:	2201      	movs	r2, #1
 8000e06:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000e0a:	4838      	ldr	r0, [pc, #224]	@ (8000eec <_7SEG_SetNumber+0x7c0>)
 8000e0c:	f003 fc60 	bl	80046d0 <HAL_GPIO_WritePin>
				break;
 8000e10:	e055      	b.n	8000ebe <_7SEG_SetNumber+0x792>
			case 8: DGT2_A_ON; DGT2_B_ON; DGT2_C_ON; DGT2_D_ON; DGT2_E_ON; DGT2_F_ON; DGT2_G_ON;
 8000e12:	2200      	movs	r2, #0
 8000e14:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000e18:	4834      	ldr	r0, [pc, #208]	@ (8000eec <_7SEG_SetNumber+0x7c0>)
 8000e1a:	f003 fc59 	bl	80046d0 <HAL_GPIO_WritePin>
 8000e1e:	2200      	movs	r2, #0
 8000e20:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000e24:	4831      	ldr	r0, [pc, #196]	@ (8000eec <_7SEG_SetNumber+0x7c0>)
 8000e26:	f003 fc53 	bl	80046d0 <HAL_GPIO_WritePin>
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000e30:	482e      	ldr	r0, [pc, #184]	@ (8000eec <_7SEG_SetNumber+0x7c0>)
 8000e32:	f003 fc4d 	bl	80046d0 <HAL_GPIO_WritePin>
 8000e36:	2200      	movs	r2, #0
 8000e38:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000e3c:	482b      	ldr	r0, [pc, #172]	@ (8000eec <_7SEG_SetNumber+0x7c0>)
 8000e3e:	f003 fc47 	bl	80046d0 <HAL_GPIO_WritePin>
 8000e42:	2200      	movs	r2, #0
 8000e44:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000e48:	4828      	ldr	r0, [pc, #160]	@ (8000eec <_7SEG_SetNumber+0x7c0>)
 8000e4a:	f003 fc41 	bl	80046d0 <HAL_GPIO_WritePin>
 8000e4e:	2200      	movs	r2, #0
 8000e50:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000e54:	4825      	ldr	r0, [pc, #148]	@ (8000eec <_7SEG_SetNumber+0x7c0>)
 8000e56:	f003 fc3b 	bl	80046d0 <HAL_GPIO_WritePin>
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000e60:	4822      	ldr	r0, [pc, #136]	@ (8000eec <_7SEG_SetNumber+0x7c0>)
 8000e62:	f003 fc35 	bl	80046d0 <HAL_GPIO_WritePin>
				break;
 8000e66:	e02a      	b.n	8000ebe <_7SEG_SetNumber+0x792>
			case 9: DGT2_A_ON; DGT2_B_ON; DGT2_C_ON; DGT2_D_ON; DGT2_F_ON; DGT2_G_ON;
 8000e68:	2200      	movs	r2, #0
 8000e6a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000e6e:	481f      	ldr	r0, [pc, #124]	@ (8000eec <_7SEG_SetNumber+0x7c0>)
 8000e70:	f003 fc2e 	bl	80046d0 <HAL_GPIO_WritePin>
 8000e74:	2200      	movs	r2, #0
 8000e76:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000e7a:	481c      	ldr	r0, [pc, #112]	@ (8000eec <_7SEG_SetNumber+0x7c0>)
 8000e7c:	f003 fc28 	bl	80046d0 <HAL_GPIO_WritePin>
 8000e80:	2200      	movs	r2, #0
 8000e82:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000e86:	4819      	ldr	r0, [pc, #100]	@ (8000eec <_7SEG_SetNumber+0x7c0>)
 8000e88:	f003 fc22 	bl	80046d0 <HAL_GPIO_WritePin>
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000e92:	4816      	ldr	r0, [pc, #88]	@ (8000eec <_7SEG_SetNumber+0x7c0>)
 8000e94:	f003 fc1c 	bl	80046d0 <HAL_GPIO_WritePin>
 8000e98:	2200      	movs	r2, #0
 8000e9a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000e9e:	4813      	ldr	r0, [pc, #76]	@ (8000eec <_7SEG_SetNumber+0x7c0>)
 8000ea0:	f003 fc16 	bl	80046d0 <HAL_GPIO_WritePin>
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000eaa:	4810      	ldr	r0, [pc, #64]	@ (8000eec <_7SEG_SetNumber+0x7c0>)
 8000eac:	f003 fc10 	bl	80046d0 <HAL_GPIO_WritePin>
					DGT2_E_OFF;
 8000eb0:	2201      	movs	r2, #1
 8000eb2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000eb6:	480d      	ldr	r0, [pc, #52]	@ (8000eec <_7SEG_SetNumber+0x7c0>)
 8000eb8:	f003 fc0a 	bl	80046d0 <HAL_GPIO_WritePin>
				break;
 8000ebc:	bf00      	nop
		if(dp == ON)
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	2b01      	cmp	r3, #1
 8000ec2:	d106      	bne.n	8000ed2 <_7SEG_SetNumber+0x7a6>
			DGT2_DP_ON;
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000eca:	4808      	ldr	r0, [pc, #32]	@ (8000eec <_7SEG_SetNumber+0x7c0>)
 8000ecc:	f003 fc00 	bl	80046d0 <HAL_GPIO_WritePin>
}
 8000ed0:	e008      	b.n	8000ee4 <_7SEG_SetNumber+0x7b8>
		else if(dp == OFF)
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d105      	bne.n	8000ee4 <_7SEG_SetNumber+0x7b8>
			DGT2_DP_OFF;
 8000ed8:	2201      	movs	r2, #1
 8000eda:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000ede:	4803      	ldr	r0, [pc, #12]	@ (8000eec <_7SEG_SetNumber+0x7c0>)
 8000ee0:	f003 fbf6 	bl	80046d0 <HAL_GPIO_WritePin>
}
 8000ee4:	bf00      	nop
 8000ee6:	3710      	adds	r7, #16
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	40021000 	.word	0x40021000

08000ef0 <CLCD_GPIO_Init>:
 */

#include "CLCD.h"

void CLCD_GPIO_Init(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b086      	sub	sp, #24
 8000ef4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct;

	/* GPIOE Periph clock enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	603b      	str	r3, [r7, #0]
 8000efa:	4b23      	ldr	r3, [pc, #140]	@ (8000f88 <CLCD_GPIO_Init+0x98>)
 8000efc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000efe:	4a22      	ldr	r2, [pc, #136]	@ (8000f88 <CLCD_GPIO_Init+0x98>)
 8000f00:	f043 0310 	orr.w	r3, r3, #16
 8000f04:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f06:	4b20      	ldr	r3, [pc, #128]	@ (8000f88 <CLCD_GPIO_Init+0x98>)
 8000f08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f0a:	f003 0310 	and.w	r3, r3, #16
 8000f0e:	603b      	str	r3, [r7, #0]
 8000f10:	683b      	ldr	r3, [r7, #0]

	/* Configure RS, RW, EN, D4, D5, D6, D7 in output pushpull mode */
	GPIO_InitStruct.Pin = GPIO_PIN_RS;
 8000f12:	2301      	movs	r3, #1
 8000f14:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f16:	2301      	movs	r3, #1
 8000f18:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIO_RS, &GPIO_InitStruct);
 8000f22:	1d3b      	adds	r3, r7, #4
 8000f24:	4619      	mov	r1, r3
 8000f26:	4819      	ldr	r0, [pc, #100]	@ (8000f8c <CLCD_GPIO_Init+0x9c>)
 8000f28:	f003 fa1e 	bl	8004368 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = GPIO_PIN_RW;
 8000f2c:	2302      	movs	r3, #2
 8000f2e:	607b      	str	r3, [r7, #4]
	HAL_GPIO_Init(GPIO_RW, &GPIO_InitStruct);
 8000f30:	1d3b      	adds	r3, r7, #4
 8000f32:	4619      	mov	r1, r3
 8000f34:	4815      	ldr	r0, [pc, #84]	@ (8000f8c <CLCD_GPIO_Init+0x9c>)
 8000f36:	f003 fa17 	bl	8004368 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = GPIO_PIN_EN;
 8000f3a:	2304      	movs	r3, #4
 8000f3c:	607b      	str	r3, [r7, #4]
	HAL_GPIO_Init(GPIO_EN, &GPIO_InitStruct);
 8000f3e:	1d3b      	adds	r3, r7, #4
 8000f40:	4619      	mov	r1, r3
 8000f42:	4812      	ldr	r0, [pc, #72]	@ (8000f8c <CLCD_GPIO_Init+0x9c>)
 8000f44:	f003 fa10 	bl	8004368 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = GPIO_PIN_D4;
 8000f48:	2310      	movs	r3, #16
 8000f4a:	607b      	str	r3, [r7, #4]
	HAL_GPIO_Init(GPIO_D4, &GPIO_InitStruct);
 8000f4c:	1d3b      	adds	r3, r7, #4
 8000f4e:	4619      	mov	r1, r3
 8000f50:	480e      	ldr	r0, [pc, #56]	@ (8000f8c <CLCD_GPIO_Init+0x9c>)
 8000f52:	f003 fa09 	bl	8004368 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = GPIO_PIN_D5;
 8000f56:	2320      	movs	r3, #32
 8000f58:	607b      	str	r3, [r7, #4]
	HAL_GPIO_Init(GPIO_D5, &GPIO_InitStruct);
 8000f5a:	1d3b      	adds	r3, r7, #4
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	480b      	ldr	r0, [pc, #44]	@ (8000f8c <CLCD_GPIO_Init+0x9c>)
 8000f60:	f003 fa02 	bl	8004368 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = GPIO_PIN_D6;
 8000f64:	2340      	movs	r3, #64	@ 0x40
 8000f66:	607b      	str	r3, [r7, #4]
	HAL_GPIO_Init(GPIO_D6, &GPIO_InitStruct);
 8000f68:	1d3b      	adds	r3, r7, #4
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	4807      	ldr	r0, [pc, #28]	@ (8000f8c <CLCD_GPIO_Init+0x9c>)
 8000f6e:	f003 f9fb 	bl	8004368 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = GPIO_PIN_D7;
 8000f72:	2380      	movs	r3, #128	@ 0x80
 8000f74:	607b      	str	r3, [r7, #4]
	HAL_GPIO_Init(GPIO_D7, &GPIO_InitStruct);
 8000f76:	1d3b      	adds	r3, r7, #4
 8000f78:	4619      	mov	r1, r3
 8000f7a:	4804      	ldr	r0, [pc, #16]	@ (8000f8c <CLCD_GPIO_Init+0x9c>)
 8000f7c:	f003 f9f4 	bl	8004368 <HAL_GPIO_Init>
}
 8000f80:	bf00      	nop
 8000f82:	3718      	adds	r7, #24
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	40023800 	.word	0x40023800
 8000f8c:	40021000 	.word	0x40021000

08000f90 <CLCD_Write_Instruction>:

void CLCD_Write_Instruction(unsigned char b)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b082      	sub	sp, #8
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	4603      	mov	r3, r0
 8000f98:	71fb      	strb	r3, [r7, #7]
	//���� 4��Ʈ
	GPIO_D7->ODR = (b & 0x80) ? GPIO_D7->ODR | GPIO_PIN_D7 : GPIO_D7->ODR & ~GPIO_PIN_D7; //D7
 8000f9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	da04      	bge.n	8000fac <CLCD_Write_Instruction+0x1c>
 8000fa2:	4b5f      	ldr	r3, [pc, #380]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 8000fa4:	695b      	ldr	r3, [r3, #20]
 8000fa6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000faa:	e003      	b.n	8000fb4 <CLCD_Write_Instruction+0x24>
 8000fac:	4b5c      	ldr	r3, [pc, #368]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 8000fae:	695b      	ldr	r3, [r3, #20]
 8000fb0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000fb4:	4a5a      	ldr	r2, [pc, #360]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 8000fb6:	6153      	str	r3, [r2, #20]
	GPIO_D6->ODR = (b & 0x40) ? GPIO_D6->ODR | GPIO_PIN_D6 : GPIO_D6->ODR & ~GPIO_PIN_D6; //D6
 8000fb8:	79fb      	ldrb	r3, [r7, #7]
 8000fba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d004      	beq.n	8000fcc <CLCD_Write_Instruction+0x3c>
 8000fc2:	4b57      	ldr	r3, [pc, #348]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 8000fc4:	695b      	ldr	r3, [r3, #20]
 8000fc6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000fca:	e003      	b.n	8000fd4 <CLCD_Write_Instruction+0x44>
 8000fcc:	4b54      	ldr	r3, [pc, #336]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 8000fce:	695b      	ldr	r3, [r3, #20]
 8000fd0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000fd4:	4a52      	ldr	r2, [pc, #328]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 8000fd6:	6153      	str	r3, [r2, #20]
	GPIO_D5->ODR = (b & 0x20) ? GPIO_D5->ODR | GPIO_PIN_D5 : GPIO_D5->ODR & ~GPIO_PIN_D5; //D5
 8000fd8:	79fb      	ldrb	r3, [r7, #7]
 8000fda:	f003 0320 	and.w	r3, r3, #32
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d004      	beq.n	8000fec <CLCD_Write_Instruction+0x5c>
 8000fe2:	4b4f      	ldr	r3, [pc, #316]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 8000fe4:	695b      	ldr	r3, [r3, #20]
 8000fe6:	f043 0320 	orr.w	r3, r3, #32
 8000fea:	e003      	b.n	8000ff4 <CLCD_Write_Instruction+0x64>
 8000fec:	4b4c      	ldr	r3, [pc, #304]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 8000fee:	695b      	ldr	r3, [r3, #20]
 8000ff0:	f023 0320 	bic.w	r3, r3, #32
 8000ff4:	4a4a      	ldr	r2, [pc, #296]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 8000ff6:	6153      	str	r3, [r2, #20]
	GPIO_D4->ODR = (b & 0x10) ? GPIO_D4->ODR | GPIO_PIN_D4 : GPIO_D4->ODR & ~GPIO_PIN_D4; //D4
 8000ff8:	79fb      	ldrb	r3, [r7, #7]
 8000ffa:	f003 0310 	and.w	r3, r3, #16
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d004      	beq.n	800100c <CLCD_Write_Instruction+0x7c>
 8001002:	4b47      	ldr	r3, [pc, #284]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 8001004:	695b      	ldr	r3, [r3, #20]
 8001006:	f043 0310 	orr.w	r3, r3, #16
 800100a:	e003      	b.n	8001014 <CLCD_Write_Instruction+0x84>
 800100c:	4b44      	ldr	r3, [pc, #272]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 800100e:	695b      	ldr	r3, [r3, #20]
 8001010:	f023 0310 	bic.w	r3, r3, #16
 8001014:	4a42      	ldr	r2, [pc, #264]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 8001016:	6153      	str	r3, [r2, #20]

	GPIO_RS->ODR = GPIO_RS->ODR & ~GPIO_PIN_RS; //RS�� Low
 8001018:	4b41      	ldr	r3, [pc, #260]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 800101a:	695b      	ldr	r3, [r3, #20]
 800101c:	4a40      	ldr	r2, [pc, #256]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 800101e:	f023 0301 	bic.w	r3, r3, #1
 8001022:	6153      	str	r3, [r2, #20]
	GPIO_RW->ODR = GPIO_RW->ODR & ~GPIO_PIN_RW; //RW�� Low
 8001024:	4b3e      	ldr	r3, [pc, #248]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 8001026:	695b      	ldr	r3, [r3, #20]
 8001028:	4a3d      	ldr	r2, [pc, #244]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 800102a:	f023 0302 	bic.w	r3, r3, #2
 800102e:	6153      	str	r3, [r2, #20]
	GPIO_EN->ODR = GPIO_EN->ODR & ~GPIO_PIN_EN; //EN�� Low
 8001030:	4b3b      	ldr	r3, [pc, #236]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 8001032:	695b      	ldr	r3, [r3, #20]
 8001034:	4a3a      	ldr	r2, [pc, #232]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 8001036:	f023 0304 	bic.w	r3, r3, #4
 800103a:	6153      	str	r3, [r2, #20]

	GPIO_EN->ODR = GPIO_EN->ODR | GPIO_PIN_EN; //EN�� High
 800103c:	4b38      	ldr	r3, [pc, #224]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 800103e:	695b      	ldr	r3, [r3, #20]
 8001040:	4a37      	ldr	r2, [pc, #220]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 8001042:	f043 0304 	orr.w	r3, r3, #4
 8001046:	6153      	str	r3, [r2, #20]
	GPIO_EN->ODR = GPIO_EN->ODR & ~GPIO_PIN_EN; //EN�� Low
 8001048:	4b35      	ldr	r3, [pc, #212]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 800104a:	695b      	ldr	r3, [r3, #20]
 800104c:	4a34      	ldr	r2, [pc, #208]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 800104e:	f023 0304 	bic.w	r3, r3, #4
 8001052:	6153      	str	r3, [r2, #20]

	//���� 4��Ʈ
	GPIO_D7->ODR = (b & 0x08) ? GPIO_D7->ODR | GPIO_PIN_D7 : GPIO_D7->ODR & ~GPIO_PIN_D7; //D7
 8001054:	79fb      	ldrb	r3, [r7, #7]
 8001056:	f003 0308 	and.w	r3, r3, #8
 800105a:	2b00      	cmp	r3, #0
 800105c:	d004      	beq.n	8001068 <CLCD_Write_Instruction+0xd8>
 800105e:	4b30      	ldr	r3, [pc, #192]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 8001060:	695b      	ldr	r3, [r3, #20]
 8001062:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001066:	e003      	b.n	8001070 <CLCD_Write_Instruction+0xe0>
 8001068:	4b2d      	ldr	r3, [pc, #180]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 800106a:	695b      	ldr	r3, [r3, #20]
 800106c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001070:	4a2b      	ldr	r2, [pc, #172]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 8001072:	6153      	str	r3, [r2, #20]
	GPIO_D6->ODR = (b & 0x04) ? GPIO_D6->ODR | GPIO_PIN_D6 : GPIO_D6->ODR & ~GPIO_PIN_D6; //D6
 8001074:	79fb      	ldrb	r3, [r7, #7]
 8001076:	f003 0304 	and.w	r3, r3, #4
 800107a:	2b00      	cmp	r3, #0
 800107c:	d004      	beq.n	8001088 <CLCD_Write_Instruction+0xf8>
 800107e:	4b28      	ldr	r3, [pc, #160]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 8001080:	695b      	ldr	r3, [r3, #20]
 8001082:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001086:	e003      	b.n	8001090 <CLCD_Write_Instruction+0x100>
 8001088:	4b25      	ldr	r3, [pc, #148]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 800108a:	695b      	ldr	r3, [r3, #20]
 800108c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001090:	4a23      	ldr	r2, [pc, #140]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 8001092:	6153      	str	r3, [r2, #20]
	GPIO_D5->ODR = (b & 0x02) ? GPIO_D5->ODR | GPIO_PIN_D5 : GPIO_D5->ODR & ~GPIO_PIN_D5; //D5
 8001094:	79fb      	ldrb	r3, [r7, #7]
 8001096:	f003 0302 	and.w	r3, r3, #2
 800109a:	2b00      	cmp	r3, #0
 800109c:	d004      	beq.n	80010a8 <CLCD_Write_Instruction+0x118>
 800109e:	4b20      	ldr	r3, [pc, #128]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 80010a0:	695b      	ldr	r3, [r3, #20]
 80010a2:	f043 0320 	orr.w	r3, r3, #32
 80010a6:	e003      	b.n	80010b0 <CLCD_Write_Instruction+0x120>
 80010a8:	4b1d      	ldr	r3, [pc, #116]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 80010aa:	695b      	ldr	r3, [r3, #20]
 80010ac:	f023 0320 	bic.w	r3, r3, #32
 80010b0:	4a1b      	ldr	r2, [pc, #108]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 80010b2:	6153      	str	r3, [r2, #20]
	GPIO_D4->ODR = (b & 0x01) ? GPIO_D4->ODR | GPIO_PIN_D4 : GPIO_D4->ODR & ~GPIO_PIN_D4; //D4
 80010b4:	79fb      	ldrb	r3, [r7, #7]
 80010b6:	f003 0301 	and.w	r3, r3, #1
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d004      	beq.n	80010c8 <CLCD_Write_Instruction+0x138>
 80010be:	4b18      	ldr	r3, [pc, #96]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 80010c0:	695b      	ldr	r3, [r3, #20]
 80010c2:	f043 0310 	orr.w	r3, r3, #16
 80010c6:	e003      	b.n	80010d0 <CLCD_Write_Instruction+0x140>
 80010c8:	4b15      	ldr	r3, [pc, #84]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 80010ca:	695b      	ldr	r3, [r3, #20]
 80010cc:	f023 0310 	bic.w	r3, r3, #16
 80010d0:	4a13      	ldr	r2, [pc, #76]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 80010d2:	6153      	str	r3, [r2, #20]

	GPIO_RS->ODR = GPIO_RS->ODR & ~GPIO_PIN_RS; //RS�� Low
 80010d4:	4b12      	ldr	r3, [pc, #72]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 80010d6:	695b      	ldr	r3, [r3, #20]
 80010d8:	4a11      	ldr	r2, [pc, #68]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 80010da:	f023 0301 	bic.w	r3, r3, #1
 80010de:	6153      	str	r3, [r2, #20]
	GPIO_RW->ODR = GPIO_RW->ODR & ~GPIO_PIN_RW; //RW�� Low
 80010e0:	4b0f      	ldr	r3, [pc, #60]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 80010e2:	695b      	ldr	r3, [r3, #20]
 80010e4:	4a0e      	ldr	r2, [pc, #56]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 80010e6:	f023 0302 	bic.w	r3, r3, #2
 80010ea:	6153      	str	r3, [r2, #20]
	GPIO_EN->ODR = GPIO_EN->ODR & ~GPIO_PIN_EN; //EN�� Low
 80010ec:	4b0c      	ldr	r3, [pc, #48]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 80010ee:	695b      	ldr	r3, [r3, #20]
 80010f0:	4a0b      	ldr	r2, [pc, #44]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 80010f2:	f023 0304 	bic.w	r3, r3, #4
 80010f6:	6153      	str	r3, [r2, #20]

	GPIO_EN->ODR = GPIO_EN->ODR | GPIO_PIN_EN; //EN�� High
 80010f8:	4b09      	ldr	r3, [pc, #36]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 80010fa:	695b      	ldr	r3, [r3, #20]
 80010fc:	4a08      	ldr	r2, [pc, #32]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 80010fe:	f043 0304 	orr.w	r3, r3, #4
 8001102:	6153      	str	r3, [r2, #20]
	GPIO_EN->ODR = GPIO_EN->ODR & ~GPIO_PIN_EN; //EN�� Low
 8001104:	4b06      	ldr	r3, [pc, #24]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 8001106:	695b      	ldr	r3, [r3, #20]
 8001108:	4a05      	ldr	r2, [pc, #20]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 800110a:	f023 0304 	bic.w	r3, r3, #4
 800110e:	6153      	str	r3, [r2, #20]

	HAL_Delay(1);
 8001110:	2001      	movs	r0, #1
 8001112:	f002 ff61 	bl	8003fd8 <HAL_Delay>
}
 8001116:	bf00      	nop
 8001118:	3708      	adds	r7, #8
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	40021000 	.word	0x40021000

08001124 <CLCD_Write_Display>:

void CLCD_Write_Display(unsigned char b)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b082      	sub	sp, #8
 8001128:	af00      	add	r7, sp, #0
 800112a:	4603      	mov	r3, r0
 800112c:	71fb      	strb	r3, [r7, #7]
	//���� 4��Ʈ
	GPIO_D7->ODR = (b & 0x80) ? GPIO_D7->ODR | GPIO_PIN_D7 : GPIO_D7->ODR & ~GPIO_PIN_D7; //D7
 800112e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001132:	2b00      	cmp	r3, #0
 8001134:	da04      	bge.n	8001140 <CLCD_Write_Display+0x1c>
 8001136:	4b5f      	ldr	r3, [pc, #380]	@ (80012b4 <CLCD_Write_Display+0x190>)
 8001138:	695b      	ldr	r3, [r3, #20]
 800113a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800113e:	e003      	b.n	8001148 <CLCD_Write_Display+0x24>
 8001140:	4b5c      	ldr	r3, [pc, #368]	@ (80012b4 <CLCD_Write_Display+0x190>)
 8001142:	695b      	ldr	r3, [r3, #20]
 8001144:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001148:	4a5a      	ldr	r2, [pc, #360]	@ (80012b4 <CLCD_Write_Display+0x190>)
 800114a:	6153      	str	r3, [r2, #20]
	GPIO_D6->ODR = (b & 0x40) ? GPIO_D6->ODR | GPIO_PIN_D6 : GPIO_D6->ODR & ~GPIO_PIN_D6; //D6
 800114c:	79fb      	ldrb	r3, [r7, #7]
 800114e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001152:	2b00      	cmp	r3, #0
 8001154:	d004      	beq.n	8001160 <CLCD_Write_Display+0x3c>
 8001156:	4b57      	ldr	r3, [pc, #348]	@ (80012b4 <CLCD_Write_Display+0x190>)
 8001158:	695b      	ldr	r3, [r3, #20]
 800115a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800115e:	e003      	b.n	8001168 <CLCD_Write_Display+0x44>
 8001160:	4b54      	ldr	r3, [pc, #336]	@ (80012b4 <CLCD_Write_Display+0x190>)
 8001162:	695b      	ldr	r3, [r3, #20]
 8001164:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001168:	4a52      	ldr	r2, [pc, #328]	@ (80012b4 <CLCD_Write_Display+0x190>)
 800116a:	6153      	str	r3, [r2, #20]
	GPIO_D5->ODR = (b & 0x20) ? GPIO_D5->ODR | GPIO_PIN_D5 : GPIO_D5->ODR & ~GPIO_PIN_D5; //D5
 800116c:	79fb      	ldrb	r3, [r7, #7]
 800116e:	f003 0320 	and.w	r3, r3, #32
 8001172:	2b00      	cmp	r3, #0
 8001174:	d004      	beq.n	8001180 <CLCD_Write_Display+0x5c>
 8001176:	4b4f      	ldr	r3, [pc, #316]	@ (80012b4 <CLCD_Write_Display+0x190>)
 8001178:	695b      	ldr	r3, [r3, #20]
 800117a:	f043 0320 	orr.w	r3, r3, #32
 800117e:	e003      	b.n	8001188 <CLCD_Write_Display+0x64>
 8001180:	4b4c      	ldr	r3, [pc, #304]	@ (80012b4 <CLCD_Write_Display+0x190>)
 8001182:	695b      	ldr	r3, [r3, #20]
 8001184:	f023 0320 	bic.w	r3, r3, #32
 8001188:	4a4a      	ldr	r2, [pc, #296]	@ (80012b4 <CLCD_Write_Display+0x190>)
 800118a:	6153      	str	r3, [r2, #20]
	GPIO_D4->ODR = (b & 0x10) ? GPIO_D4->ODR | GPIO_PIN_D4 : GPIO_D4->ODR & ~GPIO_PIN_D4; //D4
 800118c:	79fb      	ldrb	r3, [r7, #7]
 800118e:	f003 0310 	and.w	r3, r3, #16
 8001192:	2b00      	cmp	r3, #0
 8001194:	d004      	beq.n	80011a0 <CLCD_Write_Display+0x7c>
 8001196:	4b47      	ldr	r3, [pc, #284]	@ (80012b4 <CLCD_Write_Display+0x190>)
 8001198:	695b      	ldr	r3, [r3, #20]
 800119a:	f043 0310 	orr.w	r3, r3, #16
 800119e:	e003      	b.n	80011a8 <CLCD_Write_Display+0x84>
 80011a0:	4b44      	ldr	r3, [pc, #272]	@ (80012b4 <CLCD_Write_Display+0x190>)
 80011a2:	695b      	ldr	r3, [r3, #20]
 80011a4:	f023 0310 	bic.w	r3, r3, #16
 80011a8:	4a42      	ldr	r2, [pc, #264]	@ (80012b4 <CLCD_Write_Display+0x190>)
 80011aa:	6153      	str	r3, [r2, #20]

	GPIO_RS->ODR = GPIO_RS->ODR | GPIO_PIN_RS; //RS�� High
 80011ac:	4b41      	ldr	r3, [pc, #260]	@ (80012b4 <CLCD_Write_Display+0x190>)
 80011ae:	695b      	ldr	r3, [r3, #20]
 80011b0:	4a40      	ldr	r2, [pc, #256]	@ (80012b4 <CLCD_Write_Display+0x190>)
 80011b2:	f043 0301 	orr.w	r3, r3, #1
 80011b6:	6153      	str	r3, [r2, #20]
	GPIO_RW->ODR = GPIO_RW->ODR & ~GPIO_PIN_RW; //RW�� Low
 80011b8:	4b3e      	ldr	r3, [pc, #248]	@ (80012b4 <CLCD_Write_Display+0x190>)
 80011ba:	695b      	ldr	r3, [r3, #20]
 80011bc:	4a3d      	ldr	r2, [pc, #244]	@ (80012b4 <CLCD_Write_Display+0x190>)
 80011be:	f023 0302 	bic.w	r3, r3, #2
 80011c2:	6153      	str	r3, [r2, #20]
	GPIO_EN->ODR = GPIO_EN->ODR & ~GPIO_PIN_EN; //EN�� Low
 80011c4:	4b3b      	ldr	r3, [pc, #236]	@ (80012b4 <CLCD_Write_Display+0x190>)
 80011c6:	695b      	ldr	r3, [r3, #20]
 80011c8:	4a3a      	ldr	r2, [pc, #232]	@ (80012b4 <CLCD_Write_Display+0x190>)
 80011ca:	f023 0304 	bic.w	r3, r3, #4
 80011ce:	6153      	str	r3, [r2, #20]

	GPIO_EN->ODR = GPIO_EN->ODR | GPIO_PIN_EN; //EN�� High
 80011d0:	4b38      	ldr	r3, [pc, #224]	@ (80012b4 <CLCD_Write_Display+0x190>)
 80011d2:	695b      	ldr	r3, [r3, #20]
 80011d4:	4a37      	ldr	r2, [pc, #220]	@ (80012b4 <CLCD_Write_Display+0x190>)
 80011d6:	f043 0304 	orr.w	r3, r3, #4
 80011da:	6153      	str	r3, [r2, #20]
	GPIO_EN->ODR = GPIO_EN->ODR & ~GPIO_PIN_EN; //EN�� Low
 80011dc:	4b35      	ldr	r3, [pc, #212]	@ (80012b4 <CLCD_Write_Display+0x190>)
 80011de:	695b      	ldr	r3, [r3, #20]
 80011e0:	4a34      	ldr	r2, [pc, #208]	@ (80012b4 <CLCD_Write_Display+0x190>)
 80011e2:	f023 0304 	bic.w	r3, r3, #4
 80011e6:	6153      	str	r3, [r2, #20]

	//���� 4��Ʈ
	GPIO_D7->ODR = (b & 0x08) ? GPIO_D7->ODR | GPIO_PIN_D7 : GPIO_D7->ODR & ~GPIO_PIN_D7; //D7
 80011e8:	79fb      	ldrb	r3, [r7, #7]
 80011ea:	f003 0308 	and.w	r3, r3, #8
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d004      	beq.n	80011fc <CLCD_Write_Display+0xd8>
 80011f2:	4b30      	ldr	r3, [pc, #192]	@ (80012b4 <CLCD_Write_Display+0x190>)
 80011f4:	695b      	ldr	r3, [r3, #20]
 80011f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80011fa:	e003      	b.n	8001204 <CLCD_Write_Display+0xe0>
 80011fc:	4b2d      	ldr	r3, [pc, #180]	@ (80012b4 <CLCD_Write_Display+0x190>)
 80011fe:	695b      	ldr	r3, [r3, #20]
 8001200:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001204:	4a2b      	ldr	r2, [pc, #172]	@ (80012b4 <CLCD_Write_Display+0x190>)
 8001206:	6153      	str	r3, [r2, #20]
	GPIO_D6->ODR = (b & 0x04) ? GPIO_D6->ODR | GPIO_PIN_D6 : GPIO_D6->ODR & ~GPIO_PIN_D6; //D6
 8001208:	79fb      	ldrb	r3, [r7, #7]
 800120a:	f003 0304 	and.w	r3, r3, #4
 800120e:	2b00      	cmp	r3, #0
 8001210:	d004      	beq.n	800121c <CLCD_Write_Display+0xf8>
 8001212:	4b28      	ldr	r3, [pc, #160]	@ (80012b4 <CLCD_Write_Display+0x190>)
 8001214:	695b      	ldr	r3, [r3, #20]
 8001216:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800121a:	e003      	b.n	8001224 <CLCD_Write_Display+0x100>
 800121c:	4b25      	ldr	r3, [pc, #148]	@ (80012b4 <CLCD_Write_Display+0x190>)
 800121e:	695b      	ldr	r3, [r3, #20]
 8001220:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001224:	4a23      	ldr	r2, [pc, #140]	@ (80012b4 <CLCD_Write_Display+0x190>)
 8001226:	6153      	str	r3, [r2, #20]
	GPIO_D5->ODR = (b & 0x02) ? GPIO_D5->ODR | GPIO_PIN_D5 : GPIO_D5->ODR & ~GPIO_PIN_D5; //D5
 8001228:	79fb      	ldrb	r3, [r7, #7]
 800122a:	f003 0302 	and.w	r3, r3, #2
 800122e:	2b00      	cmp	r3, #0
 8001230:	d004      	beq.n	800123c <CLCD_Write_Display+0x118>
 8001232:	4b20      	ldr	r3, [pc, #128]	@ (80012b4 <CLCD_Write_Display+0x190>)
 8001234:	695b      	ldr	r3, [r3, #20]
 8001236:	f043 0320 	orr.w	r3, r3, #32
 800123a:	e003      	b.n	8001244 <CLCD_Write_Display+0x120>
 800123c:	4b1d      	ldr	r3, [pc, #116]	@ (80012b4 <CLCD_Write_Display+0x190>)
 800123e:	695b      	ldr	r3, [r3, #20]
 8001240:	f023 0320 	bic.w	r3, r3, #32
 8001244:	4a1b      	ldr	r2, [pc, #108]	@ (80012b4 <CLCD_Write_Display+0x190>)
 8001246:	6153      	str	r3, [r2, #20]
	GPIO_D4->ODR = (b & 0x01) ? GPIO_D4->ODR | GPIO_PIN_D4 : GPIO_D4->ODR & ~GPIO_PIN_D4; //D4
 8001248:	79fb      	ldrb	r3, [r7, #7]
 800124a:	f003 0301 	and.w	r3, r3, #1
 800124e:	2b00      	cmp	r3, #0
 8001250:	d004      	beq.n	800125c <CLCD_Write_Display+0x138>
 8001252:	4b18      	ldr	r3, [pc, #96]	@ (80012b4 <CLCD_Write_Display+0x190>)
 8001254:	695b      	ldr	r3, [r3, #20]
 8001256:	f043 0310 	orr.w	r3, r3, #16
 800125a:	e003      	b.n	8001264 <CLCD_Write_Display+0x140>
 800125c:	4b15      	ldr	r3, [pc, #84]	@ (80012b4 <CLCD_Write_Display+0x190>)
 800125e:	695b      	ldr	r3, [r3, #20]
 8001260:	f023 0310 	bic.w	r3, r3, #16
 8001264:	4a13      	ldr	r2, [pc, #76]	@ (80012b4 <CLCD_Write_Display+0x190>)
 8001266:	6153      	str	r3, [r2, #20]

	GPIO_RS->ODR = GPIO_RS->ODR | GPIO_PIN_RS; //RS�� High
 8001268:	4b12      	ldr	r3, [pc, #72]	@ (80012b4 <CLCD_Write_Display+0x190>)
 800126a:	695b      	ldr	r3, [r3, #20]
 800126c:	4a11      	ldr	r2, [pc, #68]	@ (80012b4 <CLCD_Write_Display+0x190>)
 800126e:	f043 0301 	orr.w	r3, r3, #1
 8001272:	6153      	str	r3, [r2, #20]
	GPIO_RW->ODR = GPIO_RW->ODR & ~GPIO_PIN_RW; //RW�� Low
 8001274:	4b0f      	ldr	r3, [pc, #60]	@ (80012b4 <CLCD_Write_Display+0x190>)
 8001276:	695b      	ldr	r3, [r3, #20]
 8001278:	4a0e      	ldr	r2, [pc, #56]	@ (80012b4 <CLCD_Write_Display+0x190>)
 800127a:	f023 0302 	bic.w	r3, r3, #2
 800127e:	6153      	str	r3, [r2, #20]
	GPIO_EN->ODR = GPIO_EN->ODR & ~GPIO_PIN_EN; //EN�� Low
 8001280:	4b0c      	ldr	r3, [pc, #48]	@ (80012b4 <CLCD_Write_Display+0x190>)
 8001282:	695b      	ldr	r3, [r3, #20]
 8001284:	4a0b      	ldr	r2, [pc, #44]	@ (80012b4 <CLCD_Write_Display+0x190>)
 8001286:	f023 0304 	bic.w	r3, r3, #4
 800128a:	6153      	str	r3, [r2, #20]

	GPIO_EN->ODR = GPIO_EN->ODR | GPIO_PIN_EN; //EN�� High
 800128c:	4b09      	ldr	r3, [pc, #36]	@ (80012b4 <CLCD_Write_Display+0x190>)
 800128e:	695b      	ldr	r3, [r3, #20]
 8001290:	4a08      	ldr	r2, [pc, #32]	@ (80012b4 <CLCD_Write_Display+0x190>)
 8001292:	f043 0304 	orr.w	r3, r3, #4
 8001296:	6153      	str	r3, [r2, #20]
	GPIO_EN->ODR = GPIO_EN->ODR & ~GPIO_PIN_EN; //EN�� Low
 8001298:	4b06      	ldr	r3, [pc, #24]	@ (80012b4 <CLCD_Write_Display+0x190>)
 800129a:	695b      	ldr	r3, [r3, #20]
 800129c:	4a05      	ldr	r2, [pc, #20]	@ (80012b4 <CLCD_Write_Display+0x190>)
 800129e:	f023 0304 	bic.w	r3, r3, #4
 80012a2:	6153      	str	r3, [r2, #20]

	HAL_Delay(1);
 80012a4:	2001      	movs	r0, #1
 80012a6:	f002 fe97 	bl	8003fd8 <HAL_Delay>
}
 80012aa:	bf00      	nop
 80012ac:	3708      	adds	r7, #8
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	40021000 	.word	0x40021000

080012b8 <CLCD_Gotoxy>:


void CLCD_Gotoxy(unsigned char x, unsigned char y)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b082      	sub	sp, #8
 80012bc:	af00      	add	r7, sp, #0
 80012be:	4603      	mov	r3, r0
 80012c0:	460a      	mov	r2, r1
 80012c2:	71fb      	strb	r3, [r7, #7]
 80012c4:	4613      	mov	r3, r2
 80012c6:	71bb      	strb	r3, [r7, #6]
	// 16 * 2 character LCD
	switch(y)
 80012c8:	79bb      	ldrb	r3, [r7, #6]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d002      	beq.n	80012d4 <CLCD_Gotoxy+0x1c>
 80012ce:	2b01      	cmp	r3, #1
 80012d0:	d007      	beq.n	80012e2 <CLCD_Gotoxy+0x2a>
		case 0 : CLCD_Write_Instruction(0x80 + x); break;
		case 1 : CLCD_Write_Instruction(0xC0 + x); break;
		//case 2 : CLCD_Write_Instruction(0x90+x); break; //Uncomment for 16 * 4 character LCD
		//case 3 : CLCD_Write_Instruction(0xd0+x); break; //Uncomment for 16 * 4 character LCD
	}
}
 80012d2:	e00d      	b.n	80012f0 <CLCD_Gotoxy+0x38>
		case 0 : CLCD_Write_Instruction(0x80 + x); break;
 80012d4:	79fb      	ldrb	r3, [r7, #7]
 80012d6:	3b80      	subs	r3, #128	@ 0x80
 80012d8:	b2db      	uxtb	r3, r3
 80012da:	4618      	mov	r0, r3
 80012dc:	f7ff fe58 	bl	8000f90 <CLCD_Write_Instruction>
 80012e0:	e006      	b.n	80012f0 <CLCD_Gotoxy+0x38>
		case 1 : CLCD_Write_Instruction(0xC0 + x); break;
 80012e2:	79fb      	ldrb	r3, [r7, #7]
 80012e4:	3b40      	subs	r3, #64	@ 0x40
 80012e6:	b2db      	uxtb	r3, r3
 80012e8:	4618      	mov	r0, r3
 80012ea:	f7ff fe51 	bl	8000f90 <CLCD_Write_Instruction>
 80012ee:	bf00      	nop
}
 80012f0:	bf00      	nop
 80012f2:	3708      	adds	r7, #8
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}

080012f8 <CLCD_Puts>:

void CLCD_Puts(unsigned char x, unsigned char y, unsigned char *str)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b084      	sub	sp, #16
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	4603      	mov	r3, r0
 8001300:	603a      	str	r2, [r7, #0]
 8001302:	71fb      	strb	r3, [r7, #7]
 8001304:	460b      	mov	r3, r1
 8001306:	71bb      	strb	r3, [r7, #6]
	unsigned int i=0;
 8001308:	2300      	movs	r3, #0
 800130a:	60fb      	str	r3, [r7, #12]

	CLCD_Gotoxy(x,y);
 800130c:	79ba      	ldrb	r2, [r7, #6]
 800130e:	79fb      	ldrb	r3, [r7, #7]
 8001310:	4611      	mov	r1, r2
 8001312:	4618      	mov	r0, r3
 8001314:	f7ff ffd0 	bl	80012b8 <CLCD_Gotoxy>
	do
	{
		CLCD_Write_Display(str[i]);
 8001318:	683a      	ldr	r2, [r7, #0]
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	4413      	add	r3, r2
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	4618      	mov	r0, r3
 8001322:	f7ff feff 	bl	8001124 <CLCD_Write_Display>
	}
	while(str[++i]!='\0');
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	3301      	adds	r3, #1
 800132a:	60fb      	str	r3, [r7, #12]
 800132c:	683a      	ldr	r2, [r7, #0]
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	4413      	add	r3, r2
 8001332:	781b      	ldrb	r3, [r3, #0]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d1ef      	bne.n	8001318 <CLCD_Puts+0x20>
}
 8001338:	bf00      	nop
 800133a:	bf00      	nop
 800133c:	3710      	adds	r7, #16
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}

08001342 <CLCD_Init>:

void CLCD_Init(void)
{
 8001342:	b580      	push	{r7, lr}
 8001344:	af00      	add	r7, sp, #0
	HAL_Delay(100);
 8001346:	2064      	movs	r0, #100	@ 0x64
 8001348:	f002 fe46 	bl	8003fd8 <HAL_Delay>
	CLCD_Write_Instruction(0x28);
 800134c:	2028      	movs	r0, #40	@ 0x28
 800134e:	f7ff fe1f 	bl	8000f90 <CLCD_Write_Instruction>
	HAL_Delay(10);
 8001352:	200a      	movs	r0, #10
 8001354:	f002 fe40 	bl	8003fd8 <HAL_Delay>
	CLCD_Write_Instruction(0x28);
 8001358:	2028      	movs	r0, #40	@ 0x28
 800135a:	f7ff fe19 	bl	8000f90 <CLCD_Write_Instruction>
	HAL_Delay(10);
 800135e:	200a      	movs	r0, #10
 8001360:	f002 fe3a 	bl	8003fd8 <HAL_Delay>
	CLCD_Write_Instruction(0x0C);
 8001364:	200c      	movs	r0, #12
 8001366:	f7ff fe13 	bl	8000f90 <CLCD_Write_Instruction>
	CLCD_Write_Instruction(0x06);
 800136a:	2006      	movs	r0, #6
 800136c:	f7ff fe10 	bl	8000f90 <CLCD_Write_Instruction>
	CLCD_Write_Instruction(0x02);
 8001370:	2002      	movs	r0, #2
 8001372:	f7ff fe0d 	bl	8000f90 <CLCD_Write_Instruction>
	CLCD_Write_Instruction(0x01);
 8001376:	2001      	movs	r0, #1
 8001378:	f7ff fe0a 	bl	8000f90 <CLCD_Write_Instruction>
	CLCD_Write_Instruction(0x01);
 800137c:	2001      	movs	r0, #1
 800137e:	f7ff fe07 	bl	8000f90 <CLCD_Write_Instruction>
}
 8001382:	bf00      	nop
 8001384:	bd80      	pop	{r7, pc}

08001386 <CLCD_Clear>:

void CLCD_Clear(void)
{
 8001386:	b580      	push	{r7, lr}
 8001388:	af00      	add	r7, sp, #0
	CLCD_Write_Instruction(0x01);
 800138a:	2001      	movs	r0, #1
 800138c:	f7ff fe00 	bl	8000f90 <CLCD_Write_Instruction>
	HAL_Delay(10);
 8001390:	200a      	movs	r0, #10
 8001392:	f002 fe21 	bl	8003fd8 <HAL_Delay>
}
 8001396:	bf00      	nop
 8001398:	bd80      	pop	{r7, pc}
	...

0800139c <clcdDisplayAlarm>:

extern clockSt clock;
extern modeSelector mode;
modeSelector tempMode;
alarmSt alarm = {{{13, 0, 0, 0}, {0, 0, 1, 0}, {14, 1, 0, 0}, {16, 0, 0, 0}, {0, 0, 1, 0}}, 0};
void clcdDisplayAlarm() {
 800139c:	b580      	push	{r7, lr}
 800139e:	b082      	sub	sp, #8
 80013a0:	af02      	add	r7, sp, #8
	sprintf(alarm.buffer, "ALARM #%d %-3s %3s", alarm.select + 1, (alarm.set[alarm.select].enabled == FALSE ? "OFF" : "ON"), (alarm.set[alarm.select].repeat == TRUE ? "RPT" : "ONC"));
 80013a2:	4b33      	ldr	r3, [pc, #204]	@ (8001470 <clcdDisplayAlarm+0xd4>)
 80013a4:	7d1b      	ldrb	r3, [r3, #20]
 80013a6:	1c5a      	adds	r2, r3, #1
 80013a8:	4b31      	ldr	r3, [pc, #196]	@ (8001470 <clcdDisplayAlarm+0xd4>)
 80013aa:	7d1b      	ldrb	r3, [r3, #20]
 80013ac:	4930      	ldr	r1, [pc, #192]	@ (8001470 <clcdDisplayAlarm+0xd4>)
 80013ae:	009b      	lsls	r3, r3, #2
 80013b0:	440b      	add	r3, r1
 80013b2:	789b      	ldrb	r3, [r3, #2]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d101      	bne.n	80013bc <clcdDisplayAlarm+0x20>
 80013b8:	492e      	ldr	r1, [pc, #184]	@ (8001474 <clcdDisplayAlarm+0xd8>)
 80013ba:	e000      	b.n	80013be <clcdDisplayAlarm+0x22>
 80013bc:	492e      	ldr	r1, [pc, #184]	@ (8001478 <clcdDisplayAlarm+0xdc>)
 80013be:	4b2c      	ldr	r3, [pc, #176]	@ (8001470 <clcdDisplayAlarm+0xd4>)
 80013c0:	7d1b      	ldrb	r3, [r3, #20]
 80013c2:	482b      	ldr	r0, [pc, #172]	@ (8001470 <clcdDisplayAlarm+0xd4>)
 80013c4:	009b      	lsls	r3, r3, #2
 80013c6:	4403      	add	r3, r0
 80013c8:	78db      	ldrb	r3, [r3, #3]
 80013ca:	2b01      	cmp	r3, #1
 80013cc:	d101      	bne.n	80013d2 <clcdDisplayAlarm+0x36>
 80013ce:	4b2b      	ldr	r3, [pc, #172]	@ (800147c <clcdDisplayAlarm+0xe0>)
 80013d0:	e000      	b.n	80013d4 <clcdDisplayAlarm+0x38>
 80013d2:	4b2b      	ldr	r3, [pc, #172]	@ (8001480 <clcdDisplayAlarm+0xe4>)
 80013d4:	9300      	str	r3, [sp, #0]
 80013d6:	460b      	mov	r3, r1
 80013d8:	492a      	ldr	r1, [pc, #168]	@ (8001484 <clcdDisplayAlarm+0xe8>)
 80013da:	482b      	ldr	r0, [pc, #172]	@ (8001488 <clcdDisplayAlarm+0xec>)
 80013dc:	f005 fe70 	bl	80070c0 <siprintf>
	CLCD_Puts(0, 0, alarm.buffer);
 80013e0:	4a29      	ldr	r2, [pc, #164]	@ (8001488 <clcdDisplayAlarm+0xec>)
 80013e2:	2100      	movs	r1, #0
 80013e4:	2000      	movs	r0, #0
 80013e6:	f7ff ff87 	bl	80012f8 <CLCD_Puts>
	sprintf(alarm.buffer, "        %s %02d:%02d", (alarm.set[alarm.select].hour < 12 ? "AM" : "PM"),
 80013ea:	4b21      	ldr	r3, [pc, #132]	@ (8001470 <clcdDisplayAlarm+0xd4>)
 80013ec:	7d1b      	ldrb	r3, [r3, #20]
 80013ee:	461a      	mov	r2, r3
 80013f0:	4b1f      	ldr	r3, [pc, #124]	@ (8001470 <clcdDisplayAlarm+0xd4>)
 80013f2:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
 80013f6:	2b0b      	cmp	r3, #11
 80013f8:	d801      	bhi.n	80013fe <clcdDisplayAlarm+0x62>
 80013fa:	4924      	ldr	r1, [pc, #144]	@ (800148c <clcdDisplayAlarm+0xf0>)
 80013fc:	e000      	b.n	8001400 <clcdDisplayAlarm+0x64>
 80013fe:	4924      	ldr	r1, [pc, #144]	@ (8001490 <clcdDisplayAlarm+0xf4>)
			(alarm.set[alarm.select].hour > 12 ? (alarm.set[alarm.select].hour - 12) : alarm.set[alarm.select].hour == 0 ? 12 : alarm.set[alarm.select].hour),
 8001400:	4b1b      	ldr	r3, [pc, #108]	@ (8001470 <clcdDisplayAlarm+0xd4>)
 8001402:	7d1b      	ldrb	r3, [r3, #20]
 8001404:	461a      	mov	r2, r3
 8001406:	4b1a      	ldr	r3, [pc, #104]	@ (8001470 <clcdDisplayAlarm+0xd4>)
 8001408:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
	sprintf(alarm.buffer, "        %s %02d:%02d", (alarm.set[alarm.select].hour < 12 ? "AM" : "PM"),
 800140c:	2b0c      	cmp	r3, #12
 800140e:	d908      	bls.n	8001422 <clcdDisplayAlarm+0x86>
			(alarm.set[alarm.select].hour > 12 ? (alarm.set[alarm.select].hour - 12) : alarm.set[alarm.select].hour == 0 ? 12 : alarm.set[alarm.select].hour),
 8001410:	4b17      	ldr	r3, [pc, #92]	@ (8001470 <clcdDisplayAlarm+0xd4>)
 8001412:	7d1b      	ldrb	r3, [r3, #20]
 8001414:	461a      	mov	r2, r3
 8001416:	4b16      	ldr	r3, [pc, #88]	@ (8001470 <clcdDisplayAlarm+0xd4>)
 8001418:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
	sprintf(alarm.buffer, "        %s %02d:%02d", (alarm.set[alarm.select].hour < 12 ? "AM" : "PM"),
 800141c:	f1a3 020c 	sub.w	r2, r3, #12
 8001420:	e010      	b.n	8001444 <clcdDisplayAlarm+0xa8>
			(alarm.set[alarm.select].hour > 12 ? (alarm.set[alarm.select].hour - 12) : alarm.set[alarm.select].hour == 0 ? 12 : alarm.set[alarm.select].hour),
 8001422:	4b13      	ldr	r3, [pc, #76]	@ (8001470 <clcdDisplayAlarm+0xd4>)
 8001424:	7d1b      	ldrb	r3, [r3, #20]
 8001426:	461a      	mov	r2, r3
 8001428:	4b11      	ldr	r3, [pc, #68]	@ (8001470 <clcdDisplayAlarm+0xd4>)
 800142a:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d007      	beq.n	8001442 <clcdDisplayAlarm+0xa6>
 8001432:	4b0f      	ldr	r3, [pc, #60]	@ (8001470 <clcdDisplayAlarm+0xd4>)
 8001434:	7d1b      	ldrb	r3, [r3, #20]
 8001436:	461a      	mov	r2, r3
 8001438:	4b0d      	ldr	r3, [pc, #52]	@ (8001470 <clcdDisplayAlarm+0xd4>)
 800143a:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
 800143e:	461a      	mov	r2, r3
 8001440:	e000      	b.n	8001444 <clcdDisplayAlarm+0xa8>
 8001442:	220c      	movs	r2, #12
			alarm.set[alarm.select].minute);
 8001444:	4b0a      	ldr	r3, [pc, #40]	@ (8001470 <clcdDisplayAlarm+0xd4>)
 8001446:	7d1b      	ldrb	r3, [r3, #20]
 8001448:	4809      	ldr	r0, [pc, #36]	@ (8001470 <clcdDisplayAlarm+0xd4>)
 800144a:	009b      	lsls	r3, r3, #2
 800144c:	4403      	add	r3, r0
 800144e:	785b      	ldrb	r3, [r3, #1]
	sprintf(alarm.buffer, "        %s %02d:%02d", (alarm.set[alarm.select].hour < 12 ? "AM" : "PM"),
 8001450:	9300      	str	r3, [sp, #0]
 8001452:	4613      	mov	r3, r2
 8001454:	460a      	mov	r2, r1
 8001456:	490f      	ldr	r1, [pc, #60]	@ (8001494 <clcdDisplayAlarm+0xf8>)
 8001458:	480b      	ldr	r0, [pc, #44]	@ (8001488 <clcdDisplayAlarm+0xec>)
 800145a:	f005 fe31 	bl	80070c0 <siprintf>
	CLCD_Puts(0, 1, alarm.buffer);
 800145e:	4a0a      	ldr	r2, [pc, #40]	@ (8001488 <clcdDisplayAlarm+0xec>)
 8001460:	2101      	movs	r1, #1
 8001462:	2000      	movs	r0, #0
 8001464:	f7ff ff48 	bl	80012f8 <CLCD_Puts>

}
 8001468:	bf00      	nop
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	20000000 	.word	0x20000000
 8001474:	08007a18 	.word	0x08007a18
 8001478:	08007a1c 	.word	0x08007a1c
 800147c:	08007a20 	.word	0x08007a20
 8001480:	08007a24 	.word	0x08007a24
 8001484:	08007a28 	.word	0x08007a28
 8001488:	20000015 	.word	0x20000015
 800148c:	08007a3c 	.word	0x08007a3c
 8001490:	08007a40 	.word	0x08007a40
 8001494:	08007a44 	.word	0x08007a44

08001498 <clcdDisplayAlarmTrigger>:

void clcdDisplayAlarmTrigger() {
 8001498:	b580      	push	{r7, lr}
 800149a:	af00      	add	r7, sp, #0
	if(getBlink() == TRUE) {
 800149c:	f002 fc3c 	bl	8003d18 <getBlink>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b01      	cmp	r3, #1
 80014a4:	d104      	bne.n	80014b0 <clcdDisplayAlarmTrigger+0x18>
		sprintf(alarm.buffer, "ALARM TRIGGERED!");
 80014a6:	490c      	ldr	r1, [pc, #48]	@ (80014d8 <clcdDisplayAlarmTrigger+0x40>)
 80014a8:	480c      	ldr	r0, [pc, #48]	@ (80014dc <clcdDisplayAlarmTrigger+0x44>)
 80014aa:	f005 fe09 	bl	80070c0 <siprintf>
 80014ae:	e003      	b.n	80014b8 <clcdDisplayAlarmTrigger+0x20>
	} else {
		sprintf(alarm.buffer, "                ");
 80014b0:	490b      	ldr	r1, [pc, #44]	@ (80014e0 <clcdDisplayAlarmTrigger+0x48>)
 80014b2:	480a      	ldr	r0, [pc, #40]	@ (80014dc <clcdDisplayAlarmTrigger+0x44>)
 80014b4:	f005 fe04 	bl	80070c0 <siprintf>
	}
	CLCD_Puts(0, 0, alarm.buffer);
 80014b8:	4a08      	ldr	r2, [pc, #32]	@ (80014dc <clcdDisplayAlarmTrigger+0x44>)
 80014ba:	2100      	movs	r1, #0
 80014bc:	2000      	movs	r0, #0
 80014be:	f7ff ff1b 	bl	80012f8 <CLCD_Puts>
	sprintf(alarm.buffer, "                ");
 80014c2:	4907      	ldr	r1, [pc, #28]	@ (80014e0 <clcdDisplayAlarmTrigger+0x48>)
 80014c4:	4805      	ldr	r0, [pc, #20]	@ (80014dc <clcdDisplayAlarmTrigger+0x44>)
 80014c6:	f005 fdfb 	bl	80070c0 <siprintf>
	CLCD_Puts(0, 1, alarm.buffer);
 80014ca:	4a04      	ldr	r2, [pc, #16]	@ (80014dc <clcdDisplayAlarmTrigger+0x44>)
 80014cc:	2101      	movs	r1, #1
 80014ce:	2000      	movs	r0, #0
 80014d0:	f7ff ff12 	bl	80012f8 <CLCD_Puts>
}
 80014d4:	bf00      	nop
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	08007a5c 	.word	0x08007a5c
 80014dc:	20000015 	.word	0x20000015
 80014e0:	08007a70 	.word	0x08007a70

080014e4 <selectAlarm>:
void selectAlarm() {	// sw2 기능 알람 선택
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0
	if(alarm.select >= ((sizeof(alarm) - 21) / sizeof(alarm.set[0])) - 1) { // 알람 구조체안에 set 구조체5개의 길이 - 21
 80014e8:	4b09      	ldr	r3, [pc, #36]	@ (8001510 <selectAlarm+0x2c>)
 80014ea:	7d1b      	ldrb	r3, [r3, #20]
 80014ec:	2b03      	cmp	r3, #3
 80014ee:	d903      	bls.n	80014f8 <selectAlarm+0x14>
		alarm.select = 0;
 80014f0:	4b07      	ldr	r3, [pc, #28]	@ (8001510 <selectAlarm+0x2c>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	751a      	strb	r2, [r3, #20]
	} else {
		alarm.select++;
	}
}
 80014f6:	e005      	b.n	8001504 <selectAlarm+0x20>
		alarm.select++;
 80014f8:	4b05      	ldr	r3, [pc, #20]	@ (8001510 <selectAlarm+0x2c>)
 80014fa:	7d1b      	ldrb	r3, [r3, #20]
 80014fc:	3301      	adds	r3, #1
 80014fe:	b2da      	uxtb	r2, r3
 8001500:	4b03      	ldr	r3, [pc, #12]	@ (8001510 <selectAlarm+0x2c>)
 8001502:	751a      	strb	r2, [r3, #20]
}
 8001504:	bf00      	nop
 8001506:	46bd      	mov	sp, r7
 8001508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150c:	4770      	bx	lr
 800150e:	bf00      	nop
 8001510:	20000000 	.word	0x20000000

08001514 <alarmTrigger>:

void alarmTrigger() {	// 알람 울림
 8001514:	b580      	push	{r7, lr}
 8001516:	b082      	sub	sp, #8
 8001518:	af00      	add	r7, sp, #0
	if(mode == ALARM_TRIGGER) {
 800151a:	4b27      	ldr	r3, [pc, #156]	@ (80015b8 <alarmTrigger+0xa4>)
 800151c:	781b      	ldrb	r3, [r3, #0]
 800151e:	2b04      	cmp	r3, #4
 8001520:	d102      	bne.n	8001528 <alarmTrigger+0x14>
		playAlram();
 8001522:	f000 f90d 	bl	8001740 <playAlram>
					mode = ALARM_TRIGGER;
				}
			}
		}
	}
}
 8001526:	e042      	b.n	80015ae <alarmTrigger+0x9a>
		for(int i = 0; i < (sizeof(alarm) - 21) / sizeof(alarm.set[0]); i++) {	// 5번 동작
 8001528:	2300      	movs	r3, #0
 800152a:	607b      	str	r3, [r7, #4]
 800152c:	e03c      	b.n	80015a8 <alarmTrigger+0x94>
			if(alarm.set[i].enabled == TRUE) {	// 알람 활성화 확인
 800152e:	4a23      	ldr	r2, [pc, #140]	@ (80015bc <alarmTrigger+0xa8>)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	009b      	lsls	r3, r3, #2
 8001534:	4413      	add	r3, r2
 8001536:	789b      	ldrb	r3, [r3, #2]
 8001538:	2b01      	cmp	r3, #1
 800153a:	d132      	bne.n	80015a2 <alarmTrigger+0x8e>
				if (alarm.set[i].hour == clock.hour
 800153c:	4a1f      	ldr	r2, [pc, #124]	@ (80015bc <alarmTrigger+0xa8>)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 8001544:	461a      	mov	r2, r3
 8001546:	4b1e      	ldr	r3, [pc, #120]	@ (80015c0 <alarmTrigger+0xac>)
 8001548:	68db      	ldr	r3, [r3, #12]
 800154a:	429a      	cmp	r2, r3
 800154c:	d129      	bne.n	80015a2 <alarmTrigger+0x8e>
						alarm.set[i].minute == clock.minute && clock.second == 0
 800154e:	4a1b      	ldr	r2, [pc, #108]	@ (80015bc <alarmTrigger+0xa8>)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	009b      	lsls	r3, r3, #2
 8001554:	4413      	add	r3, r2
 8001556:	785b      	ldrb	r3, [r3, #1]
 8001558:	461a      	mov	r2, r3
 800155a:	4b19      	ldr	r3, [pc, #100]	@ (80015c0 <alarmTrigger+0xac>)
 800155c:	691b      	ldr	r3, [r3, #16]
						&&	// 알람 설정 시간의 0초, 0밀리초 될 때 알람 온
 800155e:	429a      	cmp	r2, r3
 8001560:	d11f      	bne.n	80015a2 <alarmTrigger+0x8e>
						alarm.set[i].minute == clock.minute && clock.second == 0
 8001562:	4b17      	ldr	r3, [pc, #92]	@ (80015c0 <alarmTrigger+0xac>)
 8001564:	695b      	ldr	r3, [r3, #20]
 8001566:	2b00      	cmp	r3, #0
 8001568:	d11b      	bne.n	80015a2 <alarmTrigger+0x8e>
						&& clock.millisecond == 0) {
 800156a:	4b15      	ldr	r3, [pc, #84]	@ (80015c0 <alarmTrigger+0xac>)
 800156c:	699b      	ldr	r3, [r3, #24]
 800156e:	2b00      	cmp	r3, #0
 8001570:	d117      	bne.n	80015a2 <alarmTrigger+0x8e>
					if(alarm.set[i].repeat == FALSE) {
 8001572:	4a12      	ldr	r2, [pc, #72]	@ (80015bc <alarmTrigger+0xa8>)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	009b      	lsls	r3, r3, #2
 8001578:	4413      	add	r3, r2
 800157a:	78db      	ldrb	r3, [r3, #3]
 800157c:	2b00      	cmp	r3, #0
 800157e:	d105      	bne.n	800158c <alarmTrigger+0x78>
						alarm.set[i].enabled = 0;
 8001580:	4a0e      	ldr	r2, [pc, #56]	@ (80015bc <alarmTrigger+0xa8>)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	009b      	lsls	r3, r3, #2
 8001586:	4413      	add	r3, r2
 8001588:	2200      	movs	r2, #0
 800158a:	709a      	strb	r2, [r3, #2]
					if(mode != ALARM_TRIGGER) { // 같은 시간에 알람이 여러개 있을 경우 알람이 울리면서 tempmode 가 ALARM_TRIGGER 모드로 바뀌는것을 방지
 800158c:	4b0a      	ldr	r3, [pc, #40]	@ (80015b8 <alarmTrigger+0xa4>)
 800158e:	781b      	ldrb	r3, [r3, #0]
 8001590:	2b04      	cmp	r3, #4
 8001592:	d003      	beq.n	800159c <alarmTrigger+0x88>
						tempMode = mode;
 8001594:	4b08      	ldr	r3, [pc, #32]	@ (80015b8 <alarmTrigger+0xa4>)
 8001596:	781a      	ldrb	r2, [r3, #0]
 8001598:	4b0a      	ldr	r3, [pc, #40]	@ (80015c4 <alarmTrigger+0xb0>)
 800159a:	701a      	strb	r2, [r3, #0]
					mode = ALARM_TRIGGER;
 800159c:	4b06      	ldr	r3, [pc, #24]	@ (80015b8 <alarmTrigger+0xa4>)
 800159e:	2204      	movs	r2, #4
 80015a0:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < (sizeof(alarm) - 21) / sizeof(alarm.set[0]); i++) {	// 5번 동작
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	3301      	adds	r3, #1
 80015a6:	607b      	str	r3, [r7, #4]
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	2b04      	cmp	r3, #4
 80015ac:	d9bf      	bls.n	800152e <alarmTrigger+0x1a>
}
 80015ae:	bf00      	nop
 80015b0:	3708      	adds	r7, #8
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	20000315 	.word	0x20000315
 80015bc:	20000000 	.word	0x20000000
 80015c0:	20000044 	.word	0x20000044
 80015c4:	200001ac 	.word	0x200001ac

080015c8 <returnToPreviousMode>:

void returnToPreviousMode() {
 80015c8:	b480      	push	{r7}
 80015ca:	af00      	add	r7, sp, #0
	mode = tempMode;
 80015cc:	4b04      	ldr	r3, [pc, #16]	@ (80015e0 <returnToPreviousMode+0x18>)
 80015ce:	781a      	ldrb	r2, [r3, #0]
 80015d0:	4b04      	ldr	r3, [pc, #16]	@ (80015e4 <returnToPreviousMode+0x1c>)
 80015d2:	701a      	strb	r2, [r3, #0]
}
 80015d4:	bf00      	nop
 80015d6:	46bd      	mov	sp, r7
 80015d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015dc:	4770      	bx	lr
 80015de:	bf00      	nop
 80015e0:	200001ac 	.word	0x200001ac
 80015e4:	20000315 	.word	0x20000315

080015e8 <getSelect>:

uint8_t getSelect() {
 80015e8:	b480      	push	{r7}
 80015ea:	af00      	add	r7, sp, #0
	return alarm.select;
 80015ec:	4b03      	ldr	r3, [pc, #12]	@ (80015fc <getSelect+0x14>)
 80015ee:	7d1b      	ldrb	r3, [r3, #20]
}
 80015f0:	4618      	mov	r0, r3
 80015f2:	46bd      	mov	sp, r7
 80015f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f8:	4770      	bx	lr
 80015fa:	bf00      	nop
 80015fc:	20000000 	.word	0x20000000

08001600 <getAlarmEnabled>:

void setSelect(uint8_t s) {
	alarm.select = s;
}
uint8_t getAlarmEnabled(int num) {
 8001600:	b480      	push	{r7}
 8001602:	b083      	sub	sp, #12
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
	return alarm.set[num].enabled;
 8001608:	4a05      	ldr	r2, [pc, #20]	@ (8001620 <getAlarmEnabled+0x20>)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	009b      	lsls	r3, r3, #2
 800160e:	4413      	add	r3, r2
 8001610:	789b      	ldrb	r3, [r3, #2]
}
 8001612:	4618      	mov	r0, r3
 8001614:	370c      	adds	r7, #12
 8001616:	46bd      	mov	sp, r7
 8001618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161c:	4770      	bx	lr
 800161e:	bf00      	nop
 8001620:	20000000 	.word	0x20000000

08001624 <setAlarmEnabled>:
void setAlarmEnabled(uint8_t enabled, int num) {
 8001624:	b480      	push	{r7}
 8001626:	b083      	sub	sp, #12
 8001628:	af00      	add	r7, sp, #0
 800162a:	4603      	mov	r3, r0
 800162c:	6039      	str	r1, [r7, #0]
 800162e:	71fb      	strb	r3, [r7, #7]
	alarm.set[num].enabled = enabled;
 8001630:	4a05      	ldr	r2, [pc, #20]	@ (8001648 <setAlarmEnabled+0x24>)
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	009b      	lsls	r3, r3, #2
 8001636:	4413      	add	r3, r2
 8001638:	79fa      	ldrb	r2, [r7, #7]
 800163a:	709a      	strb	r2, [r3, #2]
}
 800163c:	bf00      	nop
 800163e:	370c      	adds	r7, #12
 8001640:	46bd      	mov	sp, r7
 8001642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001646:	4770      	bx	lr
 8001648:	20000000 	.word	0x20000000

0800164c <getAlarmRepeat>:

uint8_t getAlarmRepeat(int num) {
 800164c:	b480      	push	{r7}
 800164e:	b083      	sub	sp, #12
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
	return alarm.set[num].repeat;
 8001654:	4a05      	ldr	r2, [pc, #20]	@ (800166c <getAlarmRepeat+0x20>)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	009b      	lsls	r3, r3, #2
 800165a:	4413      	add	r3, r2
 800165c:	78db      	ldrb	r3, [r3, #3]
}
 800165e:	4618      	mov	r0, r3
 8001660:	370c      	adds	r7, #12
 8001662:	46bd      	mov	sp, r7
 8001664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001668:	4770      	bx	lr
 800166a:	bf00      	nop
 800166c:	20000000 	.word	0x20000000

08001670 <setAlarmRepeat>:

void setAlarmRepeat(uint8_t repeat, int num) {
 8001670:	b480      	push	{r7}
 8001672:	b083      	sub	sp, #12
 8001674:	af00      	add	r7, sp, #0
 8001676:	4603      	mov	r3, r0
 8001678:	6039      	str	r1, [r7, #0]
 800167a:	71fb      	strb	r3, [r7, #7]
	alarm.set[num].repeat = repeat;
 800167c:	4a05      	ldr	r2, [pc, #20]	@ (8001694 <setAlarmRepeat+0x24>)
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	009b      	lsls	r3, r3, #2
 8001682:	4413      	add	r3, r2
 8001684:	79fa      	ldrb	r2, [r7, #7]
 8001686:	70da      	strb	r2, [r3, #3]
}
 8001688:	bf00      	nop
 800168a:	370c      	adds	r7, #12
 800168c:	46bd      	mov	sp, r7
 800168e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001692:	4770      	bx	lr
 8001694:	20000000 	.word	0x20000000

08001698 <buzOnOff>:

extern TIM_HandleTypeDef htim2;
buzzer buz = {1, 0, 0};
buz_tone_psc buzTone = BUZ_TONE_LOW_PSC;

void buzOnOff() {
 8001698:	b580      	push	{r7, lr}
 800169a:	af00      	add	r7, sp, #0
	if(buz.onOff == TRUE) {
 800169c:	4b13      	ldr	r3, [pc, #76]	@ (80016ec <buzOnOff+0x54>)
 800169e:	785b      	ldrb	r3, [r3, #1]
 80016a0:	2b01      	cmp	r3, #1
 80016a2:	d121      	bne.n	80016e8 <buzOnOff+0x50>
		buz.ms++;
 80016a4:	4b11      	ldr	r3, [pc, #68]	@ (80016ec <buzOnOff+0x54>)
 80016a6:	789b      	ldrb	r3, [r3, #2]
 80016a8:	3301      	adds	r3, #1
 80016aa:	b2da      	uxtb	r2, r3
 80016ac:	4b0f      	ldr	r3, [pc, #60]	@ (80016ec <buzOnOff+0x54>)
 80016ae:	709a      	strb	r2, [r3, #2]
		if(buz.ms < BUZ_OP_TIME) {
 80016b0:	4b0e      	ldr	r3, [pc, #56]	@ (80016ec <buzOnOff+0x54>)
 80016b2:	789b      	ldrb	r3, [r3, #2]
 80016b4:	2b1d      	cmp	r3, #29
 80016b6:	d809      	bhi.n	80016cc <buzOnOff+0x34>
			TIM2->PSC = buzTone;
 80016b8:	4b0d      	ldr	r3, [pc, #52]	@ (80016f0 <buzOnOff+0x58>)
 80016ba:	881a      	ldrh	r2, [r3, #0]
 80016bc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80016c0:	629a      	str	r2, [r3, #40]	@ 0x28
			HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80016c2:	2100      	movs	r1, #0
 80016c4:	480b      	ldr	r0, [pc, #44]	@ (80016f4 <buzOnOff+0x5c>)
 80016c6:	f003 fe01 	bl	80052cc <HAL_TIM_PWM_Start>
			buz.ms = 0;
			HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
		}
	}

}
 80016ca:	e00d      	b.n	80016e8 <buzOnOff+0x50>
			buzTone = BUZ_TONE_LOW_PSC;
 80016cc:	4b08      	ldr	r3, [pc, #32]	@ (80016f0 <buzOnOff+0x58>)
 80016ce:	f643 2298 	movw	r2, #15000	@ 0x3a98
 80016d2:	801a      	strh	r2, [r3, #0]
			buz.onOff = 0;
 80016d4:	4b05      	ldr	r3, [pc, #20]	@ (80016ec <buzOnOff+0x54>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	705a      	strb	r2, [r3, #1]
			buz.ms = 0;
 80016da:	4b04      	ldr	r3, [pc, #16]	@ (80016ec <buzOnOff+0x54>)
 80016dc:	2200      	movs	r2, #0
 80016de:	709a      	strb	r2, [r3, #2]
			HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 80016e0:	2100      	movs	r1, #0
 80016e2:	4804      	ldr	r0, [pc, #16]	@ (80016f4 <buzOnOff+0x5c>)
 80016e4:	f003 feba 	bl	800545c <HAL_TIM_PWM_Stop>
}
 80016e8:	bf00      	nop
 80016ea:	bd80      	pop	{r7, pc}
 80016ec:	2000002c 	.word	0x2000002c
 80016f0:	20000030 	.word	0x20000030
 80016f4:	200001b0 	.word	0x200001b0

080016f8 <playMidTone>:

void playMidTone() {
 80016f8:	b580      	push	{r7, lr}
 80016fa:	af00      	add	r7, sp, #0
	if(getBuzzEnabled() == TRUE) {
 80016fc:	f000 f8e4 	bl	80018c8 <getBuzzEnabled>
 8001700:	4603      	mov	r3, r0
 8001702:	2b01      	cmp	r3, #1
 8001704:	d106      	bne.n	8001714 <playMidTone+0x1c>
		buzTone = BUZ_TONE_MID_PSC;
 8001706:	4b04      	ldr	r3, [pc, #16]	@ (8001718 <playMidTone+0x20>)
 8001708:	f242 7210 	movw	r2, #10000	@ 0x2710
 800170c:	801a      	strh	r2, [r3, #0]
		setbuzzerOnOff(1);
 800170e:	2001      	movs	r0, #1
 8001710:	f000 f8f6 	bl	8001900 <setbuzzerOnOff>
	}
}
 8001714:	bf00      	nop
 8001716:	bd80      	pop	{r7, pc}
 8001718:	20000030 	.word	0x20000030

0800171c <playHighTone>:

void playHighTone() {
 800171c:	b580      	push	{r7, lr}
 800171e:	af00      	add	r7, sp, #0
	if(getBuzzEnabled() == TRUE) {
 8001720:	f000 f8d2 	bl	80018c8 <getBuzzEnabled>
 8001724:	4603      	mov	r3, r0
 8001726:	2b01      	cmp	r3, #1
 8001728:	d106      	bne.n	8001738 <playHighTone+0x1c>
		buzTone = BUZ_TONE_HIGH_PSC;
 800172a:	4b04      	ldr	r3, [pc, #16]	@ (800173c <playHighTone+0x20>)
 800172c:	f641 524c 	movw	r2, #7500	@ 0x1d4c
 8001730:	801a      	strh	r2, [r3, #0]
		setbuzzerOnOff(1);
 8001732:	2001      	movs	r0, #1
 8001734:	f000 f8e4 	bl	8001900 <setbuzzerOnOff>
	}
}
 8001738:	bf00      	nop
 800173a:	bd80      	pop	{r7, pc}
 800173c:	20000030 	.word	0x20000030

08001740 <playAlram>:

void playAlram() {
 8001740:	b580      	push	{r7, lr}
 8001742:	af00      	add	r7, sp, #0
	if(buz.ms < (BUZ_OP_TIME * 2)) {
 8001744:	4b3c      	ldr	r3, [pc, #240]	@ (8001838 <playAlram+0xf8>)
 8001746:	789b      	ldrb	r3, [r3, #2]
 8001748:	2b3b      	cmp	r3, #59	@ 0x3b
 800174a:	d805      	bhi.n	8001758 <playAlram+0x18>
		buz.ms++;
 800174c:	4b3a      	ldr	r3, [pc, #232]	@ (8001838 <playAlram+0xf8>)
 800174e:	789b      	ldrb	r3, [r3, #2]
 8001750:	3301      	adds	r3, #1
 8001752:	b2da      	uxtb	r2, r3
 8001754:	4b38      	ldr	r3, [pc, #224]	@ (8001838 <playAlram+0xf8>)
 8001756:	709a      	strb	r2, [r3, #2]
	}


	if(buz.ms < BUZ_OP_TIME) {
 8001758:	4b37      	ldr	r3, [pc, #220]	@ (8001838 <playAlram+0xf8>)
 800175a:	789b      	ldrb	r3, [r3, #2]
 800175c:	2b1d      	cmp	r3, #29
 800175e:	d82f      	bhi.n	80017c0 <playAlram+0x80>
		if(getBuzzEnabled() == TRUE) {
 8001760:	f000 f8b2 	bl	80018c8 <getBuzzEnabled>
 8001764:	4603      	mov	r3, r0
 8001766:	2b01      	cmp	r3, #1
 8001768:	d108      	bne.n	800177c <playAlram+0x3c>
			TIM2->PSC = BUZ_TONE_HIGH_PSC;
 800176a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800176e:	f641 524c 	movw	r2, #7500	@ 0x1d4c
 8001772:	629a      	str	r2, [r3, #40]	@ 0x28
			HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001774:	2100      	movs	r1, #0
 8001776:	4831      	ldr	r0, [pc, #196]	@ (800183c <playAlram+0xfc>)
 8001778:	f003 fda8 	bl	80052cc <HAL_TIM_PWM_Start>
		}
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, 0);
 800177c:	2200      	movs	r2, #0
 800177e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001782:	482f      	ldr	r0, [pc, #188]	@ (8001840 <playAlram+0x100>)
 8001784:	f002 ffa4 	bl	80046d0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);
 8001788:	2200      	movs	r2, #0
 800178a:	2140      	movs	r1, #64	@ 0x40
 800178c:	482d      	ldr	r0, [pc, #180]	@ (8001844 <playAlram+0x104>)
 800178e:	f002 ff9f 	bl	80046d0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, 0);
 8001792:	2200      	movs	r2, #0
 8001794:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001798:	4829      	ldr	r0, [pc, #164]	@ (8001840 <playAlram+0x100>)
 800179a:	f002 ff99 	bl	80046d0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 0);
 800179e:	2200      	movs	r2, #0
 80017a0:	2120      	movs	r1, #32
 80017a2:	4829      	ldr	r0, [pc, #164]	@ (8001848 <playAlram+0x108>)
 80017a4:	f002 ff94 	bl	80046d0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, 0);
 80017a8:	2200      	movs	r2, #0
 80017aa:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80017ae:	4824      	ldr	r0, [pc, #144]	@ (8001840 <playAlram+0x100>)
 80017b0:	f002 ff8e 	bl	80046d0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 0);
 80017b4:	2200      	movs	r2, #0
 80017b6:	2101      	movs	r1, #1
 80017b8:	4823      	ldr	r0, [pc, #140]	@ (8001848 <playAlram+0x108>)
 80017ba:	f002 ff89 	bl	80046d0 <HAL_GPIO_WritePin>
		if(buz.ms >= (BUZ_OP_TIME * 2)) {
			buz.ms = 0;
		}
	}

}
 80017be:	e039      	b.n	8001834 <playAlram+0xf4>
	} else if(buz.ms > BUZ_OP_TIME) {
 80017c0:	4b1d      	ldr	r3, [pc, #116]	@ (8001838 <playAlram+0xf8>)
 80017c2:	789b      	ldrb	r3, [r3, #2]
 80017c4:	2b1e      	cmp	r3, #30
 80017c6:	d935      	bls.n	8001834 <playAlram+0xf4>
		if(getBuzzEnabled() == TRUE) {
 80017c8:	f000 f87e 	bl	80018c8 <getBuzzEnabled>
 80017cc:	4603      	mov	r3, r0
 80017ce:	2b01      	cmp	r3, #1
 80017d0:	d108      	bne.n	80017e4 <playAlram+0xa4>
			TIM2->PSC = BUZ_TONE_LOW_PSC;
 80017d2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80017d6:	f643 2298 	movw	r2, #15000	@ 0x3a98
 80017da:	629a      	str	r2, [r3, #40]	@ 0x28
			HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 80017dc:	2100      	movs	r1, #0
 80017de:	4817      	ldr	r0, [pc, #92]	@ (800183c <playAlram+0xfc>)
 80017e0:	f003 fe3c 	bl	800545c <HAL_TIM_PWM_Stop>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, 1);
 80017e4:	2201      	movs	r2, #1
 80017e6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80017ea:	4815      	ldr	r0, [pc, #84]	@ (8001840 <playAlram+0x100>)
 80017ec:	f002 ff70 	bl	80046d0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);
 80017f0:	2201      	movs	r2, #1
 80017f2:	2140      	movs	r1, #64	@ 0x40
 80017f4:	4813      	ldr	r0, [pc, #76]	@ (8001844 <playAlram+0x104>)
 80017f6:	f002 ff6b 	bl	80046d0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, 1);
 80017fa:	2201      	movs	r2, #1
 80017fc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001800:	480f      	ldr	r0, [pc, #60]	@ (8001840 <playAlram+0x100>)
 8001802:	f002 ff65 	bl	80046d0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 1);
 8001806:	2201      	movs	r2, #1
 8001808:	2120      	movs	r1, #32
 800180a:	480f      	ldr	r0, [pc, #60]	@ (8001848 <playAlram+0x108>)
 800180c:	f002 ff60 	bl	80046d0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, 1);
 8001810:	2201      	movs	r2, #1
 8001812:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001816:	480a      	ldr	r0, [pc, #40]	@ (8001840 <playAlram+0x100>)
 8001818:	f002 ff5a 	bl	80046d0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 1);
 800181c:	2201      	movs	r2, #1
 800181e:	2101      	movs	r1, #1
 8001820:	4809      	ldr	r0, [pc, #36]	@ (8001848 <playAlram+0x108>)
 8001822:	f002 ff55 	bl	80046d0 <HAL_GPIO_WritePin>
		if(buz.ms >= (BUZ_OP_TIME * 2)) {
 8001826:	4b04      	ldr	r3, [pc, #16]	@ (8001838 <playAlram+0xf8>)
 8001828:	789b      	ldrb	r3, [r3, #2]
 800182a:	2b3b      	cmp	r3, #59	@ 0x3b
 800182c:	d902      	bls.n	8001834 <playAlram+0xf4>
			buz.ms = 0;
 800182e:	4b02      	ldr	r3, [pc, #8]	@ (8001838 <playAlram+0xf8>)
 8001830:	2200      	movs	r2, #0
 8001832:	709a      	strb	r2, [r3, #2]
}
 8001834:	bf00      	nop
 8001836:	bd80      	pop	{r7, pc}
 8001838:	2000002c 	.word	0x2000002c
 800183c:	200001b0 	.word	0x200001b0
 8001840:	40020c00 	.word	0x40020c00
 8001844:	40020800 	.word	0x40020800
 8001848:	40020400 	.word	0x40020400

0800184c <buzReset>:

void buzReset() {
 800184c:	b580      	push	{r7, lr}
 800184e:	af00      	add	r7, sp, #0
	buz.ms = 0;
 8001850:	4b18      	ldr	r3, [pc, #96]	@ (80018b4 <buzReset+0x68>)
 8001852:	2200      	movs	r2, #0
 8001854:	709a      	strb	r2, [r3, #2]
	buz.onOff = 0;
 8001856:	4b17      	ldr	r3, [pc, #92]	@ (80018b4 <buzReset+0x68>)
 8001858:	2200      	movs	r2, #0
 800185a:	705a      	strb	r2, [r3, #1]
	TIM2->PSC = BUZ_TONE_LOW_PSC;
 800185c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001860:	f643 2298 	movw	r2, #15000	@ 0x3a98
 8001864:	629a      	str	r2, [r3, #40]	@ 0x28
	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 8001866:	2100      	movs	r1, #0
 8001868:	4813      	ldr	r0, [pc, #76]	@ (80018b8 <buzReset+0x6c>)
 800186a:	f003 fdf7 	bl	800545c <HAL_TIM_PWM_Stop>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, 1);
 800186e:	2201      	movs	r2, #1
 8001870:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001874:	4811      	ldr	r0, [pc, #68]	@ (80018bc <buzReset+0x70>)
 8001876:	f002 ff2b 	bl	80046d0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);
 800187a:	2201      	movs	r2, #1
 800187c:	2140      	movs	r1, #64	@ 0x40
 800187e:	4810      	ldr	r0, [pc, #64]	@ (80018c0 <buzReset+0x74>)
 8001880:	f002 ff26 	bl	80046d0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, 1);
 8001884:	2201      	movs	r2, #1
 8001886:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800188a:	480c      	ldr	r0, [pc, #48]	@ (80018bc <buzReset+0x70>)
 800188c:	f002 ff20 	bl	80046d0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 1);
 8001890:	2201      	movs	r2, #1
 8001892:	2120      	movs	r1, #32
 8001894:	480b      	ldr	r0, [pc, #44]	@ (80018c4 <buzReset+0x78>)
 8001896:	f002 ff1b 	bl	80046d0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, 1);
 800189a:	2201      	movs	r2, #1
 800189c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80018a0:	4806      	ldr	r0, [pc, #24]	@ (80018bc <buzReset+0x70>)
 80018a2:	f002 ff15 	bl	80046d0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 1);
 80018a6:	2201      	movs	r2, #1
 80018a8:	2101      	movs	r1, #1
 80018aa:	4806      	ldr	r0, [pc, #24]	@ (80018c4 <buzReset+0x78>)
 80018ac:	f002 ff10 	bl	80046d0 <HAL_GPIO_WritePin>
}
 80018b0:	bf00      	nop
 80018b2:	bd80      	pop	{r7, pc}
 80018b4:	2000002c 	.word	0x2000002c
 80018b8:	200001b0 	.word	0x200001b0
 80018bc:	40020c00 	.word	0x40020c00
 80018c0:	40020800 	.word	0x40020800
 80018c4:	40020400 	.word	0x40020400

080018c8 <getBuzzEnabled>:

uint8_t getBuzzEnabled() {
 80018c8:	b480      	push	{r7}
 80018ca:	af00      	add	r7, sp, #0
	return buz.enabled;
 80018cc:	4b03      	ldr	r3, [pc, #12]	@ (80018dc <getBuzzEnabled+0x14>)
 80018ce:	781b      	ldrb	r3, [r3, #0]
}
 80018d0:	4618      	mov	r0, r3
 80018d2:	46bd      	mov	sp, r7
 80018d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d8:	4770      	bx	lr
 80018da:	bf00      	nop
 80018dc:	2000002c 	.word	0x2000002c

080018e0 <setBuzzEnabled>:

void setBuzzEnabled(uint8_t enabled) {
 80018e0:	b480      	push	{r7}
 80018e2:	b083      	sub	sp, #12
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	4603      	mov	r3, r0
 80018e8:	71fb      	strb	r3, [r7, #7]
	buz.enabled = enabled;
 80018ea:	4a04      	ldr	r2, [pc, #16]	@ (80018fc <setBuzzEnabled+0x1c>)
 80018ec:	79fb      	ldrb	r3, [r7, #7]
 80018ee:	7013      	strb	r3, [r2, #0]
}
 80018f0:	bf00      	nop
 80018f2:	370c      	adds	r7, #12
 80018f4:	46bd      	mov	sp, r7
 80018f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fa:	4770      	bx	lr
 80018fc:	2000002c 	.word	0x2000002c

08001900 <setbuzzerOnOff>:

uint8_t getbuzzerOnOff() {
	return buz.onOff;
}

void setbuzzerOnOff(uint8_t onOff) {
 8001900:	b480      	push	{r7}
 8001902:	b083      	sub	sp, #12
 8001904:	af00      	add	r7, sp, #0
 8001906:	4603      	mov	r3, r0
 8001908:	71fb      	strb	r3, [r7, #7]
	buz.onOff = onOff;
 800190a:	4a04      	ldr	r2, [pc, #16]	@ (800191c <setbuzzerOnOff+0x1c>)
 800190c:	79fb      	ldrb	r3, [r7, #7]
 800190e:	7053      	strb	r3, [r2, #1]
}
 8001910:	bf00      	nop
 8001912:	370c      	adds	r7, #12
 8001914:	46bd      	mov	sp, r7
 8001916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191a:	4770      	bx	lr
 800191c:	2000002c 	.word	0x2000002c

08001920 <startClock>:
extern clockSt clock;
extern modeSelector mode;
int thirtyDays[4] = {4, 6, 9, 11};
clockSetting clockSet = SECOND;

void startClock() {
 8001920:	b580      	push	{r7, lr}
 8001922:	af00      	add	r7, sp, #0
	// 시간 증가 함수
	clock.millisecond++;
 8001924:	4b5b      	ldr	r3, [pc, #364]	@ (8001a94 <startClock+0x174>)
 8001926:	699b      	ldr	r3, [r3, #24]
 8001928:	3301      	adds	r3, #1
 800192a:	4a5a      	ldr	r2, [pc, #360]	@ (8001a94 <startClock+0x174>)
 800192c:	6193      	str	r3, [r2, #24]
	if(clock.millisecond == 1000) {
 800192e:	4b59      	ldr	r3, [pc, #356]	@ (8001a94 <startClock+0x174>)
 8001930:	699b      	ldr	r3, [r3, #24]
 8001932:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001936:	d107      	bne.n	8001948 <startClock+0x28>
		clock.millisecond = 0;
 8001938:	4b56      	ldr	r3, [pc, #344]	@ (8001a94 <startClock+0x174>)
 800193a:	2200      	movs	r2, #0
 800193c:	619a      	str	r2, [r3, #24]
		clock.second++;
 800193e:	4b55      	ldr	r3, [pc, #340]	@ (8001a94 <startClock+0x174>)
 8001940:	695b      	ldr	r3, [r3, #20]
 8001942:	3301      	adds	r3, #1
 8001944:	4a53      	ldr	r2, [pc, #332]	@ (8001a94 <startClock+0x174>)
 8001946:	6153      	str	r3, [r2, #20]
	}
	if(clock.second == 60) {
 8001948:	4b52      	ldr	r3, [pc, #328]	@ (8001a94 <startClock+0x174>)
 800194a:	695b      	ldr	r3, [r3, #20]
 800194c:	2b3c      	cmp	r3, #60	@ 0x3c
 800194e:	d107      	bne.n	8001960 <startClock+0x40>
		clock.second = 0;
 8001950:	4b50      	ldr	r3, [pc, #320]	@ (8001a94 <startClock+0x174>)
 8001952:	2200      	movs	r2, #0
 8001954:	615a      	str	r2, [r3, #20]
		clock.minute++;
 8001956:	4b4f      	ldr	r3, [pc, #316]	@ (8001a94 <startClock+0x174>)
 8001958:	691b      	ldr	r3, [r3, #16]
 800195a:	3301      	adds	r3, #1
 800195c:	4a4d      	ldr	r2, [pc, #308]	@ (8001a94 <startClock+0x174>)
 800195e:	6113      	str	r3, [r2, #16]
	}
	if(clock.minute == 60) {
 8001960:	4b4c      	ldr	r3, [pc, #304]	@ (8001a94 <startClock+0x174>)
 8001962:	691b      	ldr	r3, [r3, #16]
 8001964:	2b3c      	cmp	r3, #60	@ 0x3c
 8001966:	d109      	bne.n	800197c <startClock+0x5c>
		clock.minute = 0;
 8001968:	4b4a      	ldr	r3, [pc, #296]	@ (8001a94 <startClock+0x174>)
 800196a:	2200      	movs	r2, #0
 800196c:	611a      	str	r2, [r3, #16]
		clock.hour++;
 800196e:	4b49      	ldr	r3, [pc, #292]	@ (8001a94 <startClock+0x174>)
 8001970:	68db      	ldr	r3, [r3, #12]
 8001972:	3301      	adds	r3, #1
 8001974:	4a47      	ldr	r2, [pc, #284]	@ (8001a94 <startClock+0x174>)
 8001976:	60d3      	str	r3, [r2, #12]
		playMidTone();	// 정각에 부저 mid tone으로 울리는 함수
 8001978:	f7ff febe 	bl	80016f8 <playMidTone>
	}
	if(clock.hour == 24) {
 800197c:	4b45      	ldr	r3, [pc, #276]	@ (8001a94 <startClock+0x174>)
 800197e:	68db      	ldr	r3, [r3, #12]
 8001980:	2b18      	cmp	r3, #24
 8001982:	d109      	bne.n	8001998 <startClock+0x78>
		clock.hour = 0;
 8001984:	4b43      	ldr	r3, [pc, #268]	@ (8001a94 <startClock+0x174>)
 8001986:	2200      	movs	r2, #0
 8001988:	60da      	str	r2, [r3, #12]
		clock.date++;
 800198a:	4b42      	ldr	r3, [pc, #264]	@ (8001a94 <startClock+0x174>)
 800198c:	689b      	ldr	r3, [r3, #8]
 800198e:	3301      	adds	r3, #1
 8001990:	4a40      	ldr	r2, [pc, #256]	@ (8001a94 <startClock+0x174>)
 8001992:	6093      	str	r3, [r2, #8]
		playHighTone(); // 매일 0시에 부저 high tone으로 울리는 함수
 8001994:	f7ff fec2 	bl	800171c <playHighTone>
	}
	if(clock.month == 2) {
 8001998:	4b3e      	ldr	r3, [pc, #248]	@ (8001a94 <startClock+0x174>)
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	2b02      	cmp	r3, #2
 800199e:	d12f      	bne.n	8001a00 <startClock+0xe0>
		if(clock.leapYear == TRUE) {
 80019a0:	4b3c      	ldr	r3, [pc, #240]	@ (8001a94 <startClock+0x174>)
 80019a2:	7f1b      	ldrb	r3, [r3, #28]
 80019a4:	2b01      	cmp	r3, #1
 80019a6:	d115      	bne.n	80019d4 <startClock+0xb4>
			if(clock.date > 29) {
 80019a8:	4b3a      	ldr	r3, [pc, #232]	@ (8001a94 <startClock+0x174>)
 80019aa:	689b      	ldr	r3, [r3, #8]
 80019ac:	2b1d      	cmp	r3, #29
 80019ae:	dd5a      	ble.n	8001a66 <startClock+0x146>
				clock.date = 1;
 80019b0:	4b38      	ldr	r3, [pc, #224]	@ (8001a94 <startClock+0x174>)
 80019b2:	2201      	movs	r2, #1
 80019b4:	609a      	str	r2, [r3, #8]
				clock.month++;
 80019b6:	4b37      	ldr	r3, [pc, #220]	@ (8001a94 <startClock+0x174>)
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	3301      	adds	r3, #1
 80019bc:	4a35      	ldr	r2, [pc, #212]	@ (8001a94 <startClock+0x174>)
 80019be:	6053      	str	r3, [r2, #4]
				clock.thiryMonth = isThirtyDays(clock.month);
 80019c0:	4b34      	ldr	r3, [pc, #208]	@ (8001a94 <startClock+0x174>)
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	4618      	mov	r0, r3
 80019c6:	f000 f9a7 	bl	8001d18 <isThirtyDays>
 80019ca:	4603      	mov	r3, r0
 80019cc:	b2da      	uxtb	r2, r3
 80019ce:	4b31      	ldr	r3, [pc, #196]	@ (8001a94 <startClock+0x174>)
 80019d0:	775a      	strb	r2, [r3, #29]
 80019d2:	e048      	b.n	8001a66 <startClock+0x146>
			}
		} else {
			if(clock.date > 28) {
 80019d4:	4b2f      	ldr	r3, [pc, #188]	@ (8001a94 <startClock+0x174>)
 80019d6:	689b      	ldr	r3, [r3, #8]
 80019d8:	2b1c      	cmp	r3, #28
 80019da:	dd44      	ble.n	8001a66 <startClock+0x146>
				clock.date = 1;
 80019dc:	4b2d      	ldr	r3, [pc, #180]	@ (8001a94 <startClock+0x174>)
 80019de:	2201      	movs	r2, #1
 80019e0:	609a      	str	r2, [r3, #8]
				clock.month++;
 80019e2:	4b2c      	ldr	r3, [pc, #176]	@ (8001a94 <startClock+0x174>)
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	3301      	adds	r3, #1
 80019e8:	4a2a      	ldr	r2, [pc, #168]	@ (8001a94 <startClock+0x174>)
 80019ea:	6053      	str	r3, [r2, #4]
				clock.thiryMonth = isThirtyDays(clock.month);
 80019ec:	4b29      	ldr	r3, [pc, #164]	@ (8001a94 <startClock+0x174>)
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	4618      	mov	r0, r3
 80019f2:	f000 f991 	bl	8001d18 <isThirtyDays>
 80019f6:	4603      	mov	r3, r0
 80019f8:	b2da      	uxtb	r2, r3
 80019fa:	4b26      	ldr	r3, [pc, #152]	@ (8001a94 <startClock+0x174>)
 80019fc:	775a      	strb	r2, [r3, #29]
 80019fe:	e032      	b.n	8001a66 <startClock+0x146>
			}
		}
	} else if(clock.thiryMonth == TRUE) { // 말일이 30일인 달 4, 6, 9, 11
 8001a00:	4b24      	ldr	r3, [pc, #144]	@ (8001a94 <startClock+0x174>)
 8001a02:	7f5b      	ldrb	r3, [r3, #29]
 8001a04:	2b01      	cmp	r3, #1
 8001a06:	d115      	bne.n	8001a34 <startClock+0x114>
		if(clock.date > 30) {
 8001a08:	4b22      	ldr	r3, [pc, #136]	@ (8001a94 <startClock+0x174>)
 8001a0a:	689b      	ldr	r3, [r3, #8]
 8001a0c:	2b1e      	cmp	r3, #30
 8001a0e:	dd2a      	ble.n	8001a66 <startClock+0x146>
			clock.date = 1;
 8001a10:	4b20      	ldr	r3, [pc, #128]	@ (8001a94 <startClock+0x174>)
 8001a12:	2201      	movs	r2, #1
 8001a14:	609a      	str	r2, [r3, #8]
			clock.month++;
 8001a16:	4b1f      	ldr	r3, [pc, #124]	@ (8001a94 <startClock+0x174>)
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	3301      	adds	r3, #1
 8001a1c:	4a1d      	ldr	r2, [pc, #116]	@ (8001a94 <startClock+0x174>)
 8001a1e:	6053      	str	r3, [r2, #4]
			clock.thiryMonth = isThirtyDays(clock.month);
 8001a20:	4b1c      	ldr	r3, [pc, #112]	@ (8001a94 <startClock+0x174>)
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	4618      	mov	r0, r3
 8001a26:	f000 f977 	bl	8001d18 <isThirtyDays>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	b2da      	uxtb	r2, r3
 8001a2e:	4b19      	ldr	r3, [pc, #100]	@ (8001a94 <startClock+0x174>)
 8001a30:	775a      	strb	r2, [r3, #29]
 8001a32:	e018      	b.n	8001a66 <startClock+0x146>
		}
	} else if(clock.thiryMonth == FALSE) { // 말일이 31일인 달 1, 3, 5, 7, 8, 10, 12
 8001a34:	4b17      	ldr	r3, [pc, #92]	@ (8001a94 <startClock+0x174>)
 8001a36:	7f5b      	ldrb	r3, [r3, #29]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d114      	bne.n	8001a66 <startClock+0x146>
		if(clock.date > 31) {
 8001a3c:	4b15      	ldr	r3, [pc, #84]	@ (8001a94 <startClock+0x174>)
 8001a3e:	689b      	ldr	r3, [r3, #8]
 8001a40:	2b1f      	cmp	r3, #31
 8001a42:	dd10      	ble.n	8001a66 <startClock+0x146>
			clock.date = 1;
 8001a44:	4b13      	ldr	r3, [pc, #76]	@ (8001a94 <startClock+0x174>)
 8001a46:	2201      	movs	r2, #1
 8001a48:	609a      	str	r2, [r3, #8]
			clock.month++;
 8001a4a:	4b12      	ldr	r3, [pc, #72]	@ (8001a94 <startClock+0x174>)
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	3301      	adds	r3, #1
 8001a50:	4a10      	ldr	r2, [pc, #64]	@ (8001a94 <startClock+0x174>)
 8001a52:	6053      	str	r3, [r2, #4]
			clock.thiryMonth = isThirtyDays(clock.month);
 8001a54:	4b0f      	ldr	r3, [pc, #60]	@ (8001a94 <startClock+0x174>)
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f000 f95d 	bl	8001d18 <isThirtyDays>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	b2da      	uxtb	r2, r3
 8001a62:	4b0c      	ldr	r3, [pc, #48]	@ (8001a94 <startClock+0x174>)
 8001a64:	775a      	strb	r2, [r3, #29]
		}
	}

	if(clock.month > 12) {
 8001a66:	4b0b      	ldr	r3, [pc, #44]	@ (8001a94 <startClock+0x174>)
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	2b0c      	cmp	r3, #12
 8001a6c:	dd10      	ble.n	8001a90 <startClock+0x170>
		clock.month = 1;
 8001a6e:	4b09      	ldr	r3, [pc, #36]	@ (8001a94 <startClock+0x174>)
 8001a70:	2201      	movs	r2, #1
 8001a72:	605a      	str	r2, [r3, #4]
		clock.year++;
 8001a74:	4b07      	ldr	r3, [pc, #28]	@ (8001a94 <startClock+0x174>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	3301      	adds	r3, #1
 8001a7a:	4a06      	ldr	r2, [pc, #24]	@ (8001a94 <startClock+0x174>)
 8001a7c:	6013      	str	r3, [r2, #0]
		clock.leapYear = leapYearCalculator(clock.year);
 8001a7e:	4b05      	ldr	r3, [pc, #20]	@ (8001a94 <startClock+0x174>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4618      	mov	r0, r3
 8001a84:	f000 f914 	bl	8001cb0 <leapYearCalculator>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	b2da      	uxtb	r2, r3
 8001a8c:	4b01      	ldr	r3, [pc, #4]	@ (8001a94 <startClock+0x174>)
 8001a8e:	771a      	strb	r2, [r3, #28]
	}
}
 8001a90:	bf00      	nop
 8001a92:	bd80      	pop	{r7, pc}
 8001a94:	20000044 	.word	0x20000044

08001a98 <clcdDisplayClock>:

void clcdDisplayClock() {
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b088      	sub	sp, #32
 8001a9c:	af02      	add	r7, sp, #8
	// 시계기능 출력
	uint8_t buzzOnOff[8];
	uint8_t formet[12];
	if(clock.leapYear == TRUE) {
 8001a9e:	4b62      	ldr	r3, [pc, #392]	@ (8001c28 <clcdDisplayClock+0x190>)
 8001aa0:	7f1b      	ldrb	r3, [r3, #28]
 8001aa2:	2b01      	cmp	r3, #1
 8001aa4:	d10c      	bne.n	8001ac0 <clcdDisplayClock+0x28>
		sprintf(clock.buffer, "LEAP  %4d.%2d.%2d", clock.year, clock.month, clock.date);
 8001aa6:	4b60      	ldr	r3, [pc, #384]	@ (8001c28 <clcdDisplayClock+0x190>)
 8001aa8:	681a      	ldr	r2, [r3, #0]
 8001aaa:	4b5f      	ldr	r3, [pc, #380]	@ (8001c28 <clcdDisplayClock+0x190>)
 8001aac:	6859      	ldr	r1, [r3, #4]
 8001aae:	4b5e      	ldr	r3, [pc, #376]	@ (8001c28 <clcdDisplayClock+0x190>)
 8001ab0:	689b      	ldr	r3, [r3, #8]
 8001ab2:	9300      	str	r3, [sp, #0]
 8001ab4:	460b      	mov	r3, r1
 8001ab6:	495d      	ldr	r1, [pc, #372]	@ (8001c2c <clcdDisplayClock+0x194>)
 8001ab8:	485d      	ldr	r0, [pc, #372]	@ (8001c30 <clcdDisplayClock+0x198>)
 8001aba:	f005 fb01 	bl	80070c0 <siprintf>
 8001abe:	e00b      	b.n	8001ad8 <clcdDisplayClock+0x40>
	} else {
		sprintf(clock.buffer, "      %4d.%2d.%2d", clock.year, clock.month, clock.date);
 8001ac0:	4b59      	ldr	r3, [pc, #356]	@ (8001c28 <clcdDisplayClock+0x190>)
 8001ac2:	681a      	ldr	r2, [r3, #0]
 8001ac4:	4b58      	ldr	r3, [pc, #352]	@ (8001c28 <clcdDisplayClock+0x190>)
 8001ac6:	6859      	ldr	r1, [r3, #4]
 8001ac8:	4b57      	ldr	r3, [pc, #348]	@ (8001c28 <clcdDisplayClock+0x190>)
 8001aca:	689b      	ldr	r3, [r3, #8]
 8001acc:	9300      	str	r3, [sp, #0]
 8001ace:	460b      	mov	r3, r1
 8001ad0:	4958      	ldr	r1, [pc, #352]	@ (8001c34 <clcdDisplayClock+0x19c>)
 8001ad2:	4857      	ldr	r0, [pc, #348]	@ (8001c30 <clcdDisplayClock+0x198>)
 8001ad4:	f005 faf4 	bl	80070c0 <siprintf>
	}
	if(getBuzzEnabled() == TRUE) {	// 부저 상태 출력
 8001ad8:	f7ff fef6 	bl	80018c8 <getBuzzEnabled>
 8001adc:	4603      	mov	r3, r0
 8001ade:	2b01      	cmp	r3, #1
 8001ae0:	d106      	bne.n	8001af0 <clcdDisplayClock+0x58>
		sprintf(buzzOnOff, "BZ ON ");
 8001ae2:	f107 0310 	add.w	r3, r7, #16
 8001ae6:	4954      	ldr	r1, [pc, #336]	@ (8001c38 <clcdDisplayClock+0x1a0>)
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f005 fae9 	bl	80070c0 <siprintf>
 8001aee:	e005      	b.n	8001afc <clcdDisplayClock+0x64>

	} else {
		sprintf(buzzOnOff, "BZ OFF");
 8001af0:	f107 0310 	add.w	r3, r7, #16
 8001af4:	4951      	ldr	r1, [pc, #324]	@ (8001c3c <clcdDisplayClock+0x1a4>)
 8001af6:	4618      	mov	r0, r3
 8001af8:	f005 fae2 	bl	80070c0 <siprintf>
	}

	if(getTimeFormet() == TRUE) {  // 24시간 포멧일경우
 8001afc:	f000 fcaa 	bl	8002454 <getTimeFormet>
 8001b00:	4603      	mov	r3, r0
 8001b02:	2b01      	cmp	r3, #1
 8001b04:	d116      	bne.n	8001b34 <clcdDisplayClock+0x9c>
		if(getBlink() == TRUE) {
 8001b06:	f002 f907 	bl	8003d18 <getBlink>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	2b01      	cmp	r3, #1
 8001b0e:	d108      	bne.n	8001b22 <clcdDisplayClock+0x8a>
			sprintf(formet, "   %02d:%02d", clock.hour, clock.minute);
 8001b10:	4b45      	ldr	r3, [pc, #276]	@ (8001c28 <clcdDisplayClock+0x190>)
 8001b12:	68da      	ldr	r2, [r3, #12]
 8001b14:	4b44      	ldr	r3, [pc, #272]	@ (8001c28 <clcdDisplayClock+0x190>)
 8001b16:	691b      	ldr	r3, [r3, #16]
 8001b18:	1d38      	adds	r0, r7, #4
 8001b1a:	4949      	ldr	r1, [pc, #292]	@ (8001c40 <clcdDisplayClock+0x1a8>)
 8001b1c:	f005 fad0 	bl	80070c0 <siprintf>
 8001b20:	e06c      	b.n	8001bfc <clcdDisplayClock+0x164>
		} else { 	// 콜론X
			sprintf(formet, "   %02d %02d", clock.hour, clock.minute);
 8001b22:	4b41      	ldr	r3, [pc, #260]	@ (8001c28 <clcdDisplayClock+0x190>)
 8001b24:	68da      	ldr	r2, [r3, #12]
 8001b26:	4b40      	ldr	r3, [pc, #256]	@ (8001c28 <clcdDisplayClock+0x190>)
 8001b28:	691b      	ldr	r3, [r3, #16]
 8001b2a:	1d38      	adds	r0, r7, #4
 8001b2c:	4945      	ldr	r1, [pc, #276]	@ (8001c44 <clcdDisplayClock+0x1ac>)
 8001b2e:	f005 fac7 	bl	80070c0 <siprintf>
 8001b32:	e063      	b.n	8001bfc <clcdDisplayClock+0x164>
		}
	} else {					// AM/PM (12시간 포멧) 일경우
		if(getBlink() == TRUE) {
 8001b34:	f002 f8f0 	bl	8003d18 <getBlink>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	2b01      	cmp	r3, #1
 8001b3c:	d12f      	bne.n	8001b9e <clcdDisplayClock+0x106>
			if(clock.hour < 12) {	// AM
 8001b3e:	4b3a      	ldr	r3, [pc, #232]	@ (8001c28 <clcdDisplayClock+0x190>)
 8001b40:	68db      	ldr	r3, [r3, #12]
 8001b42:	2b0b      	cmp	r3, #11
 8001b44:	dc14      	bgt.n	8001b70 <clcdDisplayClock+0xd8>
				if(clock.hour == 0) {
 8001b46:	4b38      	ldr	r3, [pc, #224]	@ (8001c28 <clcdDisplayClock+0x190>)
 8001b48:	68db      	ldr	r3, [r3, #12]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d107      	bne.n	8001b5e <clcdDisplayClock+0xc6>
					// 24시 일때
					sprintf(formet, "AM %02d:%02d", 12, clock.minute);
 8001b4e:	4b36      	ldr	r3, [pc, #216]	@ (8001c28 <clcdDisplayClock+0x190>)
 8001b50:	691b      	ldr	r3, [r3, #16]
 8001b52:	1d38      	adds	r0, r7, #4
 8001b54:	220c      	movs	r2, #12
 8001b56:	493c      	ldr	r1, [pc, #240]	@ (8001c48 <clcdDisplayClock+0x1b0>)
 8001b58:	f005 fab2 	bl	80070c0 <siprintf>
 8001b5c:	e04e      	b.n	8001bfc <clcdDisplayClock+0x164>
				} else {
					sprintf(formet, "AM %02d:%02d", clock.hour, clock.minute);
 8001b5e:	4b32      	ldr	r3, [pc, #200]	@ (8001c28 <clcdDisplayClock+0x190>)
 8001b60:	68da      	ldr	r2, [r3, #12]
 8001b62:	4b31      	ldr	r3, [pc, #196]	@ (8001c28 <clcdDisplayClock+0x190>)
 8001b64:	691b      	ldr	r3, [r3, #16]
 8001b66:	1d38      	adds	r0, r7, #4
 8001b68:	4937      	ldr	r1, [pc, #220]	@ (8001c48 <clcdDisplayClock+0x1b0>)
 8001b6a:	f005 faa9 	bl	80070c0 <siprintf>
 8001b6e:	e045      	b.n	8001bfc <clcdDisplayClock+0x164>
				}
			} else {				// PM
				if(clock.hour == 12) {
 8001b70:	4b2d      	ldr	r3, [pc, #180]	@ (8001c28 <clcdDisplayClock+0x190>)
 8001b72:	68db      	ldr	r3, [r3, #12]
 8001b74:	2b0c      	cmp	r3, #12
 8001b76:	d107      	bne.n	8001b88 <clcdDisplayClock+0xf0>
					// 12시 일때
					sprintf(formet, "PM %02d:%02d", 12, clock.minute);
 8001b78:	4b2b      	ldr	r3, [pc, #172]	@ (8001c28 <clcdDisplayClock+0x190>)
 8001b7a:	691b      	ldr	r3, [r3, #16]
 8001b7c:	1d38      	adds	r0, r7, #4
 8001b7e:	220c      	movs	r2, #12
 8001b80:	4932      	ldr	r1, [pc, #200]	@ (8001c4c <clcdDisplayClock+0x1b4>)
 8001b82:	f005 fa9d 	bl	80070c0 <siprintf>
 8001b86:	e039      	b.n	8001bfc <clcdDisplayClock+0x164>
				} else {
					sprintf(formet, "PM %02d:%02d", (clock.hour - 12), clock.minute);
 8001b88:	4b27      	ldr	r3, [pc, #156]	@ (8001c28 <clcdDisplayClock+0x190>)
 8001b8a:	68db      	ldr	r3, [r3, #12]
 8001b8c:	f1a3 020c 	sub.w	r2, r3, #12
 8001b90:	4b25      	ldr	r3, [pc, #148]	@ (8001c28 <clcdDisplayClock+0x190>)
 8001b92:	691b      	ldr	r3, [r3, #16]
 8001b94:	1d38      	adds	r0, r7, #4
 8001b96:	492d      	ldr	r1, [pc, #180]	@ (8001c4c <clcdDisplayClock+0x1b4>)
 8001b98:	f005 fa92 	bl	80070c0 <siprintf>
 8001b9c:	e02e      	b.n	8001bfc <clcdDisplayClock+0x164>
				}
			}
		} else {	// 콜론X
			if(clock.hour < 12) {	// AM
 8001b9e:	4b22      	ldr	r3, [pc, #136]	@ (8001c28 <clcdDisplayClock+0x190>)
 8001ba0:	68db      	ldr	r3, [r3, #12]
 8001ba2:	2b0b      	cmp	r3, #11
 8001ba4:	dc14      	bgt.n	8001bd0 <clcdDisplayClock+0x138>
				if (clock.hour == 0) {
 8001ba6:	4b20      	ldr	r3, [pc, #128]	@ (8001c28 <clcdDisplayClock+0x190>)
 8001ba8:	68db      	ldr	r3, [r3, #12]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d107      	bne.n	8001bbe <clcdDisplayClock+0x126>
					// 24시 일때
					sprintf(formet, "AM %02d %02d", 12, clock.minute);
 8001bae:	4b1e      	ldr	r3, [pc, #120]	@ (8001c28 <clcdDisplayClock+0x190>)
 8001bb0:	691b      	ldr	r3, [r3, #16]
 8001bb2:	1d38      	adds	r0, r7, #4
 8001bb4:	220c      	movs	r2, #12
 8001bb6:	4926      	ldr	r1, [pc, #152]	@ (8001c50 <clcdDisplayClock+0x1b8>)
 8001bb8:	f005 fa82 	bl	80070c0 <siprintf>
 8001bbc:	e01e      	b.n	8001bfc <clcdDisplayClock+0x164>
				} else {
					sprintf(formet, "AM %02d %02d", clock.hour, clock.minute);
 8001bbe:	4b1a      	ldr	r3, [pc, #104]	@ (8001c28 <clcdDisplayClock+0x190>)
 8001bc0:	68da      	ldr	r2, [r3, #12]
 8001bc2:	4b19      	ldr	r3, [pc, #100]	@ (8001c28 <clcdDisplayClock+0x190>)
 8001bc4:	691b      	ldr	r3, [r3, #16]
 8001bc6:	1d38      	adds	r0, r7, #4
 8001bc8:	4921      	ldr	r1, [pc, #132]	@ (8001c50 <clcdDisplayClock+0x1b8>)
 8001bca:	f005 fa79 	bl	80070c0 <siprintf>
 8001bce:	e015      	b.n	8001bfc <clcdDisplayClock+0x164>
				}
			} else {				// PM
				if (clock.hour == 12) {
 8001bd0:	4b15      	ldr	r3, [pc, #84]	@ (8001c28 <clcdDisplayClock+0x190>)
 8001bd2:	68db      	ldr	r3, [r3, #12]
 8001bd4:	2b0c      	cmp	r3, #12
 8001bd6:	d107      	bne.n	8001be8 <clcdDisplayClock+0x150>
					// 12시 일때
					sprintf(formet, "PM %02d %02d", 12, clock.minute);
 8001bd8:	4b13      	ldr	r3, [pc, #76]	@ (8001c28 <clcdDisplayClock+0x190>)
 8001bda:	691b      	ldr	r3, [r3, #16]
 8001bdc:	1d38      	adds	r0, r7, #4
 8001bde:	220c      	movs	r2, #12
 8001be0:	491c      	ldr	r1, [pc, #112]	@ (8001c54 <clcdDisplayClock+0x1bc>)
 8001be2:	f005 fa6d 	bl	80070c0 <siprintf>
 8001be6:	e009      	b.n	8001bfc <clcdDisplayClock+0x164>
				} else {
					sprintf(formet, "PM %02d %02d", (clock.hour - 12), clock.minute);
 8001be8:	4b0f      	ldr	r3, [pc, #60]	@ (8001c28 <clcdDisplayClock+0x190>)
 8001bea:	68db      	ldr	r3, [r3, #12]
 8001bec:	f1a3 020c 	sub.w	r2, r3, #12
 8001bf0:	4b0d      	ldr	r3, [pc, #52]	@ (8001c28 <clcdDisplayClock+0x190>)
 8001bf2:	691b      	ldr	r3, [r3, #16]
 8001bf4:	1d38      	adds	r0, r7, #4
 8001bf6:	4917      	ldr	r1, [pc, #92]	@ (8001c54 <clcdDisplayClock+0x1bc>)
 8001bf8:	f005 fa62 	bl	80070c0 <siprintf>
				}
			}
		}
	}
	CLCD_Puts(0, 0, clock.buffer);
 8001bfc:	4a0c      	ldr	r2, [pc, #48]	@ (8001c30 <clcdDisplayClock+0x198>)
 8001bfe:	2100      	movs	r1, #0
 8001c00:	2000      	movs	r0, #0
 8001c02:	f7ff fb79 	bl	80012f8 <CLCD_Puts>
	sprintf(clock.buffer, "%s  %s", buzzOnOff, formet);
 8001c06:	1d3b      	adds	r3, r7, #4
 8001c08:	f107 0210 	add.w	r2, r7, #16
 8001c0c:	4912      	ldr	r1, [pc, #72]	@ (8001c58 <clcdDisplayClock+0x1c0>)
 8001c0e:	4808      	ldr	r0, [pc, #32]	@ (8001c30 <clcdDisplayClock+0x198>)
 8001c10:	f005 fa56 	bl	80070c0 <siprintf>
	CLCD_Puts(0, 1, clock.buffer);
 8001c14:	4a06      	ldr	r2, [pc, #24]	@ (8001c30 <clcdDisplayClock+0x198>)
 8001c16:	2101      	movs	r1, #1
 8001c18:	2000      	movs	r0, #0
 8001c1a:	f7ff fb6d 	bl	80012f8 <CLCD_Puts>
}
 8001c1e:	bf00      	nop
 8001c20:	3718      	adds	r7, #24
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	20000044 	.word	0x20000044
 8001c2c:	08007a84 	.word	0x08007a84
 8001c30:	20000063 	.word	0x20000063
 8001c34:	08007a98 	.word	0x08007a98
 8001c38:	08007aac 	.word	0x08007aac
 8001c3c:	08007ab4 	.word	0x08007ab4
 8001c40:	08007abc 	.word	0x08007abc
 8001c44:	08007acc 	.word	0x08007acc
 8001c48:	08007adc 	.word	0x08007adc
 8001c4c:	08007aec 	.word	0x08007aec
 8001c50:	08007afc 	.word	0x08007afc
 8001c54:	08007b0c 	.word	0x08007b0c
 8001c58:	08007b1c 	.word	0x08007b1c

08001c5c <tickClock>:

void tickClock() {
 8001c5c:	b598      	push	{r3, r4, r7, lr}
 8001c5e:	af00      	add	r7, sp, #0
	// 0.5초 마다 점멸
	// 7세그먼트에 초 단위 출력
	_7SEG_SetNumber(DGT1, clock.second / 10, 0);
 8001c60:	4b11      	ldr	r3, [pc, #68]	@ (8001ca8 <tickClock+0x4c>)
 8001c62:	695b      	ldr	r3, [r3, #20]
 8001c64:	4a11      	ldr	r2, [pc, #68]	@ (8001cac <tickClock+0x50>)
 8001c66:	fb82 1203 	smull	r1, r2, r2, r3
 8001c6a:	1092      	asrs	r2, r2, #2
 8001c6c:	17db      	asrs	r3, r3, #31
 8001c6e:	1ad3      	subs	r3, r2, r3
 8001c70:	2200      	movs	r2, #0
 8001c72:	4619      	mov	r1, r3
 8001c74:	2000      	movs	r0, #0
 8001c76:	f7fe fd59 	bl	800072c <_7SEG_SetNumber>
	_7SEG_SetNumber(DGT2, clock.second % 10, getBlink());
 8001c7a:	4b0b      	ldr	r3, [pc, #44]	@ (8001ca8 <tickClock+0x4c>)
 8001c7c:	695a      	ldr	r2, [r3, #20]
 8001c7e:	4b0b      	ldr	r3, [pc, #44]	@ (8001cac <tickClock+0x50>)
 8001c80:	fb83 1302 	smull	r1, r3, r3, r2
 8001c84:	1099      	asrs	r1, r3, #2
 8001c86:	17d3      	asrs	r3, r2, #31
 8001c88:	1acc      	subs	r4, r1, r3
 8001c8a:	4623      	mov	r3, r4
 8001c8c:	009b      	lsls	r3, r3, #2
 8001c8e:	4423      	add	r3, r4
 8001c90:	005b      	lsls	r3, r3, #1
 8001c92:	1ad4      	subs	r4, r2, r3
 8001c94:	f002 f840 	bl	8003d18 <getBlink>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	461a      	mov	r2, r3
 8001c9c:	4621      	mov	r1, r4
 8001c9e:	2001      	movs	r0, #1
 8001ca0:	f7fe fd44 	bl	800072c <_7SEG_SetNumber>

}
 8001ca4:	bf00      	nop
 8001ca6:	bd98      	pop	{r3, r4, r7, pc}
 8001ca8:	20000044 	.word	0x20000044
 8001cac:	66666667 	.word	0x66666667

08001cb0 <leapYearCalculator>:

int leapYearCalculator(int year) {
 8001cb0:	b480      	push	{r7}
 8001cb2:	b083      	sub	sp, #12
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
	// 윤년 계산
	if(year % 4 == 0){
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	f003 0303 	and.w	r3, r3, #3
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d120      	bne.n	8001d04 <leapYearCalculator+0x54>
		if(year % 100 == 0) {
 8001cc2:	687a      	ldr	r2, [r7, #4]
 8001cc4:	4b13      	ldr	r3, [pc, #76]	@ (8001d14 <leapYearCalculator+0x64>)
 8001cc6:	fb83 1302 	smull	r1, r3, r3, r2
 8001cca:	1159      	asrs	r1, r3, #5
 8001ccc:	17d3      	asrs	r3, r2, #31
 8001cce:	1acb      	subs	r3, r1, r3
 8001cd0:	2164      	movs	r1, #100	@ 0x64
 8001cd2:	fb01 f303 	mul.w	r3, r1, r3
 8001cd6:	1ad3      	subs	r3, r2, r3
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d111      	bne.n	8001d00 <leapYearCalculator+0x50>
			if(year % 400 == 0) {
 8001cdc:	687a      	ldr	r2, [r7, #4]
 8001cde:	4b0d      	ldr	r3, [pc, #52]	@ (8001d14 <leapYearCalculator+0x64>)
 8001ce0:	fb83 1302 	smull	r1, r3, r3, r2
 8001ce4:	11d9      	asrs	r1, r3, #7
 8001ce6:	17d3      	asrs	r3, r2, #31
 8001ce8:	1acb      	subs	r3, r1, r3
 8001cea:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8001cee:	fb01 f303 	mul.w	r3, r1, r3
 8001cf2:	1ad3      	subs	r3, r2, r3
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d101      	bne.n	8001cfc <leapYearCalculator+0x4c>
				return TRUE; // 4, 100, 400 으로 나누어 떨어지면 윤년
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	e004      	b.n	8001d06 <leapYearCalculator+0x56>
			} else {
				return FALSE; // 4, 100 으로 나누어 떨어지고 400으로 나누어 떨어지지 않으면 평년
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	e002      	b.n	8001d06 <leapYearCalculator+0x56>
			}
		} else {
			return TRUE;	// 4로 나누어 떨어지고 100으로 나누어 떨어지지 않으면 윤년
 8001d00:	2301      	movs	r3, #1
 8001d02:	e000      	b.n	8001d06 <leapYearCalculator+0x56>
		}
	} else {
		return FALSE;	// 4로 나누어 떨어지지 않으면 평년
 8001d04:	2300      	movs	r3, #0
	}
}
 8001d06:	4618      	mov	r0, r3
 8001d08:	370c      	adds	r7, #12
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d10:	4770      	bx	lr
 8001d12:	bf00      	nop
 8001d14:	51eb851f 	.word	0x51eb851f

08001d18 <isThirtyDays>:

int isThirtyDays(int month) {
 8001d18:	b480      	push	{r7}
 8001d1a:	b085      	sub	sp, #20
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
	// 30일로 끝나는 달 구분
	int bool = FALSE;
 8001d20:	2300      	movs	r3, #0
 8001d22:	60fb      	str	r3, [r7, #12]
	for(int i = 0; i < sizeof(thirtyDays) / sizeof(int); i++) {
 8001d24:	2300      	movs	r3, #0
 8001d26:	60bb      	str	r3, [r7, #8]
 8001d28:	e00c      	b.n	8001d44 <isThirtyDays+0x2c>
		if(thirtyDays[i] == month) {
 8001d2a:	4a0b      	ldr	r2, [pc, #44]	@ (8001d58 <isThirtyDays+0x40>)
 8001d2c:	68bb      	ldr	r3, [r7, #8]
 8001d2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d32:	687a      	ldr	r2, [r7, #4]
 8001d34:	429a      	cmp	r2, r3
 8001d36:	d102      	bne.n	8001d3e <isThirtyDays+0x26>
			bool = TRUE;
 8001d38:	2301      	movs	r3, #1
 8001d3a:	60fb      	str	r3, [r7, #12]
			break;
 8001d3c:	e005      	b.n	8001d4a <isThirtyDays+0x32>
	for(int i = 0; i < sizeof(thirtyDays) / sizeof(int); i++) {
 8001d3e:	68bb      	ldr	r3, [r7, #8]
 8001d40:	3301      	adds	r3, #1
 8001d42:	60bb      	str	r3, [r7, #8]
 8001d44:	68bb      	ldr	r3, [r7, #8]
 8001d46:	2b03      	cmp	r3, #3
 8001d48:	d9ef      	bls.n	8001d2a <isThirtyDays+0x12>
		}
	}
	return bool;
 8001d4a:	68fb      	ldr	r3, [r7, #12]
}
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	3714      	adds	r7, #20
 8001d50:	46bd      	mov	sp, r7
 8001d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d56:	4770      	bx	lr
 8001d58:	20000034 	.word	0x20000034

08001d5c <switchClockMode>:

void switchClockMode() { // 시계모드에서 시계설정 모드전환 함수
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	af00      	add	r7, sp, #0
	if(mode == CLOCK && getPressCount(1) == 700) {
 8001d60:	4b1c      	ldr	r3, [pc, #112]	@ (8001dd4 <switchClockMode+0x78>)
 8001d62:	781b      	ldrb	r3, [r3, #0]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d110      	bne.n	8001d8a <switchClockMode+0x2e>
 8001d68:	2001      	movs	r0, #1
 8001d6a:	f001 fe25 	bl	80039b8 <getPressCount>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	f5b3 7f2f 	cmp.w	r3, #700	@ 0x2bc
 8001d74:	d109      	bne.n	8001d8a <switchClockMode+0x2e>
		// 시계모드 이면서 누른 시간이 700 인경우
		mode = CLOCK_SETTING;
 8001d76:	4b17      	ldr	r3, [pc, #92]	@ (8001dd4 <switchClockMode+0x78>)
 8001d78:	2203      	movs	r2, #3
 8001d7a:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_5);
 8001d7c:	2120      	movs	r1, #32
 8001d7e:	4816      	ldr	r0, [pc, #88]	@ (8001dd8 <switchClockMode+0x7c>)
 8001d80:	f002 fcbf 	bl	8004702 <HAL_GPIO_TogglePin>
		playMidTone();
 8001d84:	f7ff fcb8 	bl	80016f8 <playMidTone>
		mode = CLOCK;
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_5);
		playMidTone();
		setWaitingTime(0);
	}
}
 8001d88:	e021      	b.n	8001dce <switchClockMode+0x72>
	} else if((mode == CLOCK_SETTING && getPressCount(1) == 700) || (mode == CLOCK_SETTING && getWaitingTime() > 30000)) {
 8001d8a:	4b12      	ldr	r3, [pc, #72]	@ (8001dd4 <switchClockMode+0x78>)
 8001d8c:	781b      	ldrb	r3, [r3, #0]
 8001d8e:	2b03      	cmp	r3, #3
 8001d90:	d106      	bne.n	8001da0 <switchClockMode+0x44>
 8001d92:	2001      	movs	r0, #1
 8001d94:	f001 fe10 	bl	80039b8 <getPressCount>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	f5b3 7f2f 	cmp.w	r3, #700	@ 0x2bc
 8001d9e:	d00a      	beq.n	8001db6 <switchClockMode+0x5a>
 8001da0:	4b0c      	ldr	r3, [pc, #48]	@ (8001dd4 <switchClockMode+0x78>)
 8001da2:	781b      	ldrb	r3, [r3, #0]
 8001da4:	2b03      	cmp	r3, #3
 8001da6:	d112      	bne.n	8001dce <switchClockMode+0x72>
 8001da8:	f001 ffc2 	bl	8003d30 <getWaitingTime>
 8001dac:	4603      	mov	r3, r0
 8001dae:	f247 5230 	movw	r2, #30000	@ 0x7530
 8001db2:	4293      	cmp	r3, r2
 8001db4:	dd0b      	ble.n	8001dce <switchClockMode+0x72>
		mode = CLOCK;
 8001db6:	4b07      	ldr	r3, [pc, #28]	@ (8001dd4 <switchClockMode+0x78>)
 8001db8:	2200      	movs	r2, #0
 8001dba:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_5);
 8001dbc:	2120      	movs	r1, #32
 8001dbe:	4806      	ldr	r0, [pc, #24]	@ (8001dd8 <switchClockMode+0x7c>)
 8001dc0:	f002 fc9f 	bl	8004702 <HAL_GPIO_TogglePin>
		playMidTone();
 8001dc4:	f7ff fc98 	bl	80016f8 <playMidTone>
		setWaitingTime(0);
 8001dc8:	2000      	movs	r0, #0
 8001dca:	f001 ffbd 	bl	8003d48 <setWaitingTime>
}
 8001dce:	bf00      	nop
 8001dd0:	bd80      	pop	{r7, pc}
 8001dd2:	bf00      	nop
 8001dd4:	20000315 	.word	0x20000315
 8001dd8:	40020400 	.word	0x40020400

08001ddc <clcdDisplayClockSetting>:



void clcdDisplayClockSetting() { // 시계설정모드 clcd출력
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b082      	sub	sp, #8
 8001de0:	af02      	add	r7, sp, #8
	// 0.5초 마다 점멸
	switch(clockSet) {
 8001de2:	4b9d      	ldr	r3, [pc, #628]	@ (8002058 <clcdDisplayClockSetting+0x27c>)
 8001de4:	781b      	ldrb	r3, [r3, #0]
 8001de6:	2b05      	cmp	r3, #5
 8001de8:	f200 8169 	bhi.w	80020be <clcdDisplayClockSetting+0x2e2>
 8001dec:	a201      	add	r2, pc, #4	@ (adr r2, 8001df4 <clcdDisplayClockSetting+0x18>)
 8001dee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001df2:	bf00      	nop
 8001df4:	08001e0d 	.word	0x08001e0d
 8001df8:	08001e79 	.word	0x08001e79
 8001dfc:	08001ee5 	.word	0x08001ee5
 8001e00:	08001f51 	.word	0x08001f51
 8001e04:	08001fbd 	.word	0x08001fbd
 8001e08:	08002029 	.word	0x08002029
	case SECOND:
		sprintf(clock.buffer, "CLOCK %4d.%2d.%2d", clock.year, clock.month, clock.date);
 8001e0c:	4b93      	ldr	r3, [pc, #588]	@ (800205c <clcdDisplayClockSetting+0x280>)
 8001e0e:	681a      	ldr	r2, [r3, #0]
 8001e10:	4b92      	ldr	r3, [pc, #584]	@ (800205c <clcdDisplayClockSetting+0x280>)
 8001e12:	6859      	ldr	r1, [r3, #4]
 8001e14:	4b91      	ldr	r3, [pc, #580]	@ (800205c <clcdDisplayClockSetting+0x280>)
 8001e16:	689b      	ldr	r3, [r3, #8]
 8001e18:	9300      	str	r3, [sp, #0]
 8001e1a:	460b      	mov	r3, r1
 8001e1c:	4990      	ldr	r1, [pc, #576]	@ (8002060 <clcdDisplayClockSetting+0x284>)
 8001e1e:	4891      	ldr	r0, [pc, #580]	@ (8002064 <clcdDisplayClockSetting+0x288>)
 8001e20:	f005 f94e 	bl	80070c0 <siprintf>
		CLCD_Puts(0, 0, clock.buffer);
 8001e24:	4a8f      	ldr	r2, [pc, #572]	@ (8002064 <clcdDisplayClockSetting+0x288>)
 8001e26:	2100      	movs	r1, #0
 8001e28:	2000      	movs	r0, #0
 8001e2a:	f7ff fa65 	bl	80012f8 <CLCD_Puts>
		if(getWaitingTime() < 200|| getBlink() == TRUE) {
 8001e2e:	f001 ff7f 	bl	8003d30 <getWaitingTime>
 8001e32:	4603      	mov	r3, r0
 8001e34:	2bc7      	cmp	r3, #199	@ 0xc7
 8001e36:	dd04      	ble.n	8001e42 <clcdDisplayClockSetting+0x66>
 8001e38:	f001 ff6e 	bl	8003d18 <getBlink>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	2b01      	cmp	r3, #1
 8001e40:	d10c      	bne.n	8001e5c <clcdDisplayClockSetting+0x80>
			sprintf(clock.buffer, "SET     %02d:%02d:%02d", clock.hour, clock.minute, clock.second);
 8001e42:	4b86      	ldr	r3, [pc, #536]	@ (800205c <clcdDisplayClockSetting+0x280>)
 8001e44:	68da      	ldr	r2, [r3, #12]
 8001e46:	4b85      	ldr	r3, [pc, #532]	@ (800205c <clcdDisplayClockSetting+0x280>)
 8001e48:	6919      	ldr	r1, [r3, #16]
 8001e4a:	4b84      	ldr	r3, [pc, #528]	@ (800205c <clcdDisplayClockSetting+0x280>)
 8001e4c:	695b      	ldr	r3, [r3, #20]
 8001e4e:	9300      	str	r3, [sp, #0]
 8001e50:	460b      	mov	r3, r1
 8001e52:	4985      	ldr	r1, [pc, #532]	@ (8002068 <clcdDisplayClockSetting+0x28c>)
 8001e54:	4883      	ldr	r0, [pc, #524]	@ (8002064 <clcdDisplayClockSetting+0x288>)
 8001e56:	f005 f933 	bl	80070c0 <siprintf>
 8001e5a:	e007      	b.n	8001e6c <clcdDisplayClockSetting+0x90>
		} else {
			sprintf(clock.buffer, "SET     %02d:%02d:  ", clock.hour, clock.minute);
 8001e5c:	4b7f      	ldr	r3, [pc, #508]	@ (800205c <clcdDisplayClockSetting+0x280>)
 8001e5e:	68da      	ldr	r2, [r3, #12]
 8001e60:	4b7e      	ldr	r3, [pc, #504]	@ (800205c <clcdDisplayClockSetting+0x280>)
 8001e62:	691b      	ldr	r3, [r3, #16]
 8001e64:	4981      	ldr	r1, [pc, #516]	@ (800206c <clcdDisplayClockSetting+0x290>)
 8001e66:	487f      	ldr	r0, [pc, #508]	@ (8002064 <clcdDisplayClockSetting+0x288>)
 8001e68:	f005 f92a 	bl	80070c0 <siprintf>
		}
		CLCD_Puts(0, 1, clock.buffer);
 8001e6c:	4a7d      	ldr	r2, [pc, #500]	@ (8002064 <clcdDisplayClockSetting+0x288>)
 8001e6e:	2101      	movs	r1, #1
 8001e70:	2000      	movs	r0, #0
 8001e72:	f7ff fa41 	bl	80012f8 <CLCD_Puts>
		break;
 8001e76:	e122      	b.n	80020be <clcdDisplayClockSetting+0x2e2>
	case MINUTE:
		sprintf(clock.buffer, "CLOCK %4d.%2d.%2d", clock.year, clock.month, clock.date);
 8001e78:	4b78      	ldr	r3, [pc, #480]	@ (800205c <clcdDisplayClockSetting+0x280>)
 8001e7a:	681a      	ldr	r2, [r3, #0]
 8001e7c:	4b77      	ldr	r3, [pc, #476]	@ (800205c <clcdDisplayClockSetting+0x280>)
 8001e7e:	6859      	ldr	r1, [r3, #4]
 8001e80:	4b76      	ldr	r3, [pc, #472]	@ (800205c <clcdDisplayClockSetting+0x280>)
 8001e82:	689b      	ldr	r3, [r3, #8]
 8001e84:	9300      	str	r3, [sp, #0]
 8001e86:	460b      	mov	r3, r1
 8001e88:	4975      	ldr	r1, [pc, #468]	@ (8002060 <clcdDisplayClockSetting+0x284>)
 8001e8a:	4876      	ldr	r0, [pc, #472]	@ (8002064 <clcdDisplayClockSetting+0x288>)
 8001e8c:	f005 f918 	bl	80070c0 <siprintf>
		CLCD_Puts(0, 0, clock.buffer);
 8001e90:	4a74      	ldr	r2, [pc, #464]	@ (8002064 <clcdDisplayClockSetting+0x288>)
 8001e92:	2100      	movs	r1, #0
 8001e94:	2000      	movs	r0, #0
 8001e96:	f7ff fa2f 	bl	80012f8 <CLCD_Puts>
		if(getWaitingTime() < 200 || getBlink() == TRUE) {
 8001e9a:	f001 ff49 	bl	8003d30 <getWaitingTime>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	2bc7      	cmp	r3, #199	@ 0xc7
 8001ea2:	dd04      	ble.n	8001eae <clcdDisplayClockSetting+0xd2>
 8001ea4:	f001 ff38 	bl	8003d18 <getBlink>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	2b01      	cmp	r3, #1
 8001eac:	d10c      	bne.n	8001ec8 <clcdDisplayClockSetting+0xec>
			sprintf(clock.buffer, "SET     %02d:%02d:%02d", clock.hour, clock.minute, clock.second);
 8001eae:	4b6b      	ldr	r3, [pc, #428]	@ (800205c <clcdDisplayClockSetting+0x280>)
 8001eb0:	68da      	ldr	r2, [r3, #12]
 8001eb2:	4b6a      	ldr	r3, [pc, #424]	@ (800205c <clcdDisplayClockSetting+0x280>)
 8001eb4:	6919      	ldr	r1, [r3, #16]
 8001eb6:	4b69      	ldr	r3, [pc, #420]	@ (800205c <clcdDisplayClockSetting+0x280>)
 8001eb8:	695b      	ldr	r3, [r3, #20]
 8001eba:	9300      	str	r3, [sp, #0]
 8001ebc:	460b      	mov	r3, r1
 8001ebe:	496a      	ldr	r1, [pc, #424]	@ (8002068 <clcdDisplayClockSetting+0x28c>)
 8001ec0:	4868      	ldr	r0, [pc, #416]	@ (8002064 <clcdDisplayClockSetting+0x288>)
 8001ec2:	f005 f8fd 	bl	80070c0 <siprintf>
 8001ec6:	e007      	b.n	8001ed8 <clcdDisplayClockSetting+0xfc>
		} else {
			sprintf(clock.buffer, "SET     %02d:  :%02d", clock.hour, clock.second);
 8001ec8:	4b64      	ldr	r3, [pc, #400]	@ (800205c <clcdDisplayClockSetting+0x280>)
 8001eca:	68da      	ldr	r2, [r3, #12]
 8001ecc:	4b63      	ldr	r3, [pc, #396]	@ (800205c <clcdDisplayClockSetting+0x280>)
 8001ece:	695b      	ldr	r3, [r3, #20]
 8001ed0:	4967      	ldr	r1, [pc, #412]	@ (8002070 <clcdDisplayClockSetting+0x294>)
 8001ed2:	4864      	ldr	r0, [pc, #400]	@ (8002064 <clcdDisplayClockSetting+0x288>)
 8001ed4:	f005 f8f4 	bl	80070c0 <siprintf>
		}
		CLCD_Puts(0, 1, clock.buffer);
 8001ed8:	4a62      	ldr	r2, [pc, #392]	@ (8002064 <clcdDisplayClockSetting+0x288>)
 8001eda:	2101      	movs	r1, #1
 8001edc:	2000      	movs	r0, #0
 8001ede:	f7ff fa0b 	bl	80012f8 <CLCD_Puts>
		break;
 8001ee2:	e0ec      	b.n	80020be <clcdDisplayClockSetting+0x2e2>
	case HOUR:
		sprintf(clock.buffer, "CLOCK %4d.%2d.%2d", clock.year, clock.month, clock.date);
 8001ee4:	4b5d      	ldr	r3, [pc, #372]	@ (800205c <clcdDisplayClockSetting+0x280>)
 8001ee6:	681a      	ldr	r2, [r3, #0]
 8001ee8:	4b5c      	ldr	r3, [pc, #368]	@ (800205c <clcdDisplayClockSetting+0x280>)
 8001eea:	6859      	ldr	r1, [r3, #4]
 8001eec:	4b5b      	ldr	r3, [pc, #364]	@ (800205c <clcdDisplayClockSetting+0x280>)
 8001eee:	689b      	ldr	r3, [r3, #8]
 8001ef0:	9300      	str	r3, [sp, #0]
 8001ef2:	460b      	mov	r3, r1
 8001ef4:	495a      	ldr	r1, [pc, #360]	@ (8002060 <clcdDisplayClockSetting+0x284>)
 8001ef6:	485b      	ldr	r0, [pc, #364]	@ (8002064 <clcdDisplayClockSetting+0x288>)
 8001ef8:	f005 f8e2 	bl	80070c0 <siprintf>
		CLCD_Puts(0, 0, clock.buffer);
 8001efc:	4a59      	ldr	r2, [pc, #356]	@ (8002064 <clcdDisplayClockSetting+0x288>)
 8001efe:	2100      	movs	r1, #0
 8001f00:	2000      	movs	r0, #0
 8001f02:	f7ff f9f9 	bl	80012f8 <CLCD_Puts>
		if(getWaitingTime() < 200 || getBlink() == TRUE) {
 8001f06:	f001 ff13 	bl	8003d30 <getWaitingTime>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	2bc7      	cmp	r3, #199	@ 0xc7
 8001f0e:	dd04      	ble.n	8001f1a <clcdDisplayClockSetting+0x13e>
 8001f10:	f001 ff02 	bl	8003d18 <getBlink>
 8001f14:	4603      	mov	r3, r0
 8001f16:	2b01      	cmp	r3, #1
 8001f18:	d10c      	bne.n	8001f34 <clcdDisplayClockSetting+0x158>
			sprintf(clock.buffer, "SET     %02d:%02d:%02d", clock.hour, clock.minute, clock.second);
 8001f1a:	4b50      	ldr	r3, [pc, #320]	@ (800205c <clcdDisplayClockSetting+0x280>)
 8001f1c:	68da      	ldr	r2, [r3, #12]
 8001f1e:	4b4f      	ldr	r3, [pc, #316]	@ (800205c <clcdDisplayClockSetting+0x280>)
 8001f20:	6919      	ldr	r1, [r3, #16]
 8001f22:	4b4e      	ldr	r3, [pc, #312]	@ (800205c <clcdDisplayClockSetting+0x280>)
 8001f24:	695b      	ldr	r3, [r3, #20]
 8001f26:	9300      	str	r3, [sp, #0]
 8001f28:	460b      	mov	r3, r1
 8001f2a:	494f      	ldr	r1, [pc, #316]	@ (8002068 <clcdDisplayClockSetting+0x28c>)
 8001f2c:	484d      	ldr	r0, [pc, #308]	@ (8002064 <clcdDisplayClockSetting+0x288>)
 8001f2e:	f005 f8c7 	bl	80070c0 <siprintf>
 8001f32:	e007      	b.n	8001f44 <clcdDisplayClockSetting+0x168>
		} else {
			sprintf(clock.buffer, "SET       :%02d:%02d", clock.minute, clock.second);
 8001f34:	4b49      	ldr	r3, [pc, #292]	@ (800205c <clcdDisplayClockSetting+0x280>)
 8001f36:	691a      	ldr	r2, [r3, #16]
 8001f38:	4b48      	ldr	r3, [pc, #288]	@ (800205c <clcdDisplayClockSetting+0x280>)
 8001f3a:	695b      	ldr	r3, [r3, #20]
 8001f3c:	494d      	ldr	r1, [pc, #308]	@ (8002074 <clcdDisplayClockSetting+0x298>)
 8001f3e:	4849      	ldr	r0, [pc, #292]	@ (8002064 <clcdDisplayClockSetting+0x288>)
 8001f40:	f005 f8be 	bl	80070c0 <siprintf>
		}
		CLCD_Puts(0, 1, clock.buffer);
 8001f44:	4a47      	ldr	r2, [pc, #284]	@ (8002064 <clcdDisplayClockSetting+0x288>)
 8001f46:	2101      	movs	r1, #1
 8001f48:	2000      	movs	r0, #0
 8001f4a:	f7ff f9d5 	bl	80012f8 <CLCD_Puts>
		break;
 8001f4e:	e0b6      	b.n	80020be <clcdDisplayClockSetting+0x2e2>
	case DATE:
		if(getWaitingTime() < 200 || getBlink() == TRUE) {
 8001f50:	f001 feee 	bl	8003d30 <getWaitingTime>
 8001f54:	4603      	mov	r3, r0
 8001f56:	2bc7      	cmp	r3, #199	@ 0xc7
 8001f58:	dd04      	ble.n	8001f64 <clcdDisplayClockSetting+0x188>
 8001f5a:	f001 fedd 	bl	8003d18 <getBlink>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	2b01      	cmp	r3, #1
 8001f62:	d10c      	bne.n	8001f7e <clcdDisplayClockSetting+0x1a2>
			sprintf(clock.buffer, "CLOCK %4d.%2d.%2d", clock.year, clock.month, clock.date);
 8001f64:	4b3d      	ldr	r3, [pc, #244]	@ (800205c <clcdDisplayClockSetting+0x280>)
 8001f66:	681a      	ldr	r2, [r3, #0]
 8001f68:	4b3c      	ldr	r3, [pc, #240]	@ (800205c <clcdDisplayClockSetting+0x280>)
 8001f6a:	6859      	ldr	r1, [r3, #4]
 8001f6c:	4b3b      	ldr	r3, [pc, #236]	@ (800205c <clcdDisplayClockSetting+0x280>)
 8001f6e:	689b      	ldr	r3, [r3, #8]
 8001f70:	9300      	str	r3, [sp, #0]
 8001f72:	460b      	mov	r3, r1
 8001f74:	493a      	ldr	r1, [pc, #232]	@ (8002060 <clcdDisplayClockSetting+0x284>)
 8001f76:	483b      	ldr	r0, [pc, #236]	@ (8002064 <clcdDisplayClockSetting+0x288>)
 8001f78:	f005 f8a2 	bl	80070c0 <siprintf>
 8001f7c:	e007      	b.n	8001f8e <clcdDisplayClockSetting+0x1b2>
		} else {
			sprintf(clock.buffer, "CLOCK %4d.%2d.  ", clock.year, clock.month);
 8001f7e:	4b37      	ldr	r3, [pc, #220]	@ (800205c <clcdDisplayClockSetting+0x280>)
 8001f80:	681a      	ldr	r2, [r3, #0]
 8001f82:	4b36      	ldr	r3, [pc, #216]	@ (800205c <clcdDisplayClockSetting+0x280>)
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	493c      	ldr	r1, [pc, #240]	@ (8002078 <clcdDisplayClockSetting+0x29c>)
 8001f88:	4836      	ldr	r0, [pc, #216]	@ (8002064 <clcdDisplayClockSetting+0x288>)
 8001f8a:	f005 f899 	bl	80070c0 <siprintf>
		}
		CLCD_Puts(0, 0, clock.buffer);
 8001f8e:	4a35      	ldr	r2, [pc, #212]	@ (8002064 <clcdDisplayClockSetting+0x288>)
 8001f90:	2100      	movs	r1, #0
 8001f92:	2000      	movs	r0, #0
 8001f94:	f7ff f9b0 	bl	80012f8 <CLCD_Puts>
		sprintf(clock.buffer, "SET     %02d:%02d:%02d", clock.hour, clock.minute, clock.second);
 8001f98:	4b30      	ldr	r3, [pc, #192]	@ (800205c <clcdDisplayClockSetting+0x280>)
 8001f9a:	68da      	ldr	r2, [r3, #12]
 8001f9c:	4b2f      	ldr	r3, [pc, #188]	@ (800205c <clcdDisplayClockSetting+0x280>)
 8001f9e:	6919      	ldr	r1, [r3, #16]
 8001fa0:	4b2e      	ldr	r3, [pc, #184]	@ (800205c <clcdDisplayClockSetting+0x280>)
 8001fa2:	695b      	ldr	r3, [r3, #20]
 8001fa4:	9300      	str	r3, [sp, #0]
 8001fa6:	460b      	mov	r3, r1
 8001fa8:	492f      	ldr	r1, [pc, #188]	@ (8002068 <clcdDisplayClockSetting+0x28c>)
 8001faa:	482e      	ldr	r0, [pc, #184]	@ (8002064 <clcdDisplayClockSetting+0x288>)
 8001fac:	f005 f888 	bl	80070c0 <siprintf>
		CLCD_Puts(0, 1, clock.buffer);
 8001fb0:	4a2c      	ldr	r2, [pc, #176]	@ (8002064 <clcdDisplayClockSetting+0x288>)
 8001fb2:	2101      	movs	r1, #1
 8001fb4:	2000      	movs	r0, #0
 8001fb6:	f7ff f99f 	bl	80012f8 <CLCD_Puts>
		break;
 8001fba:	e080      	b.n	80020be <clcdDisplayClockSetting+0x2e2>
	case MONTH:
		if(getWaitingTime() < 200 || getBlink() == TRUE) {
 8001fbc:	f001 feb8 	bl	8003d30 <getWaitingTime>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	2bc7      	cmp	r3, #199	@ 0xc7
 8001fc4:	dd04      	ble.n	8001fd0 <clcdDisplayClockSetting+0x1f4>
 8001fc6:	f001 fea7 	bl	8003d18 <getBlink>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	2b01      	cmp	r3, #1
 8001fce:	d10c      	bne.n	8001fea <clcdDisplayClockSetting+0x20e>
			sprintf(clock.buffer, "CLOCK %4d.%2d.%2d", clock.year, clock.month, clock.date);
 8001fd0:	4b22      	ldr	r3, [pc, #136]	@ (800205c <clcdDisplayClockSetting+0x280>)
 8001fd2:	681a      	ldr	r2, [r3, #0]
 8001fd4:	4b21      	ldr	r3, [pc, #132]	@ (800205c <clcdDisplayClockSetting+0x280>)
 8001fd6:	6859      	ldr	r1, [r3, #4]
 8001fd8:	4b20      	ldr	r3, [pc, #128]	@ (800205c <clcdDisplayClockSetting+0x280>)
 8001fda:	689b      	ldr	r3, [r3, #8]
 8001fdc:	9300      	str	r3, [sp, #0]
 8001fde:	460b      	mov	r3, r1
 8001fe0:	491f      	ldr	r1, [pc, #124]	@ (8002060 <clcdDisplayClockSetting+0x284>)
 8001fe2:	4820      	ldr	r0, [pc, #128]	@ (8002064 <clcdDisplayClockSetting+0x288>)
 8001fe4:	f005 f86c 	bl	80070c0 <siprintf>
 8001fe8:	e007      	b.n	8001ffa <clcdDisplayClockSetting+0x21e>
		} else {
			sprintf(clock.buffer, "CLOCK %4d.  .%2d", clock.year, clock.date);
 8001fea:	4b1c      	ldr	r3, [pc, #112]	@ (800205c <clcdDisplayClockSetting+0x280>)
 8001fec:	681a      	ldr	r2, [r3, #0]
 8001fee:	4b1b      	ldr	r3, [pc, #108]	@ (800205c <clcdDisplayClockSetting+0x280>)
 8001ff0:	689b      	ldr	r3, [r3, #8]
 8001ff2:	4922      	ldr	r1, [pc, #136]	@ (800207c <clcdDisplayClockSetting+0x2a0>)
 8001ff4:	481b      	ldr	r0, [pc, #108]	@ (8002064 <clcdDisplayClockSetting+0x288>)
 8001ff6:	f005 f863 	bl	80070c0 <siprintf>
		}
		CLCD_Puts(0, 0, clock.buffer);
 8001ffa:	4a1a      	ldr	r2, [pc, #104]	@ (8002064 <clcdDisplayClockSetting+0x288>)
 8001ffc:	2100      	movs	r1, #0
 8001ffe:	2000      	movs	r0, #0
 8002000:	f7ff f97a 	bl	80012f8 <CLCD_Puts>
		sprintf(clock.buffer, "SET     %02d:%02d:%02d", clock.hour, clock.minute, clock.second);
 8002004:	4b15      	ldr	r3, [pc, #84]	@ (800205c <clcdDisplayClockSetting+0x280>)
 8002006:	68da      	ldr	r2, [r3, #12]
 8002008:	4b14      	ldr	r3, [pc, #80]	@ (800205c <clcdDisplayClockSetting+0x280>)
 800200a:	6919      	ldr	r1, [r3, #16]
 800200c:	4b13      	ldr	r3, [pc, #76]	@ (800205c <clcdDisplayClockSetting+0x280>)
 800200e:	695b      	ldr	r3, [r3, #20]
 8002010:	9300      	str	r3, [sp, #0]
 8002012:	460b      	mov	r3, r1
 8002014:	4914      	ldr	r1, [pc, #80]	@ (8002068 <clcdDisplayClockSetting+0x28c>)
 8002016:	4813      	ldr	r0, [pc, #76]	@ (8002064 <clcdDisplayClockSetting+0x288>)
 8002018:	f005 f852 	bl	80070c0 <siprintf>
		CLCD_Puts(0, 1, clock.buffer);
 800201c:	4a11      	ldr	r2, [pc, #68]	@ (8002064 <clcdDisplayClockSetting+0x288>)
 800201e:	2101      	movs	r1, #1
 8002020:	2000      	movs	r0, #0
 8002022:	f7ff f969 	bl	80012f8 <CLCD_Puts>
		break;
 8002026:	e04a      	b.n	80020be <clcdDisplayClockSetting+0x2e2>
	case YEAR:
		if(getWaitingTime() < 200 || getBlink() == TRUE) {
 8002028:	f001 fe82 	bl	8003d30 <getWaitingTime>
 800202c:	4603      	mov	r3, r0
 800202e:	2bc7      	cmp	r3, #199	@ 0xc7
 8002030:	dd04      	ble.n	800203c <clcdDisplayClockSetting+0x260>
 8002032:	f001 fe71 	bl	8003d18 <getBlink>
 8002036:	4603      	mov	r3, r0
 8002038:	2b01      	cmp	r3, #1
 800203a:	d121      	bne.n	8002080 <clcdDisplayClockSetting+0x2a4>
			sprintf(clock.buffer, "CLOCK %4d.%2d.%2d", clock.year, clock.month, clock.date);
 800203c:	4b07      	ldr	r3, [pc, #28]	@ (800205c <clcdDisplayClockSetting+0x280>)
 800203e:	681a      	ldr	r2, [r3, #0]
 8002040:	4b06      	ldr	r3, [pc, #24]	@ (800205c <clcdDisplayClockSetting+0x280>)
 8002042:	6859      	ldr	r1, [r3, #4]
 8002044:	4b05      	ldr	r3, [pc, #20]	@ (800205c <clcdDisplayClockSetting+0x280>)
 8002046:	689b      	ldr	r3, [r3, #8]
 8002048:	9300      	str	r3, [sp, #0]
 800204a:	460b      	mov	r3, r1
 800204c:	4904      	ldr	r1, [pc, #16]	@ (8002060 <clcdDisplayClockSetting+0x284>)
 800204e:	4805      	ldr	r0, [pc, #20]	@ (8002064 <clcdDisplayClockSetting+0x288>)
 8002050:	f005 f836 	bl	80070c0 <siprintf>
 8002054:	e01c      	b.n	8002090 <clcdDisplayClockSetting+0x2b4>
 8002056:	bf00      	nop
 8002058:	200001ad 	.word	0x200001ad
 800205c:	20000044 	.word	0x20000044
 8002060:	08007b24 	.word	0x08007b24
 8002064:	20000063 	.word	0x20000063
 8002068:	08007b38 	.word	0x08007b38
 800206c:	08007b50 	.word	0x08007b50
 8002070:	08007b68 	.word	0x08007b68
 8002074:	08007b80 	.word	0x08007b80
 8002078:	08007b98 	.word	0x08007b98
 800207c:	08007bac 	.word	0x08007bac
		} else {
			sprintf(clock.buffer, "CLOCK     .%2d.%2d", clock.month, clock.date);
 8002080:	4b10      	ldr	r3, [pc, #64]	@ (80020c4 <clcdDisplayClockSetting+0x2e8>)
 8002082:	685a      	ldr	r2, [r3, #4]
 8002084:	4b0f      	ldr	r3, [pc, #60]	@ (80020c4 <clcdDisplayClockSetting+0x2e8>)
 8002086:	689b      	ldr	r3, [r3, #8]
 8002088:	490f      	ldr	r1, [pc, #60]	@ (80020c8 <clcdDisplayClockSetting+0x2ec>)
 800208a:	4810      	ldr	r0, [pc, #64]	@ (80020cc <clcdDisplayClockSetting+0x2f0>)
 800208c:	f005 f818 	bl	80070c0 <siprintf>
		}
		CLCD_Puts(0, 0, clock.buffer);
 8002090:	4a0e      	ldr	r2, [pc, #56]	@ (80020cc <clcdDisplayClockSetting+0x2f0>)
 8002092:	2100      	movs	r1, #0
 8002094:	2000      	movs	r0, #0
 8002096:	f7ff f92f 	bl	80012f8 <CLCD_Puts>
		sprintf(clock.buffer, "SET     %02d:%02d:%02d", clock.hour, clock.minute, clock.second);
 800209a:	4b0a      	ldr	r3, [pc, #40]	@ (80020c4 <clcdDisplayClockSetting+0x2e8>)
 800209c:	68da      	ldr	r2, [r3, #12]
 800209e:	4b09      	ldr	r3, [pc, #36]	@ (80020c4 <clcdDisplayClockSetting+0x2e8>)
 80020a0:	6919      	ldr	r1, [r3, #16]
 80020a2:	4b08      	ldr	r3, [pc, #32]	@ (80020c4 <clcdDisplayClockSetting+0x2e8>)
 80020a4:	695b      	ldr	r3, [r3, #20]
 80020a6:	9300      	str	r3, [sp, #0]
 80020a8:	460b      	mov	r3, r1
 80020aa:	4909      	ldr	r1, [pc, #36]	@ (80020d0 <clcdDisplayClockSetting+0x2f4>)
 80020ac:	4807      	ldr	r0, [pc, #28]	@ (80020cc <clcdDisplayClockSetting+0x2f0>)
 80020ae:	f005 f807 	bl	80070c0 <siprintf>
		CLCD_Puts(0, 1, clock.buffer);
 80020b2:	4a06      	ldr	r2, [pc, #24]	@ (80020cc <clcdDisplayClockSetting+0x2f0>)
 80020b4:	2101      	movs	r1, #1
 80020b6:	2000      	movs	r0, #0
 80020b8:	f7ff f91e 	bl	80012f8 <CLCD_Puts>
		break;
 80020bc:	bf00      	nop
	}
}
 80020be:	bf00      	nop
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd80      	pop	{r7, pc}
 80020c4:	20000044 	.word	0x20000044
 80020c8:	08007bc0 	.word	0x08007bc0
 80020cc:	20000063 	.word	0x20000063
 80020d0:	08007b38 	.word	0x08007b38

080020d4 <settingTime>:

void settingTime() {	// 버튼 2번 동작 설정할 단위 변경
 80020d4:	b480      	push	{r7}
 80020d6:	af00      	add	r7, sp, #0
	if(clockSet == YEAR) {
 80020d8:	4b09      	ldr	r3, [pc, #36]	@ (8002100 <settingTime+0x2c>)
 80020da:	781b      	ldrb	r3, [r3, #0]
 80020dc:	2b05      	cmp	r3, #5
 80020de:	d103      	bne.n	80020e8 <settingTime+0x14>
		clockSet = SECOND;
 80020e0:	4b07      	ldr	r3, [pc, #28]	@ (8002100 <settingTime+0x2c>)
 80020e2:	2200      	movs	r2, #0
 80020e4:	701a      	strb	r2, [r3, #0]
	} else {
		clockSet++;
	}
}
 80020e6:	e005      	b.n	80020f4 <settingTime+0x20>
		clockSet++;
 80020e8:	4b05      	ldr	r3, [pc, #20]	@ (8002100 <settingTime+0x2c>)
 80020ea:	781b      	ldrb	r3, [r3, #0]
 80020ec:	3301      	adds	r3, #1
 80020ee:	b2da      	uxtb	r2, r3
 80020f0:	4b03      	ldr	r3, [pc, #12]	@ (8002100 <settingTime+0x2c>)
 80020f2:	701a      	strb	r2, [r3, #0]
}
 80020f4:	bf00      	nop
 80020f6:	46bd      	mov	sp, r7
 80020f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fc:	4770      	bx	lr
 80020fe:	bf00      	nop
 8002100:	200001ad 	.word	0x200001ad

08002104 <incrementTime>:

void incrementTime() {	// 버튼 3번동작 (시간 증가)
 8002104:	b580      	push	{r7, lr}
 8002106:	af00      	add	r7, sp, #0
	switch(clockSet) {
 8002108:	4b64      	ldr	r3, [pc, #400]	@ (800229c <incrementTime+0x198>)
 800210a:	781b      	ldrb	r3, [r3, #0]
 800210c:	2b05      	cmp	r3, #5
 800210e:	f200 80c3 	bhi.w	8002298 <incrementTime+0x194>
 8002112:	a201      	add	r2, pc, #4	@ (adr r2, 8002118 <incrementTime+0x14>)
 8002114:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002118:	08002131 	.word	0x08002131
 800211c:	0800213f 	.word	0x0800213f
 8002120:	0800215b 	.word	0x0800215b
 8002124:	08002177 	.word	0x08002177
 8002128:	080021e1 	.word	0x080021e1
 800212c:	08002253 	.word	0x08002253
	case SECOND:
		clock.second = 0;
 8002130:	4b5b      	ldr	r3, [pc, #364]	@ (80022a0 <incrementTime+0x19c>)
 8002132:	2200      	movs	r2, #0
 8002134:	615a      	str	r2, [r3, #20]
		clock.millisecond = 0;
 8002136:	4b5a      	ldr	r3, [pc, #360]	@ (80022a0 <incrementTime+0x19c>)
 8002138:	2200      	movs	r2, #0
 800213a:	619a      	str	r2, [r3, #24]
		break;
 800213c:	e0ac      	b.n	8002298 <incrementTime+0x194>
	case MINUTE:
		if(clock.minute == 59) {
 800213e:	4b58      	ldr	r3, [pc, #352]	@ (80022a0 <incrementTime+0x19c>)
 8002140:	691b      	ldr	r3, [r3, #16]
 8002142:	2b3b      	cmp	r3, #59	@ 0x3b
 8002144:	d103      	bne.n	800214e <incrementTime+0x4a>
			clock.minute = 0;
 8002146:	4b56      	ldr	r3, [pc, #344]	@ (80022a0 <incrementTime+0x19c>)
 8002148:	2200      	movs	r2, #0
 800214a:	611a      	str	r2, [r3, #16]
		} else {
			clock.minute++;
		}
		break;
 800214c:	e0a4      	b.n	8002298 <incrementTime+0x194>
			clock.minute++;
 800214e:	4b54      	ldr	r3, [pc, #336]	@ (80022a0 <incrementTime+0x19c>)
 8002150:	691b      	ldr	r3, [r3, #16]
 8002152:	3301      	adds	r3, #1
 8002154:	4a52      	ldr	r2, [pc, #328]	@ (80022a0 <incrementTime+0x19c>)
 8002156:	6113      	str	r3, [r2, #16]
		break;
 8002158:	e09e      	b.n	8002298 <incrementTime+0x194>
	case HOUR:
		if(clock.hour == 23) {
 800215a:	4b51      	ldr	r3, [pc, #324]	@ (80022a0 <incrementTime+0x19c>)
 800215c:	68db      	ldr	r3, [r3, #12]
 800215e:	2b17      	cmp	r3, #23
 8002160:	d103      	bne.n	800216a <incrementTime+0x66>
			clock.hour = 0;
 8002162:	4b4f      	ldr	r3, [pc, #316]	@ (80022a0 <incrementTime+0x19c>)
 8002164:	2200      	movs	r2, #0
 8002166:	60da      	str	r2, [r3, #12]
		} else {
			clock.hour++;
		}
		break;
 8002168:	e096      	b.n	8002298 <incrementTime+0x194>
			clock.hour++;
 800216a:	4b4d      	ldr	r3, [pc, #308]	@ (80022a0 <incrementTime+0x19c>)
 800216c:	68db      	ldr	r3, [r3, #12]
 800216e:	3301      	adds	r3, #1
 8002170:	4a4b      	ldr	r2, [pc, #300]	@ (80022a0 <incrementTime+0x19c>)
 8002172:	60d3      	str	r3, [r2, #12]
		break;
 8002174:	e090      	b.n	8002298 <incrementTime+0x194>
	case DATE:
		clock.date++;
 8002176:	4b4a      	ldr	r3, [pc, #296]	@ (80022a0 <incrementTime+0x19c>)
 8002178:	689b      	ldr	r3, [r3, #8]
 800217a:	3301      	adds	r3, #1
 800217c:	4a48      	ldr	r2, [pc, #288]	@ (80022a0 <incrementTime+0x19c>)
 800217e:	6093      	str	r3, [r2, #8]
		if(clock.month == 2) {
 8002180:	4b47      	ldr	r3, [pc, #284]	@ (80022a0 <incrementTime+0x19c>)
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	2b02      	cmp	r3, #2
 8002186:	d113      	bne.n	80021b0 <incrementTime+0xac>
			if(clock.leapYear == TRUE) {
 8002188:	4b45      	ldr	r3, [pc, #276]	@ (80022a0 <incrementTime+0x19c>)
 800218a:	7f1b      	ldrb	r3, [r3, #28]
 800218c:	2b01      	cmp	r3, #1
 800218e:	d107      	bne.n	80021a0 <incrementTime+0x9c>
				if(clock.date > 29) {
 8002190:	4b43      	ldr	r3, [pc, #268]	@ (80022a0 <incrementTime+0x19c>)
 8002192:	689b      	ldr	r3, [r3, #8]
 8002194:	2b1d      	cmp	r3, #29
 8002196:	dd7a      	ble.n	800228e <incrementTime+0x18a>
					clock.date = 1;
 8002198:	4b41      	ldr	r3, [pc, #260]	@ (80022a0 <incrementTime+0x19c>)
 800219a:	2201      	movs	r2, #1
 800219c:	609a      	str	r2, [r3, #8]
		} else if(clock.thiryMonth == FALSE) { // 말일이 31일인 달 1, 3, 5, 7, 8, 10, 12
			if(clock.date > 31) {
				clock.date = 1;
			}
		}
		break;
 800219e:	e076      	b.n	800228e <incrementTime+0x18a>
				if(clock.date > 28) {
 80021a0:	4b3f      	ldr	r3, [pc, #252]	@ (80022a0 <incrementTime+0x19c>)
 80021a2:	689b      	ldr	r3, [r3, #8]
 80021a4:	2b1c      	cmp	r3, #28
 80021a6:	dd72      	ble.n	800228e <incrementTime+0x18a>
					clock.date = 1;
 80021a8:	4b3d      	ldr	r3, [pc, #244]	@ (80022a0 <incrementTime+0x19c>)
 80021aa:	2201      	movs	r2, #1
 80021ac:	609a      	str	r2, [r3, #8]
		break;
 80021ae:	e06e      	b.n	800228e <incrementTime+0x18a>
		} else if(clock.thiryMonth == TRUE) { // 말일이 30일인 달 4, 6, 9, 11
 80021b0:	4b3b      	ldr	r3, [pc, #236]	@ (80022a0 <incrementTime+0x19c>)
 80021b2:	7f5b      	ldrb	r3, [r3, #29]
 80021b4:	2b01      	cmp	r3, #1
 80021b6:	d107      	bne.n	80021c8 <incrementTime+0xc4>
			if(clock.date > 30) {
 80021b8:	4b39      	ldr	r3, [pc, #228]	@ (80022a0 <incrementTime+0x19c>)
 80021ba:	689b      	ldr	r3, [r3, #8]
 80021bc:	2b1e      	cmp	r3, #30
 80021be:	dd66      	ble.n	800228e <incrementTime+0x18a>
				clock.date = 1;
 80021c0:	4b37      	ldr	r3, [pc, #220]	@ (80022a0 <incrementTime+0x19c>)
 80021c2:	2201      	movs	r2, #1
 80021c4:	609a      	str	r2, [r3, #8]
		break;
 80021c6:	e062      	b.n	800228e <incrementTime+0x18a>
		} else if(clock.thiryMonth == FALSE) { // 말일이 31일인 달 1, 3, 5, 7, 8, 10, 12
 80021c8:	4b35      	ldr	r3, [pc, #212]	@ (80022a0 <incrementTime+0x19c>)
 80021ca:	7f5b      	ldrb	r3, [r3, #29]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d15e      	bne.n	800228e <incrementTime+0x18a>
			if(clock.date > 31) {
 80021d0:	4b33      	ldr	r3, [pc, #204]	@ (80022a0 <incrementTime+0x19c>)
 80021d2:	689b      	ldr	r3, [r3, #8]
 80021d4:	2b1f      	cmp	r3, #31
 80021d6:	dd5a      	ble.n	800228e <incrementTime+0x18a>
				clock.date = 1;
 80021d8:	4b31      	ldr	r3, [pc, #196]	@ (80022a0 <incrementTime+0x19c>)
 80021da:	2201      	movs	r2, #1
 80021dc:	609a      	str	r2, [r3, #8]
		break;
 80021de:	e056      	b.n	800228e <incrementTime+0x18a>
	case MONTH:
		clock.month++;
 80021e0:	4b2f      	ldr	r3, [pc, #188]	@ (80022a0 <incrementTime+0x19c>)
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	3301      	adds	r3, #1
 80021e6:	4a2e      	ldr	r2, [pc, #184]	@ (80022a0 <incrementTime+0x19c>)
 80021e8:	6053      	str	r3, [r2, #4]
		clock.thiryMonth = isThirtyDays(clock.month);
 80021ea:	4b2d      	ldr	r3, [pc, #180]	@ (80022a0 <incrementTime+0x19c>)
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	4618      	mov	r0, r3
 80021f0:	f7ff fd92 	bl	8001d18 <isThirtyDays>
 80021f4:	4603      	mov	r3, r0
 80021f6:	b2da      	uxtb	r2, r3
 80021f8:	4b29      	ldr	r3, [pc, #164]	@ (80022a0 <incrementTime+0x19c>)
 80021fa:	775a      	strb	r2, [r3, #29]
		if(clock.month == 2) {
 80021fc:	4b28      	ldr	r3, [pc, #160]	@ (80022a0 <incrementTime+0x19c>)
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	2b02      	cmp	r3, #2
 8002202:	d113      	bne.n	800222c <incrementTime+0x128>
			if(clock.leapYear == TRUE) {
 8002204:	4b26      	ldr	r3, [pc, #152]	@ (80022a0 <incrementTime+0x19c>)
 8002206:	7f1b      	ldrb	r3, [r3, #28]
 8002208:	2b01      	cmp	r3, #1
 800220a:	d107      	bne.n	800221c <incrementTime+0x118>
				if(clock.date > 29) {
 800220c:	4b24      	ldr	r3, [pc, #144]	@ (80022a0 <incrementTime+0x19c>)
 800220e:	689b      	ldr	r3, [r3, #8]
 8002210:	2b1d      	cmp	r3, #29
 8002212:	dd16      	ble.n	8002242 <incrementTime+0x13e>
					clock.date = 29;
 8002214:	4b22      	ldr	r3, [pc, #136]	@ (80022a0 <incrementTime+0x19c>)
 8002216:	221d      	movs	r2, #29
 8002218:	609a      	str	r2, [r3, #8]
 800221a:	e012      	b.n	8002242 <incrementTime+0x13e>
				}
			} else {
				if(clock.date > 28) {
 800221c:	4b20      	ldr	r3, [pc, #128]	@ (80022a0 <incrementTime+0x19c>)
 800221e:	689b      	ldr	r3, [r3, #8]
 8002220:	2b1c      	cmp	r3, #28
 8002222:	dd0e      	ble.n	8002242 <incrementTime+0x13e>
					clock.date = 28;
 8002224:	4b1e      	ldr	r3, [pc, #120]	@ (80022a0 <incrementTime+0x19c>)
 8002226:	221c      	movs	r2, #28
 8002228:	609a      	str	r2, [r3, #8]
 800222a:	e00a      	b.n	8002242 <incrementTime+0x13e>
				}
			}
		} else if(clock.thiryMonth == TRUE) {
 800222c:	4b1c      	ldr	r3, [pc, #112]	@ (80022a0 <incrementTime+0x19c>)
 800222e:	7f5b      	ldrb	r3, [r3, #29]
 8002230:	2b01      	cmp	r3, #1
 8002232:	d106      	bne.n	8002242 <incrementTime+0x13e>
			if(clock.date > 30) {
 8002234:	4b1a      	ldr	r3, [pc, #104]	@ (80022a0 <incrementTime+0x19c>)
 8002236:	689b      	ldr	r3, [r3, #8]
 8002238:	2b1e      	cmp	r3, #30
 800223a:	dd02      	ble.n	8002242 <incrementTime+0x13e>
				clock.date = 30;
 800223c:	4b18      	ldr	r3, [pc, #96]	@ (80022a0 <incrementTime+0x19c>)
 800223e:	221e      	movs	r2, #30
 8002240:	609a      	str	r2, [r3, #8]
			}
		}
		if(clock.month > 12) {
 8002242:	4b17      	ldr	r3, [pc, #92]	@ (80022a0 <incrementTime+0x19c>)
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	2b0c      	cmp	r3, #12
 8002248:	dd23      	ble.n	8002292 <incrementTime+0x18e>
			clock.month = 1;
 800224a:	4b15      	ldr	r3, [pc, #84]	@ (80022a0 <incrementTime+0x19c>)
 800224c:	2201      	movs	r2, #1
 800224e:	605a      	str	r2, [r3, #4]
		}
		break;
 8002250:	e01f      	b.n	8002292 <incrementTime+0x18e>
	case YEAR:
		clock.year++;
 8002252:	4b13      	ldr	r3, [pc, #76]	@ (80022a0 <incrementTime+0x19c>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	3301      	adds	r3, #1
 8002258:	4a11      	ldr	r2, [pc, #68]	@ (80022a0 <incrementTime+0x19c>)
 800225a:	6013      	str	r3, [r2, #0]
		clock.leapYear = leapYearCalculator(clock.year);
 800225c:	4b10      	ldr	r3, [pc, #64]	@ (80022a0 <incrementTime+0x19c>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4618      	mov	r0, r3
 8002262:	f7ff fd25 	bl	8001cb0 <leapYearCalculator>
 8002266:	4603      	mov	r3, r0
 8002268:	b2da      	uxtb	r2, r3
 800226a:	4b0d      	ldr	r3, [pc, #52]	@ (80022a0 <incrementTime+0x19c>)
 800226c:	771a      	strb	r2, [r3, #28]
		if(clock.leapYear == FALSE) {
 800226e:	4b0c      	ldr	r3, [pc, #48]	@ (80022a0 <incrementTime+0x19c>)
 8002270:	7f1b      	ldrb	r3, [r3, #28]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d10f      	bne.n	8002296 <incrementTime+0x192>
			if(clock.month == 2 && clock.date > 28) {
 8002276:	4b0a      	ldr	r3, [pc, #40]	@ (80022a0 <incrementTime+0x19c>)
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	2b02      	cmp	r3, #2
 800227c:	d10b      	bne.n	8002296 <incrementTime+0x192>
 800227e:	4b08      	ldr	r3, [pc, #32]	@ (80022a0 <incrementTime+0x19c>)
 8002280:	689b      	ldr	r3, [r3, #8]
 8002282:	2b1c      	cmp	r3, #28
 8002284:	dd07      	ble.n	8002296 <incrementTime+0x192>
				clock.date = 28;
 8002286:	4b06      	ldr	r3, [pc, #24]	@ (80022a0 <incrementTime+0x19c>)
 8002288:	221c      	movs	r2, #28
 800228a:	609a      	str	r2, [r3, #8]
			}
		}
		break;
 800228c:	e003      	b.n	8002296 <incrementTime+0x192>
		break;
 800228e:	bf00      	nop
 8002290:	e002      	b.n	8002298 <incrementTime+0x194>
		break;
 8002292:	bf00      	nop
 8002294:	e000      	b.n	8002298 <incrementTime+0x194>
		break;
 8002296:	bf00      	nop
	}
}
 8002298:	bf00      	nop
 800229a:	bd80      	pop	{r7, pc}
 800229c:	200001ad 	.word	0x200001ad
 80022a0:	20000044 	.word	0x20000044

080022a4 <decrementTime>:

void decrementTime() {	// 버튼 4번동작 (시간 감소)
 80022a4:	b580      	push	{r7, lr}
 80022a6:	af00      	add	r7, sp, #0
	switch(clockSet) {
 80022a8:	4b68      	ldr	r3, [pc, #416]	@ (800244c <decrementTime+0x1a8>)
 80022aa:	781b      	ldrb	r3, [r3, #0]
 80022ac:	2b05      	cmp	r3, #5
 80022ae:	f200 80ca 	bhi.w	8002446 <decrementTime+0x1a2>
 80022b2:	a201      	add	r2, pc, #4	@ (adr r2, 80022b8 <decrementTime+0x14>)
 80022b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022b8:	080022d1 	.word	0x080022d1
 80022bc:	080022df 	.word	0x080022df
 80022c0:	080022fb 	.word	0x080022fb
 80022c4:	08002317 	.word	0x08002317
 80022c8:	08002383 	.word	0x08002383
 80022cc:	080023f5 	.word	0x080023f5
	case SECOND:
		clock.second = 0;
 80022d0:	4b5f      	ldr	r3, [pc, #380]	@ (8002450 <decrementTime+0x1ac>)
 80022d2:	2200      	movs	r2, #0
 80022d4:	615a      	str	r2, [r3, #20]
		clock.millisecond = 0;
 80022d6:	4b5e      	ldr	r3, [pc, #376]	@ (8002450 <decrementTime+0x1ac>)
 80022d8:	2200      	movs	r2, #0
 80022da:	619a      	str	r2, [r3, #24]
		break;
 80022dc:	e0b3      	b.n	8002446 <decrementTime+0x1a2>
	case MINUTE:
		if(clock.minute == 0) {
 80022de:	4b5c      	ldr	r3, [pc, #368]	@ (8002450 <decrementTime+0x1ac>)
 80022e0:	691b      	ldr	r3, [r3, #16]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d103      	bne.n	80022ee <decrementTime+0x4a>
			clock.minute = 59;
 80022e6:	4b5a      	ldr	r3, [pc, #360]	@ (8002450 <decrementTime+0x1ac>)
 80022e8:	223b      	movs	r2, #59	@ 0x3b
 80022ea:	611a      	str	r2, [r3, #16]
		} else {
			clock.minute--;
		}
		break;
 80022ec:	e0ab      	b.n	8002446 <decrementTime+0x1a2>
			clock.minute--;
 80022ee:	4b58      	ldr	r3, [pc, #352]	@ (8002450 <decrementTime+0x1ac>)
 80022f0:	691b      	ldr	r3, [r3, #16]
 80022f2:	3b01      	subs	r3, #1
 80022f4:	4a56      	ldr	r2, [pc, #344]	@ (8002450 <decrementTime+0x1ac>)
 80022f6:	6113      	str	r3, [r2, #16]
		break;
 80022f8:	e0a5      	b.n	8002446 <decrementTime+0x1a2>
	case HOUR:
		if(clock.hour == 0) {
 80022fa:	4b55      	ldr	r3, [pc, #340]	@ (8002450 <decrementTime+0x1ac>)
 80022fc:	68db      	ldr	r3, [r3, #12]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d103      	bne.n	800230a <decrementTime+0x66>
			clock.hour = 23;
 8002302:	4b53      	ldr	r3, [pc, #332]	@ (8002450 <decrementTime+0x1ac>)
 8002304:	2217      	movs	r2, #23
 8002306:	60da      	str	r2, [r3, #12]
		} else {
			clock.hour--;
		}
		break;
 8002308:	e09d      	b.n	8002446 <decrementTime+0x1a2>
			clock.hour--;
 800230a:	4b51      	ldr	r3, [pc, #324]	@ (8002450 <decrementTime+0x1ac>)
 800230c:	68db      	ldr	r3, [r3, #12]
 800230e:	3b01      	subs	r3, #1
 8002310:	4a4f      	ldr	r2, [pc, #316]	@ (8002450 <decrementTime+0x1ac>)
 8002312:	60d3      	str	r3, [r2, #12]
		break;
 8002314:	e097      	b.n	8002446 <decrementTime+0x1a2>
	case DATE:
		clock.date--;
 8002316:	4b4e      	ldr	r3, [pc, #312]	@ (8002450 <decrementTime+0x1ac>)
 8002318:	689b      	ldr	r3, [r3, #8]
 800231a:	3b01      	subs	r3, #1
 800231c:	4a4c      	ldr	r2, [pc, #304]	@ (8002450 <decrementTime+0x1ac>)
 800231e:	6093      	str	r3, [r2, #8]
		if(clock.month == 2) {
 8002320:	4b4b      	ldr	r3, [pc, #300]	@ (8002450 <decrementTime+0x1ac>)
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	2b02      	cmp	r3, #2
 8002326:	d114      	bne.n	8002352 <decrementTime+0xae>
			if(clock.leapYear == TRUE) {
 8002328:	4b49      	ldr	r3, [pc, #292]	@ (8002450 <decrementTime+0x1ac>)
 800232a:	7f1b      	ldrb	r3, [r3, #28]
 800232c:	2b01      	cmp	r3, #1
 800232e:	d108      	bne.n	8002342 <decrementTime+0x9e>
				if(clock.date < 1) {
 8002330:	4b47      	ldr	r3, [pc, #284]	@ (8002450 <decrementTime+0x1ac>)
 8002332:	689b      	ldr	r3, [r3, #8]
 8002334:	2b00      	cmp	r3, #0
 8002336:	f300 8081 	bgt.w	800243c <decrementTime+0x198>
					clock.date = 29;
 800233a:	4b45      	ldr	r3, [pc, #276]	@ (8002450 <decrementTime+0x1ac>)
 800233c:	221d      	movs	r2, #29
 800233e:	609a      	str	r2, [r3, #8]
		} else if(clock.thiryMonth == FALSE) { // 말일이 31일인 달 1, 3, 5, 7, 8, 10, 12
			if(clock.date < 1) {
				clock.date = 31;
			}
		}
		break;
 8002340:	e07c      	b.n	800243c <decrementTime+0x198>
				if(clock.date < 1) {
 8002342:	4b43      	ldr	r3, [pc, #268]	@ (8002450 <decrementTime+0x1ac>)
 8002344:	689b      	ldr	r3, [r3, #8]
 8002346:	2b00      	cmp	r3, #0
 8002348:	dc78      	bgt.n	800243c <decrementTime+0x198>
					clock.date = 28;
 800234a:	4b41      	ldr	r3, [pc, #260]	@ (8002450 <decrementTime+0x1ac>)
 800234c:	221c      	movs	r2, #28
 800234e:	609a      	str	r2, [r3, #8]
		break;
 8002350:	e074      	b.n	800243c <decrementTime+0x198>
		} else if(clock.thiryMonth == TRUE) { // 말일이 30일인 달 4, 6, 9, 11
 8002352:	4b3f      	ldr	r3, [pc, #252]	@ (8002450 <decrementTime+0x1ac>)
 8002354:	7f5b      	ldrb	r3, [r3, #29]
 8002356:	2b01      	cmp	r3, #1
 8002358:	d107      	bne.n	800236a <decrementTime+0xc6>
			if(clock.date < 1) {
 800235a:	4b3d      	ldr	r3, [pc, #244]	@ (8002450 <decrementTime+0x1ac>)
 800235c:	689b      	ldr	r3, [r3, #8]
 800235e:	2b00      	cmp	r3, #0
 8002360:	dc6c      	bgt.n	800243c <decrementTime+0x198>
				clock.date = 30;
 8002362:	4b3b      	ldr	r3, [pc, #236]	@ (8002450 <decrementTime+0x1ac>)
 8002364:	221e      	movs	r2, #30
 8002366:	609a      	str	r2, [r3, #8]
		break;
 8002368:	e068      	b.n	800243c <decrementTime+0x198>
		} else if(clock.thiryMonth == FALSE) { // 말일이 31일인 달 1, 3, 5, 7, 8, 10, 12
 800236a:	4b39      	ldr	r3, [pc, #228]	@ (8002450 <decrementTime+0x1ac>)
 800236c:	7f5b      	ldrb	r3, [r3, #29]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d164      	bne.n	800243c <decrementTime+0x198>
			if(clock.date < 1) {
 8002372:	4b37      	ldr	r3, [pc, #220]	@ (8002450 <decrementTime+0x1ac>)
 8002374:	689b      	ldr	r3, [r3, #8]
 8002376:	2b00      	cmp	r3, #0
 8002378:	dc60      	bgt.n	800243c <decrementTime+0x198>
				clock.date = 31;
 800237a:	4b35      	ldr	r3, [pc, #212]	@ (8002450 <decrementTime+0x1ac>)
 800237c:	221f      	movs	r2, #31
 800237e:	609a      	str	r2, [r3, #8]
		break;
 8002380:	e05c      	b.n	800243c <decrementTime+0x198>
	case MONTH:
		clock.month--;
 8002382:	4b33      	ldr	r3, [pc, #204]	@ (8002450 <decrementTime+0x1ac>)
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	3b01      	subs	r3, #1
 8002388:	4a31      	ldr	r2, [pc, #196]	@ (8002450 <decrementTime+0x1ac>)
 800238a:	6053      	str	r3, [r2, #4]
		clock.thiryMonth = isThirtyDays(clock.month);
 800238c:	4b30      	ldr	r3, [pc, #192]	@ (8002450 <decrementTime+0x1ac>)
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	4618      	mov	r0, r3
 8002392:	f7ff fcc1 	bl	8001d18 <isThirtyDays>
 8002396:	4603      	mov	r3, r0
 8002398:	b2da      	uxtb	r2, r3
 800239a:	4b2d      	ldr	r3, [pc, #180]	@ (8002450 <decrementTime+0x1ac>)
 800239c:	775a      	strb	r2, [r3, #29]
		if(clock.month == 2) {
 800239e:	4b2c      	ldr	r3, [pc, #176]	@ (8002450 <decrementTime+0x1ac>)
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	2b02      	cmp	r3, #2
 80023a4:	d113      	bne.n	80023ce <decrementTime+0x12a>
			if(clock.leapYear == TRUE) {
 80023a6:	4b2a      	ldr	r3, [pc, #168]	@ (8002450 <decrementTime+0x1ac>)
 80023a8:	7f1b      	ldrb	r3, [r3, #28]
 80023aa:	2b01      	cmp	r3, #1
 80023ac:	d107      	bne.n	80023be <decrementTime+0x11a>
				if(clock.date > 29) {
 80023ae:	4b28      	ldr	r3, [pc, #160]	@ (8002450 <decrementTime+0x1ac>)
 80023b0:	689b      	ldr	r3, [r3, #8]
 80023b2:	2b1d      	cmp	r3, #29
 80023b4:	dd16      	ble.n	80023e4 <decrementTime+0x140>
					clock.date = 29;
 80023b6:	4b26      	ldr	r3, [pc, #152]	@ (8002450 <decrementTime+0x1ac>)
 80023b8:	221d      	movs	r2, #29
 80023ba:	609a      	str	r2, [r3, #8]
 80023bc:	e012      	b.n	80023e4 <decrementTime+0x140>
				}
			} else {
				if(clock.date > 28) {
 80023be:	4b24      	ldr	r3, [pc, #144]	@ (8002450 <decrementTime+0x1ac>)
 80023c0:	689b      	ldr	r3, [r3, #8]
 80023c2:	2b1c      	cmp	r3, #28
 80023c4:	dd0e      	ble.n	80023e4 <decrementTime+0x140>
					clock.date = 28;
 80023c6:	4b22      	ldr	r3, [pc, #136]	@ (8002450 <decrementTime+0x1ac>)
 80023c8:	221c      	movs	r2, #28
 80023ca:	609a      	str	r2, [r3, #8]
 80023cc:	e00a      	b.n	80023e4 <decrementTime+0x140>
				}
			}
		} else if(clock.thiryMonth == TRUE) {
 80023ce:	4b20      	ldr	r3, [pc, #128]	@ (8002450 <decrementTime+0x1ac>)
 80023d0:	7f5b      	ldrb	r3, [r3, #29]
 80023d2:	2b01      	cmp	r3, #1
 80023d4:	d106      	bne.n	80023e4 <decrementTime+0x140>
			if(clock.date > 30) {
 80023d6:	4b1e      	ldr	r3, [pc, #120]	@ (8002450 <decrementTime+0x1ac>)
 80023d8:	689b      	ldr	r3, [r3, #8]
 80023da:	2b1e      	cmp	r3, #30
 80023dc:	dd02      	ble.n	80023e4 <decrementTime+0x140>
				clock.date = 30;
 80023de:	4b1c      	ldr	r3, [pc, #112]	@ (8002450 <decrementTime+0x1ac>)
 80023e0:	221e      	movs	r2, #30
 80023e2:	609a      	str	r2, [r3, #8]
			}
		}
		if(clock.month < 1) {
 80023e4:	4b1a      	ldr	r3, [pc, #104]	@ (8002450 <decrementTime+0x1ac>)
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	dc29      	bgt.n	8002440 <decrementTime+0x19c>
			clock.month = 12;
 80023ec:	4b18      	ldr	r3, [pc, #96]	@ (8002450 <decrementTime+0x1ac>)
 80023ee:	220c      	movs	r2, #12
 80023f0:	605a      	str	r2, [r3, #4]
		}
		break;
 80023f2:	e025      	b.n	8002440 <decrementTime+0x19c>
	case YEAR:
		if(clock.year > 1900) {
 80023f4:	4b16      	ldr	r3, [pc, #88]	@ (8002450 <decrementTime+0x1ac>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f240 726c 	movw	r2, #1900	@ 0x76c
 80023fc:	4293      	cmp	r3, r2
 80023fe:	dd04      	ble.n	800240a <decrementTime+0x166>
			clock.year--;
 8002400:	4b13      	ldr	r3, [pc, #76]	@ (8002450 <decrementTime+0x1ac>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	3b01      	subs	r3, #1
 8002406:	4a12      	ldr	r2, [pc, #72]	@ (8002450 <decrementTime+0x1ac>)
 8002408:	6013      	str	r3, [r2, #0]
		}
		clock.leapYear = leapYearCalculator(clock.year);
 800240a:	4b11      	ldr	r3, [pc, #68]	@ (8002450 <decrementTime+0x1ac>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4618      	mov	r0, r3
 8002410:	f7ff fc4e 	bl	8001cb0 <leapYearCalculator>
 8002414:	4603      	mov	r3, r0
 8002416:	b2da      	uxtb	r2, r3
 8002418:	4b0d      	ldr	r3, [pc, #52]	@ (8002450 <decrementTime+0x1ac>)
 800241a:	771a      	strb	r2, [r3, #28]
		if(clock.leapYear == FALSE) {
 800241c:	4b0c      	ldr	r3, [pc, #48]	@ (8002450 <decrementTime+0x1ac>)
 800241e:	7f1b      	ldrb	r3, [r3, #28]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d10f      	bne.n	8002444 <decrementTime+0x1a0>
			if(clock.month == 2 && clock.date > 28) {
 8002424:	4b0a      	ldr	r3, [pc, #40]	@ (8002450 <decrementTime+0x1ac>)
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	2b02      	cmp	r3, #2
 800242a:	d10b      	bne.n	8002444 <decrementTime+0x1a0>
 800242c:	4b08      	ldr	r3, [pc, #32]	@ (8002450 <decrementTime+0x1ac>)
 800242e:	689b      	ldr	r3, [r3, #8]
 8002430:	2b1c      	cmp	r3, #28
 8002432:	dd07      	ble.n	8002444 <decrementTime+0x1a0>
				clock.date = 28;
 8002434:	4b06      	ldr	r3, [pc, #24]	@ (8002450 <decrementTime+0x1ac>)
 8002436:	221c      	movs	r2, #28
 8002438:	609a      	str	r2, [r3, #8]
			}
		}
		break;
 800243a:	e003      	b.n	8002444 <decrementTime+0x1a0>
		break;
 800243c:	bf00      	nop
 800243e:	e002      	b.n	8002446 <decrementTime+0x1a2>
		break;
 8002440:	bf00      	nop
 8002442:	e000      	b.n	8002446 <decrementTime+0x1a2>
		break;
 8002444:	bf00      	nop
	}

}
 8002446:	bf00      	nop
 8002448:	bd80      	pop	{r7, pc}
 800244a:	bf00      	nop
 800244c:	200001ad 	.word	0x200001ad
 8002450:	20000044 	.word	0x20000044

08002454 <getTimeFormet>:

uint8_t getTimeFormet() {
 8002454:	b480      	push	{r7}
 8002456:	af00      	add	r7, sp, #0
	return clock.timeFormet;
 8002458:	4b03      	ldr	r3, [pc, #12]	@ (8002468 <getTimeFormet+0x14>)
 800245a:	7f9b      	ldrb	r3, [r3, #30]
}
 800245c:	4618      	mov	r0, r3
 800245e:	46bd      	mov	sp, r7
 8002460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002464:	4770      	bx	lr
 8002466:	bf00      	nop
 8002468:	20000044 	.word	0x20000044

0800246c <setTimeFormet>:

void setTimeFormet(int onOff) {
 800246c:	b480      	push	{r7}
 800246e:	b083      	sub	sp, #12
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
	clock.timeFormet = onOff;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	b2da      	uxtb	r2, r3
 8002478:	4b03      	ldr	r3, [pc, #12]	@ (8002488 <setTimeFormet+0x1c>)
 800247a:	779a      	strb	r2, [r3, #30]
}
 800247c:	bf00      	nop
 800247e:	370c      	adds	r7, #12
 8002480:	46bd      	mov	sp, r7
 8002482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002486:	4770      	bx	lr
 8002488:	20000044 	.word	0x20000044

0800248c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002490:	f001 fd30 	bl	8003ef4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002494:	f000 f86a 	bl	800256c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  clock.leapYear = leapYearCalculator(Y);// 시스템 시작 시 초기 설정된 년이 윤년인지 확인
 8002498:	f44f 60fd 	mov.w	r0, #2024	@ 0x7e8
 800249c:	f7ff fc08 	bl	8001cb0 <leapYearCalculator>
 80024a0:	4603      	mov	r3, r0
 80024a2:	b2da      	uxtb	r2, r3
 80024a4:	4b2a      	ldr	r3, [pc, #168]	@ (8002550 <main+0xc4>)
 80024a6:	771a      	strb	r2, [r3, #28]
  clock.thiryMonth = isThirtyDays(M); 	// 시스템 시작 시 초기 설정된 달을 넣어서 말일이 30일인지 아닌지 확인
 80024a8:	2002      	movs	r0, #2
 80024aa:	f7ff fc35 	bl	8001d18 <isThirtyDays>
 80024ae:	4603      	mov	r3, r0
 80024b0:	b2da      	uxtb	r2, r3
 80024b2:	4b27      	ldr	r3, [pc, #156]	@ (8002550 <main+0xc4>)
 80024b4:	775a      	strb	r2, [r3, #29]
  CLCD_GPIO_Init();
 80024b6:	f7fe fd1b 	bl	8000ef0 <CLCD_GPIO_Init>
  CLCD_Init();
 80024ba:	f7fe ff42 	bl	8001342 <CLCD_Init>
  _7SEG_GPIO_Init();
 80024be:	f7fe f84f 	bl	8000560 <_7SEG_GPIO_Init>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80024c2:	f000 f9b7 	bl	8002834 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80024c6:	f000 f98b 	bl	80027e0 <MX_USART3_UART_Init>
  MX_TIM6_Init();
 80024ca:	f000 f953 	bl	8002774 <MX_TIM6_Init>
  MX_TIM2_Init();
 80024ce:	f000 f8db 	bl	8002688 <MX_TIM2_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 80024d2:	f000 f8b5 	bl	8002640 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  // UART call
  HAL_UART_Receive_IT(&huart3, &uartRxfd.uart3_rx_data, sizeof(uartRxfd.uart3_rx_data));
 80024d6:	2201      	movs	r2, #1
 80024d8:	491e      	ldr	r1, [pc, #120]	@ (8002554 <main+0xc8>)
 80024da:	481f      	ldr	r0, [pc, #124]	@ (8002558 <main+0xcc>)
 80024dc:	f003 fecc 	bl	8006278 <HAL_UART_Receive_IT>
  HAL_TIM_Base_Start_IT(&htim6);
 80024e0:	481e      	ldr	r0, [pc, #120]	@ (800255c <main+0xd0>)
 80024e2:	f002 fe29 	bl	8005138 <HAL_TIM_Base_Start_IT>

  TIM2 -> CCR1 = TIM2 -> ARR / 2;
 80024e6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80024ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024ec:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80024f0:	085b      	lsrs	r3, r3, #1
 80024f2:	6353      	str	r3, [r2, #52]	@ 0x34

  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, 1);
 80024f4:	2201      	movs	r2, #1
 80024f6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80024fa:	4819      	ldr	r0, [pc, #100]	@ (8002560 <main+0xd4>)
 80024fc:	f002 f8e8 	bl	80046d0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);
 8002500:	2201      	movs	r2, #1
 8002502:	2140      	movs	r1, #64	@ 0x40
 8002504:	4817      	ldr	r0, [pc, #92]	@ (8002564 <main+0xd8>)
 8002506:	f002 f8e3 	bl	80046d0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, 1);
 800250a:	2201      	movs	r2, #1
 800250c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002510:	4813      	ldr	r0, [pc, #76]	@ (8002560 <main+0xd4>)
 8002512:	f002 f8dd 	bl	80046d0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 1);
 8002516:	2201      	movs	r2, #1
 8002518:	2120      	movs	r1, #32
 800251a:	4813      	ldr	r0, [pc, #76]	@ (8002568 <main+0xdc>)
 800251c:	f002 f8d8 	bl	80046d0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, 1);
 8002520:	2201      	movs	r2, #1
 8002522:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002526:	480e      	ldr	r0, [pc, #56]	@ (8002560 <main+0xd4>)
 8002528:	f002 f8d2 	bl	80046d0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 1);
 800252c:	2201      	movs	r2, #1
 800252e:	2101      	movs	r1, #1
 8002530:	480d      	ldr	r0, [pc, #52]	@ (8002568 <main+0xdc>)
 8002532:	f002 f8cd 	bl	80046d0 <HAL_GPIO_WritePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  running();
 8002536:	f000 fe9b 	bl	8003270 <running>
	  sw1Controll();
 800253a:	f000 fec7 	bl	80032cc <sw1Controll>
	  sw2Controll();
 800253e:	f000 ff25 	bl	800338c <sw2Controll>
	  sw3Controll();
 8002542:	f001 f82f 	bl	80035a4 <sw3Controll>
	  sw4Controll();
 8002546:	f001 f957 	bl	80037f8 <sw4Controll>
	  running();
 800254a:	bf00      	nop
 800254c:	e7f3      	b.n	8002536 <main+0xaa>
 800254e:	bf00      	nop
 8002550:	20000044 	.word	0x20000044
 8002554:	2000031c 	.word	0x2000031c
 8002558:	20000240 	.word	0x20000240
 800255c:	200001f8 	.word	0x200001f8
 8002560:	40020c00 	.word	0x40020c00
 8002564:	40020800 	.word	0x40020800
 8002568:	40020400 	.word	0x40020400

0800256c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b094      	sub	sp, #80	@ 0x50
 8002570:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002572:	f107 0320 	add.w	r3, r7, #32
 8002576:	2230      	movs	r2, #48	@ 0x30
 8002578:	2100      	movs	r1, #0
 800257a:	4618      	mov	r0, r3
 800257c:	f004 fdc0 	bl	8007100 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002580:	f107 030c 	add.w	r3, r7, #12
 8002584:	2200      	movs	r2, #0
 8002586:	601a      	str	r2, [r3, #0]
 8002588:	605a      	str	r2, [r3, #4]
 800258a:	609a      	str	r2, [r3, #8]
 800258c:	60da      	str	r2, [r3, #12]
 800258e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002590:	2300      	movs	r3, #0
 8002592:	60bb      	str	r3, [r7, #8]
 8002594:	4b28      	ldr	r3, [pc, #160]	@ (8002638 <SystemClock_Config+0xcc>)
 8002596:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002598:	4a27      	ldr	r2, [pc, #156]	@ (8002638 <SystemClock_Config+0xcc>)
 800259a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800259e:	6413      	str	r3, [r2, #64]	@ 0x40
 80025a0:	4b25      	ldr	r3, [pc, #148]	@ (8002638 <SystemClock_Config+0xcc>)
 80025a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025a8:	60bb      	str	r3, [r7, #8]
 80025aa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80025ac:	2300      	movs	r3, #0
 80025ae:	607b      	str	r3, [r7, #4]
 80025b0:	4b22      	ldr	r3, [pc, #136]	@ (800263c <SystemClock_Config+0xd0>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a21      	ldr	r2, [pc, #132]	@ (800263c <SystemClock_Config+0xd0>)
 80025b6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80025ba:	6013      	str	r3, [r2, #0]
 80025bc:	4b1f      	ldr	r3, [pc, #124]	@ (800263c <SystemClock_Config+0xd0>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80025c4:	607b      	str	r3, [r7, #4]
 80025c6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80025c8:	2301      	movs	r3, #1
 80025ca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80025cc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80025d0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80025d2:	2302      	movs	r3, #2
 80025d4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80025d6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80025da:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80025dc:	2304      	movs	r3, #4
 80025de:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80025e0:	23a8      	movs	r3, #168	@ 0xa8
 80025e2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80025e4:	2302      	movs	r3, #2
 80025e6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80025e8:	2304      	movs	r3, #4
 80025ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80025ec:	f107 0320 	add.w	r3, r7, #32
 80025f0:	4618      	mov	r0, r3
 80025f2:	f002 f8b9 	bl	8004768 <HAL_RCC_OscConfig>
 80025f6:	4603      	mov	r3, r0
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d001      	beq.n	8002600 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80025fc:	f000 faaa 	bl	8002b54 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002600:	230f      	movs	r3, #15
 8002602:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002604:	2302      	movs	r3, #2
 8002606:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002608:	2300      	movs	r3, #0
 800260a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800260c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002610:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002612:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002616:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002618:	f107 030c 	add.w	r3, r7, #12
 800261c:	2105      	movs	r1, #5
 800261e:	4618      	mov	r0, r3
 8002620:	f002 fb1a 	bl	8004c58 <HAL_RCC_ClockConfig>
 8002624:	4603      	mov	r3, r0
 8002626:	2b00      	cmp	r3, #0
 8002628:	d001      	beq.n	800262e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800262a:	f000 fa93 	bl	8002b54 <Error_Handler>
  }
}
 800262e:	bf00      	nop
 8002630:	3750      	adds	r7, #80	@ 0x50
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}
 8002636:	bf00      	nop
 8002638:	40023800 	.word	0x40023800
 800263c:	40007000 	.word	0x40007000

08002640 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	af00      	add	r7, sp, #0
  /* USART3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002644:	2200      	movs	r2, #0
 8002646:	2100      	movs	r1, #0
 8002648:	2027      	movs	r0, #39	@ 0x27
 800264a:	f001 fdc4 	bl	80041d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART3_IRQn);
 800264e:	2027      	movs	r0, #39	@ 0x27
 8002650:	f001 fddd 	bl	800420e <HAL_NVIC_EnableIRQ>
  /* EXTI4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8002654:	2200      	movs	r2, #0
 8002656:	2100      	movs	r1, #0
 8002658:	200a      	movs	r0, #10
 800265a:	f001 fdbc 	bl	80041d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800265e:	200a      	movs	r0, #10
 8002660:	f001 fdd5 	bl	800420e <HAL_NVIC_EnableIRQ>
  /* EXTI15_10_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002664:	2200      	movs	r2, #0
 8002666:	2100      	movs	r1, #0
 8002668:	2028      	movs	r0, #40	@ 0x28
 800266a:	f001 fdb4 	bl	80041d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800266e:	2028      	movs	r0, #40	@ 0x28
 8002670:	f001 fdcd 	bl	800420e <HAL_NVIC_EnableIRQ>
  /* TIM6_DAC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002674:	2200      	movs	r2, #0
 8002676:	2100      	movs	r1, #0
 8002678:	2036      	movs	r0, #54	@ 0x36
 800267a:	f001 fdac 	bl	80041d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800267e:	2036      	movs	r0, #54	@ 0x36
 8002680:	f001 fdc5 	bl	800420e <HAL_NVIC_EnableIRQ>
}
 8002684:	bf00      	nop
 8002686:	bd80      	pop	{r7, pc}

08002688 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b08e      	sub	sp, #56	@ 0x38
 800268c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800268e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002692:	2200      	movs	r2, #0
 8002694:	601a      	str	r2, [r3, #0]
 8002696:	605a      	str	r2, [r3, #4]
 8002698:	609a      	str	r2, [r3, #8]
 800269a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800269c:	f107 0320 	add.w	r3, r7, #32
 80026a0:	2200      	movs	r2, #0
 80026a2:	601a      	str	r2, [r3, #0]
 80026a4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80026a6:	1d3b      	adds	r3, r7, #4
 80026a8:	2200      	movs	r2, #0
 80026aa:	601a      	str	r2, [r3, #0]
 80026ac:	605a      	str	r2, [r3, #4]
 80026ae:	609a      	str	r2, [r3, #8]
 80026b0:	60da      	str	r2, [r3, #12]
 80026b2:	611a      	str	r2, [r3, #16]
 80026b4:	615a      	str	r2, [r3, #20]
 80026b6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80026b8:	4b2d      	ldr	r3, [pc, #180]	@ (8002770 <MX_TIM2_Init+0xe8>)
 80026ba:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80026be:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 41999;
 80026c0:	4b2b      	ldr	r3, [pc, #172]	@ (8002770 <MX_TIM2_Init+0xe8>)
 80026c2:	f24a 420f 	movw	r2, #41999	@ 0xa40f
 80026c6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026c8:	4b29      	ldr	r3, [pc, #164]	@ (8002770 <MX_TIM2_Init+0xe8>)
 80026ca:	2200      	movs	r2, #0
 80026cc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 80026ce:	4b28      	ldr	r3, [pc, #160]	@ (8002770 <MX_TIM2_Init+0xe8>)
 80026d0:	2209      	movs	r2, #9
 80026d2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026d4:	4b26      	ldr	r3, [pc, #152]	@ (8002770 <MX_TIM2_Init+0xe8>)
 80026d6:	2200      	movs	r2, #0
 80026d8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026da:	4b25      	ldr	r3, [pc, #148]	@ (8002770 <MX_TIM2_Init+0xe8>)
 80026dc:	2200      	movs	r2, #0
 80026de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80026e0:	4823      	ldr	r0, [pc, #140]	@ (8002770 <MX_TIM2_Init+0xe8>)
 80026e2:	f002 fcd9 	bl	8005098 <HAL_TIM_Base_Init>
 80026e6:	4603      	mov	r3, r0
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d001      	beq.n	80026f0 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80026ec:	f000 fa32 	bl	8002b54 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80026f0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80026f4:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80026f6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80026fa:	4619      	mov	r1, r3
 80026fc:	481c      	ldr	r0, [pc, #112]	@ (8002770 <MX_TIM2_Init+0xe8>)
 80026fe:	f003 f8cf 	bl	80058a0 <HAL_TIM_ConfigClockSource>
 8002702:	4603      	mov	r3, r0
 8002704:	2b00      	cmp	r3, #0
 8002706:	d001      	beq.n	800270c <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8002708:	f000 fa24 	bl	8002b54 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800270c:	4818      	ldr	r0, [pc, #96]	@ (8002770 <MX_TIM2_Init+0xe8>)
 800270e:	f002 fd83 	bl	8005218 <HAL_TIM_PWM_Init>
 8002712:	4603      	mov	r3, r0
 8002714:	2b00      	cmp	r3, #0
 8002716:	d001      	beq.n	800271c <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8002718:	f000 fa1c 	bl	8002b54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800271c:	2300      	movs	r3, #0
 800271e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002720:	2300      	movs	r3, #0
 8002722:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002724:	f107 0320 	add.w	r3, r7, #32
 8002728:	4619      	mov	r1, r3
 800272a:	4811      	ldr	r0, [pc, #68]	@ (8002770 <MX_TIM2_Init+0xe8>)
 800272c:	f003 fcc4 	bl	80060b8 <HAL_TIMEx_MasterConfigSynchronization>
 8002730:	4603      	mov	r3, r0
 8002732:	2b00      	cmp	r3, #0
 8002734:	d001      	beq.n	800273a <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8002736:	f000 fa0d 	bl	8002b54 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800273a:	2360      	movs	r3, #96	@ 0x60
 800273c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800273e:	2300      	movs	r3, #0
 8002740:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002742:	2300      	movs	r3, #0
 8002744:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002746:	2300      	movs	r3, #0
 8002748:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800274a:	1d3b      	adds	r3, r7, #4
 800274c:	2200      	movs	r2, #0
 800274e:	4619      	mov	r1, r3
 8002750:	4807      	ldr	r0, [pc, #28]	@ (8002770 <MX_TIM2_Init+0xe8>)
 8002752:	f002 ffe3 	bl	800571c <HAL_TIM_PWM_ConfigChannel>
 8002756:	4603      	mov	r3, r0
 8002758:	2b00      	cmp	r3, #0
 800275a:	d001      	beq.n	8002760 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 800275c:	f000 f9fa 	bl	8002b54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002760:	4803      	ldr	r0, [pc, #12]	@ (8002770 <MX_TIM2_Init+0xe8>)
 8002762:	f000 fa5b 	bl	8002c1c <HAL_TIM_MspPostInit>

}
 8002766:	bf00      	nop
 8002768:	3738      	adds	r7, #56	@ 0x38
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}
 800276e:	bf00      	nop
 8002770:	200001b0 	.word	0x200001b0

08002774 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b082      	sub	sp, #8
 8002778:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800277a:	463b      	mov	r3, r7
 800277c:	2200      	movs	r2, #0
 800277e:	601a      	str	r2, [r3, #0]
 8002780:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002782:	4b15      	ldr	r3, [pc, #84]	@ (80027d8 <MX_TIM6_Init+0x64>)
 8002784:	4a15      	ldr	r2, [pc, #84]	@ (80027dc <MX_TIM6_Init+0x68>)
 8002786:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 99;
 8002788:	4b13      	ldr	r3, [pc, #76]	@ (80027d8 <MX_TIM6_Init+0x64>)
 800278a:	2263      	movs	r2, #99	@ 0x63
 800278c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800278e:	4b12      	ldr	r3, [pc, #72]	@ (80027d8 <MX_TIM6_Init+0x64>)
 8002790:	2200      	movs	r2, #0
 8002792:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 839;
 8002794:	4b10      	ldr	r3, [pc, #64]	@ (80027d8 <MX_TIM6_Init+0x64>)
 8002796:	f240 3247 	movw	r2, #839	@ 0x347
 800279a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800279c:	4b0e      	ldr	r3, [pc, #56]	@ (80027d8 <MX_TIM6_Init+0x64>)
 800279e:	2280      	movs	r2, #128	@ 0x80
 80027a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80027a2:	480d      	ldr	r0, [pc, #52]	@ (80027d8 <MX_TIM6_Init+0x64>)
 80027a4:	f002 fc78 	bl	8005098 <HAL_TIM_Base_Init>
 80027a8:	4603      	mov	r3, r0
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d001      	beq.n	80027b2 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 80027ae:	f000 f9d1 	bl	8002b54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80027b2:	2300      	movs	r3, #0
 80027b4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80027b6:	2300      	movs	r3, #0
 80027b8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80027ba:	463b      	mov	r3, r7
 80027bc:	4619      	mov	r1, r3
 80027be:	4806      	ldr	r0, [pc, #24]	@ (80027d8 <MX_TIM6_Init+0x64>)
 80027c0:	f003 fc7a 	bl	80060b8 <HAL_TIMEx_MasterConfigSynchronization>
 80027c4:	4603      	mov	r3, r0
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d001      	beq.n	80027ce <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 80027ca:	f000 f9c3 	bl	8002b54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80027ce:	bf00      	nop
 80027d0:	3708      	adds	r7, #8
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}
 80027d6:	bf00      	nop
 80027d8:	200001f8 	.word	0x200001f8
 80027dc:	40001000 	.word	0x40001000

080027e0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80027e4:	4b11      	ldr	r3, [pc, #68]	@ (800282c <MX_USART3_UART_Init+0x4c>)
 80027e6:	4a12      	ldr	r2, [pc, #72]	@ (8002830 <MX_USART3_UART_Init+0x50>)
 80027e8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80027ea:	4b10      	ldr	r3, [pc, #64]	@ (800282c <MX_USART3_UART_Init+0x4c>)
 80027ec:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80027f0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80027f2:	4b0e      	ldr	r3, [pc, #56]	@ (800282c <MX_USART3_UART_Init+0x4c>)
 80027f4:	2200      	movs	r2, #0
 80027f6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80027f8:	4b0c      	ldr	r3, [pc, #48]	@ (800282c <MX_USART3_UART_Init+0x4c>)
 80027fa:	2200      	movs	r2, #0
 80027fc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80027fe:	4b0b      	ldr	r3, [pc, #44]	@ (800282c <MX_USART3_UART_Init+0x4c>)
 8002800:	2200      	movs	r2, #0
 8002802:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002804:	4b09      	ldr	r3, [pc, #36]	@ (800282c <MX_USART3_UART_Init+0x4c>)
 8002806:	220c      	movs	r2, #12
 8002808:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800280a:	4b08      	ldr	r3, [pc, #32]	@ (800282c <MX_USART3_UART_Init+0x4c>)
 800280c:	2200      	movs	r2, #0
 800280e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002810:	4b06      	ldr	r3, [pc, #24]	@ (800282c <MX_USART3_UART_Init+0x4c>)
 8002812:	2200      	movs	r2, #0
 8002814:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002816:	4805      	ldr	r0, [pc, #20]	@ (800282c <MX_USART3_UART_Init+0x4c>)
 8002818:	f003 fcde 	bl	80061d8 <HAL_UART_Init>
 800281c:	4603      	mov	r3, r0
 800281e:	2b00      	cmp	r3, #0
 8002820:	d001      	beq.n	8002826 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002822:	f000 f997 	bl	8002b54 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002826:	bf00      	nop
 8002828:	bd80      	pop	{r7, pc}
 800282a:	bf00      	nop
 800282c:	20000240 	.word	0x20000240
 8002830:	40004800 	.word	0x40004800

08002834 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b08c      	sub	sp, #48	@ 0x30
 8002838:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800283a:	f107 031c 	add.w	r3, r7, #28
 800283e:	2200      	movs	r2, #0
 8002840:	601a      	str	r2, [r3, #0]
 8002842:	605a      	str	r2, [r3, #4]
 8002844:	609a      	str	r2, [r3, #8]
 8002846:	60da      	str	r2, [r3, #12]
 8002848:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800284a:	2300      	movs	r3, #0
 800284c:	61bb      	str	r3, [r7, #24]
 800284e:	4b61      	ldr	r3, [pc, #388]	@ (80029d4 <MX_GPIO_Init+0x1a0>)
 8002850:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002852:	4a60      	ldr	r2, [pc, #384]	@ (80029d4 <MX_GPIO_Init+0x1a0>)
 8002854:	f043 0310 	orr.w	r3, r3, #16
 8002858:	6313      	str	r3, [r2, #48]	@ 0x30
 800285a:	4b5e      	ldr	r3, [pc, #376]	@ (80029d4 <MX_GPIO_Init+0x1a0>)
 800285c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800285e:	f003 0310 	and.w	r3, r3, #16
 8002862:	61bb      	str	r3, [r7, #24]
 8002864:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002866:	2300      	movs	r3, #0
 8002868:	617b      	str	r3, [r7, #20]
 800286a:	4b5a      	ldr	r3, [pc, #360]	@ (80029d4 <MX_GPIO_Init+0x1a0>)
 800286c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800286e:	4a59      	ldr	r2, [pc, #356]	@ (80029d4 <MX_GPIO_Init+0x1a0>)
 8002870:	f043 0304 	orr.w	r3, r3, #4
 8002874:	6313      	str	r3, [r2, #48]	@ 0x30
 8002876:	4b57      	ldr	r3, [pc, #348]	@ (80029d4 <MX_GPIO_Init+0x1a0>)
 8002878:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800287a:	f003 0304 	and.w	r3, r3, #4
 800287e:	617b      	str	r3, [r7, #20]
 8002880:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002882:	2300      	movs	r3, #0
 8002884:	613b      	str	r3, [r7, #16]
 8002886:	4b53      	ldr	r3, [pc, #332]	@ (80029d4 <MX_GPIO_Init+0x1a0>)
 8002888:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800288a:	4a52      	ldr	r2, [pc, #328]	@ (80029d4 <MX_GPIO_Init+0x1a0>)
 800288c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002890:	6313      	str	r3, [r2, #48]	@ 0x30
 8002892:	4b50      	ldr	r3, [pc, #320]	@ (80029d4 <MX_GPIO_Init+0x1a0>)
 8002894:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002896:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800289a:	613b      	str	r3, [r7, #16]
 800289c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800289e:	2300      	movs	r3, #0
 80028a0:	60fb      	str	r3, [r7, #12]
 80028a2:	4b4c      	ldr	r3, [pc, #304]	@ (80029d4 <MX_GPIO_Init+0x1a0>)
 80028a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028a6:	4a4b      	ldr	r2, [pc, #300]	@ (80029d4 <MX_GPIO_Init+0x1a0>)
 80028a8:	f043 0301 	orr.w	r3, r3, #1
 80028ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80028ae:	4b49      	ldr	r3, [pc, #292]	@ (80029d4 <MX_GPIO_Init+0x1a0>)
 80028b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028b2:	f003 0301 	and.w	r3, r3, #1
 80028b6:	60fb      	str	r3, [r7, #12]
 80028b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80028ba:	2300      	movs	r3, #0
 80028bc:	60bb      	str	r3, [r7, #8]
 80028be:	4b45      	ldr	r3, [pc, #276]	@ (80029d4 <MX_GPIO_Init+0x1a0>)
 80028c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028c2:	4a44      	ldr	r2, [pc, #272]	@ (80029d4 <MX_GPIO_Init+0x1a0>)
 80028c4:	f043 0302 	orr.w	r3, r3, #2
 80028c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80028ca:	4b42      	ldr	r3, [pc, #264]	@ (80029d4 <MX_GPIO_Init+0x1a0>)
 80028cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028ce:	f003 0302 	and.w	r3, r3, #2
 80028d2:	60bb      	str	r3, [r7, #8]
 80028d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80028d6:	2300      	movs	r3, #0
 80028d8:	607b      	str	r3, [r7, #4]
 80028da:	4b3e      	ldr	r3, [pc, #248]	@ (80029d4 <MX_GPIO_Init+0x1a0>)
 80028dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028de:	4a3d      	ldr	r2, [pc, #244]	@ (80029d4 <MX_GPIO_Init+0x1a0>)
 80028e0:	f043 0308 	orr.w	r3, r3, #8
 80028e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80028e6:	4b3b      	ldr	r3, [pc, #236]	@ (80029d4 <MX_GPIO_Init+0x1a0>)
 80028e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028ea:	f003 0308 	and.w	r3, r3, #8
 80028ee:	607b      	str	r3, [r7, #4]
 80028f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_5, GPIO_PIN_RESET);
 80028f2:	2200      	movs	r2, #0
 80028f4:	2121      	movs	r1, #33	@ 0x21
 80028f6:	4838      	ldr	r0, [pc, #224]	@ (80029d8 <MX_GPIO_Init+0x1a4>)
 80028f8:	f001 feea 	bl	80046d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 80028fc:	2200      	movs	r2, #0
 80028fe:	f44f 41e0 	mov.w	r1, #28672	@ 0x7000
 8002902:	4836      	ldr	r0, [pc, #216]	@ (80029dc <MX_GPIO_Init+0x1a8>)
 8002904:	f001 fee4 	bl	80046d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 8002908:	2200      	movs	r2, #0
 800290a:	2140      	movs	r1, #64	@ 0x40
 800290c:	4834      	ldr	r0, [pc, #208]	@ (80029e0 <MX_GPIO_Init+0x1ac>)
 800290e:	f001 fedf 	bl	80046d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002912:	2308      	movs	r3, #8
 8002914:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8002916:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 800291a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800291c:	2300      	movs	r3, #0
 800291e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002920:	f107 031c 	add.w	r3, r7, #28
 8002924:	4619      	mov	r1, r3
 8002926:	482f      	ldr	r0, [pc, #188]	@ (80029e4 <MX_GPIO_Init+0x1b0>)
 8002928:	f001 fd1e 	bl	8004368 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 800292c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002930:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8002932:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8002936:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002938:	2300      	movs	r3, #0
 800293a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800293c:	f107 031c 	add.w	r3, r7, #28
 8002940:	4619      	mov	r1, r3
 8002942:	4827      	ldr	r0, [pc, #156]	@ (80029e0 <MX_GPIO_Init+0x1ac>)
 8002944:	f001 fd10 	bl	8004368 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_5;
 8002948:	2321      	movs	r3, #33	@ 0x21
 800294a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800294c:	2301      	movs	r3, #1
 800294e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002950:	2300      	movs	r3, #0
 8002952:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002954:	2300      	movs	r3, #0
 8002956:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002958:	f107 031c 	add.w	r3, r7, #28
 800295c:	4619      	mov	r1, r3
 800295e:	481e      	ldr	r0, [pc, #120]	@ (80029d8 <MX_GPIO_Init+0x1a4>)
 8002960:	f001 fd02 	bl	8004368 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD10 PD4 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_4;
 8002964:	f44f 6382 	mov.w	r3, #1040	@ 0x410
 8002968:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800296a:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 800296e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002970:	2300      	movs	r3, #0
 8002972:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002974:	f107 031c 	add.w	r3, r7, #28
 8002978:	4619      	mov	r1, r3
 800297a:	4818      	ldr	r0, [pc, #96]	@ (80029dc <MX_GPIO_Init+0x1a8>)
 800297c:	f001 fcf4 	bl	8004368 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 8002980:	f44f 43e0 	mov.w	r3, #28672	@ 0x7000
 8002984:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002986:	2301      	movs	r3, #1
 8002988:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800298a:	2300      	movs	r3, #0
 800298c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800298e:	2300      	movs	r3, #0
 8002990:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002992:	f107 031c 	add.w	r3, r7, #28
 8002996:	4619      	mov	r1, r3
 8002998:	4810      	ldr	r0, [pc, #64]	@ (80029dc <MX_GPIO_Init+0x1a8>)
 800299a:	f001 fce5 	bl	8004368 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800299e:	2340      	movs	r3, #64	@ 0x40
 80029a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029a2:	2301      	movs	r3, #1
 80029a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029a6:	2300      	movs	r3, #0
 80029a8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029aa:	2300      	movs	r3, #0
 80029ac:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80029ae:	f107 031c 	add.w	r3, r7, #28
 80029b2:	4619      	mov	r1, r3
 80029b4:	480a      	ldr	r0, [pc, #40]	@ (80029e0 <MX_GPIO_Init+0x1ac>)
 80029b6:	f001 fcd7 	bl	8004368 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 80029ba:	2200      	movs	r2, #0
 80029bc:	2100      	movs	r1, #0
 80029be:	2009      	movs	r0, #9
 80029c0:	f001 fc09 	bl	80041d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80029c4:	2009      	movs	r0, #9
 80029c6:	f001 fc22 	bl	800420e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80029ca:	bf00      	nop
 80029cc:	3730      	adds	r7, #48	@ 0x30
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bd80      	pop	{r7, pc}
 80029d2:	bf00      	nop
 80029d4:	40023800 	.word	0x40023800
 80029d8:	40020400 	.word	0x40020400
 80029dc:	40020c00 	.word	0x40020c00
 80029e0:	40020800 	.word	0x40020800
 80029e4:	40021000 	.word	0x40021000

080029e8 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b082      	sub	sp, #8
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  if(huart -> Instance == USART3) {
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4a07      	ldr	r2, [pc, #28]	@ (8002a14 <HAL_UART_RxCpltCallback+0x2c>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d107      	bne.n	8002a0a <HAL_UART_RxCpltCallback+0x22>
	  HAL_UART_Receive_IT(&huart3, &uartRxfd.uart3_rx_data, sizeof(uartRxfd.uart3_rx_data));
 80029fa:	2201      	movs	r2, #1
 80029fc:	4906      	ldr	r1, [pc, #24]	@ (8002a18 <HAL_UART_RxCpltCallback+0x30>)
 80029fe:	4807      	ldr	r0, [pc, #28]	@ (8002a1c <HAL_UART_RxCpltCallback+0x34>)
 8002a00:	f003 fc3a 	bl	8006278 <HAL_UART_Receive_IT>
	  uartRxfd.uart3_rx_flag = 1;
 8002a04:	4b04      	ldr	r3, [pc, #16]	@ (8002a18 <HAL_UART_RxCpltCallback+0x30>)
 8002a06:	2201      	movs	r2, #1
 8002a08:	705a      	strb	r2, [r3, #1]
  }
}
 8002a0a:	bf00      	nop
 8002a0c:	3708      	adds	r7, #8
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}
 8002a12:	bf00      	nop
 8002a14:	40004800 	.word	0x40004800
 8002a18:	2000031c 	.word	0x2000031c
 8002a1c:	20000240 	.word	0x20000240

08002a20 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b082      	sub	sp, #8
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM6) {
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a0e      	ldr	r2, [pc, #56]	@ (8002a68 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d116      	bne.n	8002a60 <HAL_TIM_PeriodElapsedCallback+0x40>
		systemMillisecondCount();
 8002a32:	f001 f999 	bl	8003d68 <systemMillisecondCount>
		blinking();
 8002a36:	f001 f9af 	bl	8003d98 <blinking>
		stopwatch.time.millisecond++;
 8002a3a:	4b0c      	ldr	r3, [pc, #48]	@ (8002a6c <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8002a3c:	691b      	ldr	r3, [r3, #16]
 8002a3e:	3301      	adds	r3, #1
 8002a40:	4a0a      	ldr	r2, [pc, #40]	@ (8002a6c <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8002a42:	6113      	str	r3, [r2, #16]
		stopwatchTime(); 	// 스탑워치 시간 카운트
 8002a44:	f000 fa5e 	bl	8002f04 <stopwatchTime>
		holdEvent();		// presstime 측정
 8002a48:	f000 ffea 	bl	8003a20 <holdEvent>
		startClock(); 		// 시계모드 시간 카운트
 8002a4c:	f7fe ff68 	bl	8001920 <startClock>
		switchClockMode(); 	// 시계모드 스위칭
 8002a50:	f7ff f984 	bl	8001d5c <switchClockMode>
		buzOnOff();
 8002a54:	f7fe fe20 	bl	8001698 <buzOnOff>
		waitingTimeCnt();
 8002a58:	f001 f9b4 	bl	8003dc4 <waitingTimeCnt>
		alarmTrigger();
 8002a5c:	f7fe fd5a 	bl	8001514 <alarmTrigger>
	}

}
 8002a60:	bf00      	nop
 8002a62:	3708      	adds	r7, #8
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bd80      	pop	{r7, pc}
 8002a68:	40001000 	.word	0x40001000
 8002a6c:	20000078 	.word	0x20000078

08002a70 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b082      	sub	sp, #8
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	4603      	mov	r3, r0
 8002a78:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_3 && HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_3)) {
 8002a7a:	88fb      	ldrh	r3, [r7, #6]
 8002a7c:	2b08      	cmp	r3, #8
 8002a7e:	d10a      	bne.n	8002a96 <HAL_GPIO_EXTI_Callback+0x26>
 8002a80:	2108      	movs	r1, #8
 8002a82:	482b      	ldr	r0, [pc, #172]	@ (8002b30 <HAL_GPIO_EXTI_Callback+0xc0>)
 8002a84:	f001 fe0c 	bl	80046a0 <HAL_GPIO_ReadPin>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d003      	beq.n	8002a96 <HAL_GPIO_EXTI_Callback+0x26>
		sw1.state = 1;
 8002a8e:	4b29      	ldr	r3, [pc, #164]	@ (8002b34 <HAL_GPIO_EXTI_Callback+0xc4>)
 8002a90:	2201      	movs	r2, #1
 8002a92:	701a      	strb	r2, [r3, #0]
 8002a94:	e002      	b.n	8002a9c <HAL_GPIO_EXTI_Callback+0x2c>
	} else {
		sw1.state = 0;
 8002a96:	4b27      	ldr	r3, [pc, #156]	@ (8002b34 <HAL_GPIO_EXTI_Callback+0xc4>)
 8002a98:	2200      	movs	r2, #0
 8002a9a:	701a      	strb	r2, [r3, #0]
	}

	if(GPIO_Pin == GPIO_PIN_15 && HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_15)) {
 8002a9c:	88fb      	ldrh	r3, [r7, #6]
 8002a9e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002aa2:	d119      	bne.n	8002ad8 <HAL_GPIO_EXTI_Callback+0x68>
 8002aa4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002aa8:	4823      	ldr	r0, [pc, #140]	@ (8002b38 <HAL_GPIO_EXTI_Callback+0xc8>)
 8002aaa:	f001 fdf9 	bl	80046a0 <HAL_GPIO_ReadPin>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d011      	beq.n	8002ad8 <HAL_GPIO_EXTI_Callback+0x68>
		sw2.state = 1;
 8002ab4:	4b21      	ldr	r3, [pc, #132]	@ (8002b3c <HAL_GPIO_EXTI_Callback+0xcc>)
 8002ab6:	2201      	movs	r2, #1
 8002ab8:	701a      	strb	r2, [r3, #0]
		if(mode == STOPWATCH) {
 8002aba:	4b21      	ldr	r3, [pc, #132]	@ (8002b40 <HAL_GPIO_EXTI_Callback+0xd0>)
 8002abc:	781b      	ldrb	r3, [r3, #0]
 8002abe:	2b02      	cmp	r3, #2
 8002ac0:	d10d      	bne.n	8002ade <HAL_GPIO_EXTI_Callback+0x6e>
			stopwatch.onOffState = !stopwatch.onOffState;
 8002ac2:	4b20      	ldr	r3, [pc, #128]	@ (8002b44 <HAL_GPIO_EXTI_Callback+0xd4>)
 8002ac4:	781b      	ldrb	r3, [r3, #0]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	bf0c      	ite	eq
 8002aca:	2301      	moveq	r3, #1
 8002acc:	2300      	movne	r3, #0
 8002ace:	b2db      	uxtb	r3, r3
 8002ad0:	461a      	mov	r2, r3
 8002ad2:	4b1c      	ldr	r3, [pc, #112]	@ (8002b44 <HAL_GPIO_EXTI_Callback+0xd4>)
 8002ad4:	701a      	strb	r2, [r3, #0]
		if(mode == STOPWATCH) {
 8002ad6:	e002      	b.n	8002ade <HAL_GPIO_EXTI_Callback+0x6e>
		}

	} else {
		sw2.state = 0;
 8002ad8:	4b18      	ldr	r3, [pc, #96]	@ (8002b3c <HAL_GPIO_EXTI_Callback+0xcc>)
 8002ada:	2200      	movs	r2, #0
 8002adc:	701a      	strb	r2, [r3, #0]
	}
	if(GPIO_Pin == GPIO_PIN_4 && HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_4)) {
 8002ade:	88fb      	ldrh	r3, [r7, #6]
 8002ae0:	2b10      	cmp	r3, #16
 8002ae2:	d10a      	bne.n	8002afa <HAL_GPIO_EXTI_Callback+0x8a>
 8002ae4:	2110      	movs	r1, #16
 8002ae6:	4818      	ldr	r0, [pc, #96]	@ (8002b48 <HAL_GPIO_EXTI_Callback+0xd8>)
 8002ae8:	f001 fdda 	bl	80046a0 <HAL_GPIO_ReadPin>
 8002aec:	4603      	mov	r3, r0
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d003      	beq.n	8002afa <HAL_GPIO_EXTI_Callback+0x8a>
		sw3.state = 1;
 8002af2:	4b16      	ldr	r3, [pc, #88]	@ (8002b4c <HAL_GPIO_EXTI_Callback+0xdc>)
 8002af4:	2201      	movs	r2, #1
 8002af6:	701a      	strb	r2, [r3, #0]
 8002af8:	e002      	b.n	8002b00 <HAL_GPIO_EXTI_Callback+0x90>
	} else {
		sw3.state = 0;
 8002afa:	4b14      	ldr	r3, [pc, #80]	@ (8002b4c <HAL_GPIO_EXTI_Callback+0xdc>)
 8002afc:	2200      	movs	r2, #0
 8002afe:	701a      	strb	r2, [r3, #0]
	}
	if(GPIO_Pin == GPIO_PIN_10 && HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_10)) {
 8002b00:	88fb      	ldrh	r3, [r7, #6]
 8002b02:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b06:	d10b      	bne.n	8002b20 <HAL_GPIO_EXTI_Callback+0xb0>
 8002b08:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002b0c:	480e      	ldr	r0, [pc, #56]	@ (8002b48 <HAL_GPIO_EXTI_Callback+0xd8>)
 8002b0e:	f001 fdc7 	bl	80046a0 <HAL_GPIO_ReadPin>
 8002b12:	4603      	mov	r3, r0
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d003      	beq.n	8002b20 <HAL_GPIO_EXTI_Callback+0xb0>
		sw4.state = 1;
 8002b18:	4b0d      	ldr	r3, [pc, #52]	@ (8002b50 <HAL_GPIO_EXTI_Callback+0xe0>)
 8002b1a:	2201      	movs	r2, #1
 8002b1c:	701a      	strb	r2, [r3, #0]
 8002b1e:	e003      	b.n	8002b28 <HAL_GPIO_EXTI_Callback+0xb8>
	} else {
		sw4.state = 0;
 8002b20:	4b0b      	ldr	r3, [pc, #44]	@ (8002b50 <HAL_GPIO_EXTI_Callback+0xe0>)
 8002b22:	2200      	movs	r2, #0
 8002b24:	701a      	strb	r2, [r3, #0]
	}

}
 8002b26:	bf00      	nop
 8002b28:	bf00      	nop
 8002b2a:	3708      	adds	r7, #8
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bd80      	pop	{r7, pc}
 8002b30:	40021000 	.word	0x40021000
 8002b34:	20000294 	.word	0x20000294
 8002b38:	40020800 	.word	0x40020800
 8002b3c:	200002b0 	.word	0x200002b0
 8002b40:	20000315 	.word	0x20000315
 8002b44:	20000078 	.word	0x20000078
 8002b48:	40020c00 	.word	0x40020c00
 8002b4c:	200002cc 	.word	0x200002cc
 8002b50:	200002e8 	.word	0x200002e8

08002b54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002b54:	b480      	push	{r7}
 8002b56:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002b58:	b672      	cpsid	i
}
 8002b5a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002b5c:	bf00      	nop
 8002b5e:	e7fd      	b.n	8002b5c <Error_Handler+0x8>

08002b60 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002b60:	b480      	push	{r7}
 8002b62:	b083      	sub	sp, #12
 8002b64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b66:	2300      	movs	r3, #0
 8002b68:	607b      	str	r3, [r7, #4]
 8002b6a:	4b10      	ldr	r3, [pc, #64]	@ (8002bac <HAL_MspInit+0x4c>)
 8002b6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b6e:	4a0f      	ldr	r2, [pc, #60]	@ (8002bac <HAL_MspInit+0x4c>)
 8002b70:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002b74:	6453      	str	r3, [r2, #68]	@ 0x44
 8002b76:	4b0d      	ldr	r3, [pc, #52]	@ (8002bac <HAL_MspInit+0x4c>)
 8002b78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b7a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b7e:	607b      	str	r3, [r7, #4]
 8002b80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b82:	2300      	movs	r3, #0
 8002b84:	603b      	str	r3, [r7, #0]
 8002b86:	4b09      	ldr	r3, [pc, #36]	@ (8002bac <HAL_MspInit+0x4c>)
 8002b88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b8a:	4a08      	ldr	r2, [pc, #32]	@ (8002bac <HAL_MspInit+0x4c>)
 8002b8c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b90:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b92:	4b06      	ldr	r3, [pc, #24]	@ (8002bac <HAL_MspInit+0x4c>)
 8002b94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b9a:	603b      	str	r3, [r7, #0]
 8002b9c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002b9e:	bf00      	nop
 8002ba0:	370c      	adds	r7, #12
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba8:	4770      	bx	lr
 8002baa:	bf00      	nop
 8002bac:	40023800 	.word	0x40023800

08002bb0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	b085      	sub	sp, #20
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002bc0:	d10e      	bne.n	8002be0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	60fb      	str	r3, [r7, #12]
 8002bc6:	4b13      	ldr	r3, [pc, #76]	@ (8002c14 <HAL_TIM_Base_MspInit+0x64>)
 8002bc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bca:	4a12      	ldr	r2, [pc, #72]	@ (8002c14 <HAL_TIM_Base_MspInit+0x64>)
 8002bcc:	f043 0301 	orr.w	r3, r3, #1
 8002bd0:	6413      	str	r3, [r2, #64]	@ 0x40
 8002bd2:	4b10      	ldr	r3, [pc, #64]	@ (8002c14 <HAL_TIM_Base_MspInit+0x64>)
 8002bd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bd6:	f003 0301 	and.w	r3, r3, #1
 8002bda:	60fb      	str	r3, [r7, #12]
 8002bdc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8002bde:	e012      	b.n	8002c06 <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM6)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a0c      	ldr	r2, [pc, #48]	@ (8002c18 <HAL_TIM_Base_MspInit+0x68>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d10d      	bne.n	8002c06 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002bea:	2300      	movs	r3, #0
 8002bec:	60bb      	str	r3, [r7, #8]
 8002bee:	4b09      	ldr	r3, [pc, #36]	@ (8002c14 <HAL_TIM_Base_MspInit+0x64>)
 8002bf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bf2:	4a08      	ldr	r2, [pc, #32]	@ (8002c14 <HAL_TIM_Base_MspInit+0x64>)
 8002bf4:	f043 0310 	orr.w	r3, r3, #16
 8002bf8:	6413      	str	r3, [r2, #64]	@ 0x40
 8002bfa:	4b06      	ldr	r3, [pc, #24]	@ (8002c14 <HAL_TIM_Base_MspInit+0x64>)
 8002bfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bfe:	f003 0310 	and.w	r3, r3, #16
 8002c02:	60bb      	str	r3, [r7, #8]
 8002c04:	68bb      	ldr	r3, [r7, #8]
}
 8002c06:	bf00      	nop
 8002c08:	3714      	adds	r7, #20
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c10:	4770      	bx	lr
 8002c12:	bf00      	nop
 8002c14:	40023800 	.word	0x40023800
 8002c18:	40001000 	.word	0x40001000

08002c1c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b088      	sub	sp, #32
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c24:	f107 030c 	add.w	r3, r7, #12
 8002c28:	2200      	movs	r2, #0
 8002c2a:	601a      	str	r2, [r3, #0]
 8002c2c:	605a      	str	r2, [r3, #4]
 8002c2e:	609a      	str	r2, [r3, #8]
 8002c30:	60da      	str	r2, [r3, #12]
 8002c32:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002c3c:	d11d      	bne.n	8002c7a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c3e:	2300      	movs	r3, #0
 8002c40:	60bb      	str	r3, [r7, #8]
 8002c42:	4b10      	ldr	r3, [pc, #64]	@ (8002c84 <HAL_TIM_MspPostInit+0x68>)
 8002c44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c46:	4a0f      	ldr	r2, [pc, #60]	@ (8002c84 <HAL_TIM_MspPostInit+0x68>)
 8002c48:	f043 0301 	orr.w	r3, r3, #1
 8002c4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c4e:	4b0d      	ldr	r3, [pc, #52]	@ (8002c84 <HAL_TIM_MspPostInit+0x68>)
 8002c50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c52:	f003 0301 	and.w	r3, r3, #1
 8002c56:	60bb      	str	r3, [r7, #8]
 8002c58:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002c5a:	2320      	movs	r3, #32
 8002c5c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c5e:	2302      	movs	r3, #2
 8002c60:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c62:	2300      	movs	r3, #0
 8002c64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c66:	2300      	movs	r3, #0
 8002c68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c6e:	f107 030c 	add.w	r3, r7, #12
 8002c72:	4619      	mov	r1, r3
 8002c74:	4804      	ldr	r0, [pc, #16]	@ (8002c88 <HAL_TIM_MspPostInit+0x6c>)
 8002c76:	f001 fb77 	bl	8004368 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002c7a:	bf00      	nop
 8002c7c:	3720      	adds	r7, #32
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd80      	pop	{r7, pc}
 8002c82:	bf00      	nop
 8002c84:	40023800 	.word	0x40023800
 8002c88:	40020000 	.word	0x40020000

08002c8c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b08a      	sub	sp, #40	@ 0x28
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c94:	f107 0314 	add.w	r3, r7, #20
 8002c98:	2200      	movs	r2, #0
 8002c9a:	601a      	str	r2, [r3, #0]
 8002c9c:	605a      	str	r2, [r3, #4]
 8002c9e:	609a      	str	r2, [r3, #8]
 8002ca0:	60da      	str	r2, [r3, #12]
 8002ca2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a19      	ldr	r2, [pc, #100]	@ (8002d10 <HAL_UART_MspInit+0x84>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d12c      	bne.n	8002d08 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002cae:	2300      	movs	r3, #0
 8002cb0:	613b      	str	r3, [r7, #16]
 8002cb2:	4b18      	ldr	r3, [pc, #96]	@ (8002d14 <HAL_UART_MspInit+0x88>)
 8002cb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cb6:	4a17      	ldr	r2, [pc, #92]	@ (8002d14 <HAL_UART_MspInit+0x88>)
 8002cb8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002cbc:	6413      	str	r3, [r2, #64]	@ 0x40
 8002cbe:	4b15      	ldr	r3, [pc, #84]	@ (8002d14 <HAL_UART_MspInit+0x88>)
 8002cc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cc2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002cc6:	613b      	str	r3, [r7, #16]
 8002cc8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002cca:	2300      	movs	r3, #0
 8002ccc:	60fb      	str	r3, [r7, #12]
 8002cce:	4b11      	ldr	r3, [pc, #68]	@ (8002d14 <HAL_UART_MspInit+0x88>)
 8002cd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cd2:	4a10      	ldr	r2, [pc, #64]	@ (8002d14 <HAL_UART_MspInit+0x88>)
 8002cd4:	f043 0308 	orr.w	r3, r3, #8
 8002cd8:	6313      	str	r3, [r2, #48]	@ 0x30
 8002cda:	4b0e      	ldr	r3, [pc, #56]	@ (8002d14 <HAL_UART_MspInit+0x88>)
 8002cdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cde:	f003 0308 	and.w	r3, r3, #8
 8002ce2:	60fb      	str	r3, [r7, #12]
 8002ce4:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002ce6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002cea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cec:	2302      	movs	r3, #2
 8002cee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cf4:	2303      	movs	r3, #3
 8002cf6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002cf8:	2307      	movs	r3, #7
 8002cfa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002cfc:	f107 0314 	add.w	r3, r7, #20
 8002d00:	4619      	mov	r1, r3
 8002d02:	4805      	ldr	r0, [pc, #20]	@ (8002d18 <HAL_UART_MspInit+0x8c>)
 8002d04:	f001 fb30 	bl	8004368 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002d08:	bf00      	nop
 8002d0a:	3728      	adds	r7, #40	@ 0x28
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	bd80      	pop	{r7, pc}
 8002d10:	40004800 	.word	0x40004800
 8002d14:	40023800 	.word	0x40023800
 8002d18:	40020c00 	.word	0x40020c00

08002d1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002d20:	bf00      	nop
 8002d22:	e7fd      	b.n	8002d20 <NMI_Handler+0x4>

08002d24 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d24:	b480      	push	{r7}
 8002d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d28:	bf00      	nop
 8002d2a:	e7fd      	b.n	8002d28 <HardFault_Handler+0x4>

08002d2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002d30:	bf00      	nop
 8002d32:	e7fd      	b.n	8002d30 <MemManage_Handler+0x4>

08002d34 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002d34:	b480      	push	{r7}
 8002d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002d38:	bf00      	nop
 8002d3a:	e7fd      	b.n	8002d38 <BusFault_Handler+0x4>

08002d3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002d40:	bf00      	nop
 8002d42:	e7fd      	b.n	8002d40 <UsageFault_Handler+0x4>

08002d44 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002d44:	b480      	push	{r7}
 8002d46:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002d48:	bf00      	nop
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d50:	4770      	bx	lr

08002d52 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002d52:	b480      	push	{r7}
 8002d54:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002d56:	bf00      	nop
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5e:	4770      	bx	lr

08002d60 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002d60:	b480      	push	{r7}
 8002d62:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002d64:	bf00      	nop
 8002d66:	46bd      	mov	sp, r7
 8002d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6c:	4770      	bx	lr

08002d6e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002d6e:	b580      	push	{r7, lr}
 8002d70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002d72:	f001 f911 	bl	8003f98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002d76:	bf00      	nop
 8002d78:	bd80      	pop	{r7, pc}

08002d7a <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8002d7a:	b580      	push	{r7, lr}
 8002d7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8002d7e:	2008      	movs	r0, #8
 8002d80:	f001 fcda 	bl	8004738 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8002d84:	bf00      	nop
 8002d86:	bd80      	pop	{r7, pc}

08002d88 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8002d8c:	2010      	movs	r0, #16
 8002d8e:	f001 fcd3 	bl	8004738 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8002d92:	bf00      	nop
 8002d94:	bd80      	pop	{r7, pc}
	...

08002d98 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002d9c:	4802      	ldr	r0, [pc, #8]	@ (8002da8 <USART3_IRQHandler+0x10>)
 8002d9e:	f003 fa91 	bl	80062c4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002da2:	bf00      	nop
 8002da4:	bd80      	pop	{r7, pc}
 8002da6:	bf00      	nop
 8002da8:	20000240 	.word	0x20000240

08002dac <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8002db0:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8002db4:	f001 fcc0 	bl	8004738 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8002db8:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8002dbc:	f001 fcbc 	bl	8004738 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002dc0:	bf00      	nop
 8002dc2:	bd80      	pop	{r7, pc}

08002dc4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002dc8:	4802      	ldr	r0, [pc, #8]	@ (8002dd4 <TIM6_DAC_IRQHandler+0x10>)
 8002dca:	f002 fbb7 	bl	800553c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002dce:	bf00      	nop
 8002dd0:	bd80      	pop	{r7, pc}
 8002dd2:	bf00      	nop
 8002dd4:	200001f8 	.word	0x200001f8

08002dd8 <segUpCount>:

#include "stopWatch.h"
stopWatchTime pausedTimer = {0, 0, 0, 0};
extern stopWatch stopwatch;

void segUpCount() {
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	af00      	add	r7, sp, #0
	// 스탑워치 시작 함수
	if(stopwatch.time.millisecond < 500) {
 8002ddc:	4b18      	ldr	r3, [pc, #96]	@ (8002e40 <segUpCount+0x68>)
 8002dde:	691b      	ldr	r3, [r3, #16]
 8002de0:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8002de4:	da04      	bge.n	8002df0 <segUpCount+0x18>
		stopwatch.laptime.decimalPoint = 1;
 8002de6:	4b16      	ldr	r3, [pc, #88]	@ (8002e40 <segUpCount+0x68>)
 8002de8:	2201      	movs	r2, #1
 8002dea:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
 8002dee:	e003      	b.n	8002df8 <segUpCount+0x20>
	} else {
		stopwatch.laptime.decimalPoint = 0;
 8002df0:	4b13      	ldr	r3, [pc, #76]	@ (8002e40 <segUpCount+0x68>)
 8002df2:	2200      	movs	r2, #0
 8002df4:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	}
	_7SEG_SetNumber(DGT1, stopwatch.time.second % 10, stopwatch.laptime.decimalPoint);
 8002df8:	4b11      	ldr	r3, [pc, #68]	@ (8002e40 <segUpCount+0x68>)
 8002dfa:	68da      	ldr	r2, [r3, #12]
 8002dfc:	4b11      	ldr	r3, [pc, #68]	@ (8002e44 <segUpCount+0x6c>)
 8002dfe:	fb83 1302 	smull	r1, r3, r3, r2
 8002e02:	1099      	asrs	r1, r3, #2
 8002e04:	17d3      	asrs	r3, r2, #31
 8002e06:	1ac9      	subs	r1, r1, r3
 8002e08:	460b      	mov	r3, r1
 8002e0a:	009b      	lsls	r3, r3, #2
 8002e0c:	440b      	add	r3, r1
 8002e0e:	005b      	lsls	r3, r3, #1
 8002e10:	1ad1      	subs	r1, r2, r3
 8002e12:	4b0b      	ldr	r3, [pc, #44]	@ (8002e40 <segUpCount+0x68>)
 8002e14:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 8002e18:	461a      	mov	r2, r3
 8002e1a:	2000      	movs	r0, #0
 8002e1c:	f7fd fc86 	bl	800072c <_7SEG_SetNumber>
	_7SEG_SetNumber(DGT2, stopwatch.time.millisecond / 100, 0);
 8002e20:	4b07      	ldr	r3, [pc, #28]	@ (8002e40 <segUpCount+0x68>)
 8002e22:	691b      	ldr	r3, [r3, #16]
 8002e24:	4a08      	ldr	r2, [pc, #32]	@ (8002e48 <segUpCount+0x70>)
 8002e26:	fb82 1203 	smull	r1, r2, r2, r3
 8002e2a:	1152      	asrs	r2, r2, #5
 8002e2c:	17db      	asrs	r3, r3, #31
 8002e2e:	1ad3      	subs	r3, r2, r3
 8002e30:	2200      	movs	r2, #0
 8002e32:	4619      	mov	r1, r3
 8002e34:	2001      	movs	r0, #1
 8002e36:	f7fd fc79 	bl	800072c <_7SEG_SetNumber>

}
 8002e3a:	bf00      	nop
 8002e3c:	bd80      	pop	{r7, pc}
 8002e3e:	bf00      	nop
 8002e40:	20000078 	.word	0x20000078
 8002e44:	66666667 	.word	0x66666667
 8002e48:	51eb851f 	.word	0x51eb851f

08002e4c <segReset>:

void segReset() {
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	af00      	add	r7, sp, #0
	// 7세그먼트 초기화 함수
	_7SEG_SetNumber(DGT1, 0, 1);
 8002e50:	2201      	movs	r2, #1
 8002e52:	2100      	movs	r1, #0
 8002e54:	2000      	movs	r0, #0
 8002e56:	f7fd fc69 	bl	800072c <_7SEG_SetNumber>
	_7SEG_SetNumber(DGT2, 0, 0);
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	2100      	movs	r1, #0
 8002e5e:	2001      	movs	r0, #1
 8002e60:	f7fd fc64 	bl	800072c <_7SEG_SetNumber>
}
 8002e64:	bf00      	nop
 8002e66:	bd80      	pop	{r7, pc}

08002e68 <timerReset>:

void timerReset() {
 8002e68:	b480      	push	{r7}
 8002e6a:	af00      	add	r7, sp, #0
	// 스탑워치 시간 초기화 함수
	stopwatch.time.hour = 0;
 8002e6c:	4b08      	ldr	r3, [pc, #32]	@ (8002e90 <timerReset+0x28>)
 8002e6e:	2200      	movs	r2, #0
 8002e70:	605a      	str	r2, [r3, #4]
	stopwatch.time.minute = 0;
 8002e72:	4b07      	ldr	r3, [pc, #28]	@ (8002e90 <timerReset+0x28>)
 8002e74:	2200      	movs	r2, #0
 8002e76:	609a      	str	r2, [r3, #8]
	stopwatch.time.second = 0;
 8002e78:	4b05      	ldr	r3, [pc, #20]	@ (8002e90 <timerReset+0x28>)
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	60da      	str	r2, [r3, #12]
	stopwatch.time.millisecond = 0;
 8002e7e:	4b04      	ldr	r3, [pc, #16]	@ (8002e90 <timerReset+0x28>)
 8002e80:	2200      	movs	r2, #0
 8002e82:	611a      	str	r2, [r3, #16]
}
 8002e84:	bf00      	nop
 8002e86:	46bd      	mov	sp, r7
 8002e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8c:	4770      	bx	lr
 8002e8e:	bf00      	nop
 8002e90:	20000078 	.word	0x20000078

08002e94 <timerPaused>:

void timerPaused() {
 8002e94:	b480      	push	{r7}
 8002e96:	af00      	add	r7, sp, #0
	// 스탑워치 일시정지 함수
	pausedTimer.hour = stopwatch.time.hour;
 8002e98:	4b0a      	ldr	r3, [pc, #40]	@ (8002ec4 <timerPaused+0x30>)
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	4a0a      	ldr	r2, [pc, #40]	@ (8002ec8 <timerPaused+0x34>)
 8002e9e:	6013      	str	r3, [r2, #0]
	pausedTimer.minute = stopwatch.time.minute;
 8002ea0:	4b08      	ldr	r3, [pc, #32]	@ (8002ec4 <timerPaused+0x30>)
 8002ea2:	689b      	ldr	r3, [r3, #8]
 8002ea4:	4a08      	ldr	r2, [pc, #32]	@ (8002ec8 <timerPaused+0x34>)
 8002ea6:	6053      	str	r3, [r2, #4]
	pausedTimer.second = stopwatch.time.second;
 8002ea8:	4b06      	ldr	r3, [pc, #24]	@ (8002ec4 <timerPaused+0x30>)
 8002eaa:	68db      	ldr	r3, [r3, #12]
 8002eac:	4a06      	ldr	r2, [pc, #24]	@ (8002ec8 <timerPaused+0x34>)
 8002eae:	6093      	str	r3, [r2, #8]
	pausedTimer.millisecond = stopwatch.time.millisecond;
 8002eb0:	4b04      	ldr	r3, [pc, #16]	@ (8002ec4 <timerPaused+0x30>)
 8002eb2:	691b      	ldr	r3, [r3, #16]
 8002eb4:	4a04      	ldr	r2, [pc, #16]	@ (8002ec8 <timerPaused+0x34>)
 8002eb6:	60d3      	str	r3, [r2, #12]
}
 8002eb8:	bf00      	nop
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec0:	4770      	bx	lr
 8002ec2:	bf00      	nop
 8002ec4:	20000078 	.word	0x20000078
 8002ec8:	20000304 	.word	0x20000304

08002ecc <timerResum>:

void timerResum() {
 8002ecc:	b480      	push	{r7}
 8002ece:	af00      	add	r7, sp, #0
	// 스탑워치 재개 함수
	stopwatch.time.hour = pausedTimer.hour;
 8002ed0:	4b0a      	ldr	r3, [pc, #40]	@ (8002efc <timerResum+0x30>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4a0a      	ldr	r2, [pc, #40]	@ (8002f00 <timerResum+0x34>)
 8002ed6:	6053      	str	r3, [r2, #4]
	stopwatch.time.minute = pausedTimer.minute;
 8002ed8:	4b08      	ldr	r3, [pc, #32]	@ (8002efc <timerResum+0x30>)
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	4a08      	ldr	r2, [pc, #32]	@ (8002f00 <timerResum+0x34>)
 8002ede:	6093      	str	r3, [r2, #8]
	stopwatch.time.second = pausedTimer.second;
 8002ee0:	4b06      	ldr	r3, [pc, #24]	@ (8002efc <timerResum+0x30>)
 8002ee2:	689b      	ldr	r3, [r3, #8]
 8002ee4:	4a06      	ldr	r2, [pc, #24]	@ (8002f00 <timerResum+0x34>)
 8002ee6:	60d3      	str	r3, [r2, #12]
	stopwatch.time.millisecond = pausedTimer.millisecond;
 8002ee8:	4b04      	ldr	r3, [pc, #16]	@ (8002efc <timerResum+0x30>)
 8002eea:	68db      	ldr	r3, [r3, #12]
 8002eec:	4a04      	ldr	r2, [pc, #16]	@ (8002f00 <timerResum+0x34>)
 8002eee:	6113      	str	r3, [r2, #16]
}
 8002ef0:	bf00      	nop
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef8:	4770      	bx	lr
 8002efa:	bf00      	nop
 8002efc:	20000304 	.word	0x20000304
 8002f00:	20000078 	.word	0x20000078

08002f04 <stopwatchTime>:

void stopwatchTime() {
 8002f04:	b480      	push	{r7}
 8002f06:	af00      	add	r7, sp, #0
	// 스탑워치 시간 저장함수
	if(stopwatch.time.millisecond % 1000 == 0) {
 8002f08:	4b1d      	ldr	r3, [pc, #116]	@ (8002f80 <stopwatchTime+0x7c>)
 8002f0a:	691a      	ldr	r2, [r3, #16]
 8002f0c:	4b1d      	ldr	r3, [pc, #116]	@ (8002f84 <stopwatchTime+0x80>)
 8002f0e:	fb83 1302 	smull	r1, r3, r3, r2
 8002f12:	1199      	asrs	r1, r3, #6
 8002f14:	17d3      	asrs	r3, r2, #31
 8002f16:	1acb      	subs	r3, r1, r3
 8002f18:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002f1c:	fb01 f303 	mul.w	r3, r1, r3
 8002f20:	1ad3      	subs	r3, r2, r3
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d107      	bne.n	8002f36 <stopwatchTime+0x32>
		stopwatch.time.millisecond = 0;
 8002f26:	4b16      	ldr	r3, [pc, #88]	@ (8002f80 <stopwatchTime+0x7c>)
 8002f28:	2200      	movs	r2, #0
 8002f2a:	611a      	str	r2, [r3, #16]
		stopwatch.time.second++;
 8002f2c:	4b14      	ldr	r3, [pc, #80]	@ (8002f80 <stopwatchTime+0x7c>)
 8002f2e:	68db      	ldr	r3, [r3, #12]
 8002f30:	3301      	adds	r3, #1
 8002f32:	4a13      	ldr	r2, [pc, #76]	@ (8002f80 <stopwatchTime+0x7c>)
 8002f34:	60d3      	str	r3, [r2, #12]
	}
	if(stopwatch.time.second == 60) {
 8002f36:	4b12      	ldr	r3, [pc, #72]	@ (8002f80 <stopwatchTime+0x7c>)
 8002f38:	68db      	ldr	r3, [r3, #12]
 8002f3a:	2b3c      	cmp	r3, #60	@ 0x3c
 8002f3c:	d107      	bne.n	8002f4e <stopwatchTime+0x4a>
		stopwatch.time.second = 0;
 8002f3e:	4b10      	ldr	r3, [pc, #64]	@ (8002f80 <stopwatchTime+0x7c>)
 8002f40:	2200      	movs	r2, #0
 8002f42:	60da      	str	r2, [r3, #12]
		stopwatch.time.minute++;
 8002f44:	4b0e      	ldr	r3, [pc, #56]	@ (8002f80 <stopwatchTime+0x7c>)
 8002f46:	689b      	ldr	r3, [r3, #8]
 8002f48:	3301      	adds	r3, #1
 8002f4a:	4a0d      	ldr	r2, [pc, #52]	@ (8002f80 <stopwatchTime+0x7c>)
 8002f4c:	6093      	str	r3, [r2, #8]
	}
	if(stopwatch.time.minute == 60) {
 8002f4e:	4b0c      	ldr	r3, [pc, #48]	@ (8002f80 <stopwatchTime+0x7c>)
 8002f50:	689b      	ldr	r3, [r3, #8]
 8002f52:	2b3c      	cmp	r3, #60	@ 0x3c
 8002f54:	d107      	bne.n	8002f66 <stopwatchTime+0x62>
		stopwatch.time.minute = 0;
 8002f56:	4b0a      	ldr	r3, [pc, #40]	@ (8002f80 <stopwatchTime+0x7c>)
 8002f58:	2200      	movs	r2, #0
 8002f5a:	609a      	str	r2, [r3, #8]
		stopwatch.time.hour++;
 8002f5c:	4b08      	ldr	r3, [pc, #32]	@ (8002f80 <stopwatchTime+0x7c>)
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	3301      	adds	r3, #1
 8002f62:	4a07      	ldr	r2, [pc, #28]	@ (8002f80 <stopwatchTime+0x7c>)
 8002f64:	6053      	str	r3, [r2, #4]
	}
	if(stopwatch.time.hour == 24) {
 8002f66:	4b06      	ldr	r3, [pc, #24]	@ (8002f80 <stopwatchTime+0x7c>)
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	2b18      	cmp	r3, #24
 8002f6c:	d102      	bne.n	8002f74 <stopwatchTime+0x70>
		stopwatch.time.hour = 0;
 8002f6e:	4b04      	ldr	r3, [pc, #16]	@ (8002f80 <stopwatchTime+0x7c>)
 8002f70:	2200      	movs	r2, #0
 8002f72:	605a      	str	r2, [r3, #4]
	}
}
 8002f74:	bf00      	nop
 8002f76:	46bd      	mov	sp, r7
 8002f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7c:	4770      	bx	lr
 8002f7e:	bf00      	nop
 8002f80:	20000078 	.word	0x20000078
 8002f84:	10624dd3 	.word	0x10624dd3

08002f88 <laptimeSave>:

void laptimeSave() {
 8002f88:	b5b0      	push	{r4, r5, r7, lr}
 8002f8a:	b084      	sub	sp, #16
 8002f8c:	af04      	add	r7, sp, #16
	// 랩타임 저장 함수
	if(stopwatch.laptime.cnt < 9) {
 8002f8e:	4b41      	ldr	r3, [pc, #260]	@ (8003094 <laptimeSave+0x10c>)
 8002f90:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8002f94:	2b08      	cmp	r3, #8
 8002f96:	d86a      	bhi.n	800306e <laptimeSave+0xe6>
		stopwatch.laptime.saveSpace[stopwatch.laptime.cnt].hour  = stopwatch.time.hour;
 8002f98:	4b3e      	ldr	r3, [pc, #248]	@ (8003094 <laptimeSave+0x10c>)
 8002f9a:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	4b3c      	ldr	r3, [pc, #240]	@ (8003094 <laptimeSave+0x10c>)
 8002fa2:	685a      	ldr	r2, [r3, #4]
 8002fa4:	493b      	ldr	r1, [pc, #236]	@ (8003094 <laptimeSave+0x10c>)
 8002fa6:	1c43      	adds	r3, r0, #1
 8002fa8:	011b      	lsls	r3, r3, #4
 8002faa:	440b      	add	r3, r1
 8002fac:	3304      	adds	r3, #4
 8002fae:	601a      	str	r2, [r3, #0]
		stopwatch.laptime.saveSpace[stopwatch.laptime.cnt].minute = stopwatch.time.minute;
 8002fb0:	4b38      	ldr	r3, [pc, #224]	@ (8003094 <laptimeSave+0x10c>)
 8002fb2:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	4b36      	ldr	r3, [pc, #216]	@ (8003094 <laptimeSave+0x10c>)
 8002fba:	689a      	ldr	r2, [r3, #8]
 8002fbc:	4935      	ldr	r1, [pc, #212]	@ (8003094 <laptimeSave+0x10c>)
 8002fbe:	1c43      	adds	r3, r0, #1
 8002fc0:	011b      	lsls	r3, r3, #4
 8002fc2:	440b      	add	r3, r1
 8002fc4:	3308      	adds	r3, #8
 8002fc6:	601a      	str	r2, [r3, #0]
		stopwatch.laptime.saveSpace[stopwatch.laptime.cnt].second = stopwatch.time.second;
 8002fc8:	4b32      	ldr	r3, [pc, #200]	@ (8003094 <laptimeSave+0x10c>)
 8002fca:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8002fce:	4618      	mov	r0, r3
 8002fd0:	4b30      	ldr	r3, [pc, #192]	@ (8003094 <laptimeSave+0x10c>)
 8002fd2:	68da      	ldr	r2, [r3, #12]
 8002fd4:	492f      	ldr	r1, [pc, #188]	@ (8003094 <laptimeSave+0x10c>)
 8002fd6:	0103      	lsls	r3, r0, #4
 8002fd8:	440b      	add	r3, r1
 8002fda:	331c      	adds	r3, #28
 8002fdc:	601a      	str	r2, [r3, #0]
		stopwatch.laptime.saveSpace[stopwatch.laptime.cnt].millisecond = stopwatch.time.millisecond;
 8002fde:	4b2d      	ldr	r3, [pc, #180]	@ (8003094 <laptimeSave+0x10c>)
 8002fe0:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	4b2b      	ldr	r3, [pc, #172]	@ (8003094 <laptimeSave+0x10c>)
 8002fe8:	691a      	ldr	r2, [r3, #16]
 8002fea:	492a      	ldr	r1, [pc, #168]	@ (8003094 <laptimeSave+0x10c>)
 8002fec:	0103      	lsls	r3, r0, #4
 8002fee:	440b      	add	r3, r1
 8002ff0:	3320      	adds	r3, #32
 8002ff2:	601a      	str	r2, [r3, #0]

		sprintf(stopwatch.laptime.buffer, "LP%d %02d:%02d:%02d.%03d", // 랩타임 저장
				(stopwatch.laptime.cnt + 1),
 8002ff4:	4b27      	ldr	r3, [pc, #156]	@ (8003094 <laptimeSave+0x10c>)
 8002ff6:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
		sprintf(stopwatch.laptime.buffer, "LP%d %02d:%02d:%02d.%03d", // 랩타임 저장
 8002ffa:	1c58      	adds	r0, r3, #1
				stopwatch.laptime.saveSpace[stopwatch.laptime.cnt].hour,
 8002ffc:	4b25      	ldr	r3, [pc, #148]	@ (8003094 <laptimeSave+0x10c>)
 8002ffe:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
		sprintf(stopwatch.laptime.buffer, "LP%d %02d:%02d:%02d.%03d", // 랩타임 저장
 8003002:	4a24      	ldr	r2, [pc, #144]	@ (8003094 <laptimeSave+0x10c>)
 8003004:	3301      	adds	r3, #1
 8003006:	011b      	lsls	r3, r3, #4
 8003008:	4413      	add	r3, r2
 800300a:	3304      	adds	r3, #4
 800300c:	681c      	ldr	r4, [r3, #0]
				stopwatch.laptime.saveSpace[stopwatch.laptime.cnt].minute,
 800300e:	4b21      	ldr	r3, [pc, #132]	@ (8003094 <laptimeSave+0x10c>)
 8003010:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
		sprintf(stopwatch.laptime.buffer, "LP%d %02d:%02d:%02d.%03d", // 랩타임 저장
 8003014:	4a1f      	ldr	r2, [pc, #124]	@ (8003094 <laptimeSave+0x10c>)
 8003016:	3301      	adds	r3, #1
 8003018:	011b      	lsls	r3, r3, #4
 800301a:	4413      	add	r3, r2
 800301c:	3308      	adds	r3, #8
 800301e:	681b      	ldr	r3, [r3, #0]
				stopwatch.laptime.saveSpace[stopwatch.laptime.cnt].second,
 8003020:	4a1c      	ldr	r2, [pc, #112]	@ (8003094 <laptimeSave+0x10c>)
 8003022:	f892 20a5 	ldrb.w	r2, [r2, #165]	@ 0xa5
		sprintf(stopwatch.laptime.buffer, "LP%d %02d:%02d:%02d.%03d", // 랩타임 저장
 8003026:	491b      	ldr	r1, [pc, #108]	@ (8003094 <laptimeSave+0x10c>)
 8003028:	0112      	lsls	r2, r2, #4
 800302a:	440a      	add	r2, r1
 800302c:	321c      	adds	r2, #28
 800302e:	6812      	ldr	r2, [r2, #0]
				stopwatch.laptime.saveSpace[stopwatch.laptime.cnt].millisecond);
 8003030:	4918      	ldr	r1, [pc, #96]	@ (8003094 <laptimeSave+0x10c>)
 8003032:	f891 10a5 	ldrb.w	r1, [r1, #165]	@ 0xa5
		sprintf(stopwatch.laptime.buffer, "LP%d %02d:%02d:%02d.%03d", // 랩타임 저장
 8003036:	4d17      	ldr	r5, [pc, #92]	@ (8003094 <laptimeSave+0x10c>)
 8003038:	0109      	lsls	r1, r1, #4
 800303a:	4429      	add	r1, r5
 800303c:	3120      	adds	r1, #32
 800303e:	6809      	ldr	r1, [r1, #0]
 8003040:	9102      	str	r1, [sp, #8]
 8003042:	9201      	str	r2, [sp, #4]
 8003044:	9300      	str	r3, [sp, #0]
 8003046:	4623      	mov	r3, r4
 8003048:	4602      	mov	r2, r0
 800304a:	4913      	ldr	r1, [pc, #76]	@ (8003098 <laptimeSave+0x110>)
 800304c:	4813      	ldr	r0, [pc, #76]	@ (800309c <laptimeSave+0x114>)
 800304e:	f004 f837 	bl	80070c0 <siprintf>
		CLCD_Puts(0, 1, stopwatch.laptime.buffer); // 랩타임 출력
 8003052:	4a12      	ldr	r2, [pc, #72]	@ (800309c <laptimeSave+0x114>)
 8003054:	2101      	movs	r1, #1
 8003056:	2000      	movs	r0, #0
 8003058:	f7fe f94e 	bl	80012f8 <CLCD_Puts>
		stopwatch.laptime.cnt++; // 카운트 증가
 800305c:	4b0d      	ldr	r3, [pc, #52]	@ (8003094 <laptimeSave+0x10c>)
 800305e:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8003062:	3301      	adds	r3, #1
 8003064:	b2da      	uxtb	r2, r3
 8003066:	4b0b      	ldr	r3, [pc, #44]	@ (8003094 <laptimeSave+0x10c>)
 8003068:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
	} else if(stopwatch.laptime.cnt >= 9) {

		CLCD_Puts(0, 1, "                ");
		CLCD_Puts(0, 1, "LAP FULL(9/9)");
	}
}
 800306c:	e00e      	b.n	800308c <laptimeSave+0x104>
	} else if(stopwatch.laptime.cnt >= 9) {
 800306e:	4b09      	ldr	r3, [pc, #36]	@ (8003094 <laptimeSave+0x10c>)
 8003070:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8003074:	2b08      	cmp	r3, #8
 8003076:	d909      	bls.n	800308c <laptimeSave+0x104>
		CLCD_Puts(0, 1, "                ");
 8003078:	4a09      	ldr	r2, [pc, #36]	@ (80030a0 <laptimeSave+0x118>)
 800307a:	2101      	movs	r1, #1
 800307c:	2000      	movs	r0, #0
 800307e:	f7fe f93b 	bl	80012f8 <CLCD_Puts>
		CLCD_Puts(0, 1, "LAP FULL(9/9)");
 8003082:	4a08      	ldr	r2, [pc, #32]	@ (80030a4 <laptimeSave+0x11c>)
 8003084:	2101      	movs	r1, #1
 8003086:	2000      	movs	r0, #0
 8003088:	f7fe f936 	bl	80012f8 <CLCD_Puts>
}
 800308c:	bf00      	nop
 800308e:	46bd      	mov	sp, r7
 8003090:	bdb0      	pop	{r4, r5, r7, pc}
 8003092:	bf00      	nop
 8003094:	20000078 	.word	0x20000078
 8003098:	08007bd4 	.word	0x08007bd4
 800309c:	2000011f 	.word	0x2000011f
 80030a0:	08007bf0 	.word	0x08007bf0
 80030a4:	08007c04 	.word	0x08007c04

080030a8 <laptimeDisplay>:

void laptimeDisplay() {
 80030a8:	b5b0      	push	{r4, r5, r7, lr}
 80030aa:	b084      	sub	sp, #16
 80030ac:	af04      	add	r7, sp, #16
	// CLCD 랩타임 출력 함수
	if(stopwatch.laptime.cnt > 0) {
 80030ae:	4b2d      	ldr	r3, [pc, #180]	@ (8003164 <laptimeDisplay+0xbc>)
 80030b0:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d048      	beq.n	800314a <laptimeDisplay+0xa2>

		if(stopwatch.laptime.cnt <= stopwatch.laptime.displayCnt) {
 80030b8:	4b2a      	ldr	r3, [pc, #168]	@ (8003164 <laptimeDisplay+0xbc>)
 80030ba:	f893 20a5 	ldrb.w	r2, [r3, #165]	@ 0xa5
 80030be:	4b29      	ldr	r3, [pc, #164]	@ (8003164 <laptimeDisplay+0xbc>)
 80030c0:	f893 30a6 	ldrb.w	r3, [r3, #166]	@ 0xa6
 80030c4:	429a      	cmp	r2, r3
 80030c6:	d803      	bhi.n	80030d0 <laptimeDisplay+0x28>
			stopwatch.laptime.displayCnt = 0;
 80030c8:	4b26      	ldr	r3, [pc, #152]	@ (8003164 <laptimeDisplay+0xbc>)
 80030ca:	2200      	movs	r2, #0
 80030cc:	f883 20a6 	strb.w	r2, [r3, #166]	@ 0xa6
		}

		sprintf(stopwatch.laptime.buffer, "%d/9 %02d:%02d:%02d.%03d",
				(stopwatch.laptime.displayCnt + 1),
 80030d0:	4b24      	ldr	r3, [pc, #144]	@ (8003164 <laptimeDisplay+0xbc>)
 80030d2:	f893 30a6 	ldrb.w	r3, [r3, #166]	@ 0xa6
		sprintf(stopwatch.laptime.buffer, "%d/9 %02d:%02d:%02d.%03d",
 80030d6:	1c58      	adds	r0, r3, #1
				stopwatch.laptime.saveSpace[stopwatch.laptime.displayCnt].hour,
 80030d8:	4b22      	ldr	r3, [pc, #136]	@ (8003164 <laptimeDisplay+0xbc>)
 80030da:	f893 30a6 	ldrb.w	r3, [r3, #166]	@ 0xa6
		sprintf(stopwatch.laptime.buffer, "%d/9 %02d:%02d:%02d.%03d",
 80030de:	4a21      	ldr	r2, [pc, #132]	@ (8003164 <laptimeDisplay+0xbc>)
 80030e0:	3301      	adds	r3, #1
 80030e2:	011b      	lsls	r3, r3, #4
 80030e4:	4413      	add	r3, r2
 80030e6:	3304      	adds	r3, #4
 80030e8:	681c      	ldr	r4, [r3, #0]
				stopwatch.laptime.saveSpace[stopwatch.laptime.displayCnt].minute,
 80030ea:	4b1e      	ldr	r3, [pc, #120]	@ (8003164 <laptimeDisplay+0xbc>)
 80030ec:	f893 30a6 	ldrb.w	r3, [r3, #166]	@ 0xa6
		sprintf(stopwatch.laptime.buffer, "%d/9 %02d:%02d:%02d.%03d",
 80030f0:	4a1c      	ldr	r2, [pc, #112]	@ (8003164 <laptimeDisplay+0xbc>)
 80030f2:	3301      	adds	r3, #1
 80030f4:	011b      	lsls	r3, r3, #4
 80030f6:	4413      	add	r3, r2
 80030f8:	3308      	adds	r3, #8
 80030fa:	681b      	ldr	r3, [r3, #0]
				stopwatch.laptime.saveSpace[stopwatch.laptime.displayCnt].second,
 80030fc:	4a19      	ldr	r2, [pc, #100]	@ (8003164 <laptimeDisplay+0xbc>)
 80030fe:	f892 20a6 	ldrb.w	r2, [r2, #166]	@ 0xa6
		sprintf(stopwatch.laptime.buffer, "%d/9 %02d:%02d:%02d.%03d",
 8003102:	4918      	ldr	r1, [pc, #96]	@ (8003164 <laptimeDisplay+0xbc>)
 8003104:	0112      	lsls	r2, r2, #4
 8003106:	440a      	add	r2, r1
 8003108:	321c      	adds	r2, #28
 800310a:	6812      	ldr	r2, [r2, #0]
				stopwatch.laptime.saveSpace[stopwatch.laptime.displayCnt].millisecond);
 800310c:	4915      	ldr	r1, [pc, #84]	@ (8003164 <laptimeDisplay+0xbc>)
 800310e:	f891 10a6 	ldrb.w	r1, [r1, #166]	@ 0xa6
		sprintf(stopwatch.laptime.buffer, "%d/9 %02d:%02d:%02d.%03d",
 8003112:	4d14      	ldr	r5, [pc, #80]	@ (8003164 <laptimeDisplay+0xbc>)
 8003114:	0109      	lsls	r1, r1, #4
 8003116:	4429      	add	r1, r5
 8003118:	3120      	adds	r1, #32
 800311a:	6809      	ldr	r1, [r1, #0]
 800311c:	9102      	str	r1, [sp, #8]
 800311e:	9201      	str	r2, [sp, #4]
 8003120:	9300      	str	r3, [sp, #0]
 8003122:	4623      	mov	r3, r4
 8003124:	4602      	mov	r2, r0
 8003126:	4910      	ldr	r1, [pc, #64]	@ (8003168 <laptimeDisplay+0xc0>)
 8003128:	4810      	ldr	r0, [pc, #64]	@ (800316c <laptimeDisplay+0xc4>)
 800312a:	f003 ffc9 	bl	80070c0 <siprintf>

		CLCD_Puts(0, 1,stopwatch.laptime.buffer);
 800312e:	4a0f      	ldr	r2, [pc, #60]	@ (800316c <laptimeDisplay+0xc4>)
 8003130:	2101      	movs	r1, #1
 8003132:	2000      	movs	r0, #0
 8003134:	f7fe f8e0 	bl	80012f8 <CLCD_Puts>

		stopwatch.laptime.displayCnt++;
 8003138:	4b0a      	ldr	r3, [pc, #40]	@ (8003164 <laptimeDisplay+0xbc>)
 800313a:	f893 30a6 	ldrb.w	r3, [r3, #166]	@ 0xa6
 800313e:	3301      	adds	r3, #1
 8003140:	b2da      	uxtb	r2, r3
 8003142:	4b08      	ldr	r3, [pc, #32]	@ (8003164 <laptimeDisplay+0xbc>)
 8003144:	f883 20a6 	strb.w	r2, [r3, #166]	@ 0xa6
	} else {
		CLCD_Puts(0, 1, "                ");
		CLCD_Puts(0, 1, "NO LAP");
	}

}
 8003148:	e009      	b.n	800315e <laptimeDisplay+0xb6>
		CLCD_Puts(0, 1, "                ");
 800314a:	4a09      	ldr	r2, [pc, #36]	@ (8003170 <laptimeDisplay+0xc8>)
 800314c:	2101      	movs	r1, #1
 800314e:	2000      	movs	r0, #0
 8003150:	f7fe f8d2 	bl	80012f8 <CLCD_Puts>
		CLCD_Puts(0, 1, "NO LAP");
 8003154:	4a07      	ldr	r2, [pc, #28]	@ (8003174 <laptimeDisplay+0xcc>)
 8003156:	2101      	movs	r1, #1
 8003158:	2000      	movs	r0, #0
 800315a:	f7fe f8cd 	bl	80012f8 <CLCD_Puts>
}
 800315e:	bf00      	nop
 8003160:	46bd      	mov	sp, r7
 8003162:	bdb0      	pop	{r4, r5, r7, pc}
 8003164:	20000078 	.word	0x20000078
 8003168:	08007c14 	.word	0x08007c14
 800316c:	2000011f 	.word	0x2000011f
 8003170:	08007bf0 	.word	0x08007bf0
 8003174:	08007c30 	.word	0x08007c30

08003178 <clcdStopWatchClear>:

void clcdStopWatchClear() {
 8003178:	b580      	push	{r7, lr}
 800317a:	b082      	sub	sp, #8
 800317c:	af00      	add	r7, sp, #0
	// CLCD 스탑워치 초기화 함수
	for(int i = 0; i < 9; i++) {
 800317e:	2300      	movs	r3, #0
 8003180:	607b      	str	r3, [r7, #4]
 8003182:	e020      	b.n	80031c6 <clcdStopWatchClear+0x4e>
		// 랩타임 초기화
		stopwatch.laptime.saveSpace[i].hour = 0;
 8003184:	4a1b      	ldr	r2, [pc, #108]	@ (80031f4 <clcdStopWatchClear+0x7c>)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	3301      	adds	r3, #1
 800318a:	011b      	lsls	r3, r3, #4
 800318c:	4413      	add	r3, r2
 800318e:	3304      	adds	r3, #4
 8003190:	2200      	movs	r2, #0
 8003192:	601a      	str	r2, [r3, #0]
		stopwatch.laptime.saveSpace[i].minute = 0;
 8003194:	4a17      	ldr	r2, [pc, #92]	@ (80031f4 <clcdStopWatchClear+0x7c>)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	3301      	adds	r3, #1
 800319a:	011b      	lsls	r3, r3, #4
 800319c:	4413      	add	r3, r2
 800319e:	3308      	adds	r3, #8
 80031a0:	2200      	movs	r2, #0
 80031a2:	601a      	str	r2, [r3, #0]
		stopwatch.laptime.saveSpace[i].second = 0;
 80031a4:	4a13      	ldr	r2, [pc, #76]	@ (80031f4 <clcdStopWatchClear+0x7c>)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	011b      	lsls	r3, r3, #4
 80031aa:	4413      	add	r3, r2
 80031ac:	331c      	adds	r3, #28
 80031ae:	2200      	movs	r2, #0
 80031b0:	601a      	str	r2, [r3, #0]
		stopwatch.laptime.saveSpace[i].millisecond = 0;
 80031b2:	4a10      	ldr	r2, [pc, #64]	@ (80031f4 <clcdStopWatchClear+0x7c>)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	011b      	lsls	r3, r3, #4
 80031b8:	4413      	add	r3, r2
 80031ba:	3320      	adds	r3, #32
 80031bc:	2200      	movs	r2, #0
 80031be:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < 9; i++) {
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	3301      	adds	r3, #1
 80031c4:	607b      	str	r3, [r7, #4]
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2b08      	cmp	r3, #8
 80031ca:	dddb      	ble.n	8003184 <clcdStopWatchClear+0xc>
	}
	stopwatch.laptime.cnt = 0;
 80031cc:	4b09      	ldr	r3, [pc, #36]	@ (80031f4 <clcdStopWatchClear+0x7c>)
 80031ce:	2200      	movs	r2, #0
 80031d0:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
	stopwatch.laptime.displayCnt = 0;
 80031d4:	4b07      	ldr	r3, [pc, #28]	@ (80031f4 <clcdStopWatchClear+0x7c>)
 80031d6:	2200      	movs	r2, #0
 80031d8:	f883 20a6 	strb.w	r2, [r3, #166]	@ 0xa6
	CLCD_Clear();
 80031dc:	f7fe f8d3 	bl	8001386 <CLCD_Clear>
	CLCD_Puts(0, 0, CLCD_DEFAULT);
 80031e0:	4a05      	ldr	r2, [pc, #20]	@ (80031f8 <clcdStopWatchClear+0x80>)
 80031e2:	2100      	movs	r1, #0
 80031e4:	2000      	movs	r0, #0
 80031e6:	f7fe f887 	bl	80012f8 <CLCD_Puts>
}
 80031ea:	bf00      	nop
 80031ec:	3708      	adds	r7, #8
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bd80      	pop	{r7, pc}
 80031f2:	bf00      	nop
 80031f4:	20000078 	.word	0x20000078
 80031f8:	08007c38 	.word	0x08007c38

080031fc <clcdStopWatchMeasure>:

void clcdStopWatchMeasure() {
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b082      	sub	sp, #8
 8003200:	af02      	add	r7, sp, #8
	// CLCD 스탑워치 출력함수
	if(stopwatch.laptime.decimalPoint == TRUE) {
 8003202:	4b17      	ldr	r3, [pc, #92]	@ (8003260 <clcdStopWatchMeasure+0x64>)
 8003204:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 8003208:	2b01      	cmp	r3, #1
 800320a:	d110      	bne.n	800322e <clcdStopWatchMeasure+0x32>
		sprintf(stopwatch.laptime.buffer, "STW %02d:%02d:%02d.%03d",
 800320c:	4b14      	ldr	r3, [pc, #80]	@ (8003260 <clcdStopWatchMeasure+0x64>)
 800320e:	6859      	ldr	r1, [r3, #4]
 8003210:	4b13      	ldr	r3, [pc, #76]	@ (8003260 <clcdStopWatchMeasure+0x64>)
 8003212:	6898      	ldr	r0, [r3, #8]
 8003214:	4b12      	ldr	r3, [pc, #72]	@ (8003260 <clcdStopWatchMeasure+0x64>)
 8003216:	68db      	ldr	r3, [r3, #12]
 8003218:	4a11      	ldr	r2, [pc, #68]	@ (8003260 <clcdStopWatchMeasure+0x64>)
 800321a:	6912      	ldr	r2, [r2, #16]
 800321c:	9201      	str	r2, [sp, #4]
 800321e:	9300      	str	r3, [sp, #0]
 8003220:	4603      	mov	r3, r0
 8003222:	460a      	mov	r2, r1
 8003224:	490f      	ldr	r1, [pc, #60]	@ (8003264 <clcdStopWatchMeasure+0x68>)
 8003226:	4810      	ldr	r0, [pc, #64]	@ (8003268 <clcdStopWatchMeasure+0x6c>)
 8003228:	f003 ff4a 	bl	80070c0 <siprintf>
 800322c:	e00f      	b.n	800324e <clcdStopWatchMeasure+0x52>
					stopwatch.time.hour, stopwatch.time.minute,
					stopwatch.time.second, stopwatch.time.millisecond);
	} else {
		sprintf(stopwatch.laptime.buffer, "STW %02d:%02d:%02d %03d",
 800322e:	4b0c      	ldr	r3, [pc, #48]	@ (8003260 <clcdStopWatchMeasure+0x64>)
 8003230:	6859      	ldr	r1, [r3, #4]
 8003232:	4b0b      	ldr	r3, [pc, #44]	@ (8003260 <clcdStopWatchMeasure+0x64>)
 8003234:	6898      	ldr	r0, [r3, #8]
 8003236:	4b0a      	ldr	r3, [pc, #40]	@ (8003260 <clcdStopWatchMeasure+0x64>)
 8003238:	68db      	ldr	r3, [r3, #12]
 800323a:	4a09      	ldr	r2, [pc, #36]	@ (8003260 <clcdStopWatchMeasure+0x64>)
 800323c:	6912      	ldr	r2, [r2, #16]
 800323e:	9201      	str	r2, [sp, #4]
 8003240:	9300      	str	r3, [sp, #0]
 8003242:	4603      	mov	r3, r0
 8003244:	460a      	mov	r2, r1
 8003246:	4909      	ldr	r1, [pc, #36]	@ (800326c <clcdStopWatchMeasure+0x70>)
 8003248:	4807      	ldr	r0, [pc, #28]	@ (8003268 <clcdStopWatchMeasure+0x6c>)
 800324a:	f003 ff39 	bl	80070c0 <siprintf>
					stopwatch.time.hour, stopwatch.time.minute,
					stopwatch.time.second, stopwatch.time.millisecond);
	}
	CLCD_Puts(0, 0, stopwatch.laptime.buffer);
 800324e:	4a06      	ldr	r2, [pc, #24]	@ (8003268 <clcdStopWatchMeasure+0x6c>)
 8003250:	2100      	movs	r1, #0
 8003252:	2000      	movs	r0, #0
 8003254:	f7fe f850 	bl	80012f8 <CLCD_Puts>
}
 8003258:	bf00      	nop
 800325a:	46bd      	mov	sp, r7
 800325c:	bd80      	pop	{r7, pc}
 800325e:	bf00      	nop
 8003260:	20000078 	.word	0x20000078
 8003264:	08007c4c 	.word	0x08007c4c
 8003268:	2000011f 	.word	0x2000011f
 800326c:	08007c64 	.word	0x08007c64

08003270 <running>:
extern button sw2;
extern button sw3;
extern button sw4;
extern system sys;

void running() {
 8003270:	b580      	push	{r7, lr}
 8003272:	af00      	add	r7, sp, #0
	// 모드 동작
	switch (mode) {
 8003274:	4b14      	ldr	r3, [pc, #80]	@ (80032c8 <running+0x58>)
 8003276:	781b      	ldrb	r3, [r3, #0]
 8003278:	2b04      	cmp	r3, #4
 800327a:	d822      	bhi.n	80032c2 <running+0x52>
 800327c:	a201      	add	r2, pc, #4	@ (adr r2, 8003284 <running+0x14>)
 800327e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003282:	bf00      	nop
 8003284:	08003299 	.word	0x08003299
 8003288:	080032a3 	.word	0x080032a3
 800328c:	080032c1 	.word	0x080032c1
 8003290:	080032ad 	.word	0x080032ad
 8003294:	080032b7 	.word	0x080032b7
	case CLOCK:
		clcdDisplayClock();
 8003298:	f7fe fbfe 	bl	8001a98 <clcdDisplayClock>
		tickClock();
 800329c:	f7fe fcde 	bl	8001c5c <tickClock>
		break;
 80032a0:	e00f      	b.n	80032c2 <running+0x52>
	case ALARM:
		clcdDisplayAlarm();
 80032a2:	f7fe f87b 	bl	800139c <clcdDisplayAlarm>
		tickClock();
 80032a6:	f7fe fcd9 	bl	8001c5c <tickClock>
		break;
 80032aa:	e00a      	b.n	80032c2 <running+0x52>

	case STOPWATCH:
		//		CLCD_Clear();
		break;
	case CLOCK_SETTING:
		clcdDisplayClockSetting();
 80032ac:	f7fe fd96 	bl	8001ddc <clcdDisplayClockSetting>
		tickClock();
 80032b0:	f7fe fcd4 	bl	8001c5c <tickClock>
		break;
 80032b4:	e005      	b.n	80032c2 <running+0x52>
	case ALARM_TRIGGER:
		clcdDisplayAlarmTrigger();
 80032b6:	f7fe f8ef 	bl	8001498 <clcdDisplayAlarmTrigger>
		tickClock();
 80032ba:	f7fe fccf 	bl	8001c5c <tickClock>
		break;
 80032be:	e000      	b.n	80032c2 <running+0x52>
		break;
 80032c0:	bf00      	nop
	}


}
 80032c2:	bf00      	nop
 80032c4:	bd80      	pop	{r7, pc}
 80032c6:	bf00      	nop
 80032c8:	20000315 	.word	0x20000315

080032cc <sw1Controll>:

void sw1Controll() {
 80032cc:	b580      	push	{r7, lr}
 80032ce:	af00      	add	r7, sp, #0
	// SW1 PE3
	// 모드 변경 기능
	if(mode != ALARM_TRIGGER) {
 80032d0:	4b29      	ldr	r3, [pc, #164]	@ (8003378 <sw1Controll+0xac>)
 80032d2:	781b      	ldrb	r3, [r3, #0]
 80032d4:	2b04      	cmp	r3, #4
 80032d6:	d036      	beq.n	8003346 <sw1Controll+0x7a>
		if (sw1.state == TRUE) {
 80032d8:	4b28      	ldr	r3, [pc, #160]	@ (800337c <sw1Controll+0xb0>)
 80032da:	781b      	ldrb	r3, [r3, #0]
 80032dc:	2b01      	cmp	r3, #1
 80032de:	d114      	bne.n	800330a <sw1Controll+0x3e>
			if (sw1.flag == FALSE) {
 80032e0:	4b26      	ldr	r3, [pc, #152]	@ (800337c <sw1Controll+0xb0>)
 80032e2:	785b      	ldrb	r3, [r3, #1]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d10c      	bne.n	8003302 <sw1Controll+0x36>
				HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 80032e8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80032ec:	4824      	ldr	r0, [pc, #144]	@ (8003380 <sw1Controll+0xb4>)
 80032ee:	f001 fa08 	bl	8004702 <HAL_GPIO_TogglePin>
				sw1DefaultHandler();
 80032f2:	f000 fcc9 	bl	8003c88 <sw1DefaultHandler>
				setWaitingTime(0);
 80032f6:	2000      	movs	r0, #0
 80032f8:	f000 fd26 	bl	8003d48 <setWaitingTime>
				sw1.flag = 1;		// 플래그 변수를 1로 만들어서 버튼을 누르고 있을 때 다시 동작하는 경우 방지
 80032fc:	4b1f      	ldr	r3, [pc, #124]	@ (800337c <sw1Controll+0xb0>)
 80032fe:	2201      	movs	r2, #1
 8003300:	705a      	strb	r2, [r3, #1]
			}
			releasePointing(1);
 8003302:	2001      	movs	r0, #1
 8003304:	f000 fc9a 	bl	8003c3c <releasePointing>
				sw1.flag = 0;
			}
		}
	}

}
 8003308:	e034      	b.n	8003374 <sw1Controll+0xa8>
			if (sw1.flag == TRUE) {
 800330a:	4b1c      	ldr	r3, [pc, #112]	@ (800337c <sw1Controll+0xb0>)
 800330c:	785b      	ldrb	r3, [r3, #1]
 800330e:	2b01      	cmp	r3, #1
 8003310:	d130      	bne.n	8003374 <sw1Controll+0xa8>
				if(rsp == SHORT) {
 8003312:	4b1c      	ldr	r3, [pc, #112]	@ (8003384 <sw1Controll+0xb8>)
 8003314:	781b      	ldrb	r3, [r3, #0]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d111      	bne.n	800333e <sw1Controll+0x72>
					if (mode == STOPWATCH) { // 모드변경
 800331a:	4b17      	ldr	r3, [pc, #92]	@ (8003378 <sw1Controll+0xac>)
 800331c:	781b      	ldrb	r3, [r3, #0]
 800331e:	2b02      	cmp	r3, #2
 8003320:	d103      	bne.n	800332a <sw1Controll+0x5e>
						mode = CLOCK;
 8003322:	4b15      	ldr	r3, [pc, #84]	@ (8003378 <sw1Controll+0xac>)
 8003324:	2200      	movs	r2, #0
 8003326:	701a      	strb	r2, [r3, #0]
 8003328:	e005      	b.n	8003336 <sw1Controll+0x6a>
						mode++;
 800332a:	4b13      	ldr	r3, [pc, #76]	@ (8003378 <sw1Controll+0xac>)
 800332c:	781b      	ldrb	r3, [r3, #0]
 800332e:	3301      	adds	r3, #1
 8003330:	b2da      	uxtb	r2, r3
 8003332:	4b11      	ldr	r3, [pc, #68]	@ (8003378 <sw1Controll+0xac>)
 8003334:	701a      	strb	r2, [r3, #0]
					HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_6);
 8003336:	2140      	movs	r1, #64	@ 0x40
 8003338:	4813      	ldr	r0, [pc, #76]	@ (8003388 <sw1Controll+0xbc>)
 800333a:	f001 f9e2 	bl	8004702 <HAL_GPIO_TogglePin>
				sw1.flag = 0;
 800333e:	4b0f      	ldr	r3, [pc, #60]	@ (800337c <sw1Controll+0xb0>)
 8003340:	2200      	movs	r2, #0
 8003342:	705a      	strb	r2, [r3, #1]
}
 8003344:	e016      	b.n	8003374 <sw1Controll+0xa8>
		if(sw1.state == TRUE) {
 8003346:	4b0d      	ldr	r3, [pc, #52]	@ (800337c <sw1Controll+0xb0>)
 8003348:	781b      	ldrb	r3, [r3, #0]
 800334a:	2b01      	cmp	r3, #1
 800334c:	d107      	bne.n	800335e <sw1Controll+0x92>
			if(sw1.flag == FALSE) {
 800334e:	4b0b      	ldr	r3, [pc, #44]	@ (800337c <sw1Controll+0xb0>)
 8003350:	785b      	ldrb	r3, [r3, #1]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d10e      	bne.n	8003374 <sw1Controll+0xa8>
				sw1.flag = 1;
 8003356:	4b09      	ldr	r3, [pc, #36]	@ (800337c <sw1Controll+0xb0>)
 8003358:	2201      	movs	r2, #1
 800335a:	705a      	strb	r2, [r3, #1]
}
 800335c:	e00a      	b.n	8003374 <sw1Controll+0xa8>
			if(sw1.flag == TRUE) {
 800335e:	4b07      	ldr	r3, [pc, #28]	@ (800337c <sw1Controll+0xb0>)
 8003360:	785b      	ldrb	r3, [r3, #1]
 8003362:	2b01      	cmp	r3, #1
 8003364:	d106      	bne.n	8003374 <sw1Controll+0xa8>
				returnToPreviousMode();
 8003366:	f7fe f92f 	bl	80015c8 <returnToPreviousMode>
				buzReset();
 800336a:	f7fe fa6f 	bl	800184c <buzReset>
				sw1.flag = 0;
 800336e:	4b03      	ldr	r3, [pc, #12]	@ (800337c <sw1Controll+0xb0>)
 8003370:	2200      	movs	r2, #0
 8003372:	705a      	strb	r2, [r3, #1]
}
 8003374:	bf00      	nop
 8003376:	bd80      	pop	{r7, pc}
 8003378:	20000315 	.word	0x20000315
 800337c:	20000294 	.word	0x20000294
 8003380:	40020c00 	.word	0x40020c00
 8003384:	20000314 	.word	0x20000314
 8003388:	40020800 	.word	0x40020800

0800338c <sw2Controll>:

void sw2Controll() {
 800338c:	b580      	push	{r7, lr}
 800338e:	af00      	add	r7, sp, #0
	// SW2 PC15
	switch (mode) {
 8003390:	4b7e      	ldr	r3, [pc, #504]	@ (800358c <sw2Controll+0x200>)
 8003392:	781b      	ldrb	r3, [r3, #0]
 8003394:	2b04      	cmp	r3, #4
 8003396:	f200 80f7 	bhi.w	8003588 <sw2Controll+0x1fc>
 800339a:	a201      	add	r2, pc, #4	@ (adr r2, 80033a0 <sw2Controll+0x14>)
 800339c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033a0:	080033b5 	.word	0x080033b5
 80033a4:	08003419 	.word	0x08003419
 80033a8:	08003471 	.word	0x08003471
 80033ac:	080034f9 	.word	0x080034f9
 80033b0:	08003547 	.word	0x08003547
	case CLOCK:		// 시계모드 일때 PC15 기능
		// 부저 on, off
		if(sw2.state == TRUE) {
 80033b4:	4b76      	ldr	r3, [pc, #472]	@ (8003590 <sw2Controll+0x204>)
 80033b6:	781b      	ldrb	r3, [r3, #0]
 80033b8:	2b01      	cmp	r3, #1
 80033ba:	d111      	bne.n	80033e0 <sw2Controll+0x54>
			if (sw2.flag == FALSE) {
 80033bc:	4b74      	ldr	r3, [pc, #464]	@ (8003590 <sw2Controll+0x204>)
 80033be:	785b      	ldrb	r3, [r3, #1]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d109      	bne.n	80033d8 <sw2Controll+0x4c>
				sw2.flag = 1;
 80033c4:	4b72      	ldr	r3, [pc, #456]	@ (8003590 <sw2Controll+0x204>)
 80033c6:	2201      	movs	r2, #1
 80033c8:	705a      	strb	r2, [r3, #1]
				sw2DefaultHandler();
 80033ca:	f000 fc6f 	bl	8003cac <sw2DefaultHandler>
				HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 80033ce:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80033d2:	4870      	ldr	r0, [pc, #448]	@ (8003594 <sw2Controll+0x208>)
 80033d4:	f001 f995 	bl	8004702 <HAL_GPIO_TogglePin>

			}
			releasePointing(2);
 80033d8:	2002      	movs	r0, #2
 80033da:	f000 fc2f 	bl	8003c3c <releasePointing>
				sw2.flag = 0;
			}
		}


		break;
 80033de:	e0ca      	b.n	8003576 <sw2Controll+0x1ea>
			if (sw2.flag == TRUE) {
 80033e0:	4b6b      	ldr	r3, [pc, #428]	@ (8003590 <sw2Controll+0x204>)
 80033e2:	785b      	ldrb	r3, [r3, #1]
 80033e4:	2b01      	cmp	r3, #1
 80033e6:	f040 80c6 	bne.w	8003576 <sw2Controll+0x1ea>
				if (rsp == SHORT) {
 80033ea:	4b6b      	ldr	r3, [pc, #428]	@ (8003598 <sw2Controll+0x20c>)
 80033ec:	781b      	ldrb	r3, [r3, #0]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d10a      	bne.n	8003408 <sw2Controll+0x7c>
					setBuzzEnabled(!getBuzzEnabled()); 	// 부저 활성, 비활성 함수
 80033f2:	f7fe fa69 	bl	80018c8 <getBuzzEnabled>
 80033f6:	4603      	mov	r3, r0
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	bf0c      	ite	eq
 80033fc:	2301      	moveq	r3, #1
 80033fe:	2300      	movne	r3, #0
 8003400:	b2db      	uxtb	r3, r3
 8003402:	4618      	mov	r0, r3
 8003404:	f7fe fa6c 	bl	80018e0 <setBuzzEnabled>
				HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_6);
 8003408:	2140      	movs	r1, #64	@ 0x40
 800340a:	4864      	ldr	r0, [pc, #400]	@ (800359c <sw2Controll+0x210>)
 800340c:	f001 f979 	bl	8004702 <HAL_GPIO_TogglePin>
				sw2.flag = 0;
 8003410:	4b5f      	ldr	r3, [pc, #380]	@ (8003590 <sw2Controll+0x204>)
 8003412:	2200      	movs	r2, #0
 8003414:	705a      	strb	r2, [r3, #1]
		break;
 8003416:	e0ae      	b.n	8003576 <sw2Controll+0x1ea>
	case ALARM:	// 알람 모드일 때 PC15 기능
		if (sw2.state == TRUE) {
 8003418:	4b5d      	ldr	r3, [pc, #372]	@ (8003590 <sw2Controll+0x204>)
 800341a:	781b      	ldrb	r3, [r3, #0]
 800341c:	2b01      	cmp	r3, #1
 800341e:	d114      	bne.n	800344a <sw2Controll+0xbe>
			if (sw2.flag == FALSE) {
 8003420:	4b5b      	ldr	r3, [pc, #364]	@ (8003590 <sw2Controll+0x204>)
 8003422:	785b      	ldrb	r3, [r3, #1]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d10c      	bne.n	8003442 <sw2Controll+0xb6>
				sw2.flag = 1;
 8003428:	4b59      	ldr	r3, [pc, #356]	@ (8003590 <sw2Controll+0x204>)
 800342a:	2201      	movs	r2, #1
 800342c:	705a      	strb	r2, [r3, #1]
				sw2DefaultHandler();
 800342e:	f000 fc3d 	bl	8003cac <sw2DefaultHandler>
				setWaitingTime(0);
 8003432:	2000      	movs	r0, #0
 8003434:	f000 fc88 	bl	8003d48 <setWaitingTime>
				HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 8003438:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800343c:	4855      	ldr	r0, [pc, #340]	@ (8003594 <sw2Controll+0x208>)
 800343e:	f001 f960 	bl	8004702 <HAL_GPIO_TogglePin>
			}
			releasePointing(2);
 8003442:	2002      	movs	r0, #2
 8003444:	f000 fbfa 	bl	8003c3c <releasePointing>
				sw2.flag = 0;
				HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_6);
			}
		}

		break;
 8003448:	e097      	b.n	800357a <sw2Controll+0x1ee>
			if(sw2.flag == TRUE) {
 800344a:	4b51      	ldr	r3, [pc, #324]	@ (8003590 <sw2Controll+0x204>)
 800344c:	785b      	ldrb	r3, [r3, #1]
 800344e:	2b01      	cmp	r3, #1
 8003450:	f040 8093 	bne.w	800357a <sw2Controll+0x1ee>
				if (rsp == SHORT) {
 8003454:	4b50      	ldr	r3, [pc, #320]	@ (8003598 <sw2Controll+0x20c>)
 8003456:	781b      	ldrb	r3, [r3, #0]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d101      	bne.n	8003460 <sw2Controll+0xd4>
					selectAlarm();
 800345c:	f7fe f842 	bl	80014e4 <selectAlarm>
				sw2.flag = 0;
 8003460:	4b4b      	ldr	r3, [pc, #300]	@ (8003590 <sw2Controll+0x204>)
 8003462:	2200      	movs	r2, #0
 8003464:	705a      	strb	r2, [r3, #1]
				HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_6);
 8003466:	2140      	movs	r1, #64	@ 0x40
 8003468:	484c      	ldr	r0, [pc, #304]	@ (800359c <sw2Controll+0x210>)
 800346a:	f001 f94a 	bl	8004702 <HAL_GPIO_TogglePin>
		break;
 800346e:	e084      	b.n	800357a <sw2Controll+0x1ee>
	case STOPWATCH: // 스탑워치 모드일 때 PC15 기능
		// 스탑워치 시작, 일시정지, 재개 함수
		if(sw2.state == TRUE) {
 8003470:	4b47      	ldr	r3, [pc, #284]	@ (8003590 <sw2Controll+0x204>)
 8003472:	781b      	ldrb	r3, [r3, #0]
 8003474:	2b01      	cmp	r3, #1
 8003476:	d10c      	bne.n	8003492 <sw2Controll+0x106>
			if (sw2.flag == FALSE) {
 8003478:	4b45      	ldr	r3, [pc, #276]	@ (8003590 <sw2Controll+0x204>)
 800347a:	785b      	ldrb	r3, [r3, #1]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d10f      	bne.n	80034a0 <sw2Controll+0x114>
				sw2.flag = 1;
 8003480:	4b43      	ldr	r3, [pc, #268]	@ (8003590 <sw2Controll+0x204>)
 8003482:	2201      	movs	r2, #1
 8003484:	705a      	strb	r2, [r3, #1]
				HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 8003486:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800348a:	4842      	ldr	r0, [pc, #264]	@ (8003594 <sw2Controll+0x208>)
 800348c:	f001 f939 	bl	8004702 <HAL_GPIO_TogglePin>
 8003490:	e006      	b.n	80034a0 <sw2Controll+0x114>
			}

		} else {
			if (sw2.flag == TRUE) {
 8003492:	4b3f      	ldr	r3, [pc, #252]	@ (8003590 <sw2Controll+0x204>)
 8003494:	785b      	ldrb	r3, [r3, #1]
 8003496:	2b01      	cmp	r3, #1
 8003498:	d102      	bne.n	80034a0 <sw2Controll+0x114>
				sw2.flag = 0;
 800349a:	4b3d      	ldr	r3, [pc, #244]	@ (8003590 <sw2Controll+0x204>)
 800349c:	2200      	movs	r2, #0
 800349e:	705a      	strb	r2, [r3, #1]
			}
		}
		if(stopwatch.onOffState == TRUE) {
 80034a0:	4b3f      	ldr	r3, [pc, #252]	@ (80035a0 <sw2Controll+0x214>)
 80034a2:	781b      	ldrb	r3, [r3, #0]
 80034a4:	2b01      	cmp	r3, #1
 80034a6:	d119      	bne.n	80034dc <sw2Controll+0x150>

			switch (stopwatch.state) {
 80034a8:	4b3d      	ldr	r3, [pc, #244]	@ (80035a0 <sw2Controll+0x214>)
 80034aa:	785b      	ldrb	r3, [r3, #1]
 80034ac:	2b02      	cmp	r3, #2
 80034ae:	d006      	beq.n	80034be <sw2Controll+0x132>
 80034b0:	2b02      	cmp	r3, #2
 80034b2:	dc0b      	bgt.n	80034cc <sw2Controll+0x140>
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d008      	beq.n	80034ca <sw2Controll+0x13e>
 80034b8:	2b01      	cmp	r3, #1
 80034ba:	d003      	beq.n	80034c4 <sw2Controll+0x138>
 80034bc:	e006      	b.n	80034cc <sw2Controll+0x140>
			case STOP:
				timerReset(); // 시작 전 타이머 0으로 리셋
 80034be:	f7ff fcd3 	bl	8002e68 <timerReset>
				break;
 80034c2:	e003      	b.n	80034cc <sw2Controll+0x140>
			case PAUSE:
				timerResum(); // 일시정지 전 흘렀던 시간 가져오기
 80034c4:	f7ff fd02 	bl	8002ecc <timerResum>
				break;
 80034c8:	e000      	b.n	80034cc <sw2Controll+0x140>
			case RUN:
				break;
 80034ca:	bf00      	nop
			}
			// 스탑워치 동작상태 RUN 으로 변경 후 실행
			stopwatch.state = RUN;
 80034cc:	4b34      	ldr	r3, [pc, #208]	@ (80035a0 <sw2Controll+0x214>)
 80034ce:	2200      	movs	r2, #0
 80034d0:	705a      	strb	r2, [r3, #1]
			segUpCount();
 80034d2:	f7ff fc81 	bl	8002dd8 <segUpCount>
			clcdStopWatchMeasure();
 80034d6:	f7ff fe91 	bl	80031fc <clcdStopWatchMeasure>
			// 스탑워치 동작상태 PAUSE 로 변경 후 흘렀던 시간 저장
			stopwatch.state = PAUSE;
			timerPaused();
		}

		break;
 80034da:	e050      	b.n	800357e <sw2Controll+0x1f2>
		} else if(stopwatch.onOffState == FALSE && stopwatch.state == RUN) {
 80034dc:	4b30      	ldr	r3, [pc, #192]	@ (80035a0 <sw2Controll+0x214>)
 80034de:	781b      	ldrb	r3, [r3, #0]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d14c      	bne.n	800357e <sw2Controll+0x1f2>
 80034e4:	4b2e      	ldr	r3, [pc, #184]	@ (80035a0 <sw2Controll+0x214>)
 80034e6:	785b      	ldrb	r3, [r3, #1]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d148      	bne.n	800357e <sw2Controll+0x1f2>
			stopwatch.state = PAUSE;
 80034ec:	4b2c      	ldr	r3, [pc, #176]	@ (80035a0 <sw2Controll+0x214>)
 80034ee:	2201      	movs	r2, #1
 80034f0:	705a      	strb	r2, [r3, #1]
			timerPaused();
 80034f2:	f7ff fccf 	bl	8002e94 <timerPaused>
		break;
 80034f6:	e042      	b.n	800357e <sw2Controll+0x1f2>
	case CLOCK_SETTING: // 시계설정모드 일때 PC15 기능
		if(sw2.state == TRUE) {
 80034f8:	4b25      	ldr	r3, [pc, #148]	@ (8003590 <sw2Controll+0x204>)
 80034fa:	781b      	ldrb	r3, [r3, #0]
 80034fc:	2b01      	cmp	r3, #1
 80034fe:	d116      	bne.n	800352e <sw2Controll+0x1a2>
			if(sw2.flag == FALSE) {
 8003500:	4b23      	ldr	r3, [pc, #140]	@ (8003590 <sw2Controll+0x204>)
 8003502:	785b      	ldrb	r3, [r3, #1]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d10e      	bne.n	8003526 <sw2Controll+0x19a>
				sw2.flag = 1;
 8003508:	4b21      	ldr	r3, [pc, #132]	@ (8003590 <sw2Controll+0x204>)
 800350a:	2201      	movs	r2, #1
 800350c:	705a      	strb	r2, [r3, #1]
				sw2DefaultHandler();
 800350e:	f000 fbcd 	bl	8003cac <sw2DefaultHandler>
				setWaitingTime(0);
 8003512:	2000      	movs	r0, #0
 8003514:	f000 fc18 	bl	8003d48 <setWaitingTime>
				settingTime();
 8003518:	f7fe fddc 	bl	80020d4 <settingTime>
				HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 800351c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003520:	481c      	ldr	r0, [pc, #112]	@ (8003594 <sw2Controll+0x208>)
 8003522:	f001 f8ee 	bl	8004702 <HAL_GPIO_TogglePin>
			}
			releasePointing(2);
 8003526:	2002      	movs	r0, #2
 8003528:	f000 fb88 	bl	8003c3c <releasePointing>
			if(sw2.flag == TRUE) {
				sw2.flag = 0;
				HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_6);
			}
		}
		break;
 800352c:	e029      	b.n	8003582 <sw2Controll+0x1f6>
			if(sw2.flag == TRUE) {
 800352e:	4b18      	ldr	r3, [pc, #96]	@ (8003590 <sw2Controll+0x204>)
 8003530:	785b      	ldrb	r3, [r3, #1]
 8003532:	2b01      	cmp	r3, #1
 8003534:	d125      	bne.n	8003582 <sw2Controll+0x1f6>
				sw2.flag = 0;
 8003536:	4b16      	ldr	r3, [pc, #88]	@ (8003590 <sw2Controll+0x204>)
 8003538:	2200      	movs	r2, #0
 800353a:	705a      	strb	r2, [r3, #1]
				HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_6);
 800353c:	2140      	movs	r1, #64	@ 0x40
 800353e:	4817      	ldr	r0, [pc, #92]	@ (800359c <sw2Controll+0x210>)
 8003540:	f001 f8df 	bl	8004702 <HAL_GPIO_TogglePin>
		break;
 8003544:	e01d      	b.n	8003582 <sw2Controll+0x1f6>
	case ALARM_TRIGGER:
		if(sw2.state == TRUE) {
 8003546:	4b12      	ldr	r3, [pc, #72]	@ (8003590 <sw2Controll+0x204>)
 8003548:	781b      	ldrb	r3, [r3, #0]
 800354a:	2b01      	cmp	r3, #1
 800354c:	d107      	bne.n	800355e <sw2Controll+0x1d2>
			if(sw2.flag == FALSE) {
 800354e:	4b10      	ldr	r3, [pc, #64]	@ (8003590 <sw2Controll+0x204>)
 8003550:	785b      	ldrb	r3, [r3, #1]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d117      	bne.n	8003586 <sw2Controll+0x1fa>
				sw2.flag = 1;
 8003556:	4b0e      	ldr	r3, [pc, #56]	@ (8003590 <sw2Controll+0x204>)
 8003558:	2201      	movs	r2, #1
 800355a:	705a      	strb	r2, [r3, #1]
				returnToPreviousMode();
				buzReset();
				sw2.flag = 0;
			}
		}
		break;
 800355c:	e013      	b.n	8003586 <sw2Controll+0x1fa>
			if(sw2.flag == TRUE) {
 800355e:	4b0c      	ldr	r3, [pc, #48]	@ (8003590 <sw2Controll+0x204>)
 8003560:	785b      	ldrb	r3, [r3, #1]
 8003562:	2b01      	cmp	r3, #1
 8003564:	d10f      	bne.n	8003586 <sw2Controll+0x1fa>
				returnToPreviousMode();
 8003566:	f7fe f82f 	bl	80015c8 <returnToPreviousMode>
				buzReset();
 800356a:	f7fe f96f 	bl	800184c <buzReset>
				sw2.flag = 0;
 800356e:	4b08      	ldr	r3, [pc, #32]	@ (8003590 <sw2Controll+0x204>)
 8003570:	2200      	movs	r2, #0
 8003572:	705a      	strb	r2, [r3, #1]
		break;
 8003574:	e007      	b.n	8003586 <sw2Controll+0x1fa>
		break;
 8003576:	bf00      	nop
 8003578:	e006      	b.n	8003588 <sw2Controll+0x1fc>
		break;
 800357a:	bf00      	nop
 800357c:	e004      	b.n	8003588 <sw2Controll+0x1fc>
		break;
 800357e:	bf00      	nop
 8003580:	e002      	b.n	8003588 <sw2Controll+0x1fc>
		break;
 8003582:	bf00      	nop
 8003584:	e000      	b.n	8003588 <sw2Controll+0x1fc>
		break;
 8003586:	bf00      	nop
	}
}
 8003588:	bf00      	nop
 800358a:	bd80      	pop	{r7, pc}
 800358c:	20000315 	.word	0x20000315
 8003590:	200002b0 	.word	0x200002b0
 8003594:	40020c00 	.word	0x40020c00
 8003598:	20000314 	.word	0x20000314
 800359c:	40020800 	.word	0x40020800
 80035a0:	20000078 	.word	0x20000078

080035a4 <sw3Controll>:

void sw3Controll() {
 80035a4:	b598      	push	{r3, r4, r7, lr}
 80035a6:	af00      	add	r7, sp, #0
	// SW3 PD4
	switch (mode) {
 80035a8:	4b8d      	ldr	r3, [pc, #564]	@ (80037e0 <sw3Controll+0x23c>)
 80035aa:	781b      	ldrb	r3, [r3, #0]
 80035ac:	2b04      	cmp	r3, #4
 80035ae:	f200 8114 	bhi.w	80037da <sw3Controll+0x236>
 80035b2:	a201      	add	r2, pc, #4	@ (adr r2, 80035b8 <sw3Controll+0x14>)
 80035b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035b8:	080035cd 	.word	0x080035cd
 80035bc:	08003631 	.word	0x08003631
 80035c0:	080036ad 	.word	0x080036ad
 80035c4:	08003745 	.word	0x08003745
 80035c8:	08003799 	.word	0x08003799
	case CLOCK:		// 시계모드 일때 PD4 기능
		//	시간 포멧 변경
		if (sw3.state == TRUE) {
 80035cc:	4b85      	ldr	r3, [pc, #532]	@ (80037e4 <sw3Controll+0x240>)
 80035ce:	781b      	ldrb	r3, [r3, #0]
 80035d0:	2b01      	cmp	r3, #1
 80035d2:	d111      	bne.n	80035f8 <sw3Controll+0x54>
			if (sw3.flag == FALSE) {
 80035d4:	4b83      	ldr	r3, [pc, #524]	@ (80037e4 <sw3Controll+0x240>)
 80035d6:	785b      	ldrb	r3, [r3, #1]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d109      	bne.n	80035f0 <sw3Controll+0x4c>
				sw3.flag = 1;
 80035dc:	4b81      	ldr	r3, [pc, #516]	@ (80037e4 <sw3Controll+0x240>)
 80035de:	2201      	movs	r2, #1
 80035e0:	705a      	strb	r2, [r3, #1]
				sw3DefaultHandler();
 80035e2:	f000 fb75 	bl	8003cd0 <sw3DefaultHandler>
				HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 80035e6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80035ea:	487f      	ldr	r0, [pc, #508]	@ (80037e8 <sw3Controll+0x244>)
 80035ec:	f001 f889 	bl	8004702 <HAL_GPIO_TogglePin>
			}
			releasePointing(3);
 80035f0:	2003      	movs	r0, #3
 80035f2:	f000 fb23 	bl	8003c3c <releasePointing>
				sw3.flag = 0;
				HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_6);
			}
		}

		break;
 80035f6:	e0e7      	b.n	80037c8 <sw3Controll+0x224>
			if (sw3.flag == TRUE) {
 80035f8:	4b7a      	ldr	r3, [pc, #488]	@ (80037e4 <sw3Controll+0x240>)
 80035fa:	785b      	ldrb	r3, [r3, #1]
 80035fc:	2b01      	cmp	r3, #1
 80035fe:	f040 80e3 	bne.w	80037c8 <sw3Controll+0x224>
				if (rsp == SHORT) {
 8003602:	4b7a      	ldr	r3, [pc, #488]	@ (80037ec <sw3Controll+0x248>)
 8003604:	781b      	ldrb	r3, [r3, #0]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d10a      	bne.n	8003620 <sw3Controll+0x7c>
					setTimeFormet(!getTimeFormet()); // 시간포멧 변경
 800360a:	f7fe ff23 	bl	8002454 <getTimeFormet>
 800360e:	4603      	mov	r3, r0
 8003610:	2b00      	cmp	r3, #0
 8003612:	bf0c      	ite	eq
 8003614:	2301      	moveq	r3, #1
 8003616:	2300      	movne	r3, #0
 8003618:	b2db      	uxtb	r3, r3
 800361a:	4618      	mov	r0, r3
 800361c:	f7fe ff26 	bl	800246c <setTimeFormet>
				sw3.flag = 0;
 8003620:	4b70      	ldr	r3, [pc, #448]	@ (80037e4 <sw3Controll+0x240>)
 8003622:	2200      	movs	r2, #0
 8003624:	705a      	strb	r2, [r3, #1]
				HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_6);
 8003626:	2140      	movs	r1, #64	@ 0x40
 8003628:	4871      	ldr	r0, [pc, #452]	@ (80037f0 <sw3Controll+0x24c>)
 800362a:	f001 f86a 	bl	8004702 <HAL_GPIO_TogglePin>
		break;
 800362e:	e0cb      	b.n	80037c8 <sw3Controll+0x224>
	case ALARM:	// 알람 모드일 때 PD4 기능
		if (sw3.state == TRUE) {
 8003630:	4b6c      	ldr	r3, [pc, #432]	@ (80037e4 <sw3Controll+0x240>)
 8003632:	781b      	ldrb	r3, [r3, #0]
 8003634:	2b01      	cmp	r3, #1
 8003636:	d114      	bne.n	8003662 <sw3Controll+0xbe>
			if (sw3.flag == FALSE) {
 8003638:	4b6a      	ldr	r3, [pc, #424]	@ (80037e4 <sw3Controll+0x240>)
 800363a:	785b      	ldrb	r3, [r3, #1]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d10c      	bne.n	800365a <sw3Controll+0xb6>
				sw3.flag = 1;
 8003640:	4b68      	ldr	r3, [pc, #416]	@ (80037e4 <sw3Controll+0x240>)
 8003642:	2201      	movs	r2, #1
 8003644:	705a      	strb	r2, [r3, #1]
				sw3DefaultHandler();
 8003646:	f000 fb43 	bl	8003cd0 <sw3DefaultHandler>
				setWaitingTime(0);
 800364a:	2000      	movs	r0, #0
 800364c:	f000 fb7c 	bl	8003d48 <setWaitingTime>
				HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 8003650:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003654:	4864      	ldr	r0, [pc, #400]	@ (80037e8 <sw3Controll+0x244>)
 8003656:	f001 f854 	bl	8004702 <HAL_GPIO_TogglePin>
			}
			releasePointing(3);
 800365a:	2003      	movs	r0, #3
 800365c:	f000 faee 	bl	8003c3c <releasePointing>
				}
				sw3.flag = 0;
				HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_6);
			}
		}
		break;
 8003660:	e0b4      	b.n	80037cc <sw3Controll+0x228>
			if (sw3.flag == TRUE) {
 8003662:	4b60      	ldr	r3, [pc, #384]	@ (80037e4 <sw3Controll+0x240>)
 8003664:	785b      	ldrb	r3, [r3, #1]
 8003666:	2b01      	cmp	r3, #1
 8003668:	f040 80b0 	bne.w	80037cc <sw3Controll+0x228>
				if (rsp == SHORT) {
 800366c:	4b5f      	ldr	r3, [pc, #380]	@ (80037ec <sw3Controll+0x248>)
 800366e:	781b      	ldrb	r3, [r3, #0]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d113      	bne.n	800369c <sw3Controll+0xf8>
					setAlarmEnabled(!getAlarmEnabled(getSelect()), getSelect());
 8003674:	f7fd ffb8 	bl	80015e8 <getSelect>
 8003678:	4603      	mov	r3, r0
 800367a:	4618      	mov	r0, r3
 800367c:	f7fd ffc0 	bl	8001600 <getAlarmEnabled>
 8003680:	4603      	mov	r3, r0
 8003682:	2b00      	cmp	r3, #0
 8003684:	bf0c      	ite	eq
 8003686:	2301      	moveq	r3, #1
 8003688:	2300      	movne	r3, #0
 800368a:	b2db      	uxtb	r3, r3
 800368c:	461c      	mov	r4, r3
 800368e:	f7fd ffab 	bl	80015e8 <getSelect>
 8003692:	4603      	mov	r3, r0
 8003694:	4619      	mov	r1, r3
 8003696:	4620      	mov	r0, r4
 8003698:	f7fd ffc4 	bl	8001624 <setAlarmEnabled>
				sw3.flag = 0;
 800369c:	4b51      	ldr	r3, [pc, #324]	@ (80037e4 <sw3Controll+0x240>)
 800369e:	2200      	movs	r2, #0
 80036a0:	705a      	strb	r2, [r3, #1]
				HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_6);
 80036a2:	2140      	movs	r1, #64	@ 0x40
 80036a4:	4852      	ldr	r0, [pc, #328]	@ (80037f0 <sw3Controll+0x24c>)
 80036a6:	f001 f82c 	bl	8004702 <HAL_GPIO_TogglePin>
		break;
 80036aa:	e08f      	b.n	80037cc <sw3Controll+0x228>
	case STOPWATCH:	// 스탑워치 모드일 때 PD4 기능
		// 스탑워치리셋, 랩타임저장, CLCD초기화 함수
		if (sw3.state == TRUE) {
 80036ac:	4b4d      	ldr	r3, [pc, #308]	@ (80037e4 <sw3Controll+0x240>)
 80036ae:	781b      	ldrb	r3, [r3, #0]
 80036b0:	2b01      	cmp	r3, #1
 80036b2:	d13d      	bne.n	8003730 <sw3Controll+0x18c>
			switch (stopwatch.state) {
 80036b4:	4b4f      	ldr	r3, [pc, #316]	@ (80037f4 <sw3Controll+0x250>)
 80036b6:	785b      	ldrb	r3, [r3, #1]
 80036b8:	2b02      	cmp	r3, #2
 80036ba:	d007      	beq.n	80036cc <sw3Controll+0x128>
 80036bc:	2b02      	cmp	r3, #2
 80036be:	f300 8087 	bgt.w	80037d0 <sw3Controll+0x22c>
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d02a      	beq.n	800371c <sw3Controll+0x178>
 80036c6:	2b01      	cmp	r3, #1
 80036c8:	d014      	beq.n	80036f4 <sw3Controll+0x150>
				break;
			}
		} else {
			sw3.flag = 0;
		}
		break;
 80036ca:	e081      	b.n	80037d0 <sw3Controll+0x22c>
				if (sw3.flag == FALSE) {
 80036cc:	4b45      	ldr	r3, [pc, #276]	@ (80037e4 <sw3Controll+0x240>)
 80036ce:	785b      	ldrb	r3, [r3, #1]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d131      	bne.n	8003738 <sw3Controll+0x194>
					stopwatch.state = STOP;
 80036d4:	4b47      	ldr	r3, [pc, #284]	@ (80037f4 <sw3Controll+0x250>)
 80036d6:	2202      	movs	r2, #2
 80036d8:	705a      	strb	r2, [r3, #1]
					segReset(); // 7세그먼트 초기화, clcd와 랩타임 저장 초기화
 80036da:	f7ff fbb7 	bl	8002e4c <segReset>
					clcdStopWatchClear();
 80036de:	f7ff fd4b 	bl	8003178 <clcdStopWatchClear>
					HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 80036e2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80036e6:	4840      	ldr	r0, [pc, #256]	@ (80037e8 <sw3Controll+0x244>)
 80036e8:	f001 f80b 	bl	8004702 <HAL_GPIO_TogglePin>
					sw3.flag = 1;
 80036ec:	4b3d      	ldr	r3, [pc, #244]	@ (80037e4 <sw3Controll+0x240>)
 80036ee:	2201      	movs	r2, #1
 80036f0:	705a      	strb	r2, [r3, #1]
				break;
 80036f2:	e021      	b.n	8003738 <sw3Controll+0x194>
				if (sw3.flag == FALSE) {
 80036f4:	4b3b      	ldr	r3, [pc, #236]	@ (80037e4 <sw3Controll+0x240>)
 80036f6:	785b      	ldrb	r3, [r3, #1]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d11f      	bne.n	800373c <sw3Controll+0x198>
					stopwatch.state = STOP;
 80036fc:	4b3d      	ldr	r3, [pc, #244]	@ (80037f4 <sw3Controll+0x250>)
 80036fe:	2202      	movs	r2, #2
 8003700:	705a      	strb	r2, [r3, #1]
					segReset(); // 7세그먼트 초기화, clcd와 랩타임 저장 초기화
 8003702:	f7ff fba3 	bl	8002e4c <segReset>
					clcdStopWatchClear();
 8003706:	f7ff fd37 	bl	8003178 <clcdStopWatchClear>
					HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 800370a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800370e:	4836      	ldr	r0, [pc, #216]	@ (80037e8 <sw3Controll+0x244>)
 8003710:	f000 fff7 	bl	8004702 <HAL_GPIO_TogglePin>
					sw3.flag = 1;
 8003714:	4b33      	ldr	r3, [pc, #204]	@ (80037e4 <sw3Controll+0x240>)
 8003716:	2201      	movs	r2, #1
 8003718:	705a      	strb	r2, [r3, #1]
				break;
 800371a:	e00f      	b.n	800373c <sw3Controll+0x198>
				if (sw3.flag == FALSE) {
 800371c:	4b31      	ldr	r3, [pc, #196]	@ (80037e4 <sw3Controll+0x240>)
 800371e:	785b      	ldrb	r3, [r3, #1]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d10d      	bne.n	8003740 <sw3Controll+0x19c>
					laptimeSave(); // 랩타임 저장
 8003724:	f7ff fc30 	bl	8002f88 <laptimeSave>
					sw3.flag = 1;
 8003728:	4b2e      	ldr	r3, [pc, #184]	@ (80037e4 <sw3Controll+0x240>)
 800372a:	2201      	movs	r2, #1
 800372c:	705a      	strb	r2, [r3, #1]
				break;
 800372e:	e007      	b.n	8003740 <sw3Controll+0x19c>
			sw3.flag = 0;
 8003730:	4b2c      	ldr	r3, [pc, #176]	@ (80037e4 <sw3Controll+0x240>)
 8003732:	2200      	movs	r2, #0
 8003734:	705a      	strb	r2, [r3, #1]
		break;
 8003736:	e04b      	b.n	80037d0 <sw3Controll+0x22c>
				break;
 8003738:	bf00      	nop
 800373a:	e049      	b.n	80037d0 <sw3Controll+0x22c>
				break;
 800373c:	bf00      	nop
 800373e:	e047      	b.n	80037d0 <sw3Controll+0x22c>
				break;
 8003740:	bf00      	nop
		break;
 8003742:	e045      	b.n	80037d0 <sw3Controll+0x22c>
	case CLOCK_SETTING: // 시계설정모드 일때 PD4 기능
		if (sw3.state == TRUE) {
 8003744:	4b27      	ldr	r3, [pc, #156]	@ (80037e4 <sw3Controll+0x240>)
 8003746:	781b      	ldrb	r3, [r3, #0]
 8003748:	2b01      	cmp	r3, #1
 800374a:	d116      	bne.n	800377a <sw3Controll+0x1d6>
			if (sw3.flag == FALSE) {
 800374c:	4b25      	ldr	r3, [pc, #148]	@ (80037e4 <sw3Controll+0x240>)
 800374e:	785b      	ldrb	r3, [r3, #1]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d10b      	bne.n	800376c <sw3Controll+0x1c8>
				sw3.flag = 1;
 8003754:	4b23      	ldr	r3, [pc, #140]	@ (80037e4 <sw3Controll+0x240>)
 8003756:	2201      	movs	r2, #1
 8003758:	705a      	strb	r2, [r3, #1]
				sw3DefaultHandler();
 800375a:	f000 fab9 	bl	8003cd0 <sw3DefaultHandler>
				incrementTime();
 800375e:	f7fe fcd1 	bl	8002104 <incrementTime>
				HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 8003762:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003766:	4820      	ldr	r0, [pc, #128]	@ (80037e8 <sw3Controll+0x244>)
 8003768:	f000 ffcb 	bl	8004702 <HAL_GPIO_TogglePin>
			}
			setWaitingTime(0);
 800376c:	2000      	movs	r0, #0
 800376e:	f000 faeb 	bl	8003d48 <setWaitingTime>
			releasePointing(3);
 8003772:	2003      	movs	r0, #3
 8003774:	f000 fa62 	bl	8003c3c <releasePointing>
				sw3.flag = 0;
				rsp = SHORT;
				HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_6);
			}
		}
		break;
 8003778:	e02c      	b.n	80037d4 <sw3Controll+0x230>
			if (sw3.flag == TRUE) {
 800377a:	4b1a      	ldr	r3, [pc, #104]	@ (80037e4 <sw3Controll+0x240>)
 800377c:	785b      	ldrb	r3, [r3, #1]
 800377e:	2b01      	cmp	r3, #1
 8003780:	d128      	bne.n	80037d4 <sw3Controll+0x230>
				sw3.flag = 0;
 8003782:	4b18      	ldr	r3, [pc, #96]	@ (80037e4 <sw3Controll+0x240>)
 8003784:	2200      	movs	r2, #0
 8003786:	705a      	strb	r2, [r3, #1]
				rsp = SHORT;
 8003788:	4b18      	ldr	r3, [pc, #96]	@ (80037ec <sw3Controll+0x248>)
 800378a:	2200      	movs	r2, #0
 800378c:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_6);
 800378e:	2140      	movs	r1, #64	@ 0x40
 8003790:	4817      	ldr	r0, [pc, #92]	@ (80037f0 <sw3Controll+0x24c>)
 8003792:	f000 ffb6 	bl	8004702 <HAL_GPIO_TogglePin>
		break;
 8003796:	e01d      	b.n	80037d4 <sw3Controll+0x230>
	case ALARM_TRIGGER:
		if(sw3.state == TRUE) {
 8003798:	4b12      	ldr	r3, [pc, #72]	@ (80037e4 <sw3Controll+0x240>)
 800379a:	781b      	ldrb	r3, [r3, #0]
 800379c:	2b01      	cmp	r3, #1
 800379e:	d107      	bne.n	80037b0 <sw3Controll+0x20c>
			if(sw3.flag == FALSE) {
 80037a0:	4b10      	ldr	r3, [pc, #64]	@ (80037e4 <sw3Controll+0x240>)
 80037a2:	785b      	ldrb	r3, [r3, #1]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d117      	bne.n	80037d8 <sw3Controll+0x234>
				sw3.flag = 1;
 80037a8:	4b0e      	ldr	r3, [pc, #56]	@ (80037e4 <sw3Controll+0x240>)
 80037aa:	2201      	movs	r2, #1
 80037ac:	705a      	strb	r2, [r3, #1]
				returnToPreviousMode();
				buzReset();
				sw3.flag = 0;
			}
		}
		break;
 80037ae:	e013      	b.n	80037d8 <sw3Controll+0x234>
			if(sw3.flag == TRUE) {
 80037b0:	4b0c      	ldr	r3, [pc, #48]	@ (80037e4 <sw3Controll+0x240>)
 80037b2:	785b      	ldrb	r3, [r3, #1]
 80037b4:	2b01      	cmp	r3, #1
 80037b6:	d10f      	bne.n	80037d8 <sw3Controll+0x234>
				returnToPreviousMode();
 80037b8:	f7fd ff06 	bl	80015c8 <returnToPreviousMode>
				buzReset();
 80037bc:	f7fe f846 	bl	800184c <buzReset>
				sw3.flag = 0;
 80037c0:	4b08      	ldr	r3, [pc, #32]	@ (80037e4 <sw3Controll+0x240>)
 80037c2:	2200      	movs	r2, #0
 80037c4:	705a      	strb	r2, [r3, #1]
		break;
 80037c6:	e007      	b.n	80037d8 <sw3Controll+0x234>
		break;
 80037c8:	bf00      	nop
 80037ca:	e006      	b.n	80037da <sw3Controll+0x236>
		break;
 80037cc:	bf00      	nop
 80037ce:	e004      	b.n	80037da <sw3Controll+0x236>
		break;
 80037d0:	bf00      	nop
 80037d2:	e002      	b.n	80037da <sw3Controll+0x236>
		break;
 80037d4:	bf00      	nop
 80037d6:	e000      	b.n	80037da <sw3Controll+0x236>
		break;
 80037d8:	bf00      	nop
	}
}
 80037da:	bf00      	nop
 80037dc:	bd98      	pop	{r3, r4, r7, pc}
 80037de:	bf00      	nop
 80037e0:	20000315 	.word	0x20000315
 80037e4:	200002cc 	.word	0x200002cc
 80037e8:	40020c00 	.word	0x40020c00
 80037ec:	20000314 	.word	0x20000314
 80037f0:	40020800 	.word	0x40020800
 80037f4:	20000078 	.word	0x20000078

080037f8 <sw4Controll>:

void sw4Controll() {
 80037f8:	b598      	push	{r3, r4, r7, lr}
 80037fa:	af00      	add	r7, sp, #0
	// SW4 PD10
	switch (mode) {
 80037fc:	4b69      	ldr	r3, [pc, #420]	@ (80039a4 <sw4Controll+0x1ac>)
 80037fe:	781b      	ldrb	r3, [r3, #0]
 8003800:	2b04      	cmp	r3, #4
 8003802:	f200 80cc 	bhi.w	800399e <sw4Controll+0x1a6>
 8003806:	a201      	add	r2, pc, #4	@ (adr r2, 800380c <sw4Controll+0x14>)
 8003808:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800380c:	08003821 	.word	0x08003821
 8003810:	08003867 	.word	0x08003867
 8003814:	080038e1 	.word	0x080038e1
 8003818:	0800390d 	.word	0x0800390d
 800381c:	08003961 	.word	0x08003961
	case CLOCK:		// 시계모드 일때 PD10 기능
		if (sw4.state == TRUE) {
 8003820:	4b61      	ldr	r3, [pc, #388]	@ (80039a8 <sw4Controll+0x1b0>)
 8003822:	781b      	ldrb	r3, [r3, #0]
 8003824:	2b01      	cmp	r3, #1
 8003826:	d111      	bne.n	800384c <sw4Controll+0x54>
			if (sw4.flag == FALSE) {
 8003828:	4b5f      	ldr	r3, [pc, #380]	@ (80039a8 <sw4Controll+0x1b0>)
 800382a:	785b      	ldrb	r3, [r3, #1]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d109      	bne.n	8003844 <sw4Controll+0x4c>
				sw4.flag = 1;
 8003830:	4b5d      	ldr	r3, [pc, #372]	@ (80039a8 <sw4Controll+0x1b0>)
 8003832:	2201      	movs	r2, #1
 8003834:	705a      	strb	r2, [r3, #1]
				sw4DefaultHandler();
 8003836:	f000 fa5d 	bl	8003cf4 <sw4DefaultHandler>
				HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 800383a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800383e:	485b      	ldr	r0, [pc, #364]	@ (80039ac <sw4Controll+0x1b4>)
 8003840:	f000 ff5f 	bl	8004702 <HAL_GPIO_TogglePin>
			}
			releasePointing(4);
 8003844:	2004      	movs	r0, #4
 8003846:	f000 f9f9 	bl	8003c3c <releasePointing>
			if (sw4.flag == TRUE) {
				HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_6);
				sw4.flag = 0;
			}
		}
		break;
 800384a:	e0a1      	b.n	8003990 <sw4Controll+0x198>
			if (sw4.flag == TRUE) {
 800384c:	4b56      	ldr	r3, [pc, #344]	@ (80039a8 <sw4Controll+0x1b0>)
 800384e:	785b      	ldrb	r3, [r3, #1]
 8003850:	2b01      	cmp	r3, #1
 8003852:	f040 809d 	bne.w	8003990 <sw4Controll+0x198>
				HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_6);
 8003856:	2140      	movs	r1, #64	@ 0x40
 8003858:	4855      	ldr	r0, [pc, #340]	@ (80039b0 <sw4Controll+0x1b8>)
 800385a:	f000 ff52 	bl	8004702 <HAL_GPIO_TogglePin>
				sw4.flag = 0;
 800385e:	4b52      	ldr	r3, [pc, #328]	@ (80039a8 <sw4Controll+0x1b0>)
 8003860:	2200      	movs	r2, #0
 8003862:	705a      	strb	r2, [r3, #1]
		break;
 8003864:	e094      	b.n	8003990 <sw4Controll+0x198>
	case ALARM:	// 알람 모드일 때 PD10 기능
		if (sw4.state == TRUE) {
 8003866:	4b50      	ldr	r3, [pc, #320]	@ (80039a8 <sw4Controll+0x1b0>)
 8003868:	781b      	ldrb	r3, [r3, #0]
 800386a:	2b01      	cmp	r3, #1
 800386c:	d114      	bne.n	8003898 <sw4Controll+0xa0>
			if (sw4.flag == FALSE) {
 800386e:	4b4e      	ldr	r3, [pc, #312]	@ (80039a8 <sw4Controll+0x1b0>)
 8003870:	785b      	ldrb	r3, [r3, #1]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d10c      	bne.n	8003890 <sw4Controll+0x98>
				sw4.flag = 1;
 8003876:	4b4c      	ldr	r3, [pc, #304]	@ (80039a8 <sw4Controll+0x1b0>)
 8003878:	2201      	movs	r2, #1
 800387a:	705a      	strb	r2, [r3, #1]
				setWaitingTime(0);
 800387c:	2000      	movs	r0, #0
 800387e:	f000 fa63 	bl	8003d48 <setWaitingTime>
				sw4DefaultHandler();
 8003882:	f000 fa37 	bl	8003cf4 <sw4DefaultHandler>
				HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 8003886:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800388a:	4848      	ldr	r0, [pc, #288]	@ (80039ac <sw4Controll+0x1b4>)
 800388c:	f000 ff39 	bl	8004702 <HAL_GPIO_TogglePin>
			}
			releasePointing(4);
 8003890:	2004      	movs	r0, #4
 8003892:	f000 f9d3 	bl	8003c3c <releasePointing>
				}
				sw4.flag = 0;
				HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_6);
			}
		}
		break;
 8003896:	e07d      	b.n	8003994 <sw4Controll+0x19c>
			if (sw4.flag == TRUE) {
 8003898:	4b43      	ldr	r3, [pc, #268]	@ (80039a8 <sw4Controll+0x1b0>)
 800389a:	785b      	ldrb	r3, [r3, #1]
 800389c:	2b01      	cmp	r3, #1
 800389e:	d179      	bne.n	8003994 <sw4Controll+0x19c>
				if(rsp == SHORT) {
 80038a0:	4b44      	ldr	r3, [pc, #272]	@ (80039b4 <sw4Controll+0x1bc>)
 80038a2:	781b      	ldrb	r3, [r3, #0]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d113      	bne.n	80038d0 <sw4Controll+0xd8>
					setAlarmRepeat(!getAlarmRepeat(getSelect()), getSelect());
 80038a8:	f7fd fe9e 	bl	80015e8 <getSelect>
 80038ac:	4603      	mov	r3, r0
 80038ae:	4618      	mov	r0, r3
 80038b0:	f7fd fecc 	bl	800164c <getAlarmRepeat>
 80038b4:	4603      	mov	r3, r0
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	bf0c      	ite	eq
 80038ba:	2301      	moveq	r3, #1
 80038bc:	2300      	movne	r3, #0
 80038be:	b2db      	uxtb	r3, r3
 80038c0:	461c      	mov	r4, r3
 80038c2:	f7fd fe91 	bl	80015e8 <getSelect>
 80038c6:	4603      	mov	r3, r0
 80038c8:	4619      	mov	r1, r3
 80038ca:	4620      	mov	r0, r4
 80038cc:	f7fd fed0 	bl	8001670 <setAlarmRepeat>
				sw4.flag = 0;
 80038d0:	4b35      	ldr	r3, [pc, #212]	@ (80039a8 <sw4Controll+0x1b0>)
 80038d2:	2200      	movs	r2, #0
 80038d4:	705a      	strb	r2, [r3, #1]
				HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_6);
 80038d6:	2140      	movs	r1, #64	@ 0x40
 80038d8:	4835      	ldr	r0, [pc, #212]	@ (80039b0 <sw4Controll+0x1b8>)
 80038da:	f000 ff12 	bl	8004702 <HAL_GPIO_TogglePin>
		break;
 80038de:	e059      	b.n	8003994 <sw4Controll+0x19c>
	case STOPWATCH: // 스탑워치 모드일 때 PD10 기능
		// 저장된 laptime 출력
		if (sw4.state == TRUE) {
 80038e0:	4b31      	ldr	r3, [pc, #196]	@ (80039a8 <sw4Controll+0x1b0>)
 80038e2:	781b      	ldrb	r3, [r3, #0]
 80038e4:	2b01      	cmp	r3, #1
 80038e6:	d10d      	bne.n	8003904 <sw4Controll+0x10c>
			if (sw4.flag == FALSE) {
 80038e8:	4b2f      	ldr	r3, [pc, #188]	@ (80039a8 <sw4Controll+0x1b0>)
 80038ea:	785b      	ldrb	r3, [r3, #1]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d153      	bne.n	8003998 <sw4Controll+0x1a0>
				laptimeDisplay(); // 랩타임 순서대로 출력
 80038f0:	f7ff fbda 	bl	80030a8 <laptimeDisplay>
				HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_6);
 80038f4:	2140      	movs	r1, #64	@ 0x40
 80038f6:	482e      	ldr	r0, [pc, #184]	@ (80039b0 <sw4Controll+0x1b8>)
 80038f8:	f000 ff03 	bl	8004702 <HAL_GPIO_TogglePin>
				sw4.flag = 1;
 80038fc:	4b2a      	ldr	r3, [pc, #168]	@ (80039a8 <sw4Controll+0x1b0>)
 80038fe:	2201      	movs	r2, #1
 8003900:	705a      	strb	r2, [r3, #1]
			}
		} else {
			sw4.flag = 0;
		}
		break;
 8003902:	e049      	b.n	8003998 <sw4Controll+0x1a0>
			sw4.flag = 0;
 8003904:	4b28      	ldr	r3, [pc, #160]	@ (80039a8 <sw4Controll+0x1b0>)
 8003906:	2200      	movs	r2, #0
 8003908:	705a      	strb	r2, [r3, #1]
		break;
 800390a:	e045      	b.n	8003998 <sw4Controll+0x1a0>
	case CLOCK_SETTING:  // 시계설정모드 일때 PD10 기능
		if (sw4.state == TRUE) {
 800390c:	4b26      	ldr	r3, [pc, #152]	@ (80039a8 <sw4Controll+0x1b0>)
 800390e:	781b      	ldrb	r3, [r3, #0]
 8003910:	2b01      	cmp	r3, #1
 8003912:	d116      	bne.n	8003942 <sw4Controll+0x14a>
			if (sw4.flag == FALSE) {
 8003914:	4b24      	ldr	r3, [pc, #144]	@ (80039a8 <sw4Controll+0x1b0>)
 8003916:	785b      	ldrb	r3, [r3, #1]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d10b      	bne.n	8003934 <sw4Controll+0x13c>
				sw4.flag = 1;
 800391c:	4b22      	ldr	r3, [pc, #136]	@ (80039a8 <sw4Controll+0x1b0>)
 800391e:	2201      	movs	r2, #1
 8003920:	705a      	strb	r2, [r3, #1]
				sw4DefaultHandler();
 8003922:	f000 f9e7 	bl	8003cf4 <sw4DefaultHandler>
				decrementTime();
 8003926:	f7fe fcbd 	bl	80022a4 <decrementTime>
				HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 800392a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800392e:	481f      	ldr	r0, [pc, #124]	@ (80039ac <sw4Controll+0x1b4>)
 8003930:	f000 fee7 	bl	8004702 <HAL_GPIO_TogglePin>
			}
			setWaitingTime(0);
 8003934:	2000      	movs	r0, #0
 8003936:	f000 fa07 	bl	8003d48 <setWaitingTime>
			releasePointing(4);
 800393a:	2004      	movs	r0, #4
 800393c:	f000 f97e 	bl	8003c3c <releasePointing>
				sw4.flag = 0;
				rsp = SHORT;
				HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_6);
			}
		}
		break;
 8003940:	e02c      	b.n	800399c <sw4Controll+0x1a4>
			if (sw4.flag == TRUE) {
 8003942:	4b19      	ldr	r3, [pc, #100]	@ (80039a8 <sw4Controll+0x1b0>)
 8003944:	785b      	ldrb	r3, [r3, #1]
 8003946:	2b01      	cmp	r3, #1
 8003948:	d128      	bne.n	800399c <sw4Controll+0x1a4>
				sw4.flag = 0;
 800394a:	4b17      	ldr	r3, [pc, #92]	@ (80039a8 <sw4Controll+0x1b0>)
 800394c:	2200      	movs	r2, #0
 800394e:	705a      	strb	r2, [r3, #1]
				rsp = SHORT;
 8003950:	4b18      	ldr	r3, [pc, #96]	@ (80039b4 <sw4Controll+0x1bc>)
 8003952:	2200      	movs	r2, #0
 8003954:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_6);
 8003956:	2140      	movs	r1, #64	@ 0x40
 8003958:	4815      	ldr	r0, [pc, #84]	@ (80039b0 <sw4Controll+0x1b8>)
 800395a:	f000 fed2 	bl	8004702 <HAL_GPIO_TogglePin>
		break;
 800395e:	e01d      	b.n	800399c <sw4Controll+0x1a4>
	case ALARM_TRIGGER:
		if(sw4.state == TRUE) {
 8003960:	4b11      	ldr	r3, [pc, #68]	@ (80039a8 <sw4Controll+0x1b0>)
 8003962:	781b      	ldrb	r3, [r3, #0]
 8003964:	2b01      	cmp	r3, #1
 8003966:	d107      	bne.n	8003978 <sw4Controll+0x180>
			if(sw4.flag == FALSE) {
 8003968:	4b0f      	ldr	r3, [pc, #60]	@ (80039a8 <sw4Controll+0x1b0>)
 800396a:	785b      	ldrb	r3, [r3, #1]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d116      	bne.n	800399e <sw4Controll+0x1a6>
				sw4.flag = 1;
 8003970:	4b0d      	ldr	r3, [pc, #52]	@ (80039a8 <sw4Controll+0x1b0>)
 8003972:	2201      	movs	r2, #1
 8003974:	705a      	strb	r2, [r3, #1]
				buzReset();
				sw4.flag = 0;
			}
		}
	}
}
 8003976:	e012      	b.n	800399e <sw4Controll+0x1a6>
			if(sw4.flag == TRUE) {
 8003978:	4b0b      	ldr	r3, [pc, #44]	@ (80039a8 <sw4Controll+0x1b0>)
 800397a:	785b      	ldrb	r3, [r3, #1]
 800397c:	2b01      	cmp	r3, #1
 800397e:	d10e      	bne.n	800399e <sw4Controll+0x1a6>
				returnToPreviousMode();
 8003980:	f7fd fe22 	bl	80015c8 <returnToPreviousMode>
				buzReset();
 8003984:	f7fd ff62 	bl	800184c <buzReset>
				sw4.flag = 0;
 8003988:	4b07      	ldr	r3, [pc, #28]	@ (80039a8 <sw4Controll+0x1b0>)
 800398a:	2200      	movs	r2, #0
 800398c:	705a      	strb	r2, [r3, #1]
}
 800398e:	e006      	b.n	800399e <sw4Controll+0x1a6>
		break;
 8003990:	bf00      	nop
 8003992:	e004      	b.n	800399e <sw4Controll+0x1a6>
		break;
 8003994:	bf00      	nop
 8003996:	e002      	b.n	800399e <sw4Controll+0x1a6>
		break;
 8003998:	bf00      	nop
 800399a:	e000      	b.n	800399e <sw4Controll+0x1a6>
		break;
 800399c:	bf00      	nop
}
 800399e:	bf00      	nop
 80039a0:	bd98      	pop	{r3, r4, r7, pc}
 80039a2:	bf00      	nop
 80039a4:	20000315 	.word	0x20000315
 80039a8:	200002e8 	.word	0x200002e8
 80039ac:	40020c00 	.word	0x40020c00
 80039b0:	40020800 	.word	0x40020800
 80039b4:	20000314 	.word	0x20000314

080039b8 <getPressCount>:

int getPressCount(int swNum) {
 80039b8:	b480      	push	{r7}
 80039ba:	b085      	sub	sp, #20
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
	int temp;
	switch(swNum) {
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	3b01      	subs	r3, #1
 80039c4:	2b03      	cmp	r3, #3
 80039c6:	d81b      	bhi.n	8003a00 <getPressCount+0x48>
 80039c8:	a201      	add	r2, pc, #4	@ (adr r2, 80039d0 <getPressCount+0x18>)
 80039ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039ce:	bf00      	nop
 80039d0:	080039e1 	.word	0x080039e1
 80039d4:	080039e9 	.word	0x080039e9
 80039d8:	080039f1 	.word	0x080039f1
 80039dc:	080039f9 	.word	0x080039f9
	case 1:
		temp = sw1.pressCnt;
 80039e0:	4b0b      	ldr	r3, [pc, #44]	@ (8003a10 <getPressCount+0x58>)
 80039e2:	685b      	ldr	r3, [r3, #4]
 80039e4:	60fb      	str	r3, [r7, #12]
		break;
 80039e6:	e00b      	b.n	8003a00 <getPressCount+0x48>
	case 2:
		temp = sw2.pressCnt;
 80039e8:	4b0a      	ldr	r3, [pc, #40]	@ (8003a14 <getPressCount+0x5c>)
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	60fb      	str	r3, [r7, #12]
		break;
 80039ee:	e007      	b.n	8003a00 <getPressCount+0x48>
	case 3:
		temp = sw3.pressCnt;
 80039f0:	4b09      	ldr	r3, [pc, #36]	@ (8003a18 <getPressCount+0x60>)
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	60fb      	str	r3, [r7, #12]
		break;
 80039f6:	e003      	b.n	8003a00 <getPressCount+0x48>
	case 4:
		temp = sw4.pressCnt;
 80039f8:	4b08      	ldr	r3, [pc, #32]	@ (8003a1c <getPressCount+0x64>)
 80039fa:	685b      	ldr	r3, [r3, #4]
 80039fc:	60fb      	str	r3, [r7, #12]
		break;
 80039fe:	bf00      	nop
	}
	return temp;
 8003a00:	68fb      	ldr	r3, [r7, #12]

}
 8003a02:	4618      	mov	r0, r3
 8003a04:	3714      	adds	r7, #20
 8003a06:	46bd      	mov	sp, r7
 8003a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0c:	4770      	bx	lr
 8003a0e:	bf00      	nop
 8003a10:	20000294 	.word	0x20000294
 8003a14:	200002b0 	.word	0x200002b0
 8003a18:	200002cc 	.word	0x200002cc
 8003a1c:	200002e8 	.word	0x200002e8

08003a20 <holdEvent>:

void holdEvent() {
 8003a20:	b580      	push	{r7, lr}
 8003a22:	af00      	add	r7, sp, #0
	if(sw1.state == TRUE) {
 8003a24:	4b7c      	ldr	r3, [pc, #496]	@ (8003c18 <holdEvent+0x1f8>)
 8003a26:	781b      	ldrb	r3, [r3, #0]
 8003a28:	2b01      	cmp	r3, #1
 8003a2a:	d115      	bne.n	8003a58 <holdEvent+0x38>
		if(sw1.pressCnt <= LONG_PRESS) {
 8003a2c:	4b7a      	ldr	r3, [pc, #488]	@ (8003c18 <holdEvent+0x1f8>)
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 8003a34:	4293      	cmp	r3, r2
 8003a36:	dc04      	bgt.n	8003a42 <holdEvent+0x22>
			sw1.pressCnt++;
 8003a38:	4b77      	ldr	r3, [pc, #476]	@ (8003c18 <holdEvent+0x1f8>)
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	3301      	adds	r3, #1
 8003a3e:	4a76      	ldr	r2, [pc, #472]	@ (8003c18 <holdEvent+0x1f8>)
 8003a40:	6053      	str	r3, [r2, #4]
		}
		switch(rsp) {
 8003a42:	4b76      	ldr	r3, [pc, #472]	@ (8003c1c <holdEvent+0x1fc>)
 8003a44:	781b      	ldrb	r3, [r3, #0]
 8003a46:	2b02      	cmp	r3, #2
 8003a48:	d006      	beq.n	8003a58 <holdEvent+0x38>
 8003a4a:	2b02      	cmp	r3, #2
 8003a4c:	dc04      	bgt.n	8003a58 <holdEvent+0x38>
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d001      	beq.n	8003a56 <holdEvent+0x36>
 8003a52:	2b01      	cmp	r3, #1
 8003a54:	e000      	b.n	8003a58 <holdEvent+0x38>
		case SHORT:
			break;
 8003a56:	bf00      	nop
			}
			break;

		}
	}
	if(sw2.state == TRUE) {
 8003a58:	4b71      	ldr	r3, [pc, #452]	@ (8003c20 <holdEvent+0x200>)
 8003a5a:	781b      	ldrb	r3, [r3, #0]
 8003a5c:	2b01      	cmp	r3, #1
 8003a5e:	d115      	bne.n	8003a8c <holdEvent+0x6c>
		if(sw2.pressCnt <= LONG_PRESS) {
 8003a60:	4b6f      	ldr	r3, [pc, #444]	@ (8003c20 <holdEvent+0x200>)
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	dc04      	bgt.n	8003a76 <holdEvent+0x56>
			sw2.pressCnt++;
 8003a6c:	4b6c      	ldr	r3, [pc, #432]	@ (8003c20 <holdEvent+0x200>)
 8003a6e:	685b      	ldr	r3, [r3, #4]
 8003a70:	3301      	adds	r3, #1
 8003a72:	4a6b      	ldr	r2, [pc, #428]	@ (8003c20 <holdEvent+0x200>)
 8003a74:	6053      	str	r3, [r2, #4]
		}
		switch(rsp) {
 8003a76:	4b69      	ldr	r3, [pc, #420]	@ (8003c1c <holdEvent+0x1fc>)
 8003a78:	781b      	ldrb	r3, [r3, #0]
 8003a7a:	2b02      	cmp	r3, #2
 8003a7c:	d006      	beq.n	8003a8c <holdEvent+0x6c>
 8003a7e:	2b02      	cmp	r3, #2
 8003a80:	dc04      	bgt.n	8003a8c <holdEvent+0x6c>
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d001      	beq.n	8003a8a <holdEvent+0x6a>
 8003a86:	2b01      	cmp	r3, #1
 8003a88:	e000      	b.n	8003a8c <holdEvent+0x6c>
		case SHORT:
			break;
 8003a8a:	bf00      	nop
			}
			break;

		}
	}
	if(sw3.state == TRUE) {
 8003a8c:	4b65      	ldr	r3, [pc, #404]	@ (8003c24 <holdEvent+0x204>)
 8003a8e:	781b      	ldrb	r3, [r3, #0]
 8003a90:	2b01      	cmp	r3, #1
 8003a92:	d15c      	bne.n	8003b4e <holdEvent+0x12e>
		if(sw3.pressCnt <= LONG_PRESS) {
 8003a94:	4b63      	ldr	r3, [pc, #396]	@ (8003c24 <holdEvent+0x204>)
 8003a96:	685b      	ldr	r3, [r3, #4]
 8003a98:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	dc04      	bgt.n	8003aaa <holdEvent+0x8a>
			sw3.pressCnt++;
 8003aa0:	4b60      	ldr	r3, [pc, #384]	@ (8003c24 <holdEvent+0x204>)
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	3301      	adds	r3, #1
 8003aa6:	4a5f      	ldr	r2, [pc, #380]	@ (8003c24 <holdEvent+0x204>)
 8003aa8:	6053      	str	r3, [r2, #4]
		}
		if(sw3.pressCnt == MID_PRESS && mode == CLOCK_SETTING) {
 8003aaa:	4b5e      	ldr	r3, [pc, #376]	@ (8003c24 <holdEvent+0x204>)
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	f5b3 7f2f 	cmp.w	r3, #700	@ 0x2bc
 8003ab2:	d106      	bne.n	8003ac2 <holdEvent+0xa2>
 8003ab4:	4b5c      	ldr	r3, [pc, #368]	@ (8003c28 <holdEvent+0x208>)
 8003ab6:	781b      	ldrb	r3, [r3, #0]
 8003ab8:	2b03      	cmp	r3, #3
 8003aba:	d102      	bne.n	8003ac2 <holdEvent+0xa2>
			playMidTone();
 8003abc:	f7fd fe1c 	bl	80016f8 <playMidTone>
 8003ac0:	e00b      	b.n	8003ada <holdEvent+0xba>
		} else if(sw3.pressCnt == LONG_PRESS && mode == CLOCK_SETTING) {
 8003ac2:	4b58      	ldr	r3, [pc, #352]	@ (8003c24 <holdEvent+0x204>)
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d105      	bne.n	8003ada <holdEvent+0xba>
 8003ace:	4b56      	ldr	r3, [pc, #344]	@ (8003c28 <holdEvent+0x208>)
 8003ad0:	781b      	ldrb	r3, [r3, #0]
 8003ad2:	2b03      	cmp	r3, #3
 8003ad4:	d101      	bne.n	8003ada <holdEvent+0xba>
			playHighTone();
 8003ad6:	f7fd fe21 	bl	800171c <playHighTone>
		}
		switch(rsp) {
 8003ada:	4b50      	ldr	r3, [pc, #320]	@ (8003c1c <holdEvent+0x1fc>)
 8003adc:	781b      	ldrb	r3, [r3, #0]
 8003ade:	2b02      	cmp	r3, #2
 8003ae0:	d01a      	beq.n	8003b18 <holdEvent+0xf8>
 8003ae2:	2b02      	cmp	r3, #2
 8003ae4:	dc33      	bgt.n	8003b4e <holdEvent+0x12e>
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d02c      	beq.n	8003b44 <holdEvent+0x124>
 8003aea:	2b01      	cmp	r3, #1
 8003aec:	d12f      	bne.n	8003b4e <holdEvent+0x12e>
		case SHORT:
			break;
		case MID:
			if(sys.millisecond % 150 == 0) {
 8003aee:	4b4f      	ldr	r3, [pc, #316]	@ (8003c2c <holdEvent+0x20c>)
 8003af0:	681a      	ldr	r2, [r3, #0]
 8003af2:	4b4f      	ldr	r3, [pc, #316]	@ (8003c30 <holdEvent+0x210>)
 8003af4:	fb83 1302 	smull	r1, r3, r3, r2
 8003af8:	1119      	asrs	r1, r3, #4
 8003afa:	17d3      	asrs	r3, r2, #31
 8003afc:	1acb      	subs	r3, r1, r3
 8003afe:	2196      	movs	r1, #150	@ 0x96
 8003b00:	fb01 f303 	mul.w	r3, r1, r3
 8003b04:	1ad3      	subs	r3, r2, r3
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d11e      	bne.n	8003b48 <holdEvent+0x128>
				if(mode == CLOCK_SETTING) {
 8003b0a:	4b47      	ldr	r3, [pc, #284]	@ (8003c28 <holdEvent+0x208>)
 8003b0c:	781b      	ldrb	r3, [r3, #0]
 8003b0e:	2b03      	cmp	r3, #3
 8003b10:	d11a      	bne.n	8003b48 <holdEvent+0x128>
					incrementTime();
 8003b12:	f7fe faf7 	bl	8002104 <incrementTime>
				}
			}
			break;
 8003b16:	e017      	b.n	8003b48 <holdEvent+0x128>
		case LONG:
			if(sys.millisecond % 20 == 0) {
 8003b18:	4b44      	ldr	r3, [pc, #272]	@ (8003c2c <holdEvent+0x20c>)
 8003b1a:	6819      	ldr	r1, [r3, #0]
 8003b1c:	4b45      	ldr	r3, [pc, #276]	@ (8003c34 <holdEvent+0x214>)
 8003b1e:	fb83 2301 	smull	r2, r3, r3, r1
 8003b22:	10da      	asrs	r2, r3, #3
 8003b24:	17cb      	asrs	r3, r1, #31
 8003b26:	1ad2      	subs	r2, r2, r3
 8003b28:	4613      	mov	r3, r2
 8003b2a:	009b      	lsls	r3, r3, #2
 8003b2c:	4413      	add	r3, r2
 8003b2e:	009b      	lsls	r3, r3, #2
 8003b30:	1aca      	subs	r2, r1, r3
 8003b32:	2a00      	cmp	r2, #0
 8003b34:	d10a      	bne.n	8003b4c <holdEvent+0x12c>
				if(mode == CLOCK_SETTING) {
 8003b36:	4b3c      	ldr	r3, [pc, #240]	@ (8003c28 <holdEvent+0x208>)
 8003b38:	781b      	ldrb	r3, [r3, #0]
 8003b3a:	2b03      	cmp	r3, #3
 8003b3c:	d106      	bne.n	8003b4c <holdEvent+0x12c>
					incrementTime();
 8003b3e:	f7fe fae1 	bl	8002104 <incrementTime>

				}
			}
			break;
 8003b42:	e003      	b.n	8003b4c <holdEvent+0x12c>
			break;
 8003b44:	bf00      	nop
 8003b46:	e002      	b.n	8003b4e <holdEvent+0x12e>
			break;
 8003b48:	bf00      	nop
 8003b4a:	e000      	b.n	8003b4e <holdEvent+0x12e>
			break;
 8003b4c:	bf00      	nop

		}
	}
	if(sw4.state == TRUE) {
 8003b4e:	4b3a      	ldr	r3, [pc, #232]	@ (8003c38 <holdEvent+0x218>)
 8003b50:	781b      	ldrb	r3, [r3, #0]
 8003b52:	2b01      	cmp	r3, #1
 8003b54:	d15d      	bne.n	8003c12 <holdEvent+0x1f2>
		if(sw4.pressCnt <= LONG_PRESS) {
 8003b56:	4b38      	ldr	r3, [pc, #224]	@ (8003c38 <holdEvent+0x218>)
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	dc04      	bgt.n	8003b6c <holdEvent+0x14c>
			sw4.pressCnt++;
 8003b62:	4b35      	ldr	r3, [pc, #212]	@ (8003c38 <holdEvent+0x218>)
 8003b64:	685b      	ldr	r3, [r3, #4]
 8003b66:	3301      	adds	r3, #1
 8003b68:	4a33      	ldr	r2, [pc, #204]	@ (8003c38 <holdEvent+0x218>)
 8003b6a:	6053      	str	r3, [r2, #4]
		}
		if(sw4.pressCnt == MID_PRESS && mode == CLOCK_SETTING) {
 8003b6c:	4b32      	ldr	r3, [pc, #200]	@ (8003c38 <holdEvent+0x218>)
 8003b6e:	685b      	ldr	r3, [r3, #4]
 8003b70:	f5b3 7f2f 	cmp.w	r3, #700	@ 0x2bc
 8003b74:	d106      	bne.n	8003b84 <holdEvent+0x164>
 8003b76:	4b2c      	ldr	r3, [pc, #176]	@ (8003c28 <holdEvent+0x208>)
 8003b78:	781b      	ldrb	r3, [r3, #0]
 8003b7a:	2b03      	cmp	r3, #3
 8003b7c:	d102      	bne.n	8003b84 <holdEvent+0x164>
			playMidTone();
 8003b7e:	f7fd fdbb 	bl	80016f8 <playMidTone>
 8003b82:	e00b      	b.n	8003b9c <holdEvent+0x17c>
		} else if(sw4.pressCnt == LONG_PRESS && mode == CLOCK_SETTING) {
 8003b84:	4b2c      	ldr	r3, [pc, #176]	@ (8003c38 <holdEvent+0x218>)
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d105      	bne.n	8003b9c <holdEvent+0x17c>
 8003b90:	4b25      	ldr	r3, [pc, #148]	@ (8003c28 <holdEvent+0x208>)
 8003b92:	781b      	ldrb	r3, [r3, #0]
 8003b94:	2b03      	cmp	r3, #3
 8003b96:	d101      	bne.n	8003b9c <holdEvent+0x17c>
			playHighTone();
 8003b98:	f7fd fdc0 	bl	800171c <playHighTone>
		}
		switch(rsp) {
 8003b9c:	4b1f      	ldr	r3, [pc, #124]	@ (8003c1c <holdEvent+0x1fc>)
 8003b9e:	781b      	ldrb	r3, [r3, #0]
 8003ba0:	2b02      	cmp	r3, #2
 8003ba2:	d01b      	beq.n	8003bdc <holdEvent+0x1bc>
 8003ba4:	2b02      	cmp	r3, #2
 8003ba6:	dc34      	bgt.n	8003c12 <holdEvent+0x1f2>
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d02d      	beq.n	8003c08 <holdEvent+0x1e8>
 8003bac:	2b01      	cmp	r3, #1
 8003bae:	d000      	beq.n	8003bb2 <holdEvent+0x192>
			}
			break;

		}
	}
}
 8003bb0:	e02f      	b.n	8003c12 <holdEvent+0x1f2>
			if(sys.millisecond % 150 == 0) {
 8003bb2:	4b1e      	ldr	r3, [pc, #120]	@ (8003c2c <holdEvent+0x20c>)
 8003bb4:	681a      	ldr	r2, [r3, #0]
 8003bb6:	4b1e      	ldr	r3, [pc, #120]	@ (8003c30 <holdEvent+0x210>)
 8003bb8:	fb83 1302 	smull	r1, r3, r3, r2
 8003bbc:	1119      	asrs	r1, r3, #4
 8003bbe:	17d3      	asrs	r3, r2, #31
 8003bc0:	1acb      	subs	r3, r1, r3
 8003bc2:	2196      	movs	r1, #150	@ 0x96
 8003bc4:	fb01 f303 	mul.w	r3, r1, r3
 8003bc8:	1ad3      	subs	r3, r2, r3
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d11e      	bne.n	8003c0c <holdEvent+0x1ec>
				if(mode == CLOCK_SETTING) {
 8003bce:	4b16      	ldr	r3, [pc, #88]	@ (8003c28 <holdEvent+0x208>)
 8003bd0:	781b      	ldrb	r3, [r3, #0]
 8003bd2:	2b03      	cmp	r3, #3
 8003bd4:	d11a      	bne.n	8003c0c <holdEvent+0x1ec>
					decrementTime();
 8003bd6:	f7fe fb65 	bl	80022a4 <decrementTime>
			break;
 8003bda:	e017      	b.n	8003c0c <holdEvent+0x1ec>
			if(sys.millisecond % 20 == 0) {
 8003bdc:	4b13      	ldr	r3, [pc, #76]	@ (8003c2c <holdEvent+0x20c>)
 8003bde:	6819      	ldr	r1, [r3, #0]
 8003be0:	4b14      	ldr	r3, [pc, #80]	@ (8003c34 <holdEvent+0x214>)
 8003be2:	fb83 2301 	smull	r2, r3, r3, r1
 8003be6:	10da      	asrs	r2, r3, #3
 8003be8:	17cb      	asrs	r3, r1, #31
 8003bea:	1ad2      	subs	r2, r2, r3
 8003bec:	4613      	mov	r3, r2
 8003bee:	009b      	lsls	r3, r3, #2
 8003bf0:	4413      	add	r3, r2
 8003bf2:	009b      	lsls	r3, r3, #2
 8003bf4:	1aca      	subs	r2, r1, r3
 8003bf6:	2a00      	cmp	r2, #0
 8003bf8:	d10a      	bne.n	8003c10 <holdEvent+0x1f0>
				if(mode == CLOCK_SETTING) {
 8003bfa:	4b0b      	ldr	r3, [pc, #44]	@ (8003c28 <holdEvent+0x208>)
 8003bfc:	781b      	ldrb	r3, [r3, #0]
 8003bfe:	2b03      	cmp	r3, #3
 8003c00:	d106      	bne.n	8003c10 <holdEvent+0x1f0>
					decrementTime();
 8003c02:	f7fe fb4f 	bl	80022a4 <decrementTime>
			break;
 8003c06:	e003      	b.n	8003c10 <holdEvent+0x1f0>
			break;
 8003c08:	bf00      	nop
 8003c0a:	e002      	b.n	8003c12 <holdEvent+0x1f2>
			break;
 8003c0c:	bf00      	nop
 8003c0e:	e000      	b.n	8003c12 <holdEvent+0x1f2>
			break;
 8003c10:	bf00      	nop
}
 8003c12:	bf00      	nop
 8003c14:	bd80      	pop	{r7, pc}
 8003c16:	bf00      	nop
 8003c18:	20000294 	.word	0x20000294
 8003c1c:	20000314 	.word	0x20000314
 8003c20:	200002b0 	.word	0x200002b0
 8003c24:	200002cc 	.word	0x200002cc
 8003c28:	20000315 	.word	0x20000315
 8003c2c:	20000288 	.word	0x20000288
 8003c30:	1b4e81b5 	.word	0x1b4e81b5
 8003c34:	66666667 	.word	0x66666667
 8003c38:	200002e8 	.word	0x200002e8

08003c3c <releasePointing>:
void releasePointing(int swNum) {
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b084      	sub	sp, #16
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
		int cnt = getPressCount(swNum);
 8003c44:	6878      	ldr	r0, [r7, #4]
 8003c46:	f7ff feb7 	bl	80039b8 <getPressCount>
 8003c4a:	60f8      	str	r0, [r7, #12]
		if(cnt < MID_PRESS) {
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	f5b3 7f2f 	cmp.w	r3, #700	@ 0x2bc
 8003c52:	da03      	bge.n	8003c5c <releasePointing+0x20>
			rsp = SHORT;
 8003c54:	4b0b      	ldr	r3, [pc, #44]	@ (8003c84 <releasePointing+0x48>)
 8003c56:	2200      	movs	r2, #0
 8003c58:	701a      	strb	r2, [r3, #0]
		} else if(cnt > MID_PRESS && cnt < LONG_PRESS) {
			rsp = MID;
		} else {
			rsp = LONG;
		}
}
 8003c5a:	e00f      	b.n	8003c7c <releasePointing+0x40>
		} else if(cnt > MID_PRESS && cnt < LONG_PRESS) {
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	f5b3 7f2f 	cmp.w	r3, #700	@ 0x2bc
 8003c62:	dd08      	ble.n	8003c76 <releasePointing+0x3a>
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	f640 12c3 	movw	r2, #2499	@ 0x9c3
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	dc03      	bgt.n	8003c76 <releasePointing+0x3a>
			rsp = MID;
 8003c6e:	4b05      	ldr	r3, [pc, #20]	@ (8003c84 <releasePointing+0x48>)
 8003c70:	2201      	movs	r2, #1
 8003c72:	701a      	strb	r2, [r3, #0]
}
 8003c74:	e002      	b.n	8003c7c <releasePointing+0x40>
			rsp = LONG;
 8003c76:	4b03      	ldr	r3, [pc, #12]	@ (8003c84 <releasePointing+0x48>)
 8003c78:	2202      	movs	r2, #2
 8003c7a:	701a      	strb	r2, [r3, #0]
}
 8003c7c:	bf00      	nop
 8003c7e:	3710      	adds	r7, #16
 8003c80:	46bd      	mov	sp, r7
 8003c82:	bd80      	pop	{r7, pc}
 8003c84:	20000314 	.word	0x20000314

08003c88 <sw1DefaultHandler>:

void sw1DefaultHandler() {
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	af00      	add	r7, sp, #0
	sw1.pressCnt = 0;
 8003c8c:	4b06      	ldr	r3, [pc, #24]	@ (8003ca8 <sw1DefaultHandler+0x20>)
 8003c8e:	2200      	movs	r2, #0
 8003c90:	605a      	str	r2, [r3, #4]
	if(getBuzzEnabled() == TRUE) {
 8003c92:	f7fd fe19 	bl	80018c8 <getBuzzEnabled>
 8003c96:	4603      	mov	r3, r0
 8003c98:	2b01      	cmp	r3, #1
 8003c9a:	d102      	bne.n	8003ca2 <sw1DefaultHandler+0x1a>
		setbuzzerOnOff(1);		   // 부저 on
 8003c9c:	2001      	movs	r0, #1
 8003c9e:	f7fd fe2f 	bl	8001900 <setbuzzerOnOff>
	}
}
 8003ca2:	bf00      	nop
 8003ca4:	bd80      	pop	{r7, pc}
 8003ca6:	bf00      	nop
 8003ca8:	20000294 	.word	0x20000294

08003cac <sw2DefaultHandler>:
void sw2DefaultHandler() {
 8003cac:	b580      	push	{r7, lr}
 8003cae:	af00      	add	r7, sp, #0
	sw2.pressCnt = 0;
 8003cb0:	4b06      	ldr	r3, [pc, #24]	@ (8003ccc <sw2DefaultHandler+0x20>)
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	605a      	str	r2, [r3, #4]
	if(getBuzzEnabled() == TRUE) {
 8003cb6:	f7fd fe07 	bl	80018c8 <getBuzzEnabled>
 8003cba:	4603      	mov	r3, r0
 8003cbc:	2b01      	cmp	r3, #1
 8003cbe:	d102      	bne.n	8003cc6 <sw2DefaultHandler+0x1a>
		setbuzzerOnOff(1);		   // 부저 on
 8003cc0:	2001      	movs	r0, #1
 8003cc2:	f7fd fe1d 	bl	8001900 <setbuzzerOnOff>
	}
}
 8003cc6:	bf00      	nop
 8003cc8:	bd80      	pop	{r7, pc}
 8003cca:	bf00      	nop
 8003ccc:	200002b0 	.word	0x200002b0

08003cd0 <sw3DefaultHandler>:
void sw3DefaultHandler() {
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	af00      	add	r7, sp, #0
	sw3.pressCnt = 0;
 8003cd4:	4b06      	ldr	r3, [pc, #24]	@ (8003cf0 <sw3DefaultHandler+0x20>)
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	605a      	str	r2, [r3, #4]
	if(getBuzzEnabled() == TRUE) {
 8003cda:	f7fd fdf5 	bl	80018c8 <getBuzzEnabled>
 8003cde:	4603      	mov	r3, r0
 8003ce0:	2b01      	cmp	r3, #1
 8003ce2:	d102      	bne.n	8003cea <sw3DefaultHandler+0x1a>
		setbuzzerOnOff(1);		   // 부저 on
 8003ce4:	2001      	movs	r0, #1
 8003ce6:	f7fd fe0b 	bl	8001900 <setbuzzerOnOff>
	}
}
 8003cea:	bf00      	nop
 8003cec:	bd80      	pop	{r7, pc}
 8003cee:	bf00      	nop
 8003cf0:	200002cc 	.word	0x200002cc

08003cf4 <sw4DefaultHandler>:
void sw4DefaultHandler() {
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	af00      	add	r7, sp, #0
	sw4.pressCnt = 0;
 8003cf8:	4b06      	ldr	r3, [pc, #24]	@ (8003d14 <sw4DefaultHandler+0x20>)
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	605a      	str	r2, [r3, #4]
	if(getBuzzEnabled() == TRUE) {
 8003cfe:	f7fd fde3 	bl	80018c8 <getBuzzEnabled>
 8003d02:	4603      	mov	r3, r0
 8003d04:	2b01      	cmp	r3, #1
 8003d06:	d102      	bne.n	8003d0e <sw4DefaultHandler+0x1a>
		setbuzzerOnOff(1);		   // 부저 on
 8003d08:	2001      	movs	r0, #1
 8003d0a:	f7fd fdf9 	bl	8001900 <setbuzzerOnOff>
	}
}
 8003d0e:	bf00      	nop
 8003d10:	bd80      	pop	{r7, pc}
 8003d12:	bf00      	nop
 8003d14:	200002e8 	.word	0x200002e8

08003d18 <getBlink>:

int getSystemMillisecond() {
	return sys.millisecond;
}

uint8_t getBlink() {
 8003d18:	b480      	push	{r7}
 8003d1a:	af00      	add	r7, sp, #0
	return sys.blink;
 8003d1c:	4b03      	ldr	r3, [pc, #12]	@ (8003d2c <getBlink+0x14>)
 8003d1e:	791b      	ldrb	r3, [r3, #4]
}
 8003d20:	4618      	mov	r0, r3
 8003d22:	46bd      	mov	sp, r7
 8003d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d28:	4770      	bx	lr
 8003d2a:	bf00      	nop
 8003d2c:	20000288 	.word	0x20000288

08003d30 <getWaitingTime>:

int getWaitingTime() {
 8003d30:	b480      	push	{r7}
 8003d32:	af00      	add	r7, sp, #0
	return sys.waitingTime;
 8003d34:	4b03      	ldr	r3, [pc, #12]	@ (8003d44 <getWaitingTime+0x14>)
 8003d36:	689b      	ldr	r3, [r3, #8]
}
 8003d38:	4618      	mov	r0, r3
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d40:	4770      	bx	lr
 8003d42:	bf00      	nop
 8003d44:	20000288 	.word	0x20000288

08003d48 <setWaitingTime>:

void setWaitingTime(int t) {
 8003d48:	b480      	push	{r7}
 8003d4a:	b083      	sub	sp, #12
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
	sys.waitingTime = t;
 8003d50:	4a04      	ldr	r2, [pc, #16]	@ (8003d64 <setWaitingTime+0x1c>)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6093      	str	r3, [r2, #8]
}
 8003d56:	bf00      	nop
 8003d58:	370c      	adds	r7, #12
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d60:	4770      	bx	lr
 8003d62:	bf00      	nop
 8003d64:	20000288 	.word	0x20000288

08003d68 <systemMillisecondCount>:

void systemMillisecondCount() {
 8003d68:	b480      	push	{r7}
 8003d6a:	af00      	add	r7, sp, #0
	if(sys.millisecond < 1000) {
 8003d6c:	4b09      	ldr	r3, [pc, #36]	@ (8003d94 <systemMillisecondCount+0x2c>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003d74:	da05      	bge.n	8003d82 <systemMillisecondCount+0x1a>
		sys.millisecond++;
 8003d76:	4b07      	ldr	r3, [pc, #28]	@ (8003d94 <systemMillisecondCount+0x2c>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	3301      	adds	r3, #1
 8003d7c:	4a05      	ldr	r2, [pc, #20]	@ (8003d94 <systemMillisecondCount+0x2c>)
 8003d7e:	6013      	str	r3, [r2, #0]
	} else {
		sys.millisecond = 0;
	}
}
 8003d80:	e002      	b.n	8003d88 <systemMillisecondCount+0x20>
		sys.millisecond = 0;
 8003d82:	4b04      	ldr	r3, [pc, #16]	@ (8003d94 <systemMillisecondCount+0x2c>)
 8003d84:	2200      	movs	r2, #0
 8003d86:	601a      	str	r2, [r3, #0]
}
 8003d88:	bf00      	nop
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d90:	4770      	bx	lr
 8003d92:	bf00      	nop
 8003d94:	20000288 	.word	0x20000288

08003d98 <blinking>:

void blinking() {
 8003d98:	b480      	push	{r7}
 8003d9a:	af00      	add	r7, sp, #0
	if(sys.millisecond > 500) {
 8003d9c:	4b08      	ldr	r3, [pc, #32]	@ (8003dc0 <blinking+0x28>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8003da4:	dd03      	ble.n	8003dae <blinking+0x16>
		sys.blink = 1;
 8003da6:	4b06      	ldr	r3, [pc, #24]	@ (8003dc0 <blinking+0x28>)
 8003da8:	2201      	movs	r2, #1
 8003daa:	711a      	strb	r2, [r3, #4]
	} else {
		sys.blink = 0;
	}
}
 8003dac:	e002      	b.n	8003db4 <blinking+0x1c>
		sys.blink = 0;
 8003dae:	4b04      	ldr	r3, [pc, #16]	@ (8003dc0 <blinking+0x28>)
 8003db0:	2200      	movs	r2, #0
 8003db2:	711a      	strb	r2, [r3, #4]
}
 8003db4:	bf00      	nop
 8003db6:	46bd      	mov	sp, r7
 8003db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbc:	4770      	bx	lr
 8003dbe:	bf00      	nop
 8003dc0:	20000288 	.word	0x20000288

08003dc4 <waitingTimeCnt>:
void waitingTimeCnt() {
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	af00      	add	r7, sp, #0
	if(mode == CLOCK_SETTING || mode == ALARM){
 8003dc8:	4b0f      	ldr	r3, [pc, #60]	@ (8003e08 <waitingTimeCnt+0x44>)
 8003dca:	781b      	ldrb	r3, [r3, #0]
 8003dcc:	2b03      	cmp	r3, #3
 8003dce:	d003      	beq.n	8003dd8 <waitingTimeCnt+0x14>
 8003dd0:	4b0d      	ldr	r3, [pc, #52]	@ (8003e08 <waitingTimeCnt+0x44>)
 8003dd2:	781b      	ldrb	r3, [r3, #0]
 8003dd4:	2b01      	cmp	r3, #1
 8003dd6:	d114      	bne.n	8003e02 <waitingTimeCnt+0x3e>
		if(sys.waitingTime <= 30000) { // 30초 대기
 8003dd8:	4b0c      	ldr	r3, [pc, #48]	@ (8003e0c <waitingTimeCnt+0x48>)
 8003dda:	689b      	ldr	r3, [r3, #8]
 8003ddc:	f247 5230 	movw	r2, #30000	@ 0x7530
 8003de0:	4293      	cmp	r3, r2
 8003de2:	dc05      	bgt.n	8003df0 <waitingTimeCnt+0x2c>
			sys.waitingTime++;
 8003de4:	4b09      	ldr	r3, [pc, #36]	@ (8003e0c <waitingTimeCnt+0x48>)
 8003de6:	689b      	ldr	r3, [r3, #8]
 8003de8:	3301      	adds	r3, #1
 8003dea:	4a08      	ldr	r2, [pc, #32]	@ (8003e0c <waitingTimeCnt+0x48>)
 8003dec:	6093      	str	r3, [r2, #8]
			setbuzzerOnOff(1);
			sys.waitingTime = 0;
			mode = CLOCK;
		}
	}
}
 8003dee:	e008      	b.n	8003e02 <waitingTimeCnt+0x3e>
			setbuzzerOnOff(1);
 8003df0:	2001      	movs	r0, #1
 8003df2:	f7fd fd85 	bl	8001900 <setbuzzerOnOff>
			sys.waitingTime = 0;
 8003df6:	4b05      	ldr	r3, [pc, #20]	@ (8003e0c <waitingTimeCnt+0x48>)
 8003df8:	2200      	movs	r2, #0
 8003dfa:	609a      	str	r2, [r3, #8]
			mode = CLOCK;
 8003dfc:	4b02      	ldr	r3, [pc, #8]	@ (8003e08 <waitingTimeCnt+0x44>)
 8003dfe:	2200      	movs	r2, #0
 8003e00:	701a      	strb	r2, [r3, #0]
}
 8003e02:	bf00      	nop
 8003e04:	bd80      	pop	{r7, pc}
 8003e06:	bf00      	nop
 8003e08:	20000315 	.word	0x20000315
 8003e0c:	20000288 	.word	0x20000288

08003e10 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b086      	sub	sp, #24
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003e18:	4a14      	ldr	r2, [pc, #80]	@ (8003e6c <_sbrk+0x5c>)
 8003e1a:	4b15      	ldr	r3, [pc, #84]	@ (8003e70 <_sbrk+0x60>)
 8003e1c:	1ad3      	subs	r3, r2, r3
 8003e1e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003e20:	697b      	ldr	r3, [r7, #20]
 8003e22:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003e24:	4b13      	ldr	r3, [pc, #76]	@ (8003e74 <_sbrk+0x64>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d102      	bne.n	8003e32 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003e2c:	4b11      	ldr	r3, [pc, #68]	@ (8003e74 <_sbrk+0x64>)
 8003e2e:	4a12      	ldr	r2, [pc, #72]	@ (8003e78 <_sbrk+0x68>)
 8003e30:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003e32:	4b10      	ldr	r3, [pc, #64]	@ (8003e74 <_sbrk+0x64>)
 8003e34:	681a      	ldr	r2, [r3, #0]
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	4413      	add	r3, r2
 8003e3a:	693a      	ldr	r2, [r7, #16]
 8003e3c:	429a      	cmp	r2, r3
 8003e3e:	d207      	bcs.n	8003e50 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003e40:	f003 f966 	bl	8007110 <__errno>
 8003e44:	4603      	mov	r3, r0
 8003e46:	220c      	movs	r2, #12
 8003e48:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003e4a:	f04f 33ff 	mov.w	r3, #4294967295
 8003e4e:	e009      	b.n	8003e64 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003e50:	4b08      	ldr	r3, [pc, #32]	@ (8003e74 <_sbrk+0x64>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003e56:	4b07      	ldr	r3, [pc, #28]	@ (8003e74 <_sbrk+0x64>)
 8003e58:	681a      	ldr	r2, [r3, #0]
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	4413      	add	r3, r2
 8003e5e:	4a05      	ldr	r2, [pc, #20]	@ (8003e74 <_sbrk+0x64>)
 8003e60:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003e62:	68fb      	ldr	r3, [r7, #12]
}
 8003e64:	4618      	mov	r0, r3
 8003e66:	3718      	adds	r7, #24
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	bd80      	pop	{r7, pc}
 8003e6c:	20020000 	.word	0x20020000
 8003e70:	00000400 	.word	0x00000400
 8003e74:	20000318 	.word	0x20000318
 8003e78:	20000470 	.word	0x20000470

08003e7c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003e7c:	b480      	push	{r7}
 8003e7e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003e80:	4b06      	ldr	r3, [pc, #24]	@ (8003e9c <SystemInit+0x20>)
 8003e82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e86:	4a05      	ldr	r2, [pc, #20]	@ (8003e9c <SystemInit+0x20>)
 8003e88:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003e8c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003e90:	bf00      	nop
 8003e92:	46bd      	mov	sp, r7
 8003e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e98:	4770      	bx	lr
 8003e9a:	bf00      	nop
 8003e9c:	e000ed00 	.word	0xe000ed00

08003ea0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003ea0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003ed8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8003ea4:	f7ff ffea 	bl	8003e7c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003ea8:	480c      	ldr	r0, [pc, #48]	@ (8003edc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003eaa:	490d      	ldr	r1, [pc, #52]	@ (8003ee0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003eac:	4a0d      	ldr	r2, [pc, #52]	@ (8003ee4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003eae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003eb0:	e002      	b.n	8003eb8 <LoopCopyDataInit>

08003eb2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003eb2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003eb4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003eb6:	3304      	adds	r3, #4

08003eb8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003eb8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003eba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003ebc:	d3f9      	bcc.n	8003eb2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003ebe:	4a0a      	ldr	r2, [pc, #40]	@ (8003ee8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003ec0:	4c0a      	ldr	r4, [pc, #40]	@ (8003eec <LoopFillZerobss+0x22>)
  movs r3, #0
 8003ec2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003ec4:	e001      	b.n	8003eca <LoopFillZerobss>

08003ec6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003ec6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003ec8:	3204      	adds	r2, #4

08003eca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003eca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003ecc:	d3fb      	bcc.n	8003ec6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003ece:	f003 f925 	bl	800711c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003ed2:	f7fe fadb 	bl	800248c <main>
  bx  lr    
 8003ed6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003ed8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003edc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003ee0:	20000190 	.word	0x20000190
  ldr r2, =_sidata
 8003ee4:	08007cd8 	.word	0x08007cd8
  ldr r2, =_sbss
 8003ee8:	20000190 	.word	0x20000190
  ldr r4, =_ebss
 8003eec:	2000046c 	.word	0x2000046c

08003ef0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003ef0:	e7fe      	b.n	8003ef0 <ADC_IRQHandler>
	...

08003ef4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003ef8:	4b0e      	ldr	r3, [pc, #56]	@ (8003f34 <HAL_Init+0x40>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4a0d      	ldr	r2, [pc, #52]	@ (8003f34 <HAL_Init+0x40>)
 8003efe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003f02:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003f04:	4b0b      	ldr	r3, [pc, #44]	@ (8003f34 <HAL_Init+0x40>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4a0a      	ldr	r2, [pc, #40]	@ (8003f34 <HAL_Init+0x40>)
 8003f0a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003f0e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003f10:	4b08      	ldr	r3, [pc, #32]	@ (8003f34 <HAL_Init+0x40>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4a07      	ldr	r2, [pc, #28]	@ (8003f34 <HAL_Init+0x40>)
 8003f16:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003f1a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003f1c:	2003      	movs	r0, #3
 8003f1e:	f000 f94f 	bl	80041c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003f22:	200f      	movs	r0, #15
 8003f24:	f000 f808 	bl	8003f38 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003f28:	f7fe fe1a 	bl	8002b60 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003f2c:	2300      	movs	r3, #0
}
 8003f2e:	4618      	mov	r0, r3
 8003f30:	bd80      	pop	{r7, pc}
 8003f32:	bf00      	nop
 8003f34:	40023c00 	.word	0x40023c00

08003f38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b082      	sub	sp, #8
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003f40:	4b12      	ldr	r3, [pc, #72]	@ (8003f8c <HAL_InitTick+0x54>)
 8003f42:	681a      	ldr	r2, [r3, #0]
 8003f44:	4b12      	ldr	r3, [pc, #72]	@ (8003f90 <HAL_InitTick+0x58>)
 8003f46:	781b      	ldrb	r3, [r3, #0]
 8003f48:	4619      	mov	r1, r3
 8003f4a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003f4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003f52:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f56:	4618      	mov	r0, r3
 8003f58:	f000 f967 	bl	800422a <HAL_SYSTICK_Config>
 8003f5c:	4603      	mov	r3, r0
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d001      	beq.n	8003f66 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003f62:	2301      	movs	r3, #1
 8003f64:	e00e      	b.n	8003f84 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2b0f      	cmp	r3, #15
 8003f6a:	d80a      	bhi.n	8003f82 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	6879      	ldr	r1, [r7, #4]
 8003f70:	f04f 30ff 	mov.w	r0, #4294967295
 8003f74:	f000 f92f 	bl	80041d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003f78:	4a06      	ldr	r2, [pc, #24]	@ (8003f94 <HAL_InitTick+0x5c>)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003f7e:	2300      	movs	r3, #0
 8003f80:	e000      	b.n	8003f84 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003f82:	2301      	movs	r3, #1
}
 8003f84:	4618      	mov	r0, r3
 8003f86:	3708      	adds	r7, #8
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	bd80      	pop	{r7, pc}
 8003f8c:	20000134 	.word	0x20000134
 8003f90:	2000013c 	.word	0x2000013c
 8003f94:	20000138 	.word	0x20000138

08003f98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003f98:	b480      	push	{r7}
 8003f9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003f9c:	4b06      	ldr	r3, [pc, #24]	@ (8003fb8 <HAL_IncTick+0x20>)
 8003f9e:	781b      	ldrb	r3, [r3, #0]
 8003fa0:	461a      	mov	r2, r3
 8003fa2:	4b06      	ldr	r3, [pc, #24]	@ (8003fbc <HAL_IncTick+0x24>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4413      	add	r3, r2
 8003fa8:	4a04      	ldr	r2, [pc, #16]	@ (8003fbc <HAL_IncTick+0x24>)
 8003faa:	6013      	str	r3, [r2, #0]
}
 8003fac:	bf00      	nop
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb4:	4770      	bx	lr
 8003fb6:	bf00      	nop
 8003fb8:	2000013c 	.word	0x2000013c
 8003fbc:	20000320 	.word	0x20000320

08003fc0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003fc0:	b480      	push	{r7}
 8003fc2:	af00      	add	r7, sp, #0
  return uwTick;
 8003fc4:	4b03      	ldr	r3, [pc, #12]	@ (8003fd4 <HAL_GetTick+0x14>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
}
 8003fc8:	4618      	mov	r0, r3
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd0:	4770      	bx	lr
 8003fd2:	bf00      	nop
 8003fd4:	20000320 	.word	0x20000320

08003fd8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b084      	sub	sp, #16
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003fe0:	f7ff ffee 	bl	8003fc0 <HAL_GetTick>
 8003fe4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ff0:	d005      	beq.n	8003ffe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003ff2:	4b0a      	ldr	r3, [pc, #40]	@ (800401c <HAL_Delay+0x44>)
 8003ff4:	781b      	ldrb	r3, [r3, #0]
 8003ff6:	461a      	mov	r2, r3
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	4413      	add	r3, r2
 8003ffc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003ffe:	bf00      	nop
 8004000:	f7ff ffde 	bl	8003fc0 <HAL_GetTick>
 8004004:	4602      	mov	r2, r0
 8004006:	68bb      	ldr	r3, [r7, #8]
 8004008:	1ad3      	subs	r3, r2, r3
 800400a:	68fa      	ldr	r2, [r7, #12]
 800400c:	429a      	cmp	r2, r3
 800400e:	d8f7      	bhi.n	8004000 <HAL_Delay+0x28>
  {
  }
}
 8004010:	bf00      	nop
 8004012:	bf00      	nop
 8004014:	3710      	adds	r7, #16
 8004016:	46bd      	mov	sp, r7
 8004018:	bd80      	pop	{r7, pc}
 800401a:	bf00      	nop
 800401c:	2000013c 	.word	0x2000013c

08004020 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004020:	b480      	push	{r7}
 8004022:	b085      	sub	sp, #20
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	f003 0307 	and.w	r3, r3, #7
 800402e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004030:	4b0c      	ldr	r3, [pc, #48]	@ (8004064 <__NVIC_SetPriorityGrouping+0x44>)
 8004032:	68db      	ldr	r3, [r3, #12]
 8004034:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004036:	68ba      	ldr	r2, [r7, #8]
 8004038:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800403c:	4013      	ands	r3, r2
 800403e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004044:	68bb      	ldr	r3, [r7, #8]
 8004046:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004048:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800404c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004050:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004052:	4a04      	ldr	r2, [pc, #16]	@ (8004064 <__NVIC_SetPriorityGrouping+0x44>)
 8004054:	68bb      	ldr	r3, [r7, #8]
 8004056:	60d3      	str	r3, [r2, #12]
}
 8004058:	bf00      	nop
 800405a:	3714      	adds	r7, #20
 800405c:	46bd      	mov	sp, r7
 800405e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004062:	4770      	bx	lr
 8004064:	e000ed00 	.word	0xe000ed00

08004068 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004068:	b480      	push	{r7}
 800406a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800406c:	4b04      	ldr	r3, [pc, #16]	@ (8004080 <__NVIC_GetPriorityGrouping+0x18>)
 800406e:	68db      	ldr	r3, [r3, #12]
 8004070:	0a1b      	lsrs	r3, r3, #8
 8004072:	f003 0307 	and.w	r3, r3, #7
}
 8004076:	4618      	mov	r0, r3
 8004078:	46bd      	mov	sp, r7
 800407a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407e:	4770      	bx	lr
 8004080:	e000ed00 	.word	0xe000ed00

08004084 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004084:	b480      	push	{r7}
 8004086:	b083      	sub	sp, #12
 8004088:	af00      	add	r7, sp, #0
 800408a:	4603      	mov	r3, r0
 800408c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800408e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004092:	2b00      	cmp	r3, #0
 8004094:	db0b      	blt.n	80040ae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004096:	79fb      	ldrb	r3, [r7, #7]
 8004098:	f003 021f 	and.w	r2, r3, #31
 800409c:	4907      	ldr	r1, [pc, #28]	@ (80040bc <__NVIC_EnableIRQ+0x38>)
 800409e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040a2:	095b      	lsrs	r3, r3, #5
 80040a4:	2001      	movs	r0, #1
 80040a6:	fa00 f202 	lsl.w	r2, r0, r2
 80040aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80040ae:	bf00      	nop
 80040b0:	370c      	adds	r7, #12
 80040b2:	46bd      	mov	sp, r7
 80040b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b8:	4770      	bx	lr
 80040ba:	bf00      	nop
 80040bc:	e000e100 	.word	0xe000e100

080040c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80040c0:	b480      	push	{r7}
 80040c2:	b083      	sub	sp, #12
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	4603      	mov	r3, r0
 80040c8:	6039      	str	r1, [r7, #0]
 80040ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80040cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	db0a      	blt.n	80040ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	b2da      	uxtb	r2, r3
 80040d8:	490c      	ldr	r1, [pc, #48]	@ (800410c <__NVIC_SetPriority+0x4c>)
 80040da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040de:	0112      	lsls	r2, r2, #4
 80040e0:	b2d2      	uxtb	r2, r2
 80040e2:	440b      	add	r3, r1
 80040e4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80040e8:	e00a      	b.n	8004100 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	b2da      	uxtb	r2, r3
 80040ee:	4908      	ldr	r1, [pc, #32]	@ (8004110 <__NVIC_SetPriority+0x50>)
 80040f0:	79fb      	ldrb	r3, [r7, #7]
 80040f2:	f003 030f 	and.w	r3, r3, #15
 80040f6:	3b04      	subs	r3, #4
 80040f8:	0112      	lsls	r2, r2, #4
 80040fa:	b2d2      	uxtb	r2, r2
 80040fc:	440b      	add	r3, r1
 80040fe:	761a      	strb	r2, [r3, #24]
}
 8004100:	bf00      	nop
 8004102:	370c      	adds	r7, #12
 8004104:	46bd      	mov	sp, r7
 8004106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410a:	4770      	bx	lr
 800410c:	e000e100 	.word	0xe000e100
 8004110:	e000ed00 	.word	0xe000ed00

08004114 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004114:	b480      	push	{r7}
 8004116:	b089      	sub	sp, #36	@ 0x24
 8004118:	af00      	add	r7, sp, #0
 800411a:	60f8      	str	r0, [r7, #12]
 800411c:	60b9      	str	r1, [r7, #8]
 800411e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	f003 0307 	and.w	r3, r3, #7
 8004126:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004128:	69fb      	ldr	r3, [r7, #28]
 800412a:	f1c3 0307 	rsb	r3, r3, #7
 800412e:	2b04      	cmp	r3, #4
 8004130:	bf28      	it	cs
 8004132:	2304      	movcs	r3, #4
 8004134:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004136:	69fb      	ldr	r3, [r7, #28]
 8004138:	3304      	adds	r3, #4
 800413a:	2b06      	cmp	r3, #6
 800413c:	d902      	bls.n	8004144 <NVIC_EncodePriority+0x30>
 800413e:	69fb      	ldr	r3, [r7, #28]
 8004140:	3b03      	subs	r3, #3
 8004142:	e000      	b.n	8004146 <NVIC_EncodePriority+0x32>
 8004144:	2300      	movs	r3, #0
 8004146:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004148:	f04f 32ff 	mov.w	r2, #4294967295
 800414c:	69bb      	ldr	r3, [r7, #24]
 800414e:	fa02 f303 	lsl.w	r3, r2, r3
 8004152:	43da      	mvns	r2, r3
 8004154:	68bb      	ldr	r3, [r7, #8]
 8004156:	401a      	ands	r2, r3
 8004158:	697b      	ldr	r3, [r7, #20]
 800415a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800415c:	f04f 31ff 	mov.w	r1, #4294967295
 8004160:	697b      	ldr	r3, [r7, #20]
 8004162:	fa01 f303 	lsl.w	r3, r1, r3
 8004166:	43d9      	mvns	r1, r3
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800416c:	4313      	orrs	r3, r2
         );
}
 800416e:	4618      	mov	r0, r3
 8004170:	3724      	adds	r7, #36	@ 0x24
 8004172:	46bd      	mov	sp, r7
 8004174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004178:	4770      	bx	lr
	...

0800417c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b082      	sub	sp, #8
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	3b01      	subs	r3, #1
 8004188:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800418c:	d301      	bcc.n	8004192 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800418e:	2301      	movs	r3, #1
 8004190:	e00f      	b.n	80041b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004192:	4a0a      	ldr	r2, [pc, #40]	@ (80041bc <SysTick_Config+0x40>)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	3b01      	subs	r3, #1
 8004198:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800419a:	210f      	movs	r1, #15
 800419c:	f04f 30ff 	mov.w	r0, #4294967295
 80041a0:	f7ff ff8e 	bl	80040c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80041a4:	4b05      	ldr	r3, [pc, #20]	@ (80041bc <SysTick_Config+0x40>)
 80041a6:	2200      	movs	r2, #0
 80041a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80041aa:	4b04      	ldr	r3, [pc, #16]	@ (80041bc <SysTick_Config+0x40>)
 80041ac:	2207      	movs	r2, #7
 80041ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80041b0:	2300      	movs	r3, #0
}
 80041b2:	4618      	mov	r0, r3
 80041b4:	3708      	adds	r7, #8
 80041b6:	46bd      	mov	sp, r7
 80041b8:	bd80      	pop	{r7, pc}
 80041ba:	bf00      	nop
 80041bc:	e000e010 	.word	0xe000e010

080041c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b082      	sub	sp, #8
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80041c8:	6878      	ldr	r0, [r7, #4]
 80041ca:	f7ff ff29 	bl	8004020 <__NVIC_SetPriorityGrouping>
}
 80041ce:	bf00      	nop
 80041d0:	3708      	adds	r7, #8
 80041d2:	46bd      	mov	sp, r7
 80041d4:	bd80      	pop	{r7, pc}

080041d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80041d6:	b580      	push	{r7, lr}
 80041d8:	b086      	sub	sp, #24
 80041da:	af00      	add	r7, sp, #0
 80041dc:	4603      	mov	r3, r0
 80041de:	60b9      	str	r1, [r7, #8]
 80041e0:	607a      	str	r2, [r7, #4]
 80041e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80041e4:	2300      	movs	r3, #0
 80041e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80041e8:	f7ff ff3e 	bl	8004068 <__NVIC_GetPriorityGrouping>
 80041ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80041ee:	687a      	ldr	r2, [r7, #4]
 80041f0:	68b9      	ldr	r1, [r7, #8]
 80041f2:	6978      	ldr	r0, [r7, #20]
 80041f4:	f7ff ff8e 	bl	8004114 <NVIC_EncodePriority>
 80041f8:	4602      	mov	r2, r0
 80041fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80041fe:	4611      	mov	r1, r2
 8004200:	4618      	mov	r0, r3
 8004202:	f7ff ff5d 	bl	80040c0 <__NVIC_SetPriority>
}
 8004206:	bf00      	nop
 8004208:	3718      	adds	r7, #24
 800420a:	46bd      	mov	sp, r7
 800420c:	bd80      	pop	{r7, pc}

0800420e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800420e:	b580      	push	{r7, lr}
 8004210:	b082      	sub	sp, #8
 8004212:	af00      	add	r7, sp, #0
 8004214:	4603      	mov	r3, r0
 8004216:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004218:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800421c:	4618      	mov	r0, r3
 800421e:	f7ff ff31 	bl	8004084 <__NVIC_EnableIRQ>
}
 8004222:	bf00      	nop
 8004224:	3708      	adds	r7, #8
 8004226:	46bd      	mov	sp, r7
 8004228:	bd80      	pop	{r7, pc}

0800422a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800422a:	b580      	push	{r7, lr}
 800422c:	b082      	sub	sp, #8
 800422e:	af00      	add	r7, sp, #0
 8004230:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004232:	6878      	ldr	r0, [r7, #4]
 8004234:	f7ff ffa2 	bl	800417c <SysTick_Config>
 8004238:	4603      	mov	r3, r0
}
 800423a:	4618      	mov	r0, r3
 800423c:	3708      	adds	r7, #8
 800423e:	46bd      	mov	sp, r7
 8004240:	bd80      	pop	{r7, pc}

08004242 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004242:	b580      	push	{r7, lr}
 8004244:	b084      	sub	sp, #16
 8004246:	af00      	add	r7, sp, #0
 8004248:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800424e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004250:	f7ff feb6 	bl	8003fc0 <HAL_GetTick>
 8004254:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800425c:	b2db      	uxtb	r3, r3
 800425e:	2b02      	cmp	r3, #2
 8004260:	d008      	beq.n	8004274 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2280      	movs	r2, #128	@ 0x80
 8004266:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2200      	movs	r2, #0
 800426c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8004270:	2301      	movs	r3, #1
 8004272:	e052      	b.n	800431a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	681a      	ldr	r2, [r3, #0]
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f022 0216 	bic.w	r2, r2, #22
 8004282:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	695a      	ldr	r2, [r3, #20]
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004292:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004298:	2b00      	cmp	r3, #0
 800429a:	d103      	bne.n	80042a4 <HAL_DMA_Abort+0x62>
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d007      	beq.n	80042b4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	681a      	ldr	r2, [r3, #0]
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f022 0208 	bic.w	r2, r2, #8
 80042b2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	681a      	ldr	r2, [r3, #0]
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f022 0201 	bic.w	r2, r2, #1
 80042c2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80042c4:	e013      	b.n	80042ee <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80042c6:	f7ff fe7b 	bl	8003fc0 <HAL_GetTick>
 80042ca:	4602      	mov	r2, r0
 80042cc:	68bb      	ldr	r3, [r7, #8]
 80042ce:	1ad3      	subs	r3, r2, r3
 80042d0:	2b05      	cmp	r3, #5
 80042d2:	d90c      	bls.n	80042ee <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2220      	movs	r2, #32
 80042d8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2203      	movs	r2, #3
 80042de:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2200      	movs	r2, #0
 80042e6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80042ea:	2303      	movs	r3, #3
 80042ec:	e015      	b.n	800431a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f003 0301 	and.w	r3, r3, #1
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d1e4      	bne.n	80042c6 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004300:	223f      	movs	r2, #63	@ 0x3f
 8004302:	409a      	lsls	r2, r3
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2201      	movs	r2, #1
 800430c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2200      	movs	r2, #0
 8004314:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8004318:	2300      	movs	r3, #0
}
 800431a:	4618      	mov	r0, r3
 800431c:	3710      	adds	r7, #16
 800431e:	46bd      	mov	sp, r7
 8004320:	bd80      	pop	{r7, pc}

08004322 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004322:	b480      	push	{r7}
 8004324:	b083      	sub	sp, #12
 8004326:	af00      	add	r7, sp, #0
 8004328:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004330:	b2db      	uxtb	r3, r3
 8004332:	2b02      	cmp	r3, #2
 8004334:	d004      	beq.n	8004340 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2280      	movs	r2, #128	@ 0x80
 800433a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800433c:	2301      	movs	r3, #1
 800433e:	e00c      	b.n	800435a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2205      	movs	r2, #5
 8004344:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	681a      	ldr	r2, [r3, #0]
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f022 0201 	bic.w	r2, r2, #1
 8004356:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004358:	2300      	movs	r3, #0
}
 800435a:	4618      	mov	r0, r3
 800435c:	370c      	adds	r7, #12
 800435e:	46bd      	mov	sp, r7
 8004360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004364:	4770      	bx	lr
	...

08004368 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004368:	b480      	push	{r7}
 800436a:	b089      	sub	sp, #36	@ 0x24
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
 8004370:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004372:	2300      	movs	r3, #0
 8004374:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004376:	2300      	movs	r3, #0
 8004378:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800437a:	2300      	movs	r3, #0
 800437c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800437e:	2300      	movs	r3, #0
 8004380:	61fb      	str	r3, [r7, #28]
 8004382:	e16b      	b.n	800465c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004384:	2201      	movs	r2, #1
 8004386:	69fb      	ldr	r3, [r7, #28]
 8004388:	fa02 f303 	lsl.w	r3, r2, r3
 800438c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	697a      	ldr	r2, [r7, #20]
 8004394:	4013      	ands	r3, r2
 8004396:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004398:	693a      	ldr	r2, [r7, #16]
 800439a:	697b      	ldr	r3, [r7, #20]
 800439c:	429a      	cmp	r2, r3
 800439e:	f040 815a 	bne.w	8004656 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	685b      	ldr	r3, [r3, #4]
 80043a6:	f003 0303 	and.w	r3, r3, #3
 80043aa:	2b01      	cmp	r3, #1
 80043ac:	d005      	beq.n	80043ba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	685b      	ldr	r3, [r3, #4]
 80043b2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80043b6:	2b02      	cmp	r3, #2
 80043b8:	d130      	bne.n	800441c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	689b      	ldr	r3, [r3, #8]
 80043be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80043c0:	69fb      	ldr	r3, [r7, #28]
 80043c2:	005b      	lsls	r3, r3, #1
 80043c4:	2203      	movs	r2, #3
 80043c6:	fa02 f303 	lsl.w	r3, r2, r3
 80043ca:	43db      	mvns	r3, r3
 80043cc:	69ba      	ldr	r2, [r7, #24]
 80043ce:	4013      	ands	r3, r2
 80043d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	68da      	ldr	r2, [r3, #12]
 80043d6:	69fb      	ldr	r3, [r7, #28]
 80043d8:	005b      	lsls	r3, r3, #1
 80043da:	fa02 f303 	lsl.w	r3, r2, r3
 80043de:	69ba      	ldr	r2, [r7, #24]
 80043e0:	4313      	orrs	r3, r2
 80043e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	69ba      	ldr	r2, [r7, #24]
 80043e8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	685b      	ldr	r3, [r3, #4]
 80043ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80043f0:	2201      	movs	r2, #1
 80043f2:	69fb      	ldr	r3, [r7, #28]
 80043f4:	fa02 f303 	lsl.w	r3, r2, r3
 80043f8:	43db      	mvns	r3, r3
 80043fa:	69ba      	ldr	r2, [r7, #24]
 80043fc:	4013      	ands	r3, r2
 80043fe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	685b      	ldr	r3, [r3, #4]
 8004404:	091b      	lsrs	r3, r3, #4
 8004406:	f003 0201 	and.w	r2, r3, #1
 800440a:	69fb      	ldr	r3, [r7, #28]
 800440c:	fa02 f303 	lsl.w	r3, r2, r3
 8004410:	69ba      	ldr	r2, [r7, #24]
 8004412:	4313      	orrs	r3, r2
 8004414:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	69ba      	ldr	r2, [r7, #24]
 800441a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	685b      	ldr	r3, [r3, #4]
 8004420:	f003 0303 	and.w	r3, r3, #3
 8004424:	2b03      	cmp	r3, #3
 8004426:	d017      	beq.n	8004458 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	68db      	ldr	r3, [r3, #12]
 800442c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800442e:	69fb      	ldr	r3, [r7, #28]
 8004430:	005b      	lsls	r3, r3, #1
 8004432:	2203      	movs	r2, #3
 8004434:	fa02 f303 	lsl.w	r3, r2, r3
 8004438:	43db      	mvns	r3, r3
 800443a:	69ba      	ldr	r2, [r7, #24]
 800443c:	4013      	ands	r3, r2
 800443e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	689a      	ldr	r2, [r3, #8]
 8004444:	69fb      	ldr	r3, [r7, #28]
 8004446:	005b      	lsls	r3, r3, #1
 8004448:	fa02 f303 	lsl.w	r3, r2, r3
 800444c:	69ba      	ldr	r2, [r7, #24]
 800444e:	4313      	orrs	r3, r2
 8004450:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	69ba      	ldr	r2, [r7, #24]
 8004456:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	685b      	ldr	r3, [r3, #4]
 800445c:	f003 0303 	and.w	r3, r3, #3
 8004460:	2b02      	cmp	r3, #2
 8004462:	d123      	bne.n	80044ac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004464:	69fb      	ldr	r3, [r7, #28]
 8004466:	08da      	lsrs	r2, r3, #3
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	3208      	adds	r2, #8
 800446c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004470:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004472:	69fb      	ldr	r3, [r7, #28]
 8004474:	f003 0307 	and.w	r3, r3, #7
 8004478:	009b      	lsls	r3, r3, #2
 800447a:	220f      	movs	r2, #15
 800447c:	fa02 f303 	lsl.w	r3, r2, r3
 8004480:	43db      	mvns	r3, r3
 8004482:	69ba      	ldr	r2, [r7, #24]
 8004484:	4013      	ands	r3, r2
 8004486:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	691a      	ldr	r2, [r3, #16]
 800448c:	69fb      	ldr	r3, [r7, #28]
 800448e:	f003 0307 	and.w	r3, r3, #7
 8004492:	009b      	lsls	r3, r3, #2
 8004494:	fa02 f303 	lsl.w	r3, r2, r3
 8004498:	69ba      	ldr	r2, [r7, #24]
 800449a:	4313      	orrs	r3, r2
 800449c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800449e:	69fb      	ldr	r3, [r7, #28]
 80044a0:	08da      	lsrs	r2, r3, #3
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	3208      	adds	r2, #8
 80044a6:	69b9      	ldr	r1, [r7, #24]
 80044a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80044b2:	69fb      	ldr	r3, [r7, #28]
 80044b4:	005b      	lsls	r3, r3, #1
 80044b6:	2203      	movs	r2, #3
 80044b8:	fa02 f303 	lsl.w	r3, r2, r3
 80044bc:	43db      	mvns	r3, r3
 80044be:	69ba      	ldr	r2, [r7, #24]
 80044c0:	4013      	ands	r3, r2
 80044c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	685b      	ldr	r3, [r3, #4]
 80044c8:	f003 0203 	and.w	r2, r3, #3
 80044cc:	69fb      	ldr	r3, [r7, #28]
 80044ce:	005b      	lsls	r3, r3, #1
 80044d0:	fa02 f303 	lsl.w	r3, r2, r3
 80044d4:	69ba      	ldr	r2, [r7, #24]
 80044d6:	4313      	orrs	r3, r2
 80044d8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	69ba      	ldr	r2, [r7, #24]
 80044de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	685b      	ldr	r3, [r3, #4]
 80044e4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	f000 80b4 	beq.w	8004656 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80044ee:	2300      	movs	r3, #0
 80044f0:	60fb      	str	r3, [r7, #12]
 80044f2:	4b60      	ldr	r3, [pc, #384]	@ (8004674 <HAL_GPIO_Init+0x30c>)
 80044f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044f6:	4a5f      	ldr	r2, [pc, #380]	@ (8004674 <HAL_GPIO_Init+0x30c>)
 80044f8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80044fc:	6453      	str	r3, [r2, #68]	@ 0x44
 80044fe:	4b5d      	ldr	r3, [pc, #372]	@ (8004674 <HAL_GPIO_Init+0x30c>)
 8004500:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004502:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004506:	60fb      	str	r3, [r7, #12]
 8004508:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800450a:	4a5b      	ldr	r2, [pc, #364]	@ (8004678 <HAL_GPIO_Init+0x310>)
 800450c:	69fb      	ldr	r3, [r7, #28]
 800450e:	089b      	lsrs	r3, r3, #2
 8004510:	3302      	adds	r3, #2
 8004512:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004516:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004518:	69fb      	ldr	r3, [r7, #28]
 800451a:	f003 0303 	and.w	r3, r3, #3
 800451e:	009b      	lsls	r3, r3, #2
 8004520:	220f      	movs	r2, #15
 8004522:	fa02 f303 	lsl.w	r3, r2, r3
 8004526:	43db      	mvns	r3, r3
 8004528:	69ba      	ldr	r2, [r7, #24]
 800452a:	4013      	ands	r3, r2
 800452c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	4a52      	ldr	r2, [pc, #328]	@ (800467c <HAL_GPIO_Init+0x314>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d02b      	beq.n	800458e <HAL_GPIO_Init+0x226>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	4a51      	ldr	r2, [pc, #324]	@ (8004680 <HAL_GPIO_Init+0x318>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d025      	beq.n	800458a <HAL_GPIO_Init+0x222>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	4a50      	ldr	r2, [pc, #320]	@ (8004684 <HAL_GPIO_Init+0x31c>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d01f      	beq.n	8004586 <HAL_GPIO_Init+0x21e>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	4a4f      	ldr	r2, [pc, #316]	@ (8004688 <HAL_GPIO_Init+0x320>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d019      	beq.n	8004582 <HAL_GPIO_Init+0x21a>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	4a4e      	ldr	r2, [pc, #312]	@ (800468c <HAL_GPIO_Init+0x324>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d013      	beq.n	800457e <HAL_GPIO_Init+0x216>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	4a4d      	ldr	r2, [pc, #308]	@ (8004690 <HAL_GPIO_Init+0x328>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d00d      	beq.n	800457a <HAL_GPIO_Init+0x212>
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	4a4c      	ldr	r2, [pc, #304]	@ (8004694 <HAL_GPIO_Init+0x32c>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d007      	beq.n	8004576 <HAL_GPIO_Init+0x20e>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	4a4b      	ldr	r2, [pc, #300]	@ (8004698 <HAL_GPIO_Init+0x330>)
 800456a:	4293      	cmp	r3, r2
 800456c:	d101      	bne.n	8004572 <HAL_GPIO_Init+0x20a>
 800456e:	2307      	movs	r3, #7
 8004570:	e00e      	b.n	8004590 <HAL_GPIO_Init+0x228>
 8004572:	2308      	movs	r3, #8
 8004574:	e00c      	b.n	8004590 <HAL_GPIO_Init+0x228>
 8004576:	2306      	movs	r3, #6
 8004578:	e00a      	b.n	8004590 <HAL_GPIO_Init+0x228>
 800457a:	2305      	movs	r3, #5
 800457c:	e008      	b.n	8004590 <HAL_GPIO_Init+0x228>
 800457e:	2304      	movs	r3, #4
 8004580:	e006      	b.n	8004590 <HAL_GPIO_Init+0x228>
 8004582:	2303      	movs	r3, #3
 8004584:	e004      	b.n	8004590 <HAL_GPIO_Init+0x228>
 8004586:	2302      	movs	r3, #2
 8004588:	e002      	b.n	8004590 <HAL_GPIO_Init+0x228>
 800458a:	2301      	movs	r3, #1
 800458c:	e000      	b.n	8004590 <HAL_GPIO_Init+0x228>
 800458e:	2300      	movs	r3, #0
 8004590:	69fa      	ldr	r2, [r7, #28]
 8004592:	f002 0203 	and.w	r2, r2, #3
 8004596:	0092      	lsls	r2, r2, #2
 8004598:	4093      	lsls	r3, r2
 800459a:	69ba      	ldr	r2, [r7, #24]
 800459c:	4313      	orrs	r3, r2
 800459e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80045a0:	4935      	ldr	r1, [pc, #212]	@ (8004678 <HAL_GPIO_Init+0x310>)
 80045a2:	69fb      	ldr	r3, [r7, #28]
 80045a4:	089b      	lsrs	r3, r3, #2
 80045a6:	3302      	adds	r3, #2
 80045a8:	69ba      	ldr	r2, [r7, #24]
 80045aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80045ae:	4b3b      	ldr	r3, [pc, #236]	@ (800469c <HAL_GPIO_Init+0x334>)
 80045b0:	689b      	ldr	r3, [r3, #8]
 80045b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80045b4:	693b      	ldr	r3, [r7, #16]
 80045b6:	43db      	mvns	r3, r3
 80045b8:	69ba      	ldr	r2, [r7, #24]
 80045ba:	4013      	ands	r3, r2
 80045bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	685b      	ldr	r3, [r3, #4]
 80045c2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d003      	beq.n	80045d2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80045ca:	69ba      	ldr	r2, [r7, #24]
 80045cc:	693b      	ldr	r3, [r7, #16]
 80045ce:	4313      	orrs	r3, r2
 80045d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80045d2:	4a32      	ldr	r2, [pc, #200]	@ (800469c <HAL_GPIO_Init+0x334>)
 80045d4:	69bb      	ldr	r3, [r7, #24]
 80045d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80045d8:	4b30      	ldr	r3, [pc, #192]	@ (800469c <HAL_GPIO_Init+0x334>)
 80045da:	68db      	ldr	r3, [r3, #12]
 80045dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80045de:	693b      	ldr	r3, [r7, #16]
 80045e0:	43db      	mvns	r3, r3
 80045e2:	69ba      	ldr	r2, [r7, #24]
 80045e4:	4013      	ands	r3, r2
 80045e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	685b      	ldr	r3, [r3, #4]
 80045ec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d003      	beq.n	80045fc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80045f4:	69ba      	ldr	r2, [r7, #24]
 80045f6:	693b      	ldr	r3, [r7, #16]
 80045f8:	4313      	orrs	r3, r2
 80045fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80045fc:	4a27      	ldr	r2, [pc, #156]	@ (800469c <HAL_GPIO_Init+0x334>)
 80045fe:	69bb      	ldr	r3, [r7, #24]
 8004600:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004602:	4b26      	ldr	r3, [pc, #152]	@ (800469c <HAL_GPIO_Init+0x334>)
 8004604:	685b      	ldr	r3, [r3, #4]
 8004606:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004608:	693b      	ldr	r3, [r7, #16]
 800460a:	43db      	mvns	r3, r3
 800460c:	69ba      	ldr	r2, [r7, #24]
 800460e:	4013      	ands	r3, r2
 8004610:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	685b      	ldr	r3, [r3, #4]
 8004616:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800461a:	2b00      	cmp	r3, #0
 800461c:	d003      	beq.n	8004626 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800461e:	69ba      	ldr	r2, [r7, #24]
 8004620:	693b      	ldr	r3, [r7, #16]
 8004622:	4313      	orrs	r3, r2
 8004624:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004626:	4a1d      	ldr	r2, [pc, #116]	@ (800469c <HAL_GPIO_Init+0x334>)
 8004628:	69bb      	ldr	r3, [r7, #24]
 800462a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800462c:	4b1b      	ldr	r3, [pc, #108]	@ (800469c <HAL_GPIO_Init+0x334>)
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004632:	693b      	ldr	r3, [r7, #16]
 8004634:	43db      	mvns	r3, r3
 8004636:	69ba      	ldr	r2, [r7, #24]
 8004638:	4013      	ands	r3, r2
 800463a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	685b      	ldr	r3, [r3, #4]
 8004640:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004644:	2b00      	cmp	r3, #0
 8004646:	d003      	beq.n	8004650 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004648:	69ba      	ldr	r2, [r7, #24]
 800464a:	693b      	ldr	r3, [r7, #16]
 800464c:	4313      	orrs	r3, r2
 800464e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004650:	4a12      	ldr	r2, [pc, #72]	@ (800469c <HAL_GPIO_Init+0x334>)
 8004652:	69bb      	ldr	r3, [r7, #24]
 8004654:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004656:	69fb      	ldr	r3, [r7, #28]
 8004658:	3301      	adds	r3, #1
 800465a:	61fb      	str	r3, [r7, #28]
 800465c:	69fb      	ldr	r3, [r7, #28]
 800465e:	2b0f      	cmp	r3, #15
 8004660:	f67f ae90 	bls.w	8004384 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004664:	bf00      	nop
 8004666:	bf00      	nop
 8004668:	3724      	adds	r7, #36	@ 0x24
 800466a:	46bd      	mov	sp, r7
 800466c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004670:	4770      	bx	lr
 8004672:	bf00      	nop
 8004674:	40023800 	.word	0x40023800
 8004678:	40013800 	.word	0x40013800
 800467c:	40020000 	.word	0x40020000
 8004680:	40020400 	.word	0x40020400
 8004684:	40020800 	.word	0x40020800
 8004688:	40020c00 	.word	0x40020c00
 800468c:	40021000 	.word	0x40021000
 8004690:	40021400 	.word	0x40021400
 8004694:	40021800 	.word	0x40021800
 8004698:	40021c00 	.word	0x40021c00
 800469c:	40013c00 	.word	0x40013c00

080046a0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80046a0:	b480      	push	{r7}
 80046a2:	b085      	sub	sp, #20
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
 80046a8:	460b      	mov	r3, r1
 80046aa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	691a      	ldr	r2, [r3, #16]
 80046b0:	887b      	ldrh	r3, [r7, #2]
 80046b2:	4013      	ands	r3, r2
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d002      	beq.n	80046be <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80046b8:	2301      	movs	r3, #1
 80046ba:	73fb      	strb	r3, [r7, #15]
 80046bc:	e001      	b.n	80046c2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80046be:	2300      	movs	r3, #0
 80046c0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80046c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80046c4:	4618      	mov	r0, r3
 80046c6:	3714      	adds	r7, #20
 80046c8:	46bd      	mov	sp, r7
 80046ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ce:	4770      	bx	lr

080046d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80046d0:	b480      	push	{r7}
 80046d2:	b083      	sub	sp, #12
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
 80046d8:	460b      	mov	r3, r1
 80046da:	807b      	strh	r3, [r7, #2]
 80046dc:	4613      	mov	r3, r2
 80046de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80046e0:	787b      	ldrb	r3, [r7, #1]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d003      	beq.n	80046ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80046e6:	887a      	ldrh	r2, [r7, #2]
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80046ec:	e003      	b.n	80046f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80046ee:	887b      	ldrh	r3, [r7, #2]
 80046f0:	041a      	lsls	r2, r3, #16
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	619a      	str	r2, [r3, #24]
}
 80046f6:	bf00      	nop
 80046f8:	370c      	adds	r7, #12
 80046fa:	46bd      	mov	sp, r7
 80046fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004700:	4770      	bx	lr

08004702 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004702:	b480      	push	{r7}
 8004704:	b085      	sub	sp, #20
 8004706:	af00      	add	r7, sp, #0
 8004708:	6078      	str	r0, [r7, #4]
 800470a:	460b      	mov	r3, r1
 800470c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	695b      	ldr	r3, [r3, #20]
 8004712:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004714:	887a      	ldrh	r2, [r7, #2]
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	4013      	ands	r3, r2
 800471a:	041a      	lsls	r2, r3, #16
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	43d9      	mvns	r1, r3
 8004720:	887b      	ldrh	r3, [r7, #2]
 8004722:	400b      	ands	r3, r1
 8004724:	431a      	orrs	r2, r3
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	619a      	str	r2, [r3, #24]
}
 800472a:	bf00      	nop
 800472c:	3714      	adds	r7, #20
 800472e:	46bd      	mov	sp, r7
 8004730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004734:	4770      	bx	lr
	...

08004738 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b082      	sub	sp, #8
 800473c:	af00      	add	r7, sp, #0
 800473e:	4603      	mov	r3, r0
 8004740:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004742:	4b08      	ldr	r3, [pc, #32]	@ (8004764 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004744:	695a      	ldr	r2, [r3, #20]
 8004746:	88fb      	ldrh	r3, [r7, #6]
 8004748:	4013      	ands	r3, r2
 800474a:	2b00      	cmp	r3, #0
 800474c:	d006      	beq.n	800475c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800474e:	4a05      	ldr	r2, [pc, #20]	@ (8004764 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004750:	88fb      	ldrh	r3, [r7, #6]
 8004752:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004754:	88fb      	ldrh	r3, [r7, #6]
 8004756:	4618      	mov	r0, r3
 8004758:	f7fe f98a 	bl	8002a70 <HAL_GPIO_EXTI_Callback>
  }
}
 800475c:	bf00      	nop
 800475e:	3708      	adds	r7, #8
 8004760:	46bd      	mov	sp, r7
 8004762:	bd80      	pop	{r7, pc}
 8004764:	40013c00 	.word	0x40013c00

08004768 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b086      	sub	sp, #24
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d101      	bne.n	800477a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004776:	2301      	movs	r3, #1
 8004778:	e267      	b.n	8004c4a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f003 0301 	and.w	r3, r3, #1
 8004782:	2b00      	cmp	r3, #0
 8004784:	d075      	beq.n	8004872 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004786:	4b88      	ldr	r3, [pc, #544]	@ (80049a8 <HAL_RCC_OscConfig+0x240>)
 8004788:	689b      	ldr	r3, [r3, #8]
 800478a:	f003 030c 	and.w	r3, r3, #12
 800478e:	2b04      	cmp	r3, #4
 8004790:	d00c      	beq.n	80047ac <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004792:	4b85      	ldr	r3, [pc, #532]	@ (80049a8 <HAL_RCC_OscConfig+0x240>)
 8004794:	689b      	ldr	r3, [r3, #8]
 8004796:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800479a:	2b08      	cmp	r3, #8
 800479c:	d112      	bne.n	80047c4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800479e:	4b82      	ldr	r3, [pc, #520]	@ (80049a8 <HAL_RCC_OscConfig+0x240>)
 80047a0:	685b      	ldr	r3, [r3, #4]
 80047a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80047a6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80047aa:	d10b      	bne.n	80047c4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047ac:	4b7e      	ldr	r3, [pc, #504]	@ (80049a8 <HAL_RCC_OscConfig+0x240>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d05b      	beq.n	8004870 <HAL_RCC_OscConfig+0x108>
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	685b      	ldr	r3, [r3, #4]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d157      	bne.n	8004870 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80047c0:	2301      	movs	r3, #1
 80047c2:	e242      	b.n	8004c4a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	685b      	ldr	r3, [r3, #4]
 80047c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80047cc:	d106      	bne.n	80047dc <HAL_RCC_OscConfig+0x74>
 80047ce:	4b76      	ldr	r3, [pc, #472]	@ (80049a8 <HAL_RCC_OscConfig+0x240>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	4a75      	ldr	r2, [pc, #468]	@ (80049a8 <HAL_RCC_OscConfig+0x240>)
 80047d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80047d8:	6013      	str	r3, [r2, #0]
 80047da:	e01d      	b.n	8004818 <HAL_RCC_OscConfig+0xb0>
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	685b      	ldr	r3, [r3, #4]
 80047e0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80047e4:	d10c      	bne.n	8004800 <HAL_RCC_OscConfig+0x98>
 80047e6:	4b70      	ldr	r3, [pc, #448]	@ (80049a8 <HAL_RCC_OscConfig+0x240>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	4a6f      	ldr	r2, [pc, #444]	@ (80049a8 <HAL_RCC_OscConfig+0x240>)
 80047ec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80047f0:	6013      	str	r3, [r2, #0]
 80047f2:	4b6d      	ldr	r3, [pc, #436]	@ (80049a8 <HAL_RCC_OscConfig+0x240>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	4a6c      	ldr	r2, [pc, #432]	@ (80049a8 <HAL_RCC_OscConfig+0x240>)
 80047f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80047fc:	6013      	str	r3, [r2, #0]
 80047fe:	e00b      	b.n	8004818 <HAL_RCC_OscConfig+0xb0>
 8004800:	4b69      	ldr	r3, [pc, #420]	@ (80049a8 <HAL_RCC_OscConfig+0x240>)
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	4a68      	ldr	r2, [pc, #416]	@ (80049a8 <HAL_RCC_OscConfig+0x240>)
 8004806:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800480a:	6013      	str	r3, [r2, #0]
 800480c:	4b66      	ldr	r3, [pc, #408]	@ (80049a8 <HAL_RCC_OscConfig+0x240>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4a65      	ldr	r2, [pc, #404]	@ (80049a8 <HAL_RCC_OscConfig+0x240>)
 8004812:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004816:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	685b      	ldr	r3, [r3, #4]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d013      	beq.n	8004848 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004820:	f7ff fbce 	bl	8003fc0 <HAL_GetTick>
 8004824:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004826:	e008      	b.n	800483a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004828:	f7ff fbca 	bl	8003fc0 <HAL_GetTick>
 800482c:	4602      	mov	r2, r0
 800482e:	693b      	ldr	r3, [r7, #16]
 8004830:	1ad3      	subs	r3, r2, r3
 8004832:	2b64      	cmp	r3, #100	@ 0x64
 8004834:	d901      	bls.n	800483a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004836:	2303      	movs	r3, #3
 8004838:	e207      	b.n	8004c4a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800483a:	4b5b      	ldr	r3, [pc, #364]	@ (80049a8 <HAL_RCC_OscConfig+0x240>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004842:	2b00      	cmp	r3, #0
 8004844:	d0f0      	beq.n	8004828 <HAL_RCC_OscConfig+0xc0>
 8004846:	e014      	b.n	8004872 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004848:	f7ff fbba 	bl	8003fc0 <HAL_GetTick>
 800484c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800484e:	e008      	b.n	8004862 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004850:	f7ff fbb6 	bl	8003fc0 <HAL_GetTick>
 8004854:	4602      	mov	r2, r0
 8004856:	693b      	ldr	r3, [r7, #16]
 8004858:	1ad3      	subs	r3, r2, r3
 800485a:	2b64      	cmp	r3, #100	@ 0x64
 800485c:	d901      	bls.n	8004862 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800485e:	2303      	movs	r3, #3
 8004860:	e1f3      	b.n	8004c4a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004862:	4b51      	ldr	r3, [pc, #324]	@ (80049a8 <HAL_RCC_OscConfig+0x240>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800486a:	2b00      	cmp	r3, #0
 800486c:	d1f0      	bne.n	8004850 <HAL_RCC_OscConfig+0xe8>
 800486e:	e000      	b.n	8004872 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004870:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f003 0302 	and.w	r3, r3, #2
 800487a:	2b00      	cmp	r3, #0
 800487c:	d063      	beq.n	8004946 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800487e:	4b4a      	ldr	r3, [pc, #296]	@ (80049a8 <HAL_RCC_OscConfig+0x240>)
 8004880:	689b      	ldr	r3, [r3, #8]
 8004882:	f003 030c 	and.w	r3, r3, #12
 8004886:	2b00      	cmp	r3, #0
 8004888:	d00b      	beq.n	80048a2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800488a:	4b47      	ldr	r3, [pc, #284]	@ (80049a8 <HAL_RCC_OscConfig+0x240>)
 800488c:	689b      	ldr	r3, [r3, #8]
 800488e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004892:	2b08      	cmp	r3, #8
 8004894:	d11c      	bne.n	80048d0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004896:	4b44      	ldr	r3, [pc, #272]	@ (80049a8 <HAL_RCC_OscConfig+0x240>)
 8004898:	685b      	ldr	r3, [r3, #4]
 800489a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d116      	bne.n	80048d0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80048a2:	4b41      	ldr	r3, [pc, #260]	@ (80049a8 <HAL_RCC_OscConfig+0x240>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f003 0302 	and.w	r3, r3, #2
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d005      	beq.n	80048ba <HAL_RCC_OscConfig+0x152>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	68db      	ldr	r3, [r3, #12]
 80048b2:	2b01      	cmp	r3, #1
 80048b4:	d001      	beq.n	80048ba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80048b6:	2301      	movs	r3, #1
 80048b8:	e1c7      	b.n	8004c4a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048ba:	4b3b      	ldr	r3, [pc, #236]	@ (80049a8 <HAL_RCC_OscConfig+0x240>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	691b      	ldr	r3, [r3, #16]
 80048c6:	00db      	lsls	r3, r3, #3
 80048c8:	4937      	ldr	r1, [pc, #220]	@ (80049a8 <HAL_RCC_OscConfig+0x240>)
 80048ca:	4313      	orrs	r3, r2
 80048cc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80048ce:	e03a      	b.n	8004946 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	68db      	ldr	r3, [r3, #12]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d020      	beq.n	800491a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80048d8:	4b34      	ldr	r3, [pc, #208]	@ (80049ac <HAL_RCC_OscConfig+0x244>)
 80048da:	2201      	movs	r2, #1
 80048dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048de:	f7ff fb6f 	bl	8003fc0 <HAL_GetTick>
 80048e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048e4:	e008      	b.n	80048f8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80048e6:	f7ff fb6b 	bl	8003fc0 <HAL_GetTick>
 80048ea:	4602      	mov	r2, r0
 80048ec:	693b      	ldr	r3, [r7, #16]
 80048ee:	1ad3      	subs	r3, r2, r3
 80048f0:	2b02      	cmp	r3, #2
 80048f2:	d901      	bls.n	80048f8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80048f4:	2303      	movs	r3, #3
 80048f6:	e1a8      	b.n	8004c4a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048f8:	4b2b      	ldr	r3, [pc, #172]	@ (80049a8 <HAL_RCC_OscConfig+0x240>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f003 0302 	and.w	r3, r3, #2
 8004900:	2b00      	cmp	r3, #0
 8004902:	d0f0      	beq.n	80048e6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004904:	4b28      	ldr	r3, [pc, #160]	@ (80049a8 <HAL_RCC_OscConfig+0x240>)
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	691b      	ldr	r3, [r3, #16]
 8004910:	00db      	lsls	r3, r3, #3
 8004912:	4925      	ldr	r1, [pc, #148]	@ (80049a8 <HAL_RCC_OscConfig+0x240>)
 8004914:	4313      	orrs	r3, r2
 8004916:	600b      	str	r3, [r1, #0]
 8004918:	e015      	b.n	8004946 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800491a:	4b24      	ldr	r3, [pc, #144]	@ (80049ac <HAL_RCC_OscConfig+0x244>)
 800491c:	2200      	movs	r2, #0
 800491e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004920:	f7ff fb4e 	bl	8003fc0 <HAL_GetTick>
 8004924:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004926:	e008      	b.n	800493a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004928:	f7ff fb4a 	bl	8003fc0 <HAL_GetTick>
 800492c:	4602      	mov	r2, r0
 800492e:	693b      	ldr	r3, [r7, #16]
 8004930:	1ad3      	subs	r3, r2, r3
 8004932:	2b02      	cmp	r3, #2
 8004934:	d901      	bls.n	800493a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004936:	2303      	movs	r3, #3
 8004938:	e187      	b.n	8004c4a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800493a:	4b1b      	ldr	r3, [pc, #108]	@ (80049a8 <HAL_RCC_OscConfig+0x240>)
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f003 0302 	and.w	r3, r3, #2
 8004942:	2b00      	cmp	r3, #0
 8004944:	d1f0      	bne.n	8004928 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f003 0308 	and.w	r3, r3, #8
 800494e:	2b00      	cmp	r3, #0
 8004950:	d036      	beq.n	80049c0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	695b      	ldr	r3, [r3, #20]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d016      	beq.n	8004988 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800495a:	4b15      	ldr	r3, [pc, #84]	@ (80049b0 <HAL_RCC_OscConfig+0x248>)
 800495c:	2201      	movs	r2, #1
 800495e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004960:	f7ff fb2e 	bl	8003fc0 <HAL_GetTick>
 8004964:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004966:	e008      	b.n	800497a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004968:	f7ff fb2a 	bl	8003fc0 <HAL_GetTick>
 800496c:	4602      	mov	r2, r0
 800496e:	693b      	ldr	r3, [r7, #16]
 8004970:	1ad3      	subs	r3, r2, r3
 8004972:	2b02      	cmp	r3, #2
 8004974:	d901      	bls.n	800497a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004976:	2303      	movs	r3, #3
 8004978:	e167      	b.n	8004c4a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800497a:	4b0b      	ldr	r3, [pc, #44]	@ (80049a8 <HAL_RCC_OscConfig+0x240>)
 800497c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800497e:	f003 0302 	and.w	r3, r3, #2
 8004982:	2b00      	cmp	r3, #0
 8004984:	d0f0      	beq.n	8004968 <HAL_RCC_OscConfig+0x200>
 8004986:	e01b      	b.n	80049c0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004988:	4b09      	ldr	r3, [pc, #36]	@ (80049b0 <HAL_RCC_OscConfig+0x248>)
 800498a:	2200      	movs	r2, #0
 800498c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800498e:	f7ff fb17 	bl	8003fc0 <HAL_GetTick>
 8004992:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004994:	e00e      	b.n	80049b4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004996:	f7ff fb13 	bl	8003fc0 <HAL_GetTick>
 800499a:	4602      	mov	r2, r0
 800499c:	693b      	ldr	r3, [r7, #16]
 800499e:	1ad3      	subs	r3, r2, r3
 80049a0:	2b02      	cmp	r3, #2
 80049a2:	d907      	bls.n	80049b4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80049a4:	2303      	movs	r3, #3
 80049a6:	e150      	b.n	8004c4a <HAL_RCC_OscConfig+0x4e2>
 80049a8:	40023800 	.word	0x40023800
 80049ac:	42470000 	.word	0x42470000
 80049b0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80049b4:	4b88      	ldr	r3, [pc, #544]	@ (8004bd8 <HAL_RCC_OscConfig+0x470>)
 80049b6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80049b8:	f003 0302 	and.w	r3, r3, #2
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d1ea      	bne.n	8004996 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f003 0304 	and.w	r3, r3, #4
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	f000 8097 	beq.w	8004afc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80049ce:	2300      	movs	r3, #0
 80049d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80049d2:	4b81      	ldr	r3, [pc, #516]	@ (8004bd8 <HAL_RCC_OscConfig+0x470>)
 80049d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d10f      	bne.n	80049fe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80049de:	2300      	movs	r3, #0
 80049e0:	60bb      	str	r3, [r7, #8]
 80049e2:	4b7d      	ldr	r3, [pc, #500]	@ (8004bd8 <HAL_RCC_OscConfig+0x470>)
 80049e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049e6:	4a7c      	ldr	r2, [pc, #496]	@ (8004bd8 <HAL_RCC_OscConfig+0x470>)
 80049e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80049ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80049ee:	4b7a      	ldr	r3, [pc, #488]	@ (8004bd8 <HAL_RCC_OscConfig+0x470>)
 80049f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80049f6:	60bb      	str	r3, [r7, #8]
 80049f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80049fa:	2301      	movs	r3, #1
 80049fc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049fe:	4b77      	ldr	r3, [pc, #476]	@ (8004bdc <HAL_RCC_OscConfig+0x474>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d118      	bne.n	8004a3c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004a0a:	4b74      	ldr	r3, [pc, #464]	@ (8004bdc <HAL_RCC_OscConfig+0x474>)
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	4a73      	ldr	r2, [pc, #460]	@ (8004bdc <HAL_RCC_OscConfig+0x474>)
 8004a10:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004a14:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a16:	f7ff fad3 	bl	8003fc0 <HAL_GetTick>
 8004a1a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a1c:	e008      	b.n	8004a30 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a1e:	f7ff facf 	bl	8003fc0 <HAL_GetTick>
 8004a22:	4602      	mov	r2, r0
 8004a24:	693b      	ldr	r3, [r7, #16]
 8004a26:	1ad3      	subs	r3, r2, r3
 8004a28:	2b02      	cmp	r3, #2
 8004a2a:	d901      	bls.n	8004a30 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004a2c:	2303      	movs	r3, #3
 8004a2e:	e10c      	b.n	8004c4a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a30:	4b6a      	ldr	r3, [pc, #424]	@ (8004bdc <HAL_RCC_OscConfig+0x474>)
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d0f0      	beq.n	8004a1e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	689b      	ldr	r3, [r3, #8]
 8004a40:	2b01      	cmp	r3, #1
 8004a42:	d106      	bne.n	8004a52 <HAL_RCC_OscConfig+0x2ea>
 8004a44:	4b64      	ldr	r3, [pc, #400]	@ (8004bd8 <HAL_RCC_OscConfig+0x470>)
 8004a46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a48:	4a63      	ldr	r2, [pc, #396]	@ (8004bd8 <HAL_RCC_OscConfig+0x470>)
 8004a4a:	f043 0301 	orr.w	r3, r3, #1
 8004a4e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004a50:	e01c      	b.n	8004a8c <HAL_RCC_OscConfig+0x324>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	689b      	ldr	r3, [r3, #8]
 8004a56:	2b05      	cmp	r3, #5
 8004a58:	d10c      	bne.n	8004a74 <HAL_RCC_OscConfig+0x30c>
 8004a5a:	4b5f      	ldr	r3, [pc, #380]	@ (8004bd8 <HAL_RCC_OscConfig+0x470>)
 8004a5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a5e:	4a5e      	ldr	r2, [pc, #376]	@ (8004bd8 <HAL_RCC_OscConfig+0x470>)
 8004a60:	f043 0304 	orr.w	r3, r3, #4
 8004a64:	6713      	str	r3, [r2, #112]	@ 0x70
 8004a66:	4b5c      	ldr	r3, [pc, #368]	@ (8004bd8 <HAL_RCC_OscConfig+0x470>)
 8004a68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a6a:	4a5b      	ldr	r2, [pc, #364]	@ (8004bd8 <HAL_RCC_OscConfig+0x470>)
 8004a6c:	f043 0301 	orr.w	r3, r3, #1
 8004a70:	6713      	str	r3, [r2, #112]	@ 0x70
 8004a72:	e00b      	b.n	8004a8c <HAL_RCC_OscConfig+0x324>
 8004a74:	4b58      	ldr	r3, [pc, #352]	@ (8004bd8 <HAL_RCC_OscConfig+0x470>)
 8004a76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a78:	4a57      	ldr	r2, [pc, #348]	@ (8004bd8 <HAL_RCC_OscConfig+0x470>)
 8004a7a:	f023 0301 	bic.w	r3, r3, #1
 8004a7e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004a80:	4b55      	ldr	r3, [pc, #340]	@ (8004bd8 <HAL_RCC_OscConfig+0x470>)
 8004a82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a84:	4a54      	ldr	r2, [pc, #336]	@ (8004bd8 <HAL_RCC_OscConfig+0x470>)
 8004a86:	f023 0304 	bic.w	r3, r3, #4
 8004a8a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	689b      	ldr	r3, [r3, #8]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d015      	beq.n	8004ac0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a94:	f7ff fa94 	bl	8003fc0 <HAL_GetTick>
 8004a98:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a9a:	e00a      	b.n	8004ab2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a9c:	f7ff fa90 	bl	8003fc0 <HAL_GetTick>
 8004aa0:	4602      	mov	r2, r0
 8004aa2:	693b      	ldr	r3, [r7, #16]
 8004aa4:	1ad3      	subs	r3, r2, r3
 8004aa6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004aaa:	4293      	cmp	r3, r2
 8004aac:	d901      	bls.n	8004ab2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004aae:	2303      	movs	r3, #3
 8004ab0:	e0cb      	b.n	8004c4a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ab2:	4b49      	ldr	r3, [pc, #292]	@ (8004bd8 <HAL_RCC_OscConfig+0x470>)
 8004ab4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ab6:	f003 0302 	and.w	r3, r3, #2
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d0ee      	beq.n	8004a9c <HAL_RCC_OscConfig+0x334>
 8004abe:	e014      	b.n	8004aea <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ac0:	f7ff fa7e 	bl	8003fc0 <HAL_GetTick>
 8004ac4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ac6:	e00a      	b.n	8004ade <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ac8:	f7ff fa7a 	bl	8003fc0 <HAL_GetTick>
 8004acc:	4602      	mov	r2, r0
 8004ace:	693b      	ldr	r3, [r7, #16]
 8004ad0:	1ad3      	subs	r3, r2, r3
 8004ad2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d901      	bls.n	8004ade <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004ada:	2303      	movs	r3, #3
 8004adc:	e0b5      	b.n	8004c4a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ade:	4b3e      	ldr	r3, [pc, #248]	@ (8004bd8 <HAL_RCC_OscConfig+0x470>)
 8004ae0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ae2:	f003 0302 	and.w	r3, r3, #2
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d1ee      	bne.n	8004ac8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004aea:	7dfb      	ldrb	r3, [r7, #23]
 8004aec:	2b01      	cmp	r3, #1
 8004aee:	d105      	bne.n	8004afc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004af0:	4b39      	ldr	r3, [pc, #228]	@ (8004bd8 <HAL_RCC_OscConfig+0x470>)
 8004af2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004af4:	4a38      	ldr	r2, [pc, #224]	@ (8004bd8 <HAL_RCC_OscConfig+0x470>)
 8004af6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004afa:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	699b      	ldr	r3, [r3, #24]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	f000 80a1 	beq.w	8004c48 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004b06:	4b34      	ldr	r3, [pc, #208]	@ (8004bd8 <HAL_RCC_OscConfig+0x470>)
 8004b08:	689b      	ldr	r3, [r3, #8]
 8004b0a:	f003 030c 	and.w	r3, r3, #12
 8004b0e:	2b08      	cmp	r3, #8
 8004b10:	d05c      	beq.n	8004bcc <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	699b      	ldr	r3, [r3, #24]
 8004b16:	2b02      	cmp	r3, #2
 8004b18:	d141      	bne.n	8004b9e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b1a:	4b31      	ldr	r3, [pc, #196]	@ (8004be0 <HAL_RCC_OscConfig+0x478>)
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b20:	f7ff fa4e 	bl	8003fc0 <HAL_GetTick>
 8004b24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b26:	e008      	b.n	8004b3a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b28:	f7ff fa4a 	bl	8003fc0 <HAL_GetTick>
 8004b2c:	4602      	mov	r2, r0
 8004b2e:	693b      	ldr	r3, [r7, #16]
 8004b30:	1ad3      	subs	r3, r2, r3
 8004b32:	2b02      	cmp	r3, #2
 8004b34:	d901      	bls.n	8004b3a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004b36:	2303      	movs	r3, #3
 8004b38:	e087      	b.n	8004c4a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b3a:	4b27      	ldr	r3, [pc, #156]	@ (8004bd8 <HAL_RCC_OscConfig+0x470>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d1f0      	bne.n	8004b28 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	69da      	ldr	r2, [r3, #28]
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6a1b      	ldr	r3, [r3, #32]
 8004b4e:	431a      	orrs	r2, r3
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b54:	019b      	lsls	r3, r3, #6
 8004b56:	431a      	orrs	r2, r3
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b5c:	085b      	lsrs	r3, r3, #1
 8004b5e:	3b01      	subs	r3, #1
 8004b60:	041b      	lsls	r3, r3, #16
 8004b62:	431a      	orrs	r2, r3
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b68:	061b      	lsls	r3, r3, #24
 8004b6a:	491b      	ldr	r1, [pc, #108]	@ (8004bd8 <HAL_RCC_OscConfig+0x470>)
 8004b6c:	4313      	orrs	r3, r2
 8004b6e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004b70:	4b1b      	ldr	r3, [pc, #108]	@ (8004be0 <HAL_RCC_OscConfig+0x478>)
 8004b72:	2201      	movs	r2, #1
 8004b74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b76:	f7ff fa23 	bl	8003fc0 <HAL_GetTick>
 8004b7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b7c:	e008      	b.n	8004b90 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b7e:	f7ff fa1f 	bl	8003fc0 <HAL_GetTick>
 8004b82:	4602      	mov	r2, r0
 8004b84:	693b      	ldr	r3, [r7, #16]
 8004b86:	1ad3      	subs	r3, r2, r3
 8004b88:	2b02      	cmp	r3, #2
 8004b8a:	d901      	bls.n	8004b90 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004b8c:	2303      	movs	r3, #3
 8004b8e:	e05c      	b.n	8004c4a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b90:	4b11      	ldr	r3, [pc, #68]	@ (8004bd8 <HAL_RCC_OscConfig+0x470>)
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d0f0      	beq.n	8004b7e <HAL_RCC_OscConfig+0x416>
 8004b9c:	e054      	b.n	8004c48 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b9e:	4b10      	ldr	r3, [pc, #64]	@ (8004be0 <HAL_RCC_OscConfig+0x478>)
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ba4:	f7ff fa0c 	bl	8003fc0 <HAL_GetTick>
 8004ba8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004baa:	e008      	b.n	8004bbe <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bac:	f7ff fa08 	bl	8003fc0 <HAL_GetTick>
 8004bb0:	4602      	mov	r2, r0
 8004bb2:	693b      	ldr	r3, [r7, #16]
 8004bb4:	1ad3      	subs	r3, r2, r3
 8004bb6:	2b02      	cmp	r3, #2
 8004bb8:	d901      	bls.n	8004bbe <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004bba:	2303      	movs	r3, #3
 8004bbc:	e045      	b.n	8004c4a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004bbe:	4b06      	ldr	r3, [pc, #24]	@ (8004bd8 <HAL_RCC_OscConfig+0x470>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d1f0      	bne.n	8004bac <HAL_RCC_OscConfig+0x444>
 8004bca:	e03d      	b.n	8004c48 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	699b      	ldr	r3, [r3, #24]
 8004bd0:	2b01      	cmp	r3, #1
 8004bd2:	d107      	bne.n	8004be4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004bd4:	2301      	movs	r3, #1
 8004bd6:	e038      	b.n	8004c4a <HAL_RCC_OscConfig+0x4e2>
 8004bd8:	40023800 	.word	0x40023800
 8004bdc:	40007000 	.word	0x40007000
 8004be0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004be4:	4b1b      	ldr	r3, [pc, #108]	@ (8004c54 <HAL_RCC_OscConfig+0x4ec>)
 8004be6:	685b      	ldr	r3, [r3, #4]
 8004be8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	699b      	ldr	r3, [r3, #24]
 8004bee:	2b01      	cmp	r3, #1
 8004bf0:	d028      	beq.n	8004c44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004bfc:	429a      	cmp	r2, r3
 8004bfe:	d121      	bne.n	8004c44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c0a:	429a      	cmp	r2, r3
 8004c0c:	d11a      	bne.n	8004c44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004c0e:	68fa      	ldr	r2, [r7, #12]
 8004c10:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004c14:	4013      	ands	r3, r2
 8004c16:	687a      	ldr	r2, [r7, #4]
 8004c18:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004c1a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d111      	bne.n	8004c44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c2a:	085b      	lsrs	r3, r3, #1
 8004c2c:	3b01      	subs	r3, #1
 8004c2e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004c30:	429a      	cmp	r2, r3
 8004c32:	d107      	bne.n	8004c44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c3e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004c40:	429a      	cmp	r2, r3
 8004c42:	d001      	beq.n	8004c48 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004c44:	2301      	movs	r3, #1
 8004c46:	e000      	b.n	8004c4a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004c48:	2300      	movs	r3, #0
}
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	3718      	adds	r7, #24
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	bd80      	pop	{r7, pc}
 8004c52:	bf00      	nop
 8004c54:	40023800 	.word	0x40023800

08004c58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b084      	sub	sp, #16
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
 8004c60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d101      	bne.n	8004c6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004c68:	2301      	movs	r3, #1
 8004c6a:	e0cc      	b.n	8004e06 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004c6c:	4b68      	ldr	r3, [pc, #416]	@ (8004e10 <HAL_RCC_ClockConfig+0x1b8>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f003 0307 	and.w	r3, r3, #7
 8004c74:	683a      	ldr	r2, [r7, #0]
 8004c76:	429a      	cmp	r2, r3
 8004c78:	d90c      	bls.n	8004c94 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c7a:	4b65      	ldr	r3, [pc, #404]	@ (8004e10 <HAL_RCC_ClockConfig+0x1b8>)
 8004c7c:	683a      	ldr	r2, [r7, #0]
 8004c7e:	b2d2      	uxtb	r2, r2
 8004c80:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c82:	4b63      	ldr	r3, [pc, #396]	@ (8004e10 <HAL_RCC_ClockConfig+0x1b8>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f003 0307 	and.w	r3, r3, #7
 8004c8a:	683a      	ldr	r2, [r7, #0]
 8004c8c:	429a      	cmp	r2, r3
 8004c8e:	d001      	beq.n	8004c94 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004c90:	2301      	movs	r3, #1
 8004c92:	e0b8      	b.n	8004e06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f003 0302 	and.w	r3, r3, #2
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d020      	beq.n	8004ce2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f003 0304 	and.w	r3, r3, #4
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d005      	beq.n	8004cb8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004cac:	4b59      	ldr	r3, [pc, #356]	@ (8004e14 <HAL_RCC_ClockConfig+0x1bc>)
 8004cae:	689b      	ldr	r3, [r3, #8]
 8004cb0:	4a58      	ldr	r2, [pc, #352]	@ (8004e14 <HAL_RCC_ClockConfig+0x1bc>)
 8004cb2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004cb6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f003 0308 	and.w	r3, r3, #8
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d005      	beq.n	8004cd0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004cc4:	4b53      	ldr	r3, [pc, #332]	@ (8004e14 <HAL_RCC_ClockConfig+0x1bc>)
 8004cc6:	689b      	ldr	r3, [r3, #8]
 8004cc8:	4a52      	ldr	r2, [pc, #328]	@ (8004e14 <HAL_RCC_ClockConfig+0x1bc>)
 8004cca:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004cce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004cd0:	4b50      	ldr	r3, [pc, #320]	@ (8004e14 <HAL_RCC_ClockConfig+0x1bc>)
 8004cd2:	689b      	ldr	r3, [r3, #8]
 8004cd4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	689b      	ldr	r3, [r3, #8]
 8004cdc:	494d      	ldr	r1, [pc, #308]	@ (8004e14 <HAL_RCC_ClockConfig+0x1bc>)
 8004cde:	4313      	orrs	r3, r2
 8004ce0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f003 0301 	and.w	r3, r3, #1
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d044      	beq.n	8004d78 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	685b      	ldr	r3, [r3, #4]
 8004cf2:	2b01      	cmp	r3, #1
 8004cf4:	d107      	bne.n	8004d06 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004cf6:	4b47      	ldr	r3, [pc, #284]	@ (8004e14 <HAL_RCC_ClockConfig+0x1bc>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d119      	bne.n	8004d36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d02:	2301      	movs	r3, #1
 8004d04:	e07f      	b.n	8004e06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	685b      	ldr	r3, [r3, #4]
 8004d0a:	2b02      	cmp	r3, #2
 8004d0c:	d003      	beq.n	8004d16 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004d12:	2b03      	cmp	r3, #3
 8004d14:	d107      	bne.n	8004d26 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d16:	4b3f      	ldr	r3, [pc, #252]	@ (8004e14 <HAL_RCC_ClockConfig+0x1bc>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d109      	bne.n	8004d36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d22:	2301      	movs	r3, #1
 8004d24:	e06f      	b.n	8004e06 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d26:	4b3b      	ldr	r3, [pc, #236]	@ (8004e14 <HAL_RCC_ClockConfig+0x1bc>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f003 0302 	and.w	r3, r3, #2
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d101      	bne.n	8004d36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d32:	2301      	movs	r3, #1
 8004d34:	e067      	b.n	8004e06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004d36:	4b37      	ldr	r3, [pc, #220]	@ (8004e14 <HAL_RCC_ClockConfig+0x1bc>)
 8004d38:	689b      	ldr	r3, [r3, #8]
 8004d3a:	f023 0203 	bic.w	r2, r3, #3
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	685b      	ldr	r3, [r3, #4]
 8004d42:	4934      	ldr	r1, [pc, #208]	@ (8004e14 <HAL_RCC_ClockConfig+0x1bc>)
 8004d44:	4313      	orrs	r3, r2
 8004d46:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004d48:	f7ff f93a 	bl	8003fc0 <HAL_GetTick>
 8004d4c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d4e:	e00a      	b.n	8004d66 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d50:	f7ff f936 	bl	8003fc0 <HAL_GetTick>
 8004d54:	4602      	mov	r2, r0
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	1ad3      	subs	r3, r2, r3
 8004d5a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d901      	bls.n	8004d66 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004d62:	2303      	movs	r3, #3
 8004d64:	e04f      	b.n	8004e06 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d66:	4b2b      	ldr	r3, [pc, #172]	@ (8004e14 <HAL_RCC_ClockConfig+0x1bc>)
 8004d68:	689b      	ldr	r3, [r3, #8]
 8004d6a:	f003 020c 	and.w	r2, r3, #12
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	685b      	ldr	r3, [r3, #4]
 8004d72:	009b      	lsls	r3, r3, #2
 8004d74:	429a      	cmp	r2, r3
 8004d76:	d1eb      	bne.n	8004d50 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004d78:	4b25      	ldr	r3, [pc, #148]	@ (8004e10 <HAL_RCC_ClockConfig+0x1b8>)
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f003 0307 	and.w	r3, r3, #7
 8004d80:	683a      	ldr	r2, [r7, #0]
 8004d82:	429a      	cmp	r2, r3
 8004d84:	d20c      	bcs.n	8004da0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d86:	4b22      	ldr	r3, [pc, #136]	@ (8004e10 <HAL_RCC_ClockConfig+0x1b8>)
 8004d88:	683a      	ldr	r2, [r7, #0]
 8004d8a:	b2d2      	uxtb	r2, r2
 8004d8c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d8e:	4b20      	ldr	r3, [pc, #128]	@ (8004e10 <HAL_RCC_ClockConfig+0x1b8>)
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f003 0307 	and.w	r3, r3, #7
 8004d96:	683a      	ldr	r2, [r7, #0]
 8004d98:	429a      	cmp	r2, r3
 8004d9a:	d001      	beq.n	8004da0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004d9c:	2301      	movs	r3, #1
 8004d9e:	e032      	b.n	8004e06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f003 0304 	and.w	r3, r3, #4
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d008      	beq.n	8004dbe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004dac:	4b19      	ldr	r3, [pc, #100]	@ (8004e14 <HAL_RCC_ClockConfig+0x1bc>)
 8004dae:	689b      	ldr	r3, [r3, #8]
 8004db0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	68db      	ldr	r3, [r3, #12]
 8004db8:	4916      	ldr	r1, [pc, #88]	@ (8004e14 <HAL_RCC_ClockConfig+0x1bc>)
 8004dba:	4313      	orrs	r3, r2
 8004dbc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f003 0308 	and.w	r3, r3, #8
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d009      	beq.n	8004dde <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004dca:	4b12      	ldr	r3, [pc, #72]	@ (8004e14 <HAL_RCC_ClockConfig+0x1bc>)
 8004dcc:	689b      	ldr	r3, [r3, #8]
 8004dce:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	691b      	ldr	r3, [r3, #16]
 8004dd6:	00db      	lsls	r3, r3, #3
 8004dd8:	490e      	ldr	r1, [pc, #56]	@ (8004e14 <HAL_RCC_ClockConfig+0x1bc>)
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004dde:	f000 f821 	bl	8004e24 <HAL_RCC_GetSysClockFreq>
 8004de2:	4602      	mov	r2, r0
 8004de4:	4b0b      	ldr	r3, [pc, #44]	@ (8004e14 <HAL_RCC_ClockConfig+0x1bc>)
 8004de6:	689b      	ldr	r3, [r3, #8]
 8004de8:	091b      	lsrs	r3, r3, #4
 8004dea:	f003 030f 	and.w	r3, r3, #15
 8004dee:	490a      	ldr	r1, [pc, #40]	@ (8004e18 <HAL_RCC_ClockConfig+0x1c0>)
 8004df0:	5ccb      	ldrb	r3, [r1, r3]
 8004df2:	fa22 f303 	lsr.w	r3, r2, r3
 8004df6:	4a09      	ldr	r2, [pc, #36]	@ (8004e1c <HAL_RCC_ClockConfig+0x1c4>)
 8004df8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004dfa:	4b09      	ldr	r3, [pc, #36]	@ (8004e20 <HAL_RCC_ClockConfig+0x1c8>)
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	4618      	mov	r0, r3
 8004e00:	f7ff f89a 	bl	8003f38 <HAL_InitTick>

  return HAL_OK;
 8004e04:	2300      	movs	r3, #0
}
 8004e06:	4618      	mov	r0, r3
 8004e08:	3710      	adds	r7, #16
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	bd80      	pop	{r7, pc}
 8004e0e:	bf00      	nop
 8004e10:	40023c00 	.word	0x40023c00
 8004e14:	40023800 	.word	0x40023800
 8004e18:	08007c7c 	.word	0x08007c7c
 8004e1c:	20000134 	.word	0x20000134
 8004e20:	20000138 	.word	0x20000138

08004e24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004e24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004e28:	b094      	sub	sp, #80	@ 0x50
 8004e2a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8004e30:	2300      	movs	r3, #0
 8004e32:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8004e34:	2300      	movs	r3, #0
 8004e36:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004e38:	2300      	movs	r3, #0
 8004e3a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004e3c:	4b79      	ldr	r3, [pc, #484]	@ (8005024 <HAL_RCC_GetSysClockFreq+0x200>)
 8004e3e:	689b      	ldr	r3, [r3, #8]
 8004e40:	f003 030c 	and.w	r3, r3, #12
 8004e44:	2b08      	cmp	r3, #8
 8004e46:	d00d      	beq.n	8004e64 <HAL_RCC_GetSysClockFreq+0x40>
 8004e48:	2b08      	cmp	r3, #8
 8004e4a:	f200 80e1 	bhi.w	8005010 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d002      	beq.n	8004e58 <HAL_RCC_GetSysClockFreq+0x34>
 8004e52:	2b04      	cmp	r3, #4
 8004e54:	d003      	beq.n	8004e5e <HAL_RCC_GetSysClockFreq+0x3a>
 8004e56:	e0db      	b.n	8005010 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004e58:	4b73      	ldr	r3, [pc, #460]	@ (8005028 <HAL_RCC_GetSysClockFreq+0x204>)
 8004e5a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004e5c:	e0db      	b.n	8005016 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004e5e:	4b73      	ldr	r3, [pc, #460]	@ (800502c <HAL_RCC_GetSysClockFreq+0x208>)
 8004e60:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004e62:	e0d8      	b.n	8005016 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004e64:	4b6f      	ldr	r3, [pc, #444]	@ (8005024 <HAL_RCC_GetSysClockFreq+0x200>)
 8004e66:	685b      	ldr	r3, [r3, #4]
 8004e68:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004e6c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004e6e:	4b6d      	ldr	r3, [pc, #436]	@ (8005024 <HAL_RCC_GetSysClockFreq+0x200>)
 8004e70:	685b      	ldr	r3, [r3, #4]
 8004e72:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d063      	beq.n	8004f42 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e7a:	4b6a      	ldr	r3, [pc, #424]	@ (8005024 <HAL_RCC_GetSysClockFreq+0x200>)
 8004e7c:	685b      	ldr	r3, [r3, #4]
 8004e7e:	099b      	lsrs	r3, r3, #6
 8004e80:	2200      	movs	r2, #0
 8004e82:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004e84:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004e86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e8c:	633b      	str	r3, [r7, #48]	@ 0x30
 8004e8e:	2300      	movs	r3, #0
 8004e90:	637b      	str	r3, [r7, #52]	@ 0x34
 8004e92:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004e96:	4622      	mov	r2, r4
 8004e98:	462b      	mov	r3, r5
 8004e9a:	f04f 0000 	mov.w	r0, #0
 8004e9e:	f04f 0100 	mov.w	r1, #0
 8004ea2:	0159      	lsls	r1, r3, #5
 8004ea4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004ea8:	0150      	lsls	r0, r2, #5
 8004eaa:	4602      	mov	r2, r0
 8004eac:	460b      	mov	r3, r1
 8004eae:	4621      	mov	r1, r4
 8004eb0:	1a51      	subs	r1, r2, r1
 8004eb2:	6139      	str	r1, [r7, #16]
 8004eb4:	4629      	mov	r1, r5
 8004eb6:	eb63 0301 	sbc.w	r3, r3, r1
 8004eba:	617b      	str	r3, [r7, #20]
 8004ebc:	f04f 0200 	mov.w	r2, #0
 8004ec0:	f04f 0300 	mov.w	r3, #0
 8004ec4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004ec8:	4659      	mov	r1, fp
 8004eca:	018b      	lsls	r3, r1, #6
 8004ecc:	4651      	mov	r1, sl
 8004ece:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004ed2:	4651      	mov	r1, sl
 8004ed4:	018a      	lsls	r2, r1, #6
 8004ed6:	4651      	mov	r1, sl
 8004ed8:	ebb2 0801 	subs.w	r8, r2, r1
 8004edc:	4659      	mov	r1, fp
 8004ede:	eb63 0901 	sbc.w	r9, r3, r1
 8004ee2:	f04f 0200 	mov.w	r2, #0
 8004ee6:	f04f 0300 	mov.w	r3, #0
 8004eea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004eee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004ef2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004ef6:	4690      	mov	r8, r2
 8004ef8:	4699      	mov	r9, r3
 8004efa:	4623      	mov	r3, r4
 8004efc:	eb18 0303 	adds.w	r3, r8, r3
 8004f00:	60bb      	str	r3, [r7, #8]
 8004f02:	462b      	mov	r3, r5
 8004f04:	eb49 0303 	adc.w	r3, r9, r3
 8004f08:	60fb      	str	r3, [r7, #12]
 8004f0a:	f04f 0200 	mov.w	r2, #0
 8004f0e:	f04f 0300 	mov.w	r3, #0
 8004f12:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004f16:	4629      	mov	r1, r5
 8004f18:	024b      	lsls	r3, r1, #9
 8004f1a:	4621      	mov	r1, r4
 8004f1c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004f20:	4621      	mov	r1, r4
 8004f22:	024a      	lsls	r2, r1, #9
 8004f24:	4610      	mov	r0, r2
 8004f26:	4619      	mov	r1, r3
 8004f28:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004f2e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004f30:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004f34:	f7fb f99c 	bl	8000270 <__aeabi_uldivmod>
 8004f38:	4602      	mov	r2, r0
 8004f3a:	460b      	mov	r3, r1
 8004f3c:	4613      	mov	r3, r2
 8004f3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004f40:	e058      	b.n	8004ff4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f42:	4b38      	ldr	r3, [pc, #224]	@ (8005024 <HAL_RCC_GetSysClockFreq+0x200>)
 8004f44:	685b      	ldr	r3, [r3, #4]
 8004f46:	099b      	lsrs	r3, r3, #6
 8004f48:	2200      	movs	r2, #0
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	4611      	mov	r1, r2
 8004f4e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004f52:	623b      	str	r3, [r7, #32]
 8004f54:	2300      	movs	r3, #0
 8004f56:	627b      	str	r3, [r7, #36]	@ 0x24
 8004f58:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004f5c:	4642      	mov	r2, r8
 8004f5e:	464b      	mov	r3, r9
 8004f60:	f04f 0000 	mov.w	r0, #0
 8004f64:	f04f 0100 	mov.w	r1, #0
 8004f68:	0159      	lsls	r1, r3, #5
 8004f6a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004f6e:	0150      	lsls	r0, r2, #5
 8004f70:	4602      	mov	r2, r0
 8004f72:	460b      	mov	r3, r1
 8004f74:	4641      	mov	r1, r8
 8004f76:	ebb2 0a01 	subs.w	sl, r2, r1
 8004f7a:	4649      	mov	r1, r9
 8004f7c:	eb63 0b01 	sbc.w	fp, r3, r1
 8004f80:	f04f 0200 	mov.w	r2, #0
 8004f84:	f04f 0300 	mov.w	r3, #0
 8004f88:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004f8c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004f90:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004f94:	ebb2 040a 	subs.w	r4, r2, sl
 8004f98:	eb63 050b 	sbc.w	r5, r3, fp
 8004f9c:	f04f 0200 	mov.w	r2, #0
 8004fa0:	f04f 0300 	mov.w	r3, #0
 8004fa4:	00eb      	lsls	r3, r5, #3
 8004fa6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004faa:	00e2      	lsls	r2, r4, #3
 8004fac:	4614      	mov	r4, r2
 8004fae:	461d      	mov	r5, r3
 8004fb0:	4643      	mov	r3, r8
 8004fb2:	18e3      	adds	r3, r4, r3
 8004fb4:	603b      	str	r3, [r7, #0]
 8004fb6:	464b      	mov	r3, r9
 8004fb8:	eb45 0303 	adc.w	r3, r5, r3
 8004fbc:	607b      	str	r3, [r7, #4]
 8004fbe:	f04f 0200 	mov.w	r2, #0
 8004fc2:	f04f 0300 	mov.w	r3, #0
 8004fc6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004fca:	4629      	mov	r1, r5
 8004fcc:	028b      	lsls	r3, r1, #10
 8004fce:	4621      	mov	r1, r4
 8004fd0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004fd4:	4621      	mov	r1, r4
 8004fd6:	028a      	lsls	r2, r1, #10
 8004fd8:	4610      	mov	r0, r2
 8004fda:	4619      	mov	r1, r3
 8004fdc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004fde:	2200      	movs	r2, #0
 8004fe0:	61bb      	str	r3, [r7, #24]
 8004fe2:	61fa      	str	r2, [r7, #28]
 8004fe4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004fe8:	f7fb f942 	bl	8000270 <__aeabi_uldivmod>
 8004fec:	4602      	mov	r2, r0
 8004fee:	460b      	mov	r3, r1
 8004ff0:	4613      	mov	r3, r2
 8004ff2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004ff4:	4b0b      	ldr	r3, [pc, #44]	@ (8005024 <HAL_RCC_GetSysClockFreq+0x200>)
 8004ff6:	685b      	ldr	r3, [r3, #4]
 8004ff8:	0c1b      	lsrs	r3, r3, #16
 8004ffa:	f003 0303 	and.w	r3, r3, #3
 8004ffe:	3301      	adds	r3, #1
 8005000:	005b      	lsls	r3, r3, #1
 8005002:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8005004:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005006:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005008:	fbb2 f3f3 	udiv	r3, r2, r3
 800500c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800500e:	e002      	b.n	8005016 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005010:	4b05      	ldr	r3, [pc, #20]	@ (8005028 <HAL_RCC_GetSysClockFreq+0x204>)
 8005012:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005014:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005016:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005018:	4618      	mov	r0, r3
 800501a:	3750      	adds	r7, #80	@ 0x50
 800501c:	46bd      	mov	sp, r7
 800501e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005022:	bf00      	nop
 8005024:	40023800 	.word	0x40023800
 8005028:	00f42400 	.word	0x00f42400
 800502c:	007a1200 	.word	0x007a1200

08005030 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005030:	b480      	push	{r7}
 8005032:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005034:	4b03      	ldr	r3, [pc, #12]	@ (8005044 <HAL_RCC_GetHCLKFreq+0x14>)
 8005036:	681b      	ldr	r3, [r3, #0]
}
 8005038:	4618      	mov	r0, r3
 800503a:	46bd      	mov	sp, r7
 800503c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005040:	4770      	bx	lr
 8005042:	bf00      	nop
 8005044:	20000134 	.word	0x20000134

08005048 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005048:	b580      	push	{r7, lr}
 800504a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800504c:	f7ff fff0 	bl	8005030 <HAL_RCC_GetHCLKFreq>
 8005050:	4602      	mov	r2, r0
 8005052:	4b05      	ldr	r3, [pc, #20]	@ (8005068 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005054:	689b      	ldr	r3, [r3, #8]
 8005056:	0a9b      	lsrs	r3, r3, #10
 8005058:	f003 0307 	and.w	r3, r3, #7
 800505c:	4903      	ldr	r1, [pc, #12]	@ (800506c <HAL_RCC_GetPCLK1Freq+0x24>)
 800505e:	5ccb      	ldrb	r3, [r1, r3]
 8005060:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005064:	4618      	mov	r0, r3
 8005066:	bd80      	pop	{r7, pc}
 8005068:	40023800 	.word	0x40023800
 800506c:	08007c8c 	.word	0x08007c8c

08005070 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005070:	b580      	push	{r7, lr}
 8005072:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005074:	f7ff ffdc 	bl	8005030 <HAL_RCC_GetHCLKFreq>
 8005078:	4602      	mov	r2, r0
 800507a:	4b05      	ldr	r3, [pc, #20]	@ (8005090 <HAL_RCC_GetPCLK2Freq+0x20>)
 800507c:	689b      	ldr	r3, [r3, #8]
 800507e:	0b5b      	lsrs	r3, r3, #13
 8005080:	f003 0307 	and.w	r3, r3, #7
 8005084:	4903      	ldr	r1, [pc, #12]	@ (8005094 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005086:	5ccb      	ldrb	r3, [r1, r3]
 8005088:	fa22 f303 	lsr.w	r3, r2, r3
}
 800508c:	4618      	mov	r0, r3
 800508e:	bd80      	pop	{r7, pc}
 8005090:	40023800 	.word	0x40023800
 8005094:	08007c8c 	.word	0x08007c8c

08005098 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005098:	b580      	push	{r7, lr}
 800509a:	b082      	sub	sp, #8
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d101      	bne.n	80050aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80050a6:	2301      	movs	r3, #1
 80050a8:	e041      	b.n	800512e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80050b0:	b2db      	uxtb	r3, r3
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d106      	bne.n	80050c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2200      	movs	r2, #0
 80050ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80050be:	6878      	ldr	r0, [r7, #4]
 80050c0:	f7fd fd76 	bl	8002bb0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2202      	movs	r2, #2
 80050c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681a      	ldr	r2, [r3, #0]
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	3304      	adds	r3, #4
 80050d4:	4619      	mov	r1, r3
 80050d6:	4610      	mov	r0, r2
 80050d8:	f000 fcd2 	bl	8005a80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2201      	movs	r2, #1
 80050e0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2201      	movs	r2, #1
 80050e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2201      	movs	r2, #1
 80050f0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2201      	movs	r2, #1
 80050f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2201      	movs	r2, #1
 8005100:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2201      	movs	r2, #1
 8005108:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2201      	movs	r2, #1
 8005110:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2201      	movs	r2, #1
 8005118:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2201      	movs	r2, #1
 8005120:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2201      	movs	r2, #1
 8005128:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800512c:	2300      	movs	r3, #0
}
 800512e:	4618      	mov	r0, r3
 8005130:	3708      	adds	r7, #8
 8005132:	46bd      	mov	sp, r7
 8005134:	bd80      	pop	{r7, pc}
	...

08005138 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005138:	b480      	push	{r7}
 800513a:	b085      	sub	sp, #20
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005146:	b2db      	uxtb	r3, r3
 8005148:	2b01      	cmp	r3, #1
 800514a:	d001      	beq.n	8005150 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800514c:	2301      	movs	r3, #1
 800514e:	e04e      	b.n	80051ee <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2202      	movs	r2, #2
 8005154:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	68da      	ldr	r2, [r3, #12]
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f042 0201 	orr.w	r2, r2, #1
 8005166:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	4a23      	ldr	r2, [pc, #140]	@ (80051fc <HAL_TIM_Base_Start_IT+0xc4>)
 800516e:	4293      	cmp	r3, r2
 8005170:	d022      	beq.n	80051b8 <HAL_TIM_Base_Start_IT+0x80>
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800517a:	d01d      	beq.n	80051b8 <HAL_TIM_Base_Start_IT+0x80>
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	4a1f      	ldr	r2, [pc, #124]	@ (8005200 <HAL_TIM_Base_Start_IT+0xc8>)
 8005182:	4293      	cmp	r3, r2
 8005184:	d018      	beq.n	80051b8 <HAL_TIM_Base_Start_IT+0x80>
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	4a1e      	ldr	r2, [pc, #120]	@ (8005204 <HAL_TIM_Base_Start_IT+0xcc>)
 800518c:	4293      	cmp	r3, r2
 800518e:	d013      	beq.n	80051b8 <HAL_TIM_Base_Start_IT+0x80>
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	4a1c      	ldr	r2, [pc, #112]	@ (8005208 <HAL_TIM_Base_Start_IT+0xd0>)
 8005196:	4293      	cmp	r3, r2
 8005198:	d00e      	beq.n	80051b8 <HAL_TIM_Base_Start_IT+0x80>
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	4a1b      	ldr	r2, [pc, #108]	@ (800520c <HAL_TIM_Base_Start_IT+0xd4>)
 80051a0:	4293      	cmp	r3, r2
 80051a2:	d009      	beq.n	80051b8 <HAL_TIM_Base_Start_IT+0x80>
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	4a19      	ldr	r2, [pc, #100]	@ (8005210 <HAL_TIM_Base_Start_IT+0xd8>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d004      	beq.n	80051b8 <HAL_TIM_Base_Start_IT+0x80>
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	4a18      	ldr	r2, [pc, #96]	@ (8005214 <HAL_TIM_Base_Start_IT+0xdc>)
 80051b4:	4293      	cmp	r3, r2
 80051b6:	d111      	bne.n	80051dc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	689b      	ldr	r3, [r3, #8]
 80051be:	f003 0307 	and.w	r3, r3, #7
 80051c2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	2b06      	cmp	r3, #6
 80051c8:	d010      	beq.n	80051ec <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	681a      	ldr	r2, [r3, #0]
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f042 0201 	orr.w	r2, r2, #1
 80051d8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051da:	e007      	b.n	80051ec <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	681a      	ldr	r2, [r3, #0]
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f042 0201 	orr.w	r2, r2, #1
 80051ea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80051ec:	2300      	movs	r3, #0
}
 80051ee:	4618      	mov	r0, r3
 80051f0:	3714      	adds	r7, #20
 80051f2:	46bd      	mov	sp, r7
 80051f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f8:	4770      	bx	lr
 80051fa:	bf00      	nop
 80051fc:	40010000 	.word	0x40010000
 8005200:	40000400 	.word	0x40000400
 8005204:	40000800 	.word	0x40000800
 8005208:	40000c00 	.word	0x40000c00
 800520c:	40010400 	.word	0x40010400
 8005210:	40014000 	.word	0x40014000
 8005214:	40001800 	.word	0x40001800

08005218 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005218:	b580      	push	{r7, lr}
 800521a:	b082      	sub	sp, #8
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d101      	bne.n	800522a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005226:	2301      	movs	r3, #1
 8005228:	e041      	b.n	80052ae <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005230:	b2db      	uxtb	r3, r3
 8005232:	2b00      	cmp	r3, #0
 8005234:	d106      	bne.n	8005244 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2200      	movs	r2, #0
 800523a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800523e:	6878      	ldr	r0, [r7, #4]
 8005240:	f000 f839 	bl	80052b6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2202      	movs	r2, #2
 8005248:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681a      	ldr	r2, [r3, #0]
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	3304      	adds	r3, #4
 8005254:	4619      	mov	r1, r3
 8005256:	4610      	mov	r0, r2
 8005258:	f000 fc12 	bl	8005a80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2201      	movs	r2, #1
 8005260:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2201      	movs	r2, #1
 8005268:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2201      	movs	r2, #1
 8005270:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2201      	movs	r2, #1
 8005278:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2201      	movs	r2, #1
 8005280:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2201      	movs	r2, #1
 8005288:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2201      	movs	r2, #1
 8005290:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2201      	movs	r2, #1
 8005298:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2201      	movs	r2, #1
 80052a0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2201      	movs	r2, #1
 80052a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80052ac:	2300      	movs	r3, #0
}
 80052ae:	4618      	mov	r0, r3
 80052b0:	3708      	adds	r7, #8
 80052b2:	46bd      	mov	sp, r7
 80052b4:	bd80      	pop	{r7, pc}

080052b6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80052b6:	b480      	push	{r7}
 80052b8:	b083      	sub	sp, #12
 80052ba:	af00      	add	r7, sp, #0
 80052bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80052be:	bf00      	nop
 80052c0:	370c      	adds	r7, #12
 80052c2:	46bd      	mov	sp, r7
 80052c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c8:	4770      	bx	lr
	...

080052cc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b084      	sub	sp, #16
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
 80052d4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d109      	bne.n	80052f0 <HAL_TIM_PWM_Start+0x24>
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80052e2:	b2db      	uxtb	r3, r3
 80052e4:	2b01      	cmp	r3, #1
 80052e6:	bf14      	ite	ne
 80052e8:	2301      	movne	r3, #1
 80052ea:	2300      	moveq	r3, #0
 80052ec:	b2db      	uxtb	r3, r3
 80052ee:	e022      	b.n	8005336 <HAL_TIM_PWM_Start+0x6a>
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	2b04      	cmp	r3, #4
 80052f4:	d109      	bne.n	800530a <HAL_TIM_PWM_Start+0x3e>
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80052fc:	b2db      	uxtb	r3, r3
 80052fe:	2b01      	cmp	r3, #1
 8005300:	bf14      	ite	ne
 8005302:	2301      	movne	r3, #1
 8005304:	2300      	moveq	r3, #0
 8005306:	b2db      	uxtb	r3, r3
 8005308:	e015      	b.n	8005336 <HAL_TIM_PWM_Start+0x6a>
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	2b08      	cmp	r3, #8
 800530e:	d109      	bne.n	8005324 <HAL_TIM_PWM_Start+0x58>
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005316:	b2db      	uxtb	r3, r3
 8005318:	2b01      	cmp	r3, #1
 800531a:	bf14      	ite	ne
 800531c:	2301      	movne	r3, #1
 800531e:	2300      	moveq	r3, #0
 8005320:	b2db      	uxtb	r3, r3
 8005322:	e008      	b.n	8005336 <HAL_TIM_PWM_Start+0x6a>
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800532a:	b2db      	uxtb	r3, r3
 800532c:	2b01      	cmp	r3, #1
 800532e:	bf14      	ite	ne
 8005330:	2301      	movne	r3, #1
 8005332:	2300      	moveq	r3, #0
 8005334:	b2db      	uxtb	r3, r3
 8005336:	2b00      	cmp	r3, #0
 8005338:	d001      	beq.n	800533e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800533a:	2301      	movs	r3, #1
 800533c:	e07c      	b.n	8005438 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	2b00      	cmp	r3, #0
 8005342:	d104      	bne.n	800534e <HAL_TIM_PWM_Start+0x82>
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2202      	movs	r2, #2
 8005348:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800534c:	e013      	b.n	8005376 <HAL_TIM_PWM_Start+0xaa>
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	2b04      	cmp	r3, #4
 8005352:	d104      	bne.n	800535e <HAL_TIM_PWM_Start+0x92>
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2202      	movs	r2, #2
 8005358:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800535c:	e00b      	b.n	8005376 <HAL_TIM_PWM_Start+0xaa>
 800535e:	683b      	ldr	r3, [r7, #0]
 8005360:	2b08      	cmp	r3, #8
 8005362:	d104      	bne.n	800536e <HAL_TIM_PWM_Start+0xa2>
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2202      	movs	r2, #2
 8005368:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800536c:	e003      	b.n	8005376 <HAL_TIM_PWM_Start+0xaa>
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2202      	movs	r2, #2
 8005372:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	2201      	movs	r2, #1
 800537c:	6839      	ldr	r1, [r7, #0]
 800537e:	4618      	mov	r0, r3
 8005380:	f000 fe74 	bl	800606c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	4a2d      	ldr	r2, [pc, #180]	@ (8005440 <HAL_TIM_PWM_Start+0x174>)
 800538a:	4293      	cmp	r3, r2
 800538c:	d004      	beq.n	8005398 <HAL_TIM_PWM_Start+0xcc>
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	4a2c      	ldr	r2, [pc, #176]	@ (8005444 <HAL_TIM_PWM_Start+0x178>)
 8005394:	4293      	cmp	r3, r2
 8005396:	d101      	bne.n	800539c <HAL_TIM_PWM_Start+0xd0>
 8005398:	2301      	movs	r3, #1
 800539a:	e000      	b.n	800539e <HAL_TIM_PWM_Start+0xd2>
 800539c:	2300      	movs	r3, #0
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d007      	beq.n	80053b2 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80053b0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	4a22      	ldr	r2, [pc, #136]	@ (8005440 <HAL_TIM_PWM_Start+0x174>)
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d022      	beq.n	8005402 <HAL_TIM_PWM_Start+0x136>
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80053c4:	d01d      	beq.n	8005402 <HAL_TIM_PWM_Start+0x136>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	4a1f      	ldr	r2, [pc, #124]	@ (8005448 <HAL_TIM_PWM_Start+0x17c>)
 80053cc:	4293      	cmp	r3, r2
 80053ce:	d018      	beq.n	8005402 <HAL_TIM_PWM_Start+0x136>
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	4a1d      	ldr	r2, [pc, #116]	@ (800544c <HAL_TIM_PWM_Start+0x180>)
 80053d6:	4293      	cmp	r3, r2
 80053d8:	d013      	beq.n	8005402 <HAL_TIM_PWM_Start+0x136>
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	4a1c      	ldr	r2, [pc, #112]	@ (8005450 <HAL_TIM_PWM_Start+0x184>)
 80053e0:	4293      	cmp	r3, r2
 80053e2:	d00e      	beq.n	8005402 <HAL_TIM_PWM_Start+0x136>
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	4a16      	ldr	r2, [pc, #88]	@ (8005444 <HAL_TIM_PWM_Start+0x178>)
 80053ea:	4293      	cmp	r3, r2
 80053ec:	d009      	beq.n	8005402 <HAL_TIM_PWM_Start+0x136>
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	4a18      	ldr	r2, [pc, #96]	@ (8005454 <HAL_TIM_PWM_Start+0x188>)
 80053f4:	4293      	cmp	r3, r2
 80053f6:	d004      	beq.n	8005402 <HAL_TIM_PWM_Start+0x136>
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	4a16      	ldr	r2, [pc, #88]	@ (8005458 <HAL_TIM_PWM_Start+0x18c>)
 80053fe:	4293      	cmp	r3, r2
 8005400:	d111      	bne.n	8005426 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	689b      	ldr	r3, [r3, #8]
 8005408:	f003 0307 	and.w	r3, r3, #7
 800540c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	2b06      	cmp	r3, #6
 8005412:	d010      	beq.n	8005436 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	681a      	ldr	r2, [r3, #0]
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f042 0201 	orr.w	r2, r2, #1
 8005422:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005424:	e007      	b.n	8005436 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	681a      	ldr	r2, [r3, #0]
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f042 0201 	orr.w	r2, r2, #1
 8005434:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005436:	2300      	movs	r3, #0
}
 8005438:	4618      	mov	r0, r3
 800543a:	3710      	adds	r7, #16
 800543c:	46bd      	mov	sp, r7
 800543e:	bd80      	pop	{r7, pc}
 8005440:	40010000 	.word	0x40010000
 8005444:	40010400 	.word	0x40010400
 8005448:	40000400 	.word	0x40000400
 800544c:	40000800 	.word	0x40000800
 8005450:	40000c00 	.word	0x40000c00
 8005454:	40014000 	.word	0x40014000
 8005458:	40001800 	.word	0x40001800

0800545c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800545c:	b580      	push	{r7, lr}
 800545e:	b082      	sub	sp, #8
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
 8005464:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	2200      	movs	r2, #0
 800546c:	6839      	ldr	r1, [r7, #0]
 800546e:	4618      	mov	r0, r3
 8005470:	f000 fdfc 	bl	800606c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	4a2e      	ldr	r2, [pc, #184]	@ (8005534 <HAL_TIM_PWM_Stop+0xd8>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d004      	beq.n	8005488 <HAL_TIM_PWM_Stop+0x2c>
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	4a2d      	ldr	r2, [pc, #180]	@ (8005538 <HAL_TIM_PWM_Stop+0xdc>)
 8005484:	4293      	cmp	r3, r2
 8005486:	d101      	bne.n	800548c <HAL_TIM_PWM_Stop+0x30>
 8005488:	2301      	movs	r3, #1
 800548a:	e000      	b.n	800548e <HAL_TIM_PWM_Stop+0x32>
 800548c:	2300      	movs	r3, #0
 800548e:	2b00      	cmp	r3, #0
 8005490:	d017      	beq.n	80054c2 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	6a1a      	ldr	r2, [r3, #32]
 8005498:	f241 1311 	movw	r3, #4369	@ 0x1111
 800549c:	4013      	ands	r3, r2
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d10f      	bne.n	80054c2 <HAL_TIM_PWM_Stop+0x66>
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	6a1a      	ldr	r2, [r3, #32]
 80054a8:	f240 4344 	movw	r3, #1092	@ 0x444
 80054ac:	4013      	ands	r3, r2
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d107      	bne.n	80054c2 <HAL_TIM_PWM_Stop+0x66>
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80054c0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	6a1a      	ldr	r2, [r3, #32]
 80054c8:	f241 1311 	movw	r3, #4369	@ 0x1111
 80054cc:	4013      	ands	r3, r2
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d10f      	bne.n	80054f2 <HAL_TIM_PWM_Stop+0x96>
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	6a1a      	ldr	r2, [r3, #32]
 80054d8:	f240 4344 	movw	r3, #1092	@ 0x444
 80054dc:	4013      	ands	r3, r2
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d107      	bne.n	80054f2 <HAL_TIM_PWM_Stop+0x96>
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	681a      	ldr	r2, [r3, #0]
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f022 0201 	bic.w	r2, r2, #1
 80054f0:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d104      	bne.n	8005502 <HAL_TIM_PWM_Stop+0xa6>
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2201      	movs	r2, #1
 80054fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005500:	e013      	b.n	800552a <HAL_TIM_PWM_Stop+0xce>
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	2b04      	cmp	r3, #4
 8005506:	d104      	bne.n	8005512 <HAL_TIM_PWM_Stop+0xb6>
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2201      	movs	r2, #1
 800550c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005510:	e00b      	b.n	800552a <HAL_TIM_PWM_Stop+0xce>
 8005512:	683b      	ldr	r3, [r7, #0]
 8005514:	2b08      	cmp	r3, #8
 8005516:	d104      	bne.n	8005522 <HAL_TIM_PWM_Stop+0xc6>
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2201      	movs	r2, #1
 800551c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005520:	e003      	b.n	800552a <HAL_TIM_PWM_Stop+0xce>
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	2201      	movs	r2, #1
 8005526:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 800552a:	2300      	movs	r3, #0
}
 800552c:	4618      	mov	r0, r3
 800552e:	3708      	adds	r7, #8
 8005530:	46bd      	mov	sp, r7
 8005532:	bd80      	pop	{r7, pc}
 8005534:	40010000 	.word	0x40010000
 8005538:	40010400 	.word	0x40010400

0800553c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b084      	sub	sp, #16
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	68db      	ldr	r3, [r3, #12]
 800554a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	691b      	ldr	r3, [r3, #16]
 8005552:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005554:	68bb      	ldr	r3, [r7, #8]
 8005556:	f003 0302 	and.w	r3, r3, #2
 800555a:	2b00      	cmp	r3, #0
 800555c:	d020      	beq.n	80055a0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	f003 0302 	and.w	r3, r3, #2
 8005564:	2b00      	cmp	r3, #0
 8005566:	d01b      	beq.n	80055a0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f06f 0202 	mvn.w	r2, #2
 8005570:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	2201      	movs	r2, #1
 8005576:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	699b      	ldr	r3, [r3, #24]
 800557e:	f003 0303 	and.w	r3, r3, #3
 8005582:	2b00      	cmp	r3, #0
 8005584:	d003      	beq.n	800558e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005586:	6878      	ldr	r0, [r7, #4]
 8005588:	f000 fa5b 	bl	8005a42 <HAL_TIM_IC_CaptureCallback>
 800558c:	e005      	b.n	800559a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800558e:	6878      	ldr	r0, [r7, #4]
 8005590:	f000 fa4d 	bl	8005a2e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005594:	6878      	ldr	r0, [r7, #4]
 8005596:	f000 fa5e 	bl	8005a56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	2200      	movs	r2, #0
 800559e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80055a0:	68bb      	ldr	r3, [r7, #8]
 80055a2:	f003 0304 	and.w	r3, r3, #4
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d020      	beq.n	80055ec <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	f003 0304 	and.w	r3, r3, #4
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d01b      	beq.n	80055ec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f06f 0204 	mvn.w	r2, #4
 80055bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	2202      	movs	r2, #2
 80055c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	699b      	ldr	r3, [r3, #24]
 80055ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d003      	beq.n	80055da <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80055d2:	6878      	ldr	r0, [r7, #4]
 80055d4:	f000 fa35 	bl	8005a42 <HAL_TIM_IC_CaptureCallback>
 80055d8:	e005      	b.n	80055e6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055da:	6878      	ldr	r0, [r7, #4]
 80055dc:	f000 fa27 	bl	8005a2e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055e0:	6878      	ldr	r0, [r7, #4]
 80055e2:	f000 fa38 	bl	8005a56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2200      	movs	r2, #0
 80055ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80055ec:	68bb      	ldr	r3, [r7, #8]
 80055ee:	f003 0308 	and.w	r3, r3, #8
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d020      	beq.n	8005638 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	f003 0308 	and.w	r3, r3, #8
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d01b      	beq.n	8005638 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f06f 0208 	mvn.w	r2, #8
 8005608:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2204      	movs	r2, #4
 800560e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	69db      	ldr	r3, [r3, #28]
 8005616:	f003 0303 	and.w	r3, r3, #3
 800561a:	2b00      	cmp	r3, #0
 800561c:	d003      	beq.n	8005626 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800561e:	6878      	ldr	r0, [r7, #4]
 8005620:	f000 fa0f 	bl	8005a42 <HAL_TIM_IC_CaptureCallback>
 8005624:	e005      	b.n	8005632 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005626:	6878      	ldr	r0, [r7, #4]
 8005628:	f000 fa01 	bl	8005a2e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800562c:	6878      	ldr	r0, [r7, #4]
 800562e:	f000 fa12 	bl	8005a56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	2200      	movs	r2, #0
 8005636:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005638:	68bb      	ldr	r3, [r7, #8]
 800563a:	f003 0310 	and.w	r3, r3, #16
 800563e:	2b00      	cmp	r3, #0
 8005640:	d020      	beq.n	8005684 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	f003 0310 	and.w	r3, r3, #16
 8005648:	2b00      	cmp	r3, #0
 800564a:	d01b      	beq.n	8005684 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f06f 0210 	mvn.w	r2, #16
 8005654:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2208      	movs	r2, #8
 800565a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	69db      	ldr	r3, [r3, #28]
 8005662:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005666:	2b00      	cmp	r3, #0
 8005668:	d003      	beq.n	8005672 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800566a:	6878      	ldr	r0, [r7, #4]
 800566c:	f000 f9e9 	bl	8005a42 <HAL_TIM_IC_CaptureCallback>
 8005670:	e005      	b.n	800567e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005672:	6878      	ldr	r0, [r7, #4]
 8005674:	f000 f9db 	bl	8005a2e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005678:	6878      	ldr	r0, [r7, #4]
 800567a:	f000 f9ec 	bl	8005a56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2200      	movs	r2, #0
 8005682:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005684:	68bb      	ldr	r3, [r7, #8]
 8005686:	f003 0301 	and.w	r3, r3, #1
 800568a:	2b00      	cmp	r3, #0
 800568c:	d00c      	beq.n	80056a8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	f003 0301 	and.w	r3, r3, #1
 8005694:	2b00      	cmp	r3, #0
 8005696:	d007      	beq.n	80056a8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f06f 0201 	mvn.w	r2, #1
 80056a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80056a2:	6878      	ldr	r0, [r7, #4]
 80056a4:	f7fd f9bc 	bl	8002a20 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80056a8:	68bb      	ldr	r3, [r7, #8]
 80056aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d00c      	beq.n	80056cc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d007      	beq.n	80056cc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80056c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80056c6:	6878      	ldr	r0, [r7, #4]
 80056c8:	f000 fd7c 	bl	80061c4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80056cc:	68bb      	ldr	r3, [r7, #8]
 80056ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d00c      	beq.n	80056f0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d007      	beq.n	80056f0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80056e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80056ea:	6878      	ldr	r0, [r7, #4]
 80056ec:	f000 f9bd 	bl	8005a6a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80056f0:	68bb      	ldr	r3, [r7, #8]
 80056f2:	f003 0320 	and.w	r3, r3, #32
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d00c      	beq.n	8005714 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	f003 0320 	and.w	r3, r3, #32
 8005700:	2b00      	cmp	r3, #0
 8005702:	d007      	beq.n	8005714 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f06f 0220 	mvn.w	r2, #32
 800570c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800570e:	6878      	ldr	r0, [r7, #4]
 8005710:	f000 fd4e 	bl	80061b0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005714:	bf00      	nop
 8005716:	3710      	adds	r7, #16
 8005718:	46bd      	mov	sp, r7
 800571a:	bd80      	pop	{r7, pc}

0800571c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800571c:	b580      	push	{r7, lr}
 800571e:	b086      	sub	sp, #24
 8005720:	af00      	add	r7, sp, #0
 8005722:	60f8      	str	r0, [r7, #12]
 8005724:	60b9      	str	r1, [r7, #8]
 8005726:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005728:	2300      	movs	r3, #0
 800572a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005732:	2b01      	cmp	r3, #1
 8005734:	d101      	bne.n	800573a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005736:	2302      	movs	r3, #2
 8005738:	e0ae      	b.n	8005898 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	2201      	movs	r2, #1
 800573e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	2b0c      	cmp	r3, #12
 8005746:	f200 809f 	bhi.w	8005888 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800574a:	a201      	add	r2, pc, #4	@ (adr r2, 8005750 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800574c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005750:	08005785 	.word	0x08005785
 8005754:	08005889 	.word	0x08005889
 8005758:	08005889 	.word	0x08005889
 800575c:	08005889 	.word	0x08005889
 8005760:	080057c5 	.word	0x080057c5
 8005764:	08005889 	.word	0x08005889
 8005768:	08005889 	.word	0x08005889
 800576c:	08005889 	.word	0x08005889
 8005770:	08005807 	.word	0x08005807
 8005774:	08005889 	.word	0x08005889
 8005778:	08005889 	.word	0x08005889
 800577c:	08005889 	.word	0x08005889
 8005780:	08005847 	.word	0x08005847
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	68b9      	ldr	r1, [r7, #8]
 800578a:	4618      	mov	r0, r3
 800578c:	f000 fa24 	bl	8005bd8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	699a      	ldr	r2, [r3, #24]
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f042 0208 	orr.w	r2, r2, #8
 800579e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	699a      	ldr	r2, [r3, #24]
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f022 0204 	bic.w	r2, r2, #4
 80057ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	6999      	ldr	r1, [r3, #24]
 80057b6:	68bb      	ldr	r3, [r7, #8]
 80057b8:	691a      	ldr	r2, [r3, #16]
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	430a      	orrs	r2, r1
 80057c0:	619a      	str	r2, [r3, #24]
      break;
 80057c2:	e064      	b.n	800588e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	68b9      	ldr	r1, [r7, #8]
 80057ca:	4618      	mov	r0, r3
 80057cc:	f000 fa74 	bl	8005cb8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	699a      	ldr	r2, [r3, #24]
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80057de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	699a      	ldr	r2, [r3, #24]
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80057ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	6999      	ldr	r1, [r3, #24]
 80057f6:	68bb      	ldr	r3, [r7, #8]
 80057f8:	691b      	ldr	r3, [r3, #16]
 80057fa:	021a      	lsls	r2, r3, #8
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	430a      	orrs	r2, r1
 8005802:	619a      	str	r2, [r3, #24]
      break;
 8005804:	e043      	b.n	800588e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	68b9      	ldr	r1, [r7, #8]
 800580c:	4618      	mov	r0, r3
 800580e:	f000 fac9 	bl	8005da4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	69da      	ldr	r2, [r3, #28]
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f042 0208 	orr.w	r2, r2, #8
 8005820:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	69da      	ldr	r2, [r3, #28]
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f022 0204 	bic.w	r2, r2, #4
 8005830:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	69d9      	ldr	r1, [r3, #28]
 8005838:	68bb      	ldr	r3, [r7, #8]
 800583a:	691a      	ldr	r2, [r3, #16]
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	430a      	orrs	r2, r1
 8005842:	61da      	str	r2, [r3, #28]
      break;
 8005844:	e023      	b.n	800588e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	68b9      	ldr	r1, [r7, #8]
 800584c:	4618      	mov	r0, r3
 800584e:	f000 fb1d 	bl	8005e8c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	69da      	ldr	r2, [r3, #28]
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005860:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	69da      	ldr	r2, [r3, #28]
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005870:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	69d9      	ldr	r1, [r3, #28]
 8005878:	68bb      	ldr	r3, [r7, #8]
 800587a:	691b      	ldr	r3, [r3, #16]
 800587c:	021a      	lsls	r2, r3, #8
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	430a      	orrs	r2, r1
 8005884:	61da      	str	r2, [r3, #28]
      break;
 8005886:	e002      	b.n	800588e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005888:	2301      	movs	r3, #1
 800588a:	75fb      	strb	r3, [r7, #23]
      break;
 800588c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	2200      	movs	r2, #0
 8005892:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005896:	7dfb      	ldrb	r3, [r7, #23]
}
 8005898:	4618      	mov	r0, r3
 800589a:	3718      	adds	r7, #24
 800589c:	46bd      	mov	sp, r7
 800589e:	bd80      	pop	{r7, pc}

080058a0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80058a0:	b580      	push	{r7, lr}
 80058a2:	b084      	sub	sp, #16
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
 80058a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80058aa:	2300      	movs	r3, #0
 80058ac:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80058b4:	2b01      	cmp	r3, #1
 80058b6:	d101      	bne.n	80058bc <HAL_TIM_ConfigClockSource+0x1c>
 80058b8:	2302      	movs	r3, #2
 80058ba:	e0b4      	b.n	8005a26 <HAL_TIM_ConfigClockSource+0x186>
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2201      	movs	r2, #1
 80058c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2202      	movs	r2, #2
 80058c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	689b      	ldr	r3, [r3, #8]
 80058d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80058d4:	68bb      	ldr	r3, [r7, #8]
 80058d6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80058da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80058dc:	68bb      	ldr	r3, [r7, #8]
 80058de:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80058e2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	68ba      	ldr	r2, [r7, #8]
 80058ea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80058f4:	d03e      	beq.n	8005974 <HAL_TIM_ConfigClockSource+0xd4>
 80058f6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80058fa:	f200 8087 	bhi.w	8005a0c <HAL_TIM_ConfigClockSource+0x16c>
 80058fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005902:	f000 8086 	beq.w	8005a12 <HAL_TIM_ConfigClockSource+0x172>
 8005906:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800590a:	d87f      	bhi.n	8005a0c <HAL_TIM_ConfigClockSource+0x16c>
 800590c:	2b70      	cmp	r3, #112	@ 0x70
 800590e:	d01a      	beq.n	8005946 <HAL_TIM_ConfigClockSource+0xa6>
 8005910:	2b70      	cmp	r3, #112	@ 0x70
 8005912:	d87b      	bhi.n	8005a0c <HAL_TIM_ConfigClockSource+0x16c>
 8005914:	2b60      	cmp	r3, #96	@ 0x60
 8005916:	d050      	beq.n	80059ba <HAL_TIM_ConfigClockSource+0x11a>
 8005918:	2b60      	cmp	r3, #96	@ 0x60
 800591a:	d877      	bhi.n	8005a0c <HAL_TIM_ConfigClockSource+0x16c>
 800591c:	2b50      	cmp	r3, #80	@ 0x50
 800591e:	d03c      	beq.n	800599a <HAL_TIM_ConfigClockSource+0xfa>
 8005920:	2b50      	cmp	r3, #80	@ 0x50
 8005922:	d873      	bhi.n	8005a0c <HAL_TIM_ConfigClockSource+0x16c>
 8005924:	2b40      	cmp	r3, #64	@ 0x40
 8005926:	d058      	beq.n	80059da <HAL_TIM_ConfigClockSource+0x13a>
 8005928:	2b40      	cmp	r3, #64	@ 0x40
 800592a:	d86f      	bhi.n	8005a0c <HAL_TIM_ConfigClockSource+0x16c>
 800592c:	2b30      	cmp	r3, #48	@ 0x30
 800592e:	d064      	beq.n	80059fa <HAL_TIM_ConfigClockSource+0x15a>
 8005930:	2b30      	cmp	r3, #48	@ 0x30
 8005932:	d86b      	bhi.n	8005a0c <HAL_TIM_ConfigClockSource+0x16c>
 8005934:	2b20      	cmp	r3, #32
 8005936:	d060      	beq.n	80059fa <HAL_TIM_ConfigClockSource+0x15a>
 8005938:	2b20      	cmp	r3, #32
 800593a:	d867      	bhi.n	8005a0c <HAL_TIM_ConfigClockSource+0x16c>
 800593c:	2b00      	cmp	r3, #0
 800593e:	d05c      	beq.n	80059fa <HAL_TIM_ConfigClockSource+0x15a>
 8005940:	2b10      	cmp	r3, #16
 8005942:	d05a      	beq.n	80059fa <HAL_TIM_ConfigClockSource+0x15a>
 8005944:	e062      	b.n	8005a0c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800594e:	683b      	ldr	r3, [r7, #0]
 8005950:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005956:	f000 fb69 	bl	800602c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	689b      	ldr	r3, [r3, #8]
 8005960:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005962:	68bb      	ldr	r3, [r7, #8]
 8005964:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005968:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	68ba      	ldr	r2, [r7, #8]
 8005970:	609a      	str	r2, [r3, #8]
      break;
 8005972:	e04f      	b.n	8005a14 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005984:	f000 fb52 	bl	800602c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	689a      	ldr	r2, [r3, #8]
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005996:	609a      	str	r2, [r3, #8]
      break;
 8005998:	e03c      	b.n	8005a14 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800599e:	683b      	ldr	r3, [r7, #0]
 80059a0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80059a2:	683b      	ldr	r3, [r7, #0]
 80059a4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80059a6:	461a      	mov	r2, r3
 80059a8:	f000 fac6 	bl	8005f38 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	2150      	movs	r1, #80	@ 0x50
 80059b2:	4618      	mov	r0, r3
 80059b4:	f000 fb1f 	bl	8005ff6 <TIM_ITRx_SetConfig>
      break;
 80059b8:	e02c      	b.n	8005a14 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80059be:	683b      	ldr	r3, [r7, #0]
 80059c0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80059c6:	461a      	mov	r2, r3
 80059c8:	f000 fae5 	bl	8005f96 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	2160      	movs	r1, #96	@ 0x60
 80059d2:	4618      	mov	r0, r3
 80059d4:	f000 fb0f 	bl	8005ff6 <TIM_ITRx_SetConfig>
      break;
 80059d8:	e01c      	b.n	8005a14 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80059e6:	461a      	mov	r2, r3
 80059e8:	f000 faa6 	bl	8005f38 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	2140      	movs	r1, #64	@ 0x40
 80059f2:	4618      	mov	r0, r3
 80059f4:	f000 faff 	bl	8005ff6 <TIM_ITRx_SetConfig>
      break;
 80059f8:	e00c      	b.n	8005a14 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681a      	ldr	r2, [r3, #0]
 80059fe:	683b      	ldr	r3, [r7, #0]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	4619      	mov	r1, r3
 8005a04:	4610      	mov	r0, r2
 8005a06:	f000 faf6 	bl	8005ff6 <TIM_ITRx_SetConfig>
      break;
 8005a0a:	e003      	b.n	8005a14 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005a0c:	2301      	movs	r3, #1
 8005a0e:	73fb      	strb	r3, [r7, #15]
      break;
 8005a10:	e000      	b.n	8005a14 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005a12:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2201      	movs	r2, #1
 8005a18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2200      	movs	r2, #0
 8005a20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005a24:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a26:	4618      	mov	r0, r3
 8005a28:	3710      	adds	r7, #16
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	bd80      	pop	{r7, pc}

08005a2e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005a2e:	b480      	push	{r7}
 8005a30:	b083      	sub	sp, #12
 8005a32:	af00      	add	r7, sp, #0
 8005a34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005a36:	bf00      	nop
 8005a38:	370c      	adds	r7, #12
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a40:	4770      	bx	lr

08005a42 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005a42:	b480      	push	{r7}
 8005a44:	b083      	sub	sp, #12
 8005a46:	af00      	add	r7, sp, #0
 8005a48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005a4a:	bf00      	nop
 8005a4c:	370c      	adds	r7, #12
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a54:	4770      	bx	lr

08005a56 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005a56:	b480      	push	{r7}
 8005a58:	b083      	sub	sp, #12
 8005a5a:	af00      	add	r7, sp, #0
 8005a5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005a5e:	bf00      	nop
 8005a60:	370c      	adds	r7, #12
 8005a62:	46bd      	mov	sp, r7
 8005a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a68:	4770      	bx	lr

08005a6a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005a6a:	b480      	push	{r7}
 8005a6c:	b083      	sub	sp, #12
 8005a6e:	af00      	add	r7, sp, #0
 8005a70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005a72:	bf00      	nop
 8005a74:	370c      	adds	r7, #12
 8005a76:	46bd      	mov	sp, r7
 8005a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7c:	4770      	bx	lr
	...

08005a80 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005a80:	b480      	push	{r7}
 8005a82:	b085      	sub	sp, #20
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
 8005a88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	4a46      	ldr	r2, [pc, #280]	@ (8005bac <TIM_Base_SetConfig+0x12c>)
 8005a94:	4293      	cmp	r3, r2
 8005a96:	d013      	beq.n	8005ac0 <TIM_Base_SetConfig+0x40>
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a9e:	d00f      	beq.n	8005ac0 <TIM_Base_SetConfig+0x40>
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	4a43      	ldr	r2, [pc, #268]	@ (8005bb0 <TIM_Base_SetConfig+0x130>)
 8005aa4:	4293      	cmp	r3, r2
 8005aa6:	d00b      	beq.n	8005ac0 <TIM_Base_SetConfig+0x40>
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	4a42      	ldr	r2, [pc, #264]	@ (8005bb4 <TIM_Base_SetConfig+0x134>)
 8005aac:	4293      	cmp	r3, r2
 8005aae:	d007      	beq.n	8005ac0 <TIM_Base_SetConfig+0x40>
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	4a41      	ldr	r2, [pc, #260]	@ (8005bb8 <TIM_Base_SetConfig+0x138>)
 8005ab4:	4293      	cmp	r3, r2
 8005ab6:	d003      	beq.n	8005ac0 <TIM_Base_SetConfig+0x40>
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	4a40      	ldr	r2, [pc, #256]	@ (8005bbc <TIM_Base_SetConfig+0x13c>)
 8005abc:	4293      	cmp	r3, r2
 8005abe:	d108      	bne.n	8005ad2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ac6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	685b      	ldr	r3, [r3, #4]
 8005acc:	68fa      	ldr	r2, [r7, #12]
 8005ace:	4313      	orrs	r3, r2
 8005ad0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	4a35      	ldr	r2, [pc, #212]	@ (8005bac <TIM_Base_SetConfig+0x12c>)
 8005ad6:	4293      	cmp	r3, r2
 8005ad8:	d02b      	beq.n	8005b32 <TIM_Base_SetConfig+0xb2>
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ae0:	d027      	beq.n	8005b32 <TIM_Base_SetConfig+0xb2>
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	4a32      	ldr	r2, [pc, #200]	@ (8005bb0 <TIM_Base_SetConfig+0x130>)
 8005ae6:	4293      	cmp	r3, r2
 8005ae8:	d023      	beq.n	8005b32 <TIM_Base_SetConfig+0xb2>
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	4a31      	ldr	r2, [pc, #196]	@ (8005bb4 <TIM_Base_SetConfig+0x134>)
 8005aee:	4293      	cmp	r3, r2
 8005af0:	d01f      	beq.n	8005b32 <TIM_Base_SetConfig+0xb2>
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	4a30      	ldr	r2, [pc, #192]	@ (8005bb8 <TIM_Base_SetConfig+0x138>)
 8005af6:	4293      	cmp	r3, r2
 8005af8:	d01b      	beq.n	8005b32 <TIM_Base_SetConfig+0xb2>
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	4a2f      	ldr	r2, [pc, #188]	@ (8005bbc <TIM_Base_SetConfig+0x13c>)
 8005afe:	4293      	cmp	r3, r2
 8005b00:	d017      	beq.n	8005b32 <TIM_Base_SetConfig+0xb2>
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	4a2e      	ldr	r2, [pc, #184]	@ (8005bc0 <TIM_Base_SetConfig+0x140>)
 8005b06:	4293      	cmp	r3, r2
 8005b08:	d013      	beq.n	8005b32 <TIM_Base_SetConfig+0xb2>
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	4a2d      	ldr	r2, [pc, #180]	@ (8005bc4 <TIM_Base_SetConfig+0x144>)
 8005b0e:	4293      	cmp	r3, r2
 8005b10:	d00f      	beq.n	8005b32 <TIM_Base_SetConfig+0xb2>
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	4a2c      	ldr	r2, [pc, #176]	@ (8005bc8 <TIM_Base_SetConfig+0x148>)
 8005b16:	4293      	cmp	r3, r2
 8005b18:	d00b      	beq.n	8005b32 <TIM_Base_SetConfig+0xb2>
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	4a2b      	ldr	r2, [pc, #172]	@ (8005bcc <TIM_Base_SetConfig+0x14c>)
 8005b1e:	4293      	cmp	r3, r2
 8005b20:	d007      	beq.n	8005b32 <TIM_Base_SetConfig+0xb2>
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	4a2a      	ldr	r2, [pc, #168]	@ (8005bd0 <TIM_Base_SetConfig+0x150>)
 8005b26:	4293      	cmp	r3, r2
 8005b28:	d003      	beq.n	8005b32 <TIM_Base_SetConfig+0xb2>
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	4a29      	ldr	r2, [pc, #164]	@ (8005bd4 <TIM_Base_SetConfig+0x154>)
 8005b2e:	4293      	cmp	r3, r2
 8005b30:	d108      	bne.n	8005b44 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005b38:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005b3a:	683b      	ldr	r3, [r7, #0]
 8005b3c:	68db      	ldr	r3, [r3, #12]
 8005b3e:	68fa      	ldr	r2, [r7, #12]
 8005b40:	4313      	orrs	r3, r2
 8005b42:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	695b      	ldr	r3, [r3, #20]
 8005b4e:	4313      	orrs	r3, r2
 8005b50:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	68fa      	ldr	r2, [r7, #12]
 8005b56:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	689a      	ldr	r2, [r3, #8]
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	681a      	ldr	r2, [r3, #0]
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	4a10      	ldr	r2, [pc, #64]	@ (8005bac <TIM_Base_SetConfig+0x12c>)
 8005b6c:	4293      	cmp	r3, r2
 8005b6e:	d003      	beq.n	8005b78 <TIM_Base_SetConfig+0xf8>
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	4a12      	ldr	r2, [pc, #72]	@ (8005bbc <TIM_Base_SetConfig+0x13c>)
 8005b74:	4293      	cmp	r3, r2
 8005b76:	d103      	bne.n	8005b80 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	691a      	ldr	r2, [r3, #16]
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2201      	movs	r2, #1
 8005b84:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	691b      	ldr	r3, [r3, #16]
 8005b8a:	f003 0301 	and.w	r3, r3, #1
 8005b8e:	2b01      	cmp	r3, #1
 8005b90:	d105      	bne.n	8005b9e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	691b      	ldr	r3, [r3, #16]
 8005b96:	f023 0201 	bic.w	r2, r3, #1
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	611a      	str	r2, [r3, #16]
  }
}
 8005b9e:	bf00      	nop
 8005ba0:	3714      	adds	r7, #20
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba8:	4770      	bx	lr
 8005baa:	bf00      	nop
 8005bac:	40010000 	.word	0x40010000
 8005bb0:	40000400 	.word	0x40000400
 8005bb4:	40000800 	.word	0x40000800
 8005bb8:	40000c00 	.word	0x40000c00
 8005bbc:	40010400 	.word	0x40010400
 8005bc0:	40014000 	.word	0x40014000
 8005bc4:	40014400 	.word	0x40014400
 8005bc8:	40014800 	.word	0x40014800
 8005bcc:	40001800 	.word	0x40001800
 8005bd0:	40001c00 	.word	0x40001c00
 8005bd4:	40002000 	.word	0x40002000

08005bd8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005bd8:	b480      	push	{r7}
 8005bda:	b087      	sub	sp, #28
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
 8005be0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	6a1b      	ldr	r3, [r3, #32]
 8005be6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	6a1b      	ldr	r3, [r3, #32]
 8005bec:	f023 0201 	bic.w	r2, r3, #1
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	685b      	ldr	r3, [r3, #4]
 8005bf8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	699b      	ldr	r3, [r3, #24]
 8005bfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	f023 0303 	bic.w	r3, r3, #3
 8005c0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	68fa      	ldr	r2, [r7, #12]
 8005c16:	4313      	orrs	r3, r2
 8005c18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005c1a:	697b      	ldr	r3, [r7, #20]
 8005c1c:	f023 0302 	bic.w	r3, r3, #2
 8005c20:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	689b      	ldr	r3, [r3, #8]
 8005c26:	697a      	ldr	r2, [r7, #20]
 8005c28:	4313      	orrs	r3, r2
 8005c2a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	4a20      	ldr	r2, [pc, #128]	@ (8005cb0 <TIM_OC1_SetConfig+0xd8>)
 8005c30:	4293      	cmp	r3, r2
 8005c32:	d003      	beq.n	8005c3c <TIM_OC1_SetConfig+0x64>
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	4a1f      	ldr	r2, [pc, #124]	@ (8005cb4 <TIM_OC1_SetConfig+0xdc>)
 8005c38:	4293      	cmp	r3, r2
 8005c3a:	d10c      	bne.n	8005c56 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005c3c:	697b      	ldr	r3, [r7, #20]
 8005c3e:	f023 0308 	bic.w	r3, r3, #8
 8005c42:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005c44:	683b      	ldr	r3, [r7, #0]
 8005c46:	68db      	ldr	r3, [r3, #12]
 8005c48:	697a      	ldr	r2, [r7, #20]
 8005c4a:	4313      	orrs	r3, r2
 8005c4c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005c4e:	697b      	ldr	r3, [r7, #20]
 8005c50:	f023 0304 	bic.w	r3, r3, #4
 8005c54:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	4a15      	ldr	r2, [pc, #84]	@ (8005cb0 <TIM_OC1_SetConfig+0xd8>)
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	d003      	beq.n	8005c66 <TIM_OC1_SetConfig+0x8e>
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	4a14      	ldr	r2, [pc, #80]	@ (8005cb4 <TIM_OC1_SetConfig+0xdc>)
 8005c62:	4293      	cmp	r3, r2
 8005c64:	d111      	bne.n	8005c8a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005c66:	693b      	ldr	r3, [r7, #16]
 8005c68:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005c6c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005c6e:	693b      	ldr	r3, [r7, #16]
 8005c70:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005c74:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005c76:	683b      	ldr	r3, [r7, #0]
 8005c78:	695b      	ldr	r3, [r3, #20]
 8005c7a:	693a      	ldr	r2, [r7, #16]
 8005c7c:	4313      	orrs	r3, r2
 8005c7e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	699b      	ldr	r3, [r3, #24]
 8005c84:	693a      	ldr	r2, [r7, #16]
 8005c86:	4313      	orrs	r3, r2
 8005c88:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	693a      	ldr	r2, [r7, #16]
 8005c8e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	68fa      	ldr	r2, [r7, #12]
 8005c94:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005c96:	683b      	ldr	r3, [r7, #0]
 8005c98:	685a      	ldr	r2, [r3, #4]
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	697a      	ldr	r2, [r7, #20]
 8005ca2:	621a      	str	r2, [r3, #32]
}
 8005ca4:	bf00      	nop
 8005ca6:	371c      	adds	r7, #28
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cae:	4770      	bx	lr
 8005cb0:	40010000 	.word	0x40010000
 8005cb4:	40010400 	.word	0x40010400

08005cb8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005cb8:	b480      	push	{r7}
 8005cba:	b087      	sub	sp, #28
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
 8005cc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	6a1b      	ldr	r3, [r3, #32]
 8005cc6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	6a1b      	ldr	r3, [r3, #32]
 8005ccc:	f023 0210 	bic.w	r2, r3, #16
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	685b      	ldr	r3, [r3, #4]
 8005cd8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	699b      	ldr	r3, [r3, #24]
 8005cde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005ce6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005cee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	021b      	lsls	r3, r3, #8
 8005cf6:	68fa      	ldr	r2, [r7, #12]
 8005cf8:	4313      	orrs	r3, r2
 8005cfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005cfc:	697b      	ldr	r3, [r7, #20]
 8005cfe:	f023 0320 	bic.w	r3, r3, #32
 8005d02:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	689b      	ldr	r3, [r3, #8]
 8005d08:	011b      	lsls	r3, r3, #4
 8005d0a:	697a      	ldr	r2, [r7, #20]
 8005d0c:	4313      	orrs	r3, r2
 8005d0e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	4a22      	ldr	r2, [pc, #136]	@ (8005d9c <TIM_OC2_SetConfig+0xe4>)
 8005d14:	4293      	cmp	r3, r2
 8005d16:	d003      	beq.n	8005d20 <TIM_OC2_SetConfig+0x68>
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	4a21      	ldr	r2, [pc, #132]	@ (8005da0 <TIM_OC2_SetConfig+0xe8>)
 8005d1c:	4293      	cmp	r3, r2
 8005d1e:	d10d      	bne.n	8005d3c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005d20:	697b      	ldr	r3, [r7, #20]
 8005d22:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005d26:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	68db      	ldr	r3, [r3, #12]
 8005d2c:	011b      	lsls	r3, r3, #4
 8005d2e:	697a      	ldr	r2, [r7, #20]
 8005d30:	4313      	orrs	r3, r2
 8005d32:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005d34:	697b      	ldr	r3, [r7, #20]
 8005d36:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005d3a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	4a17      	ldr	r2, [pc, #92]	@ (8005d9c <TIM_OC2_SetConfig+0xe4>)
 8005d40:	4293      	cmp	r3, r2
 8005d42:	d003      	beq.n	8005d4c <TIM_OC2_SetConfig+0x94>
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	4a16      	ldr	r2, [pc, #88]	@ (8005da0 <TIM_OC2_SetConfig+0xe8>)
 8005d48:	4293      	cmp	r3, r2
 8005d4a:	d113      	bne.n	8005d74 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005d4c:	693b      	ldr	r3, [r7, #16]
 8005d4e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005d52:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005d54:	693b      	ldr	r3, [r7, #16]
 8005d56:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005d5a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	695b      	ldr	r3, [r3, #20]
 8005d60:	009b      	lsls	r3, r3, #2
 8005d62:	693a      	ldr	r2, [r7, #16]
 8005d64:	4313      	orrs	r3, r2
 8005d66:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	699b      	ldr	r3, [r3, #24]
 8005d6c:	009b      	lsls	r3, r3, #2
 8005d6e:	693a      	ldr	r2, [r7, #16]
 8005d70:	4313      	orrs	r3, r2
 8005d72:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	693a      	ldr	r2, [r7, #16]
 8005d78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	68fa      	ldr	r2, [r7, #12]
 8005d7e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005d80:	683b      	ldr	r3, [r7, #0]
 8005d82:	685a      	ldr	r2, [r3, #4]
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	697a      	ldr	r2, [r7, #20]
 8005d8c:	621a      	str	r2, [r3, #32]
}
 8005d8e:	bf00      	nop
 8005d90:	371c      	adds	r7, #28
 8005d92:	46bd      	mov	sp, r7
 8005d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d98:	4770      	bx	lr
 8005d9a:	bf00      	nop
 8005d9c:	40010000 	.word	0x40010000
 8005da0:	40010400 	.word	0x40010400

08005da4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005da4:	b480      	push	{r7}
 8005da6:	b087      	sub	sp, #28
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	6078      	str	r0, [r7, #4]
 8005dac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	6a1b      	ldr	r3, [r3, #32]
 8005db2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	6a1b      	ldr	r3, [r3, #32]
 8005db8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	685b      	ldr	r3, [r3, #4]
 8005dc4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	69db      	ldr	r3, [r3, #28]
 8005dca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005dd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	f023 0303 	bic.w	r3, r3, #3
 8005dda:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	68fa      	ldr	r2, [r7, #12]
 8005de2:	4313      	orrs	r3, r2
 8005de4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005de6:	697b      	ldr	r3, [r7, #20]
 8005de8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005dec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	689b      	ldr	r3, [r3, #8]
 8005df2:	021b      	lsls	r3, r3, #8
 8005df4:	697a      	ldr	r2, [r7, #20]
 8005df6:	4313      	orrs	r3, r2
 8005df8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	4a21      	ldr	r2, [pc, #132]	@ (8005e84 <TIM_OC3_SetConfig+0xe0>)
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	d003      	beq.n	8005e0a <TIM_OC3_SetConfig+0x66>
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	4a20      	ldr	r2, [pc, #128]	@ (8005e88 <TIM_OC3_SetConfig+0xe4>)
 8005e06:	4293      	cmp	r3, r2
 8005e08:	d10d      	bne.n	8005e26 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005e0a:	697b      	ldr	r3, [r7, #20]
 8005e0c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005e10:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005e12:	683b      	ldr	r3, [r7, #0]
 8005e14:	68db      	ldr	r3, [r3, #12]
 8005e16:	021b      	lsls	r3, r3, #8
 8005e18:	697a      	ldr	r2, [r7, #20]
 8005e1a:	4313      	orrs	r3, r2
 8005e1c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005e1e:	697b      	ldr	r3, [r7, #20]
 8005e20:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005e24:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	4a16      	ldr	r2, [pc, #88]	@ (8005e84 <TIM_OC3_SetConfig+0xe0>)
 8005e2a:	4293      	cmp	r3, r2
 8005e2c:	d003      	beq.n	8005e36 <TIM_OC3_SetConfig+0x92>
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	4a15      	ldr	r2, [pc, #84]	@ (8005e88 <TIM_OC3_SetConfig+0xe4>)
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d113      	bne.n	8005e5e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005e36:	693b      	ldr	r3, [r7, #16]
 8005e38:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005e3c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005e3e:	693b      	ldr	r3, [r7, #16]
 8005e40:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005e44:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005e46:	683b      	ldr	r3, [r7, #0]
 8005e48:	695b      	ldr	r3, [r3, #20]
 8005e4a:	011b      	lsls	r3, r3, #4
 8005e4c:	693a      	ldr	r2, [r7, #16]
 8005e4e:	4313      	orrs	r3, r2
 8005e50:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	699b      	ldr	r3, [r3, #24]
 8005e56:	011b      	lsls	r3, r3, #4
 8005e58:	693a      	ldr	r2, [r7, #16]
 8005e5a:	4313      	orrs	r3, r2
 8005e5c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	693a      	ldr	r2, [r7, #16]
 8005e62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	68fa      	ldr	r2, [r7, #12]
 8005e68:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005e6a:	683b      	ldr	r3, [r7, #0]
 8005e6c:	685a      	ldr	r2, [r3, #4]
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	697a      	ldr	r2, [r7, #20]
 8005e76:	621a      	str	r2, [r3, #32]
}
 8005e78:	bf00      	nop
 8005e7a:	371c      	adds	r7, #28
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e82:	4770      	bx	lr
 8005e84:	40010000 	.word	0x40010000
 8005e88:	40010400 	.word	0x40010400

08005e8c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005e8c:	b480      	push	{r7}
 8005e8e:	b087      	sub	sp, #28
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
 8005e94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6a1b      	ldr	r3, [r3, #32]
 8005e9a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	6a1b      	ldr	r3, [r3, #32]
 8005ea0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	685b      	ldr	r3, [r3, #4]
 8005eac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	69db      	ldr	r3, [r3, #28]
 8005eb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005eba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005ec2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	021b      	lsls	r3, r3, #8
 8005eca:	68fa      	ldr	r2, [r7, #12]
 8005ecc:	4313      	orrs	r3, r2
 8005ece:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005ed0:	693b      	ldr	r3, [r7, #16]
 8005ed2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005ed6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005ed8:	683b      	ldr	r3, [r7, #0]
 8005eda:	689b      	ldr	r3, [r3, #8]
 8005edc:	031b      	lsls	r3, r3, #12
 8005ede:	693a      	ldr	r2, [r7, #16]
 8005ee0:	4313      	orrs	r3, r2
 8005ee2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	4a12      	ldr	r2, [pc, #72]	@ (8005f30 <TIM_OC4_SetConfig+0xa4>)
 8005ee8:	4293      	cmp	r3, r2
 8005eea:	d003      	beq.n	8005ef4 <TIM_OC4_SetConfig+0x68>
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	4a11      	ldr	r2, [pc, #68]	@ (8005f34 <TIM_OC4_SetConfig+0xa8>)
 8005ef0:	4293      	cmp	r3, r2
 8005ef2:	d109      	bne.n	8005f08 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005ef4:	697b      	ldr	r3, [r7, #20]
 8005ef6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005efa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005efc:	683b      	ldr	r3, [r7, #0]
 8005efe:	695b      	ldr	r3, [r3, #20]
 8005f00:	019b      	lsls	r3, r3, #6
 8005f02:	697a      	ldr	r2, [r7, #20]
 8005f04:	4313      	orrs	r3, r2
 8005f06:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	697a      	ldr	r2, [r7, #20]
 8005f0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	68fa      	ldr	r2, [r7, #12]
 8005f12:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	685a      	ldr	r2, [r3, #4]
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	693a      	ldr	r2, [r7, #16]
 8005f20:	621a      	str	r2, [r3, #32]
}
 8005f22:	bf00      	nop
 8005f24:	371c      	adds	r7, #28
 8005f26:	46bd      	mov	sp, r7
 8005f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2c:	4770      	bx	lr
 8005f2e:	bf00      	nop
 8005f30:	40010000 	.word	0x40010000
 8005f34:	40010400 	.word	0x40010400

08005f38 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005f38:	b480      	push	{r7}
 8005f3a:	b087      	sub	sp, #28
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	60f8      	str	r0, [r7, #12]
 8005f40:	60b9      	str	r1, [r7, #8]
 8005f42:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	6a1b      	ldr	r3, [r3, #32]
 8005f48:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	6a1b      	ldr	r3, [r3, #32]
 8005f4e:	f023 0201 	bic.w	r2, r3, #1
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	699b      	ldr	r3, [r3, #24]
 8005f5a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005f5c:	693b      	ldr	r3, [r7, #16]
 8005f5e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005f62:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	011b      	lsls	r3, r3, #4
 8005f68:	693a      	ldr	r2, [r7, #16]
 8005f6a:	4313      	orrs	r3, r2
 8005f6c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005f6e:	697b      	ldr	r3, [r7, #20]
 8005f70:	f023 030a 	bic.w	r3, r3, #10
 8005f74:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005f76:	697a      	ldr	r2, [r7, #20]
 8005f78:	68bb      	ldr	r3, [r7, #8]
 8005f7a:	4313      	orrs	r3, r2
 8005f7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	693a      	ldr	r2, [r7, #16]
 8005f82:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	697a      	ldr	r2, [r7, #20]
 8005f88:	621a      	str	r2, [r3, #32]
}
 8005f8a:	bf00      	nop
 8005f8c:	371c      	adds	r7, #28
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f94:	4770      	bx	lr

08005f96 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005f96:	b480      	push	{r7}
 8005f98:	b087      	sub	sp, #28
 8005f9a:	af00      	add	r7, sp, #0
 8005f9c:	60f8      	str	r0, [r7, #12]
 8005f9e:	60b9      	str	r1, [r7, #8]
 8005fa0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	6a1b      	ldr	r3, [r3, #32]
 8005fa6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	6a1b      	ldr	r3, [r3, #32]
 8005fac:	f023 0210 	bic.w	r2, r3, #16
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	699b      	ldr	r3, [r3, #24]
 8005fb8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005fba:	693b      	ldr	r3, [r7, #16]
 8005fbc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005fc0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	031b      	lsls	r3, r3, #12
 8005fc6:	693a      	ldr	r2, [r7, #16]
 8005fc8:	4313      	orrs	r3, r2
 8005fca:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005fcc:	697b      	ldr	r3, [r7, #20]
 8005fce:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005fd2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005fd4:	68bb      	ldr	r3, [r7, #8]
 8005fd6:	011b      	lsls	r3, r3, #4
 8005fd8:	697a      	ldr	r2, [r7, #20]
 8005fda:	4313      	orrs	r3, r2
 8005fdc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	693a      	ldr	r2, [r7, #16]
 8005fe2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	697a      	ldr	r2, [r7, #20]
 8005fe8:	621a      	str	r2, [r3, #32]
}
 8005fea:	bf00      	nop
 8005fec:	371c      	adds	r7, #28
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff4:	4770      	bx	lr

08005ff6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005ff6:	b480      	push	{r7}
 8005ff8:	b085      	sub	sp, #20
 8005ffa:	af00      	add	r7, sp, #0
 8005ffc:	6078      	str	r0, [r7, #4]
 8005ffe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	689b      	ldr	r3, [r3, #8]
 8006004:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800600c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800600e:	683a      	ldr	r2, [r7, #0]
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	4313      	orrs	r3, r2
 8006014:	f043 0307 	orr.w	r3, r3, #7
 8006018:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	68fa      	ldr	r2, [r7, #12]
 800601e:	609a      	str	r2, [r3, #8]
}
 8006020:	bf00      	nop
 8006022:	3714      	adds	r7, #20
 8006024:	46bd      	mov	sp, r7
 8006026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602a:	4770      	bx	lr

0800602c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800602c:	b480      	push	{r7}
 800602e:	b087      	sub	sp, #28
 8006030:	af00      	add	r7, sp, #0
 8006032:	60f8      	str	r0, [r7, #12]
 8006034:	60b9      	str	r1, [r7, #8]
 8006036:	607a      	str	r2, [r7, #4]
 8006038:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	689b      	ldr	r3, [r3, #8]
 800603e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006040:	697b      	ldr	r3, [r7, #20]
 8006042:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006046:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	021a      	lsls	r2, r3, #8
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	431a      	orrs	r2, r3
 8006050:	68bb      	ldr	r3, [r7, #8]
 8006052:	4313      	orrs	r3, r2
 8006054:	697a      	ldr	r2, [r7, #20]
 8006056:	4313      	orrs	r3, r2
 8006058:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	697a      	ldr	r2, [r7, #20]
 800605e:	609a      	str	r2, [r3, #8]
}
 8006060:	bf00      	nop
 8006062:	371c      	adds	r7, #28
 8006064:	46bd      	mov	sp, r7
 8006066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606a:	4770      	bx	lr

0800606c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800606c:	b480      	push	{r7}
 800606e:	b087      	sub	sp, #28
 8006070:	af00      	add	r7, sp, #0
 8006072:	60f8      	str	r0, [r7, #12]
 8006074:	60b9      	str	r1, [r7, #8]
 8006076:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006078:	68bb      	ldr	r3, [r7, #8]
 800607a:	f003 031f 	and.w	r3, r3, #31
 800607e:	2201      	movs	r2, #1
 8006080:	fa02 f303 	lsl.w	r3, r2, r3
 8006084:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	6a1a      	ldr	r2, [r3, #32]
 800608a:	697b      	ldr	r3, [r7, #20]
 800608c:	43db      	mvns	r3, r3
 800608e:	401a      	ands	r2, r3
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	6a1a      	ldr	r2, [r3, #32]
 8006098:	68bb      	ldr	r3, [r7, #8]
 800609a:	f003 031f 	and.w	r3, r3, #31
 800609e:	6879      	ldr	r1, [r7, #4]
 80060a0:	fa01 f303 	lsl.w	r3, r1, r3
 80060a4:	431a      	orrs	r2, r3
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	621a      	str	r2, [r3, #32]
}
 80060aa:	bf00      	nop
 80060ac:	371c      	adds	r7, #28
 80060ae:	46bd      	mov	sp, r7
 80060b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b4:	4770      	bx	lr
	...

080060b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80060b8:	b480      	push	{r7}
 80060ba:	b085      	sub	sp, #20
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
 80060c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80060c8:	2b01      	cmp	r3, #1
 80060ca:	d101      	bne.n	80060d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80060cc:	2302      	movs	r3, #2
 80060ce:	e05a      	b.n	8006186 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2201      	movs	r2, #1
 80060d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2202      	movs	r2, #2
 80060dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	685b      	ldr	r3, [r3, #4]
 80060e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	689b      	ldr	r3, [r3, #8]
 80060ee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80060f6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80060f8:	683b      	ldr	r3, [r7, #0]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	68fa      	ldr	r2, [r7, #12]
 80060fe:	4313      	orrs	r3, r2
 8006100:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	68fa      	ldr	r2, [r7, #12]
 8006108:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	4a21      	ldr	r2, [pc, #132]	@ (8006194 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006110:	4293      	cmp	r3, r2
 8006112:	d022      	beq.n	800615a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800611c:	d01d      	beq.n	800615a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	4a1d      	ldr	r2, [pc, #116]	@ (8006198 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006124:	4293      	cmp	r3, r2
 8006126:	d018      	beq.n	800615a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	4a1b      	ldr	r2, [pc, #108]	@ (800619c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800612e:	4293      	cmp	r3, r2
 8006130:	d013      	beq.n	800615a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	4a1a      	ldr	r2, [pc, #104]	@ (80061a0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006138:	4293      	cmp	r3, r2
 800613a:	d00e      	beq.n	800615a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	4a18      	ldr	r2, [pc, #96]	@ (80061a4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006142:	4293      	cmp	r3, r2
 8006144:	d009      	beq.n	800615a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	4a17      	ldr	r2, [pc, #92]	@ (80061a8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800614c:	4293      	cmp	r3, r2
 800614e:	d004      	beq.n	800615a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	4a15      	ldr	r2, [pc, #84]	@ (80061ac <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006156:	4293      	cmp	r3, r2
 8006158:	d10c      	bne.n	8006174 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800615a:	68bb      	ldr	r3, [r7, #8]
 800615c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006160:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006162:	683b      	ldr	r3, [r7, #0]
 8006164:	685b      	ldr	r3, [r3, #4]
 8006166:	68ba      	ldr	r2, [r7, #8]
 8006168:	4313      	orrs	r3, r2
 800616a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	68ba      	ldr	r2, [r7, #8]
 8006172:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2201      	movs	r2, #1
 8006178:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2200      	movs	r2, #0
 8006180:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006184:	2300      	movs	r3, #0
}
 8006186:	4618      	mov	r0, r3
 8006188:	3714      	adds	r7, #20
 800618a:	46bd      	mov	sp, r7
 800618c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006190:	4770      	bx	lr
 8006192:	bf00      	nop
 8006194:	40010000 	.word	0x40010000
 8006198:	40000400 	.word	0x40000400
 800619c:	40000800 	.word	0x40000800
 80061a0:	40000c00 	.word	0x40000c00
 80061a4:	40010400 	.word	0x40010400
 80061a8:	40014000 	.word	0x40014000
 80061ac:	40001800 	.word	0x40001800

080061b0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80061b0:	b480      	push	{r7}
 80061b2:	b083      	sub	sp, #12
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80061b8:	bf00      	nop
 80061ba:	370c      	adds	r7, #12
 80061bc:	46bd      	mov	sp, r7
 80061be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c2:	4770      	bx	lr

080061c4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80061c4:	b480      	push	{r7}
 80061c6:	b083      	sub	sp, #12
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80061cc:	bf00      	nop
 80061ce:	370c      	adds	r7, #12
 80061d0:	46bd      	mov	sp, r7
 80061d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d6:	4770      	bx	lr

080061d8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80061d8:	b580      	push	{r7, lr}
 80061da:	b082      	sub	sp, #8
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d101      	bne.n	80061ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80061e6:	2301      	movs	r3, #1
 80061e8:	e042      	b.n	8006270 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80061f0:	b2db      	uxtb	r3, r3
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d106      	bne.n	8006204 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	2200      	movs	r2, #0
 80061fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80061fe:	6878      	ldr	r0, [r7, #4]
 8006200:	f7fc fd44 	bl	8002c8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2224      	movs	r2, #36	@ 0x24
 8006208:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	68da      	ldr	r2, [r3, #12]
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800621a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800621c:	6878      	ldr	r0, [r7, #4]
 800621e:	f000 fcdb 	bl	8006bd8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	691a      	ldr	r2, [r3, #16]
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006230:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	695a      	ldr	r2, [r3, #20]
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006240:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	68da      	ldr	r2, [r3, #12]
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006250:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	2200      	movs	r2, #0
 8006256:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2220      	movs	r2, #32
 800625c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	2220      	movs	r2, #32
 8006264:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2200      	movs	r2, #0
 800626c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800626e:	2300      	movs	r3, #0
}
 8006270:	4618      	mov	r0, r3
 8006272:	3708      	adds	r7, #8
 8006274:	46bd      	mov	sp, r7
 8006276:	bd80      	pop	{r7, pc}

08006278 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006278:	b580      	push	{r7, lr}
 800627a:	b084      	sub	sp, #16
 800627c:	af00      	add	r7, sp, #0
 800627e:	60f8      	str	r0, [r7, #12]
 8006280:	60b9      	str	r1, [r7, #8]
 8006282:	4613      	mov	r3, r2
 8006284:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800628c:	b2db      	uxtb	r3, r3
 800628e:	2b20      	cmp	r3, #32
 8006290:	d112      	bne.n	80062b8 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8006292:	68bb      	ldr	r3, [r7, #8]
 8006294:	2b00      	cmp	r3, #0
 8006296:	d002      	beq.n	800629e <HAL_UART_Receive_IT+0x26>
 8006298:	88fb      	ldrh	r3, [r7, #6]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d101      	bne.n	80062a2 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800629e:	2301      	movs	r3, #1
 80062a0:	e00b      	b.n	80062ba <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	2200      	movs	r2, #0
 80062a6:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80062a8:	88fb      	ldrh	r3, [r7, #6]
 80062aa:	461a      	mov	r2, r3
 80062ac:	68b9      	ldr	r1, [r7, #8]
 80062ae:	68f8      	ldr	r0, [r7, #12]
 80062b0:	f000 faba 	bl	8006828 <UART_Start_Receive_IT>
 80062b4:	4603      	mov	r3, r0
 80062b6:	e000      	b.n	80062ba <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80062b8:	2302      	movs	r3, #2
  }
}
 80062ba:	4618      	mov	r0, r3
 80062bc:	3710      	adds	r7, #16
 80062be:	46bd      	mov	sp, r7
 80062c0:	bd80      	pop	{r7, pc}
	...

080062c4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80062c4:	b580      	push	{r7, lr}
 80062c6:	b0ba      	sub	sp, #232	@ 0xe8
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	68db      	ldr	r3, [r3, #12]
 80062dc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	695b      	ldr	r3, [r3, #20]
 80062e6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80062ea:	2300      	movs	r3, #0
 80062ec:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80062f0:	2300      	movs	r3, #0
 80062f2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80062f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80062fa:	f003 030f 	and.w	r3, r3, #15
 80062fe:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8006302:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006306:	2b00      	cmp	r3, #0
 8006308:	d10f      	bne.n	800632a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800630a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800630e:	f003 0320 	and.w	r3, r3, #32
 8006312:	2b00      	cmp	r3, #0
 8006314:	d009      	beq.n	800632a <HAL_UART_IRQHandler+0x66>
 8006316:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800631a:	f003 0320 	and.w	r3, r3, #32
 800631e:	2b00      	cmp	r3, #0
 8006320:	d003      	beq.n	800632a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006322:	6878      	ldr	r0, [r7, #4]
 8006324:	f000 fb99 	bl	8006a5a <UART_Receive_IT>
      return;
 8006328:	e25b      	b.n	80067e2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800632a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800632e:	2b00      	cmp	r3, #0
 8006330:	f000 80de 	beq.w	80064f0 <HAL_UART_IRQHandler+0x22c>
 8006334:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006338:	f003 0301 	and.w	r3, r3, #1
 800633c:	2b00      	cmp	r3, #0
 800633e:	d106      	bne.n	800634e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006340:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006344:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8006348:	2b00      	cmp	r3, #0
 800634a:	f000 80d1 	beq.w	80064f0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800634e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006352:	f003 0301 	and.w	r3, r3, #1
 8006356:	2b00      	cmp	r3, #0
 8006358:	d00b      	beq.n	8006372 <HAL_UART_IRQHandler+0xae>
 800635a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800635e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006362:	2b00      	cmp	r3, #0
 8006364:	d005      	beq.n	8006372 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800636a:	f043 0201 	orr.w	r2, r3, #1
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006372:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006376:	f003 0304 	and.w	r3, r3, #4
 800637a:	2b00      	cmp	r3, #0
 800637c:	d00b      	beq.n	8006396 <HAL_UART_IRQHandler+0xd2>
 800637e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006382:	f003 0301 	and.w	r3, r3, #1
 8006386:	2b00      	cmp	r3, #0
 8006388:	d005      	beq.n	8006396 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800638e:	f043 0202 	orr.w	r2, r3, #2
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006396:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800639a:	f003 0302 	and.w	r3, r3, #2
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d00b      	beq.n	80063ba <HAL_UART_IRQHandler+0xf6>
 80063a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80063a6:	f003 0301 	and.w	r3, r3, #1
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d005      	beq.n	80063ba <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80063b2:	f043 0204 	orr.w	r2, r3, #4
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80063ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80063be:	f003 0308 	and.w	r3, r3, #8
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d011      	beq.n	80063ea <HAL_UART_IRQHandler+0x126>
 80063c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80063ca:	f003 0320 	and.w	r3, r3, #32
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d105      	bne.n	80063de <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80063d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80063d6:	f003 0301 	and.w	r3, r3, #1
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d005      	beq.n	80063ea <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80063e2:	f043 0208 	orr.w	r2, r3, #8
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	f000 81f2 	beq.w	80067d8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80063f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80063f8:	f003 0320 	and.w	r3, r3, #32
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d008      	beq.n	8006412 <HAL_UART_IRQHandler+0x14e>
 8006400:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006404:	f003 0320 	and.w	r3, r3, #32
 8006408:	2b00      	cmp	r3, #0
 800640a:	d002      	beq.n	8006412 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800640c:	6878      	ldr	r0, [r7, #4]
 800640e:	f000 fb24 	bl	8006a5a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	695b      	ldr	r3, [r3, #20]
 8006418:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800641c:	2b40      	cmp	r3, #64	@ 0x40
 800641e:	bf0c      	ite	eq
 8006420:	2301      	moveq	r3, #1
 8006422:	2300      	movne	r3, #0
 8006424:	b2db      	uxtb	r3, r3
 8006426:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800642e:	f003 0308 	and.w	r3, r3, #8
 8006432:	2b00      	cmp	r3, #0
 8006434:	d103      	bne.n	800643e <HAL_UART_IRQHandler+0x17a>
 8006436:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800643a:	2b00      	cmp	r3, #0
 800643c:	d04f      	beq.n	80064de <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800643e:	6878      	ldr	r0, [r7, #4]
 8006440:	f000 fa2c 	bl	800689c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	695b      	ldr	r3, [r3, #20]
 800644a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800644e:	2b40      	cmp	r3, #64	@ 0x40
 8006450:	d141      	bne.n	80064d6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	3314      	adds	r3, #20
 8006458:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800645c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006460:	e853 3f00 	ldrex	r3, [r3]
 8006464:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006468:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800646c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006470:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	3314      	adds	r3, #20
 800647a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800647e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006482:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006486:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800648a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800648e:	e841 2300 	strex	r3, r2, [r1]
 8006492:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006496:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800649a:	2b00      	cmp	r3, #0
 800649c:	d1d9      	bne.n	8006452 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d013      	beq.n	80064ce <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80064aa:	4a7e      	ldr	r2, [pc, #504]	@ (80066a4 <HAL_UART_IRQHandler+0x3e0>)
 80064ac:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80064b2:	4618      	mov	r0, r3
 80064b4:	f7fd ff35 	bl	8004322 <HAL_DMA_Abort_IT>
 80064b8:	4603      	mov	r3, r0
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d016      	beq.n	80064ec <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80064c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80064c4:	687a      	ldr	r2, [r7, #4]
 80064c6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80064c8:	4610      	mov	r0, r2
 80064ca:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064cc:	e00e      	b.n	80064ec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80064ce:	6878      	ldr	r0, [r7, #4]
 80064d0:	f000 f994 	bl	80067fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064d4:	e00a      	b.n	80064ec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80064d6:	6878      	ldr	r0, [r7, #4]
 80064d8:	f000 f990 	bl	80067fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064dc:	e006      	b.n	80064ec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80064de:	6878      	ldr	r0, [r7, #4]
 80064e0:	f000 f98c 	bl	80067fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2200      	movs	r2, #0
 80064e8:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80064ea:	e175      	b.n	80067d8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064ec:	bf00      	nop
    return;
 80064ee:	e173      	b.n	80067d8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064f4:	2b01      	cmp	r3, #1
 80064f6:	f040 814f 	bne.w	8006798 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80064fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80064fe:	f003 0310 	and.w	r3, r3, #16
 8006502:	2b00      	cmp	r3, #0
 8006504:	f000 8148 	beq.w	8006798 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006508:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800650c:	f003 0310 	and.w	r3, r3, #16
 8006510:	2b00      	cmp	r3, #0
 8006512:	f000 8141 	beq.w	8006798 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006516:	2300      	movs	r3, #0
 8006518:	60bb      	str	r3, [r7, #8]
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	60bb      	str	r3, [r7, #8]
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	685b      	ldr	r3, [r3, #4]
 8006528:	60bb      	str	r3, [r7, #8]
 800652a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	695b      	ldr	r3, [r3, #20]
 8006532:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006536:	2b40      	cmp	r3, #64	@ 0x40
 8006538:	f040 80b6 	bne.w	80066a8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	685b      	ldr	r3, [r3, #4]
 8006544:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006548:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800654c:	2b00      	cmp	r3, #0
 800654e:	f000 8145 	beq.w	80067dc <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006556:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800655a:	429a      	cmp	r2, r3
 800655c:	f080 813e 	bcs.w	80067dc <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006566:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800656c:	69db      	ldr	r3, [r3, #28]
 800656e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006572:	f000 8088 	beq.w	8006686 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	330c      	adds	r3, #12
 800657c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006580:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006584:	e853 3f00 	ldrex	r3, [r3]
 8006588:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800658c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006590:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006594:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	330c      	adds	r3, #12
 800659e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80065a2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80065a6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065aa:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80065ae:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80065b2:	e841 2300 	strex	r3, r2, [r1]
 80065b6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80065ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d1d9      	bne.n	8006576 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	3314      	adds	r3, #20
 80065c8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065ca:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80065cc:	e853 3f00 	ldrex	r3, [r3]
 80065d0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80065d2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80065d4:	f023 0301 	bic.w	r3, r3, #1
 80065d8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	3314      	adds	r3, #20
 80065e2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80065e6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80065ea:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065ec:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80065ee:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80065f2:	e841 2300 	strex	r3, r2, [r1]
 80065f6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80065f8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d1e1      	bne.n	80065c2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	3314      	adds	r3, #20
 8006604:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006606:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006608:	e853 3f00 	ldrex	r3, [r3]
 800660c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800660e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006610:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006614:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	3314      	adds	r3, #20
 800661e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006622:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006624:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006626:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006628:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800662a:	e841 2300 	strex	r3, r2, [r1]
 800662e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006630:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006632:	2b00      	cmp	r3, #0
 8006634:	d1e3      	bne.n	80065fe <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	2220      	movs	r2, #32
 800663a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	2200      	movs	r2, #0
 8006642:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	330c      	adds	r3, #12
 800664a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800664c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800664e:	e853 3f00 	ldrex	r3, [r3]
 8006652:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006654:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006656:	f023 0310 	bic.w	r3, r3, #16
 800665a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	330c      	adds	r3, #12
 8006664:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8006668:	65ba      	str	r2, [r7, #88]	@ 0x58
 800666a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800666c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800666e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006670:	e841 2300 	strex	r3, r2, [r1]
 8006674:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006676:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006678:	2b00      	cmp	r3, #0
 800667a:	d1e3      	bne.n	8006644 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006680:	4618      	mov	r0, r3
 8006682:	f7fd fdde 	bl	8004242 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	2202      	movs	r2, #2
 800668a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006694:	b29b      	uxth	r3, r3
 8006696:	1ad3      	subs	r3, r2, r3
 8006698:	b29b      	uxth	r3, r3
 800669a:	4619      	mov	r1, r3
 800669c:	6878      	ldr	r0, [r7, #4]
 800669e:	f000 f8b7 	bl	8006810 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80066a2:	e09b      	b.n	80067dc <HAL_UART_IRQHandler+0x518>
 80066a4:	08006963 	.word	0x08006963
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80066b0:	b29b      	uxth	r3, r3
 80066b2:	1ad3      	subs	r3, r2, r3
 80066b4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80066bc:	b29b      	uxth	r3, r3
 80066be:	2b00      	cmp	r3, #0
 80066c0:	f000 808e 	beq.w	80067e0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80066c4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	f000 8089 	beq.w	80067e0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	330c      	adds	r3, #12
 80066d4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066d8:	e853 3f00 	ldrex	r3, [r3]
 80066dc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80066de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80066e0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80066e4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	330c      	adds	r3, #12
 80066ee:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80066f2:	647a      	str	r2, [r7, #68]	@ 0x44
 80066f4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066f6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80066f8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80066fa:	e841 2300 	strex	r3, r2, [r1]
 80066fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006700:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006702:	2b00      	cmp	r3, #0
 8006704:	d1e3      	bne.n	80066ce <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	3314      	adds	r3, #20
 800670c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800670e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006710:	e853 3f00 	ldrex	r3, [r3]
 8006714:	623b      	str	r3, [r7, #32]
   return(result);
 8006716:	6a3b      	ldr	r3, [r7, #32]
 8006718:	f023 0301 	bic.w	r3, r3, #1
 800671c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	3314      	adds	r3, #20
 8006726:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800672a:	633a      	str	r2, [r7, #48]	@ 0x30
 800672c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800672e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006730:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006732:	e841 2300 	strex	r3, r2, [r1]
 8006736:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006738:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800673a:	2b00      	cmp	r3, #0
 800673c:	d1e3      	bne.n	8006706 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	2220      	movs	r2, #32
 8006742:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	2200      	movs	r2, #0
 800674a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	330c      	adds	r3, #12
 8006752:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006754:	693b      	ldr	r3, [r7, #16]
 8006756:	e853 3f00 	ldrex	r3, [r3]
 800675a:	60fb      	str	r3, [r7, #12]
   return(result);
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	f023 0310 	bic.w	r3, r3, #16
 8006762:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	330c      	adds	r3, #12
 800676c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8006770:	61fa      	str	r2, [r7, #28]
 8006772:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006774:	69b9      	ldr	r1, [r7, #24]
 8006776:	69fa      	ldr	r2, [r7, #28]
 8006778:	e841 2300 	strex	r3, r2, [r1]
 800677c:	617b      	str	r3, [r7, #20]
   return(result);
 800677e:	697b      	ldr	r3, [r7, #20]
 8006780:	2b00      	cmp	r3, #0
 8006782:	d1e3      	bne.n	800674c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2202      	movs	r2, #2
 8006788:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800678a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800678e:	4619      	mov	r1, r3
 8006790:	6878      	ldr	r0, [r7, #4]
 8006792:	f000 f83d 	bl	8006810 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006796:	e023      	b.n	80067e0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006798:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800679c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d009      	beq.n	80067b8 <HAL_UART_IRQHandler+0x4f4>
 80067a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80067a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d003      	beq.n	80067b8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80067b0:	6878      	ldr	r0, [r7, #4]
 80067b2:	f000 f8ea 	bl	800698a <UART_Transmit_IT>
    return;
 80067b6:	e014      	b.n	80067e2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80067b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80067bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d00e      	beq.n	80067e2 <HAL_UART_IRQHandler+0x51e>
 80067c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80067c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d008      	beq.n	80067e2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80067d0:	6878      	ldr	r0, [r7, #4]
 80067d2:	f000 f92a 	bl	8006a2a <UART_EndTransmit_IT>
    return;
 80067d6:	e004      	b.n	80067e2 <HAL_UART_IRQHandler+0x51e>
    return;
 80067d8:	bf00      	nop
 80067da:	e002      	b.n	80067e2 <HAL_UART_IRQHandler+0x51e>
      return;
 80067dc:	bf00      	nop
 80067de:	e000      	b.n	80067e2 <HAL_UART_IRQHandler+0x51e>
      return;
 80067e0:	bf00      	nop
  }
}
 80067e2:	37e8      	adds	r7, #232	@ 0xe8
 80067e4:	46bd      	mov	sp, r7
 80067e6:	bd80      	pop	{r7, pc}

080067e8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80067e8:	b480      	push	{r7}
 80067ea:	b083      	sub	sp, #12
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80067f0:	bf00      	nop
 80067f2:	370c      	adds	r7, #12
 80067f4:	46bd      	mov	sp, r7
 80067f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fa:	4770      	bx	lr

080067fc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80067fc:	b480      	push	{r7}
 80067fe:	b083      	sub	sp, #12
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006804:	bf00      	nop
 8006806:	370c      	adds	r7, #12
 8006808:	46bd      	mov	sp, r7
 800680a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680e:	4770      	bx	lr

08006810 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006810:	b480      	push	{r7}
 8006812:	b083      	sub	sp, #12
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]
 8006818:	460b      	mov	r3, r1
 800681a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800681c:	bf00      	nop
 800681e:	370c      	adds	r7, #12
 8006820:	46bd      	mov	sp, r7
 8006822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006826:	4770      	bx	lr

08006828 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006828:	b480      	push	{r7}
 800682a:	b085      	sub	sp, #20
 800682c:	af00      	add	r7, sp, #0
 800682e:	60f8      	str	r0, [r7, #12]
 8006830:	60b9      	str	r1, [r7, #8]
 8006832:	4613      	mov	r3, r2
 8006834:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	68ba      	ldr	r2, [r7, #8]
 800683a:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	88fa      	ldrh	r2, [r7, #6]
 8006840:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	88fa      	ldrh	r2, [r7, #6]
 8006846:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	2200      	movs	r2, #0
 800684c:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	2222      	movs	r2, #34	@ 0x22
 8006852:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	691b      	ldr	r3, [r3, #16]
 800685a:	2b00      	cmp	r3, #0
 800685c:	d007      	beq.n	800686e <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	68da      	ldr	r2, [r3, #12]
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800686c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	695a      	ldr	r2, [r3, #20]
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	f042 0201 	orr.w	r2, r2, #1
 800687c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	68da      	ldr	r2, [r3, #12]
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	f042 0220 	orr.w	r2, r2, #32
 800688c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800688e:	2300      	movs	r3, #0
}
 8006890:	4618      	mov	r0, r3
 8006892:	3714      	adds	r7, #20
 8006894:	46bd      	mov	sp, r7
 8006896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689a:	4770      	bx	lr

0800689c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800689c:	b480      	push	{r7}
 800689e:	b095      	sub	sp, #84	@ 0x54
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	330c      	adds	r3, #12
 80068aa:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80068ae:	e853 3f00 	ldrex	r3, [r3]
 80068b2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80068b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068b6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80068ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	330c      	adds	r3, #12
 80068c2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80068c4:	643a      	str	r2, [r7, #64]	@ 0x40
 80068c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068c8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80068ca:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80068cc:	e841 2300 	strex	r3, r2, [r1]
 80068d0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80068d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d1e5      	bne.n	80068a4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	3314      	adds	r3, #20
 80068de:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068e0:	6a3b      	ldr	r3, [r7, #32]
 80068e2:	e853 3f00 	ldrex	r3, [r3]
 80068e6:	61fb      	str	r3, [r7, #28]
   return(result);
 80068e8:	69fb      	ldr	r3, [r7, #28]
 80068ea:	f023 0301 	bic.w	r3, r3, #1
 80068ee:	64bb      	str	r3, [r7, #72]	@ 0x48
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	3314      	adds	r3, #20
 80068f6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80068f8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80068fa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068fc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80068fe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006900:	e841 2300 	strex	r3, r2, [r1]
 8006904:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006906:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006908:	2b00      	cmp	r3, #0
 800690a:	d1e5      	bne.n	80068d8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006910:	2b01      	cmp	r3, #1
 8006912:	d119      	bne.n	8006948 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	330c      	adds	r3, #12
 800691a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	e853 3f00 	ldrex	r3, [r3]
 8006922:	60bb      	str	r3, [r7, #8]
   return(result);
 8006924:	68bb      	ldr	r3, [r7, #8]
 8006926:	f023 0310 	bic.w	r3, r3, #16
 800692a:	647b      	str	r3, [r7, #68]	@ 0x44
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	330c      	adds	r3, #12
 8006932:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006934:	61ba      	str	r2, [r7, #24]
 8006936:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006938:	6979      	ldr	r1, [r7, #20]
 800693a:	69ba      	ldr	r2, [r7, #24]
 800693c:	e841 2300 	strex	r3, r2, [r1]
 8006940:	613b      	str	r3, [r7, #16]
   return(result);
 8006942:	693b      	ldr	r3, [r7, #16]
 8006944:	2b00      	cmp	r3, #0
 8006946:	d1e5      	bne.n	8006914 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2220      	movs	r2, #32
 800694c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2200      	movs	r2, #0
 8006954:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006956:	bf00      	nop
 8006958:	3754      	adds	r7, #84	@ 0x54
 800695a:	46bd      	mov	sp, r7
 800695c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006960:	4770      	bx	lr

08006962 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006962:	b580      	push	{r7, lr}
 8006964:	b084      	sub	sp, #16
 8006966:	af00      	add	r7, sp, #0
 8006968:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800696e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	2200      	movs	r2, #0
 8006974:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	2200      	movs	r2, #0
 800697a:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800697c:	68f8      	ldr	r0, [r7, #12]
 800697e:	f7ff ff3d 	bl	80067fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006982:	bf00      	nop
 8006984:	3710      	adds	r7, #16
 8006986:	46bd      	mov	sp, r7
 8006988:	bd80      	pop	{r7, pc}

0800698a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800698a:	b480      	push	{r7}
 800698c:	b085      	sub	sp, #20
 800698e:	af00      	add	r7, sp, #0
 8006990:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006998:	b2db      	uxtb	r3, r3
 800699a:	2b21      	cmp	r3, #33	@ 0x21
 800699c:	d13e      	bne.n	8006a1c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	689b      	ldr	r3, [r3, #8]
 80069a2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80069a6:	d114      	bne.n	80069d2 <UART_Transmit_IT+0x48>
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	691b      	ldr	r3, [r3, #16]
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d110      	bne.n	80069d2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	6a1b      	ldr	r3, [r3, #32]
 80069b4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	881b      	ldrh	r3, [r3, #0]
 80069ba:	461a      	mov	r2, r3
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80069c4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	6a1b      	ldr	r3, [r3, #32]
 80069ca:	1c9a      	adds	r2, r3, #2
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	621a      	str	r2, [r3, #32]
 80069d0:	e008      	b.n	80069e4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	6a1b      	ldr	r3, [r3, #32]
 80069d6:	1c59      	adds	r1, r3, #1
 80069d8:	687a      	ldr	r2, [r7, #4]
 80069da:	6211      	str	r1, [r2, #32]
 80069dc:	781a      	ldrb	r2, [r3, #0]
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80069e8:	b29b      	uxth	r3, r3
 80069ea:	3b01      	subs	r3, #1
 80069ec:	b29b      	uxth	r3, r3
 80069ee:	687a      	ldr	r2, [r7, #4]
 80069f0:	4619      	mov	r1, r3
 80069f2:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d10f      	bne.n	8006a18 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	68da      	ldr	r2, [r3, #12]
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006a06:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	68da      	ldr	r2, [r3, #12]
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006a16:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006a18:	2300      	movs	r3, #0
 8006a1a:	e000      	b.n	8006a1e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006a1c:	2302      	movs	r3, #2
  }
}
 8006a1e:	4618      	mov	r0, r3
 8006a20:	3714      	adds	r7, #20
 8006a22:	46bd      	mov	sp, r7
 8006a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a28:	4770      	bx	lr

08006a2a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006a2a:	b580      	push	{r7, lr}
 8006a2c:	b082      	sub	sp, #8
 8006a2e:	af00      	add	r7, sp, #0
 8006a30:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	68da      	ldr	r2, [r3, #12]
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006a40:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	2220      	movs	r2, #32
 8006a46:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006a4a:	6878      	ldr	r0, [r7, #4]
 8006a4c:	f7ff fecc 	bl	80067e8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006a50:	2300      	movs	r3, #0
}
 8006a52:	4618      	mov	r0, r3
 8006a54:	3708      	adds	r7, #8
 8006a56:	46bd      	mov	sp, r7
 8006a58:	bd80      	pop	{r7, pc}

08006a5a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006a5a:	b580      	push	{r7, lr}
 8006a5c:	b08c      	sub	sp, #48	@ 0x30
 8006a5e:	af00      	add	r7, sp, #0
 8006a60:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006a68:	b2db      	uxtb	r3, r3
 8006a6a:	2b22      	cmp	r3, #34	@ 0x22
 8006a6c:	f040 80ae 	bne.w	8006bcc <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	689b      	ldr	r3, [r3, #8]
 8006a74:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006a78:	d117      	bne.n	8006aaa <UART_Receive_IT+0x50>
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	691b      	ldr	r3, [r3, #16]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d113      	bne.n	8006aaa <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006a82:	2300      	movs	r3, #0
 8006a84:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a8a:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	685b      	ldr	r3, [r3, #4]
 8006a92:	b29b      	uxth	r3, r3
 8006a94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a98:	b29a      	uxth	r2, r3
 8006a9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a9c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006aa2:	1c9a      	adds	r2, r3, #2
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	629a      	str	r2, [r3, #40]	@ 0x28
 8006aa8:	e026      	b.n	8006af8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006aae:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8006ab0:	2300      	movs	r3, #0
 8006ab2:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	689b      	ldr	r3, [r3, #8]
 8006ab8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006abc:	d007      	beq.n	8006ace <UART_Receive_IT+0x74>
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	689b      	ldr	r3, [r3, #8]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d10a      	bne.n	8006adc <UART_Receive_IT+0x82>
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	691b      	ldr	r3, [r3, #16]
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d106      	bne.n	8006adc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	685b      	ldr	r3, [r3, #4]
 8006ad4:	b2da      	uxtb	r2, r3
 8006ad6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ad8:	701a      	strb	r2, [r3, #0]
 8006ada:	e008      	b.n	8006aee <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	685b      	ldr	r3, [r3, #4]
 8006ae2:	b2db      	uxtb	r3, r3
 8006ae4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006ae8:	b2da      	uxtb	r2, r3
 8006aea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006aec:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006af2:	1c5a      	adds	r2, r3, #1
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006afc:	b29b      	uxth	r3, r3
 8006afe:	3b01      	subs	r3, #1
 8006b00:	b29b      	uxth	r3, r3
 8006b02:	687a      	ldr	r2, [r7, #4]
 8006b04:	4619      	mov	r1, r3
 8006b06:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d15d      	bne.n	8006bc8 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	68da      	ldr	r2, [r3, #12]
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	f022 0220 	bic.w	r2, r2, #32
 8006b1a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	68da      	ldr	r2, [r3, #12]
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006b2a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	695a      	ldr	r2, [r3, #20]
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	f022 0201 	bic.w	r2, r2, #1
 8006b3a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	2220      	movs	r2, #32
 8006b40:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	2200      	movs	r2, #0
 8006b48:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b4e:	2b01      	cmp	r3, #1
 8006b50:	d135      	bne.n	8006bbe <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	2200      	movs	r2, #0
 8006b56:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	330c      	adds	r3, #12
 8006b5e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b60:	697b      	ldr	r3, [r7, #20]
 8006b62:	e853 3f00 	ldrex	r3, [r3]
 8006b66:	613b      	str	r3, [r7, #16]
   return(result);
 8006b68:	693b      	ldr	r3, [r7, #16]
 8006b6a:	f023 0310 	bic.w	r3, r3, #16
 8006b6e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	330c      	adds	r3, #12
 8006b76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006b78:	623a      	str	r2, [r7, #32]
 8006b7a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b7c:	69f9      	ldr	r1, [r7, #28]
 8006b7e:	6a3a      	ldr	r2, [r7, #32]
 8006b80:	e841 2300 	strex	r3, r2, [r1]
 8006b84:	61bb      	str	r3, [r7, #24]
   return(result);
 8006b86:	69bb      	ldr	r3, [r7, #24]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d1e5      	bne.n	8006b58 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	f003 0310 	and.w	r3, r3, #16
 8006b96:	2b10      	cmp	r3, #16
 8006b98:	d10a      	bne.n	8006bb0 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006b9a:	2300      	movs	r3, #0
 8006b9c:	60fb      	str	r3, [r7, #12]
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	60fb      	str	r3, [r7, #12]
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	685b      	ldr	r3, [r3, #4]
 8006bac:	60fb      	str	r3, [r7, #12]
 8006bae:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006bb4:	4619      	mov	r1, r3
 8006bb6:	6878      	ldr	r0, [r7, #4]
 8006bb8:	f7ff fe2a 	bl	8006810 <HAL_UARTEx_RxEventCallback>
 8006bbc:	e002      	b.n	8006bc4 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006bbe:	6878      	ldr	r0, [r7, #4]
 8006bc0:	f7fb ff12 	bl	80029e8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006bc4:	2300      	movs	r3, #0
 8006bc6:	e002      	b.n	8006bce <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006bc8:	2300      	movs	r3, #0
 8006bca:	e000      	b.n	8006bce <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006bcc:	2302      	movs	r3, #2
  }
}
 8006bce:	4618      	mov	r0, r3
 8006bd0:	3730      	adds	r7, #48	@ 0x30
 8006bd2:	46bd      	mov	sp, r7
 8006bd4:	bd80      	pop	{r7, pc}
	...

08006bd8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006bd8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006bdc:	b0c0      	sub	sp, #256	@ 0x100
 8006bde:	af00      	add	r7, sp, #0
 8006be0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006be4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	691b      	ldr	r3, [r3, #16]
 8006bec:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006bf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006bf4:	68d9      	ldr	r1, [r3, #12]
 8006bf6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006bfa:	681a      	ldr	r2, [r3, #0]
 8006bfc:	ea40 0301 	orr.w	r3, r0, r1
 8006c00:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006c02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c06:	689a      	ldr	r2, [r3, #8]
 8006c08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c0c:	691b      	ldr	r3, [r3, #16]
 8006c0e:	431a      	orrs	r2, r3
 8006c10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c14:	695b      	ldr	r3, [r3, #20]
 8006c16:	431a      	orrs	r2, r3
 8006c18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c1c:	69db      	ldr	r3, [r3, #28]
 8006c1e:	4313      	orrs	r3, r2
 8006c20:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006c24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	68db      	ldr	r3, [r3, #12]
 8006c2c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006c30:	f021 010c 	bic.w	r1, r1, #12
 8006c34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c38:	681a      	ldr	r2, [r3, #0]
 8006c3a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006c3e:	430b      	orrs	r3, r1
 8006c40:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006c42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	695b      	ldr	r3, [r3, #20]
 8006c4a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006c4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c52:	6999      	ldr	r1, [r3, #24]
 8006c54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c58:	681a      	ldr	r2, [r3, #0]
 8006c5a:	ea40 0301 	orr.w	r3, r0, r1
 8006c5e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006c60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c64:	681a      	ldr	r2, [r3, #0]
 8006c66:	4b8f      	ldr	r3, [pc, #572]	@ (8006ea4 <UART_SetConfig+0x2cc>)
 8006c68:	429a      	cmp	r2, r3
 8006c6a:	d005      	beq.n	8006c78 <UART_SetConfig+0xa0>
 8006c6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c70:	681a      	ldr	r2, [r3, #0]
 8006c72:	4b8d      	ldr	r3, [pc, #564]	@ (8006ea8 <UART_SetConfig+0x2d0>)
 8006c74:	429a      	cmp	r2, r3
 8006c76:	d104      	bne.n	8006c82 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006c78:	f7fe f9fa 	bl	8005070 <HAL_RCC_GetPCLK2Freq>
 8006c7c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006c80:	e003      	b.n	8006c8a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006c82:	f7fe f9e1 	bl	8005048 <HAL_RCC_GetPCLK1Freq>
 8006c86:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006c8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c8e:	69db      	ldr	r3, [r3, #28]
 8006c90:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006c94:	f040 810c 	bne.w	8006eb0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006c98:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006c9c:	2200      	movs	r2, #0
 8006c9e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006ca2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006ca6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006caa:	4622      	mov	r2, r4
 8006cac:	462b      	mov	r3, r5
 8006cae:	1891      	adds	r1, r2, r2
 8006cb0:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006cb2:	415b      	adcs	r3, r3
 8006cb4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006cb6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006cba:	4621      	mov	r1, r4
 8006cbc:	eb12 0801 	adds.w	r8, r2, r1
 8006cc0:	4629      	mov	r1, r5
 8006cc2:	eb43 0901 	adc.w	r9, r3, r1
 8006cc6:	f04f 0200 	mov.w	r2, #0
 8006cca:	f04f 0300 	mov.w	r3, #0
 8006cce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006cd2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006cd6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006cda:	4690      	mov	r8, r2
 8006cdc:	4699      	mov	r9, r3
 8006cde:	4623      	mov	r3, r4
 8006ce0:	eb18 0303 	adds.w	r3, r8, r3
 8006ce4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006ce8:	462b      	mov	r3, r5
 8006cea:	eb49 0303 	adc.w	r3, r9, r3
 8006cee:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006cf2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006cf6:	685b      	ldr	r3, [r3, #4]
 8006cf8:	2200      	movs	r2, #0
 8006cfa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006cfe:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006d02:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006d06:	460b      	mov	r3, r1
 8006d08:	18db      	adds	r3, r3, r3
 8006d0a:	653b      	str	r3, [r7, #80]	@ 0x50
 8006d0c:	4613      	mov	r3, r2
 8006d0e:	eb42 0303 	adc.w	r3, r2, r3
 8006d12:	657b      	str	r3, [r7, #84]	@ 0x54
 8006d14:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006d18:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006d1c:	f7f9 faa8 	bl	8000270 <__aeabi_uldivmod>
 8006d20:	4602      	mov	r2, r0
 8006d22:	460b      	mov	r3, r1
 8006d24:	4b61      	ldr	r3, [pc, #388]	@ (8006eac <UART_SetConfig+0x2d4>)
 8006d26:	fba3 2302 	umull	r2, r3, r3, r2
 8006d2a:	095b      	lsrs	r3, r3, #5
 8006d2c:	011c      	lsls	r4, r3, #4
 8006d2e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006d32:	2200      	movs	r2, #0
 8006d34:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006d38:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006d3c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006d40:	4642      	mov	r2, r8
 8006d42:	464b      	mov	r3, r9
 8006d44:	1891      	adds	r1, r2, r2
 8006d46:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006d48:	415b      	adcs	r3, r3
 8006d4a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006d4c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006d50:	4641      	mov	r1, r8
 8006d52:	eb12 0a01 	adds.w	sl, r2, r1
 8006d56:	4649      	mov	r1, r9
 8006d58:	eb43 0b01 	adc.w	fp, r3, r1
 8006d5c:	f04f 0200 	mov.w	r2, #0
 8006d60:	f04f 0300 	mov.w	r3, #0
 8006d64:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006d68:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006d6c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006d70:	4692      	mov	sl, r2
 8006d72:	469b      	mov	fp, r3
 8006d74:	4643      	mov	r3, r8
 8006d76:	eb1a 0303 	adds.w	r3, sl, r3
 8006d7a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006d7e:	464b      	mov	r3, r9
 8006d80:	eb4b 0303 	adc.w	r3, fp, r3
 8006d84:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006d88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d8c:	685b      	ldr	r3, [r3, #4]
 8006d8e:	2200      	movs	r2, #0
 8006d90:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006d94:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006d98:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006d9c:	460b      	mov	r3, r1
 8006d9e:	18db      	adds	r3, r3, r3
 8006da0:	643b      	str	r3, [r7, #64]	@ 0x40
 8006da2:	4613      	mov	r3, r2
 8006da4:	eb42 0303 	adc.w	r3, r2, r3
 8006da8:	647b      	str	r3, [r7, #68]	@ 0x44
 8006daa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006dae:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8006db2:	f7f9 fa5d 	bl	8000270 <__aeabi_uldivmod>
 8006db6:	4602      	mov	r2, r0
 8006db8:	460b      	mov	r3, r1
 8006dba:	4611      	mov	r1, r2
 8006dbc:	4b3b      	ldr	r3, [pc, #236]	@ (8006eac <UART_SetConfig+0x2d4>)
 8006dbe:	fba3 2301 	umull	r2, r3, r3, r1
 8006dc2:	095b      	lsrs	r3, r3, #5
 8006dc4:	2264      	movs	r2, #100	@ 0x64
 8006dc6:	fb02 f303 	mul.w	r3, r2, r3
 8006dca:	1acb      	subs	r3, r1, r3
 8006dcc:	00db      	lsls	r3, r3, #3
 8006dce:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8006dd2:	4b36      	ldr	r3, [pc, #216]	@ (8006eac <UART_SetConfig+0x2d4>)
 8006dd4:	fba3 2302 	umull	r2, r3, r3, r2
 8006dd8:	095b      	lsrs	r3, r3, #5
 8006dda:	005b      	lsls	r3, r3, #1
 8006ddc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006de0:	441c      	add	r4, r3
 8006de2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006de6:	2200      	movs	r2, #0
 8006de8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006dec:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006df0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006df4:	4642      	mov	r2, r8
 8006df6:	464b      	mov	r3, r9
 8006df8:	1891      	adds	r1, r2, r2
 8006dfa:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006dfc:	415b      	adcs	r3, r3
 8006dfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006e00:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006e04:	4641      	mov	r1, r8
 8006e06:	1851      	adds	r1, r2, r1
 8006e08:	6339      	str	r1, [r7, #48]	@ 0x30
 8006e0a:	4649      	mov	r1, r9
 8006e0c:	414b      	adcs	r3, r1
 8006e0e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e10:	f04f 0200 	mov.w	r2, #0
 8006e14:	f04f 0300 	mov.w	r3, #0
 8006e18:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006e1c:	4659      	mov	r1, fp
 8006e1e:	00cb      	lsls	r3, r1, #3
 8006e20:	4651      	mov	r1, sl
 8006e22:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006e26:	4651      	mov	r1, sl
 8006e28:	00ca      	lsls	r2, r1, #3
 8006e2a:	4610      	mov	r0, r2
 8006e2c:	4619      	mov	r1, r3
 8006e2e:	4603      	mov	r3, r0
 8006e30:	4642      	mov	r2, r8
 8006e32:	189b      	adds	r3, r3, r2
 8006e34:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006e38:	464b      	mov	r3, r9
 8006e3a:	460a      	mov	r2, r1
 8006e3c:	eb42 0303 	adc.w	r3, r2, r3
 8006e40:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006e44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e48:	685b      	ldr	r3, [r3, #4]
 8006e4a:	2200      	movs	r2, #0
 8006e4c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006e50:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006e54:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006e58:	460b      	mov	r3, r1
 8006e5a:	18db      	adds	r3, r3, r3
 8006e5c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006e5e:	4613      	mov	r3, r2
 8006e60:	eb42 0303 	adc.w	r3, r2, r3
 8006e64:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006e66:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006e6a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006e6e:	f7f9 f9ff 	bl	8000270 <__aeabi_uldivmod>
 8006e72:	4602      	mov	r2, r0
 8006e74:	460b      	mov	r3, r1
 8006e76:	4b0d      	ldr	r3, [pc, #52]	@ (8006eac <UART_SetConfig+0x2d4>)
 8006e78:	fba3 1302 	umull	r1, r3, r3, r2
 8006e7c:	095b      	lsrs	r3, r3, #5
 8006e7e:	2164      	movs	r1, #100	@ 0x64
 8006e80:	fb01 f303 	mul.w	r3, r1, r3
 8006e84:	1ad3      	subs	r3, r2, r3
 8006e86:	00db      	lsls	r3, r3, #3
 8006e88:	3332      	adds	r3, #50	@ 0x32
 8006e8a:	4a08      	ldr	r2, [pc, #32]	@ (8006eac <UART_SetConfig+0x2d4>)
 8006e8c:	fba2 2303 	umull	r2, r3, r2, r3
 8006e90:	095b      	lsrs	r3, r3, #5
 8006e92:	f003 0207 	and.w	r2, r3, #7
 8006e96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	4422      	add	r2, r4
 8006e9e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006ea0:	e106      	b.n	80070b0 <UART_SetConfig+0x4d8>
 8006ea2:	bf00      	nop
 8006ea4:	40011000 	.word	0x40011000
 8006ea8:	40011400 	.word	0x40011400
 8006eac:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006eb0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006eb4:	2200      	movs	r2, #0
 8006eb6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006eba:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006ebe:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8006ec2:	4642      	mov	r2, r8
 8006ec4:	464b      	mov	r3, r9
 8006ec6:	1891      	adds	r1, r2, r2
 8006ec8:	6239      	str	r1, [r7, #32]
 8006eca:	415b      	adcs	r3, r3
 8006ecc:	627b      	str	r3, [r7, #36]	@ 0x24
 8006ece:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006ed2:	4641      	mov	r1, r8
 8006ed4:	1854      	adds	r4, r2, r1
 8006ed6:	4649      	mov	r1, r9
 8006ed8:	eb43 0501 	adc.w	r5, r3, r1
 8006edc:	f04f 0200 	mov.w	r2, #0
 8006ee0:	f04f 0300 	mov.w	r3, #0
 8006ee4:	00eb      	lsls	r3, r5, #3
 8006ee6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006eea:	00e2      	lsls	r2, r4, #3
 8006eec:	4614      	mov	r4, r2
 8006eee:	461d      	mov	r5, r3
 8006ef0:	4643      	mov	r3, r8
 8006ef2:	18e3      	adds	r3, r4, r3
 8006ef4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006ef8:	464b      	mov	r3, r9
 8006efa:	eb45 0303 	adc.w	r3, r5, r3
 8006efe:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006f02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f06:	685b      	ldr	r3, [r3, #4]
 8006f08:	2200      	movs	r2, #0
 8006f0a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006f0e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006f12:	f04f 0200 	mov.w	r2, #0
 8006f16:	f04f 0300 	mov.w	r3, #0
 8006f1a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006f1e:	4629      	mov	r1, r5
 8006f20:	008b      	lsls	r3, r1, #2
 8006f22:	4621      	mov	r1, r4
 8006f24:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006f28:	4621      	mov	r1, r4
 8006f2a:	008a      	lsls	r2, r1, #2
 8006f2c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006f30:	f7f9 f99e 	bl	8000270 <__aeabi_uldivmod>
 8006f34:	4602      	mov	r2, r0
 8006f36:	460b      	mov	r3, r1
 8006f38:	4b60      	ldr	r3, [pc, #384]	@ (80070bc <UART_SetConfig+0x4e4>)
 8006f3a:	fba3 2302 	umull	r2, r3, r3, r2
 8006f3e:	095b      	lsrs	r3, r3, #5
 8006f40:	011c      	lsls	r4, r3, #4
 8006f42:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006f46:	2200      	movs	r2, #0
 8006f48:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006f4c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006f50:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006f54:	4642      	mov	r2, r8
 8006f56:	464b      	mov	r3, r9
 8006f58:	1891      	adds	r1, r2, r2
 8006f5a:	61b9      	str	r1, [r7, #24]
 8006f5c:	415b      	adcs	r3, r3
 8006f5e:	61fb      	str	r3, [r7, #28]
 8006f60:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006f64:	4641      	mov	r1, r8
 8006f66:	1851      	adds	r1, r2, r1
 8006f68:	6139      	str	r1, [r7, #16]
 8006f6a:	4649      	mov	r1, r9
 8006f6c:	414b      	adcs	r3, r1
 8006f6e:	617b      	str	r3, [r7, #20]
 8006f70:	f04f 0200 	mov.w	r2, #0
 8006f74:	f04f 0300 	mov.w	r3, #0
 8006f78:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006f7c:	4659      	mov	r1, fp
 8006f7e:	00cb      	lsls	r3, r1, #3
 8006f80:	4651      	mov	r1, sl
 8006f82:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006f86:	4651      	mov	r1, sl
 8006f88:	00ca      	lsls	r2, r1, #3
 8006f8a:	4610      	mov	r0, r2
 8006f8c:	4619      	mov	r1, r3
 8006f8e:	4603      	mov	r3, r0
 8006f90:	4642      	mov	r2, r8
 8006f92:	189b      	adds	r3, r3, r2
 8006f94:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006f98:	464b      	mov	r3, r9
 8006f9a:	460a      	mov	r2, r1
 8006f9c:	eb42 0303 	adc.w	r3, r2, r3
 8006fa0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006fa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006fa8:	685b      	ldr	r3, [r3, #4]
 8006faa:	2200      	movs	r2, #0
 8006fac:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006fae:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006fb0:	f04f 0200 	mov.w	r2, #0
 8006fb4:	f04f 0300 	mov.w	r3, #0
 8006fb8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006fbc:	4649      	mov	r1, r9
 8006fbe:	008b      	lsls	r3, r1, #2
 8006fc0:	4641      	mov	r1, r8
 8006fc2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006fc6:	4641      	mov	r1, r8
 8006fc8:	008a      	lsls	r2, r1, #2
 8006fca:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006fce:	f7f9 f94f 	bl	8000270 <__aeabi_uldivmod>
 8006fd2:	4602      	mov	r2, r0
 8006fd4:	460b      	mov	r3, r1
 8006fd6:	4611      	mov	r1, r2
 8006fd8:	4b38      	ldr	r3, [pc, #224]	@ (80070bc <UART_SetConfig+0x4e4>)
 8006fda:	fba3 2301 	umull	r2, r3, r3, r1
 8006fde:	095b      	lsrs	r3, r3, #5
 8006fe0:	2264      	movs	r2, #100	@ 0x64
 8006fe2:	fb02 f303 	mul.w	r3, r2, r3
 8006fe6:	1acb      	subs	r3, r1, r3
 8006fe8:	011b      	lsls	r3, r3, #4
 8006fea:	3332      	adds	r3, #50	@ 0x32
 8006fec:	4a33      	ldr	r2, [pc, #204]	@ (80070bc <UART_SetConfig+0x4e4>)
 8006fee:	fba2 2303 	umull	r2, r3, r2, r3
 8006ff2:	095b      	lsrs	r3, r3, #5
 8006ff4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006ff8:	441c      	add	r4, r3
 8006ffa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006ffe:	2200      	movs	r2, #0
 8007000:	673b      	str	r3, [r7, #112]	@ 0x70
 8007002:	677a      	str	r2, [r7, #116]	@ 0x74
 8007004:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8007008:	4642      	mov	r2, r8
 800700a:	464b      	mov	r3, r9
 800700c:	1891      	adds	r1, r2, r2
 800700e:	60b9      	str	r1, [r7, #8]
 8007010:	415b      	adcs	r3, r3
 8007012:	60fb      	str	r3, [r7, #12]
 8007014:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007018:	4641      	mov	r1, r8
 800701a:	1851      	adds	r1, r2, r1
 800701c:	6039      	str	r1, [r7, #0]
 800701e:	4649      	mov	r1, r9
 8007020:	414b      	adcs	r3, r1
 8007022:	607b      	str	r3, [r7, #4]
 8007024:	f04f 0200 	mov.w	r2, #0
 8007028:	f04f 0300 	mov.w	r3, #0
 800702c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007030:	4659      	mov	r1, fp
 8007032:	00cb      	lsls	r3, r1, #3
 8007034:	4651      	mov	r1, sl
 8007036:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800703a:	4651      	mov	r1, sl
 800703c:	00ca      	lsls	r2, r1, #3
 800703e:	4610      	mov	r0, r2
 8007040:	4619      	mov	r1, r3
 8007042:	4603      	mov	r3, r0
 8007044:	4642      	mov	r2, r8
 8007046:	189b      	adds	r3, r3, r2
 8007048:	66bb      	str	r3, [r7, #104]	@ 0x68
 800704a:	464b      	mov	r3, r9
 800704c:	460a      	mov	r2, r1
 800704e:	eb42 0303 	adc.w	r3, r2, r3
 8007052:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007054:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007058:	685b      	ldr	r3, [r3, #4]
 800705a:	2200      	movs	r2, #0
 800705c:	663b      	str	r3, [r7, #96]	@ 0x60
 800705e:	667a      	str	r2, [r7, #100]	@ 0x64
 8007060:	f04f 0200 	mov.w	r2, #0
 8007064:	f04f 0300 	mov.w	r3, #0
 8007068:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800706c:	4649      	mov	r1, r9
 800706e:	008b      	lsls	r3, r1, #2
 8007070:	4641      	mov	r1, r8
 8007072:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007076:	4641      	mov	r1, r8
 8007078:	008a      	lsls	r2, r1, #2
 800707a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800707e:	f7f9 f8f7 	bl	8000270 <__aeabi_uldivmod>
 8007082:	4602      	mov	r2, r0
 8007084:	460b      	mov	r3, r1
 8007086:	4b0d      	ldr	r3, [pc, #52]	@ (80070bc <UART_SetConfig+0x4e4>)
 8007088:	fba3 1302 	umull	r1, r3, r3, r2
 800708c:	095b      	lsrs	r3, r3, #5
 800708e:	2164      	movs	r1, #100	@ 0x64
 8007090:	fb01 f303 	mul.w	r3, r1, r3
 8007094:	1ad3      	subs	r3, r2, r3
 8007096:	011b      	lsls	r3, r3, #4
 8007098:	3332      	adds	r3, #50	@ 0x32
 800709a:	4a08      	ldr	r2, [pc, #32]	@ (80070bc <UART_SetConfig+0x4e4>)
 800709c:	fba2 2303 	umull	r2, r3, r2, r3
 80070a0:	095b      	lsrs	r3, r3, #5
 80070a2:	f003 020f 	and.w	r2, r3, #15
 80070a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	4422      	add	r2, r4
 80070ae:	609a      	str	r2, [r3, #8]
}
 80070b0:	bf00      	nop
 80070b2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80070b6:	46bd      	mov	sp, r7
 80070b8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80070bc:	51eb851f 	.word	0x51eb851f

080070c0 <siprintf>:
 80070c0:	b40e      	push	{r1, r2, r3}
 80070c2:	b500      	push	{lr}
 80070c4:	b09c      	sub	sp, #112	@ 0x70
 80070c6:	ab1d      	add	r3, sp, #116	@ 0x74
 80070c8:	9002      	str	r0, [sp, #8]
 80070ca:	9006      	str	r0, [sp, #24]
 80070cc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80070d0:	4809      	ldr	r0, [pc, #36]	@ (80070f8 <siprintf+0x38>)
 80070d2:	9107      	str	r1, [sp, #28]
 80070d4:	9104      	str	r1, [sp, #16]
 80070d6:	4909      	ldr	r1, [pc, #36]	@ (80070fc <siprintf+0x3c>)
 80070d8:	f853 2b04 	ldr.w	r2, [r3], #4
 80070dc:	9105      	str	r1, [sp, #20]
 80070de:	6800      	ldr	r0, [r0, #0]
 80070e0:	9301      	str	r3, [sp, #4]
 80070e2:	a902      	add	r1, sp, #8
 80070e4:	f000 f994 	bl	8007410 <_svfiprintf_r>
 80070e8:	9b02      	ldr	r3, [sp, #8]
 80070ea:	2200      	movs	r2, #0
 80070ec:	701a      	strb	r2, [r3, #0]
 80070ee:	b01c      	add	sp, #112	@ 0x70
 80070f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80070f4:	b003      	add	sp, #12
 80070f6:	4770      	bx	lr
 80070f8:	20000140 	.word	0x20000140
 80070fc:	ffff0208 	.word	0xffff0208

08007100 <memset>:
 8007100:	4402      	add	r2, r0
 8007102:	4603      	mov	r3, r0
 8007104:	4293      	cmp	r3, r2
 8007106:	d100      	bne.n	800710a <memset+0xa>
 8007108:	4770      	bx	lr
 800710a:	f803 1b01 	strb.w	r1, [r3], #1
 800710e:	e7f9      	b.n	8007104 <memset+0x4>

08007110 <__errno>:
 8007110:	4b01      	ldr	r3, [pc, #4]	@ (8007118 <__errno+0x8>)
 8007112:	6818      	ldr	r0, [r3, #0]
 8007114:	4770      	bx	lr
 8007116:	bf00      	nop
 8007118:	20000140 	.word	0x20000140

0800711c <__libc_init_array>:
 800711c:	b570      	push	{r4, r5, r6, lr}
 800711e:	4d0d      	ldr	r5, [pc, #52]	@ (8007154 <__libc_init_array+0x38>)
 8007120:	4c0d      	ldr	r4, [pc, #52]	@ (8007158 <__libc_init_array+0x3c>)
 8007122:	1b64      	subs	r4, r4, r5
 8007124:	10a4      	asrs	r4, r4, #2
 8007126:	2600      	movs	r6, #0
 8007128:	42a6      	cmp	r6, r4
 800712a:	d109      	bne.n	8007140 <__libc_init_array+0x24>
 800712c:	4d0b      	ldr	r5, [pc, #44]	@ (800715c <__libc_init_array+0x40>)
 800712e:	4c0c      	ldr	r4, [pc, #48]	@ (8007160 <__libc_init_array+0x44>)
 8007130:	f000 fc66 	bl	8007a00 <_init>
 8007134:	1b64      	subs	r4, r4, r5
 8007136:	10a4      	asrs	r4, r4, #2
 8007138:	2600      	movs	r6, #0
 800713a:	42a6      	cmp	r6, r4
 800713c:	d105      	bne.n	800714a <__libc_init_array+0x2e>
 800713e:	bd70      	pop	{r4, r5, r6, pc}
 8007140:	f855 3b04 	ldr.w	r3, [r5], #4
 8007144:	4798      	blx	r3
 8007146:	3601      	adds	r6, #1
 8007148:	e7ee      	b.n	8007128 <__libc_init_array+0xc>
 800714a:	f855 3b04 	ldr.w	r3, [r5], #4
 800714e:	4798      	blx	r3
 8007150:	3601      	adds	r6, #1
 8007152:	e7f2      	b.n	800713a <__libc_init_array+0x1e>
 8007154:	08007cd0 	.word	0x08007cd0
 8007158:	08007cd0 	.word	0x08007cd0
 800715c:	08007cd0 	.word	0x08007cd0
 8007160:	08007cd4 	.word	0x08007cd4

08007164 <__retarget_lock_acquire_recursive>:
 8007164:	4770      	bx	lr

08007166 <__retarget_lock_release_recursive>:
 8007166:	4770      	bx	lr

08007168 <_free_r>:
 8007168:	b538      	push	{r3, r4, r5, lr}
 800716a:	4605      	mov	r5, r0
 800716c:	2900      	cmp	r1, #0
 800716e:	d041      	beq.n	80071f4 <_free_r+0x8c>
 8007170:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007174:	1f0c      	subs	r4, r1, #4
 8007176:	2b00      	cmp	r3, #0
 8007178:	bfb8      	it	lt
 800717a:	18e4      	addlt	r4, r4, r3
 800717c:	f000 f8e0 	bl	8007340 <__malloc_lock>
 8007180:	4a1d      	ldr	r2, [pc, #116]	@ (80071f8 <_free_r+0x90>)
 8007182:	6813      	ldr	r3, [r2, #0]
 8007184:	b933      	cbnz	r3, 8007194 <_free_r+0x2c>
 8007186:	6063      	str	r3, [r4, #4]
 8007188:	6014      	str	r4, [r2, #0]
 800718a:	4628      	mov	r0, r5
 800718c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007190:	f000 b8dc 	b.w	800734c <__malloc_unlock>
 8007194:	42a3      	cmp	r3, r4
 8007196:	d908      	bls.n	80071aa <_free_r+0x42>
 8007198:	6820      	ldr	r0, [r4, #0]
 800719a:	1821      	adds	r1, r4, r0
 800719c:	428b      	cmp	r3, r1
 800719e:	bf01      	itttt	eq
 80071a0:	6819      	ldreq	r1, [r3, #0]
 80071a2:	685b      	ldreq	r3, [r3, #4]
 80071a4:	1809      	addeq	r1, r1, r0
 80071a6:	6021      	streq	r1, [r4, #0]
 80071a8:	e7ed      	b.n	8007186 <_free_r+0x1e>
 80071aa:	461a      	mov	r2, r3
 80071ac:	685b      	ldr	r3, [r3, #4]
 80071ae:	b10b      	cbz	r3, 80071b4 <_free_r+0x4c>
 80071b0:	42a3      	cmp	r3, r4
 80071b2:	d9fa      	bls.n	80071aa <_free_r+0x42>
 80071b4:	6811      	ldr	r1, [r2, #0]
 80071b6:	1850      	adds	r0, r2, r1
 80071b8:	42a0      	cmp	r0, r4
 80071ba:	d10b      	bne.n	80071d4 <_free_r+0x6c>
 80071bc:	6820      	ldr	r0, [r4, #0]
 80071be:	4401      	add	r1, r0
 80071c0:	1850      	adds	r0, r2, r1
 80071c2:	4283      	cmp	r3, r0
 80071c4:	6011      	str	r1, [r2, #0]
 80071c6:	d1e0      	bne.n	800718a <_free_r+0x22>
 80071c8:	6818      	ldr	r0, [r3, #0]
 80071ca:	685b      	ldr	r3, [r3, #4]
 80071cc:	6053      	str	r3, [r2, #4]
 80071ce:	4408      	add	r0, r1
 80071d0:	6010      	str	r0, [r2, #0]
 80071d2:	e7da      	b.n	800718a <_free_r+0x22>
 80071d4:	d902      	bls.n	80071dc <_free_r+0x74>
 80071d6:	230c      	movs	r3, #12
 80071d8:	602b      	str	r3, [r5, #0]
 80071da:	e7d6      	b.n	800718a <_free_r+0x22>
 80071dc:	6820      	ldr	r0, [r4, #0]
 80071de:	1821      	adds	r1, r4, r0
 80071e0:	428b      	cmp	r3, r1
 80071e2:	bf04      	itt	eq
 80071e4:	6819      	ldreq	r1, [r3, #0]
 80071e6:	685b      	ldreq	r3, [r3, #4]
 80071e8:	6063      	str	r3, [r4, #4]
 80071ea:	bf04      	itt	eq
 80071ec:	1809      	addeq	r1, r1, r0
 80071ee:	6021      	streq	r1, [r4, #0]
 80071f0:	6054      	str	r4, [r2, #4]
 80071f2:	e7ca      	b.n	800718a <_free_r+0x22>
 80071f4:	bd38      	pop	{r3, r4, r5, pc}
 80071f6:	bf00      	nop
 80071f8:	20000468 	.word	0x20000468

080071fc <sbrk_aligned>:
 80071fc:	b570      	push	{r4, r5, r6, lr}
 80071fe:	4e0f      	ldr	r6, [pc, #60]	@ (800723c <sbrk_aligned+0x40>)
 8007200:	460c      	mov	r4, r1
 8007202:	6831      	ldr	r1, [r6, #0]
 8007204:	4605      	mov	r5, r0
 8007206:	b911      	cbnz	r1, 800720e <sbrk_aligned+0x12>
 8007208:	f000 fba6 	bl	8007958 <_sbrk_r>
 800720c:	6030      	str	r0, [r6, #0]
 800720e:	4621      	mov	r1, r4
 8007210:	4628      	mov	r0, r5
 8007212:	f000 fba1 	bl	8007958 <_sbrk_r>
 8007216:	1c43      	adds	r3, r0, #1
 8007218:	d103      	bne.n	8007222 <sbrk_aligned+0x26>
 800721a:	f04f 34ff 	mov.w	r4, #4294967295
 800721e:	4620      	mov	r0, r4
 8007220:	bd70      	pop	{r4, r5, r6, pc}
 8007222:	1cc4      	adds	r4, r0, #3
 8007224:	f024 0403 	bic.w	r4, r4, #3
 8007228:	42a0      	cmp	r0, r4
 800722a:	d0f8      	beq.n	800721e <sbrk_aligned+0x22>
 800722c:	1a21      	subs	r1, r4, r0
 800722e:	4628      	mov	r0, r5
 8007230:	f000 fb92 	bl	8007958 <_sbrk_r>
 8007234:	3001      	adds	r0, #1
 8007236:	d1f2      	bne.n	800721e <sbrk_aligned+0x22>
 8007238:	e7ef      	b.n	800721a <sbrk_aligned+0x1e>
 800723a:	bf00      	nop
 800723c:	20000464 	.word	0x20000464

08007240 <_malloc_r>:
 8007240:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007244:	1ccd      	adds	r5, r1, #3
 8007246:	f025 0503 	bic.w	r5, r5, #3
 800724a:	3508      	adds	r5, #8
 800724c:	2d0c      	cmp	r5, #12
 800724e:	bf38      	it	cc
 8007250:	250c      	movcc	r5, #12
 8007252:	2d00      	cmp	r5, #0
 8007254:	4606      	mov	r6, r0
 8007256:	db01      	blt.n	800725c <_malloc_r+0x1c>
 8007258:	42a9      	cmp	r1, r5
 800725a:	d904      	bls.n	8007266 <_malloc_r+0x26>
 800725c:	230c      	movs	r3, #12
 800725e:	6033      	str	r3, [r6, #0]
 8007260:	2000      	movs	r0, #0
 8007262:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007266:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800733c <_malloc_r+0xfc>
 800726a:	f000 f869 	bl	8007340 <__malloc_lock>
 800726e:	f8d8 3000 	ldr.w	r3, [r8]
 8007272:	461c      	mov	r4, r3
 8007274:	bb44      	cbnz	r4, 80072c8 <_malloc_r+0x88>
 8007276:	4629      	mov	r1, r5
 8007278:	4630      	mov	r0, r6
 800727a:	f7ff ffbf 	bl	80071fc <sbrk_aligned>
 800727e:	1c43      	adds	r3, r0, #1
 8007280:	4604      	mov	r4, r0
 8007282:	d158      	bne.n	8007336 <_malloc_r+0xf6>
 8007284:	f8d8 4000 	ldr.w	r4, [r8]
 8007288:	4627      	mov	r7, r4
 800728a:	2f00      	cmp	r7, #0
 800728c:	d143      	bne.n	8007316 <_malloc_r+0xd6>
 800728e:	2c00      	cmp	r4, #0
 8007290:	d04b      	beq.n	800732a <_malloc_r+0xea>
 8007292:	6823      	ldr	r3, [r4, #0]
 8007294:	4639      	mov	r1, r7
 8007296:	4630      	mov	r0, r6
 8007298:	eb04 0903 	add.w	r9, r4, r3
 800729c:	f000 fb5c 	bl	8007958 <_sbrk_r>
 80072a0:	4581      	cmp	r9, r0
 80072a2:	d142      	bne.n	800732a <_malloc_r+0xea>
 80072a4:	6821      	ldr	r1, [r4, #0]
 80072a6:	1a6d      	subs	r5, r5, r1
 80072a8:	4629      	mov	r1, r5
 80072aa:	4630      	mov	r0, r6
 80072ac:	f7ff ffa6 	bl	80071fc <sbrk_aligned>
 80072b0:	3001      	adds	r0, #1
 80072b2:	d03a      	beq.n	800732a <_malloc_r+0xea>
 80072b4:	6823      	ldr	r3, [r4, #0]
 80072b6:	442b      	add	r3, r5
 80072b8:	6023      	str	r3, [r4, #0]
 80072ba:	f8d8 3000 	ldr.w	r3, [r8]
 80072be:	685a      	ldr	r2, [r3, #4]
 80072c0:	bb62      	cbnz	r2, 800731c <_malloc_r+0xdc>
 80072c2:	f8c8 7000 	str.w	r7, [r8]
 80072c6:	e00f      	b.n	80072e8 <_malloc_r+0xa8>
 80072c8:	6822      	ldr	r2, [r4, #0]
 80072ca:	1b52      	subs	r2, r2, r5
 80072cc:	d420      	bmi.n	8007310 <_malloc_r+0xd0>
 80072ce:	2a0b      	cmp	r2, #11
 80072d0:	d917      	bls.n	8007302 <_malloc_r+0xc2>
 80072d2:	1961      	adds	r1, r4, r5
 80072d4:	42a3      	cmp	r3, r4
 80072d6:	6025      	str	r5, [r4, #0]
 80072d8:	bf18      	it	ne
 80072da:	6059      	strne	r1, [r3, #4]
 80072dc:	6863      	ldr	r3, [r4, #4]
 80072de:	bf08      	it	eq
 80072e0:	f8c8 1000 	streq.w	r1, [r8]
 80072e4:	5162      	str	r2, [r4, r5]
 80072e6:	604b      	str	r3, [r1, #4]
 80072e8:	4630      	mov	r0, r6
 80072ea:	f000 f82f 	bl	800734c <__malloc_unlock>
 80072ee:	f104 000b 	add.w	r0, r4, #11
 80072f2:	1d23      	adds	r3, r4, #4
 80072f4:	f020 0007 	bic.w	r0, r0, #7
 80072f8:	1ac2      	subs	r2, r0, r3
 80072fa:	bf1c      	itt	ne
 80072fc:	1a1b      	subne	r3, r3, r0
 80072fe:	50a3      	strne	r3, [r4, r2]
 8007300:	e7af      	b.n	8007262 <_malloc_r+0x22>
 8007302:	6862      	ldr	r2, [r4, #4]
 8007304:	42a3      	cmp	r3, r4
 8007306:	bf0c      	ite	eq
 8007308:	f8c8 2000 	streq.w	r2, [r8]
 800730c:	605a      	strne	r2, [r3, #4]
 800730e:	e7eb      	b.n	80072e8 <_malloc_r+0xa8>
 8007310:	4623      	mov	r3, r4
 8007312:	6864      	ldr	r4, [r4, #4]
 8007314:	e7ae      	b.n	8007274 <_malloc_r+0x34>
 8007316:	463c      	mov	r4, r7
 8007318:	687f      	ldr	r7, [r7, #4]
 800731a:	e7b6      	b.n	800728a <_malloc_r+0x4a>
 800731c:	461a      	mov	r2, r3
 800731e:	685b      	ldr	r3, [r3, #4]
 8007320:	42a3      	cmp	r3, r4
 8007322:	d1fb      	bne.n	800731c <_malloc_r+0xdc>
 8007324:	2300      	movs	r3, #0
 8007326:	6053      	str	r3, [r2, #4]
 8007328:	e7de      	b.n	80072e8 <_malloc_r+0xa8>
 800732a:	230c      	movs	r3, #12
 800732c:	6033      	str	r3, [r6, #0]
 800732e:	4630      	mov	r0, r6
 8007330:	f000 f80c 	bl	800734c <__malloc_unlock>
 8007334:	e794      	b.n	8007260 <_malloc_r+0x20>
 8007336:	6005      	str	r5, [r0, #0]
 8007338:	e7d6      	b.n	80072e8 <_malloc_r+0xa8>
 800733a:	bf00      	nop
 800733c:	20000468 	.word	0x20000468

08007340 <__malloc_lock>:
 8007340:	4801      	ldr	r0, [pc, #4]	@ (8007348 <__malloc_lock+0x8>)
 8007342:	f7ff bf0f 	b.w	8007164 <__retarget_lock_acquire_recursive>
 8007346:	bf00      	nop
 8007348:	20000460 	.word	0x20000460

0800734c <__malloc_unlock>:
 800734c:	4801      	ldr	r0, [pc, #4]	@ (8007354 <__malloc_unlock+0x8>)
 800734e:	f7ff bf0a 	b.w	8007166 <__retarget_lock_release_recursive>
 8007352:	bf00      	nop
 8007354:	20000460 	.word	0x20000460

08007358 <__ssputs_r>:
 8007358:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800735c:	688e      	ldr	r6, [r1, #8]
 800735e:	461f      	mov	r7, r3
 8007360:	42be      	cmp	r6, r7
 8007362:	680b      	ldr	r3, [r1, #0]
 8007364:	4682      	mov	sl, r0
 8007366:	460c      	mov	r4, r1
 8007368:	4690      	mov	r8, r2
 800736a:	d82d      	bhi.n	80073c8 <__ssputs_r+0x70>
 800736c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007370:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007374:	d026      	beq.n	80073c4 <__ssputs_r+0x6c>
 8007376:	6965      	ldr	r5, [r4, #20]
 8007378:	6909      	ldr	r1, [r1, #16]
 800737a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800737e:	eba3 0901 	sub.w	r9, r3, r1
 8007382:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007386:	1c7b      	adds	r3, r7, #1
 8007388:	444b      	add	r3, r9
 800738a:	106d      	asrs	r5, r5, #1
 800738c:	429d      	cmp	r5, r3
 800738e:	bf38      	it	cc
 8007390:	461d      	movcc	r5, r3
 8007392:	0553      	lsls	r3, r2, #21
 8007394:	d527      	bpl.n	80073e6 <__ssputs_r+0x8e>
 8007396:	4629      	mov	r1, r5
 8007398:	f7ff ff52 	bl	8007240 <_malloc_r>
 800739c:	4606      	mov	r6, r0
 800739e:	b360      	cbz	r0, 80073fa <__ssputs_r+0xa2>
 80073a0:	6921      	ldr	r1, [r4, #16]
 80073a2:	464a      	mov	r2, r9
 80073a4:	f000 fae8 	bl	8007978 <memcpy>
 80073a8:	89a3      	ldrh	r3, [r4, #12]
 80073aa:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80073ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80073b2:	81a3      	strh	r3, [r4, #12]
 80073b4:	6126      	str	r6, [r4, #16]
 80073b6:	6165      	str	r5, [r4, #20]
 80073b8:	444e      	add	r6, r9
 80073ba:	eba5 0509 	sub.w	r5, r5, r9
 80073be:	6026      	str	r6, [r4, #0]
 80073c0:	60a5      	str	r5, [r4, #8]
 80073c2:	463e      	mov	r6, r7
 80073c4:	42be      	cmp	r6, r7
 80073c6:	d900      	bls.n	80073ca <__ssputs_r+0x72>
 80073c8:	463e      	mov	r6, r7
 80073ca:	6820      	ldr	r0, [r4, #0]
 80073cc:	4632      	mov	r2, r6
 80073ce:	4641      	mov	r1, r8
 80073d0:	f000 faa8 	bl	8007924 <memmove>
 80073d4:	68a3      	ldr	r3, [r4, #8]
 80073d6:	1b9b      	subs	r3, r3, r6
 80073d8:	60a3      	str	r3, [r4, #8]
 80073da:	6823      	ldr	r3, [r4, #0]
 80073dc:	4433      	add	r3, r6
 80073de:	6023      	str	r3, [r4, #0]
 80073e0:	2000      	movs	r0, #0
 80073e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80073e6:	462a      	mov	r2, r5
 80073e8:	f000 fad4 	bl	8007994 <_realloc_r>
 80073ec:	4606      	mov	r6, r0
 80073ee:	2800      	cmp	r0, #0
 80073f0:	d1e0      	bne.n	80073b4 <__ssputs_r+0x5c>
 80073f2:	6921      	ldr	r1, [r4, #16]
 80073f4:	4650      	mov	r0, sl
 80073f6:	f7ff feb7 	bl	8007168 <_free_r>
 80073fa:	230c      	movs	r3, #12
 80073fc:	f8ca 3000 	str.w	r3, [sl]
 8007400:	89a3      	ldrh	r3, [r4, #12]
 8007402:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007406:	81a3      	strh	r3, [r4, #12]
 8007408:	f04f 30ff 	mov.w	r0, #4294967295
 800740c:	e7e9      	b.n	80073e2 <__ssputs_r+0x8a>
	...

08007410 <_svfiprintf_r>:
 8007410:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007414:	4698      	mov	r8, r3
 8007416:	898b      	ldrh	r3, [r1, #12]
 8007418:	061b      	lsls	r3, r3, #24
 800741a:	b09d      	sub	sp, #116	@ 0x74
 800741c:	4607      	mov	r7, r0
 800741e:	460d      	mov	r5, r1
 8007420:	4614      	mov	r4, r2
 8007422:	d510      	bpl.n	8007446 <_svfiprintf_r+0x36>
 8007424:	690b      	ldr	r3, [r1, #16]
 8007426:	b973      	cbnz	r3, 8007446 <_svfiprintf_r+0x36>
 8007428:	2140      	movs	r1, #64	@ 0x40
 800742a:	f7ff ff09 	bl	8007240 <_malloc_r>
 800742e:	6028      	str	r0, [r5, #0]
 8007430:	6128      	str	r0, [r5, #16]
 8007432:	b930      	cbnz	r0, 8007442 <_svfiprintf_r+0x32>
 8007434:	230c      	movs	r3, #12
 8007436:	603b      	str	r3, [r7, #0]
 8007438:	f04f 30ff 	mov.w	r0, #4294967295
 800743c:	b01d      	add	sp, #116	@ 0x74
 800743e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007442:	2340      	movs	r3, #64	@ 0x40
 8007444:	616b      	str	r3, [r5, #20]
 8007446:	2300      	movs	r3, #0
 8007448:	9309      	str	r3, [sp, #36]	@ 0x24
 800744a:	2320      	movs	r3, #32
 800744c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007450:	f8cd 800c 	str.w	r8, [sp, #12]
 8007454:	2330      	movs	r3, #48	@ 0x30
 8007456:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80075f4 <_svfiprintf_r+0x1e4>
 800745a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800745e:	f04f 0901 	mov.w	r9, #1
 8007462:	4623      	mov	r3, r4
 8007464:	469a      	mov	sl, r3
 8007466:	f813 2b01 	ldrb.w	r2, [r3], #1
 800746a:	b10a      	cbz	r2, 8007470 <_svfiprintf_r+0x60>
 800746c:	2a25      	cmp	r2, #37	@ 0x25
 800746e:	d1f9      	bne.n	8007464 <_svfiprintf_r+0x54>
 8007470:	ebba 0b04 	subs.w	fp, sl, r4
 8007474:	d00b      	beq.n	800748e <_svfiprintf_r+0x7e>
 8007476:	465b      	mov	r3, fp
 8007478:	4622      	mov	r2, r4
 800747a:	4629      	mov	r1, r5
 800747c:	4638      	mov	r0, r7
 800747e:	f7ff ff6b 	bl	8007358 <__ssputs_r>
 8007482:	3001      	adds	r0, #1
 8007484:	f000 80a7 	beq.w	80075d6 <_svfiprintf_r+0x1c6>
 8007488:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800748a:	445a      	add	r2, fp
 800748c:	9209      	str	r2, [sp, #36]	@ 0x24
 800748e:	f89a 3000 	ldrb.w	r3, [sl]
 8007492:	2b00      	cmp	r3, #0
 8007494:	f000 809f 	beq.w	80075d6 <_svfiprintf_r+0x1c6>
 8007498:	2300      	movs	r3, #0
 800749a:	f04f 32ff 	mov.w	r2, #4294967295
 800749e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80074a2:	f10a 0a01 	add.w	sl, sl, #1
 80074a6:	9304      	str	r3, [sp, #16]
 80074a8:	9307      	str	r3, [sp, #28]
 80074aa:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80074ae:	931a      	str	r3, [sp, #104]	@ 0x68
 80074b0:	4654      	mov	r4, sl
 80074b2:	2205      	movs	r2, #5
 80074b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80074b8:	484e      	ldr	r0, [pc, #312]	@ (80075f4 <_svfiprintf_r+0x1e4>)
 80074ba:	f7f8 fe89 	bl	80001d0 <memchr>
 80074be:	9a04      	ldr	r2, [sp, #16]
 80074c0:	b9d8      	cbnz	r0, 80074fa <_svfiprintf_r+0xea>
 80074c2:	06d0      	lsls	r0, r2, #27
 80074c4:	bf44      	itt	mi
 80074c6:	2320      	movmi	r3, #32
 80074c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80074cc:	0711      	lsls	r1, r2, #28
 80074ce:	bf44      	itt	mi
 80074d0:	232b      	movmi	r3, #43	@ 0x2b
 80074d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80074d6:	f89a 3000 	ldrb.w	r3, [sl]
 80074da:	2b2a      	cmp	r3, #42	@ 0x2a
 80074dc:	d015      	beq.n	800750a <_svfiprintf_r+0xfa>
 80074de:	9a07      	ldr	r2, [sp, #28]
 80074e0:	4654      	mov	r4, sl
 80074e2:	2000      	movs	r0, #0
 80074e4:	f04f 0c0a 	mov.w	ip, #10
 80074e8:	4621      	mov	r1, r4
 80074ea:	f811 3b01 	ldrb.w	r3, [r1], #1
 80074ee:	3b30      	subs	r3, #48	@ 0x30
 80074f0:	2b09      	cmp	r3, #9
 80074f2:	d94b      	bls.n	800758c <_svfiprintf_r+0x17c>
 80074f4:	b1b0      	cbz	r0, 8007524 <_svfiprintf_r+0x114>
 80074f6:	9207      	str	r2, [sp, #28]
 80074f8:	e014      	b.n	8007524 <_svfiprintf_r+0x114>
 80074fa:	eba0 0308 	sub.w	r3, r0, r8
 80074fe:	fa09 f303 	lsl.w	r3, r9, r3
 8007502:	4313      	orrs	r3, r2
 8007504:	9304      	str	r3, [sp, #16]
 8007506:	46a2      	mov	sl, r4
 8007508:	e7d2      	b.n	80074b0 <_svfiprintf_r+0xa0>
 800750a:	9b03      	ldr	r3, [sp, #12]
 800750c:	1d19      	adds	r1, r3, #4
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	9103      	str	r1, [sp, #12]
 8007512:	2b00      	cmp	r3, #0
 8007514:	bfbb      	ittet	lt
 8007516:	425b      	neglt	r3, r3
 8007518:	f042 0202 	orrlt.w	r2, r2, #2
 800751c:	9307      	strge	r3, [sp, #28]
 800751e:	9307      	strlt	r3, [sp, #28]
 8007520:	bfb8      	it	lt
 8007522:	9204      	strlt	r2, [sp, #16]
 8007524:	7823      	ldrb	r3, [r4, #0]
 8007526:	2b2e      	cmp	r3, #46	@ 0x2e
 8007528:	d10a      	bne.n	8007540 <_svfiprintf_r+0x130>
 800752a:	7863      	ldrb	r3, [r4, #1]
 800752c:	2b2a      	cmp	r3, #42	@ 0x2a
 800752e:	d132      	bne.n	8007596 <_svfiprintf_r+0x186>
 8007530:	9b03      	ldr	r3, [sp, #12]
 8007532:	1d1a      	adds	r2, r3, #4
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	9203      	str	r2, [sp, #12]
 8007538:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800753c:	3402      	adds	r4, #2
 800753e:	9305      	str	r3, [sp, #20]
 8007540:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007604 <_svfiprintf_r+0x1f4>
 8007544:	7821      	ldrb	r1, [r4, #0]
 8007546:	2203      	movs	r2, #3
 8007548:	4650      	mov	r0, sl
 800754a:	f7f8 fe41 	bl	80001d0 <memchr>
 800754e:	b138      	cbz	r0, 8007560 <_svfiprintf_r+0x150>
 8007550:	9b04      	ldr	r3, [sp, #16]
 8007552:	eba0 000a 	sub.w	r0, r0, sl
 8007556:	2240      	movs	r2, #64	@ 0x40
 8007558:	4082      	lsls	r2, r0
 800755a:	4313      	orrs	r3, r2
 800755c:	3401      	adds	r4, #1
 800755e:	9304      	str	r3, [sp, #16]
 8007560:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007564:	4824      	ldr	r0, [pc, #144]	@ (80075f8 <_svfiprintf_r+0x1e8>)
 8007566:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800756a:	2206      	movs	r2, #6
 800756c:	f7f8 fe30 	bl	80001d0 <memchr>
 8007570:	2800      	cmp	r0, #0
 8007572:	d036      	beq.n	80075e2 <_svfiprintf_r+0x1d2>
 8007574:	4b21      	ldr	r3, [pc, #132]	@ (80075fc <_svfiprintf_r+0x1ec>)
 8007576:	bb1b      	cbnz	r3, 80075c0 <_svfiprintf_r+0x1b0>
 8007578:	9b03      	ldr	r3, [sp, #12]
 800757a:	3307      	adds	r3, #7
 800757c:	f023 0307 	bic.w	r3, r3, #7
 8007580:	3308      	adds	r3, #8
 8007582:	9303      	str	r3, [sp, #12]
 8007584:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007586:	4433      	add	r3, r6
 8007588:	9309      	str	r3, [sp, #36]	@ 0x24
 800758a:	e76a      	b.n	8007462 <_svfiprintf_r+0x52>
 800758c:	fb0c 3202 	mla	r2, ip, r2, r3
 8007590:	460c      	mov	r4, r1
 8007592:	2001      	movs	r0, #1
 8007594:	e7a8      	b.n	80074e8 <_svfiprintf_r+0xd8>
 8007596:	2300      	movs	r3, #0
 8007598:	3401      	adds	r4, #1
 800759a:	9305      	str	r3, [sp, #20]
 800759c:	4619      	mov	r1, r3
 800759e:	f04f 0c0a 	mov.w	ip, #10
 80075a2:	4620      	mov	r0, r4
 80075a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80075a8:	3a30      	subs	r2, #48	@ 0x30
 80075aa:	2a09      	cmp	r2, #9
 80075ac:	d903      	bls.n	80075b6 <_svfiprintf_r+0x1a6>
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d0c6      	beq.n	8007540 <_svfiprintf_r+0x130>
 80075b2:	9105      	str	r1, [sp, #20]
 80075b4:	e7c4      	b.n	8007540 <_svfiprintf_r+0x130>
 80075b6:	fb0c 2101 	mla	r1, ip, r1, r2
 80075ba:	4604      	mov	r4, r0
 80075bc:	2301      	movs	r3, #1
 80075be:	e7f0      	b.n	80075a2 <_svfiprintf_r+0x192>
 80075c0:	ab03      	add	r3, sp, #12
 80075c2:	9300      	str	r3, [sp, #0]
 80075c4:	462a      	mov	r2, r5
 80075c6:	4b0e      	ldr	r3, [pc, #56]	@ (8007600 <_svfiprintf_r+0x1f0>)
 80075c8:	a904      	add	r1, sp, #16
 80075ca:	4638      	mov	r0, r7
 80075cc:	f3af 8000 	nop.w
 80075d0:	1c42      	adds	r2, r0, #1
 80075d2:	4606      	mov	r6, r0
 80075d4:	d1d6      	bne.n	8007584 <_svfiprintf_r+0x174>
 80075d6:	89ab      	ldrh	r3, [r5, #12]
 80075d8:	065b      	lsls	r3, r3, #25
 80075da:	f53f af2d 	bmi.w	8007438 <_svfiprintf_r+0x28>
 80075de:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80075e0:	e72c      	b.n	800743c <_svfiprintf_r+0x2c>
 80075e2:	ab03      	add	r3, sp, #12
 80075e4:	9300      	str	r3, [sp, #0]
 80075e6:	462a      	mov	r2, r5
 80075e8:	4b05      	ldr	r3, [pc, #20]	@ (8007600 <_svfiprintf_r+0x1f0>)
 80075ea:	a904      	add	r1, sp, #16
 80075ec:	4638      	mov	r0, r7
 80075ee:	f000 f879 	bl	80076e4 <_printf_i>
 80075f2:	e7ed      	b.n	80075d0 <_svfiprintf_r+0x1c0>
 80075f4:	08007c94 	.word	0x08007c94
 80075f8:	08007c9e 	.word	0x08007c9e
 80075fc:	00000000 	.word	0x00000000
 8007600:	08007359 	.word	0x08007359
 8007604:	08007c9a 	.word	0x08007c9a

08007608 <_printf_common>:
 8007608:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800760c:	4616      	mov	r6, r2
 800760e:	4698      	mov	r8, r3
 8007610:	688a      	ldr	r2, [r1, #8]
 8007612:	690b      	ldr	r3, [r1, #16]
 8007614:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007618:	4293      	cmp	r3, r2
 800761a:	bfb8      	it	lt
 800761c:	4613      	movlt	r3, r2
 800761e:	6033      	str	r3, [r6, #0]
 8007620:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007624:	4607      	mov	r7, r0
 8007626:	460c      	mov	r4, r1
 8007628:	b10a      	cbz	r2, 800762e <_printf_common+0x26>
 800762a:	3301      	adds	r3, #1
 800762c:	6033      	str	r3, [r6, #0]
 800762e:	6823      	ldr	r3, [r4, #0]
 8007630:	0699      	lsls	r1, r3, #26
 8007632:	bf42      	ittt	mi
 8007634:	6833      	ldrmi	r3, [r6, #0]
 8007636:	3302      	addmi	r3, #2
 8007638:	6033      	strmi	r3, [r6, #0]
 800763a:	6825      	ldr	r5, [r4, #0]
 800763c:	f015 0506 	ands.w	r5, r5, #6
 8007640:	d106      	bne.n	8007650 <_printf_common+0x48>
 8007642:	f104 0a19 	add.w	sl, r4, #25
 8007646:	68e3      	ldr	r3, [r4, #12]
 8007648:	6832      	ldr	r2, [r6, #0]
 800764a:	1a9b      	subs	r3, r3, r2
 800764c:	42ab      	cmp	r3, r5
 800764e:	dc26      	bgt.n	800769e <_printf_common+0x96>
 8007650:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007654:	6822      	ldr	r2, [r4, #0]
 8007656:	3b00      	subs	r3, #0
 8007658:	bf18      	it	ne
 800765a:	2301      	movne	r3, #1
 800765c:	0692      	lsls	r2, r2, #26
 800765e:	d42b      	bmi.n	80076b8 <_printf_common+0xb0>
 8007660:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007664:	4641      	mov	r1, r8
 8007666:	4638      	mov	r0, r7
 8007668:	47c8      	blx	r9
 800766a:	3001      	adds	r0, #1
 800766c:	d01e      	beq.n	80076ac <_printf_common+0xa4>
 800766e:	6823      	ldr	r3, [r4, #0]
 8007670:	6922      	ldr	r2, [r4, #16]
 8007672:	f003 0306 	and.w	r3, r3, #6
 8007676:	2b04      	cmp	r3, #4
 8007678:	bf02      	ittt	eq
 800767a:	68e5      	ldreq	r5, [r4, #12]
 800767c:	6833      	ldreq	r3, [r6, #0]
 800767e:	1aed      	subeq	r5, r5, r3
 8007680:	68a3      	ldr	r3, [r4, #8]
 8007682:	bf0c      	ite	eq
 8007684:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007688:	2500      	movne	r5, #0
 800768a:	4293      	cmp	r3, r2
 800768c:	bfc4      	itt	gt
 800768e:	1a9b      	subgt	r3, r3, r2
 8007690:	18ed      	addgt	r5, r5, r3
 8007692:	2600      	movs	r6, #0
 8007694:	341a      	adds	r4, #26
 8007696:	42b5      	cmp	r5, r6
 8007698:	d11a      	bne.n	80076d0 <_printf_common+0xc8>
 800769a:	2000      	movs	r0, #0
 800769c:	e008      	b.n	80076b0 <_printf_common+0xa8>
 800769e:	2301      	movs	r3, #1
 80076a0:	4652      	mov	r2, sl
 80076a2:	4641      	mov	r1, r8
 80076a4:	4638      	mov	r0, r7
 80076a6:	47c8      	blx	r9
 80076a8:	3001      	adds	r0, #1
 80076aa:	d103      	bne.n	80076b4 <_printf_common+0xac>
 80076ac:	f04f 30ff 	mov.w	r0, #4294967295
 80076b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80076b4:	3501      	adds	r5, #1
 80076b6:	e7c6      	b.n	8007646 <_printf_common+0x3e>
 80076b8:	18e1      	adds	r1, r4, r3
 80076ba:	1c5a      	adds	r2, r3, #1
 80076bc:	2030      	movs	r0, #48	@ 0x30
 80076be:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80076c2:	4422      	add	r2, r4
 80076c4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80076c8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80076cc:	3302      	adds	r3, #2
 80076ce:	e7c7      	b.n	8007660 <_printf_common+0x58>
 80076d0:	2301      	movs	r3, #1
 80076d2:	4622      	mov	r2, r4
 80076d4:	4641      	mov	r1, r8
 80076d6:	4638      	mov	r0, r7
 80076d8:	47c8      	blx	r9
 80076da:	3001      	adds	r0, #1
 80076dc:	d0e6      	beq.n	80076ac <_printf_common+0xa4>
 80076de:	3601      	adds	r6, #1
 80076e0:	e7d9      	b.n	8007696 <_printf_common+0x8e>
	...

080076e4 <_printf_i>:
 80076e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80076e8:	7e0f      	ldrb	r7, [r1, #24]
 80076ea:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80076ec:	2f78      	cmp	r7, #120	@ 0x78
 80076ee:	4691      	mov	r9, r2
 80076f0:	4680      	mov	r8, r0
 80076f2:	460c      	mov	r4, r1
 80076f4:	469a      	mov	sl, r3
 80076f6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80076fa:	d807      	bhi.n	800770c <_printf_i+0x28>
 80076fc:	2f62      	cmp	r7, #98	@ 0x62
 80076fe:	d80a      	bhi.n	8007716 <_printf_i+0x32>
 8007700:	2f00      	cmp	r7, #0
 8007702:	f000 80d2 	beq.w	80078aa <_printf_i+0x1c6>
 8007706:	2f58      	cmp	r7, #88	@ 0x58
 8007708:	f000 80b9 	beq.w	800787e <_printf_i+0x19a>
 800770c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007710:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007714:	e03a      	b.n	800778c <_printf_i+0xa8>
 8007716:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800771a:	2b15      	cmp	r3, #21
 800771c:	d8f6      	bhi.n	800770c <_printf_i+0x28>
 800771e:	a101      	add	r1, pc, #4	@ (adr r1, 8007724 <_printf_i+0x40>)
 8007720:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007724:	0800777d 	.word	0x0800777d
 8007728:	08007791 	.word	0x08007791
 800772c:	0800770d 	.word	0x0800770d
 8007730:	0800770d 	.word	0x0800770d
 8007734:	0800770d 	.word	0x0800770d
 8007738:	0800770d 	.word	0x0800770d
 800773c:	08007791 	.word	0x08007791
 8007740:	0800770d 	.word	0x0800770d
 8007744:	0800770d 	.word	0x0800770d
 8007748:	0800770d 	.word	0x0800770d
 800774c:	0800770d 	.word	0x0800770d
 8007750:	08007891 	.word	0x08007891
 8007754:	080077bb 	.word	0x080077bb
 8007758:	0800784b 	.word	0x0800784b
 800775c:	0800770d 	.word	0x0800770d
 8007760:	0800770d 	.word	0x0800770d
 8007764:	080078b3 	.word	0x080078b3
 8007768:	0800770d 	.word	0x0800770d
 800776c:	080077bb 	.word	0x080077bb
 8007770:	0800770d 	.word	0x0800770d
 8007774:	0800770d 	.word	0x0800770d
 8007778:	08007853 	.word	0x08007853
 800777c:	6833      	ldr	r3, [r6, #0]
 800777e:	1d1a      	adds	r2, r3, #4
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	6032      	str	r2, [r6, #0]
 8007784:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007788:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800778c:	2301      	movs	r3, #1
 800778e:	e09d      	b.n	80078cc <_printf_i+0x1e8>
 8007790:	6833      	ldr	r3, [r6, #0]
 8007792:	6820      	ldr	r0, [r4, #0]
 8007794:	1d19      	adds	r1, r3, #4
 8007796:	6031      	str	r1, [r6, #0]
 8007798:	0606      	lsls	r6, r0, #24
 800779a:	d501      	bpl.n	80077a0 <_printf_i+0xbc>
 800779c:	681d      	ldr	r5, [r3, #0]
 800779e:	e003      	b.n	80077a8 <_printf_i+0xc4>
 80077a0:	0645      	lsls	r5, r0, #25
 80077a2:	d5fb      	bpl.n	800779c <_printf_i+0xb8>
 80077a4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80077a8:	2d00      	cmp	r5, #0
 80077aa:	da03      	bge.n	80077b4 <_printf_i+0xd0>
 80077ac:	232d      	movs	r3, #45	@ 0x2d
 80077ae:	426d      	negs	r5, r5
 80077b0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80077b4:	4859      	ldr	r0, [pc, #356]	@ (800791c <_printf_i+0x238>)
 80077b6:	230a      	movs	r3, #10
 80077b8:	e011      	b.n	80077de <_printf_i+0xfa>
 80077ba:	6821      	ldr	r1, [r4, #0]
 80077bc:	6833      	ldr	r3, [r6, #0]
 80077be:	0608      	lsls	r0, r1, #24
 80077c0:	f853 5b04 	ldr.w	r5, [r3], #4
 80077c4:	d402      	bmi.n	80077cc <_printf_i+0xe8>
 80077c6:	0649      	lsls	r1, r1, #25
 80077c8:	bf48      	it	mi
 80077ca:	b2ad      	uxthmi	r5, r5
 80077cc:	2f6f      	cmp	r7, #111	@ 0x6f
 80077ce:	4853      	ldr	r0, [pc, #332]	@ (800791c <_printf_i+0x238>)
 80077d0:	6033      	str	r3, [r6, #0]
 80077d2:	bf14      	ite	ne
 80077d4:	230a      	movne	r3, #10
 80077d6:	2308      	moveq	r3, #8
 80077d8:	2100      	movs	r1, #0
 80077da:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80077de:	6866      	ldr	r6, [r4, #4]
 80077e0:	60a6      	str	r6, [r4, #8]
 80077e2:	2e00      	cmp	r6, #0
 80077e4:	bfa2      	ittt	ge
 80077e6:	6821      	ldrge	r1, [r4, #0]
 80077e8:	f021 0104 	bicge.w	r1, r1, #4
 80077ec:	6021      	strge	r1, [r4, #0]
 80077ee:	b90d      	cbnz	r5, 80077f4 <_printf_i+0x110>
 80077f0:	2e00      	cmp	r6, #0
 80077f2:	d04b      	beq.n	800788c <_printf_i+0x1a8>
 80077f4:	4616      	mov	r6, r2
 80077f6:	fbb5 f1f3 	udiv	r1, r5, r3
 80077fa:	fb03 5711 	mls	r7, r3, r1, r5
 80077fe:	5dc7      	ldrb	r7, [r0, r7]
 8007800:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007804:	462f      	mov	r7, r5
 8007806:	42bb      	cmp	r3, r7
 8007808:	460d      	mov	r5, r1
 800780a:	d9f4      	bls.n	80077f6 <_printf_i+0x112>
 800780c:	2b08      	cmp	r3, #8
 800780e:	d10b      	bne.n	8007828 <_printf_i+0x144>
 8007810:	6823      	ldr	r3, [r4, #0]
 8007812:	07df      	lsls	r7, r3, #31
 8007814:	d508      	bpl.n	8007828 <_printf_i+0x144>
 8007816:	6923      	ldr	r3, [r4, #16]
 8007818:	6861      	ldr	r1, [r4, #4]
 800781a:	4299      	cmp	r1, r3
 800781c:	bfde      	ittt	le
 800781e:	2330      	movle	r3, #48	@ 0x30
 8007820:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007824:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007828:	1b92      	subs	r2, r2, r6
 800782a:	6122      	str	r2, [r4, #16]
 800782c:	f8cd a000 	str.w	sl, [sp]
 8007830:	464b      	mov	r3, r9
 8007832:	aa03      	add	r2, sp, #12
 8007834:	4621      	mov	r1, r4
 8007836:	4640      	mov	r0, r8
 8007838:	f7ff fee6 	bl	8007608 <_printf_common>
 800783c:	3001      	adds	r0, #1
 800783e:	d14a      	bne.n	80078d6 <_printf_i+0x1f2>
 8007840:	f04f 30ff 	mov.w	r0, #4294967295
 8007844:	b004      	add	sp, #16
 8007846:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800784a:	6823      	ldr	r3, [r4, #0]
 800784c:	f043 0320 	orr.w	r3, r3, #32
 8007850:	6023      	str	r3, [r4, #0]
 8007852:	4833      	ldr	r0, [pc, #204]	@ (8007920 <_printf_i+0x23c>)
 8007854:	2778      	movs	r7, #120	@ 0x78
 8007856:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800785a:	6823      	ldr	r3, [r4, #0]
 800785c:	6831      	ldr	r1, [r6, #0]
 800785e:	061f      	lsls	r7, r3, #24
 8007860:	f851 5b04 	ldr.w	r5, [r1], #4
 8007864:	d402      	bmi.n	800786c <_printf_i+0x188>
 8007866:	065f      	lsls	r7, r3, #25
 8007868:	bf48      	it	mi
 800786a:	b2ad      	uxthmi	r5, r5
 800786c:	6031      	str	r1, [r6, #0]
 800786e:	07d9      	lsls	r1, r3, #31
 8007870:	bf44      	itt	mi
 8007872:	f043 0320 	orrmi.w	r3, r3, #32
 8007876:	6023      	strmi	r3, [r4, #0]
 8007878:	b11d      	cbz	r5, 8007882 <_printf_i+0x19e>
 800787a:	2310      	movs	r3, #16
 800787c:	e7ac      	b.n	80077d8 <_printf_i+0xf4>
 800787e:	4827      	ldr	r0, [pc, #156]	@ (800791c <_printf_i+0x238>)
 8007880:	e7e9      	b.n	8007856 <_printf_i+0x172>
 8007882:	6823      	ldr	r3, [r4, #0]
 8007884:	f023 0320 	bic.w	r3, r3, #32
 8007888:	6023      	str	r3, [r4, #0]
 800788a:	e7f6      	b.n	800787a <_printf_i+0x196>
 800788c:	4616      	mov	r6, r2
 800788e:	e7bd      	b.n	800780c <_printf_i+0x128>
 8007890:	6833      	ldr	r3, [r6, #0]
 8007892:	6825      	ldr	r5, [r4, #0]
 8007894:	6961      	ldr	r1, [r4, #20]
 8007896:	1d18      	adds	r0, r3, #4
 8007898:	6030      	str	r0, [r6, #0]
 800789a:	062e      	lsls	r6, r5, #24
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	d501      	bpl.n	80078a4 <_printf_i+0x1c0>
 80078a0:	6019      	str	r1, [r3, #0]
 80078a2:	e002      	b.n	80078aa <_printf_i+0x1c6>
 80078a4:	0668      	lsls	r0, r5, #25
 80078a6:	d5fb      	bpl.n	80078a0 <_printf_i+0x1bc>
 80078a8:	8019      	strh	r1, [r3, #0]
 80078aa:	2300      	movs	r3, #0
 80078ac:	6123      	str	r3, [r4, #16]
 80078ae:	4616      	mov	r6, r2
 80078b0:	e7bc      	b.n	800782c <_printf_i+0x148>
 80078b2:	6833      	ldr	r3, [r6, #0]
 80078b4:	1d1a      	adds	r2, r3, #4
 80078b6:	6032      	str	r2, [r6, #0]
 80078b8:	681e      	ldr	r6, [r3, #0]
 80078ba:	6862      	ldr	r2, [r4, #4]
 80078bc:	2100      	movs	r1, #0
 80078be:	4630      	mov	r0, r6
 80078c0:	f7f8 fc86 	bl	80001d0 <memchr>
 80078c4:	b108      	cbz	r0, 80078ca <_printf_i+0x1e6>
 80078c6:	1b80      	subs	r0, r0, r6
 80078c8:	6060      	str	r0, [r4, #4]
 80078ca:	6863      	ldr	r3, [r4, #4]
 80078cc:	6123      	str	r3, [r4, #16]
 80078ce:	2300      	movs	r3, #0
 80078d0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80078d4:	e7aa      	b.n	800782c <_printf_i+0x148>
 80078d6:	6923      	ldr	r3, [r4, #16]
 80078d8:	4632      	mov	r2, r6
 80078da:	4649      	mov	r1, r9
 80078dc:	4640      	mov	r0, r8
 80078de:	47d0      	blx	sl
 80078e0:	3001      	adds	r0, #1
 80078e2:	d0ad      	beq.n	8007840 <_printf_i+0x15c>
 80078e4:	6823      	ldr	r3, [r4, #0]
 80078e6:	079b      	lsls	r3, r3, #30
 80078e8:	d413      	bmi.n	8007912 <_printf_i+0x22e>
 80078ea:	68e0      	ldr	r0, [r4, #12]
 80078ec:	9b03      	ldr	r3, [sp, #12]
 80078ee:	4298      	cmp	r0, r3
 80078f0:	bfb8      	it	lt
 80078f2:	4618      	movlt	r0, r3
 80078f4:	e7a6      	b.n	8007844 <_printf_i+0x160>
 80078f6:	2301      	movs	r3, #1
 80078f8:	4632      	mov	r2, r6
 80078fa:	4649      	mov	r1, r9
 80078fc:	4640      	mov	r0, r8
 80078fe:	47d0      	blx	sl
 8007900:	3001      	adds	r0, #1
 8007902:	d09d      	beq.n	8007840 <_printf_i+0x15c>
 8007904:	3501      	adds	r5, #1
 8007906:	68e3      	ldr	r3, [r4, #12]
 8007908:	9903      	ldr	r1, [sp, #12]
 800790a:	1a5b      	subs	r3, r3, r1
 800790c:	42ab      	cmp	r3, r5
 800790e:	dcf2      	bgt.n	80078f6 <_printf_i+0x212>
 8007910:	e7eb      	b.n	80078ea <_printf_i+0x206>
 8007912:	2500      	movs	r5, #0
 8007914:	f104 0619 	add.w	r6, r4, #25
 8007918:	e7f5      	b.n	8007906 <_printf_i+0x222>
 800791a:	bf00      	nop
 800791c:	08007ca5 	.word	0x08007ca5
 8007920:	08007cb6 	.word	0x08007cb6

08007924 <memmove>:
 8007924:	4288      	cmp	r0, r1
 8007926:	b510      	push	{r4, lr}
 8007928:	eb01 0402 	add.w	r4, r1, r2
 800792c:	d902      	bls.n	8007934 <memmove+0x10>
 800792e:	4284      	cmp	r4, r0
 8007930:	4623      	mov	r3, r4
 8007932:	d807      	bhi.n	8007944 <memmove+0x20>
 8007934:	1e43      	subs	r3, r0, #1
 8007936:	42a1      	cmp	r1, r4
 8007938:	d008      	beq.n	800794c <memmove+0x28>
 800793a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800793e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007942:	e7f8      	b.n	8007936 <memmove+0x12>
 8007944:	4402      	add	r2, r0
 8007946:	4601      	mov	r1, r0
 8007948:	428a      	cmp	r2, r1
 800794a:	d100      	bne.n	800794e <memmove+0x2a>
 800794c:	bd10      	pop	{r4, pc}
 800794e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007952:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007956:	e7f7      	b.n	8007948 <memmove+0x24>

08007958 <_sbrk_r>:
 8007958:	b538      	push	{r3, r4, r5, lr}
 800795a:	4d06      	ldr	r5, [pc, #24]	@ (8007974 <_sbrk_r+0x1c>)
 800795c:	2300      	movs	r3, #0
 800795e:	4604      	mov	r4, r0
 8007960:	4608      	mov	r0, r1
 8007962:	602b      	str	r3, [r5, #0]
 8007964:	f7fc fa54 	bl	8003e10 <_sbrk>
 8007968:	1c43      	adds	r3, r0, #1
 800796a:	d102      	bne.n	8007972 <_sbrk_r+0x1a>
 800796c:	682b      	ldr	r3, [r5, #0]
 800796e:	b103      	cbz	r3, 8007972 <_sbrk_r+0x1a>
 8007970:	6023      	str	r3, [r4, #0]
 8007972:	bd38      	pop	{r3, r4, r5, pc}
 8007974:	2000045c 	.word	0x2000045c

08007978 <memcpy>:
 8007978:	440a      	add	r2, r1
 800797a:	4291      	cmp	r1, r2
 800797c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007980:	d100      	bne.n	8007984 <memcpy+0xc>
 8007982:	4770      	bx	lr
 8007984:	b510      	push	{r4, lr}
 8007986:	f811 4b01 	ldrb.w	r4, [r1], #1
 800798a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800798e:	4291      	cmp	r1, r2
 8007990:	d1f9      	bne.n	8007986 <memcpy+0xe>
 8007992:	bd10      	pop	{r4, pc}

08007994 <_realloc_r>:
 8007994:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007998:	4680      	mov	r8, r0
 800799a:	4615      	mov	r5, r2
 800799c:	460c      	mov	r4, r1
 800799e:	b921      	cbnz	r1, 80079aa <_realloc_r+0x16>
 80079a0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80079a4:	4611      	mov	r1, r2
 80079a6:	f7ff bc4b 	b.w	8007240 <_malloc_r>
 80079aa:	b92a      	cbnz	r2, 80079b8 <_realloc_r+0x24>
 80079ac:	f7ff fbdc 	bl	8007168 <_free_r>
 80079b0:	2400      	movs	r4, #0
 80079b2:	4620      	mov	r0, r4
 80079b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80079b8:	f000 f81a 	bl	80079f0 <_malloc_usable_size_r>
 80079bc:	4285      	cmp	r5, r0
 80079be:	4606      	mov	r6, r0
 80079c0:	d802      	bhi.n	80079c8 <_realloc_r+0x34>
 80079c2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80079c6:	d8f4      	bhi.n	80079b2 <_realloc_r+0x1e>
 80079c8:	4629      	mov	r1, r5
 80079ca:	4640      	mov	r0, r8
 80079cc:	f7ff fc38 	bl	8007240 <_malloc_r>
 80079d0:	4607      	mov	r7, r0
 80079d2:	2800      	cmp	r0, #0
 80079d4:	d0ec      	beq.n	80079b0 <_realloc_r+0x1c>
 80079d6:	42b5      	cmp	r5, r6
 80079d8:	462a      	mov	r2, r5
 80079da:	4621      	mov	r1, r4
 80079dc:	bf28      	it	cs
 80079de:	4632      	movcs	r2, r6
 80079e0:	f7ff ffca 	bl	8007978 <memcpy>
 80079e4:	4621      	mov	r1, r4
 80079e6:	4640      	mov	r0, r8
 80079e8:	f7ff fbbe 	bl	8007168 <_free_r>
 80079ec:	463c      	mov	r4, r7
 80079ee:	e7e0      	b.n	80079b2 <_realloc_r+0x1e>

080079f0 <_malloc_usable_size_r>:
 80079f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80079f4:	1f18      	subs	r0, r3, #4
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	bfbc      	itt	lt
 80079fa:	580b      	ldrlt	r3, [r1, r0]
 80079fc:	18c0      	addlt	r0, r0, r3
 80079fe:	4770      	bx	lr

08007a00 <_init>:
 8007a00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a02:	bf00      	nop
 8007a04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a06:	bc08      	pop	{r3}
 8007a08:	469e      	mov	lr, r3
 8007a0a:	4770      	bx	lr

08007a0c <_fini>:
 8007a0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a0e:	bf00      	nop
 8007a10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a12:	bc08      	pop	{r3}
 8007a14:	469e      	mov	lr, r3
 8007a16:	4770      	bx	lr
