
DigitalAlramProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007814  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002a8  080079a4  080079a4  000089a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007c4c  08007c4c  00009188  2**0
                  CONTENTS
  4 .ARM          00000008  08007c4c  08007c4c  00008c4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007c54  08007c54  00009188  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007c54  08007c54  00008c54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007c58  08007c58  00008c58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000188  20000000  08007c5c  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00009188  2**0
                  CONTENTS
 10 .bss          000002dc  20000188  20000188  00009188  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000464  20000464  00009188  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00009188  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000fe68  00000000  00000000  000091b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002cb1  00000000  00000000  00019020  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000fa0  00000000  00000000  0001bcd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c1a  00000000  00000000  0001cc78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022d88  00000000  00000000  0001d892  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014892  00000000  00000000  0004061a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cc726  00000000  00000000  00054eac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001215d2  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000043e4  00000000  00000000  00121618  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006d  00000000  00000000  001259fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000188 	.word	0x20000188
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800798c 	.word	0x0800798c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000018c 	.word	0x2000018c
 80001cc:	0800798c 	.word	0x0800798c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <_7SEG_GPIO_Init>:
#include "7seg.h"

void _7SEG_GPIO_Init()
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b08a      	sub	sp, #40	@ 0x28
 8000564:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct;

	/* GPIOA,D,E Periph clock enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000566:	2300      	movs	r3, #0
 8000568:	613b      	str	r3, [r7, #16]
 800056a:	4b6b      	ldr	r3, [pc, #428]	@ (8000718 <_7SEG_GPIO_Init+0x1b8>)
 800056c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800056e:	4a6a      	ldr	r2, [pc, #424]	@ (8000718 <_7SEG_GPIO_Init+0x1b8>)
 8000570:	f043 0301 	orr.w	r3, r3, #1
 8000574:	6313      	str	r3, [r2, #48]	@ 0x30
 8000576:	4b68      	ldr	r3, [pc, #416]	@ (8000718 <_7SEG_GPIO_Init+0x1b8>)
 8000578:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800057a:	f003 0301 	and.w	r3, r3, #1
 800057e:	613b      	str	r3, [r7, #16]
 8000580:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000582:	2300      	movs	r3, #0
 8000584:	60fb      	str	r3, [r7, #12]
 8000586:	4b64      	ldr	r3, [pc, #400]	@ (8000718 <_7SEG_GPIO_Init+0x1b8>)
 8000588:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800058a:	4a63      	ldr	r2, [pc, #396]	@ (8000718 <_7SEG_GPIO_Init+0x1b8>)
 800058c:	f043 0304 	orr.w	r3, r3, #4
 8000590:	6313      	str	r3, [r2, #48]	@ 0x30
 8000592:	4b61      	ldr	r3, [pc, #388]	@ (8000718 <_7SEG_GPIO_Init+0x1b8>)
 8000594:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000596:	f003 0304 	and.w	r3, r3, #4
 800059a:	60fb      	str	r3, [r7, #12]
 800059c:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800059e:	2300      	movs	r3, #0
 80005a0:	60bb      	str	r3, [r7, #8]
 80005a2:	4b5d      	ldr	r3, [pc, #372]	@ (8000718 <_7SEG_GPIO_Init+0x1b8>)
 80005a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005a6:	4a5c      	ldr	r2, [pc, #368]	@ (8000718 <_7SEG_GPIO_Init+0x1b8>)
 80005a8:	f043 0308 	orr.w	r3, r3, #8
 80005ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80005ae:	4b5a      	ldr	r3, [pc, #360]	@ (8000718 <_7SEG_GPIO_Init+0x1b8>)
 80005b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005b2:	f003 0308 	and.w	r3, r3, #8
 80005b6:	60bb      	str	r3, [r7, #8]
 80005b8:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 80005ba:	2300      	movs	r3, #0
 80005bc:	607b      	str	r3, [r7, #4]
 80005be:	4b56      	ldr	r3, [pc, #344]	@ (8000718 <_7SEG_GPIO_Init+0x1b8>)
 80005c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005c2:	4a55      	ldr	r2, [pc, #340]	@ (8000718 <_7SEG_GPIO_Init+0x1b8>)
 80005c4:	f043 0310 	orr.w	r3, r3, #16
 80005c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80005ca:	4b53      	ldr	r3, [pc, #332]	@ (8000718 <_7SEG_GPIO_Init+0x1b8>)
 80005cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ce:	f003 0310 	and.w	r3, r3, #16
 80005d2:	607b      	str	r3, [r7, #4]
 80005d4:	687b      	ldr	r3, [r7, #4]

	//Digit1
	GPIO_InitStruct.Pin = GPIO_PIN_DGT1_A;
 80005d6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80005da:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005dc:	2301      	movs	r3, #1
 80005de:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e0:	2300      	movs	r3, #0
 80005e2:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005e4:	2300      	movs	r3, #0
 80005e6:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIO_DGT1_A, &GPIO_InitStruct);
 80005e8:	f107 0314 	add.w	r3, r7, #20
 80005ec:	4619      	mov	r1, r3
 80005ee:	484b      	ldr	r0, [pc, #300]	@ (800071c <_7SEG_GPIO_Init+0x1bc>)
 80005f0:	f003 fe80 	bl	80042f4 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_DGT1_B;
 80005f4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80005f8:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT1_B, &GPIO_InitStruct);
 80005fa:	f107 0314 	add.w	r3, r7, #20
 80005fe:	4619      	mov	r1, r3
 8000600:	4847      	ldr	r0, [pc, #284]	@ (8000720 <_7SEG_GPIO_Init+0x1c0>)
 8000602:	f003 fe77 	bl	80042f4 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_DGT1_C;
 8000606:	2340      	movs	r3, #64	@ 0x40
 8000608:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT1_C, &GPIO_InitStruct);
 800060a:	f107 0314 	add.w	r3, r7, #20
 800060e:	4619      	mov	r1, r3
 8000610:	4842      	ldr	r0, [pc, #264]	@ (800071c <_7SEG_GPIO_Init+0x1bc>)
 8000612:	f003 fe6f 	bl	80042f4 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_DGT1_D;
 8000616:	2320      	movs	r3, #32
 8000618:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT1_D, &GPIO_InitStruct);
 800061a:	f107 0314 	add.w	r3, r7, #20
 800061e:	4619      	mov	r1, r3
 8000620:	483e      	ldr	r0, [pc, #248]	@ (800071c <_7SEG_GPIO_Init+0x1bc>)
 8000622:	f003 fe67 	bl	80042f4 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_DGT1_E;
 8000626:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800062a:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT1_E, &GPIO_InitStruct);
 800062c:	f107 0314 	add.w	r3, r7, #20
 8000630:	4619      	mov	r1, r3
 8000632:	483c      	ldr	r0, [pc, #240]	@ (8000724 <_7SEG_GPIO_Init+0x1c4>)
 8000634:	f003 fe5e 	bl	80042f4 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_DGT1_F;
 8000638:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800063c:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT1_F, &GPIO_InitStruct);
 800063e:	f107 0314 	add.w	r3, r7, #20
 8000642:	4619      	mov	r1, r3
 8000644:	4837      	ldr	r0, [pc, #220]	@ (8000724 <_7SEG_GPIO_Init+0x1c4>)
 8000646:	f003 fe55 	bl	80042f4 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_DGT1_G;
 800064a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800064e:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT1_G, &GPIO_InitStruct);
 8000650:	f107 0314 	add.w	r3, r7, #20
 8000654:	4619      	mov	r1, r3
 8000656:	4831      	ldr	r0, [pc, #196]	@ (800071c <_7SEG_GPIO_Init+0x1bc>)
 8000658:	f003 fe4c 	bl	80042f4 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_DGT1_DP;
 800065c:	2380      	movs	r3, #128	@ 0x80
 800065e:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT1_DP, &GPIO_InitStruct);
 8000660:	f107 0314 	add.w	r3, r7, #20
 8000664:	4619      	mov	r1, r3
 8000666:	482d      	ldr	r0, [pc, #180]	@ (800071c <_7SEG_GPIO_Init+0x1bc>)
 8000668:	f003 fe44 	bl	80042f4 <HAL_GPIO_Init>

	//Digit2
	GPIO_InitStruct.Pin = GPIO_PIN_DGT2_A;
 800066c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000670:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT2_A, &GPIO_InitStruct);
 8000672:	f107 0314 	add.w	r3, r7, #20
 8000676:	4619      	mov	r1, r3
 8000678:	482b      	ldr	r0, [pc, #172]	@ (8000728 <_7SEG_GPIO_Init+0x1c8>)
 800067a:	f003 fe3b 	bl	80042f4 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_DGT2_B;
 800067e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000682:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT2_B, &GPIO_InitStruct);
 8000684:	f107 0314 	add.w	r3, r7, #20
 8000688:	4619      	mov	r1, r3
 800068a:	4827      	ldr	r0, [pc, #156]	@ (8000728 <_7SEG_GPIO_Init+0x1c8>)
 800068c:	f003 fe32 	bl	80042f4 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_DGT2_C;
 8000690:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000694:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT2_C, &GPIO_InitStruct);
 8000696:	f107 0314 	add.w	r3, r7, #20
 800069a:	4619      	mov	r1, r3
 800069c:	4822      	ldr	r0, [pc, #136]	@ (8000728 <_7SEG_GPIO_Init+0x1c8>)
 800069e:	f003 fe29 	bl	80042f4 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_DGT2_D;
 80006a2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80006a6:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT2_D, &GPIO_InitStruct);
 80006a8:	f107 0314 	add.w	r3, r7, #20
 80006ac:	4619      	mov	r1, r3
 80006ae:	481e      	ldr	r0, [pc, #120]	@ (8000728 <_7SEG_GPIO_Init+0x1c8>)
 80006b0:	f003 fe20 	bl	80042f4 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_DGT2_E;
 80006b4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80006b8:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT2_E, &GPIO_InitStruct);
 80006ba:	f107 0314 	add.w	r3, r7, #20
 80006be:	4619      	mov	r1, r3
 80006c0:	4819      	ldr	r0, [pc, #100]	@ (8000728 <_7SEG_GPIO_Init+0x1c8>)
 80006c2:	f003 fe17 	bl	80042f4 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_DGT2_F;
 80006c6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80006ca:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT2_F, &GPIO_InitStruct);
 80006cc:	f107 0314 	add.w	r3, r7, #20
 80006d0:	4619      	mov	r1, r3
 80006d2:	4815      	ldr	r0, [pc, #84]	@ (8000728 <_7SEG_GPIO_Init+0x1c8>)
 80006d4:	f003 fe0e 	bl	80042f4 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_DGT2_G;
 80006d8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80006dc:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT2_G, &GPIO_InitStruct);
 80006de:	f107 0314 	add.w	r3, r7, #20
 80006e2:	4619      	mov	r1, r3
 80006e4:	4810      	ldr	r0, [pc, #64]	@ (8000728 <_7SEG_GPIO_Init+0x1c8>)
 80006e6:	f003 fe05 	bl	80042f4 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_DGT2_DP;
 80006ea:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80006ee:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT2_DP, &GPIO_InitStruct);
 80006f0:	f107 0314 	add.w	r3, r7, #20
 80006f4:	4619      	mov	r1, r3
 80006f6:	480c      	ldr	r0, [pc, #48]	@ (8000728 <_7SEG_GPIO_Init+0x1c8>)
 80006f8:	f003 fdfc 	bl	80042f4 <HAL_GPIO_Init>

	
	_7SEG_SetNumber(DGT1, 0, ON);
 80006fc:	2201      	movs	r2, #1
 80006fe:	2100      	movs	r1, #0
 8000700:	2000      	movs	r0, #0
 8000702:	f000 f813 	bl	800072c <_7SEG_SetNumber>
	_7SEG_SetNumber(DGT2, 0, ON);
 8000706:	2201      	movs	r2, #1
 8000708:	2100      	movs	r1, #0
 800070a:	2001      	movs	r0, #1
 800070c:	f000 f80e 	bl	800072c <_7SEG_SetNumber>
}
 8000710:	bf00      	nop
 8000712:	3728      	adds	r7, #40	@ 0x28
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}
 8000718:	40023800 	.word	0x40023800
 800071c:	40020c00 	.word	0x40020c00
 8000720:	40020000 	.word	0x40020000
 8000724:	40020800 	.word	0x40020800
 8000728:	40021000 	.word	0x40021000

0800072c <_7SEG_SetNumber>:


void _7SEG_SetNumber(int dgt, int num, int dp)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b084      	sub	sp, #16
 8000730:	af00      	add	r7, sp, #0
 8000732:	60f8      	str	r0, [r7, #12]
 8000734:	60b9      	str	r1, [r7, #8]
 8000736:	607a      	str	r2, [r7, #4]
	if(dgt == DGT1)
 8000738:	68fb      	ldr	r3, [r7, #12]
 800073a:	2b00      	cmp	r3, #0
 800073c:	f040 81dc 	bne.w	8000af8 <_7SEG_SetNumber+0x3cc>
	{
		switch(num%10)
 8000740:	68b9      	ldr	r1, [r7, #8]
 8000742:	4bcb      	ldr	r3, [pc, #812]	@ (8000a70 <_7SEG_SetNumber+0x344>)
 8000744:	fb83 2301 	smull	r2, r3, r3, r1
 8000748:	109a      	asrs	r2, r3, #2
 800074a:	17cb      	asrs	r3, r1, #31
 800074c:	1ad2      	subs	r2, r2, r3
 800074e:	4613      	mov	r3, r2
 8000750:	009b      	lsls	r3, r3, #2
 8000752:	4413      	add	r3, r2
 8000754:	005b      	lsls	r3, r3, #1
 8000756:	1aca      	subs	r2, r1, r3
 8000758:	2a09      	cmp	r2, #9
 800075a:	f200 81ba 	bhi.w	8000ad2 <_7SEG_SetNumber+0x3a6>
 800075e:	a301      	add	r3, pc, #4	@ (adr r3, 8000764 <_7SEG_SetNumber+0x38>)
 8000760:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 8000764:	0800078d 	.word	0x0800078d
 8000768:	080007df 	.word	0x080007df
 800076c:	08000831 	.word	0x08000831
 8000770:	08000883 	.word	0x08000883
 8000774:	080008d5 	.word	0x080008d5
 8000778:	08000927 	.word	0x08000927
 800077c:	08000979 	.word	0x08000979
 8000780:	080009cb 	.word	0x080009cb
 8000784:	08000a1d 	.word	0x08000a1d
 8000788:	08000a81 	.word	0x08000a81
		{
			case 0: DGT1_A_ON; DGT1_B_ON; DGT1_C_ON; DGT1_D_ON; DGT1_E_ON; DGT1_F_ON;
 800078c:	2200      	movs	r2, #0
 800078e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000792:	48b8      	ldr	r0, [pc, #736]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 8000794:	f003 ff62 	bl	800465c <HAL_GPIO_WritePin>
 8000798:	2200      	movs	r2, #0
 800079a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800079e:	48b6      	ldr	r0, [pc, #728]	@ (8000a78 <_7SEG_SetNumber+0x34c>)
 80007a0:	f003 ff5c 	bl	800465c <HAL_GPIO_WritePin>
 80007a4:	2200      	movs	r2, #0
 80007a6:	2140      	movs	r1, #64	@ 0x40
 80007a8:	48b2      	ldr	r0, [pc, #712]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 80007aa:	f003 ff57 	bl	800465c <HAL_GPIO_WritePin>
 80007ae:	2200      	movs	r2, #0
 80007b0:	2120      	movs	r1, #32
 80007b2:	48b0      	ldr	r0, [pc, #704]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 80007b4:	f003 ff52 	bl	800465c <HAL_GPIO_WritePin>
 80007b8:	2200      	movs	r2, #0
 80007ba:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80007be:	48af      	ldr	r0, [pc, #700]	@ (8000a7c <_7SEG_SetNumber+0x350>)
 80007c0:	f003 ff4c 	bl	800465c <HAL_GPIO_WritePin>
 80007c4:	2200      	movs	r2, #0
 80007c6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80007ca:	48ac      	ldr	r0, [pc, #688]	@ (8000a7c <_7SEG_SetNumber+0x350>)
 80007cc:	f003 ff46 	bl	800465c <HAL_GPIO_WritePin>
					DGT1_G_OFF;
 80007d0:	2201      	movs	r2, #1
 80007d2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80007d6:	48a7      	ldr	r0, [pc, #668]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 80007d8:	f003 ff40 	bl	800465c <HAL_GPIO_WritePin>
				break;
 80007dc:	e179      	b.n	8000ad2 <_7SEG_SetNumber+0x3a6>
			case 1: DGT1_B_ON; DGT1_C_ON;
 80007de:	2200      	movs	r2, #0
 80007e0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80007e4:	48a4      	ldr	r0, [pc, #656]	@ (8000a78 <_7SEG_SetNumber+0x34c>)
 80007e6:	f003 ff39 	bl	800465c <HAL_GPIO_WritePin>
 80007ea:	2200      	movs	r2, #0
 80007ec:	2140      	movs	r1, #64	@ 0x40
 80007ee:	48a1      	ldr	r0, [pc, #644]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 80007f0:	f003 ff34 	bl	800465c <HAL_GPIO_WritePin>
					DGT1_A_OFF; DGT1_D_OFF; DGT1_E_OFF; DGT1_F_OFF; DGT1_G_OFF;
 80007f4:	2201      	movs	r2, #1
 80007f6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80007fa:	489e      	ldr	r0, [pc, #632]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 80007fc:	f003 ff2e 	bl	800465c <HAL_GPIO_WritePin>
 8000800:	2201      	movs	r2, #1
 8000802:	2120      	movs	r1, #32
 8000804:	489b      	ldr	r0, [pc, #620]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 8000806:	f003 ff29 	bl	800465c <HAL_GPIO_WritePin>
 800080a:	2201      	movs	r2, #1
 800080c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000810:	489a      	ldr	r0, [pc, #616]	@ (8000a7c <_7SEG_SetNumber+0x350>)
 8000812:	f003 ff23 	bl	800465c <HAL_GPIO_WritePin>
 8000816:	2201      	movs	r2, #1
 8000818:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800081c:	4897      	ldr	r0, [pc, #604]	@ (8000a7c <_7SEG_SetNumber+0x350>)
 800081e:	f003 ff1d 	bl	800465c <HAL_GPIO_WritePin>
 8000822:	2201      	movs	r2, #1
 8000824:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000828:	4892      	ldr	r0, [pc, #584]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 800082a:	f003 ff17 	bl	800465c <HAL_GPIO_WritePin>
				break;
 800082e:	e150      	b.n	8000ad2 <_7SEG_SetNumber+0x3a6>
			case 2: DGT1_A_ON; DGT1_B_ON; DGT1_G_ON; DGT1_E_ON; DGT1_D_ON;
 8000830:	2200      	movs	r2, #0
 8000832:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000836:	488f      	ldr	r0, [pc, #572]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 8000838:	f003 ff10 	bl	800465c <HAL_GPIO_WritePin>
 800083c:	2200      	movs	r2, #0
 800083e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000842:	488d      	ldr	r0, [pc, #564]	@ (8000a78 <_7SEG_SetNumber+0x34c>)
 8000844:	f003 ff0a 	bl	800465c <HAL_GPIO_WritePin>
 8000848:	2200      	movs	r2, #0
 800084a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800084e:	4889      	ldr	r0, [pc, #548]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 8000850:	f003 ff04 	bl	800465c <HAL_GPIO_WritePin>
 8000854:	2200      	movs	r2, #0
 8000856:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800085a:	4888      	ldr	r0, [pc, #544]	@ (8000a7c <_7SEG_SetNumber+0x350>)
 800085c:	f003 fefe 	bl	800465c <HAL_GPIO_WritePin>
 8000860:	2200      	movs	r2, #0
 8000862:	2120      	movs	r1, #32
 8000864:	4883      	ldr	r0, [pc, #524]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 8000866:	f003 fef9 	bl	800465c <HAL_GPIO_WritePin>
					DGT1_C_OFF; DGT1_F_OFF;
 800086a:	2201      	movs	r2, #1
 800086c:	2140      	movs	r1, #64	@ 0x40
 800086e:	4881      	ldr	r0, [pc, #516]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 8000870:	f003 fef4 	bl	800465c <HAL_GPIO_WritePin>
 8000874:	2201      	movs	r2, #1
 8000876:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800087a:	4880      	ldr	r0, [pc, #512]	@ (8000a7c <_7SEG_SetNumber+0x350>)
 800087c:	f003 feee 	bl	800465c <HAL_GPIO_WritePin>
				break;
 8000880:	e127      	b.n	8000ad2 <_7SEG_SetNumber+0x3a6>
			case 3: DGT1_A_ON; DGT1_B_ON; DGT1_C_ON; DGT1_D_ON; DGT1_G_ON;
 8000882:	2200      	movs	r2, #0
 8000884:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000888:	487a      	ldr	r0, [pc, #488]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 800088a:	f003 fee7 	bl	800465c <HAL_GPIO_WritePin>
 800088e:	2200      	movs	r2, #0
 8000890:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000894:	4878      	ldr	r0, [pc, #480]	@ (8000a78 <_7SEG_SetNumber+0x34c>)
 8000896:	f003 fee1 	bl	800465c <HAL_GPIO_WritePin>
 800089a:	2200      	movs	r2, #0
 800089c:	2140      	movs	r1, #64	@ 0x40
 800089e:	4875      	ldr	r0, [pc, #468]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 80008a0:	f003 fedc 	bl	800465c <HAL_GPIO_WritePin>
 80008a4:	2200      	movs	r2, #0
 80008a6:	2120      	movs	r1, #32
 80008a8:	4872      	ldr	r0, [pc, #456]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 80008aa:	f003 fed7 	bl	800465c <HAL_GPIO_WritePin>
 80008ae:	2200      	movs	r2, #0
 80008b0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80008b4:	486f      	ldr	r0, [pc, #444]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 80008b6:	f003 fed1 	bl	800465c <HAL_GPIO_WritePin>
					DGT1_E_OFF; DGT1_F_OFF;
 80008ba:	2201      	movs	r2, #1
 80008bc:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80008c0:	486e      	ldr	r0, [pc, #440]	@ (8000a7c <_7SEG_SetNumber+0x350>)
 80008c2:	f003 fecb 	bl	800465c <HAL_GPIO_WritePin>
 80008c6:	2201      	movs	r2, #1
 80008c8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80008cc:	486b      	ldr	r0, [pc, #428]	@ (8000a7c <_7SEG_SetNumber+0x350>)
 80008ce:	f003 fec5 	bl	800465c <HAL_GPIO_WritePin>
				break;
 80008d2:	e0fe      	b.n	8000ad2 <_7SEG_SetNumber+0x3a6>
			case 4: DGT1_F_ON; DGT1_G_ON; DGT1_B_ON; DGT1_C_ON;
 80008d4:	2200      	movs	r2, #0
 80008d6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80008da:	4868      	ldr	r0, [pc, #416]	@ (8000a7c <_7SEG_SetNumber+0x350>)
 80008dc:	f003 febe 	bl	800465c <HAL_GPIO_WritePin>
 80008e0:	2200      	movs	r2, #0
 80008e2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80008e6:	4863      	ldr	r0, [pc, #396]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 80008e8:	f003 feb8 	bl	800465c <HAL_GPIO_WritePin>
 80008ec:	2200      	movs	r2, #0
 80008ee:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80008f2:	4861      	ldr	r0, [pc, #388]	@ (8000a78 <_7SEG_SetNumber+0x34c>)
 80008f4:	f003 feb2 	bl	800465c <HAL_GPIO_WritePin>
 80008f8:	2200      	movs	r2, #0
 80008fa:	2140      	movs	r1, #64	@ 0x40
 80008fc:	485d      	ldr	r0, [pc, #372]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 80008fe:	f003 fead 	bl	800465c <HAL_GPIO_WritePin>
					DGT1_A_OFF; DGT1_D_OFF; DGT1_E_OFF;
 8000902:	2201      	movs	r2, #1
 8000904:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000908:	485a      	ldr	r0, [pc, #360]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 800090a:	f003 fea7 	bl	800465c <HAL_GPIO_WritePin>
 800090e:	2201      	movs	r2, #1
 8000910:	2120      	movs	r1, #32
 8000912:	4858      	ldr	r0, [pc, #352]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 8000914:	f003 fea2 	bl	800465c <HAL_GPIO_WritePin>
 8000918:	2201      	movs	r2, #1
 800091a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800091e:	4857      	ldr	r0, [pc, #348]	@ (8000a7c <_7SEG_SetNumber+0x350>)
 8000920:	f003 fe9c 	bl	800465c <HAL_GPIO_WritePin>
				break;
 8000924:	e0d5      	b.n	8000ad2 <_7SEG_SetNumber+0x3a6>
			case 5: DGT1_A_ON; DGT1_F_ON; DGT1_G_ON; DGT1_C_ON; DGT1_D_ON;
 8000926:	2200      	movs	r2, #0
 8000928:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800092c:	4851      	ldr	r0, [pc, #324]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 800092e:	f003 fe95 	bl	800465c <HAL_GPIO_WritePin>
 8000932:	2200      	movs	r2, #0
 8000934:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000938:	4850      	ldr	r0, [pc, #320]	@ (8000a7c <_7SEG_SetNumber+0x350>)
 800093a:	f003 fe8f 	bl	800465c <HAL_GPIO_WritePin>
 800093e:	2200      	movs	r2, #0
 8000940:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000944:	484b      	ldr	r0, [pc, #300]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 8000946:	f003 fe89 	bl	800465c <HAL_GPIO_WritePin>
 800094a:	2200      	movs	r2, #0
 800094c:	2140      	movs	r1, #64	@ 0x40
 800094e:	4849      	ldr	r0, [pc, #292]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 8000950:	f003 fe84 	bl	800465c <HAL_GPIO_WritePin>
 8000954:	2200      	movs	r2, #0
 8000956:	2120      	movs	r1, #32
 8000958:	4846      	ldr	r0, [pc, #280]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 800095a:	f003 fe7f 	bl	800465c <HAL_GPIO_WritePin>
					DGT1_B_OFF; DGT1_E_OFF;
 800095e:	2201      	movs	r2, #1
 8000960:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000964:	4844      	ldr	r0, [pc, #272]	@ (8000a78 <_7SEG_SetNumber+0x34c>)
 8000966:	f003 fe79 	bl	800465c <HAL_GPIO_WritePin>
 800096a:	2201      	movs	r2, #1
 800096c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000970:	4842      	ldr	r0, [pc, #264]	@ (8000a7c <_7SEG_SetNumber+0x350>)
 8000972:	f003 fe73 	bl	800465c <HAL_GPIO_WritePin>
				break;
 8000976:	e0ac      	b.n	8000ad2 <_7SEG_SetNumber+0x3a6>
			case 6: DGT1_A_ON; DGT1_C_ON; DGT1_D_ON; DGT1_E_ON; DGT1_F_ON; DGT1_G_ON;
 8000978:	2200      	movs	r2, #0
 800097a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800097e:	483d      	ldr	r0, [pc, #244]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 8000980:	f003 fe6c 	bl	800465c <HAL_GPIO_WritePin>
 8000984:	2200      	movs	r2, #0
 8000986:	2140      	movs	r1, #64	@ 0x40
 8000988:	483a      	ldr	r0, [pc, #232]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 800098a:	f003 fe67 	bl	800465c <HAL_GPIO_WritePin>
 800098e:	2200      	movs	r2, #0
 8000990:	2120      	movs	r1, #32
 8000992:	4838      	ldr	r0, [pc, #224]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 8000994:	f003 fe62 	bl	800465c <HAL_GPIO_WritePin>
 8000998:	2200      	movs	r2, #0
 800099a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800099e:	4837      	ldr	r0, [pc, #220]	@ (8000a7c <_7SEG_SetNumber+0x350>)
 80009a0:	f003 fe5c 	bl	800465c <HAL_GPIO_WritePin>
 80009a4:	2200      	movs	r2, #0
 80009a6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80009aa:	4834      	ldr	r0, [pc, #208]	@ (8000a7c <_7SEG_SetNumber+0x350>)
 80009ac:	f003 fe56 	bl	800465c <HAL_GPIO_WritePin>
 80009b0:	2200      	movs	r2, #0
 80009b2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80009b6:	482f      	ldr	r0, [pc, #188]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 80009b8:	f003 fe50 	bl	800465c <HAL_GPIO_WritePin>
					DGT1_B_OFF;
 80009bc:	2201      	movs	r2, #1
 80009be:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80009c2:	482d      	ldr	r0, [pc, #180]	@ (8000a78 <_7SEG_SetNumber+0x34c>)
 80009c4:	f003 fe4a 	bl	800465c <HAL_GPIO_WritePin>
				break;
 80009c8:	e083      	b.n	8000ad2 <_7SEG_SetNumber+0x3a6>
			case 7: DGT1_F_ON; DGT1_A_ON; DGT1_B_ON; DGT1_C_ON;
 80009ca:	2200      	movs	r2, #0
 80009cc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80009d0:	482a      	ldr	r0, [pc, #168]	@ (8000a7c <_7SEG_SetNumber+0x350>)
 80009d2:	f003 fe43 	bl	800465c <HAL_GPIO_WritePin>
 80009d6:	2200      	movs	r2, #0
 80009d8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80009dc:	4825      	ldr	r0, [pc, #148]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 80009de:	f003 fe3d 	bl	800465c <HAL_GPIO_WritePin>
 80009e2:	2200      	movs	r2, #0
 80009e4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80009e8:	4823      	ldr	r0, [pc, #140]	@ (8000a78 <_7SEG_SetNumber+0x34c>)
 80009ea:	f003 fe37 	bl	800465c <HAL_GPIO_WritePin>
 80009ee:	2200      	movs	r2, #0
 80009f0:	2140      	movs	r1, #64	@ 0x40
 80009f2:	4820      	ldr	r0, [pc, #128]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 80009f4:	f003 fe32 	bl	800465c <HAL_GPIO_WritePin>
					DGT1_D_OFF; DGT1_E_OFF; DGT1_G_OFF;
 80009f8:	2201      	movs	r2, #1
 80009fa:	2120      	movs	r1, #32
 80009fc:	481d      	ldr	r0, [pc, #116]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 80009fe:	f003 fe2d 	bl	800465c <HAL_GPIO_WritePin>
 8000a02:	2201      	movs	r2, #1
 8000a04:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000a08:	481c      	ldr	r0, [pc, #112]	@ (8000a7c <_7SEG_SetNumber+0x350>)
 8000a0a:	f003 fe27 	bl	800465c <HAL_GPIO_WritePin>
 8000a0e:	2201      	movs	r2, #1
 8000a10:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000a14:	4817      	ldr	r0, [pc, #92]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 8000a16:	f003 fe21 	bl	800465c <HAL_GPIO_WritePin>
				break;
 8000a1a:	e05a      	b.n	8000ad2 <_7SEG_SetNumber+0x3a6>
			case 8: DGT1_A_ON; DGT1_B_ON; DGT1_C_ON; DGT1_D_ON; DGT1_E_ON; DGT1_F_ON; DGT1_G_ON;
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000a22:	4814      	ldr	r0, [pc, #80]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 8000a24:	f003 fe1a 	bl	800465c <HAL_GPIO_WritePin>
 8000a28:	2200      	movs	r2, #0
 8000a2a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000a2e:	4812      	ldr	r0, [pc, #72]	@ (8000a78 <_7SEG_SetNumber+0x34c>)
 8000a30:	f003 fe14 	bl	800465c <HAL_GPIO_WritePin>
 8000a34:	2200      	movs	r2, #0
 8000a36:	2140      	movs	r1, #64	@ 0x40
 8000a38:	480e      	ldr	r0, [pc, #56]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 8000a3a:	f003 fe0f 	bl	800465c <HAL_GPIO_WritePin>
 8000a3e:	2200      	movs	r2, #0
 8000a40:	2120      	movs	r1, #32
 8000a42:	480c      	ldr	r0, [pc, #48]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 8000a44:	f003 fe0a 	bl	800465c <HAL_GPIO_WritePin>
 8000a48:	2200      	movs	r2, #0
 8000a4a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000a4e:	480b      	ldr	r0, [pc, #44]	@ (8000a7c <_7SEG_SetNumber+0x350>)
 8000a50:	f003 fe04 	bl	800465c <HAL_GPIO_WritePin>
 8000a54:	2200      	movs	r2, #0
 8000a56:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a5a:	4808      	ldr	r0, [pc, #32]	@ (8000a7c <_7SEG_SetNumber+0x350>)
 8000a5c:	f003 fdfe 	bl	800465c <HAL_GPIO_WritePin>
 8000a60:	2200      	movs	r2, #0
 8000a62:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000a66:	4803      	ldr	r0, [pc, #12]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 8000a68:	f003 fdf8 	bl	800465c <HAL_GPIO_WritePin>
				break;
 8000a6c:	e031      	b.n	8000ad2 <_7SEG_SetNumber+0x3a6>
 8000a6e:	bf00      	nop
 8000a70:	66666667 	.word	0x66666667
 8000a74:	40020c00 	.word	0x40020c00
 8000a78:	40020000 	.word	0x40020000
 8000a7c:	40020800 	.word	0x40020800
			case 9: DGT1_A_ON; DGT1_B_ON; DGT1_C_ON; DGT1_D_ON; DGT1_F_ON; DGT1_G_ON;
 8000a80:	2200      	movs	r2, #0
 8000a82:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000a86:	48c8      	ldr	r0, [pc, #800]	@ (8000da8 <_7SEG_SetNumber+0x67c>)
 8000a88:	f003 fde8 	bl	800465c <HAL_GPIO_WritePin>
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000a92:	48c6      	ldr	r0, [pc, #792]	@ (8000dac <_7SEG_SetNumber+0x680>)
 8000a94:	f003 fde2 	bl	800465c <HAL_GPIO_WritePin>
 8000a98:	2200      	movs	r2, #0
 8000a9a:	2140      	movs	r1, #64	@ 0x40
 8000a9c:	48c2      	ldr	r0, [pc, #776]	@ (8000da8 <_7SEG_SetNumber+0x67c>)
 8000a9e:	f003 fddd 	bl	800465c <HAL_GPIO_WritePin>
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	2120      	movs	r1, #32
 8000aa6:	48c0      	ldr	r0, [pc, #768]	@ (8000da8 <_7SEG_SetNumber+0x67c>)
 8000aa8:	f003 fdd8 	bl	800465c <HAL_GPIO_WritePin>
 8000aac:	2200      	movs	r2, #0
 8000aae:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000ab2:	48bf      	ldr	r0, [pc, #764]	@ (8000db0 <_7SEG_SetNumber+0x684>)
 8000ab4:	f003 fdd2 	bl	800465c <HAL_GPIO_WritePin>
 8000ab8:	2200      	movs	r2, #0
 8000aba:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000abe:	48ba      	ldr	r0, [pc, #744]	@ (8000da8 <_7SEG_SetNumber+0x67c>)
 8000ac0:	f003 fdcc 	bl	800465c <HAL_GPIO_WritePin>
					DGT1_E_OFF;
 8000ac4:	2201      	movs	r2, #1
 8000ac6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000aca:	48b9      	ldr	r0, [pc, #740]	@ (8000db0 <_7SEG_SetNumber+0x684>)
 8000acc:	f003 fdc6 	bl	800465c <HAL_GPIO_WritePin>
				break;
 8000ad0:	bf00      	nop
		}

		if(dp == ON)
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	2b01      	cmp	r3, #1
 8000ad6:	d105      	bne.n	8000ae4 <_7SEG_SetNumber+0x3b8>
		{
			DGT1_DP_ON;
 8000ad8:	2200      	movs	r2, #0
 8000ada:	2180      	movs	r1, #128	@ 0x80
 8000adc:	48b2      	ldr	r0, [pc, #712]	@ (8000da8 <_7SEG_SetNumber+0x67c>)
 8000ade:	f003 fdbd 	bl	800465c <HAL_GPIO_WritePin>
		else if(dp == OFF)
		{
			DGT2_DP_OFF;
		}
	}
}
 8000ae2:	e1ff      	b.n	8000ee4 <_7SEG_SetNumber+0x7b8>
		else if(dp == OFF)
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	f040 81fc 	bne.w	8000ee4 <_7SEG_SetNumber+0x7b8>
			DGT1_DP_OFF;
 8000aec:	2201      	movs	r2, #1
 8000aee:	2180      	movs	r1, #128	@ 0x80
 8000af0:	48ad      	ldr	r0, [pc, #692]	@ (8000da8 <_7SEG_SetNumber+0x67c>)
 8000af2:	f003 fdb3 	bl	800465c <HAL_GPIO_WritePin>
}
 8000af6:	e1f5      	b.n	8000ee4 <_7SEG_SetNumber+0x7b8>
	else if(dgt == DGT2)
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	2b01      	cmp	r3, #1
 8000afc:	f040 81f2 	bne.w	8000ee4 <_7SEG_SetNumber+0x7b8>
		switch(num%10)
 8000b00:	68b9      	ldr	r1, [r7, #8]
 8000b02:	4bac      	ldr	r3, [pc, #688]	@ (8000db4 <_7SEG_SetNumber+0x688>)
 8000b04:	fb83 2301 	smull	r2, r3, r3, r1
 8000b08:	109a      	asrs	r2, r3, #2
 8000b0a:	17cb      	asrs	r3, r1, #31
 8000b0c:	1ad2      	subs	r2, r2, r3
 8000b0e:	4613      	mov	r3, r2
 8000b10:	009b      	lsls	r3, r3, #2
 8000b12:	4413      	add	r3, r2
 8000b14:	005b      	lsls	r3, r3, #1
 8000b16:	1aca      	subs	r2, r1, r3
 8000b18:	2a09      	cmp	r2, #9
 8000b1a:	f200 81d0 	bhi.w	8000ebe <_7SEG_SetNumber+0x792>
 8000b1e:	a301      	add	r3, pc, #4	@ (adr r3, 8000b24 <_7SEG_SetNumber+0x3f8>)
 8000b20:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 8000b24:	08000b4d 	.word	0x08000b4d
 8000b28:	08000ba3 	.word	0x08000ba3
 8000b2c:	08000bf9 	.word	0x08000bf9
 8000b30:	08000c4f 	.word	0x08000c4f
 8000b34:	08000ca5 	.word	0x08000ca5
 8000b38:	08000cfb 	.word	0x08000cfb
 8000b3c:	08000d51 	.word	0x08000d51
 8000b40:	08000dbd 	.word	0x08000dbd
 8000b44:	08000e13 	.word	0x08000e13
 8000b48:	08000e69 	.word	0x08000e69
			case 0: DGT2_A_ON; DGT2_B_ON; DGT2_C_ON; DGT2_D_ON; DGT2_E_ON; DGT2_F_ON;
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000b52:	4899      	ldr	r0, [pc, #612]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000b54:	f003 fd82 	bl	800465c <HAL_GPIO_WritePin>
 8000b58:	2200      	movs	r2, #0
 8000b5a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000b5e:	4896      	ldr	r0, [pc, #600]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000b60:	f003 fd7c 	bl	800465c <HAL_GPIO_WritePin>
 8000b64:	2200      	movs	r2, #0
 8000b66:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000b6a:	4893      	ldr	r0, [pc, #588]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000b6c:	f003 fd76 	bl	800465c <HAL_GPIO_WritePin>
 8000b70:	2200      	movs	r2, #0
 8000b72:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000b76:	4890      	ldr	r0, [pc, #576]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000b78:	f003 fd70 	bl	800465c <HAL_GPIO_WritePin>
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000b82:	488d      	ldr	r0, [pc, #564]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000b84:	f003 fd6a 	bl	800465c <HAL_GPIO_WritePin>
 8000b88:	2200      	movs	r2, #0
 8000b8a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000b8e:	488a      	ldr	r0, [pc, #552]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000b90:	f003 fd64 	bl	800465c <HAL_GPIO_WritePin>
					DGT2_G_OFF;
 8000b94:	2201      	movs	r2, #1
 8000b96:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000b9a:	4887      	ldr	r0, [pc, #540]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000b9c:	f003 fd5e 	bl	800465c <HAL_GPIO_WritePin>
				break;
 8000ba0:	e18d      	b.n	8000ebe <_7SEG_SetNumber+0x792>
			case 1: DGT2_B_ON; DGT2_C_ON;
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000ba8:	4883      	ldr	r0, [pc, #524]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000baa:	f003 fd57 	bl	800465c <HAL_GPIO_WritePin>
 8000bae:	2200      	movs	r2, #0
 8000bb0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000bb4:	4880      	ldr	r0, [pc, #512]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000bb6:	f003 fd51 	bl	800465c <HAL_GPIO_WritePin>
					DGT2_A_OFF; DGT2_D_OFF; DGT2_E_OFF; DGT2_F_OFF; DGT2_G_OFF;
 8000bba:	2201      	movs	r2, #1
 8000bbc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000bc0:	487d      	ldr	r0, [pc, #500]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000bc2:	f003 fd4b 	bl	800465c <HAL_GPIO_WritePin>
 8000bc6:	2201      	movs	r2, #1
 8000bc8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000bcc:	487a      	ldr	r0, [pc, #488]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000bce:	f003 fd45 	bl	800465c <HAL_GPIO_WritePin>
 8000bd2:	2201      	movs	r2, #1
 8000bd4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000bd8:	4877      	ldr	r0, [pc, #476]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000bda:	f003 fd3f 	bl	800465c <HAL_GPIO_WritePin>
 8000bde:	2201      	movs	r2, #1
 8000be0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000be4:	4874      	ldr	r0, [pc, #464]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000be6:	f003 fd39 	bl	800465c <HAL_GPIO_WritePin>
 8000bea:	2201      	movs	r2, #1
 8000bec:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000bf0:	4871      	ldr	r0, [pc, #452]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000bf2:	f003 fd33 	bl	800465c <HAL_GPIO_WritePin>
				break;
 8000bf6:	e162      	b.n	8000ebe <_7SEG_SetNumber+0x792>
			case 2: DGT2_A_ON; DGT2_B_ON; DGT2_G_ON; DGT2_E_ON; DGT2_D_ON;
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000bfe:	486e      	ldr	r0, [pc, #440]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000c00:	f003 fd2c 	bl	800465c <HAL_GPIO_WritePin>
 8000c04:	2200      	movs	r2, #0
 8000c06:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000c0a:	486b      	ldr	r0, [pc, #428]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000c0c:	f003 fd26 	bl	800465c <HAL_GPIO_WritePin>
 8000c10:	2200      	movs	r2, #0
 8000c12:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000c16:	4868      	ldr	r0, [pc, #416]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000c18:	f003 fd20 	bl	800465c <HAL_GPIO_WritePin>
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000c22:	4865      	ldr	r0, [pc, #404]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000c24:	f003 fd1a 	bl	800465c <HAL_GPIO_WritePin>
 8000c28:	2200      	movs	r2, #0
 8000c2a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000c2e:	4862      	ldr	r0, [pc, #392]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000c30:	f003 fd14 	bl	800465c <HAL_GPIO_WritePin>
					DGT2_C_OFF; DGT2_F_OFF;
 8000c34:	2201      	movs	r2, #1
 8000c36:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000c3a:	485f      	ldr	r0, [pc, #380]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000c3c:	f003 fd0e 	bl	800465c <HAL_GPIO_WritePin>
 8000c40:	2201      	movs	r2, #1
 8000c42:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000c46:	485c      	ldr	r0, [pc, #368]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000c48:	f003 fd08 	bl	800465c <HAL_GPIO_WritePin>
				break;
 8000c4c:	e137      	b.n	8000ebe <_7SEG_SetNumber+0x792>
			case 3: DGT2_A_ON; DGT2_B_ON; DGT2_C_ON; DGT2_D_ON; DGT2_G_ON;
 8000c4e:	2200      	movs	r2, #0
 8000c50:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000c54:	4858      	ldr	r0, [pc, #352]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000c56:	f003 fd01 	bl	800465c <HAL_GPIO_WritePin>
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000c60:	4855      	ldr	r0, [pc, #340]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000c62:	f003 fcfb 	bl	800465c <HAL_GPIO_WritePin>
 8000c66:	2200      	movs	r2, #0
 8000c68:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000c6c:	4852      	ldr	r0, [pc, #328]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000c6e:	f003 fcf5 	bl	800465c <HAL_GPIO_WritePin>
 8000c72:	2200      	movs	r2, #0
 8000c74:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000c78:	484f      	ldr	r0, [pc, #316]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000c7a:	f003 fcef 	bl	800465c <HAL_GPIO_WritePin>
 8000c7e:	2200      	movs	r2, #0
 8000c80:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000c84:	484c      	ldr	r0, [pc, #304]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000c86:	f003 fce9 	bl	800465c <HAL_GPIO_WritePin>
					DGT2_E_OFF; DGT2_F_OFF;
 8000c8a:	2201      	movs	r2, #1
 8000c8c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000c90:	4849      	ldr	r0, [pc, #292]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000c92:	f003 fce3 	bl	800465c <HAL_GPIO_WritePin>
 8000c96:	2201      	movs	r2, #1
 8000c98:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000c9c:	4846      	ldr	r0, [pc, #280]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000c9e:	f003 fcdd 	bl	800465c <HAL_GPIO_WritePin>
				break;
 8000ca2:	e10c      	b.n	8000ebe <_7SEG_SetNumber+0x792>
			case 4: DGT2_F_ON; DGT2_G_ON; DGT2_B_ON; DGT2_C_ON;
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000caa:	4843      	ldr	r0, [pc, #268]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000cac:	f003 fcd6 	bl	800465c <HAL_GPIO_WritePin>
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000cb6:	4840      	ldr	r0, [pc, #256]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000cb8:	f003 fcd0 	bl	800465c <HAL_GPIO_WritePin>
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000cc2:	483d      	ldr	r0, [pc, #244]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000cc4:	f003 fcca 	bl	800465c <HAL_GPIO_WritePin>
 8000cc8:	2200      	movs	r2, #0
 8000cca:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000cce:	483a      	ldr	r0, [pc, #232]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000cd0:	f003 fcc4 	bl	800465c <HAL_GPIO_WritePin>
					DGT2_A_OFF; DGT2_D_OFF; DGT2_E_OFF;
 8000cd4:	2201      	movs	r2, #1
 8000cd6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000cda:	4837      	ldr	r0, [pc, #220]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000cdc:	f003 fcbe 	bl	800465c <HAL_GPIO_WritePin>
 8000ce0:	2201      	movs	r2, #1
 8000ce2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000ce6:	4834      	ldr	r0, [pc, #208]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000ce8:	f003 fcb8 	bl	800465c <HAL_GPIO_WritePin>
 8000cec:	2201      	movs	r2, #1
 8000cee:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000cf2:	4831      	ldr	r0, [pc, #196]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000cf4:	f003 fcb2 	bl	800465c <HAL_GPIO_WritePin>
				break;
 8000cf8:	e0e1      	b.n	8000ebe <_7SEG_SetNumber+0x792>
			case 5: DGT2_A_ON; DGT2_F_ON; DGT2_G_ON; DGT2_C_ON; DGT2_D_ON;
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000d00:	482d      	ldr	r0, [pc, #180]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000d02:	f003 fcab 	bl	800465c <HAL_GPIO_WritePin>
 8000d06:	2200      	movs	r2, #0
 8000d08:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000d0c:	482a      	ldr	r0, [pc, #168]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000d0e:	f003 fca5 	bl	800465c <HAL_GPIO_WritePin>
 8000d12:	2200      	movs	r2, #0
 8000d14:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000d18:	4827      	ldr	r0, [pc, #156]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000d1a:	f003 fc9f 	bl	800465c <HAL_GPIO_WritePin>
 8000d1e:	2200      	movs	r2, #0
 8000d20:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000d24:	4824      	ldr	r0, [pc, #144]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000d26:	f003 fc99 	bl	800465c <HAL_GPIO_WritePin>
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000d30:	4821      	ldr	r0, [pc, #132]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000d32:	f003 fc93 	bl	800465c <HAL_GPIO_WritePin>
					DGT2_B_OFF; DGT2_E_OFF;
 8000d36:	2201      	movs	r2, #1
 8000d38:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000d3c:	481e      	ldr	r0, [pc, #120]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000d3e:	f003 fc8d 	bl	800465c <HAL_GPIO_WritePin>
 8000d42:	2201      	movs	r2, #1
 8000d44:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000d48:	481b      	ldr	r0, [pc, #108]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000d4a:	f003 fc87 	bl	800465c <HAL_GPIO_WritePin>
				break;
 8000d4e:	e0b6      	b.n	8000ebe <_7SEG_SetNumber+0x792>
			case 6: DGT2_A_ON; DGT2_C_ON; DGT2_D_ON; DGT2_E_ON; DGT2_F_ON; DGT2_G_ON;
 8000d50:	2200      	movs	r2, #0
 8000d52:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000d56:	4818      	ldr	r0, [pc, #96]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000d58:	f003 fc80 	bl	800465c <HAL_GPIO_WritePin>
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000d62:	4815      	ldr	r0, [pc, #84]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000d64:	f003 fc7a 	bl	800465c <HAL_GPIO_WritePin>
 8000d68:	2200      	movs	r2, #0
 8000d6a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000d6e:	4812      	ldr	r0, [pc, #72]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000d70:	f003 fc74 	bl	800465c <HAL_GPIO_WritePin>
 8000d74:	2200      	movs	r2, #0
 8000d76:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000d7a:	480f      	ldr	r0, [pc, #60]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000d7c:	f003 fc6e 	bl	800465c <HAL_GPIO_WritePin>
 8000d80:	2200      	movs	r2, #0
 8000d82:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000d86:	480c      	ldr	r0, [pc, #48]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000d88:	f003 fc68 	bl	800465c <HAL_GPIO_WritePin>
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000d92:	4809      	ldr	r0, [pc, #36]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000d94:	f003 fc62 	bl	800465c <HAL_GPIO_WritePin>
					DGT2_B_OFF;
 8000d98:	2201      	movs	r2, #1
 8000d9a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000d9e:	4806      	ldr	r0, [pc, #24]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000da0:	f003 fc5c 	bl	800465c <HAL_GPIO_WritePin>
				break;
 8000da4:	e08b      	b.n	8000ebe <_7SEG_SetNumber+0x792>
 8000da6:	bf00      	nop
 8000da8:	40020c00 	.word	0x40020c00
 8000dac:	40020000 	.word	0x40020000
 8000db0:	40020800 	.word	0x40020800
 8000db4:	66666667 	.word	0x66666667
 8000db8:	40021000 	.word	0x40021000
			case 7: DGT2_F_ON; DGT2_A_ON; DGT2_B_ON; DGT2_C_ON;
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000dc2:	484a      	ldr	r0, [pc, #296]	@ (8000eec <_7SEG_SetNumber+0x7c0>)
 8000dc4:	f003 fc4a 	bl	800465c <HAL_GPIO_WritePin>
 8000dc8:	2200      	movs	r2, #0
 8000dca:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000dce:	4847      	ldr	r0, [pc, #284]	@ (8000eec <_7SEG_SetNumber+0x7c0>)
 8000dd0:	f003 fc44 	bl	800465c <HAL_GPIO_WritePin>
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000dda:	4844      	ldr	r0, [pc, #272]	@ (8000eec <_7SEG_SetNumber+0x7c0>)
 8000ddc:	f003 fc3e 	bl	800465c <HAL_GPIO_WritePin>
 8000de0:	2200      	movs	r2, #0
 8000de2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000de6:	4841      	ldr	r0, [pc, #260]	@ (8000eec <_7SEG_SetNumber+0x7c0>)
 8000de8:	f003 fc38 	bl	800465c <HAL_GPIO_WritePin>
					DGT2_D_OFF; DGT2_E_OFF; DGT2_G_OFF;
 8000dec:	2201      	movs	r2, #1
 8000dee:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000df2:	483e      	ldr	r0, [pc, #248]	@ (8000eec <_7SEG_SetNumber+0x7c0>)
 8000df4:	f003 fc32 	bl	800465c <HAL_GPIO_WritePin>
 8000df8:	2201      	movs	r2, #1
 8000dfa:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000dfe:	483b      	ldr	r0, [pc, #236]	@ (8000eec <_7SEG_SetNumber+0x7c0>)
 8000e00:	f003 fc2c 	bl	800465c <HAL_GPIO_WritePin>
 8000e04:	2201      	movs	r2, #1
 8000e06:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000e0a:	4838      	ldr	r0, [pc, #224]	@ (8000eec <_7SEG_SetNumber+0x7c0>)
 8000e0c:	f003 fc26 	bl	800465c <HAL_GPIO_WritePin>
				break;
 8000e10:	e055      	b.n	8000ebe <_7SEG_SetNumber+0x792>
			case 8: DGT2_A_ON; DGT2_B_ON; DGT2_C_ON; DGT2_D_ON; DGT2_E_ON; DGT2_F_ON; DGT2_G_ON;
 8000e12:	2200      	movs	r2, #0
 8000e14:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000e18:	4834      	ldr	r0, [pc, #208]	@ (8000eec <_7SEG_SetNumber+0x7c0>)
 8000e1a:	f003 fc1f 	bl	800465c <HAL_GPIO_WritePin>
 8000e1e:	2200      	movs	r2, #0
 8000e20:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000e24:	4831      	ldr	r0, [pc, #196]	@ (8000eec <_7SEG_SetNumber+0x7c0>)
 8000e26:	f003 fc19 	bl	800465c <HAL_GPIO_WritePin>
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000e30:	482e      	ldr	r0, [pc, #184]	@ (8000eec <_7SEG_SetNumber+0x7c0>)
 8000e32:	f003 fc13 	bl	800465c <HAL_GPIO_WritePin>
 8000e36:	2200      	movs	r2, #0
 8000e38:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000e3c:	482b      	ldr	r0, [pc, #172]	@ (8000eec <_7SEG_SetNumber+0x7c0>)
 8000e3e:	f003 fc0d 	bl	800465c <HAL_GPIO_WritePin>
 8000e42:	2200      	movs	r2, #0
 8000e44:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000e48:	4828      	ldr	r0, [pc, #160]	@ (8000eec <_7SEG_SetNumber+0x7c0>)
 8000e4a:	f003 fc07 	bl	800465c <HAL_GPIO_WritePin>
 8000e4e:	2200      	movs	r2, #0
 8000e50:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000e54:	4825      	ldr	r0, [pc, #148]	@ (8000eec <_7SEG_SetNumber+0x7c0>)
 8000e56:	f003 fc01 	bl	800465c <HAL_GPIO_WritePin>
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000e60:	4822      	ldr	r0, [pc, #136]	@ (8000eec <_7SEG_SetNumber+0x7c0>)
 8000e62:	f003 fbfb 	bl	800465c <HAL_GPIO_WritePin>
				break;
 8000e66:	e02a      	b.n	8000ebe <_7SEG_SetNumber+0x792>
			case 9: DGT2_A_ON; DGT2_B_ON; DGT2_C_ON; DGT2_D_ON; DGT2_F_ON; DGT2_G_ON;
 8000e68:	2200      	movs	r2, #0
 8000e6a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000e6e:	481f      	ldr	r0, [pc, #124]	@ (8000eec <_7SEG_SetNumber+0x7c0>)
 8000e70:	f003 fbf4 	bl	800465c <HAL_GPIO_WritePin>
 8000e74:	2200      	movs	r2, #0
 8000e76:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000e7a:	481c      	ldr	r0, [pc, #112]	@ (8000eec <_7SEG_SetNumber+0x7c0>)
 8000e7c:	f003 fbee 	bl	800465c <HAL_GPIO_WritePin>
 8000e80:	2200      	movs	r2, #0
 8000e82:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000e86:	4819      	ldr	r0, [pc, #100]	@ (8000eec <_7SEG_SetNumber+0x7c0>)
 8000e88:	f003 fbe8 	bl	800465c <HAL_GPIO_WritePin>
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000e92:	4816      	ldr	r0, [pc, #88]	@ (8000eec <_7SEG_SetNumber+0x7c0>)
 8000e94:	f003 fbe2 	bl	800465c <HAL_GPIO_WritePin>
 8000e98:	2200      	movs	r2, #0
 8000e9a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000e9e:	4813      	ldr	r0, [pc, #76]	@ (8000eec <_7SEG_SetNumber+0x7c0>)
 8000ea0:	f003 fbdc 	bl	800465c <HAL_GPIO_WritePin>
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000eaa:	4810      	ldr	r0, [pc, #64]	@ (8000eec <_7SEG_SetNumber+0x7c0>)
 8000eac:	f003 fbd6 	bl	800465c <HAL_GPIO_WritePin>
					DGT2_E_OFF;
 8000eb0:	2201      	movs	r2, #1
 8000eb2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000eb6:	480d      	ldr	r0, [pc, #52]	@ (8000eec <_7SEG_SetNumber+0x7c0>)
 8000eb8:	f003 fbd0 	bl	800465c <HAL_GPIO_WritePin>
				break;
 8000ebc:	bf00      	nop
		if(dp == ON)
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	2b01      	cmp	r3, #1
 8000ec2:	d106      	bne.n	8000ed2 <_7SEG_SetNumber+0x7a6>
			DGT2_DP_ON;
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000eca:	4808      	ldr	r0, [pc, #32]	@ (8000eec <_7SEG_SetNumber+0x7c0>)
 8000ecc:	f003 fbc6 	bl	800465c <HAL_GPIO_WritePin>
}
 8000ed0:	e008      	b.n	8000ee4 <_7SEG_SetNumber+0x7b8>
		else if(dp == OFF)
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d105      	bne.n	8000ee4 <_7SEG_SetNumber+0x7b8>
			DGT2_DP_OFF;
 8000ed8:	2201      	movs	r2, #1
 8000eda:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000ede:	4803      	ldr	r0, [pc, #12]	@ (8000eec <_7SEG_SetNumber+0x7c0>)
 8000ee0:	f003 fbbc 	bl	800465c <HAL_GPIO_WritePin>
}
 8000ee4:	bf00      	nop
 8000ee6:	3710      	adds	r7, #16
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	40021000 	.word	0x40021000

08000ef0 <CLCD_GPIO_Init>:
 */

#include "CLCD.h"

void CLCD_GPIO_Init(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b086      	sub	sp, #24
 8000ef4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct;

	/* GPIOE Periph clock enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	603b      	str	r3, [r7, #0]
 8000efa:	4b23      	ldr	r3, [pc, #140]	@ (8000f88 <CLCD_GPIO_Init+0x98>)
 8000efc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000efe:	4a22      	ldr	r2, [pc, #136]	@ (8000f88 <CLCD_GPIO_Init+0x98>)
 8000f00:	f043 0310 	orr.w	r3, r3, #16
 8000f04:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f06:	4b20      	ldr	r3, [pc, #128]	@ (8000f88 <CLCD_GPIO_Init+0x98>)
 8000f08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f0a:	f003 0310 	and.w	r3, r3, #16
 8000f0e:	603b      	str	r3, [r7, #0]
 8000f10:	683b      	ldr	r3, [r7, #0]

	/* Configure RS, RW, EN, D4, D5, D6, D7 in output pushpull mode */
	GPIO_InitStruct.Pin = GPIO_PIN_RS;
 8000f12:	2301      	movs	r3, #1
 8000f14:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f16:	2301      	movs	r3, #1
 8000f18:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIO_RS, &GPIO_InitStruct);
 8000f22:	1d3b      	adds	r3, r7, #4
 8000f24:	4619      	mov	r1, r3
 8000f26:	4819      	ldr	r0, [pc, #100]	@ (8000f8c <CLCD_GPIO_Init+0x9c>)
 8000f28:	f003 f9e4 	bl	80042f4 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = GPIO_PIN_RW;
 8000f2c:	2302      	movs	r3, #2
 8000f2e:	607b      	str	r3, [r7, #4]
	HAL_GPIO_Init(GPIO_RW, &GPIO_InitStruct);
 8000f30:	1d3b      	adds	r3, r7, #4
 8000f32:	4619      	mov	r1, r3
 8000f34:	4815      	ldr	r0, [pc, #84]	@ (8000f8c <CLCD_GPIO_Init+0x9c>)
 8000f36:	f003 f9dd 	bl	80042f4 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = GPIO_PIN_EN;
 8000f3a:	2304      	movs	r3, #4
 8000f3c:	607b      	str	r3, [r7, #4]
	HAL_GPIO_Init(GPIO_EN, &GPIO_InitStruct);
 8000f3e:	1d3b      	adds	r3, r7, #4
 8000f40:	4619      	mov	r1, r3
 8000f42:	4812      	ldr	r0, [pc, #72]	@ (8000f8c <CLCD_GPIO_Init+0x9c>)
 8000f44:	f003 f9d6 	bl	80042f4 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = GPIO_PIN_D4;
 8000f48:	2310      	movs	r3, #16
 8000f4a:	607b      	str	r3, [r7, #4]
	HAL_GPIO_Init(GPIO_D4, &GPIO_InitStruct);
 8000f4c:	1d3b      	adds	r3, r7, #4
 8000f4e:	4619      	mov	r1, r3
 8000f50:	480e      	ldr	r0, [pc, #56]	@ (8000f8c <CLCD_GPIO_Init+0x9c>)
 8000f52:	f003 f9cf 	bl	80042f4 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = GPIO_PIN_D5;
 8000f56:	2320      	movs	r3, #32
 8000f58:	607b      	str	r3, [r7, #4]
	HAL_GPIO_Init(GPIO_D5, &GPIO_InitStruct);
 8000f5a:	1d3b      	adds	r3, r7, #4
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	480b      	ldr	r0, [pc, #44]	@ (8000f8c <CLCD_GPIO_Init+0x9c>)
 8000f60:	f003 f9c8 	bl	80042f4 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = GPIO_PIN_D6;
 8000f64:	2340      	movs	r3, #64	@ 0x40
 8000f66:	607b      	str	r3, [r7, #4]
	HAL_GPIO_Init(GPIO_D6, &GPIO_InitStruct);
 8000f68:	1d3b      	adds	r3, r7, #4
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	4807      	ldr	r0, [pc, #28]	@ (8000f8c <CLCD_GPIO_Init+0x9c>)
 8000f6e:	f003 f9c1 	bl	80042f4 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = GPIO_PIN_D7;
 8000f72:	2380      	movs	r3, #128	@ 0x80
 8000f74:	607b      	str	r3, [r7, #4]
	HAL_GPIO_Init(GPIO_D7, &GPIO_InitStruct);
 8000f76:	1d3b      	adds	r3, r7, #4
 8000f78:	4619      	mov	r1, r3
 8000f7a:	4804      	ldr	r0, [pc, #16]	@ (8000f8c <CLCD_GPIO_Init+0x9c>)
 8000f7c:	f003 f9ba 	bl	80042f4 <HAL_GPIO_Init>
}
 8000f80:	bf00      	nop
 8000f82:	3718      	adds	r7, #24
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	40023800 	.word	0x40023800
 8000f8c:	40021000 	.word	0x40021000

08000f90 <CLCD_Write_Instruction>:

void CLCD_Write_Instruction(unsigned char b)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b082      	sub	sp, #8
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	4603      	mov	r3, r0
 8000f98:	71fb      	strb	r3, [r7, #7]
	//���� 4��Ʈ
	GPIO_D7->ODR = (b & 0x80) ? GPIO_D7->ODR | GPIO_PIN_D7 : GPIO_D7->ODR & ~GPIO_PIN_D7; //D7
 8000f9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	da04      	bge.n	8000fac <CLCD_Write_Instruction+0x1c>
 8000fa2:	4b5f      	ldr	r3, [pc, #380]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 8000fa4:	695b      	ldr	r3, [r3, #20]
 8000fa6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000faa:	e003      	b.n	8000fb4 <CLCD_Write_Instruction+0x24>
 8000fac:	4b5c      	ldr	r3, [pc, #368]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 8000fae:	695b      	ldr	r3, [r3, #20]
 8000fb0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000fb4:	4a5a      	ldr	r2, [pc, #360]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 8000fb6:	6153      	str	r3, [r2, #20]
	GPIO_D6->ODR = (b & 0x40) ? GPIO_D6->ODR | GPIO_PIN_D6 : GPIO_D6->ODR & ~GPIO_PIN_D6; //D6
 8000fb8:	79fb      	ldrb	r3, [r7, #7]
 8000fba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d004      	beq.n	8000fcc <CLCD_Write_Instruction+0x3c>
 8000fc2:	4b57      	ldr	r3, [pc, #348]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 8000fc4:	695b      	ldr	r3, [r3, #20]
 8000fc6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000fca:	e003      	b.n	8000fd4 <CLCD_Write_Instruction+0x44>
 8000fcc:	4b54      	ldr	r3, [pc, #336]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 8000fce:	695b      	ldr	r3, [r3, #20]
 8000fd0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000fd4:	4a52      	ldr	r2, [pc, #328]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 8000fd6:	6153      	str	r3, [r2, #20]
	GPIO_D5->ODR = (b & 0x20) ? GPIO_D5->ODR | GPIO_PIN_D5 : GPIO_D5->ODR & ~GPIO_PIN_D5; //D5
 8000fd8:	79fb      	ldrb	r3, [r7, #7]
 8000fda:	f003 0320 	and.w	r3, r3, #32
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d004      	beq.n	8000fec <CLCD_Write_Instruction+0x5c>
 8000fe2:	4b4f      	ldr	r3, [pc, #316]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 8000fe4:	695b      	ldr	r3, [r3, #20]
 8000fe6:	f043 0320 	orr.w	r3, r3, #32
 8000fea:	e003      	b.n	8000ff4 <CLCD_Write_Instruction+0x64>
 8000fec:	4b4c      	ldr	r3, [pc, #304]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 8000fee:	695b      	ldr	r3, [r3, #20]
 8000ff0:	f023 0320 	bic.w	r3, r3, #32
 8000ff4:	4a4a      	ldr	r2, [pc, #296]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 8000ff6:	6153      	str	r3, [r2, #20]
	GPIO_D4->ODR = (b & 0x10) ? GPIO_D4->ODR | GPIO_PIN_D4 : GPIO_D4->ODR & ~GPIO_PIN_D4; //D4
 8000ff8:	79fb      	ldrb	r3, [r7, #7]
 8000ffa:	f003 0310 	and.w	r3, r3, #16
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d004      	beq.n	800100c <CLCD_Write_Instruction+0x7c>
 8001002:	4b47      	ldr	r3, [pc, #284]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 8001004:	695b      	ldr	r3, [r3, #20]
 8001006:	f043 0310 	orr.w	r3, r3, #16
 800100a:	e003      	b.n	8001014 <CLCD_Write_Instruction+0x84>
 800100c:	4b44      	ldr	r3, [pc, #272]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 800100e:	695b      	ldr	r3, [r3, #20]
 8001010:	f023 0310 	bic.w	r3, r3, #16
 8001014:	4a42      	ldr	r2, [pc, #264]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 8001016:	6153      	str	r3, [r2, #20]

	GPIO_RS->ODR = GPIO_RS->ODR & ~GPIO_PIN_RS; //RS�� Low
 8001018:	4b41      	ldr	r3, [pc, #260]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 800101a:	695b      	ldr	r3, [r3, #20]
 800101c:	4a40      	ldr	r2, [pc, #256]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 800101e:	f023 0301 	bic.w	r3, r3, #1
 8001022:	6153      	str	r3, [r2, #20]
	GPIO_RW->ODR = GPIO_RW->ODR & ~GPIO_PIN_RW; //RW�� Low
 8001024:	4b3e      	ldr	r3, [pc, #248]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 8001026:	695b      	ldr	r3, [r3, #20]
 8001028:	4a3d      	ldr	r2, [pc, #244]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 800102a:	f023 0302 	bic.w	r3, r3, #2
 800102e:	6153      	str	r3, [r2, #20]
	GPIO_EN->ODR = GPIO_EN->ODR & ~GPIO_PIN_EN; //EN�� Low
 8001030:	4b3b      	ldr	r3, [pc, #236]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 8001032:	695b      	ldr	r3, [r3, #20]
 8001034:	4a3a      	ldr	r2, [pc, #232]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 8001036:	f023 0304 	bic.w	r3, r3, #4
 800103a:	6153      	str	r3, [r2, #20]

	GPIO_EN->ODR = GPIO_EN->ODR | GPIO_PIN_EN; //EN�� High
 800103c:	4b38      	ldr	r3, [pc, #224]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 800103e:	695b      	ldr	r3, [r3, #20]
 8001040:	4a37      	ldr	r2, [pc, #220]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 8001042:	f043 0304 	orr.w	r3, r3, #4
 8001046:	6153      	str	r3, [r2, #20]
	GPIO_EN->ODR = GPIO_EN->ODR & ~GPIO_PIN_EN; //EN�� Low
 8001048:	4b35      	ldr	r3, [pc, #212]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 800104a:	695b      	ldr	r3, [r3, #20]
 800104c:	4a34      	ldr	r2, [pc, #208]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 800104e:	f023 0304 	bic.w	r3, r3, #4
 8001052:	6153      	str	r3, [r2, #20]

	//���� 4��Ʈ
	GPIO_D7->ODR = (b & 0x08) ? GPIO_D7->ODR | GPIO_PIN_D7 : GPIO_D7->ODR & ~GPIO_PIN_D7; //D7
 8001054:	79fb      	ldrb	r3, [r7, #7]
 8001056:	f003 0308 	and.w	r3, r3, #8
 800105a:	2b00      	cmp	r3, #0
 800105c:	d004      	beq.n	8001068 <CLCD_Write_Instruction+0xd8>
 800105e:	4b30      	ldr	r3, [pc, #192]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 8001060:	695b      	ldr	r3, [r3, #20]
 8001062:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001066:	e003      	b.n	8001070 <CLCD_Write_Instruction+0xe0>
 8001068:	4b2d      	ldr	r3, [pc, #180]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 800106a:	695b      	ldr	r3, [r3, #20]
 800106c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001070:	4a2b      	ldr	r2, [pc, #172]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 8001072:	6153      	str	r3, [r2, #20]
	GPIO_D6->ODR = (b & 0x04) ? GPIO_D6->ODR | GPIO_PIN_D6 : GPIO_D6->ODR & ~GPIO_PIN_D6; //D6
 8001074:	79fb      	ldrb	r3, [r7, #7]
 8001076:	f003 0304 	and.w	r3, r3, #4
 800107a:	2b00      	cmp	r3, #0
 800107c:	d004      	beq.n	8001088 <CLCD_Write_Instruction+0xf8>
 800107e:	4b28      	ldr	r3, [pc, #160]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 8001080:	695b      	ldr	r3, [r3, #20]
 8001082:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001086:	e003      	b.n	8001090 <CLCD_Write_Instruction+0x100>
 8001088:	4b25      	ldr	r3, [pc, #148]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 800108a:	695b      	ldr	r3, [r3, #20]
 800108c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001090:	4a23      	ldr	r2, [pc, #140]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 8001092:	6153      	str	r3, [r2, #20]
	GPIO_D5->ODR = (b & 0x02) ? GPIO_D5->ODR | GPIO_PIN_D5 : GPIO_D5->ODR & ~GPIO_PIN_D5; //D5
 8001094:	79fb      	ldrb	r3, [r7, #7]
 8001096:	f003 0302 	and.w	r3, r3, #2
 800109a:	2b00      	cmp	r3, #0
 800109c:	d004      	beq.n	80010a8 <CLCD_Write_Instruction+0x118>
 800109e:	4b20      	ldr	r3, [pc, #128]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 80010a0:	695b      	ldr	r3, [r3, #20]
 80010a2:	f043 0320 	orr.w	r3, r3, #32
 80010a6:	e003      	b.n	80010b0 <CLCD_Write_Instruction+0x120>
 80010a8:	4b1d      	ldr	r3, [pc, #116]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 80010aa:	695b      	ldr	r3, [r3, #20]
 80010ac:	f023 0320 	bic.w	r3, r3, #32
 80010b0:	4a1b      	ldr	r2, [pc, #108]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 80010b2:	6153      	str	r3, [r2, #20]
	GPIO_D4->ODR = (b & 0x01) ? GPIO_D4->ODR | GPIO_PIN_D4 : GPIO_D4->ODR & ~GPIO_PIN_D4; //D4
 80010b4:	79fb      	ldrb	r3, [r7, #7]
 80010b6:	f003 0301 	and.w	r3, r3, #1
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d004      	beq.n	80010c8 <CLCD_Write_Instruction+0x138>
 80010be:	4b18      	ldr	r3, [pc, #96]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 80010c0:	695b      	ldr	r3, [r3, #20]
 80010c2:	f043 0310 	orr.w	r3, r3, #16
 80010c6:	e003      	b.n	80010d0 <CLCD_Write_Instruction+0x140>
 80010c8:	4b15      	ldr	r3, [pc, #84]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 80010ca:	695b      	ldr	r3, [r3, #20]
 80010cc:	f023 0310 	bic.w	r3, r3, #16
 80010d0:	4a13      	ldr	r2, [pc, #76]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 80010d2:	6153      	str	r3, [r2, #20]

	GPIO_RS->ODR = GPIO_RS->ODR & ~GPIO_PIN_RS; //RS�� Low
 80010d4:	4b12      	ldr	r3, [pc, #72]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 80010d6:	695b      	ldr	r3, [r3, #20]
 80010d8:	4a11      	ldr	r2, [pc, #68]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 80010da:	f023 0301 	bic.w	r3, r3, #1
 80010de:	6153      	str	r3, [r2, #20]
	GPIO_RW->ODR = GPIO_RW->ODR & ~GPIO_PIN_RW; //RW�� Low
 80010e0:	4b0f      	ldr	r3, [pc, #60]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 80010e2:	695b      	ldr	r3, [r3, #20]
 80010e4:	4a0e      	ldr	r2, [pc, #56]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 80010e6:	f023 0302 	bic.w	r3, r3, #2
 80010ea:	6153      	str	r3, [r2, #20]
	GPIO_EN->ODR = GPIO_EN->ODR & ~GPIO_PIN_EN; //EN�� Low
 80010ec:	4b0c      	ldr	r3, [pc, #48]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 80010ee:	695b      	ldr	r3, [r3, #20]
 80010f0:	4a0b      	ldr	r2, [pc, #44]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 80010f2:	f023 0304 	bic.w	r3, r3, #4
 80010f6:	6153      	str	r3, [r2, #20]

	GPIO_EN->ODR = GPIO_EN->ODR | GPIO_PIN_EN; //EN�� High
 80010f8:	4b09      	ldr	r3, [pc, #36]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 80010fa:	695b      	ldr	r3, [r3, #20]
 80010fc:	4a08      	ldr	r2, [pc, #32]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 80010fe:	f043 0304 	orr.w	r3, r3, #4
 8001102:	6153      	str	r3, [r2, #20]
	GPIO_EN->ODR = GPIO_EN->ODR & ~GPIO_PIN_EN; //EN�� Low
 8001104:	4b06      	ldr	r3, [pc, #24]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 8001106:	695b      	ldr	r3, [r3, #20]
 8001108:	4a05      	ldr	r2, [pc, #20]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 800110a:	f023 0304 	bic.w	r3, r3, #4
 800110e:	6153      	str	r3, [r2, #20]

	HAL_Delay(1);
 8001110:	2001      	movs	r0, #1
 8001112:	f002 ff27 	bl	8003f64 <HAL_Delay>
}
 8001116:	bf00      	nop
 8001118:	3708      	adds	r7, #8
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	40021000 	.word	0x40021000

08001124 <CLCD_Write_Display>:

void CLCD_Write_Display(unsigned char b)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b082      	sub	sp, #8
 8001128:	af00      	add	r7, sp, #0
 800112a:	4603      	mov	r3, r0
 800112c:	71fb      	strb	r3, [r7, #7]
	//���� 4��Ʈ
	GPIO_D7->ODR = (b & 0x80) ? GPIO_D7->ODR | GPIO_PIN_D7 : GPIO_D7->ODR & ~GPIO_PIN_D7; //D7
 800112e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001132:	2b00      	cmp	r3, #0
 8001134:	da04      	bge.n	8001140 <CLCD_Write_Display+0x1c>
 8001136:	4b5f      	ldr	r3, [pc, #380]	@ (80012b4 <CLCD_Write_Display+0x190>)
 8001138:	695b      	ldr	r3, [r3, #20]
 800113a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800113e:	e003      	b.n	8001148 <CLCD_Write_Display+0x24>
 8001140:	4b5c      	ldr	r3, [pc, #368]	@ (80012b4 <CLCD_Write_Display+0x190>)
 8001142:	695b      	ldr	r3, [r3, #20]
 8001144:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001148:	4a5a      	ldr	r2, [pc, #360]	@ (80012b4 <CLCD_Write_Display+0x190>)
 800114a:	6153      	str	r3, [r2, #20]
	GPIO_D6->ODR = (b & 0x40) ? GPIO_D6->ODR | GPIO_PIN_D6 : GPIO_D6->ODR & ~GPIO_PIN_D6; //D6
 800114c:	79fb      	ldrb	r3, [r7, #7]
 800114e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001152:	2b00      	cmp	r3, #0
 8001154:	d004      	beq.n	8001160 <CLCD_Write_Display+0x3c>
 8001156:	4b57      	ldr	r3, [pc, #348]	@ (80012b4 <CLCD_Write_Display+0x190>)
 8001158:	695b      	ldr	r3, [r3, #20]
 800115a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800115e:	e003      	b.n	8001168 <CLCD_Write_Display+0x44>
 8001160:	4b54      	ldr	r3, [pc, #336]	@ (80012b4 <CLCD_Write_Display+0x190>)
 8001162:	695b      	ldr	r3, [r3, #20]
 8001164:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001168:	4a52      	ldr	r2, [pc, #328]	@ (80012b4 <CLCD_Write_Display+0x190>)
 800116a:	6153      	str	r3, [r2, #20]
	GPIO_D5->ODR = (b & 0x20) ? GPIO_D5->ODR | GPIO_PIN_D5 : GPIO_D5->ODR & ~GPIO_PIN_D5; //D5
 800116c:	79fb      	ldrb	r3, [r7, #7]
 800116e:	f003 0320 	and.w	r3, r3, #32
 8001172:	2b00      	cmp	r3, #0
 8001174:	d004      	beq.n	8001180 <CLCD_Write_Display+0x5c>
 8001176:	4b4f      	ldr	r3, [pc, #316]	@ (80012b4 <CLCD_Write_Display+0x190>)
 8001178:	695b      	ldr	r3, [r3, #20]
 800117a:	f043 0320 	orr.w	r3, r3, #32
 800117e:	e003      	b.n	8001188 <CLCD_Write_Display+0x64>
 8001180:	4b4c      	ldr	r3, [pc, #304]	@ (80012b4 <CLCD_Write_Display+0x190>)
 8001182:	695b      	ldr	r3, [r3, #20]
 8001184:	f023 0320 	bic.w	r3, r3, #32
 8001188:	4a4a      	ldr	r2, [pc, #296]	@ (80012b4 <CLCD_Write_Display+0x190>)
 800118a:	6153      	str	r3, [r2, #20]
	GPIO_D4->ODR = (b & 0x10) ? GPIO_D4->ODR | GPIO_PIN_D4 : GPIO_D4->ODR & ~GPIO_PIN_D4; //D4
 800118c:	79fb      	ldrb	r3, [r7, #7]
 800118e:	f003 0310 	and.w	r3, r3, #16
 8001192:	2b00      	cmp	r3, #0
 8001194:	d004      	beq.n	80011a0 <CLCD_Write_Display+0x7c>
 8001196:	4b47      	ldr	r3, [pc, #284]	@ (80012b4 <CLCD_Write_Display+0x190>)
 8001198:	695b      	ldr	r3, [r3, #20]
 800119a:	f043 0310 	orr.w	r3, r3, #16
 800119e:	e003      	b.n	80011a8 <CLCD_Write_Display+0x84>
 80011a0:	4b44      	ldr	r3, [pc, #272]	@ (80012b4 <CLCD_Write_Display+0x190>)
 80011a2:	695b      	ldr	r3, [r3, #20]
 80011a4:	f023 0310 	bic.w	r3, r3, #16
 80011a8:	4a42      	ldr	r2, [pc, #264]	@ (80012b4 <CLCD_Write_Display+0x190>)
 80011aa:	6153      	str	r3, [r2, #20]

	GPIO_RS->ODR = GPIO_RS->ODR | GPIO_PIN_RS; //RS�� High
 80011ac:	4b41      	ldr	r3, [pc, #260]	@ (80012b4 <CLCD_Write_Display+0x190>)
 80011ae:	695b      	ldr	r3, [r3, #20]
 80011b0:	4a40      	ldr	r2, [pc, #256]	@ (80012b4 <CLCD_Write_Display+0x190>)
 80011b2:	f043 0301 	orr.w	r3, r3, #1
 80011b6:	6153      	str	r3, [r2, #20]
	GPIO_RW->ODR = GPIO_RW->ODR & ~GPIO_PIN_RW; //RW�� Low
 80011b8:	4b3e      	ldr	r3, [pc, #248]	@ (80012b4 <CLCD_Write_Display+0x190>)
 80011ba:	695b      	ldr	r3, [r3, #20]
 80011bc:	4a3d      	ldr	r2, [pc, #244]	@ (80012b4 <CLCD_Write_Display+0x190>)
 80011be:	f023 0302 	bic.w	r3, r3, #2
 80011c2:	6153      	str	r3, [r2, #20]
	GPIO_EN->ODR = GPIO_EN->ODR & ~GPIO_PIN_EN; //EN�� Low
 80011c4:	4b3b      	ldr	r3, [pc, #236]	@ (80012b4 <CLCD_Write_Display+0x190>)
 80011c6:	695b      	ldr	r3, [r3, #20]
 80011c8:	4a3a      	ldr	r2, [pc, #232]	@ (80012b4 <CLCD_Write_Display+0x190>)
 80011ca:	f023 0304 	bic.w	r3, r3, #4
 80011ce:	6153      	str	r3, [r2, #20]

	GPIO_EN->ODR = GPIO_EN->ODR | GPIO_PIN_EN; //EN�� High
 80011d0:	4b38      	ldr	r3, [pc, #224]	@ (80012b4 <CLCD_Write_Display+0x190>)
 80011d2:	695b      	ldr	r3, [r3, #20]
 80011d4:	4a37      	ldr	r2, [pc, #220]	@ (80012b4 <CLCD_Write_Display+0x190>)
 80011d6:	f043 0304 	orr.w	r3, r3, #4
 80011da:	6153      	str	r3, [r2, #20]
	GPIO_EN->ODR = GPIO_EN->ODR & ~GPIO_PIN_EN; //EN�� Low
 80011dc:	4b35      	ldr	r3, [pc, #212]	@ (80012b4 <CLCD_Write_Display+0x190>)
 80011de:	695b      	ldr	r3, [r3, #20]
 80011e0:	4a34      	ldr	r2, [pc, #208]	@ (80012b4 <CLCD_Write_Display+0x190>)
 80011e2:	f023 0304 	bic.w	r3, r3, #4
 80011e6:	6153      	str	r3, [r2, #20]

	//���� 4��Ʈ
	GPIO_D7->ODR = (b & 0x08) ? GPIO_D7->ODR | GPIO_PIN_D7 : GPIO_D7->ODR & ~GPIO_PIN_D7; //D7
 80011e8:	79fb      	ldrb	r3, [r7, #7]
 80011ea:	f003 0308 	and.w	r3, r3, #8
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d004      	beq.n	80011fc <CLCD_Write_Display+0xd8>
 80011f2:	4b30      	ldr	r3, [pc, #192]	@ (80012b4 <CLCD_Write_Display+0x190>)
 80011f4:	695b      	ldr	r3, [r3, #20]
 80011f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80011fa:	e003      	b.n	8001204 <CLCD_Write_Display+0xe0>
 80011fc:	4b2d      	ldr	r3, [pc, #180]	@ (80012b4 <CLCD_Write_Display+0x190>)
 80011fe:	695b      	ldr	r3, [r3, #20]
 8001200:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001204:	4a2b      	ldr	r2, [pc, #172]	@ (80012b4 <CLCD_Write_Display+0x190>)
 8001206:	6153      	str	r3, [r2, #20]
	GPIO_D6->ODR = (b & 0x04) ? GPIO_D6->ODR | GPIO_PIN_D6 : GPIO_D6->ODR & ~GPIO_PIN_D6; //D6
 8001208:	79fb      	ldrb	r3, [r7, #7]
 800120a:	f003 0304 	and.w	r3, r3, #4
 800120e:	2b00      	cmp	r3, #0
 8001210:	d004      	beq.n	800121c <CLCD_Write_Display+0xf8>
 8001212:	4b28      	ldr	r3, [pc, #160]	@ (80012b4 <CLCD_Write_Display+0x190>)
 8001214:	695b      	ldr	r3, [r3, #20]
 8001216:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800121a:	e003      	b.n	8001224 <CLCD_Write_Display+0x100>
 800121c:	4b25      	ldr	r3, [pc, #148]	@ (80012b4 <CLCD_Write_Display+0x190>)
 800121e:	695b      	ldr	r3, [r3, #20]
 8001220:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001224:	4a23      	ldr	r2, [pc, #140]	@ (80012b4 <CLCD_Write_Display+0x190>)
 8001226:	6153      	str	r3, [r2, #20]
	GPIO_D5->ODR = (b & 0x02) ? GPIO_D5->ODR | GPIO_PIN_D5 : GPIO_D5->ODR & ~GPIO_PIN_D5; //D5
 8001228:	79fb      	ldrb	r3, [r7, #7]
 800122a:	f003 0302 	and.w	r3, r3, #2
 800122e:	2b00      	cmp	r3, #0
 8001230:	d004      	beq.n	800123c <CLCD_Write_Display+0x118>
 8001232:	4b20      	ldr	r3, [pc, #128]	@ (80012b4 <CLCD_Write_Display+0x190>)
 8001234:	695b      	ldr	r3, [r3, #20]
 8001236:	f043 0320 	orr.w	r3, r3, #32
 800123a:	e003      	b.n	8001244 <CLCD_Write_Display+0x120>
 800123c:	4b1d      	ldr	r3, [pc, #116]	@ (80012b4 <CLCD_Write_Display+0x190>)
 800123e:	695b      	ldr	r3, [r3, #20]
 8001240:	f023 0320 	bic.w	r3, r3, #32
 8001244:	4a1b      	ldr	r2, [pc, #108]	@ (80012b4 <CLCD_Write_Display+0x190>)
 8001246:	6153      	str	r3, [r2, #20]
	GPIO_D4->ODR = (b & 0x01) ? GPIO_D4->ODR | GPIO_PIN_D4 : GPIO_D4->ODR & ~GPIO_PIN_D4; //D4
 8001248:	79fb      	ldrb	r3, [r7, #7]
 800124a:	f003 0301 	and.w	r3, r3, #1
 800124e:	2b00      	cmp	r3, #0
 8001250:	d004      	beq.n	800125c <CLCD_Write_Display+0x138>
 8001252:	4b18      	ldr	r3, [pc, #96]	@ (80012b4 <CLCD_Write_Display+0x190>)
 8001254:	695b      	ldr	r3, [r3, #20]
 8001256:	f043 0310 	orr.w	r3, r3, #16
 800125a:	e003      	b.n	8001264 <CLCD_Write_Display+0x140>
 800125c:	4b15      	ldr	r3, [pc, #84]	@ (80012b4 <CLCD_Write_Display+0x190>)
 800125e:	695b      	ldr	r3, [r3, #20]
 8001260:	f023 0310 	bic.w	r3, r3, #16
 8001264:	4a13      	ldr	r2, [pc, #76]	@ (80012b4 <CLCD_Write_Display+0x190>)
 8001266:	6153      	str	r3, [r2, #20]

	GPIO_RS->ODR = GPIO_RS->ODR | GPIO_PIN_RS; //RS�� High
 8001268:	4b12      	ldr	r3, [pc, #72]	@ (80012b4 <CLCD_Write_Display+0x190>)
 800126a:	695b      	ldr	r3, [r3, #20]
 800126c:	4a11      	ldr	r2, [pc, #68]	@ (80012b4 <CLCD_Write_Display+0x190>)
 800126e:	f043 0301 	orr.w	r3, r3, #1
 8001272:	6153      	str	r3, [r2, #20]
	GPIO_RW->ODR = GPIO_RW->ODR & ~GPIO_PIN_RW; //RW�� Low
 8001274:	4b0f      	ldr	r3, [pc, #60]	@ (80012b4 <CLCD_Write_Display+0x190>)
 8001276:	695b      	ldr	r3, [r3, #20]
 8001278:	4a0e      	ldr	r2, [pc, #56]	@ (80012b4 <CLCD_Write_Display+0x190>)
 800127a:	f023 0302 	bic.w	r3, r3, #2
 800127e:	6153      	str	r3, [r2, #20]
	GPIO_EN->ODR = GPIO_EN->ODR & ~GPIO_PIN_EN; //EN�� Low
 8001280:	4b0c      	ldr	r3, [pc, #48]	@ (80012b4 <CLCD_Write_Display+0x190>)
 8001282:	695b      	ldr	r3, [r3, #20]
 8001284:	4a0b      	ldr	r2, [pc, #44]	@ (80012b4 <CLCD_Write_Display+0x190>)
 8001286:	f023 0304 	bic.w	r3, r3, #4
 800128a:	6153      	str	r3, [r2, #20]

	GPIO_EN->ODR = GPIO_EN->ODR | GPIO_PIN_EN; //EN�� High
 800128c:	4b09      	ldr	r3, [pc, #36]	@ (80012b4 <CLCD_Write_Display+0x190>)
 800128e:	695b      	ldr	r3, [r3, #20]
 8001290:	4a08      	ldr	r2, [pc, #32]	@ (80012b4 <CLCD_Write_Display+0x190>)
 8001292:	f043 0304 	orr.w	r3, r3, #4
 8001296:	6153      	str	r3, [r2, #20]
	GPIO_EN->ODR = GPIO_EN->ODR & ~GPIO_PIN_EN; //EN�� Low
 8001298:	4b06      	ldr	r3, [pc, #24]	@ (80012b4 <CLCD_Write_Display+0x190>)
 800129a:	695b      	ldr	r3, [r3, #20]
 800129c:	4a05      	ldr	r2, [pc, #20]	@ (80012b4 <CLCD_Write_Display+0x190>)
 800129e:	f023 0304 	bic.w	r3, r3, #4
 80012a2:	6153      	str	r3, [r2, #20]

	HAL_Delay(1);
 80012a4:	2001      	movs	r0, #1
 80012a6:	f002 fe5d 	bl	8003f64 <HAL_Delay>
}
 80012aa:	bf00      	nop
 80012ac:	3708      	adds	r7, #8
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	40021000 	.word	0x40021000

080012b8 <CLCD_Gotoxy>:


void CLCD_Gotoxy(unsigned char x, unsigned char y)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b082      	sub	sp, #8
 80012bc:	af00      	add	r7, sp, #0
 80012be:	4603      	mov	r3, r0
 80012c0:	460a      	mov	r2, r1
 80012c2:	71fb      	strb	r3, [r7, #7]
 80012c4:	4613      	mov	r3, r2
 80012c6:	71bb      	strb	r3, [r7, #6]
	// 16 * 2 character LCD
	switch(y)
 80012c8:	79bb      	ldrb	r3, [r7, #6]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d002      	beq.n	80012d4 <CLCD_Gotoxy+0x1c>
 80012ce:	2b01      	cmp	r3, #1
 80012d0:	d007      	beq.n	80012e2 <CLCD_Gotoxy+0x2a>
		case 0 : CLCD_Write_Instruction(0x80 + x); break;
		case 1 : CLCD_Write_Instruction(0xC0 + x); break;
		//case 2 : CLCD_Write_Instruction(0x90+x); break; //Uncomment for 16 * 4 character LCD
		//case 3 : CLCD_Write_Instruction(0xd0+x); break; //Uncomment for 16 * 4 character LCD
	}
}
 80012d2:	e00d      	b.n	80012f0 <CLCD_Gotoxy+0x38>
		case 0 : CLCD_Write_Instruction(0x80 + x); break;
 80012d4:	79fb      	ldrb	r3, [r7, #7]
 80012d6:	3b80      	subs	r3, #128	@ 0x80
 80012d8:	b2db      	uxtb	r3, r3
 80012da:	4618      	mov	r0, r3
 80012dc:	f7ff fe58 	bl	8000f90 <CLCD_Write_Instruction>
 80012e0:	e006      	b.n	80012f0 <CLCD_Gotoxy+0x38>
		case 1 : CLCD_Write_Instruction(0xC0 + x); break;
 80012e2:	79fb      	ldrb	r3, [r7, #7]
 80012e4:	3b40      	subs	r3, #64	@ 0x40
 80012e6:	b2db      	uxtb	r3, r3
 80012e8:	4618      	mov	r0, r3
 80012ea:	f7ff fe51 	bl	8000f90 <CLCD_Write_Instruction>
 80012ee:	bf00      	nop
}
 80012f0:	bf00      	nop
 80012f2:	3708      	adds	r7, #8
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}

080012f8 <CLCD_Puts>:

void CLCD_Puts(unsigned char x, unsigned char y, unsigned char *str)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b084      	sub	sp, #16
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	4603      	mov	r3, r0
 8001300:	603a      	str	r2, [r7, #0]
 8001302:	71fb      	strb	r3, [r7, #7]
 8001304:	460b      	mov	r3, r1
 8001306:	71bb      	strb	r3, [r7, #6]
	unsigned int i=0;
 8001308:	2300      	movs	r3, #0
 800130a:	60fb      	str	r3, [r7, #12]

	CLCD_Gotoxy(x,y);
 800130c:	79ba      	ldrb	r2, [r7, #6]
 800130e:	79fb      	ldrb	r3, [r7, #7]
 8001310:	4611      	mov	r1, r2
 8001312:	4618      	mov	r0, r3
 8001314:	f7ff ffd0 	bl	80012b8 <CLCD_Gotoxy>
	do
	{
		CLCD_Write_Display(str[i]);
 8001318:	683a      	ldr	r2, [r7, #0]
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	4413      	add	r3, r2
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	4618      	mov	r0, r3
 8001322:	f7ff feff 	bl	8001124 <CLCD_Write_Display>
	}
	while(str[++i]!='\0');
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	3301      	adds	r3, #1
 800132a:	60fb      	str	r3, [r7, #12]
 800132c:	683a      	ldr	r2, [r7, #0]
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	4413      	add	r3, r2
 8001332:	781b      	ldrb	r3, [r3, #0]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d1ef      	bne.n	8001318 <CLCD_Puts+0x20>
}
 8001338:	bf00      	nop
 800133a:	bf00      	nop
 800133c:	3710      	adds	r7, #16
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}

08001342 <CLCD_Init>:

void CLCD_Init(void)
{
 8001342:	b580      	push	{r7, lr}
 8001344:	af00      	add	r7, sp, #0
	HAL_Delay(100);
 8001346:	2064      	movs	r0, #100	@ 0x64
 8001348:	f002 fe0c 	bl	8003f64 <HAL_Delay>
	CLCD_Write_Instruction(0x28);
 800134c:	2028      	movs	r0, #40	@ 0x28
 800134e:	f7ff fe1f 	bl	8000f90 <CLCD_Write_Instruction>
	HAL_Delay(10);
 8001352:	200a      	movs	r0, #10
 8001354:	f002 fe06 	bl	8003f64 <HAL_Delay>
	CLCD_Write_Instruction(0x28);
 8001358:	2028      	movs	r0, #40	@ 0x28
 800135a:	f7ff fe19 	bl	8000f90 <CLCD_Write_Instruction>
	HAL_Delay(10);
 800135e:	200a      	movs	r0, #10
 8001360:	f002 fe00 	bl	8003f64 <HAL_Delay>
	CLCD_Write_Instruction(0x0C);
 8001364:	200c      	movs	r0, #12
 8001366:	f7ff fe13 	bl	8000f90 <CLCD_Write_Instruction>
	CLCD_Write_Instruction(0x06);
 800136a:	2006      	movs	r0, #6
 800136c:	f7ff fe10 	bl	8000f90 <CLCD_Write_Instruction>
	CLCD_Write_Instruction(0x02);
 8001370:	2002      	movs	r0, #2
 8001372:	f7ff fe0d 	bl	8000f90 <CLCD_Write_Instruction>
	CLCD_Write_Instruction(0x01);
 8001376:	2001      	movs	r0, #1
 8001378:	f7ff fe0a 	bl	8000f90 <CLCD_Write_Instruction>
	CLCD_Write_Instruction(0x01);
 800137c:	2001      	movs	r0, #1
 800137e:	f7ff fe07 	bl	8000f90 <CLCD_Write_Instruction>
}
 8001382:	bf00      	nop
 8001384:	bd80      	pop	{r7, pc}

08001386 <CLCD_Clear>:

void CLCD_Clear(void)
{
 8001386:	b580      	push	{r7, lr}
 8001388:	af00      	add	r7, sp, #0
	CLCD_Write_Instruction(0x01);
 800138a:	2001      	movs	r0, #1
 800138c:	f7ff fe00 	bl	8000f90 <CLCD_Write_Instruction>
	HAL_Delay(10);
 8001390:	200a      	movs	r0, #10
 8001392:	f002 fde7 	bl	8003f64 <HAL_Delay>
}
 8001396:	bf00      	nop
 8001398:	bd80      	pop	{r7, pc}
	...

0800139c <clcdDisplayAlarm>:
extern clockSt clock;
extern modeSelector mode;
modeSelector tempMode;
alarmSt alarm = {{{0, 0, 1}, {13, 0, 0}, {14, 1, 0}, {16, 0, 0}, {12, 0, 0}}, 0};
int abcde;
void clcdDisplayAlarm() {
 800139c:	b590      	push	{r4, r7, lr}
 800139e:	b083      	sub	sp, #12
 80013a0:	af02      	add	r7, sp, #8
	sprintf(alarm.buffer, "ALARM #%d %3s    ", alarm.select + 1, (alarm.set[alarm.select].enabled == 0 ? "OFF" : "ON"));
 80013a2:	4b38      	ldr	r3, [pc, #224]	@ (8001484 <clcdDisplayAlarm+0xe8>)
 80013a4:	7bdb      	ldrb	r3, [r3, #15]
 80013a6:	1c5a      	adds	r2, r3, #1
 80013a8:	4b36      	ldr	r3, [pc, #216]	@ (8001484 <clcdDisplayAlarm+0xe8>)
 80013aa:	7bdb      	ldrb	r3, [r3, #15]
 80013ac:	4618      	mov	r0, r3
 80013ae:	4935      	ldr	r1, [pc, #212]	@ (8001484 <clcdDisplayAlarm+0xe8>)
 80013b0:	4603      	mov	r3, r0
 80013b2:	005b      	lsls	r3, r3, #1
 80013b4:	4403      	add	r3, r0
 80013b6:	440b      	add	r3, r1
 80013b8:	3302      	adds	r3, #2
 80013ba:	781b      	ldrb	r3, [r3, #0]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d101      	bne.n	80013c4 <clcdDisplayAlarm+0x28>
 80013c0:	4b31      	ldr	r3, [pc, #196]	@ (8001488 <clcdDisplayAlarm+0xec>)
 80013c2:	e000      	b.n	80013c6 <clcdDisplayAlarm+0x2a>
 80013c4:	4b31      	ldr	r3, [pc, #196]	@ (800148c <clcdDisplayAlarm+0xf0>)
 80013c6:	4932      	ldr	r1, [pc, #200]	@ (8001490 <clcdDisplayAlarm+0xf4>)
 80013c8:	4832      	ldr	r0, [pc, #200]	@ (8001494 <clcdDisplayAlarm+0xf8>)
 80013ca:	f005 fe3f 	bl	800704c <siprintf>
	CLCD_Puts(0, 0, alarm.buffer);
 80013ce:	4a31      	ldr	r2, [pc, #196]	@ (8001494 <clcdDisplayAlarm+0xf8>)
 80013d0:	2100      	movs	r1, #0
 80013d2:	2000      	movs	r0, #0
 80013d4:	f7ff ff90 	bl	80012f8 <CLCD_Puts>
	sprintf(alarm.buffer, "        %s %02d:%02d", (alarm.set[alarm.select].hour < 12 ? "AM" : "PM"),
 80013d8:	4b2a      	ldr	r3, [pc, #168]	@ (8001484 <clcdDisplayAlarm+0xe8>)
 80013da:	7bdb      	ldrb	r3, [r3, #15]
 80013dc:	4619      	mov	r1, r3
 80013de:	4a29      	ldr	r2, [pc, #164]	@ (8001484 <clcdDisplayAlarm+0xe8>)
 80013e0:	460b      	mov	r3, r1
 80013e2:	005b      	lsls	r3, r3, #1
 80013e4:	440b      	add	r3, r1
 80013e6:	4413      	add	r3, r2
 80013e8:	781b      	ldrb	r3, [r3, #0]
 80013ea:	2b0b      	cmp	r3, #11
 80013ec:	d801      	bhi.n	80013f2 <clcdDisplayAlarm+0x56>
 80013ee:	492a      	ldr	r1, [pc, #168]	@ (8001498 <clcdDisplayAlarm+0xfc>)
 80013f0:	e000      	b.n	80013f4 <clcdDisplayAlarm+0x58>
 80013f2:	492a      	ldr	r1, [pc, #168]	@ (800149c <clcdDisplayAlarm+0x100>)
			(alarm.set[alarm.select].hour > 12 ? (alarm.set[alarm.select].hour - 12) : alarm.set[alarm.select].hour == 0 ? 12 : alarm.set[alarm.select].hour),
 80013f4:	4b23      	ldr	r3, [pc, #140]	@ (8001484 <clcdDisplayAlarm+0xe8>)
 80013f6:	7bdb      	ldrb	r3, [r3, #15]
 80013f8:	4618      	mov	r0, r3
 80013fa:	4a22      	ldr	r2, [pc, #136]	@ (8001484 <clcdDisplayAlarm+0xe8>)
 80013fc:	4603      	mov	r3, r0
 80013fe:	005b      	lsls	r3, r3, #1
 8001400:	4403      	add	r3, r0
 8001402:	4413      	add	r3, r2
 8001404:	781b      	ldrb	r3, [r3, #0]
	sprintf(alarm.buffer, "        %s %02d:%02d", (alarm.set[alarm.select].hour < 12 ? "AM" : "PM"),
 8001406:	2b0c      	cmp	r3, #12
 8001408:	d90b      	bls.n	8001422 <clcdDisplayAlarm+0x86>
			(alarm.set[alarm.select].hour > 12 ? (alarm.set[alarm.select].hour - 12) : alarm.set[alarm.select].hour == 0 ? 12 : alarm.set[alarm.select].hour),
 800140a:	4b1e      	ldr	r3, [pc, #120]	@ (8001484 <clcdDisplayAlarm+0xe8>)
 800140c:	7bdb      	ldrb	r3, [r3, #15]
 800140e:	4618      	mov	r0, r3
 8001410:	4a1c      	ldr	r2, [pc, #112]	@ (8001484 <clcdDisplayAlarm+0xe8>)
 8001412:	4603      	mov	r3, r0
 8001414:	005b      	lsls	r3, r3, #1
 8001416:	4403      	add	r3, r0
 8001418:	4413      	add	r3, r2
 800141a:	781b      	ldrb	r3, [r3, #0]
	sprintf(alarm.buffer, "        %s %02d:%02d", (alarm.set[alarm.select].hour < 12 ? "AM" : "PM"),
 800141c:	f1a3 020c 	sub.w	r2, r3, #12
 8001420:	e016      	b.n	8001450 <clcdDisplayAlarm+0xb4>
			(alarm.set[alarm.select].hour > 12 ? (alarm.set[alarm.select].hour - 12) : alarm.set[alarm.select].hour == 0 ? 12 : alarm.set[alarm.select].hour),
 8001422:	4b18      	ldr	r3, [pc, #96]	@ (8001484 <clcdDisplayAlarm+0xe8>)
 8001424:	7bdb      	ldrb	r3, [r3, #15]
 8001426:	4618      	mov	r0, r3
 8001428:	4a16      	ldr	r2, [pc, #88]	@ (8001484 <clcdDisplayAlarm+0xe8>)
 800142a:	4603      	mov	r3, r0
 800142c:	005b      	lsls	r3, r3, #1
 800142e:	4403      	add	r3, r0
 8001430:	4413      	add	r3, r2
 8001432:	781b      	ldrb	r3, [r3, #0]
 8001434:	2b00      	cmp	r3, #0
 8001436:	d00a      	beq.n	800144e <clcdDisplayAlarm+0xb2>
 8001438:	4b12      	ldr	r3, [pc, #72]	@ (8001484 <clcdDisplayAlarm+0xe8>)
 800143a:	7bdb      	ldrb	r3, [r3, #15]
 800143c:	4618      	mov	r0, r3
 800143e:	4a11      	ldr	r2, [pc, #68]	@ (8001484 <clcdDisplayAlarm+0xe8>)
 8001440:	4603      	mov	r3, r0
 8001442:	005b      	lsls	r3, r3, #1
 8001444:	4403      	add	r3, r0
 8001446:	4413      	add	r3, r2
 8001448:	781b      	ldrb	r3, [r3, #0]
 800144a:	461a      	mov	r2, r3
 800144c:	e000      	b.n	8001450 <clcdDisplayAlarm+0xb4>
 800144e:	220c      	movs	r2, #12
			alarm.set[alarm.select].minute);
 8001450:	4b0c      	ldr	r3, [pc, #48]	@ (8001484 <clcdDisplayAlarm+0xe8>)
 8001452:	7bdb      	ldrb	r3, [r3, #15]
 8001454:	461c      	mov	r4, r3
 8001456:	480b      	ldr	r0, [pc, #44]	@ (8001484 <clcdDisplayAlarm+0xe8>)
 8001458:	4623      	mov	r3, r4
 800145a:	005b      	lsls	r3, r3, #1
 800145c:	4423      	add	r3, r4
 800145e:	4403      	add	r3, r0
 8001460:	3301      	adds	r3, #1
 8001462:	781b      	ldrb	r3, [r3, #0]
	sprintf(alarm.buffer, "        %s %02d:%02d", (alarm.set[alarm.select].hour < 12 ? "AM" : "PM"),
 8001464:	9300      	str	r3, [sp, #0]
 8001466:	4613      	mov	r3, r2
 8001468:	460a      	mov	r2, r1
 800146a:	490d      	ldr	r1, [pc, #52]	@ (80014a0 <clcdDisplayAlarm+0x104>)
 800146c:	4809      	ldr	r0, [pc, #36]	@ (8001494 <clcdDisplayAlarm+0xf8>)
 800146e:	f005 fded 	bl	800704c <siprintf>
	CLCD_Puts(0, 1, alarm.buffer);
 8001472:	4a08      	ldr	r2, [pc, #32]	@ (8001494 <clcdDisplayAlarm+0xf8>)
 8001474:	2101      	movs	r1, #1
 8001476:	2000      	movs	r0, #0
 8001478:	f7ff ff3e 	bl	80012f8 <CLCD_Puts>

}
 800147c:	bf00      	nop
 800147e:	3704      	adds	r7, #4
 8001480:	46bd      	mov	sp, r7
 8001482:	bd90      	pop	{r4, r7, pc}
 8001484:	20000000 	.word	0x20000000
 8001488:	080079a4 	.word	0x080079a4
 800148c:	080079a8 	.word	0x080079a8
 8001490:	080079ac 	.word	0x080079ac
 8001494:	20000010 	.word	0x20000010
 8001498:	080079c0 	.word	0x080079c0
 800149c:	080079c4 	.word	0x080079c4
 80014a0:	080079c8 	.word	0x080079c8

080014a4 <clcdDisplayAlarmTrigger>:

void clcdDisplayAlarmTrigger() {
 80014a4:	b580      	push	{r7, lr}
 80014a6:	af00      	add	r7, sp, #0
	if(getBlink() == TRUE) {
 80014a8:	f002 fbfc 	bl	8003ca4 <getBlink>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b01      	cmp	r3, #1
 80014b0:	d104      	bne.n	80014bc <clcdDisplayAlarmTrigger+0x18>
		sprintf(alarm.buffer, "ALARM TRIGGERED!");
 80014b2:	490c      	ldr	r1, [pc, #48]	@ (80014e4 <clcdDisplayAlarmTrigger+0x40>)
 80014b4:	480c      	ldr	r0, [pc, #48]	@ (80014e8 <clcdDisplayAlarmTrigger+0x44>)
 80014b6:	f005 fdc9 	bl	800704c <siprintf>
 80014ba:	e003      	b.n	80014c4 <clcdDisplayAlarmTrigger+0x20>
	} else {
		sprintf(alarm.buffer, "                ");
 80014bc:	490b      	ldr	r1, [pc, #44]	@ (80014ec <clcdDisplayAlarmTrigger+0x48>)
 80014be:	480a      	ldr	r0, [pc, #40]	@ (80014e8 <clcdDisplayAlarmTrigger+0x44>)
 80014c0:	f005 fdc4 	bl	800704c <siprintf>
	}
	CLCD_Puts(0, 0, alarm.buffer);
 80014c4:	4a08      	ldr	r2, [pc, #32]	@ (80014e8 <clcdDisplayAlarmTrigger+0x44>)
 80014c6:	2100      	movs	r1, #0
 80014c8:	2000      	movs	r0, #0
 80014ca:	f7ff ff15 	bl	80012f8 <CLCD_Puts>
	sprintf(alarm.buffer, "                ");
 80014ce:	4907      	ldr	r1, [pc, #28]	@ (80014ec <clcdDisplayAlarmTrigger+0x48>)
 80014d0:	4805      	ldr	r0, [pc, #20]	@ (80014e8 <clcdDisplayAlarmTrigger+0x44>)
 80014d2:	f005 fdbb 	bl	800704c <siprintf>
	CLCD_Puts(0, 1, alarm.buffer);
 80014d6:	4a04      	ldr	r2, [pc, #16]	@ (80014e8 <clcdDisplayAlarmTrigger+0x44>)
 80014d8:	2101      	movs	r1, #1
 80014da:	2000      	movs	r0, #0
 80014dc:	f7ff ff0c 	bl	80012f8 <CLCD_Puts>
}
 80014e0:	bf00      	nop
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	080079e0 	.word	0x080079e0
 80014e8:	20000010 	.word	0x20000010
 80014ec:	080079f4 	.word	0x080079f4

080014f0 <selectAlarm>:
void selectAlarm() {	// sw2 기능 알람 선택
 80014f0:	b480      	push	{r7}
 80014f2:	af00      	add	r7, sp, #0
	if(alarm.select >= ((sizeof(alarm) - 21) / 3) - 1) { // 알람 구조체안에 set 구조체5개의 길이 - 21
 80014f4:	4b09      	ldr	r3, [pc, #36]	@ (800151c <selectAlarm+0x2c>)
 80014f6:	7bdb      	ldrb	r3, [r3, #15]
 80014f8:	2b03      	cmp	r3, #3
 80014fa:	d903      	bls.n	8001504 <selectAlarm+0x14>
		alarm.select = 0;
 80014fc:	4b07      	ldr	r3, [pc, #28]	@ (800151c <selectAlarm+0x2c>)
 80014fe:	2200      	movs	r2, #0
 8001500:	73da      	strb	r2, [r3, #15]
	} else {
		alarm.select++;
	}
}
 8001502:	e005      	b.n	8001510 <selectAlarm+0x20>
		alarm.select++;
 8001504:	4b05      	ldr	r3, [pc, #20]	@ (800151c <selectAlarm+0x2c>)
 8001506:	7bdb      	ldrb	r3, [r3, #15]
 8001508:	3301      	adds	r3, #1
 800150a:	b2da      	uxtb	r2, r3
 800150c:	4b03      	ldr	r3, [pc, #12]	@ (800151c <selectAlarm+0x2c>)
 800150e:	73da      	strb	r2, [r3, #15]
}
 8001510:	bf00      	nop
 8001512:	46bd      	mov	sp, r7
 8001514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001518:	4770      	bx	lr
 800151a:	bf00      	nop
 800151c:	20000000 	.word	0x20000000

08001520 <alarmTrigger>:

void alarmTrigger() {	// 알람 울림
 8001520:	b580      	push	{r7, lr}
 8001522:	b082      	sub	sp, #8
 8001524:	af00      	add	r7, sp, #0
	if(mode == ALARM_TRIGGER) {
 8001526:	4b23      	ldr	r3, [pc, #140]	@ (80015b4 <alarmTrigger+0x94>)
 8001528:	781b      	ldrb	r3, [r3, #0]
 800152a:	2b04      	cmp	r3, #4
 800152c:	d102      	bne.n	8001534 <alarmTrigger+0x14>
		playAlram();
 800152e:	f000 f8e5 	bl	80016fc <playAlram>
			}
		}
	}


}
 8001532:	e03a      	b.n	80015aa <alarmTrigger+0x8a>
		for(int i = 0; i < (sizeof(alarm) - 21) / 3; i++) {	// 5번 동작
 8001534:	2300      	movs	r3, #0
 8001536:	607b      	str	r3, [r7, #4]
 8001538:	e034      	b.n	80015a4 <alarmTrigger+0x84>
			if(alarm.set[i].enabled == TRUE) {	// 알람 활성화 확인
 800153a:	491f      	ldr	r1, [pc, #124]	@ (80015b8 <alarmTrigger+0x98>)
 800153c:	687a      	ldr	r2, [r7, #4]
 800153e:	4613      	mov	r3, r2
 8001540:	005b      	lsls	r3, r3, #1
 8001542:	4413      	add	r3, r2
 8001544:	440b      	add	r3, r1
 8001546:	3302      	adds	r3, #2
 8001548:	781b      	ldrb	r3, [r3, #0]
 800154a:	2b01      	cmp	r3, #1
 800154c:	d127      	bne.n	800159e <alarmTrigger+0x7e>
				if (alarm.set[i].hour == clock.hour
 800154e:	491a      	ldr	r1, [pc, #104]	@ (80015b8 <alarmTrigger+0x98>)
 8001550:	687a      	ldr	r2, [r7, #4]
 8001552:	4613      	mov	r3, r2
 8001554:	005b      	lsls	r3, r3, #1
 8001556:	4413      	add	r3, r2
 8001558:	440b      	add	r3, r1
 800155a:	781b      	ldrb	r3, [r3, #0]
 800155c:	461a      	mov	r2, r3
 800155e:	4b17      	ldr	r3, [pc, #92]	@ (80015bc <alarmTrigger+0x9c>)
 8001560:	68db      	ldr	r3, [r3, #12]
 8001562:	429a      	cmp	r2, r3
 8001564:	d11b      	bne.n	800159e <alarmTrigger+0x7e>
						alarm.set[i].minute == clock.minute && clock.second == 0
 8001566:	4914      	ldr	r1, [pc, #80]	@ (80015b8 <alarmTrigger+0x98>)
 8001568:	687a      	ldr	r2, [r7, #4]
 800156a:	4613      	mov	r3, r2
 800156c:	005b      	lsls	r3, r3, #1
 800156e:	4413      	add	r3, r2
 8001570:	440b      	add	r3, r1
 8001572:	3301      	adds	r3, #1
 8001574:	781b      	ldrb	r3, [r3, #0]
 8001576:	461a      	mov	r2, r3
 8001578:	4b10      	ldr	r3, [pc, #64]	@ (80015bc <alarmTrigger+0x9c>)
 800157a:	691b      	ldr	r3, [r3, #16]
						&&	// 알람 설정 시간의 0초, 0밀리초 될 때 알람 온
 800157c:	429a      	cmp	r2, r3
 800157e:	d10e      	bne.n	800159e <alarmTrigger+0x7e>
						alarm.set[i].minute == clock.minute && clock.second == 0
 8001580:	4b0e      	ldr	r3, [pc, #56]	@ (80015bc <alarmTrigger+0x9c>)
 8001582:	695b      	ldr	r3, [r3, #20]
 8001584:	2b00      	cmp	r3, #0
 8001586:	d10a      	bne.n	800159e <alarmTrigger+0x7e>
						&& clock.millisecond == 0) {
 8001588:	4b0c      	ldr	r3, [pc, #48]	@ (80015bc <alarmTrigger+0x9c>)
 800158a:	699b      	ldr	r3, [r3, #24]
 800158c:	2b00      	cmp	r3, #0
 800158e:	d106      	bne.n	800159e <alarmTrigger+0x7e>
					tempMode = mode;
 8001590:	4b08      	ldr	r3, [pc, #32]	@ (80015b4 <alarmTrigger+0x94>)
 8001592:	781a      	ldrb	r2, [r3, #0]
 8001594:	4b0a      	ldr	r3, [pc, #40]	@ (80015c0 <alarmTrigger+0xa0>)
 8001596:	701a      	strb	r2, [r3, #0]
					mode = ALARM_TRIGGER;
 8001598:	4b06      	ldr	r3, [pc, #24]	@ (80015b4 <alarmTrigger+0x94>)
 800159a:	2204      	movs	r2, #4
 800159c:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < (sizeof(alarm) - 21) / 3; i++) {	// 5번 동작
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	3301      	adds	r3, #1
 80015a2:	607b      	str	r3, [r7, #4]
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	2b04      	cmp	r3, #4
 80015a8:	d9c7      	bls.n	800153a <alarmTrigger+0x1a>
}
 80015aa:	bf00      	nop
 80015ac:	3708      	adds	r7, #8
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	2000030d 	.word	0x2000030d
 80015b8:	20000000 	.word	0x20000000
 80015bc:	2000003c 	.word	0x2000003c
 80015c0:	200001a4 	.word	0x200001a4

080015c4 <returnToPreviousMode>:

void returnToPreviousMode() {
 80015c4:	b480      	push	{r7}
 80015c6:	af00      	add	r7, sp, #0
	mode = tempMode;
 80015c8:	4b04      	ldr	r3, [pc, #16]	@ (80015dc <returnToPreviousMode+0x18>)
 80015ca:	781a      	ldrb	r2, [r3, #0]
 80015cc:	4b04      	ldr	r3, [pc, #16]	@ (80015e0 <returnToPreviousMode+0x1c>)
 80015ce:	701a      	strb	r2, [r3, #0]
}
 80015d0:	bf00      	nop
 80015d2:	46bd      	mov	sp, r7
 80015d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d8:	4770      	bx	lr
 80015da:	bf00      	nop
 80015dc:	200001a4 	.word	0x200001a4
 80015e0:	2000030d 	.word	0x2000030d

080015e4 <getSelect>:

uint8_t getSelect() {
 80015e4:	b480      	push	{r7}
 80015e6:	af00      	add	r7, sp, #0
	return alarm.select;
 80015e8:	4b03      	ldr	r3, [pc, #12]	@ (80015f8 <getSelect+0x14>)
 80015ea:	7bdb      	ldrb	r3, [r3, #15]
}
 80015ec:	4618      	mov	r0, r3
 80015ee:	46bd      	mov	sp, r7
 80015f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f4:	4770      	bx	lr
 80015f6:	bf00      	nop
 80015f8:	20000000 	.word	0x20000000

080015fc <getAlarmEnabled>:

void setSelect(uint8_t s) {
	alarm.select = s;
}
uint8_t getAlarmEnabled(int num) {
 80015fc:	b480      	push	{r7}
 80015fe:	b083      	sub	sp, #12
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
	return alarm.set[num].enabled;
 8001604:	4906      	ldr	r1, [pc, #24]	@ (8001620 <getAlarmEnabled+0x24>)
 8001606:	687a      	ldr	r2, [r7, #4]
 8001608:	4613      	mov	r3, r2
 800160a:	005b      	lsls	r3, r3, #1
 800160c:	4413      	add	r3, r2
 800160e:	440b      	add	r3, r1
 8001610:	3302      	adds	r3, #2
 8001612:	781b      	ldrb	r3, [r3, #0]
}
 8001614:	4618      	mov	r0, r3
 8001616:	370c      	adds	r7, #12
 8001618:	46bd      	mov	sp, r7
 800161a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161e:	4770      	bx	lr
 8001620:	20000000 	.word	0x20000000

08001624 <setAlarmEnabled>:
void setAlarmEnabled(uint8_t enabled, int num) {
 8001624:	b480      	push	{r7}
 8001626:	b083      	sub	sp, #12
 8001628:	af00      	add	r7, sp, #0
 800162a:	4603      	mov	r3, r0
 800162c:	6039      	str	r1, [r7, #0]
 800162e:	71fb      	strb	r3, [r7, #7]
	alarm.set[num].enabled = enabled;
 8001630:	4907      	ldr	r1, [pc, #28]	@ (8001650 <setAlarmEnabled+0x2c>)
 8001632:	683a      	ldr	r2, [r7, #0]
 8001634:	4613      	mov	r3, r2
 8001636:	005b      	lsls	r3, r3, #1
 8001638:	4413      	add	r3, r2
 800163a:	440b      	add	r3, r1
 800163c:	3302      	adds	r3, #2
 800163e:	79fa      	ldrb	r2, [r7, #7]
 8001640:	701a      	strb	r2, [r3, #0]
}
 8001642:	bf00      	nop
 8001644:	370c      	adds	r7, #12
 8001646:	46bd      	mov	sp, r7
 8001648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164c:	4770      	bx	lr
 800164e:	bf00      	nop
 8001650:	20000000 	.word	0x20000000

08001654 <buzOnOff>:

extern TIM_HandleTypeDef htim2;
buzzer buz = {1, 0, 0};
buz_tone_psc buzTone = BUZ_TONE_LOW_PSC;

void buzOnOff() {
 8001654:	b580      	push	{r7, lr}
 8001656:	af00      	add	r7, sp, #0
	if(buz.onOff == TRUE) {
 8001658:	4b13      	ldr	r3, [pc, #76]	@ (80016a8 <buzOnOff+0x54>)
 800165a:	785b      	ldrb	r3, [r3, #1]
 800165c:	2b01      	cmp	r3, #1
 800165e:	d121      	bne.n	80016a4 <buzOnOff+0x50>
		buz.ms++;
 8001660:	4b11      	ldr	r3, [pc, #68]	@ (80016a8 <buzOnOff+0x54>)
 8001662:	789b      	ldrb	r3, [r3, #2]
 8001664:	3301      	adds	r3, #1
 8001666:	b2da      	uxtb	r2, r3
 8001668:	4b0f      	ldr	r3, [pc, #60]	@ (80016a8 <buzOnOff+0x54>)
 800166a:	709a      	strb	r2, [r3, #2]
		if(buz.ms < BUZ_OP_TIME) {
 800166c:	4b0e      	ldr	r3, [pc, #56]	@ (80016a8 <buzOnOff+0x54>)
 800166e:	789b      	ldrb	r3, [r3, #2]
 8001670:	2b1d      	cmp	r3, #29
 8001672:	d809      	bhi.n	8001688 <buzOnOff+0x34>
			TIM2->PSC = buzTone;
 8001674:	4b0d      	ldr	r3, [pc, #52]	@ (80016ac <buzOnOff+0x58>)
 8001676:	881a      	ldrh	r2, [r3, #0]
 8001678:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800167c:	629a      	str	r2, [r3, #40]	@ 0x28
			HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800167e:	2100      	movs	r1, #0
 8001680:	480b      	ldr	r0, [pc, #44]	@ (80016b0 <buzOnOff+0x5c>)
 8001682:	f003 fde9 	bl	8005258 <HAL_TIM_PWM_Start>
			buz.ms = 0;
			HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
		}
	}

}
 8001686:	e00d      	b.n	80016a4 <buzOnOff+0x50>
			buzTone = BUZ_TONE_LOW_PSC;
 8001688:	4b08      	ldr	r3, [pc, #32]	@ (80016ac <buzOnOff+0x58>)
 800168a:	f643 2298 	movw	r2, #15000	@ 0x3a98
 800168e:	801a      	strh	r2, [r3, #0]
			buz.onOff = 0;
 8001690:	4b05      	ldr	r3, [pc, #20]	@ (80016a8 <buzOnOff+0x54>)
 8001692:	2200      	movs	r2, #0
 8001694:	705a      	strb	r2, [r3, #1]
			buz.ms = 0;
 8001696:	4b04      	ldr	r3, [pc, #16]	@ (80016a8 <buzOnOff+0x54>)
 8001698:	2200      	movs	r2, #0
 800169a:	709a      	strb	r2, [r3, #2]
			HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 800169c:	2100      	movs	r1, #0
 800169e:	4804      	ldr	r0, [pc, #16]	@ (80016b0 <buzOnOff+0x5c>)
 80016a0:	f003 fea2 	bl	80053e8 <HAL_TIM_PWM_Stop>
}
 80016a4:	bf00      	nop
 80016a6:	bd80      	pop	{r7, pc}
 80016a8:	20000024 	.word	0x20000024
 80016ac:	20000028 	.word	0x20000028
 80016b0:	200001a8 	.word	0x200001a8

080016b4 <playMidTone>:

void playMidTone() {
 80016b4:	b580      	push	{r7, lr}
 80016b6:	af00      	add	r7, sp, #0
	if(getBuzzEnabled() == TRUE) {
 80016b8:	f000 f8e4 	bl	8001884 <getBuzzEnabled>
 80016bc:	4603      	mov	r3, r0
 80016be:	2b01      	cmp	r3, #1
 80016c0:	d106      	bne.n	80016d0 <playMidTone+0x1c>
		buzTone = BUZ_TONE_MID_PSC;
 80016c2:	4b04      	ldr	r3, [pc, #16]	@ (80016d4 <playMidTone+0x20>)
 80016c4:	f242 7210 	movw	r2, #10000	@ 0x2710
 80016c8:	801a      	strh	r2, [r3, #0]
		setbuzzerOnOff(1);
 80016ca:	2001      	movs	r0, #1
 80016cc:	f000 f8f6 	bl	80018bc <setbuzzerOnOff>
	}
}
 80016d0:	bf00      	nop
 80016d2:	bd80      	pop	{r7, pc}
 80016d4:	20000028 	.word	0x20000028

080016d8 <playHighTone>:

void playHighTone() {
 80016d8:	b580      	push	{r7, lr}
 80016da:	af00      	add	r7, sp, #0
	if(getBuzzEnabled() == TRUE) {
 80016dc:	f000 f8d2 	bl	8001884 <getBuzzEnabled>
 80016e0:	4603      	mov	r3, r0
 80016e2:	2b01      	cmp	r3, #1
 80016e4:	d106      	bne.n	80016f4 <playHighTone+0x1c>
		buzTone = BUZ_TONE_HIGH_PSC;
 80016e6:	4b04      	ldr	r3, [pc, #16]	@ (80016f8 <playHighTone+0x20>)
 80016e8:	f641 524c 	movw	r2, #7500	@ 0x1d4c
 80016ec:	801a      	strh	r2, [r3, #0]
		setbuzzerOnOff(1);
 80016ee:	2001      	movs	r0, #1
 80016f0:	f000 f8e4 	bl	80018bc <setbuzzerOnOff>
	}
}
 80016f4:	bf00      	nop
 80016f6:	bd80      	pop	{r7, pc}
 80016f8:	20000028 	.word	0x20000028

080016fc <playAlram>:

void playAlram() {
 80016fc:	b580      	push	{r7, lr}
 80016fe:	af00      	add	r7, sp, #0
	if(buz.ms < (BUZ_OP_TIME * 2)) {
 8001700:	4b3c      	ldr	r3, [pc, #240]	@ (80017f4 <playAlram+0xf8>)
 8001702:	789b      	ldrb	r3, [r3, #2]
 8001704:	2b3b      	cmp	r3, #59	@ 0x3b
 8001706:	d805      	bhi.n	8001714 <playAlram+0x18>
		buz.ms++;
 8001708:	4b3a      	ldr	r3, [pc, #232]	@ (80017f4 <playAlram+0xf8>)
 800170a:	789b      	ldrb	r3, [r3, #2]
 800170c:	3301      	adds	r3, #1
 800170e:	b2da      	uxtb	r2, r3
 8001710:	4b38      	ldr	r3, [pc, #224]	@ (80017f4 <playAlram+0xf8>)
 8001712:	709a      	strb	r2, [r3, #2]
	}


	if(buz.ms < BUZ_OP_TIME) {
 8001714:	4b37      	ldr	r3, [pc, #220]	@ (80017f4 <playAlram+0xf8>)
 8001716:	789b      	ldrb	r3, [r3, #2]
 8001718:	2b1d      	cmp	r3, #29
 800171a:	d82f      	bhi.n	800177c <playAlram+0x80>
		if(getBuzzEnabled() == TRUE) {
 800171c:	f000 f8b2 	bl	8001884 <getBuzzEnabled>
 8001720:	4603      	mov	r3, r0
 8001722:	2b01      	cmp	r3, #1
 8001724:	d108      	bne.n	8001738 <playAlram+0x3c>
			TIM2->PSC = BUZ_TONE_HIGH_PSC;
 8001726:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800172a:	f641 524c 	movw	r2, #7500	@ 0x1d4c
 800172e:	629a      	str	r2, [r3, #40]	@ 0x28
			HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001730:	2100      	movs	r1, #0
 8001732:	4831      	ldr	r0, [pc, #196]	@ (80017f8 <playAlram+0xfc>)
 8001734:	f003 fd90 	bl	8005258 <HAL_TIM_PWM_Start>
		}
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, 0);
 8001738:	2200      	movs	r2, #0
 800173a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800173e:	482f      	ldr	r0, [pc, #188]	@ (80017fc <playAlram+0x100>)
 8001740:	f002 ff8c 	bl	800465c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);
 8001744:	2200      	movs	r2, #0
 8001746:	2140      	movs	r1, #64	@ 0x40
 8001748:	482d      	ldr	r0, [pc, #180]	@ (8001800 <playAlram+0x104>)
 800174a:	f002 ff87 	bl	800465c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, 0);
 800174e:	2200      	movs	r2, #0
 8001750:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001754:	4829      	ldr	r0, [pc, #164]	@ (80017fc <playAlram+0x100>)
 8001756:	f002 ff81 	bl	800465c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 0);
 800175a:	2200      	movs	r2, #0
 800175c:	2120      	movs	r1, #32
 800175e:	4829      	ldr	r0, [pc, #164]	@ (8001804 <playAlram+0x108>)
 8001760:	f002 ff7c 	bl	800465c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, 0);
 8001764:	2200      	movs	r2, #0
 8001766:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800176a:	4824      	ldr	r0, [pc, #144]	@ (80017fc <playAlram+0x100>)
 800176c:	f002 ff76 	bl	800465c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 0);
 8001770:	2200      	movs	r2, #0
 8001772:	2101      	movs	r1, #1
 8001774:	4823      	ldr	r0, [pc, #140]	@ (8001804 <playAlram+0x108>)
 8001776:	f002 ff71 	bl	800465c <HAL_GPIO_WritePin>
		if(buz.ms >= (BUZ_OP_TIME * 2)) {
			buz.ms = 0;
		}
	}

}
 800177a:	e039      	b.n	80017f0 <playAlram+0xf4>
	} else if(buz.ms > BUZ_OP_TIME) {
 800177c:	4b1d      	ldr	r3, [pc, #116]	@ (80017f4 <playAlram+0xf8>)
 800177e:	789b      	ldrb	r3, [r3, #2]
 8001780:	2b1e      	cmp	r3, #30
 8001782:	d935      	bls.n	80017f0 <playAlram+0xf4>
		if(getBuzzEnabled() == TRUE) {
 8001784:	f000 f87e 	bl	8001884 <getBuzzEnabled>
 8001788:	4603      	mov	r3, r0
 800178a:	2b01      	cmp	r3, #1
 800178c:	d108      	bne.n	80017a0 <playAlram+0xa4>
			TIM2->PSC = BUZ_TONE_LOW_PSC;
 800178e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001792:	f643 2298 	movw	r2, #15000	@ 0x3a98
 8001796:	629a      	str	r2, [r3, #40]	@ 0x28
			HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 8001798:	2100      	movs	r1, #0
 800179a:	4817      	ldr	r0, [pc, #92]	@ (80017f8 <playAlram+0xfc>)
 800179c:	f003 fe24 	bl	80053e8 <HAL_TIM_PWM_Stop>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, 1);
 80017a0:	2201      	movs	r2, #1
 80017a2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80017a6:	4815      	ldr	r0, [pc, #84]	@ (80017fc <playAlram+0x100>)
 80017a8:	f002 ff58 	bl	800465c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);
 80017ac:	2201      	movs	r2, #1
 80017ae:	2140      	movs	r1, #64	@ 0x40
 80017b0:	4813      	ldr	r0, [pc, #76]	@ (8001800 <playAlram+0x104>)
 80017b2:	f002 ff53 	bl	800465c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, 1);
 80017b6:	2201      	movs	r2, #1
 80017b8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80017bc:	480f      	ldr	r0, [pc, #60]	@ (80017fc <playAlram+0x100>)
 80017be:	f002 ff4d 	bl	800465c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 1);
 80017c2:	2201      	movs	r2, #1
 80017c4:	2120      	movs	r1, #32
 80017c6:	480f      	ldr	r0, [pc, #60]	@ (8001804 <playAlram+0x108>)
 80017c8:	f002 ff48 	bl	800465c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, 1);
 80017cc:	2201      	movs	r2, #1
 80017ce:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80017d2:	480a      	ldr	r0, [pc, #40]	@ (80017fc <playAlram+0x100>)
 80017d4:	f002 ff42 	bl	800465c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 1);
 80017d8:	2201      	movs	r2, #1
 80017da:	2101      	movs	r1, #1
 80017dc:	4809      	ldr	r0, [pc, #36]	@ (8001804 <playAlram+0x108>)
 80017de:	f002 ff3d 	bl	800465c <HAL_GPIO_WritePin>
		if(buz.ms >= (BUZ_OP_TIME * 2)) {
 80017e2:	4b04      	ldr	r3, [pc, #16]	@ (80017f4 <playAlram+0xf8>)
 80017e4:	789b      	ldrb	r3, [r3, #2]
 80017e6:	2b3b      	cmp	r3, #59	@ 0x3b
 80017e8:	d902      	bls.n	80017f0 <playAlram+0xf4>
			buz.ms = 0;
 80017ea:	4b02      	ldr	r3, [pc, #8]	@ (80017f4 <playAlram+0xf8>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	709a      	strb	r2, [r3, #2]
}
 80017f0:	bf00      	nop
 80017f2:	bd80      	pop	{r7, pc}
 80017f4:	20000024 	.word	0x20000024
 80017f8:	200001a8 	.word	0x200001a8
 80017fc:	40020c00 	.word	0x40020c00
 8001800:	40020800 	.word	0x40020800
 8001804:	40020400 	.word	0x40020400

08001808 <buzReset>:

void buzReset() {
 8001808:	b580      	push	{r7, lr}
 800180a:	af00      	add	r7, sp, #0
	buz.ms = 0;
 800180c:	4b18      	ldr	r3, [pc, #96]	@ (8001870 <buzReset+0x68>)
 800180e:	2200      	movs	r2, #0
 8001810:	709a      	strb	r2, [r3, #2]
	buz.onOff = 0;
 8001812:	4b17      	ldr	r3, [pc, #92]	@ (8001870 <buzReset+0x68>)
 8001814:	2200      	movs	r2, #0
 8001816:	705a      	strb	r2, [r3, #1]
	TIM2->PSC = BUZ_TONE_LOW_PSC;
 8001818:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800181c:	f643 2298 	movw	r2, #15000	@ 0x3a98
 8001820:	629a      	str	r2, [r3, #40]	@ 0x28
	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 8001822:	2100      	movs	r1, #0
 8001824:	4813      	ldr	r0, [pc, #76]	@ (8001874 <buzReset+0x6c>)
 8001826:	f003 fddf 	bl	80053e8 <HAL_TIM_PWM_Stop>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, 1);
 800182a:	2201      	movs	r2, #1
 800182c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001830:	4811      	ldr	r0, [pc, #68]	@ (8001878 <buzReset+0x70>)
 8001832:	f002 ff13 	bl	800465c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);
 8001836:	2201      	movs	r2, #1
 8001838:	2140      	movs	r1, #64	@ 0x40
 800183a:	4810      	ldr	r0, [pc, #64]	@ (800187c <buzReset+0x74>)
 800183c:	f002 ff0e 	bl	800465c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, 1);
 8001840:	2201      	movs	r2, #1
 8001842:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001846:	480c      	ldr	r0, [pc, #48]	@ (8001878 <buzReset+0x70>)
 8001848:	f002 ff08 	bl	800465c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 1);
 800184c:	2201      	movs	r2, #1
 800184e:	2120      	movs	r1, #32
 8001850:	480b      	ldr	r0, [pc, #44]	@ (8001880 <buzReset+0x78>)
 8001852:	f002 ff03 	bl	800465c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, 1);
 8001856:	2201      	movs	r2, #1
 8001858:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800185c:	4806      	ldr	r0, [pc, #24]	@ (8001878 <buzReset+0x70>)
 800185e:	f002 fefd 	bl	800465c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 1);
 8001862:	2201      	movs	r2, #1
 8001864:	2101      	movs	r1, #1
 8001866:	4806      	ldr	r0, [pc, #24]	@ (8001880 <buzReset+0x78>)
 8001868:	f002 fef8 	bl	800465c <HAL_GPIO_WritePin>
}
 800186c:	bf00      	nop
 800186e:	bd80      	pop	{r7, pc}
 8001870:	20000024 	.word	0x20000024
 8001874:	200001a8 	.word	0x200001a8
 8001878:	40020c00 	.word	0x40020c00
 800187c:	40020800 	.word	0x40020800
 8001880:	40020400 	.word	0x40020400

08001884 <getBuzzEnabled>:

uint8_t getBuzzEnabled() {
 8001884:	b480      	push	{r7}
 8001886:	af00      	add	r7, sp, #0
	return buz.enabled;
 8001888:	4b03      	ldr	r3, [pc, #12]	@ (8001898 <getBuzzEnabled+0x14>)
 800188a:	781b      	ldrb	r3, [r3, #0]
}
 800188c:	4618      	mov	r0, r3
 800188e:	46bd      	mov	sp, r7
 8001890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001894:	4770      	bx	lr
 8001896:	bf00      	nop
 8001898:	20000024 	.word	0x20000024

0800189c <setBuzzEnabled>:

void setBuzzEnabled(uint8_t enabled) {
 800189c:	b480      	push	{r7}
 800189e:	b083      	sub	sp, #12
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	4603      	mov	r3, r0
 80018a4:	71fb      	strb	r3, [r7, #7]
	buz.enabled = enabled;
 80018a6:	4a04      	ldr	r2, [pc, #16]	@ (80018b8 <setBuzzEnabled+0x1c>)
 80018a8:	79fb      	ldrb	r3, [r7, #7]
 80018aa:	7013      	strb	r3, [r2, #0]
}
 80018ac:	bf00      	nop
 80018ae:	370c      	adds	r7, #12
 80018b0:	46bd      	mov	sp, r7
 80018b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b6:	4770      	bx	lr
 80018b8:	20000024 	.word	0x20000024

080018bc <setbuzzerOnOff>:

uint8_t getbuzzerOnOff() {
	return buz.onOff;
}

void setbuzzerOnOff(uint8_t onOff) {
 80018bc:	b480      	push	{r7}
 80018be:	b083      	sub	sp, #12
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	4603      	mov	r3, r0
 80018c4:	71fb      	strb	r3, [r7, #7]
	buz.onOff = onOff;
 80018c6:	4a04      	ldr	r2, [pc, #16]	@ (80018d8 <setbuzzerOnOff+0x1c>)
 80018c8:	79fb      	ldrb	r3, [r7, #7]
 80018ca:	7053      	strb	r3, [r2, #1]
}
 80018cc:	bf00      	nop
 80018ce:	370c      	adds	r7, #12
 80018d0:	46bd      	mov	sp, r7
 80018d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d6:	4770      	bx	lr
 80018d8:	20000024 	.word	0x20000024

080018dc <startClock>:
extern clockSt clock;
extern modeSelector mode;
int thirtyDays[4] = {4, 6, 9, 11};
clockSetting clockSet = SECOND;

void startClock() {
 80018dc:	b580      	push	{r7, lr}
 80018de:	af00      	add	r7, sp, #0
	// 시간 증가 함수
	clock.millisecond++;
 80018e0:	4b5b      	ldr	r3, [pc, #364]	@ (8001a50 <startClock+0x174>)
 80018e2:	699b      	ldr	r3, [r3, #24]
 80018e4:	3301      	adds	r3, #1
 80018e6:	4a5a      	ldr	r2, [pc, #360]	@ (8001a50 <startClock+0x174>)
 80018e8:	6193      	str	r3, [r2, #24]
	if(clock.millisecond == 1000) {
 80018ea:	4b59      	ldr	r3, [pc, #356]	@ (8001a50 <startClock+0x174>)
 80018ec:	699b      	ldr	r3, [r3, #24]
 80018ee:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80018f2:	d107      	bne.n	8001904 <startClock+0x28>
		clock.millisecond = 0;
 80018f4:	4b56      	ldr	r3, [pc, #344]	@ (8001a50 <startClock+0x174>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	619a      	str	r2, [r3, #24]
		clock.second++;
 80018fa:	4b55      	ldr	r3, [pc, #340]	@ (8001a50 <startClock+0x174>)
 80018fc:	695b      	ldr	r3, [r3, #20]
 80018fe:	3301      	adds	r3, #1
 8001900:	4a53      	ldr	r2, [pc, #332]	@ (8001a50 <startClock+0x174>)
 8001902:	6153      	str	r3, [r2, #20]
	}
	if(clock.second == 60) {
 8001904:	4b52      	ldr	r3, [pc, #328]	@ (8001a50 <startClock+0x174>)
 8001906:	695b      	ldr	r3, [r3, #20]
 8001908:	2b3c      	cmp	r3, #60	@ 0x3c
 800190a:	d107      	bne.n	800191c <startClock+0x40>
		clock.second = 0;
 800190c:	4b50      	ldr	r3, [pc, #320]	@ (8001a50 <startClock+0x174>)
 800190e:	2200      	movs	r2, #0
 8001910:	615a      	str	r2, [r3, #20]
		clock.minute++;
 8001912:	4b4f      	ldr	r3, [pc, #316]	@ (8001a50 <startClock+0x174>)
 8001914:	691b      	ldr	r3, [r3, #16]
 8001916:	3301      	adds	r3, #1
 8001918:	4a4d      	ldr	r2, [pc, #308]	@ (8001a50 <startClock+0x174>)
 800191a:	6113      	str	r3, [r2, #16]
	}
	if(clock.minute == 60) {
 800191c:	4b4c      	ldr	r3, [pc, #304]	@ (8001a50 <startClock+0x174>)
 800191e:	691b      	ldr	r3, [r3, #16]
 8001920:	2b3c      	cmp	r3, #60	@ 0x3c
 8001922:	d109      	bne.n	8001938 <startClock+0x5c>
		clock.minute = 0;
 8001924:	4b4a      	ldr	r3, [pc, #296]	@ (8001a50 <startClock+0x174>)
 8001926:	2200      	movs	r2, #0
 8001928:	611a      	str	r2, [r3, #16]
		clock.hour++;
 800192a:	4b49      	ldr	r3, [pc, #292]	@ (8001a50 <startClock+0x174>)
 800192c:	68db      	ldr	r3, [r3, #12]
 800192e:	3301      	adds	r3, #1
 8001930:	4a47      	ldr	r2, [pc, #284]	@ (8001a50 <startClock+0x174>)
 8001932:	60d3      	str	r3, [r2, #12]
		playMidTone();	// 정각에 부저 mid tone으로 울리는 함수
 8001934:	f7ff febe 	bl	80016b4 <playMidTone>
	}
	if(clock.hour == 24) {
 8001938:	4b45      	ldr	r3, [pc, #276]	@ (8001a50 <startClock+0x174>)
 800193a:	68db      	ldr	r3, [r3, #12]
 800193c:	2b18      	cmp	r3, #24
 800193e:	d109      	bne.n	8001954 <startClock+0x78>
		clock.hour = 0;
 8001940:	4b43      	ldr	r3, [pc, #268]	@ (8001a50 <startClock+0x174>)
 8001942:	2200      	movs	r2, #0
 8001944:	60da      	str	r2, [r3, #12]
		clock.date++;
 8001946:	4b42      	ldr	r3, [pc, #264]	@ (8001a50 <startClock+0x174>)
 8001948:	689b      	ldr	r3, [r3, #8]
 800194a:	3301      	adds	r3, #1
 800194c:	4a40      	ldr	r2, [pc, #256]	@ (8001a50 <startClock+0x174>)
 800194e:	6093      	str	r3, [r2, #8]
		playHighTone(); // 매일 0시에 부저 high tone으로 울리는 함수
 8001950:	f7ff fec2 	bl	80016d8 <playHighTone>
	}
	if(clock.month == 2) {
 8001954:	4b3e      	ldr	r3, [pc, #248]	@ (8001a50 <startClock+0x174>)
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	2b02      	cmp	r3, #2
 800195a:	d12f      	bne.n	80019bc <startClock+0xe0>
		if(clock.leapYear == TRUE) {
 800195c:	4b3c      	ldr	r3, [pc, #240]	@ (8001a50 <startClock+0x174>)
 800195e:	7f1b      	ldrb	r3, [r3, #28]
 8001960:	2b01      	cmp	r3, #1
 8001962:	d115      	bne.n	8001990 <startClock+0xb4>
			if(clock.date > 29) {
 8001964:	4b3a      	ldr	r3, [pc, #232]	@ (8001a50 <startClock+0x174>)
 8001966:	689b      	ldr	r3, [r3, #8]
 8001968:	2b1d      	cmp	r3, #29
 800196a:	dd5a      	ble.n	8001a22 <startClock+0x146>
				clock.date = 1;
 800196c:	4b38      	ldr	r3, [pc, #224]	@ (8001a50 <startClock+0x174>)
 800196e:	2201      	movs	r2, #1
 8001970:	609a      	str	r2, [r3, #8]
				clock.month++;
 8001972:	4b37      	ldr	r3, [pc, #220]	@ (8001a50 <startClock+0x174>)
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	3301      	adds	r3, #1
 8001978:	4a35      	ldr	r2, [pc, #212]	@ (8001a50 <startClock+0x174>)
 800197a:	6053      	str	r3, [r2, #4]
				clock.thiryMonth = isThirtyDays(clock.month);
 800197c:	4b34      	ldr	r3, [pc, #208]	@ (8001a50 <startClock+0x174>)
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	4618      	mov	r0, r3
 8001982:	f000 f9a7 	bl	8001cd4 <isThirtyDays>
 8001986:	4603      	mov	r3, r0
 8001988:	b2da      	uxtb	r2, r3
 800198a:	4b31      	ldr	r3, [pc, #196]	@ (8001a50 <startClock+0x174>)
 800198c:	775a      	strb	r2, [r3, #29]
 800198e:	e048      	b.n	8001a22 <startClock+0x146>
			}
		} else {
			if(clock.date > 28) {
 8001990:	4b2f      	ldr	r3, [pc, #188]	@ (8001a50 <startClock+0x174>)
 8001992:	689b      	ldr	r3, [r3, #8]
 8001994:	2b1c      	cmp	r3, #28
 8001996:	dd44      	ble.n	8001a22 <startClock+0x146>
				clock.date = 1;
 8001998:	4b2d      	ldr	r3, [pc, #180]	@ (8001a50 <startClock+0x174>)
 800199a:	2201      	movs	r2, #1
 800199c:	609a      	str	r2, [r3, #8]
				clock.month++;
 800199e:	4b2c      	ldr	r3, [pc, #176]	@ (8001a50 <startClock+0x174>)
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	3301      	adds	r3, #1
 80019a4:	4a2a      	ldr	r2, [pc, #168]	@ (8001a50 <startClock+0x174>)
 80019a6:	6053      	str	r3, [r2, #4]
				clock.thiryMonth = isThirtyDays(clock.month);
 80019a8:	4b29      	ldr	r3, [pc, #164]	@ (8001a50 <startClock+0x174>)
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	4618      	mov	r0, r3
 80019ae:	f000 f991 	bl	8001cd4 <isThirtyDays>
 80019b2:	4603      	mov	r3, r0
 80019b4:	b2da      	uxtb	r2, r3
 80019b6:	4b26      	ldr	r3, [pc, #152]	@ (8001a50 <startClock+0x174>)
 80019b8:	775a      	strb	r2, [r3, #29]
 80019ba:	e032      	b.n	8001a22 <startClock+0x146>
			}
		}
	} else if(clock.thiryMonth == TRUE) { // 말일이 30일인 달 4, 6, 9, 11
 80019bc:	4b24      	ldr	r3, [pc, #144]	@ (8001a50 <startClock+0x174>)
 80019be:	7f5b      	ldrb	r3, [r3, #29]
 80019c0:	2b01      	cmp	r3, #1
 80019c2:	d115      	bne.n	80019f0 <startClock+0x114>
		if(clock.date > 30) {
 80019c4:	4b22      	ldr	r3, [pc, #136]	@ (8001a50 <startClock+0x174>)
 80019c6:	689b      	ldr	r3, [r3, #8]
 80019c8:	2b1e      	cmp	r3, #30
 80019ca:	dd2a      	ble.n	8001a22 <startClock+0x146>
			clock.date = 1;
 80019cc:	4b20      	ldr	r3, [pc, #128]	@ (8001a50 <startClock+0x174>)
 80019ce:	2201      	movs	r2, #1
 80019d0:	609a      	str	r2, [r3, #8]
			clock.month++;
 80019d2:	4b1f      	ldr	r3, [pc, #124]	@ (8001a50 <startClock+0x174>)
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	3301      	adds	r3, #1
 80019d8:	4a1d      	ldr	r2, [pc, #116]	@ (8001a50 <startClock+0x174>)
 80019da:	6053      	str	r3, [r2, #4]
			clock.thiryMonth = isThirtyDays(clock.month);
 80019dc:	4b1c      	ldr	r3, [pc, #112]	@ (8001a50 <startClock+0x174>)
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	4618      	mov	r0, r3
 80019e2:	f000 f977 	bl	8001cd4 <isThirtyDays>
 80019e6:	4603      	mov	r3, r0
 80019e8:	b2da      	uxtb	r2, r3
 80019ea:	4b19      	ldr	r3, [pc, #100]	@ (8001a50 <startClock+0x174>)
 80019ec:	775a      	strb	r2, [r3, #29]
 80019ee:	e018      	b.n	8001a22 <startClock+0x146>
		}
	} else if(clock.thiryMonth == FALSE) { // 말일이 31일인 달 1, 3, 5, 7, 8, 10, 12
 80019f0:	4b17      	ldr	r3, [pc, #92]	@ (8001a50 <startClock+0x174>)
 80019f2:	7f5b      	ldrb	r3, [r3, #29]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d114      	bne.n	8001a22 <startClock+0x146>
		if(clock.date > 31) {
 80019f8:	4b15      	ldr	r3, [pc, #84]	@ (8001a50 <startClock+0x174>)
 80019fa:	689b      	ldr	r3, [r3, #8]
 80019fc:	2b1f      	cmp	r3, #31
 80019fe:	dd10      	ble.n	8001a22 <startClock+0x146>
			clock.date = 1;
 8001a00:	4b13      	ldr	r3, [pc, #76]	@ (8001a50 <startClock+0x174>)
 8001a02:	2201      	movs	r2, #1
 8001a04:	609a      	str	r2, [r3, #8]
			clock.month++;
 8001a06:	4b12      	ldr	r3, [pc, #72]	@ (8001a50 <startClock+0x174>)
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	3301      	adds	r3, #1
 8001a0c:	4a10      	ldr	r2, [pc, #64]	@ (8001a50 <startClock+0x174>)
 8001a0e:	6053      	str	r3, [r2, #4]
			clock.thiryMonth = isThirtyDays(clock.month);
 8001a10:	4b0f      	ldr	r3, [pc, #60]	@ (8001a50 <startClock+0x174>)
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	4618      	mov	r0, r3
 8001a16:	f000 f95d 	bl	8001cd4 <isThirtyDays>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	b2da      	uxtb	r2, r3
 8001a1e:	4b0c      	ldr	r3, [pc, #48]	@ (8001a50 <startClock+0x174>)
 8001a20:	775a      	strb	r2, [r3, #29]
		}
	}

	if(clock.month > 12) {
 8001a22:	4b0b      	ldr	r3, [pc, #44]	@ (8001a50 <startClock+0x174>)
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	2b0c      	cmp	r3, #12
 8001a28:	dd10      	ble.n	8001a4c <startClock+0x170>
		clock.month = 1;
 8001a2a:	4b09      	ldr	r3, [pc, #36]	@ (8001a50 <startClock+0x174>)
 8001a2c:	2201      	movs	r2, #1
 8001a2e:	605a      	str	r2, [r3, #4]
		clock.year++;
 8001a30:	4b07      	ldr	r3, [pc, #28]	@ (8001a50 <startClock+0x174>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	3301      	adds	r3, #1
 8001a36:	4a06      	ldr	r2, [pc, #24]	@ (8001a50 <startClock+0x174>)
 8001a38:	6013      	str	r3, [r2, #0]
		clock.leapYear = leapYearCalculator(clock.year);
 8001a3a:	4b05      	ldr	r3, [pc, #20]	@ (8001a50 <startClock+0x174>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f000 f914 	bl	8001c6c <leapYearCalculator>
 8001a44:	4603      	mov	r3, r0
 8001a46:	b2da      	uxtb	r2, r3
 8001a48:	4b01      	ldr	r3, [pc, #4]	@ (8001a50 <startClock+0x174>)
 8001a4a:	771a      	strb	r2, [r3, #28]
	}
}
 8001a4c:	bf00      	nop
 8001a4e:	bd80      	pop	{r7, pc}
 8001a50:	2000003c 	.word	0x2000003c

08001a54 <clcdDisplayClock>:

void clcdDisplayClock() {
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b088      	sub	sp, #32
 8001a58:	af02      	add	r7, sp, #8
	// 시계기능 출력
	uint8_t buzzOnOff[8];
	uint8_t formet[12];
	if(clock.leapYear == TRUE) {
 8001a5a:	4b62      	ldr	r3, [pc, #392]	@ (8001be4 <clcdDisplayClock+0x190>)
 8001a5c:	7f1b      	ldrb	r3, [r3, #28]
 8001a5e:	2b01      	cmp	r3, #1
 8001a60:	d10c      	bne.n	8001a7c <clcdDisplayClock+0x28>
		sprintf(clock.buffer, "LEAP  %4d.%2d.%2d", clock.year, clock.month, clock.date);
 8001a62:	4b60      	ldr	r3, [pc, #384]	@ (8001be4 <clcdDisplayClock+0x190>)
 8001a64:	681a      	ldr	r2, [r3, #0]
 8001a66:	4b5f      	ldr	r3, [pc, #380]	@ (8001be4 <clcdDisplayClock+0x190>)
 8001a68:	6859      	ldr	r1, [r3, #4]
 8001a6a:	4b5e      	ldr	r3, [pc, #376]	@ (8001be4 <clcdDisplayClock+0x190>)
 8001a6c:	689b      	ldr	r3, [r3, #8]
 8001a6e:	9300      	str	r3, [sp, #0]
 8001a70:	460b      	mov	r3, r1
 8001a72:	495d      	ldr	r1, [pc, #372]	@ (8001be8 <clcdDisplayClock+0x194>)
 8001a74:	485d      	ldr	r0, [pc, #372]	@ (8001bec <clcdDisplayClock+0x198>)
 8001a76:	f005 fae9 	bl	800704c <siprintf>
 8001a7a:	e00b      	b.n	8001a94 <clcdDisplayClock+0x40>
	} else {
		sprintf(clock.buffer, "      %4d.%2d.%2d", clock.year, clock.month, clock.date);
 8001a7c:	4b59      	ldr	r3, [pc, #356]	@ (8001be4 <clcdDisplayClock+0x190>)
 8001a7e:	681a      	ldr	r2, [r3, #0]
 8001a80:	4b58      	ldr	r3, [pc, #352]	@ (8001be4 <clcdDisplayClock+0x190>)
 8001a82:	6859      	ldr	r1, [r3, #4]
 8001a84:	4b57      	ldr	r3, [pc, #348]	@ (8001be4 <clcdDisplayClock+0x190>)
 8001a86:	689b      	ldr	r3, [r3, #8]
 8001a88:	9300      	str	r3, [sp, #0]
 8001a8a:	460b      	mov	r3, r1
 8001a8c:	4958      	ldr	r1, [pc, #352]	@ (8001bf0 <clcdDisplayClock+0x19c>)
 8001a8e:	4857      	ldr	r0, [pc, #348]	@ (8001bec <clcdDisplayClock+0x198>)
 8001a90:	f005 fadc 	bl	800704c <siprintf>
	}
	if(getBuzzEnabled() == TRUE) {	// 부저 상태 출력
 8001a94:	f7ff fef6 	bl	8001884 <getBuzzEnabled>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	2b01      	cmp	r3, #1
 8001a9c:	d106      	bne.n	8001aac <clcdDisplayClock+0x58>
		sprintf(buzzOnOff, "BZ ON ");
 8001a9e:	f107 0310 	add.w	r3, r7, #16
 8001aa2:	4954      	ldr	r1, [pc, #336]	@ (8001bf4 <clcdDisplayClock+0x1a0>)
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f005 fad1 	bl	800704c <siprintf>
 8001aaa:	e005      	b.n	8001ab8 <clcdDisplayClock+0x64>

	} else {
		sprintf(buzzOnOff, "BZ OFF");
 8001aac:	f107 0310 	add.w	r3, r7, #16
 8001ab0:	4951      	ldr	r1, [pc, #324]	@ (8001bf8 <clcdDisplayClock+0x1a4>)
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f005 faca 	bl	800704c <siprintf>
	}

	if(getTimeFormet() == TRUE) {  // 24시간 포멧일경우
 8001ab8:	f000 fcaa 	bl	8002410 <getTimeFormet>
 8001abc:	4603      	mov	r3, r0
 8001abe:	2b01      	cmp	r3, #1
 8001ac0:	d116      	bne.n	8001af0 <clcdDisplayClock+0x9c>
		if(getBlink() == TRUE) {
 8001ac2:	f002 f8ef 	bl	8003ca4 <getBlink>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	2b01      	cmp	r3, #1
 8001aca:	d108      	bne.n	8001ade <clcdDisplayClock+0x8a>
			sprintf(formet, "   %02d:%02d", clock.hour, clock.minute);
 8001acc:	4b45      	ldr	r3, [pc, #276]	@ (8001be4 <clcdDisplayClock+0x190>)
 8001ace:	68da      	ldr	r2, [r3, #12]
 8001ad0:	4b44      	ldr	r3, [pc, #272]	@ (8001be4 <clcdDisplayClock+0x190>)
 8001ad2:	691b      	ldr	r3, [r3, #16]
 8001ad4:	1d38      	adds	r0, r7, #4
 8001ad6:	4949      	ldr	r1, [pc, #292]	@ (8001bfc <clcdDisplayClock+0x1a8>)
 8001ad8:	f005 fab8 	bl	800704c <siprintf>
 8001adc:	e06c      	b.n	8001bb8 <clcdDisplayClock+0x164>
		} else { 	// 콜론X
			sprintf(formet, "   %02d %02d", clock.hour, clock.minute);
 8001ade:	4b41      	ldr	r3, [pc, #260]	@ (8001be4 <clcdDisplayClock+0x190>)
 8001ae0:	68da      	ldr	r2, [r3, #12]
 8001ae2:	4b40      	ldr	r3, [pc, #256]	@ (8001be4 <clcdDisplayClock+0x190>)
 8001ae4:	691b      	ldr	r3, [r3, #16]
 8001ae6:	1d38      	adds	r0, r7, #4
 8001ae8:	4945      	ldr	r1, [pc, #276]	@ (8001c00 <clcdDisplayClock+0x1ac>)
 8001aea:	f005 faaf 	bl	800704c <siprintf>
 8001aee:	e063      	b.n	8001bb8 <clcdDisplayClock+0x164>
		}
	} else {					// AM/PM (12시간 포멧) 일경우
		if(getBlink() == TRUE) {
 8001af0:	f002 f8d8 	bl	8003ca4 <getBlink>
 8001af4:	4603      	mov	r3, r0
 8001af6:	2b01      	cmp	r3, #1
 8001af8:	d12f      	bne.n	8001b5a <clcdDisplayClock+0x106>
			if(clock.hour < 12) {	// AM
 8001afa:	4b3a      	ldr	r3, [pc, #232]	@ (8001be4 <clcdDisplayClock+0x190>)
 8001afc:	68db      	ldr	r3, [r3, #12]
 8001afe:	2b0b      	cmp	r3, #11
 8001b00:	dc14      	bgt.n	8001b2c <clcdDisplayClock+0xd8>
				if(clock.hour == 0) {
 8001b02:	4b38      	ldr	r3, [pc, #224]	@ (8001be4 <clcdDisplayClock+0x190>)
 8001b04:	68db      	ldr	r3, [r3, #12]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d107      	bne.n	8001b1a <clcdDisplayClock+0xc6>
					// 24시 일때
					sprintf(formet, "AM %02d:%02d", 12, clock.minute);
 8001b0a:	4b36      	ldr	r3, [pc, #216]	@ (8001be4 <clcdDisplayClock+0x190>)
 8001b0c:	691b      	ldr	r3, [r3, #16]
 8001b0e:	1d38      	adds	r0, r7, #4
 8001b10:	220c      	movs	r2, #12
 8001b12:	493c      	ldr	r1, [pc, #240]	@ (8001c04 <clcdDisplayClock+0x1b0>)
 8001b14:	f005 fa9a 	bl	800704c <siprintf>
 8001b18:	e04e      	b.n	8001bb8 <clcdDisplayClock+0x164>
				} else {
					sprintf(formet, "AM %02d:%02d", clock.hour, clock.minute);
 8001b1a:	4b32      	ldr	r3, [pc, #200]	@ (8001be4 <clcdDisplayClock+0x190>)
 8001b1c:	68da      	ldr	r2, [r3, #12]
 8001b1e:	4b31      	ldr	r3, [pc, #196]	@ (8001be4 <clcdDisplayClock+0x190>)
 8001b20:	691b      	ldr	r3, [r3, #16]
 8001b22:	1d38      	adds	r0, r7, #4
 8001b24:	4937      	ldr	r1, [pc, #220]	@ (8001c04 <clcdDisplayClock+0x1b0>)
 8001b26:	f005 fa91 	bl	800704c <siprintf>
 8001b2a:	e045      	b.n	8001bb8 <clcdDisplayClock+0x164>
				}
			} else {				// PM
				if(clock.hour == 12) {
 8001b2c:	4b2d      	ldr	r3, [pc, #180]	@ (8001be4 <clcdDisplayClock+0x190>)
 8001b2e:	68db      	ldr	r3, [r3, #12]
 8001b30:	2b0c      	cmp	r3, #12
 8001b32:	d107      	bne.n	8001b44 <clcdDisplayClock+0xf0>
					// 12시 일때
					sprintf(formet, "PM %02d:%02d", 12, clock.minute);
 8001b34:	4b2b      	ldr	r3, [pc, #172]	@ (8001be4 <clcdDisplayClock+0x190>)
 8001b36:	691b      	ldr	r3, [r3, #16]
 8001b38:	1d38      	adds	r0, r7, #4
 8001b3a:	220c      	movs	r2, #12
 8001b3c:	4932      	ldr	r1, [pc, #200]	@ (8001c08 <clcdDisplayClock+0x1b4>)
 8001b3e:	f005 fa85 	bl	800704c <siprintf>
 8001b42:	e039      	b.n	8001bb8 <clcdDisplayClock+0x164>
				} else {
					sprintf(formet, "PM %02d:%02d", (clock.hour - 12), clock.minute);
 8001b44:	4b27      	ldr	r3, [pc, #156]	@ (8001be4 <clcdDisplayClock+0x190>)
 8001b46:	68db      	ldr	r3, [r3, #12]
 8001b48:	f1a3 020c 	sub.w	r2, r3, #12
 8001b4c:	4b25      	ldr	r3, [pc, #148]	@ (8001be4 <clcdDisplayClock+0x190>)
 8001b4e:	691b      	ldr	r3, [r3, #16]
 8001b50:	1d38      	adds	r0, r7, #4
 8001b52:	492d      	ldr	r1, [pc, #180]	@ (8001c08 <clcdDisplayClock+0x1b4>)
 8001b54:	f005 fa7a 	bl	800704c <siprintf>
 8001b58:	e02e      	b.n	8001bb8 <clcdDisplayClock+0x164>
				}
			}
		} else {	// 콜론X
			if(clock.hour < 12) {	// AM
 8001b5a:	4b22      	ldr	r3, [pc, #136]	@ (8001be4 <clcdDisplayClock+0x190>)
 8001b5c:	68db      	ldr	r3, [r3, #12]
 8001b5e:	2b0b      	cmp	r3, #11
 8001b60:	dc14      	bgt.n	8001b8c <clcdDisplayClock+0x138>
				if (clock.hour == 0) {
 8001b62:	4b20      	ldr	r3, [pc, #128]	@ (8001be4 <clcdDisplayClock+0x190>)
 8001b64:	68db      	ldr	r3, [r3, #12]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d107      	bne.n	8001b7a <clcdDisplayClock+0x126>
					// 24시 일때
					sprintf(formet, "AM %02d %02d", 12, clock.minute);
 8001b6a:	4b1e      	ldr	r3, [pc, #120]	@ (8001be4 <clcdDisplayClock+0x190>)
 8001b6c:	691b      	ldr	r3, [r3, #16]
 8001b6e:	1d38      	adds	r0, r7, #4
 8001b70:	220c      	movs	r2, #12
 8001b72:	4926      	ldr	r1, [pc, #152]	@ (8001c0c <clcdDisplayClock+0x1b8>)
 8001b74:	f005 fa6a 	bl	800704c <siprintf>
 8001b78:	e01e      	b.n	8001bb8 <clcdDisplayClock+0x164>
				} else {
					sprintf(formet, "AM %02d %02d", clock.hour, clock.minute);
 8001b7a:	4b1a      	ldr	r3, [pc, #104]	@ (8001be4 <clcdDisplayClock+0x190>)
 8001b7c:	68da      	ldr	r2, [r3, #12]
 8001b7e:	4b19      	ldr	r3, [pc, #100]	@ (8001be4 <clcdDisplayClock+0x190>)
 8001b80:	691b      	ldr	r3, [r3, #16]
 8001b82:	1d38      	adds	r0, r7, #4
 8001b84:	4921      	ldr	r1, [pc, #132]	@ (8001c0c <clcdDisplayClock+0x1b8>)
 8001b86:	f005 fa61 	bl	800704c <siprintf>
 8001b8a:	e015      	b.n	8001bb8 <clcdDisplayClock+0x164>
				}
			} else {				// PM
				if (clock.hour == 12) {
 8001b8c:	4b15      	ldr	r3, [pc, #84]	@ (8001be4 <clcdDisplayClock+0x190>)
 8001b8e:	68db      	ldr	r3, [r3, #12]
 8001b90:	2b0c      	cmp	r3, #12
 8001b92:	d107      	bne.n	8001ba4 <clcdDisplayClock+0x150>
					// 12시 일때
					sprintf(formet, "PM %02d %02d", 12, clock.minute);
 8001b94:	4b13      	ldr	r3, [pc, #76]	@ (8001be4 <clcdDisplayClock+0x190>)
 8001b96:	691b      	ldr	r3, [r3, #16]
 8001b98:	1d38      	adds	r0, r7, #4
 8001b9a:	220c      	movs	r2, #12
 8001b9c:	491c      	ldr	r1, [pc, #112]	@ (8001c10 <clcdDisplayClock+0x1bc>)
 8001b9e:	f005 fa55 	bl	800704c <siprintf>
 8001ba2:	e009      	b.n	8001bb8 <clcdDisplayClock+0x164>
				} else {
					sprintf(formet, "PM %02d %02d", (clock.hour - 12), clock.minute);
 8001ba4:	4b0f      	ldr	r3, [pc, #60]	@ (8001be4 <clcdDisplayClock+0x190>)
 8001ba6:	68db      	ldr	r3, [r3, #12]
 8001ba8:	f1a3 020c 	sub.w	r2, r3, #12
 8001bac:	4b0d      	ldr	r3, [pc, #52]	@ (8001be4 <clcdDisplayClock+0x190>)
 8001bae:	691b      	ldr	r3, [r3, #16]
 8001bb0:	1d38      	adds	r0, r7, #4
 8001bb2:	4917      	ldr	r1, [pc, #92]	@ (8001c10 <clcdDisplayClock+0x1bc>)
 8001bb4:	f005 fa4a 	bl	800704c <siprintf>
				}
			}
		}
	}
	CLCD_Puts(0, 0, clock.buffer);
 8001bb8:	4a0c      	ldr	r2, [pc, #48]	@ (8001bec <clcdDisplayClock+0x198>)
 8001bba:	2100      	movs	r1, #0
 8001bbc:	2000      	movs	r0, #0
 8001bbe:	f7ff fb9b 	bl	80012f8 <CLCD_Puts>
	sprintf(clock.buffer, "%s  %s", buzzOnOff, formet);
 8001bc2:	1d3b      	adds	r3, r7, #4
 8001bc4:	f107 0210 	add.w	r2, r7, #16
 8001bc8:	4912      	ldr	r1, [pc, #72]	@ (8001c14 <clcdDisplayClock+0x1c0>)
 8001bca:	4808      	ldr	r0, [pc, #32]	@ (8001bec <clcdDisplayClock+0x198>)
 8001bcc:	f005 fa3e 	bl	800704c <siprintf>
	CLCD_Puts(0, 1, clock.buffer);
 8001bd0:	4a06      	ldr	r2, [pc, #24]	@ (8001bec <clcdDisplayClock+0x198>)
 8001bd2:	2101      	movs	r1, #1
 8001bd4:	2000      	movs	r0, #0
 8001bd6:	f7ff fb8f 	bl	80012f8 <CLCD_Puts>
}
 8001bda:	bf00      	nop
 8001bdc:	3718      	adds	r7, #24
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	bf00      	nop
 8001be4:	2000003c 	.word	0x2000003c
 8001be8:	08007a08 	.word	0x08007a08
 8001bec:	2000005b 	.word	0x2000005b
 8001bf0:	08007a1c 	.word	0x08007a1c
 8001bf4:	08007a30 	.word	0x08007a30
 8001bf8:	08007a38 	.word	0x08007a38
 8001bfc:	08007a40 	.word	0x08007a40
 8001c00:	08007a50 	.word	0x08007a50
 8001c04:	08007a60 	.word	0x08007a60
 8001c08:	08007a70 	.word	0x08007a70
 8001c0c:	08007a80 	.word	0x08007a80
 8001c10:	08007a90 	.word	0x08007a90
 8001c14:	08007aa0 	.word	0x08007aa0

08001c18 <tickClock>:

void tickClock() {
 8001c18:	b598      	push	{r3, r4, r7, lr}
 8001c1a:	af00      	add	r7, sp, #0
	// 0.5초 마다 점멸
	// 7세그먼트에 초 단위 출력
	_7SEG_SetNumber(DGT1, clock.second / 10, 0);
 8001c1c:	4b11      	ldr	r3, [pc, #68]	@ (8001c64 <tickClock+0x4c>)
 8001c1e:	695b      	ldr	r3, [r3, #20]
 8001c20:	4a11      	ldr	r2, [pc, #68]	@ (8001c68 <tickClock+0x50>)
 8001c22:	fb82 1203 	smull	r1, r2, r2, r3
 8001c26:	1092      	asrs	r2, r2, #2
 8001c28:	17db      	asrs	r3, r3, #31
 8001c2a:	1ad3      	subs	r3, r2, r3
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	4619      	mov	r1, r3
 8001c30:	2000      	movs	r0, #0
 8001c32:	f7fe fd7b 	bl	800072c <_7SEG_SetNumber>
	_7SEG_SetNumber(DGT2, clock.second % 10, getBlink());
 8001c36:	4b0b      	ldr	r3, [pc, #44]	@ (8001c64 <tickClock+0x4c>)
 8001c38:	695a      	ldr	r2, [r3, #20]
 8001c3a:	4b0b      	ldr	r3, [pc, #44]	@ (8001c68 <tickClock+0x50>)
 8001c3c:	fb83 1302 	smull	r1, r3, r3, r2
 8001c40:	1099      	asrs	r1, r3, #2
 8001c42:	17d3      	asrs	r3, r2, #31
 8001c44:	1acc      	subs	r4, r1, r3
 8001c46:	4623      	mov	r3, r4
 8001c48:	009b      	lsls	r3, r3, #2
 8001c4a:	4423      	add	r3, r4
 8001c4c:	005b      	lsls	r3, r3, #1
 8001c4e:	1ad4      	subs	r4, r2, r3
 8001c50:	f002 f828 	bl	8003ca4 <getBlink>
 8001c54:	4603      	mov	r3, r0
 8001c56:	461a      	mov	r2, r3
 8001c58:	4621      	mov	r1, r4
 8001c5a:	2001      	movs	r0, #1
 8001c5c:	f7fe fd66 	bl	800072c <_7SEG_SetNumber>

}
 8001c60:	bf00      	nop
 8001c62:	bd98      	pop	{r3, r4, r7, pc}
 8001c64:	2000003c 	.word	0x2000003c
 8001c68:	66666667 	.word	0x66666667

08001c6c <leapYearCalculator>:

int leapYearCalculator(int year) {
 8001c6c:	b480      	push	{r7}
 8001c6e:	b083      	sub	sp, #12
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
	// 윤년 계산
	if(year % 4 == 0){
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	f003 0303 	and.w	r3, r3, #3
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d120      	bne.n	8001cc0 <leapYearCalculator+0x54>
		if(year % 100 == 0) {
 8001c7e:	687a      	ldr	r2, [r7, #4]
 8001c80:	4b13      	ldr	r3, [pc, #76]	@ (8001cd0 <leapYearCalculator+0x64>)
 8001c82:	fb83 1302 	smull	r1, r3, r3, r2
 8001c86:	1159      	asrs	r1, r3, #5
 8001c88:	17d3      	asrs	r3, r2, #31
 8001c8a:	1acb      	subs	r3, r1, r3
 8001c8c:	2164      	movs	r1, #100	@ 0x64
 8001c8e:	fb01 f303 	mul.w	r3, r1, r3
 8001c92:	1ad3      	subs	r3, r2, r3
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d111      	bne.n	8001cbc <leapYearCalculator+0x50>
			if(year % 400 == 0) {
 8001c98:	687a      	ldr	r2, [r7, #4]
 8001c9a:	4b0d      	ldr	r3, [pc, #52]	@ (8001cd0 <leapYearCalculator+0x64>)
 8001c9c:	fb83 1302 	smull	r1, r3, r3, r2
 8001ca0:	11d9      	asrs	r1, r3, #7
 8001ca2:	17d3      	asrs	r3, r2, #31
 8001ca4:	1acb      	subs	r3, r1, r3
 8001ca6:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8001caa:	fb01 f303 	mul.w	r3, r1, r3
 8001cae:	1ad3      	subs	r3, r2, r3
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d101      	bne.n	8001cb8 <leapYearCalculator+0x4c>
				return TRUE; // 4, 100, 400 으로 나누어 떨어지면 윤년
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	e004      	b.n	8001cc2 <leapYearCalculator+0x56>
			} else {
				return FALSE; // 4, 100 으로 나누어 떨어지고 400으로 나누어 떨어지지 않으면 평년
 8001cb8:	2300      	movs	r3, #0
 8001cba:	e002      	b.n	8001cc2 <leapYearCalculator+0x56>
			}
		} else {
			return TRUE;	// 4로 나누어 떨어지고 100으로 나누어 떨어지지 않으면 윤년
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	e000      	b.n	8001cc2 <leapYearCalculator+0x56>
		}
	} else {
		return FALSE;	// 4로 나누어 떨어지지 않으면 평년
 8001cc0:	2300      	movs	r3, #0
	}
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	370c      	adds	r7, #12
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr
 8001cce:	bf00      	nop
 8001cd0:	51eb851f 	.word	0x51eb851f

08001cd4 <isThirtyDays>:

int isThirtyDays(int month) {
 8001cd4:	b480      	push	{r7}
 8001cd6:	b085      	sub	sp, #20
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
	// 30일로 끝나는 달 구분
	int bool = FALSE;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	60fb      	str	r3, [r7, #12]
	for(int i = 0; i < sizeof(thirtyDays) / sizeof(int); i++) {
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	60bb      	str	r3, [r7, #8]
 8001ce4:	e00c      	b.n	8001d00 <isThirtyDays+0x2c>
		if(thirtyDays[i] == month) {
 8001ce6:	4a0b      	ldr	r2, [pc, #44]	@ (8001d14 <isThirtyDays+0x40>)
 8001ce8:	68bb      	ldr	r3, [r7, #8]
 8001cea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cee:	687a      	ldr	r2, [r7, #4]
 8001cf0:	429a      	cmp	r2, r3
 8001cf2:	d102      	bne.n	8001cfa <isThirtyDays+0x26>
			bool = TRUE;
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	60fb      	str	r3, [r7, #12]
			break;
 8001cf8:	e005      	b.n	8001d06 <isThirtyDays+0x32>
	for(int i = 0; i < sizeof(thirtyDays) / sizeof(int); i++) {
 8001cfa:	68bb      	ldr	r3, [r7, #8]
 8001cfc:	3301      	adds	r3, #1
 8001cfe:	60bb      	str	r3, [r7, #8]
 8001d00:	68bb      	ldr	r3, [r7, #8]
 8001d02:	2b03      	cmp	r3, #3
 8001d04:	d9ef      	bls.n	8001ce6 <isThirtyDays+0x12>
		}
	}
	return bool;
 8001d06:	68fb      	ldr	r3, [r7, #12]
}
 8001d08:	4618      	mov	r0, r3
 8001d0a:	3714      	adds	r7, #20
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d12:	4770      	bx	lr
 8001d14:	2000002c 	.word	0x2000002c

08001d18 <switchClockMode>:

void switchClockMode() { // 시계모드에서 시계설정 모드전환 함수
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	af00      	add	r7, sp, #0
	if(mode == CLOCK && getPressCount(1) == 700) {
 8001d1c:	4b1c      	ldr	r3, [pc, #112]	@ (8001d90 <switchClockMode+0x78>)
 8001d1e:	781b      	ldrb	r3, [r3, #0]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d110      	bne.n	8001d46 <switchClockMode+0x2e>
 8001d24:	2001      	movs	r0, #1
 8001d26:	f001 fe0d 	bl	8003944 <getPressCount>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	f5b3 7f2f 	cmp.w	r3, #700	@ 0x2bc
 8001d30:	d109      	bne.n	8001d46 <switchClockMode+0x2e>
		// 시계모드 이면서 누른 시간이 700 인경우
		mode = CLOCK_SETTING;
 8001d32:	4b17      	ldr	r3, [pc, #92]	@ (8001d90 <switchClockMode+0x78>)
 8001d34:	2203      	movs	r2, #3
 8001d36:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_5);
 8001d38:	2120      	movs	r1, #32
 8001d3a:	4816      	ldr	r0, [pc, #88]	@ (8001d94 <switchClockMode+0x7c>)
 8001d3c:	f002 fca7 	bl	800468e <HAL_GPIO_TogglePin>
		playMidTone();
 8001d40:	f7ff fcb8 	bl	80016b4 <playMidTone>
		mode = CLOCK;
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_5);
		playMidTone();
		setWaitingTime(0);
	}
}
 8001d44:	e021      	b.n	8001d8a <switchClockMode+0x72>
	} else if((mode == CLOCK_SETTING && getPressCount(1) == 700) || (mode == CLOCK_SETTING && getWaitingTime() > 30000)) {
 8001d46:	4b12      	ldr	r3, [pc, #72]	@ (8001d90 <switchClockMode+0x78>)
 8001d48:	781b      	ldrb	r3, [r3, #0]
 8001d4a:	2b03      	cmp	r3, #3
 8001d4c:	d106      	bne.n	8001d5c <switchClockMode+0x44>
 8001d4e:	2001      	movs	r0, #1
 8001d50:	f001 fdf8 	bl	8003944 <getPressCount>
 8001d54:	4603      	mov	r3, r0
 8001d56:	f5b3 7f2f 	cmp.w	r3, #700	@ 0x2bc
 8001d5a:	d00a      	beq.n	8001d72 <switchClockMode+0x5a>
 8001d5c:	4b0c      	ldr	r3, [pc, #48]	@ (8001d90 <switchClockMode+0x78>)
 8001d5e:	781b      	ldrb	r3, [r3, #0]
 8001d60:	2b03      	cmp	r3, #3
 8001d62:	d112      	bne.n	8001d8a <switchClockMode+0x72>
 8001d64:	f001 ffaa 	bl	8003cbc <getWaitingTime>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	f247 5230 	movw	r2, #30000	@ 0x7530
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	dd0b      	ble.n	8001d8a <switchClockMode+0x72>
		mode = CLOCK;
 8001d72:	4b07      	ldr	r3, [pc, #28]	@ (8001d90 <switchClockMode+0x78>)
 8001d74:	2200      	movs	r2, #0
 8001d76:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_5);
 8001d78:	2120      	movs	r1, #32
 8001d7a:	4806      	ldr	r0, [pc, #24]	@ (8001d94 <switchClockMode+0x7c>)
 8001d7c:	f002 fc87 	bl	800468e <HAL_GPIO_TogglePin>
		playMidTone();
 8001d80:	f7ff fc98 	bl	80016b4 <playMidTone>
		setWaitingTime(0);
 8001d84:	2000      	movs	r0, #0
 8001d86:	f001 ffa5 	bl	8003cd4 <setWaitingTime>
}
 8001d8a:	bf00      	nop
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	bf00      	nop
 8001d90:	2000030d 	.word	0x2000030d
 8001d94:	40020400 	.word	0x40020400

08001d98 <clcdDisplayClockSetting>:



void clcdDisplayClockSetting() { // 시계설정모드 clcd출력
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b082      	sub	sp, #8
 8001d9c:	af02      	add	r7, sp, #8
	// 0.5초 마다 점멸
	switch(clockSet) {
 8001d9e:	4b9d      	ldr	r3, [pc, #628]	@ (8002014 <clcdDisplayClockSetting+0x27c>)
 8001da0:	781b      	ldrb	r3, [r3, #0]
 8001da2:	2b05      	cmp	r3, #5
 8001da4:	f200 8169 	bhi.w	800207a <clcdDisplayClockSetting+0x2e2>
 8001da8:	a201      	add	r2, pc, #4	@ (adr r2, 8001db0 <clcdDisplayClockSetting+0x18>)
 8001daa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dae:	bf00      	nop
 8001db0:	08001dc9 	.word	0x08001dc9
 8001db4:	08001e35 	.word	0x08001e35
 8001db8:	08001ea1 	.word	0x08001ea1
 8001dbc:	08001f0d 	.word	0x08001f0d
 8001dc0:	08001f79 	.word	0x08001f79
 8001dc4:	08001fe5 	.word	0x08001fe5
	case SECOND:
		sprintf(clock.buffer, "CLOCK %4d.%2d.%2d", clock.year, clock.month, clock.date);
 8001dc8:	4b93      	ldr	r3, [pc, #588]	@ (8002018 <clcdDisplayClockSetting+0x280>)
 8001dca:	681a      	ldr	r2, [r3, #0]
 8001dcc:	4b92      	ldr	r3, [pc, #584]	@ (8002018 <clcdDisplayClockSetting+0x280>)
 8001dce:	6859      	ldr	r1, [r3, #4]
 8001dd0:	4b91      	ldr	r3, [pc, #580]	@ (8002018 <clcdDisplayClockSetting+0x280>)
 8001dd2:	689b      	ldr	r3, [r3, #8]
 8001dd4:	9300      	str	r3, [sp, #0]
 8001dd6:	460b      	mov	r3, r1
 8001dd8:	4990      	ldr	r1, [pc, #576]	@ (800201c <clcdDisplayClockSetting+0x284>)
 8001dda:	4891      	ldr	r0, [pc, #580]	@ (8002020 <clcdDisplayClockSetting+0x288>)
 8001ddc:	f005 f936 	bl	800704c <siprintf>
		CLCD_Puts(0, 0, clock.buffer);
 8001de0:	4a8f      	ldr	r2, [pc, #572]	@ (8002020 <clcdDisplayClockSetting+0x288>)
 8001de2:	2100      	movs	r1, #0
 8001de4:	2000      	movs	r0, #0
 8001de6:	f7ff fa87 	bl	80012f8 <CLCD_Puts>
		if(getWaitingTime() < 200|| getBlink() == TRUE) {
 8001dea:	f001 ff67 	bl	8003cbc <getWaitingTime>
 8001dee:	4603      	mov	r3, r0
 8001df0:	2bc7      	cmp	r3, #199	@ 0xc7
 8001df2:	dd04      	ble.n	8001dfe <clcdDisplayClockSetting+0x66>
 8001df4:	f001 ff56 	bl	8003ca4 <getBlink>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	2b01      	cmp	r3, #1
 8001dfc:	d10c      	bne.n	8001e18 <clcdDisplayClockSetting+0x80>
			sprintf(clock.buffer, "SET     %02d:%02d:%02d", clock.hour, clock.minute, clock.second);
 8001dfe:	4b86      	ldr	r3, [pc, #536]	@ (8002018 <clcdDisplayClockSetting+0x280>)
 8001e00:	68da      	ldr	r2, [r3, #12]
 8001e02:	4b85      	ldr	r3, [pc, #532]	@ (8002018 <clcdDisplayClockSetting+0x280>)
 8001e04:	6919      	ldr	r1, [r3, #16]
 8001e06:	4b84      	ldr	r3, [pc, #528]	@ (8002018 <clcdDisplayClockSetting+0x280>)
 8001e08:	695b      	ldr	r3, [r3, #20]
 8001e0a:	9300      	str	r3, [sp, #0]
 8001e0c:	460b      	mov	r3, r1
 8001e0e:	4985      	ldr	r1, [pc, #532]	@ (8002024 <clcdDisplayClockSetting+0x28c>)
 8001e10:	4883      	ldr	r0, [pc, #524]	@ (8002020 <clcdDisplayClockSetting+0x288>)
 8001e12:	f005 f91b 	bl	800704c <siprintf>
 8001e16:	e007      	b.n	8001e28 <clcdDisplayClockSetting+0x90>
		} else {
			sprintf(clock.buffer, "SET     %02d:%02d:  ", clock.hour, clock.minute);
 8001e18:	4b7f      	ldr	r3, [pc, #508]	@ (8002018 <clcdDisplayClockSetting+0x280>)
 8001e1a:	68da      	ldr	r2, [r3, #12]
 8001e1c:	4b7e      	ldr	r3, [pc, #504]	@ (8002018 <clcdDisplayClockSetting+0x280>)
 8001e1e:	691b      	ldr	r3, [r3, #16]
 8001e20:	4981      	ldr	r1, [pc, #516]	@ (8002028 <clcdDisplayClockSetting+0x290>)
 8001e22:	487f      	ldr	r0, [pc, #508]	@ (8002020 <clcdDisplayClockSetting+0x288>)
 8001e24:	f005 f912 	bl	800704c <siprintf>
		}
		CLCD_Puts(0, 1, clock.buffer);
 8001e28:	4a7d      	ldr	r2, [pc, #500]	@ (8002020 <clcdDisplayClockSetting+0x288>)
 8001e2a:	2101      	movs	r1, #1
 8001e2c:	2000      	movs	r0, #0
 8001e2e:	f7ff fa63 	bl	80012f8 <CLCD_Puts>
		break;
 8001e32:	e122      	b.n	800207a <clcdDisplayClockSetting+0x2e2>
	case MINUTE:
		sprintf(clock.buffer, "CLOCK %4d.%2d.%2d", clock.year, clock.month, clock.date);
 8001e34:	4b78      	ldr	r3, [pc, #480]	@ (8002018 <clcdDisplayClockSetting+0x280>)
 8001e36:	681a      	ldr	r2, [r3, #0]
 8001e38:	4b77      	ldr	r3, [pc, #476]	@ (8002018 <clcdDisplayClockSetting+0x280>)
 8001e3a:	6859      	ldr	r1, [r3, #4]
 8001e3c:	4b76      	ldr	r3, [pc, #472]	@ (8002018 <clcdDisplayClockSetting+0x280>)
 8001e3e:	689b      	ldr	r3, [r3, #8]
 8001e40:	9300      	str	r3, [sp, #0]
 8001e42:	460b      	mov	r3, r1
 8001e44:	4975      	ldr	r1, [pc, #468]	@ (800201c <clcdDisplayClockSetting+0x284>)
 8001e46:	4876      	ldr	r0, [pc, #472]	@ (8002020 <clcdDisplayClockSetting+0x288>)
 8001e48:	f005 f900 	bl	800704c <siprintf>
		CLCD_Puts(0, 0, clock.buffer);
 8001e4c:	4a74      	ldr	r2, [pc, #464]	@ (8002020 <clcdDisplayClockSetting+0x288>)
 8001e4e:	2100      	movs	r1, #0
 8001e50:	2000      	movs	r0, #0
 8001e52:	f7ff fa51 	bl	80012f8 <CLCD_Puts>
		if(getWaitingTime() < 200 || getBlink() == TRUE) {
 8001e56:	f001 ff31 	bl	8003cbc <getWaitingTime>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	2bc7      	cmp	r3, #199	@ 0xc7
 8001e5e:	dd04      	ble.n	8001e6a <clcdDisplayClockSetting+0xd2>
 8001e60:	f001 ff20 	bl	8003ca4 <getBlink>
 8001e64:	4603      	mov	r3, r0
 8001e66:	2b01      	cmp	r3, #1
 8001e68:	d10c      	bne.n	8001e84 <clcdDisplayClockSetting+0xec>
			sprintf(clock.buffer, "SET     %02d:%02d:%02d", clock.hour, clock.minute, clock.second);
 8001e6a:	4b6b      	ldr	r3, [pc, #428]	@ (8002018 <clcdDisplayClockSetting+0x280>)
 8001e6c:	68da      	ldr	r2, [r3, #12]
 8001e6e:	4b6a      	ldr	r3, [pc, #424]	@ (8002018 <clcdDisplayClockSetting+0x280>)
 8001e70:	6919      	ldr	r1, [r3, #16]
 8001e72:	4b69      	ldr	r3, [pc, #420]	@ (8002018 <clcdDisplayClockSetting+0x280>)
 8001e74:	695b      	ldr	r3, [r3, #20]
 8001e76:	9300      	str	r3, [sp, #0]
 8001e78:	460b      	mov	r3, r1
 8001e7a:	496a      	ldr	r1, [pc, #424]	@ (8002024 <clcdDisplayClockSetting+0x28c>)
 8001e7c:	4868      	ldr	r0, [pc, #416]	@ (8002020 <clcdDisplayClockSetting+0x288>)
 8001e7e:	f005 f8e5 	bl	800704c <siprintf>
 8001e82:	e007      	b.n	8001e94 <clcdDisplayClockSetting+0xfc>
		} else {
			sprintf(clock.buffer, "SET     %02d:  :%02d", clock.hour, clock.second);
 8001e84:	4b64      	ldr	r3, [pc, #400]	@ (8002018 <clcdDisplayClockSetting+0x280>)
 8001e86:	68da      	ldr	r2, [r3, #12]
 8001e88:	4b63      	ldr	r3, [pc, #396]	@ (8002018 <clcdDisplayClockSetting+0x280>)
 8001e8a:	695b      	ldr	r3, [r3, #20]
 8001e8c:	4967      	ldr	r1, [pc, #412]	@ (800202c <clcdDisplayClockSetting+0x294>)
 8001e8e:	4864      	ldr	r0, [pc, #400]	@ (8002020 <clcdDisplayClockSetting+0x288>)
 8001e90:	f005 f8dc 	bl	800704c <siprintf>
		}
		CLCD_Puts(0, 1, clock.buffer);
 8001e94:	4a62      	ldr	r2, [pc, #392]	@ (8002020 <clcdDisplayClockSetting+0x288>)
 8001e96:	2101      	movs	r1, #1
 8001e98:	2000      	movs	r0, #0
 8001e9a:	f7ff fa2d 	bl	80012f8 <CLCD_Puts>
		break;
 8001e9e:	e0ec      	b.n	800207a <clcdDisplayClockSetting+0x2e2>
	case HOUR:
		sprintf(clock.buffer, "CLOCK %4d.%2d.%2d", clock.year, clock.month, clock.date);
 8001ea0:	4b5d      	ldr	r3, [pc, #372]	@ (8002018 <clcdDisplayClockSetting+0x280>)
 8001ea2:	681a      	ldr	r2, [r3, #0]
 8001ea4:	4b5c      	ldr	r3, [pc, #368]	@ (8002018 <clcdDisplayClockSetting+0x280>)
 8001ea6:	6859      	ldr	r1, [r3, #4]
 8001ea8:	4b5b      	ldr	r3, [pc, #364]	@ (8002018 <clcdDisplayClockSetting+0x280>)
 8001eaa:	689b      	ldr	r3, [r3, #8]
 8001eac:	9300      	str	r3, [sp, #0]
 8001eae:	460b      	mov	r3, r1
 8001eb0:	495a      	ldr	r1, [pc, #360]	@ (800201c <clcdDisplayClockSetting+0x284>)
 8001eb2:	485b      	ldr	r0, [pc, #364]	@ (8002020 <clcdDisplayClockSetting+0x288>)
 8001eb4:	f005 f8ca 	bl	800704c <siprintf>
		CLCD_Puts(0, 0, clock.buffer);
 8001eb8:	4a59      	ldr	r2, [pc, #356]	@ (8002020 <clcdDisplayClockSetting+0x288>)
 8001eba:	2100      	movs	r1, #0
 8001ebc:	2000      	movs	r0, #0
 8001ebe:	f7ff fa1b 	bl	80012f8 <CLCD_Puts>
		if(getWaitingTime() < 200 || getBlink() == TRUE) {
 8001ec2:	f001 fefb 	bl	8003cbc <getWaitingTime>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	2bc7      	cmp	r3, #199	@ 0xc7
 8001eca:	dd04      	ble.n	8001ed6 <clcdDisplayClockSetting+0x13e>
 8001ecc:	f001 feea 	bl	8003ca4 <getBlink>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	2b01      	cmp	r3, #1
 8001ed4:	d10c      	bne.n	8001ef0 <clcdDisplayClockSetting+0x158>
			sprintf(clock.buffer, "SET     %02d:%02d:%02d", clock.hour, clock.minute, clock.second);
 8001ed6:	4b50      	ldr	r3, [pc, #320]	@ (8002018 <clcdDisplayClockSetting+0x280>)
 8001ed8:	68da      	ldr	r2, [r3, #12]
 8001eda:	4b4f      	ldr	r3, [pc, #316]	@ (8002018 <clcdDisplayClockSetting+0x280>)
 8001edc:	6919      	ldr	r1, [r3, #16]
 8001ede:	4b4e      	ldr	r3, [pc, #312]	@ (8002018 <clcdDisplayClockSetting+0x280>)
 8001ee0:	695b      	ldr	r3, [r3, #20]
 8001ee2:	9300      	str	r3, [sp, #0]
 8001ee4:	460b      	mov	r3, r1
 8001ee6:	494f      	ldr	r1, [pc, #316]	@ (8002024 <clcdDisplayClockSetting+0x28c>)
 8001ee8:	484d      	ldr	r0, [pc, #308]	@ (8002020 <clcdDisplayClockSetting+0x288>)
 8001eea:	f005 f8af 	bl	800704c <siprintf>
 8001eee:	e007      	b.n	8001f00 <clcdDisplayClockSetting+0x168>
		} else {
			sprintf(clock.buffer, "SET       :%02d:%02d", clock.minute, clock.second);
 8001ef0:	4b49      	ldr	r3, [pc, #292]	@ (8002018 <clcdDisplayClockSetting+0x280>)
 8001ef2:	691a      	ldr	r2, [r3, #16]
 8001ef4:	4b48      	ldr	r3, [pc, #288]	@ (8002018 <clcdDisplayClockSetting+0x280>)
 8001ef6:	695b      	ldr	r3, [r3, #20]
 8001ef8:	494d      	ldr	r1, [pc, #308]	@ (8002030 <clcdDisplayClockSetting+0x298>)
 8001efa:	4849      	ldr	r0, [pc, #292]	@ (8002020 <clcdDisplayClockSetting+0x288>)
 8001efc:	f005 f8a6 	bl	800704c <siprintf>
		}
		CLCD_Puts(0, 1, clock.buffer);
 8001f00:	4a47      	ldr	r2, [pc, #284]	@ (8002020 <clcdDisplayClockSetting+0x288>)
 8001f02:	2101      	movs	r1, #1
 8001f04:	2000      	movs	r0, #0
 8001f06:	f7ff f9f7 	bl	80012f8 <CLCD_Puts>
		break;
 8001f0a:	e0b6      	b.n	800207a <clcdDisplayClockSetting+0x2e2>
	case DATE:
		if(getWaitingTime() < 200 || getBlink() == TRUE) {
 8001f0c:	f001 fed6 	bl	8003cbc <getWaitingTime>
 8001f10:	4603      	mov	r3, r0
 8001f12:	2bc7      	cmp	r3, #199	@ 0xc7
 8001f14:	dd04      	ble.n	8001f20 <clcdDisplayClockSetting+0x188>
 8001f16:	f001 fec5 	bl	8003ca4 <getBlink>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	2b01      	cmp	r3, #1
 8001f1e:	d10c      	bne.n	8001f3a <clcdDisplayClockSetting+0x1a2>
			sprintf(clock.buffer, "CLOCK %4d.%2d.%2d", clock.year, clock.month, clock.date);
 8001f20:	4b3d      	ldr	r3, [pc, #244]	@ (8002018 <clcdDisplayClockSetting+0x280>)
 8001f22:	681a      	ldr	r2, [r3, #0]
 8001f24:	4b3c      	ldr	r3, [pc, #240]	@ (8002018 <clcdDisplayClockSetting+0x280>)
 8001f26:	6859      	ldr	r1, [r3, #4]
 8001f28:	4b3b      	ldr	r3, [pc, #236]	@ (8002018 <clcdDisplayClockSetting+0x280>)
 8001f2a:	689b      	ldr	r3, [r3, #8]
 8001f2c:	9300      	str	r3, [sp, #0]
 8001f2e:	460b      	mov	r3, r1
 8001f30:	493a      	ldr	r1, [pc, #232]	@ (800201c <clcdDisplayClockSetting+0x284>)
 8001f32:	483b      	ldr	r0, [pc, #236]	@ (8002020 <clcdDisplayClockSetting+0x288>)
 8001f34:	f005 f88a 	bl	800704c <siprintf>
 8001f38:	e007      	b.n	8001f4a <clcdDisplayClockSetting+0x1b2>
		} else {
			sprintf(clock.buffer, "CLOCK %4d.%2d.  ", clock.year, clock.month);
 8001f3a:	4b37      	ldr	r3, [pc, #220]	@ (8002018 <clcdDisplayClockSetting+0x280>)
 8001f3c:	681a      	ldr	r2, [r3, #0]
 8001f3e:	4b36      	ldr	r3, [pc, #216]	@ (8002018 <clcdDisplayClockSetting+0x280>)
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	493c      	ldr	r1, [pc, #240]	@ (8002034 <clcdDisplayClockSetting+0x29c>)
 8001f44:	4836      	ldr	r0, [pc, #216]	@ (8002020 <clcdDisplayClockSetting+0x288>)
 8001f46:	f005 f881 	bl	800704c <siprintf>
		}
		CLCD_Puts(0, 0, clock.buffer);
 8001f4a:	4a35      	ldr	r2, [pc, #212]	@ (8002020 <clcdDisplayClockSetting+0x288>)
 8001f4c:	2100      	movs	r1, #0
 8001f4e:	2000      	movs	r0, #0
 8001f50:	f7ff f9d2 	bl	80012f8 <CLCD_Puts>
		sprintf(clock.buffer, "SET     %02d:%02d:%02d", clock.hour, clock.minute, clock.second);
 8001f54:	4b30      	ldr	r3, [pc, #192]	@ (8002018 <clcdDisplayClockSetting+0x280>)
 8001f56:	68da      	ldr	r2, [r3, #12]
 8001f58:	4b2f      	ldr	r3, [pc, #188]	@ (8002018 <clcdDisplayClockSetting+0x280>)
 8001f5a:	6919      	ldr	r1, [r3, #16]
 8001f5c:	4b2e      	ldr	r3, [pc, #184]	@ (8002018 <clcdDisplayClockSetting+0x280>)
 8001f5e:	695b      	ldr	r3, [r3, #20]
 8001f60:	9300      	str	r3, [sp, #0]
 8001f62:	460b      	mov	r3, r1
 8001f64:	492f      	ldr	r1, [pc, #188]	@ (8002024 <clcdDisplayClockSetting+0x28c>)
 8001f66:	482e      	ldr	r0, [pc, #184]	@ (8002020 <clcdDisplayClockSetting+0x288>)
 8001f68:	f005 f870 	bl	800704c <siprintf>
		CLCD_Puts(0, 1, clock.buffer);
 8001f6c:	4a2c      	ldr	r2, [pc, #176]	@ (8002020 <clcdDisplayClockSetting+0x288>)
 8001f6e:	2101      	movs	r1, #1
 8001f70:	2000      	movs	r0, #0
 8001f72:	f7ff f9c1 	bl	80012f8 <CLCD_Puts>
		break;
 8001f76:	e080      	b.n	800207a <clcdDisplayClockSetting+0x2e2>
	case MONTH:
		if(getWaitingTime() < 200 || getBlink() == TRUE) {
 8001f78:	f001 fea0 	bl	8003cbc <getWaitingTime>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	2bc7      	cmp	r3, #199	@ 0xc7
 8001f80:	dd04      	ble.n	8001f8c <clcdDisplayClockSetting+0x1f4>
 8001f82:	f001 fe8f 	bl	8003ca4 <getBlink>
 8001f86:	4603      	mov	r3, r0
 8001f88:	2b01      	cmp	r3, #1
 8001f8a:	d10c      	bne.n	8001fa6 <clcdDisplayClockSetting+0x20e>
			sprintf(clock.buffer, "CLOCK %4d.%2d.%2d", clock.year, clock.month, clock.date);
 8001f8c:	4b22      	ldr	r3, [pc, #136]	@ (8002018 <clcdDisplayClockSetting+0x280>)
 8001f8e:	681a      	ldr	r2, [r3, #0]
 8001f90:	4b21      	ldr	r3, [pc, #132]	@ (8002018 <clcdDisplayClockSetting+0x280>)
 8001f92:	6859      	ldr	r1, [r3, #4]
 8001f94:	4b20      	ldr	r3, [pc, #128]	@ (8002018 <clcdDisplayClockSetting+0x280>)
 8001f96:	689b      	ldr	r3, [r3, #8]
 8001f98:	9300      	str	r3, [sp, #0]
 8001f9a:	460b      	mov	r3, r1
 8001f9c:	491f      	ldr	r1, [pc, #124]	@ (800201c <clcdDisplayClockSetting+0x284>)
 8001f9e:	4820      	ldr	r0, [pc, #128]	@ (8002020 <clcdDisplayClockSetting+0x288>)
 8001fa0:	f005 f854 	bl	800704c <siprintf>
 8001fa4:	e007      	b.n	8001fb6 <clcdDisplayClockSetting+0x21e>
		} else {
			sprintf(clock.buffer, "CLOCK %4d.  .%2d", clock.year, clock.date);
 8001fa6:	4b1c      	ldr	r3, [pc, #112]	@ (8002018 <clcdDisplayClockSetting+0x280>)
 8001fa8:	681a      	ldr	r2, [r3, #0]
 8001faa:	4b1b      	ldr	r3, [pc, #108]	@ (8002018 <clcdDisplayClockSetting+0x280>)
 8001fac:	689b      	ldr	r3, [r3, #8]
 8001fae:	4922      	ldr	r1, [pc, #136]	@ (8002038 <clcdDisplayClockSetting+0x2a0>)
 8001fb0:	481b      	ldr	r0, [pc, #108]	@ (8002020 <clcdDisplayClockSetting+0x288>)
 8001fb2:	f005 f84b 	bl	800704c <siprintf>
		}
		CLCD_Puts(0, 0, clock.buffer);
 8001fb6:	4a1a      	ldr	r2, [pc, #104]	@ (8002020 <clcdDisplayClockSetting+0x288>)
 8001fb8:	2100      	movs	r1, #0
 8001fba:	2000      	movs	r0, #0
 8001fbc:	f7ff f99c 	bl	80012f8 <CLCD_Puts>
		sprintf(clock.buffer, "SET     %02d:%02d:%02d", clock.hour, clock.minute, clock.second);
 8001fc0:	4b15      	ldr	r3, [pc, #84]	@ (8002018 <clcdDisplayClockSetting+0x280>)
 8001fc2:	68da      	ldr	r2, [r3, #12]
 8001fc4:	4b14      	ldr	r3, [pc, #80]	@ (8002018 <clcdDisplayClockSetting+0x280>)
 8001fc6:	6919      	ldr	r1, [r3, #16]
 8001fc8:	4b13      	ldr	r3, [pc, #76]	@ (8002018 <clcdDisplayClockSetting+0x280>)
 8001fca:	695b      	ldr	r3, [r3, #20]
 8001fcc:	9300      	str	r3, [sp, #0]
 8001fce:	460b      	mov	r3, r1
 8001fd0:	4914      	ldr	r1, [pc, #80]	@ (8002024 <clcdDisplayClockSetting+0x28c>)
 8001fd2:	4813      	ldr	r0, [pc, #76]	@ (8002020 <clcdDisplayClockSetting+0x288>)
 8001fd4:	f005 f83a 	bl	800704c <siprintf>
		CLCD_Puts(0, 1, clock.buffer);
 8001fd8:	4a11      	ldr	r2, [pc, #68]	@ (8002020 <clcdDisplayClockSetting+0x288>)
 8001fda:	2101      	movs	r1, #1
 8001fdc:	2000      	movs	r0, #0
 8001fde:	f7ff f98b 	bl	80012f8 <CLCD_Puts>
		break;
 8001fe2:	e04a      	b.n	800207a <clcdDisplayClockSetting+0x2e2>
	case YEAR:
		if(getWaitingTime() < 200 || getBlink() == TRUE) {
 8001fe4:	f001 fe6a 	bl	8003cbc <getWaitingTime>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	2bc7      	cmp	r3, #199	@ 0xc7
 8001fec:	dd04      	ble.n	8001ff8 <clcdDisplayClockSetting+0x260>
 8001fee:	f001 fe59 	bl	8003ca4 <getBlink>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	2b01      	cmp	r3, #1
 8001ff6:	d121      	bne.n	800203c <clcdDisplayClockSetting+0x2a4>
			sprintf(clock.buffer, "CLOCK %4d.%2d.%2d", clock.year, clock.month, clock.date);
 8001ff8:	4b07      	ldr	r3, [pc, #28]	@ (8002018 <clcdDisplayClockSetting+0x280>)
 8001ffa:	681a      	ldr	r2, [r3, #0]
 8001ffc:	4b06      	ldr	r3, [pc, #24]	@ (8002018 <clcdDisplayClockSetting+0x280>)
 8001ffe:	6859      	ldr	r1, [r3, #4]
 8002000:	4b05      	ldr	r3, [pc, #20]	@ (8002018 <clcdDisplayClockSetting+0x280>)
 8002002:	689b      	ldr	r3, [r3, #8]
 8002004:	9300      	str	r3, [sp, #0]
 8002006:	460b      	mov	r3, r1
 8002008:	4904      	ldr	r1, [pc, #16]	@ (800201c <clcdDisplayClockSetting+0x284>)
 800200a:	4805      	ldr	r0, [pc, #20]	@ (8002020 <clcdDisplayClockSetting+0x288>)
 800200c:	f005 f81e 	bl	800704c <siprintf>
 8002010:	e01c      	b.n	800204c <clcdDisplayClockSetting+0x2b4>
 8002012:	bf00      	nop
 8002014:	200001a5 	.word	0x200001a5
 8002018:	2000003c 	.word	0x2000003c
 800201c:	08007aa8 	.word	0x08007aa8
 8002020:	2000005b 	.word	0x2000005b
 8002024:	08007abc 	.word	0x08007abc
 8002028:	08007ad4 	.word	0x08007ad4
 800202c:	08007aec 	.word	0x08007aec
 8002030:	08007b04 	.word	0x08007b04
 8002034:	08007b1c 	.word	0x08007b1c
 8002038:	08007b30 	.word	0x08007b30
		} else {
			sprintf(clock.buffer, "CLOCK     .%2d.%2d", clock.month, clock.date);
 800203c:	4b10      	ldr	r3, [pc, #64]	@ (8002080 <clcdDisplayClockSetting+0x2e8>)
 800203e:	685a      	ldr	r2, [r3, #4]
 8002040:	4b0f      	ldr	r3, [pc, #60]	@ (8002080 <clcdDisplayClockSetting+0x2e8>)
 8002042:	689b      	ldr	r3, [r3, #8]
 8002044:	490f      	ldr	r1, [pc, #60]	@ (8002084 <clcdDisplayClockSetting+0x2ec>)
 8002046:	4810      	ldr	r0, [pc, #64]	@ (8002088 <clcdDisplayClockSetting+0x2f0>)
 8002048:	f005 f800 	bl	800704c <siprintf>
		}
		CLCD_Puts(0, 0, clock.buffer);
 800204c:	4a0e      	ldr	r2, [pc, #56]	@ (8002088 <clcdDisplayClockSetting+0x2f0>)
 800204e:	2100      	movs	r1, #0
 8002050:	2000      	movs	r0, #0
 8002052:	f7ff f951 	bl	80012f8 <CLCD_Puts>
		sprintf(clock.buffer, "SET     %02d:%02d:%02d", clock.hour, clock.minute, clock.second);
 8002056:	4b0a      	ldr	r3, [pc, #40]	@ (8002080 <clcdDisplayClockSetting+0x2e8>)
 8002058:	68da      	ldr	r2, [r3, #12]
 800205a:	4b09      	ldr	r3, [pc, #36]	@ (8002080 <clcdDisplayClockSetting+0x2e8>)
 800205c:	6919      	ldr	r1, [r3, #16]
 800205e:	4b08      	ldr	r3, [pc, #32]	@ (8002080 <clcdDisplayClockSetting+0x2e8>)
 8002060:	695b      	ldr	r3, [r3, #20]
 8002062:	9300      	str	r3, [sp, #0]
 8002064:	460b      	mov	r3, r1
 8002066:	4909      	ldr	r1, [pc, #36]	@ (800208c <clcdDisplayClockSetting+0x2f4>)
 8002068:	4807      	ldr	r0, [pc, #28]	@ (8002088 <clcdDisplayClockSetting+0x2f0>)
 800206a:	f004 ffef 	bl	800704c <siprintf>
		CLCD_Puts(0, 1, clock.buffer);
 800206e:	4a06      	ldr	r2, [pc, #24]	@ (8002088 <clcdDisplayClockSetting+0x2f0>)
 8002070:	2101      	movs	r1, #1
 8002072:	2000      	movs	r0, #0
 8002074:	f7ff f940 	bl	80012f8 <CLCD_Puts>
		break;
 8002078:	bf00      	nop
	}
}
 800207a:	bf00      	nop
 800207c:	46bd      	mov	sp, r7
 800207e:	bd80      	pop	{r7, pc}
 8002080:	2000003c 	.word	0x2000003c
 8002084:	08007b44 	.word	0x08007b44
 8002088:	2000005b 	.word	0x2000005b
 800208c:	08007abc 	.word	0x08007abc

08002090 <settingTime>:

void settingTime() {	// 버튼 2번 동작 설정할 단위 변경
 8002090:	b480      	push	{r7}
 8002092:	af00      	add	r7, sp, #0
	if(clockSet == YEAR) {
 8002094:	4b09      	ldr	r3, [pc, #36]	@ (80020bc <settingTime+0x2c>)
 8002096:	781b      	ldrb	r3, [r3, #0]
 8002098:	2b05      	cmp	r3, #5
 800209a:	d103      	bne.n	80020a4 <settingTime+0x14>
		clockSet = SECOND;
 800209c:	4b07      	ldr	r3, [pc, #28]	@ (80020bc <settingTime+0x2c>)
 800209e:	2200      	movs	r2, #0
 80020a0:	701a      	strb	r2, [r3, #0]
	} else {
		clockSet++;
	}
}
 80020a2:	e005      	b.n	80020b0 <settingTime+0x20>
		clockSet++;
 80020a4:	4b05      	ldr	r3, [pc, #20]	@ (80020bc <settingTime+0x2c>)
 80020a6:	781b      	ldrb	r3, [r3, #0]
 80020a8:	3301      	adds	r3, #1
 80020aa:	b2da      	uxtb	r2, r3
 80020ac:	4b03      	ldr	r3, [pc, #12]	@ (80020bc <settingTime+0x2c>)
 80020ae:	701a      	strb	r2, [r3, #0]
}
 80020b0:	bf00      	nop
 80020b2:	46bd      	mov	sp, r7
 80020b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b8:	4770      	bx	lr
 80020ba:	bf00      	nop
 80020bc:	200001a5 	.word	0x200001a5

080020c0 <incrementTime>:

void incrementTime() {	// 버튼 3번동작 (시간 증가)
 80020c0:	b580      	push	{r7, lr}
 80020c2:	af00      	add	r7, sp, #0
	switch(clockSet) {
 80020c4:	4b64      	ldr	r3, [pc, #400]	@ (8002258 <incrementTime+0x198>)
 80020c6:	781b      	ldrb	r3, [r3, #0]
 80020c8:	2b05      	cmp	r3, #5
 80020ca:	f200 80c3 	bhi.w	8002254 <incrementTime+0x194>
 80020ce:	a201      	add	r2, pc, #4	@ (adr r2, 80020d4 <incrementTime+0x14>)
 80020d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020d4:	080020ed 	.word	0x080020ed
 80020d8:	080020fb 	.word	0x080020fb
 80020dc:	08002117 	.word	0x08002117
 80020e0:	08002133 	.word	0x08002133
 80020e4:	0800219d 	.word	0x0800219d
 80020e8:	0800220f 	.word	0x0800220f
	case SECOND:
		clock.second = 0;
 80020ec:	4b5b      	ldr	r3, [pc, #364]	@ (800225c <incrementTime+0x19c>)
 80020ee:	2200      	movs	r2, #0
 80020f0:	615a      	str	r2, [r3, #20]
		clock.millisecond = 0;
 80020f2:	4b5a      	ldr	r3, [pc, #360]	@ (800225c <incrementTime+0x19c>)
 80020f4:	2200      	movs	r2, #0
 80020f6:	619a      	str	r2, [r3, #24]
		break;
 80020f8:	e0ac      	b.n	8002254 <incrementTime+0x194>
	case MINUTE:
		if(clock.minute == 59) {
 80020fa:	4b58      	ldr	r3, [pc, #352]	@ (800225c <incrementTime+0x19c>)
 80020fc:	691b      	ldr	r3, [r3, #16]
 80020fe:	2b3b      	cmp	r3, #59	@ 0x3b
 8002100:	d103      	bne.n	800210a <incrementTime+0x4a>
			clock.minute = 0;
 8002102:	4b56      	ldr	r3, [pc, #344]	@ (800225c <incrementTime+0x19c>)
 8002104:	2200      	movs	r2, #0
 8002106:	611a      	str	r2, [r3, #16]
		} else {
			clock.minute++;
		}
		break;
 8002108:	e0a4      	b.n	8002254 <incrementTime+0x194>
			clock.minute++;
 800210a:	4b54      	ldr	r3, [pc, #336]	@ (800225c <incrementTime+0x19c>)
 800210c:	691b      	ldr	r3, [r3, #16]
 800210e:	3301      	adds	r3, #1
 8002110:	4a52      	ldr	r2, [pc, #328]	@ (800225c <incrementTime+0x19c>)
 8002112:	6113      	str	r3, [r2, #16]
		break;
 8002114:	e09e      	b.n	8002254 <incrementTime+0x194>
	case HOUR:
		if(clock.hour == 23) {
 8002116:	4b51      	ldr	r3, [pc, #324]	@ (800225c <incrementTime+0x19c>)
 8002118:	68db      	ldr	r3, [r3, #12]
 800211a:	2b17      	cmp	r3, #23
 800211c:	d103      	bne.n	8002126 <incrementTime+0x66>
			clock.hour = 0;
 800211e:	4b4f      	ldr	r3, [pc, #316]	@ (800225c <incrementTime+0x19c>)
 8002120:	2200      	movs	r2, #0
 8002122:	60da      	str	r2, [r3, #12]
		} else {
			clock.hour++;
		}
		break;
 8002124:	e096      	b.n	8002254 <incrementTime+0x194>
			clock.hour++;
 8002126:	4b4d      	ldr	r3, [pc, #308]	@ (800225c <incrementTime+0x19c>)
 8002128:	68db      	ldr	r3, [r3, #12]
 800212a:	3301      	adds	r3, #1
 800212c:	4a4b      	ldr	r2, [pc, #300]	@ (800225c <incrementTime+0x19c>)
 800212e:	60d3      	str	r3, [r2, #12]
		break;
 8002130:	e090      	b.n	8002254 <incrementTime+0x194>
	case DATE:
		clock.date++;
 8002132:	4b4a      	ldr	r3, [pc, #296]	@ (800225c <incrementTime+0x19c>)
 8002134:	689b      	ldr	r3, [r3, #8]
 8002136:	3301      	adds	r3, #1
 8002138:	4a48      	ldr	r2, [pc, #288]	@ (800225c <incrementTime+0x19c>)
 800213a:	6093      	str	r3, [r2, #8]
		if(clock.month == 2) {
 800213c:	4b47      	ldr	r3, [pc, #284]	@ (800225c <incrementTime+0x19c>)
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	2b02      	cmp	r3, #2
 8002142:	d113      	bne.n	800216c <incrementTime+0xac>
			if(clock.leapYear == TRUE) {
 8002144:	4b45      	ldr	r3, [pc, #276]	@ (800225c <incrementTime+0x19c>)
 8002146:	7f1b      	ldrb	r3, [r3, #28]
 8002148:	2b01      	cmp	r3, #1
 800214a:	d107      	bne.n	800215c <incrementTime+0x9c>
				if(clock.date > 29) {
 800214c:	4b43      	ldr	r3, [pc, #268]	@ (800225c <incrementTime+0x19c>)
 800214e:	689b      	ldr	r3, [r3, #8]
 8002150:	2b1d      	cmp	r3, #29
 8002152:	dd7a      	ble.n	800224a <incrementTime+0x18a>
					clock.date = 1;
 8002154:	4b41      	ldr	r3, [pc, #260]	@ (800225c <incrementTime+0x19c>)
 8002156:	2201      	movs	r2, #1
 8002158:	609a      	str	r2, [r3, #8]
		} else if(clock.thiryMonth == FALSE) { // 말일이 31일인 달 1, 3, 5, 7, 8, 10, 12
			if(clock.date > 31) {
				clock.date = 1;
			}
		}
		break;
 800215a:	e076      	b.n	800224a <incrementTime+0x18a>
				if(clock.date > 28) {
 800215c:	4b3f      	ldr	r3, [pc, #252]	@ (800225c <incrementTime+0x19c>)
 800215e:	689b      	ldr	r3, [r3, #8]
 8002160:	2b1c      	cmp	r3, #28
 8002162:	dd72      	ble.n	800224a <incrementTime+0x18a>
					clock.date = 1;
 8002164:	4b3d      	ldr	r3, [pc, #244]	@ (800225c <incrementTime+0x19c>)
 8002166:	2201      	movs	r2, #1
 8002168:	609a      	str	r2, [r3, #8]
		break;
 800216a:	e06e      	b.n	800224a <incrementTime+0x18a>
		} else if(clock.thiryMonth == TRUE) { // 말일이 30일인 달 4, 6, 9, 11
 800216c:	4b3b      	ldr	r3, [pc, #236]	@ (800225c <incrementTime+0x19c>)
 800216e:	7f5b      	ldrb	r3, [r3, #29]
 8002170:	2b01      	cmp	r3, #1
 8002172:	d107      	bne.n	8002184 <incrementTime+0xc4>
			if(clock.date > 30) {
 8002174:	4b39      	ldr	r3, [pc, #228]	@ (800225c <incrementTime+0x19c>)
 8002176:	689b      	ldr	r3, [r3, #8]
 8002178:	2b1e      	cmp	r3, #30
 800217a:	dd66      	ble.n	800224a <incrementTime+0x18a>
				clock.date = 1;
 800217c:	4b37      	ldr	r3, [pc, #220]	@ (800225c <incrementTime+0x19c>)
 800217e:	2201      	movs	r2, #1
 8002180:	609a      	str	r2, [r3, #8]
		break;
 8002182:	e062      	b.n	800224a <incrementTime+0x18a>
		} else if(clock.thiryMonth == FALSE) { // 말일이 31일인 달 1, 3, 5, 7, 8, 10, 12
 8002184:	4b35      	ldr	r3, [pc, #212]	@ (800225c <incrementTime+0x19c>)
 8002186:	7f5b      	ldrb	r3, [r3, #29]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d15e      	bne.n	800224a <incrementTime+0x18a>
			if(clock.date > 31) {
 800218c:	4b33      	ldr	r3, [pc, #204]	@ (800225c <incrementTime+0x19c>)
 800218e:	689b      	ldr	r3, [r3, #8]
 8002190:	2b1f      	cmp	r3, #31
 8002192:	dd5a      	ble.n	800224a <incrementTime+0x18a>
				clock.date = 1;
 8002194:	4b31      	ldr	r3, [pc, #196]	@ (800225c <incrementTime+0x19c>)
 8002196:	2201      	movs	r2, #1
 8002198:	609a      	str	r2, [r3, #8]
		break;
 800219a:	e056      	b.n	800224a <incrementTime+0x18a>
	case MONTH:
		clock.month++;
 800219c:	4b2f      	ldr	r3, [pc, #188]	@ (800225c <incrementTime+0x19c>)
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	3301      	adds	r3, #1
 80021a2:	4a2e      	ldr	r2, [pc, #184]	@ (800225c <incrementTime+0x19c>)
 80021a4:	6053      	str	r3, [r2, #4]
		clock.thiryMonth = isThirtyDays(clock.month);
 80021a6:	4b2d      	ldr	r3, [pc, #180]	@ (800225c <incrementTime+0x19c>)
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	4618      	mov	r0, r3
 80021ac:	f7ff fd92 	bl	8001cd4 <isThirtyDays>
 80021b0:	4603      	mov	r3, r0
 80021b2:	b2da      	uxtb	r2, r3
 80021b4:	4b29      	ldr	r3, [pc, #164]	@ (800225c <incrementTime+0x19c>)
 80021b6:	775a      	strb	r2, [r3, #29]
		if(clock.month == 2) {
 80021b8:	4b28      	ldr	r3, [pc, #160]	@ (800225c <incrementTime+0x19c>)
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	2b02      	cmp	r3, #2
 80021be:	d113      	bne.n	80021e8 <incrementTime+0x128>
			if(clock.leapYear == TRUE) {
 80021c0:	4b26      	ldr	r3, [pc, #152]	@ (800225c <incrementTime+0x19c>)
 80021c2:	7f1b      	ldrb	r3, [r3, #28]
 80021c4:	2b01      	cmp	r3, #1
 80021c6:	d107      	bne.n	80021d8 <incrementTime+0x118>
				if(clock.date > 29) {
 80021c8:	4b24      	ldr	r3, [pc, #144]	@ (800225c <incrementTime+0x19c>)
 80021ca:	689b      	ldr	r3, [r3, #8]
 80021cc:	2b1d      	cmp	r3, #29
 80021ce:	dd16      	ble.n	80021fe <incrementTime+0x13e>
					clock.date = 29;
 80021d0:	4b22      	ldr	r3, [pc, #136]	@ (800225c <incrementTime+0x19c>)
 80021d2:	221d      	movs	r2, #29
 80021d4:	609a      	str	r2, [r3, #8]
 80021d6:	e012      	b.n	80021fe <incrementTime+0x13e>
				}
			} else {
				if(clock.date > 28) {
 80021d8:	4b20      	ldr	r3, [pc, #128]	@ (800225c <incrementTime+0x19c>)
 80021da:	689b      	ldr	r3, [r3, #8]
 80021dc:	2b1c      	cmp	r3, #28
 80021de:	dd0e      	ble.n	80021fe <incrementTime+0x13e>
					clock.date = 28;
 80021e0:	4b1e      	ldr	r3, [pc, #120]	@ (800225c <incrementTime+0x19c>)
 80021e2:	221c      	movs	r2, #28
 80021e4:	609a      	str	r2, [r3, #8]
 80021e6:	e00a      	b.n	80021fe <incrementTime+0x13e>
				}
			}
		} else if(clock.thiryMonth == TRUE) {
 80021e8:	4b1c      	ldr	r3, [pc, #112]	@ (800225c <incrementTime+0x19c>)
 80021ea:	7f5b      	ldrb	r3, [r3, #29]
 80021ec:	2b01      	cmp	r3, #1
 80021ee:	d106      	bne.n	80021fe <incrementTime+0x13e>
			if(clock.date > 30) {
 80021f0:	4b1a      	ldr	r3, [pc, #104]	@ (800225c <incrementTime+0x19c>)
 80021f2:	689b      	ldr	r3, [r3, #8]
 80021f4:	2b1e      	cmp	r3, #30
 80021f6:	dd02      	ble.n	80021fe <incrementTime+0x13e>
				clock.date = 30;
 80021f8:	4b18      	ldr	r3, [pc, #96]	@ (800225c <incrementTime+0x19c>)
 80021fa:	221e      	movs	r2, #30
 80021fc:	609a      	str	r2, [r3, #8]
			}
		}
		if(clock.month > 12) {
 80021fe:	4b17      	ldr	r3, [pc, #92]	@ (800225c <incrementTime+0x19c>)
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	2b0c      	cmp	r3, #12
 8002204:	dd23      	ble.n	800224e <incrementTime+0x18e>
			clock.month = 1;
 8002206:	4b15      	ldr	r3, [pc, #84]	@ (800225c <incrementTime+0x19c>)
 8002208:	2201      	movs	r2, #1
 800220a:	605a      	str	r2, [r3, #4]
		}
		break;
 800220c:	e01f      	b.n	800224e <incrementTime+0x18e>
	case YEAR:
		clock.year++;
 800220e:	4b13      	ldr	r3, [pc, #76]	@ (800225c <incrementTime+0x19c>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	3301      	adds	r3, #1
 8002214:	4a11      	ldr	r2, [pc, #68]	@ (800225c <incrementTime+0x19c>)
 8002216:	6013      	str	r3, [r2, #0]
		clock.leapYear = leapYearCalculator(clock.year);
 8002218:	4b10      	ldr	r3, [pc, #64]	@ (800225c <incrementTime+0x19c>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4618      	mov	r0, r3
 800221e:	f7ff fd25 	bl	8001c6c <leapYearCalculator>
 8002222:	4603      	mov	r3, r0
 8002224:	b2da      	uxtb	r2, r3
 8002226:	4b0d      	ldr	r3, [pc, #52]	@ (800225c <incrementTime+0x19c>)
 8002228:	771a      	strb	r2, [r3, #28]
		if(clock.leapYear == FALSE) {
 800222a:	4b0c      	ldr	r3, [pc, #48]	@ (800225c <incrementTime+0x19c>)
 800222c:	7f1b      	ldrb	r3, [r3, #28]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d10f      	bne.n	8002252 <incrementTime+0x192>
			if(clock.month == 2 && clock.date > 28) {
 8002232:	4b0a      	ldr	r3, [pc, #40]	@ (800225c <incrementTime+0x19c>)
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	2b02      	cmp	r3, #2
 8002238:	d10b      	bne.n	8002252 <incrementTime+0x192>
 800223a:	4b08      	ldr	r3, [pc, #32]	@ (800225c <incrementTime+0x19c>)
 800223c:	689b      	ldr	r3, [r3, #8]
 800223e:	2b1c      	cmp	r3, #28
 8002240:	dd07      	ble.n	8002252 <incrementTime+0x192>
				clock.date = 28;
 8002242:	4b06      	ldr	r3, [pc, #24]	@ (800225c <incrementTime+0x19c>)
 8002244:	221c      	movs	r2, #28
 8002246:	609a      	str	r2, [r3, #8]
			}
		}
		break;
 8002248:	e003      	b.n	8002252 <incrementTime+0x192>
		break;
 800224a:	bf00      	nop
 800224c:	e002      	b.n	8002254 <incrementTime+0x194>
		break;
 800224e:	bf00      	nop
 8002250:	e000      	b.n	8002254 <incrementTime+0x194>
		break;
 8002252:	bf00      	nop
	}
}
 8002254:	bf00      	nop
 8002256:	bd80      	pop	{r7, pc}
 8002258:	200001a5 	.word	0x200001a5
 800225c:	2000003c 	.word	0x2000003c

08002260 <decrementTime>:

void decrementTime() {	// 버튼 4번동작 (시간 감소)
 8002260:	b580      	push	{r7, lr}
 8002262:	af00      	add	r7, sp, #0
	switch(clockSet) {
 8002264:	4b68      	ldr	r3, [pc, #416]	@ (8002408 <decrementTime+0x1a8>)
 8002266:	781b      	ldrb	r3, [r3, #0]
 8002268:	2b05      	cmp	r3, #5
 800226a:	f200 80ca 	bhi.w	8002402 <decrementTime+0x1a2>
 800226e:	a201      	add	r2, pc, #4	@ (adr r2, 8002274 <decrementTime+0x14>)
 8002270:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002274:	0800228d 	.word	0x0800228d
 8002278:	0800229b 	.word	0x0800229b
 800227c:	080022b7 	.word	0x080022b7
 8002280:	080022d3 	.word	0x080022d3
 8002284:	0800233f 	.word	0x0800233f
 8002288:	080023b1 	.word	0x080023b1
	case SECOND:
		clock.second = 0;
 800228c:	4b5f      	ldr	r3, [pc, #380]	@ (800240c <decrementTime+0x1ac>)
 800228e:	2200      	movs	r2, #0
 8002290:	615a      	str	r2, [r3, #20]
		clock.millisecond = 0;
 8002292:	4b5e      	ldr	r3, [pc, #376]	@ (800240c <decrementTime+0x1ac>)
 8002294:	2200      	movs	r2, #0
 8002296:	619a      	str	r2, [r3, #24]
		break;
 8002298:	e0b3      	b.n	8002402 <decrementTime+0x1a2>
	case MINUTE:
		if(clock.minute == 0) {
 800229a:	4b5c      	ldr	r3, [pc, #368]	@ (800240c <decrementTime+0x1ac>)
 800229c:	691b      	ldr	r3, [r3, #16]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d103      	bne.n	80022aa <decrementTime+0x4a>
			clock.minute = 59;
 80022a2:	4b5a      	ldr	r3, [pc, #360]	@ (800240c <decrementTime+0x1ac>)
 80022a4:	223b      	movs	r2, #59	@ 0x3b
 80022a6:	611a      	str	r2, [r3, #16]
		} else {
			clock.minute--;
		}
		break;
 80022a8:	e0ab      	b.n	8002402 <decrementTime+0x1a2>
			clock.minute--;
 80022aa:	4b58      	ldr	r3, [pc, #352]	@ (800240c <decrementTime+0x1ac>)
 80022ac:	691b      	ldr	r3, [r3, #16]
 80022ae:	3b01      	subs	r3, #1
 80022b0:	4a56      	ldr	r2, [pc, #344]	@ (800240c <decrementTime+0x1ac>)
 80022b2:	6113      	str	r3, [r2, #16]
		break;
 80022b4:	e0a5      	b.n	8002402 <decrementTime+0x1a2>
	case HOUR:
		if(clock.hour == 0) {
 80022b6:	4b55      	ldr	r3, [pc, #340]	@ (800240c <decrementTime+0x1ac>)
 80022b8:	68db      	ldr	r3, [r3, #12]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d103      	bne.n	80022c6 <decrementTime+0x66>
			clock.hour = 23;
 80022be:	4b53      	ldr	r3, [pc, #332]	@ (800240c <decrementTime+0x1ac>)
 80022c0:	2217      	movs	r2, #23
 80022c2:	60da      	str	r2, [r3, #12]
		} else {
			clock.hour--;
		}
		break;
 80022c4:	e09d      	b.n	8002402 <decrementTime+0x1a2>
			clock.hour--;
 80022c6:	4b51      	ldr	r3, [pc, #324]	@ (800240c <decrementTime+0x1ac>)
 80022c8:	68db      	ldr	r3, [r3, #12]
 80022ca:	3b01      	subs	r3, #1
 80022cc:	4a4f      	ldr	r2, [pc, #316]	@ (800240c <decrementTime+0x1ac>)
 80022ce:	60d3      	str	r3, [r2, #12]
		break;
 80022d0:	e097      	b.n	8002402 <decrementTime+0x1a2>
	case DATE:
		clock.date--;
 80022d2:	4b4e      	ldr	r3, [pc, #312]	@ (800240c <decrementTime+0x1ac>)
 80022d4:	689b      	ldr	r3, [r3, #8]
 80022d6:	3b01      	subs	r3, #1
 80022d8:	4a4c      	ldr	r2, [pc, #304]	@ (800240c <decrementTime+0x1ac>)
 80022da:	6093      	str	r3, [r2, #8]
		if(clock.month == 2) {
 80022dc:	4b4b      	ldr	r3, [pc, #300]	@ (800240c <decrementTime+0x1ac>)
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	2b02      	cmp	r3, #2
 80022e2:	d114      	bne.n	800230e <decrementTime+0xae>
			if(clock.leapYear == TRUE) {
 80022e4:	4b49      	ldr	r3, [pc, #292]	@ (800240c <decrementTime+0x1ac>)
 80022e6:	7f1b      	ldrb	r3, [r3, #28]
 80022e8:	2b01      	cmp	r3, #1
 80022ea:	d108      	bne.n	80022fe <decrementTime+0x9e>
				if(clock.date < 1) {
 80022ec:	4b47      	ldr	r3, [pc, #284]	@ (800240c <decrementTime+0x1ac>)
 80022ee:	689b      	ldr	r3, [r3, #8]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	f300 8081 	bgt.w	80023f8 <decrementTime+0x198>
					clock.date = 29;
 80022f6:	4b45      	ldr	r3, [pc, #276]	@ (800240c <decrementTime+0x1ac>)
 80022f8:	221d      	movs	r2, #29
 80022fa:	609a      	str	r2, [r3, #8]
		} else if(clock.thiryMonth == FALSE) { // 말일이 31일인 달 1, 3, 5, 7, 8, 10, 12
			if(clock.date < 1) {
				clock.date = 31;
			}
		}
		break;
 80022fc:	e07c      	b.n	80023f8 <decrementTime+0x198>
				if(clock.date < 1) {
 80022fe:	4b43      	ldr	r3, [pc, #268]	@ (800240c <decrementTime+0x1ac>)
 8002300:	689b      	ldr	r3, [r3, #8]
 8002302:	2b00      	cmp	r3, #0
 8002304:	dc78      	bgt.n	80023f8 <decrementTime+0x198>
					clock.date = 28;
 8002306:	4b41      	ldr	r3, [pc, #260]	@ (800240c <decrementTime+0x1ac>)
 8002308:	221c      	movs	r2, #28
 800230a:	609a      	str	r2, [r3, #8]
		break;
 800230c:	e074      	b.n	80023f8 <decrementTime+0x198>
		} else if(clock.thiryMonth == TRUE) { // 말일이 30일인 달 4, 6, 9, 11
 800230e:	4b3f      	ldr	r3, [pc, #252]	@ (800240c <decrementTime+0x1ac>)
 8002310:	7f5b      	ldrb	r3, [r3, #29]
 8002312:	2b01      	cmp	r3, #1
 8002314:	d107      	bne.n	8002326 <decrementTime+0xc6>
			if(clock.date < 1) {
 8002316:	4b3d      	ldr	r3, [pc, #244]	@ (800240c <decrementTime+0x1ac>)
 8002318:	689b      	ldr	r3, [r3, #8]
 800231a:	2b00      	cmp	r3, #0
 800231c:	dc6c      	bgt.n	80023f8 <decrementTime+0x198>
				clock.date = 30;
 800231e:	4b3b      	ldr	r3, [pc, #236]	@ (800240c <decrementTime+0x1ac>)
 8002320:	221e      	movs	r2, #30
 8002322:	609a      	str	r2, [r3, #8]
		break;
 8002324:	e068      	b.n	80023f8 <decrementTime+0x198>
		} else if(clock.thiryMonth == FALSE) { // 말일이 31일인 달 1, 3, 5, 7, 8, 10, 12
 8002326:	4b39      	ldr	r3, [pc, #228]	@ (800240c <decrementTime+0x1ac>)
 8002328:	7f5b      	ldrb	r3, [r3, #29]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d164      	bne.n	80023f8 <decrementTime+0x198>
			if(clock.date < 1) {
 800232e:	4b37      	ldr	r3, [pc, #220]	@ (800240c <decrementTime+0x1ac>)
 8002330:	689b      	ldr	r3, [r3, #8]
 8002332:	2b00      	cmp	r3, #0
 8002334:	dc60      	bgt.n	80023f8 <decrementTime+0x198>
				clock.date = 31;
 8002336:	4b35      	ldr	r3, [pc, #212]	@ (800240c <decrementTime+0x1ac>)
 8002338:	221f      	movs	r2, #31
 800233a:	609a      	str	r2, [r3, #8]
		break;
 800233c:	e05c      	b.n	80023f8 <decrementTime+0x198>
	case MONTH:
		clock.month--;
 800233e:	4b33      	ldr	r3, [pc, #204]	@ (800240c <decrementTime+0x1ac>)
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	3b01      	subs	r3, #1
 8002344:	4a31      	ldr	r2, [pc, #196]	@ (800240c <decrementTime+0x1ac>)
 8002346:	6053      	str	r3, [r2, #4]
		clock.thiryMonth = isThirtyDays(clock.month);
 8002348:	4b30      	ldr	r3, [pc, #192]	@ (800240c <decrementTime+0x1ac>)
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	4618      	mov	r0, r3
 800234e:	f7ff fcc1 	bl	8001cd4 <isThirtyDays>
 8002352:	4603      	mov	r3, r0
 8002354:	b2da      	uxtb	r2, r3
 8002356:	4b2d      	ldr	r3, [pc, #180]	@ (800240c <decrementTime+0x1ac>)
 8002358:	775a      	strb	r2, [r3, #29]
		if(clock.month == 2) {
 800235a:	4b2c      	ldr	r3, [pc, #176]	@ (800240c <decrementTime+0x1ac>)
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	2b02      	cmp	r3, #2
 8002360:	d113      	bne.n	800238a <decrementTime+0x12a>
			if(clock.leapYear == TRUE) {
 8002362:	4b2a      	ldr	r3, [pc, #168]	@ (800240c <decrementTime+0x1ac>)
 8002364:	7f1b      	ldrb	r3, [r3, #28]
 8002366:	2b01      	cmp	r3, #1
 8002368:	d107      	bne.n	800237a <decrementTime+0x11a>
				if(clock.date > 29) {
 800236a:	4b28      	ldr	r3, [pc, #160]	@ (800240c <decrementTime+0x1ac>)
 800236c:	689b      	ldr	r3, [r3, #8]
 800236e:	2b1d      	cmp	r3, #29
 8002370:	dd16      	ble.n	80023a0 <decrementTime+0x140>
					clock.date = 29;
 8002372:	4b26      	ldr	r3, [pc, #152]	@ (800240c <decrementTime+0x1ac>)
 8002374:	221d      	movs	r2, #29
 8002376:	609a      	str	r2, [r3, #8]
 8002378:	e012      	b.n	80023a0 <decrementTime+0x140>
				}
			} else {
				if(clock.date > 28) {
 800237a:	4b24      	ldr	r3, [pc, #144]	@ (800240c <decrementTime+0x1ac>)
 800237c:	689b      	ldr	r3, [r3, #8]
 800237e:	2b1c      	cmp	r3, #28
 8002380:	dd0e      	ble.n	80023a0 <decrementTime+0x140>
					clock.date = 28;
 8002382:	4b22      	ldr	r3, [pc, #136]	@ (800240c <decrementTime+0x1ac>)
 8002384:	221c      	movs	r2, #28
 8002386:	609a      	str	r2, [r3, #8]
 8002388:	e00a      	b.n	80023a0 <decrementTime+0x140>
				}
			}
		} else if(clock.thiryMonth == TRUE) {
 800238a:	4b20      	ldr	r3, [pc, #128]	@ (800240c <decrementTime+0x1ac>)
 800238c:	7f5b      	ldrb	r3, [r3, #29]
 800238e:	2b01      	cmp	r3, #1
 8002390:	d106      	bne.n	80023a0 <decrementTime+0x140>
			if(clock.date > 30) {
 8002392:	4b1e      	ldr	r3, [pc, #120]	@ (800240c <decrementTime+0x1ac>)
 8002394:	689b      	ldr	r3, [r3, #8]
 8002396:	2b1e      	cmp	r3, #30
 8002398:	dd02      	ble.n	80023a0 <decrementTime+0x140>
				clock.date = 30;
 800239a:	4b1c      	ldr	r3, [pc, #112]	@ (800240c <decrementTime+0x1ac>)
 800239c:	221e      	movs	r2, #30
 800239e:	609a      	str	r2, [r3, #8]
			}
		}
		if(clock.month < 1) {
 80023a0:	4b1a      	ldr	r3, [pc, #104]	@ (800240c <decrementTime+0x1ac>)
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	dc29      	bgt.n	80023fc <decrementTime+0x19c>
			clock.month = 12;
 80023a8:	4b18      	ldr	r3, [pc, #96]	@ (800240c <decrementTime+0x1ac>)
 80023aa:	220c      	movs	r2, #12
 80023ac:	605a      	str	r2, [r3, #4]
		}
		break;
 80023ae:	e025      	b.n	80023fc <decrementTime+0x19c>
	case YEAR:
		if(clock.year > 1900) {
 80023b0:	4b16      	ldr	r3, [pc, #88]	@ (800240c <decrementTime+0x1ac>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f240 726c 	movw	r2, #1900	@ 0x76c
 80023b8:	4293      	cmp	r3, r2
 80023ba:	dd04      	ble.n	80023c6 <decrementTime+0x166>
			clock.year--;
 80023bc:	4b13      	ldr	r3, [pc, #76]	@ (800240c <decrementTime+0x1ac>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	3b01      	subs	r3, #1
 80023c2:	4a12      	ldr	r2, [pc, #72]	@ (800240c <decrementTime+0x1ac>)
 80023c4:	6013      	str	r3, [r2, #0]
		}
		clock.leapYear = leapYearCalculator(clock.year);
 80023c6:	4b11      	ldr	r3, [pc, #68]	@ (800240c <decrementTime+0x1ac>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4618      	mov	r0, r3
 80023cc:	f7ff fc4e 	bl	8001c6c <leapYearCalculator>
 80023d0:	4603      	mov	r3, r0
 80023d2:	b2da      	uxtb	r2, r3
 80023d4:	4b0d      	ldr	r3, [pc, #52]	@ (800240c <decrementTime+0x1ac>)
 80023d6:	771a      	strb	r2, [r3, #28]
		if(clock.leapYear == FALSE) {
 80023d8:	4b0c      	ldr	r3, [pc, #48]	@ (800240c <decrementTime+0x1ac>)
 80023da:	7f1b      	ldrb	r3, [r3, #28]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d10f      	bne.n	8002400 <decrementTime+0x1a0>
			if(clock.month == 2 && clock.date > 28) {
 80023e0:	4b0a      	ldr	r3, [pc, #40]	@ (800240c <decrementTime+0x1ac>)
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	2b02      	cmp	r3, #2
 80023e6:	d10b      	bne.n	8002400 <decrementTime+0x1a0>
 80023e8:	4b08      	ldr	r3, [pc, #32]	@ (800240c <decrementTime+0x1ac>)
 80023ea:	689b      	ldr	r3, [r3, #8]
 80023ec:	2b1c      	cmp	r3, #28
 80023ee:	dd07      	ble.n	8002400 <decrementTime+0x1a0>
				clock.date = 28;
 80023f0:	4b06      	ldr	r3, [pc, #24]	@ (800240c <decrementTime+0x1ac>)
 80023f2:	221c      	movs	r2, #28
 80023f4:	609a      	str	r2, [r3, #8]
			}
		}
		break;
 80023f6:	e003      	b.n	8002400 <decrementTime+0x1a0>
		break;
 80023f8:	bf00      	nop
 80023fa:	e002      	b.n	8002402 <decrementTime+0x1a2>
		break;
 80023fc:	bf00      	nop
 80023fe:	e000      	b.n	8002402 <decrementTime+0x1a2>
		break;
 8002400:	bf00      	nop
	}

}
 8002402:	bf00      	nop
 8002404:	bd80      	pop	{r7, pc}
 8002406:	bf00      	nop
 8002408:	200001a5 	.word	0x200001a5
 800240c:	2000003c 	.word	0x2000003c

08002410 <getTimeFormet>:

uint8_t getTimeFormet() {
 8002410:	b480      	push	{r7}
 8002412:	af00      	add	r7, sp, #0
	return clock.timeFormet;
 8002414:	4b03      	ldr	r3, [pc, #12]	@ (8002424 <getTimeFormet+0x14>)
 8002416:	7f9b      	ldrb	r3, [r3, #30]
}
 8002418:	4618      	mov	r0, r3
 800241a:	46bd      	mov	sp, r7
 800241c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002420:	4770      	bx	lr
 8002422:	bf00      	nop
 8002424:	2000003c 	.word	0x2000003c

08002428 <setTimeFormet>:

void setTimeFormet(int onOff) {
 8002428:	b480      	push	{r7}
 800242a:	b083      	sub	sp, #12
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
	clock.timeFormet = onOff;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	b2da      	uxtb	r2, r3
 8002434:	4b03      	ldr	r3, [pc, #12]	@ (8002444 <setTimeFormet+0x1c>)
 8002436:	779a      	strb	r2, [r3, #30]
}
 8002438:	bf00      	nop
 800243a:	370c      	adds	r7, #12
 800243c:	46bd      	mov	sp, r7
 800243e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002442:	4770      	bx	lr
 8002444:	2000003c 	.word	0x2000003c

08002448 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800244c:	f001 fd18 	bl	8003e80 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002450:	f000 f86a 	bl	8002528 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  clock.leapYear = leapYearCalculator(Y);// 시스템 시작 시 초기 설정된 년이 윤년인지 확인
 8002454:	f44f 60fd 	mov.w	r0, #2024	@ 0x7e8
 8002458:	f7ff fc08 	bl	8001c6c <leapYearCalculator>
 800245c:	4603      	mov	r3, r0
 800245e:	b2da      	uxtb	r2, r3
 8002460:	4b2a      	ldr	r3, [pc, #168]	@ (800250c <main+0xc4>)
 8002462:	771a      	strb	r2, [r3, #28]
  clock.thiryMonth = isThirtyDays(M); 	// 시스템 시작 시 초기 설정된 달을 넣어서 말일이 30일인지 아닌지 확인
 8002464:	2002      	movs	r0, #2
 8002466:	f7ff fc35 	bl	8001cd4 <isThirtyDays>
 800246a:	4603      	mov	r3, r0
 800246c:	b2da      	uxtb	r2, r3
 800246e:	4b27      	ldr	r3, [pc, #156]	@ (800250c <main+0xc4>)
 8002470:	775a      	strb	r2, [r3, #29]
  CLCD_GPIO_Init();
 8002472:	f7fe fd3d 	bl	8000ef0 <CLCD_GPIO_Init>
  CLCD_Init();
 8002476:	f7fe ff64 	bl	8001342 <CLCD_Init>
  _7SEG_GPIO_Init();
 800247a:	f7fe f871 	bl	8000560 <_7SEG_GPIO_Init>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800247e:	f000 f9b7 	bl	80027f0 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8002482:	f000 f98b 	bl	800279c <MX_USART3_UART_Init>
  MX_TIM6_Init();
 8002486:	f000 f953 	bl	8002730 <MX_TIM6_Init>
  MX_TIM2_Init();
 800248a:	f000 f8db 	bl	8002644 <MX_TIM2_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 800248e:	f000 f8b5 	bl	80025fc <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  // UART call
  HAL_UART_Receive_IT(&huart3, &uartRxfd.uart3_rx_data, sizeof(uartRxfd.uart3_rx_data));
 8002492:	2201      	movs	r2, #1
 8002494:	491e      	ldr	r1, [pc, #120]	@ (8002510 <main+0xc8>)
 8002496:	481f      	ldr	r0, [pc, #124]	@ (8002514 <main+0xcc>)
 8002498:	f003 feb4 	bl	8006204 <HAL_UART_Receive_IT>
  HAL_TIM_Base_Start_IT(&htim6);
 800249c:	481e      	ldr	r0, [pc, #120]	@ (8002518 <main+0xd0>)
 800249e:	f002 fe11 	bl	80050c4 <HAL_TIM_Base_Start_IT>

  TIM2 -> CCR1 = TIM2 -> ARR / 2;
 80024a2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80024a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024a8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80024ac:	085b      	lsrs	r3, r3, #1
 80024ae:	6353      	str	r3, [r2, #52]	@ 0x34

  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, 1);
 80024b0:	2201      	movs	r2, #1
 80024b2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80024b6:	4819      	ldr	r0, [pc, #100]	@ (800251c <main+0xd4>)
 80024b8:	f002 f8d0 	bl	800465c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);
 80024bc:	2201      	movs	r2, #1
 80024be:	2140      	movs	r1, #64	@ 0x40
 80024c0:	4817      	ldr	r0, [pc, #92]	@ (8002520 <main+0xd8>)
 80024c2:	f002 f8cb 	bl	800465c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, 1);
 80024c6:	2201      	movs	r2, #1
 80024c8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80024cc:	4813      	ldr	r0, [pc, #76]	@ (800251c <main+0xd4>)
 80024ce:	f002 f8c5 	bl	800465c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 1);
 80024d2:	2201      	movs	r2, #1
 80024d4:	2120      	movs	r1, #32
 80024d6:	4813      	ldr	r0, [pc, #76]	@ (8002524 <main+0xdc>)
 80024d8:	f002 f8c0 	bl	800465c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, 1);
 80024dc:	2201      	movs	r2, #1
 80024de:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80024e2:	480e      	ldr	r0, [pc, #56]	@ (800251c <main+0xd4>)
 80024e4:	f002 f8ba 	bl	800465c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 1);
 80024e8:	2201      	movs	r2, #1
 80024ea:	2101      	movs	r1, #1
 80024ec:	480d      	ldr	r0, [pc, #52]	@ (8002524 <main+0xdc>)
 80024ee:	f002 f8b5 	bl	800465c <HAL_GPIO_WritePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  running();
 80024f2:	f000 fe9b 	bl	800322c <running>
	  sw1Controll();
 80024f6:	f000 fec7 	bl	8003288 <sw1Controll>
	  sw2Controll();
 80024fa:	f000 ff25 	bl	8003348 <sw2Controll>
	  sw3Controll();
 80024fe:	f001 f82f 	bl	8003560 <sw3Controll>
	  sw4Controll();
 8002502:	f001 f957 	bl	80037b4 <sw4Controll>
	  running();
 8002506:	bf00      	nop
 8002508:	e7f3      	b.n	80024f2 <main+0xaa>
 800250a:	bf00      	nop
 800250c:	2000003c 	.word	0x2000003c
 8002510:	20000314 	.word	0x20000314
 8002514:	20000238 	.word	0x20000238
 8002518:	200001f0 	.word	0x200001f0
 800251c:	40020c00 	.word	0x40020c00
 8002520:	40020800 	.word	0x40020800
 8002524:	40020400 	.word	0x40020400

08002528 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b094      	sub	sp, #80	@ 0x50
 800252c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800252e:	f107 0320 	add.w	r3, r7, #32
 8002532:	2230      	movs	r2, #48	@ 0x30
 8002534:	2100      	movs	r1, #0
 8002536:	4618      	mov	r0, r3
 8002538:	f004 fda8 	bl	800708c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800253c:	f107 030c 	add.w	r3, r7, #12
 8002540:	2200      	movs	r2, #0
 8002542:	601a      	str	r2, [r3, #0]
 8002544:	605a      	str	r2, [r3, #4]
 8002546:	609a      	str	r2, [r3, #8]
 8002548:	60da      	str	r2, [r3, #12]
 800254a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800254c:	2300      	movs	r3, #0
 800254e:	60bb      	str	r3, [r7, #8]
 8002550:	4b28      	ldr	r3, [pc, #160]	@ (80025f4 <SystemClock_Config+0xcc>)
 8002552:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002554:	4a27      	ldr	r2, [pc, #156]	@ (80025f4 <SystemClock_Config+0xcc>)
 8002556:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800255a:	6413      	str	r3, [r2, #64]	@ 0x40
 800255c:	4b25      	ldr	r3, [pc, #148]	@ (80025f4 <SystemClock_Config+0xcc>)
 800255e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002560:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002564:	60bb      	str	r3, [r7, #8]
 8002566:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002568:	2300      	movs	r3, #0
 800256a:	607b      	str	r3, [r7, #4]
 800256c:	4b22      	ldr	r3, [pc, #136]	@ (80025f8 <SystemClock_Config+0xd0>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a21      	ldr	r2, [pc, #132]	@ (80025f8 <SystemClock_Config+0xd0>)
 8002572:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002576:	6013      	str	r3, [r2, #0]
 8002578:	4b1f      	ldr	r3, [pc, #124]	@ (80025f8 <SystemClock_Config+0xd0>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002580:	607b      	str	r3, [r7, #4]
 8002582:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002584:	2301      	movs	r3, #1
 8002586:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002588:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800258c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800258e:	2302      	movs	r3, #2
 8002590:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002592:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002596:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002598:	2304      	movs	r3, #4
 800259a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800259c:	23a8      	movs	r3, #168	@ 0xa8
 800259e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80025a0:	2302      	movs	r3, #2
 80025a2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80025a4:	2304      	movs	r3, #4
 80025a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80025a8:	f107 0320 	add.w	r3, r7, #32
 80025ac:	4618      	mov	r0, r3
 80025ae:	f002 f8a1 	bl	80046f4 <HAL_RCC_OscConfig>
 80025b2:	4603      	mov	r3, r0
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d001      	beq.n	80025bc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80025b8:	f000 faaa 	bl	8002b10 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80025bc:	230f      	movs	r3, #15
 80025be:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80025c0:	2302      	movs	r3, #2
 80025c2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80025c4:	2300      	movs	r3, #0
 80025c6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80025c8:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80025cc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80025ce:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80025d2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80025d4:	f107 030c 	add.w	r3, r7, #12
 80025d8:	2105      	movs	r1, #5
 80025da:	4618      	mov	r0, r3
 80025dc:	f002 fb02 	bl	8004be4 <HAL_RCC_ClockConfig>
 80025e0:	4603      	mov	r3, r0
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d001      	beq.n	80025ea <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80025e6:	f000 fa93 	bl	8002b10 <Error_Handler>
  }
}
 80025ea:	bf00      	nop
 80025ec:	3750      	adds	r7, #80	@ 0x50
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}
 80025f2:	bf00      	nop
 80025f4:	40023800 	.word	0x40023800
 80025f8:	40007000 	.word	0x40007000

080025fc <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	af00      	add	r7, sp, #0
  /* USART3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002600:	2200      	movs	r2, #0
 8002602:	2100      	movs	r1, #0
 8002604:	2027      	movs	r0, #39	@ 0x27
 8002606:	f001 fdac 	bl	8004162 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART3_IRQn);
 800260a:	2027      	movs	r0, #39	@ 0x27
 800260c:	f001 fdc5 	bl	800419a <HAL_NVIC_EnableIRQ>
  /* EXTI4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8002610:	2200      	movs	r2, #0
 8002612:	2100      	movs	r1, #0
 8002614:	200a      	movs	r0, #10
 8002616:	f001 fda4 	bl	8004162 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800261a:	200a      	movs	r0, #10
 800261c:	f001 fdbd 	bl	800419a <HAL_NVIC_EnableIRQ>
  /* EXTI15_10_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002620:	2200      	movs	r2, #0
 8002622:	2100      	movs	r1, #0
 8002624:	2028      	movs	r0, #40	@ 0x28
 8002626:	f001 fd9c 	bl	8004162 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800262a:	2028      	movs	r0, #40	@ 0x28
 800262c:	f001 fdb5 	bl	800419a <HAL_NVIC_EnableIRQ>
  /* TIM6_DAC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002630:	2200      	movs	r2, #0
 8002632:	2100      	movs	r1, #0
 8002634:	2036      	movs	r0, #54	@ 0x36
 8002636:	f001 fd94 	bl	8004162 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800263a:	2036      	movs	r0, #54	@ 0x36
 800263c:	f001 fdad 	bl	800419a <HAL_NVIC_EnableIRQ>
}
 8002640:	bf00      	nop
 8002642:	bd80      	pop	{r7, pc}

08002644 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b08e      	sub	sp, #56	@ 0x38
 8002648:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800264a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800264e:	2200      	movs	r2, #0
 8002650:	601a      	str	r2, [r3, #0]
 8002652:	605a      	str	r2, [r3, #4]
 8002654:	609a      	str	r2, [r3, #8]
 8002656:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002658:	f107 0320 	add.w	r3, r7, #32
 800265c:	2200      	movs	r2, #0
 800265e:	601a      	str	r2, [r3, #0]
 8002660:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002662:	1d3b      	adds	r3, r7, #4
 8002664:	2200      	movs	r2, #0
 8002666:	601a      	str	r2, [r3, #0]
 8002668:	605a      	str	r2, [r3, #4]
 800266a:	609a      	str	r2, [r3, #8]
 800266c:	60da      	str	r2, [r3, #12]
 800266e:	611a      	str	r2, [r3, #16]
 8002670:	615a      	str	r2, [r3, #20]
 8002672:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002674:	4b2d      	ldr	r3, [pc, #180]	@ (800272c <MX_TIM2_Init+0xe8>)
 8002676:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800267a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 41999;
 800267c:	4b2b      	ldr	r3, [pc, #172]	@ (800272c <MX_TIM2_Init+0xe8>)
 800267e:	f24a 420f 	movw	r2, #41999	@ 0xa40f
 8002682:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002684:	4b29      	ldr	r3, [pc, #164]	@ (800272c <MX_TIM2_Init+0xe8>)
 8002686:	2200      	movs	r2, #0
 8002688:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 800268a:	4b28      	ldr	r3, [pc, #160]	@ (800272c <MX_TIM2_Init+0xe8>)
 800268c:	2209      	movs	r2, #9
 800268e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002690:	4b26      	ldr	r3, [pc, #152]	@ (800272c <MX_TIM2_Init+0xe8>)
 8002692:	2200      	movs	r2, #0
 8002694:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002696:	4b25      	ldr	r3, [pc, #148]	@ (800272c <MX_TIM2_Init+0xe8>)
 8002698:	2200      	movs	r2, #0
 800269a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800269c:	4823      	ldr	r0, [pc, #140]	@ (800272c <MX_TIM2_Init+0xe8>)
 800269e:	f002 fcc1 	bl	8005024 <HAL_TIM_Base_Init>
 80026a2:	4603      	mov	r3, r0
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d001      	beq.n	80026ac <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80026a8:	f000 fa32 	bl	8002b10 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80026ac:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80026b0:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80026b2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80026b6:	4619      	mov	r1, r3
 80026b8:	481c      	ldr	r0, [pc, #112]	@ (800272c <MX_TIM2_Init+0xe8>)
 80026ba:	f003 f8b7 	bl	800582c <HAL_TIM_ConfigClockSource>
 80026be:	4603      	mov	r3, r0
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d001      	beq.n	80026c8 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80026c4:	f000 fa24 	bl	8002b10 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80026c8:	4818      	ldr	r0, [pc, #96]	@ (800272c <MX_TIM2_Init+0xe8>)
 80026ca:	f002 fd6b 	bl	80051a4 <HAL_TIM_PWM_Init>
 80026ce:	4603      	mov	r3, r0
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d001      	beq.n	80026d8 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80026d4:	f000 fa1c 	bl	8002b10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80026d8:	2300      	movs	r3, #0
 80026da:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026dc:	2300      	movs	r3, #0
 80026de:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80026e0:	f107 0320 	add.w	r3, r7, #32
 80026e4:	4619      	mov	r1, r3
 80026e6:	4811      	ldr	r0, [pc, #68]	@ (800272c <MX_TIM2_Init+0xe8>)
 80026e8:	f003 fcac 	bl	8006044 <HAL_TIMEx_MasterConfigSynchronization>
 80026ec:	4603      	mov	r3, r0
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d001      	beq.n	80026f6 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80026f2:	f000 fa0d 	bl	8002b10 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80026f6:	2360      	movs	r3, #96	@ 0x60
 80026f8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80026fa:	2300      	movs	r3, #0
 80026fc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80026fe:	2300      	movs	r3, #0
 8002700:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002702:	2300      	movs	r3, #0
 8002704:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002706:	1d3b      	adds	r3, r7, #4
 8002708:	2200      	movs	r2, #0
 800270a:	4619      	mov	r1, r3
 800270c:	4807      	ldr	r0, [pc, #28]	@ (800272c <MX_TIM2_Init+0xe8>)
 800270e:	f002 ffcb 	bl	80056a8 <HAL_TIM_PWM_ConfigChannel>
 8002712:	4603      	mov	r3, r0
 8002714:	2b00      	cmp	r3, #0
 8002716:	d001      	beq.n	800271c <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8002718:	f000 f9fa 	bl	8002b10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800271c:	4803      	ldr	r0, [pc, #12]	@ (800272c <MX_TIM2_Init+0xe8>)
 800271e:	f000 fa5b 	bl	8002bd8 <HAL_TIM_MspPostInit>

}
 8002722:	bf00      	nop
 8002724:	3738      	adds	r7, #56	@ 0x38
 8002726:	46bd      	mov	sp, r7
 8002728:	bd80      	pop	{r7, pc}
 800272a:	bf00      	nop
 800272c:	200001a8 	.word	0x200001a8

08002730 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b082      	sub	sp, #8
 8002734:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002736:	463b      	mov	r3, r7
 8002738:	2200      	movs	r2, #0
 800273a:	601a      	str	r2, [r3, #0]
 800273c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800273e:	4b15      	ldr	r3, [pc, #84]	@ (8002794 <MX_TIM6_Init+0x64>)
 8002740:	4a15      	ldr	r2, [pc, #84]	@ (8002798 <MX_TIM6_Init+0x68>)
 8002742:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 99;
 8002744:	4b13      	ldr	r3, [pc, #76]	@ (8002794 <MX_TIM6_Init+0x64>)
 8002746:	2263      	movs	r2, #99	@ 0x63
 8002748:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800274a:	4b12      	ldr	r3, [pc, #72]	@ (8002794 <MX_TIM6_Init+0x64>)
 800274c:	2200      	movs	r2, #0
 800274e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 839;
 8002750:	4b10      	ldr	r3, [pc, #64]	@ (8002794 <MX_TIM6_Init+0x64>)
 8002752:	f240 3247 	movw	r2, #839	@ 0x347
 8002756:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002758:	4b0e      	ldr	r3, [pc, #56]	@ (8002794 <MX_TIM6_Init+0x64>)
 800275a:	2280      	movs	r2, #128	@ 0x80
 800275c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800275e:	480d      	ldr	r0, [pc, #52]	@ (8002794 <MX_TIM6_Init+0x64>)
 8002760:	f002 fc60 	bl	8005024 <HAL_TIM_Base_Init>
 8002764:	4603      	mov	r3, r0
 8002766:	2b00      	cmp	r3, #0
 8002768:	d001      	beq.n	800276e <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 800276a:	f000 f9d1 	bl	8002b10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800276e:	2300      	movs	r3, #0
 8002770:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002772:	2300      	movs	r3, #0
 8002774:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002776:	463b      	mov	r3, r7
 8002778:	4619      	mov	r1, r3
 800277a:	4806      	ldr	r0, [pc, #24]	@ (8002794 <MX_TIM6_Init+0x64>)
 800277c:	f003 fc62 	bl	8006044 <HAL_TIMEx_MasterConfigSynchronization>
 8002780:	4603      	mov	r3, r0
 8002782:	2b00      	cmp	r3, #0
 8002784:	d001      	beq.n	800278a <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8002786:	f000 f9c3 	bl	8002b10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800278a:	bf00      	nop
 800278c:	3708      	adds	r7, #8
 800278e:	46bd      	mov	sp, r7
 8002790:	bd80      	pop	{r7, pc}
 8002792:	bf00      	nop
 8002794:	200001f0 	.word	0x200001f0
 8002798:	40001000 	.word	0x40001000

0800279c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80027a0:	4b11      	ldr	r3, [pc, #68]	@ (80027e8 <MX_USART3_UART_Init+0x4c>)
 80027a2:	4a12      	ldr	r2, [pc, #72]	@ (80027ec <MX_USART3_UART_Init+0x50>)
 80027a4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80027a6:	4b10      	ldr	r3, [pc, #64]	@ (80027e8 <MX_USART3_UART_Init+0x4c>)
 80027a8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80027ac:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80027ae:	4b0e      	ldr	r3, [pc, #56]	@ (80027e8 <MX_USART3_UART_Init+0x4c>)
 80027b0:	2200      	movs	r2, #0
 80027b2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80027b4:	4b0c      	ldr	r3, [pc, #48]	@ (80027e8 <MX_USART3_UART_Init+0x4c>)
 80027b6:	2200      	movs	r2, #0
 80027b8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80027ba:	4b0b      	ldr	r3, [pc, #44]	@ (80027e8 <MX_USART3_UART_Init+0x4c>)
 80027bc:	2200      	movs	r2, #0
 80027be:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80027c0:	4b09      	ldr	r3, [pc, #36]	@ (80027e8 <MX_USART3_UART_Init+0x4c>)
 80027c2:	220c      	movs	r2, #12
 80027c4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80027c6:	4b08      	ldr	r3, [pc, #32]	@ (80027e8 <MX_USART3_UART_Init+0x4c>)
 80027c8:	2200      	movs	r2, #0
 80027ca:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80027cc:	4b06      	ldr	r3, [pc, #24]	@ (80027e8 <MX_USART3_UART_Init+0x4c>)
 80027ce:	2200      	movs	r2, #0
 80027d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80027d2:	4805      	ldr	r0, [pc, #20]	@ (80027e8 <MX_USART3_UART_Init+0x4c>)
 80027d4:	f003 fcc6 	bl	8006164 <HAL_UART_Init>
 80027d8:	4603      	mov	r3, r0
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d001      	beq.n	80027e2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80027de:	f000 f997 	bl	8002b10 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80027e2:	bf00      	nop
 80027e4:	bd80      	pop	{r7, pc}
 80027e6:	bf00      	nop
 80027e8:	20000238 	.word	0x20000238
 80027ec:	40004800 	.word	0x40004800

080027f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b08c      	sub	sp, #48	@ 0x30
 80027f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027f6:	f107 031c 	add.w	r3, r7, #28
 80027fa:	2200      	movs	r2, #0
 80027fc:	601a      	str	r2, [r3, #0]
 80027fe:	605a      	str	r2, [r3, #4]
 8002800:	609a      	str	r2, [r3, #8]
 8002802:	60da      	str	r2, [r3, #12]
 8002804:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002806:	2300      	movs	r3, #0
 8002808:	61bb      	str	r3, [r7, #24]
 800280a:	4b61      	ldr	r3, [pc, #388]	@ (8002990 <MX_GPIO_Init+0x1a0>)
 800280c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800280e:	4a60      	ldr	r2, [pc, #384]	@ (8002990 <MX_GPIO_Init+0x1a0>)
 8002810:	f043 0310 	orr.w	r3, r3, #16
 8002814:	6313      	str	r3, [r2, #48]	@ 0x30
 8002816:	4b5e      	ldr	r3, [pc, #376]	@ (8002990 <MX_GPIO_Init+0x1a0>)
 8002818:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800281a:	f003 0310 	and.w	r3, r3, #16
 800281e:	61bb      	str	r3, [r7, #24]
 8002820:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002822:	2300      	movs	r3, #0
 8002824:	617b      	str	r3, [r7, #20]
 8002826:	4b5a      	ldr	r3, [pc, #360]	@ (8002990 <MX_GPIO_Init+0x1a0>)
 8002828:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800282a:	4a59      	ldr	r2, [pc, #356]	@ (8002990 <MX_GPIO_Init+0x1a0>)
 800282c:	f043 0304 	orr.w	r3, r3, #4
 8002830:	6313      	str	r3, [r2, #48]	@ 0x30
 8002832:	4b57      	ldr	r3, [pc, #348]	@ (8002990 <MX_GPIO_Init+0x1a0>)
 8002834:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002836:	f003 0304 	and.w	r3, r3, #4
 800283a:	617b      	str	r3, [r7, #20]
 800283c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800283e:	2300      	movs	r3, #0
 8002840:	613b      	str	r3, [r7, #16]
 8002842:	4b53      	ldr	r3, [pc, #332]	@ (8002990 <MX_GPIO_Init+0x1a0>)
 8002844:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002846:	4a52      	ldr	r2, [pc, #328]	@ (8002990 <MX_GPIO_Init+0x1a0>)
 8002848:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800284c:	6313      	str	r3, [r2, #48]	@ 0x30
 800284e:	4b50      	ldr	r3, [pc, #320]	@ (8002990 <MX_GPIO_Init+0x1a0>)
 8002850:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002852:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002856:	613b      	str	r3, [r7, #16]
 8002858:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800285a:	2300      	movs	r3, #0
 800285c:	60fb      	str	r3, [r7, #12]
 800285e:	4b4c      	ldr	r3, [pc, #304]	@ (8002990 <MX_GPIO_Init+0x1a0>)
 8002860:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002862:	4a4b      	ldr	r2, [pc, #300]	@ (8002990 <MX_GPIO_Init+0x1a0>)
 8002864:	f043 0301 	orr.w	r3, r3, #1
 8002868:	6313      	str	r3, [r2, #48]	@ 0x30
 800286a:	4b49      	ldr	r3, [pc, #292]	@ (8002990 <MX_GPIO_Init+0x1a0>)
 800286c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800286e:	f003 0301 	and.w	r3, r3, #1
 8002872:	60fb      	str	r3, [r7, #12]
 8002874:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002876:	2300      	movs	r3, #0
 8002878:	60bb      	str	r3, [r7, #8]
 800287a:	4b45      	ldr	r3, [pc, #276]	@ (8002990 <MX_GPIO_Init+0x1a0>)
 800287c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800287e:	4a44      	ldr	r2, [pc, #272]	@ (8002990 <MX_GPIO_Init+0x1a0>)
 8002880:	f043 0302 	orr.w	r3, r3, #2
 8002884:	6313      	str	r3, [r2, #48]	@ 0x30
 8002886:	4b42      	ldr	r3, [pc, #264]	@ (8002990 <MX_GPIO_Init+0x1a0>)
 8002888:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800288a:	f003 0302 	and.w	r3, r3, #2
 800288e:	60bb      	str	r3, [r7, #8]
 8002890:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002892:	2300      	movs	r3, #0
 8002894:	607b      	str	r3, [r7, #4]
 8002896:	4b3e      	ldr	r3, [pc, #248]	@ (8002990 <MX_GPIO_Init+0x1a0>)
 8002898:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800289a:	4a3d      	ldr	r2, [pc, #244]	@ (8002990 <MX_GPIO_Init+0x1a0>)
 800289c:	f043 0308 	orr.w	r3, r3, #8
 80028a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80028a2:	4b3b      	ldr	r3, [pc, #236]	@ (8002990 <MX_GPIO_Init+0x1a0>)
 80028a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028a6:	f003 0308 	and.w	r3, r3, #8
 80028aa:	607b      	str	r3, [r7, #4]
 80028ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_5, GPIO_PIN_RESET);
 80028ae:	2200      	movs	r2, #0
 80028b0:	2121      	movs	r1, #33	@ 0x21
 80028b2:	4838      	ldr	r0, [pc, #224]	@ (8002994 <MX_GPIO_Init+0x1a4>)
 80028b4:	f001 fed2 	bl	800465c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 80028b8:	2200      	movs	r2, #0
 80028ba:	f44f 41e0 	mov.w	r1, #28672	@ 0x7000
 80028be:	4836      	ldr	r0, [pc, #216]	@ (8002998 <MX_GPIO_Init+0x1a8>)
 80028c0:	f001 fecc 	bl	800465c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 80028c4:	2200      	movs	r2, #0
 80028c6:	2140      	movs	r1, #64	@ 0x40
 80028c8:	4834      	ldr	r0, [pc, #208]	@ (800299c <MX_GPIO_Init+0x1ac>)
 80028ca:	f001 fec7 	bl	800465c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80028ce:	2308      	movs	r3, #8
 80028d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80028d2:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 80028d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028d8:	2300      	movs	r3, #0
 80028da:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80028dc:	f107 031c 	add.w	r3, r7, #28
 80028e0:	4619      	mov	r1, r3
 80028e2:	482f      	ldr	r0, [pc, #188]	@ (80029a0 <MX_GPIO_Init+0x1b0>)
 80028e4:	f001 fd06 	bl	80042f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80028e8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80028ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80028ee:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 80028f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028f4:	2300      	movs	r3, #0
 80028f6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80028f8:	f107 031c 	add.w	r3, r7, #28
 80028fc:	4619      	mov	r1, r3
 80028fe:	4827      	ldr	r0, [pc, #156]	@ (800299c <MX_GPIO_Init+0x1ac>)
 8002900:	f001 fcf8 	bl	80042f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_5;
 8002904:	2321      	movs	r3, #33	@ 0x21
 8002906:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002908:	2301      	movs	r3, #1
 800290a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800290c:	2300      	movs	r3, #0
 800290e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002910:	2300      	movs	r3, #0
 8002912:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002914:	f107 031c 	add.w	r3, r7, #28
 8002918:	4619      	mov	r1, r3
 800291a:	481e      	ldr	r0, [pc, #120]	@ (8002994 <MX_GPIO_Init+0x1a4>)
 800291c:	f001 fcea 	bl	80042f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD10 PD4 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_4;
 8002920:	f44f 6382 	mov.w	r3, #1040	@ 0x410
 8002924:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8002926:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 800292a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800292c:	2300      	movs	r3, #0
 800292e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002930:	f107 031c 	add.w	r3, r7, #28
 8002934:	4619      	mov	r1, r3
 8002936:	4818      	ldr	r0, [pc, #96]	@ (8002998 <MX_GPIO_Init+0x1a8>)
 8002938:	f001 fcdc 	bl	80042f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 800293c:	f44f 43e0 	mov.w	r3, #28672	@ 0x7000
 8002940:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002942:	2301      	movs	r3, #1
 8002944:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002946:	2300      	movs	r3, #0
 8002948:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800294a:	2300      	movs	r3, #0
 800294c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800294e:	f107 031c 	add.w	r3, r7, #28
 8002952:	4619      	mov	r1, r3
 8002954:	4810      	ldr	r0, [pc, #64]	@ (8002998 <MX_GPIO_Init+0x1a8>)
 8002956:	f001 fccd 	bl	80042f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800295a:	2340      	movs	r3, #64	@ 0x40
 800295c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800295e:	2301      	movs	r3, #1
 8002960:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002962:	2300      	movs	r3, #0
 8002964:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002966:	2300      	movs	r3, #0
 8002968:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800296a:	f107 031c 	add.w	r3, r7, #28
 800296e:	4619      	mov	r1, r3
 8002970:	480a      	ldr	r0, [pc, #40]	@ (800299c <MX_GPIO_Init+0x1ac>)
 8002972:	f001 fcbf 	bl	80042f4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8002976:	2200      	movs	r2, #0
 8002978:	2100      	movs	r1, #0
 800297a:	2009      	movs	r0, #9
 800297c:	f001 fbf1 	bl	8004162 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8002980:	2009      	movs	r0, #9
 8002982:	f001 fc0a 	bl	800419a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002986:	bf00      	nop
 8002988:	3730      	adds	r7, #48	@ 0x30
 800298a:	46bd      	mov	sp, r7
 800298c:	bd80      	pop	{r7, pc}
 800298e:	bf00      	nop
 8002990:	40023800 	.word	0x40023800
 8002994:	40020400 	.word	0x40020400
 8002998:	40020c00 	.word	0x40020c00
 800299c:	40020800 	.word	0x40020800
 80029a0:	40021000 	.word	0x40021000

080029a4 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b082      	sub	sp, #8
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  if(huart -> Instance == USART3) {
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a07      	ldr	r2, [pc, #28]	@ (80029d0 <HAL_UART_RxCpltCallback+0x2c>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d107      	bne.n	80029c6 <HAL_UART_RxCpltCallback+0x22>
	  HAL_UART_Receive_IT(&huart3, &uartRxfd.uart3_rx_data, sizeof(uartRxfd.uart3_rx_data));
 80029b6:	2201      	movs	r2, #1
 80029b8:	4906      	ldr	r1, [pc, #24]	@ (80029d4 <HAL_UART_RxCpltCallback+0x30>)
 80029ba:	4807      	ldr	r0, [pc, #28]	@ (80029d8 <HAL_UART_RxCpltCallback+0x34>)
 80029bc:	f003 fc22 	bl	8006204 <HAL_UART_Receive_IT>
	  uartRxfd.uart3_rx_flag = 1;
 80029c0:	4b04      	ldr	r3, [pc, #16]	@ (80029d4 <HAL_UART_RxCpltCallback+0x30>)
 80029c2:	2201      	movs	r2, #1
 80029c4:	705a      	strb	r2, [r3, #1]
  }
}
 80029c6:	bf00      	nop
 80029c8:	3708      	adds	r7, #8
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}
 80029ce:	bf00      	nop
 80029d0:	40004800 	.word	0x40004800
 80029d4:	20000314 	.word	0x20000314
 80029d8:	20000238 	.word	0x20000238

080029dc <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b082      	sub	sp, #8
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM6) {
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a0e      	ldr	r2, [pc, #56]	@ (8002a24 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d116      	bne.n	8002a1c <HAL_TIM_PeriodElapsedCallback+0x40>
		systemMillisecondCount();
 80029ee:	f001 f981 	bl	8003cf4 <systemMillisecondCount>
		blinking();
 80029f2:	f001 f997 	bl	8003d24 <blinking>
		stopwatch.time.millisecond++;
 80029f6:	4b0c      	ldr	r3, [pc, #48]	@ (8002a28 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80029f8:	691b      	ldr	r3, [r3, #16]
 80029fa:	3301      	adds	r3, #1
 80029fc:	4a0a      	ldr	r2, [pc, #40]	@ (8002a28 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80029fe:	6113      	str	r3, [r2, #16]
		stopwatchTime(); 	// 스탑워치 시간 카운트
 8002a00:	f000 fa5e 	bl	8002ec0 <stopwatchTime>
		holdEvent();		// presstime 측정
 8002a04:	f000 ffd2 	bl	80039ac <holdEvent>
		startClock(); 		// 시계모드 시간 카운트
 8002a08:	f7fe ff68 	bl	80018dc <startClock>
		switchClockMode(); 	// 시계모드 스위칭
 8002a0c:	f7ff f984 	bl	8001d18 <switchClockMode>
		buzOnOff();
 8002a10:	f7fe fe20 	bl	8001654 <buzOnOff>
		waitingTimeCnt();
 8002a14:	f001 f99c 	bl	8003d50 <waitingTimeCnt>
		alarmTrigger();
 8002a18:	f7fe fd82 	bl	8001520 <alarmTrigger>
	}

}
 8002a1c:	bf00      	nop
 8002a1e:	3708      	adds	r7, #8
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}
 8002a24:	40001000 	.word	0x40001000
 8002a28:	20000070 	.word	0x20000070

08002a2c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b082      	sub	sp, #8
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	4603      	mov	r3, r0
 8002a34:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_3 && HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_3)) {
 8002a36:	88fb      	ldrh	r3, [r7, #6]
 8002a38:	2b08      	cmp	r3, #8
 8002a3a:	d10a      	bne.n	8002a52 <HAL_GPIO_EXTI_Callback+0x26>
 8002a3c:	2108      	movs	r1, #8
 8002a3e:	482b      	ldr	r0, [pc, #172]	@ (8002aec <HAL_GPIO_EXTI_Callback+0xc0>)
 8002a40:	f001 fdf4 	bl	800462c <HAL_GPIO_ReadPin>
 8002a44:	4603      	mov	r3, r0
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d003      	beq.n	8002a52 <HAL_GPIO_EXTI_Callback+0x26>
		sw1.state = 1;
 8002a4a:	4b29      	ldr	r3, [pc, #164]	@ (8002af0 <HAL_GPIO_EXTI_Callback+0xc4>)
 8002a4c:	2201      	movs	r2, #1
 8002a4e:	701a      	strb	r2, [r3, #0]
 8002a50:	e002      	b.n	8002a58 <HAL_GPIO_EXTI_Callback+0x2c>
	} else {
		sw1.state = 0;
 8002a52:	4b27      	ldr	r3, [pc, #156]	@ (8002af0 <HAL_GPIO_EXTI_Callback+0xc4>)
 8002a54:	2200      	movs	r2, #0
 8002a56:	701a      	strb	r2, [r3, #0]
	}

	if(GPIO_Pin == GPIO_PIN_15 && HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_15)) {
 8002a58:	88fb      	ldrh	r3, [r7, #6]
 8002a5a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002a5e:	d119      	bne.n	8002a94 <HAL_GPIO_EXTI_Callback+0x68>
 8002a60:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002a64:	4823      	ldr	r0, [pc, #140]	@ (8002af4 <HAL_GPIO_EXTI_Callback+0xc8>)
 8002a66:	f001 fde1 	bl	800462c <HAL_GPIO_ReadPin>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d011      	beq.n	8002a94 <HAL_GPIO_EXTI_Callback+0x68>
		sw2.state = 1;
 8002a70:	4b21      	ldr	r3, [pc, #132]	@ (8002af8 <HAL_GPIO_EXTI_Callback+0xcc>)
 8002a72:	2201      	movs	r2, #1
 8002a74:	701a      	strb	r2, [r3, #0]
		if(mode == STOPWATCH) {
 8002a76:	4b21      	ldr	r3, [pc, #132]	@ (8002afc <HAL_GPIO_EXTI_Callback+0xd0>)
 8002a78:	781b      	ldrb	r3, [r3, #0]
 8002a7a:	2b02      	cmp	r3, #2
 8002a7c:	d10d      	bne.n	8002a9a <HAL_GPIO_EXTI_Callback+0x6e>
			stopwatch.onOffState = !stopwatch.onOffState;
 8002a7e:	4b20      	ldr	r3, [pc, #128]	@ (8002b00 <HAL_GPIO_EXTI_Callback+0xd4>)
 8002a80:	781b      	ldrb	r3, [r3, #0]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	bf0c      	ite	eq
 8002a86:	2301      	moveq	r3, #1
 8002a88:	2300      	movne	r3, #0
 8002a8a:	b2db      	uxtb	r3, r3
 8002a8c:	461a      	mov	r2, r3
 8002a8e:	4b1c      	ldr	r3, [pc, #112]	@ (8002b00 <HAL_GPIO_EXTI_Callback+0xd4>)
 8002a90:	701a      	strb	r2, [r3, #0]
		if(mode == STOPWATCH) {
 8002a92:	e002      	b.n	8002a9a <HAL_GPIO_EXTI_Callback+0x6e>
		}

	} else {
		sw2.state = 0;
 8002a94:	4b18      	ldr	r3, [pc, #96]	@ (8002af8 <HAL_GPIO_EXTI_Callback+0xcc>)
 8002a96:	2200      	movs	r2, #0
 8002a98:	701a      	strb	r2, [r3, #0]
	}
	if(GPIO_Pin == GPIO_PIN_4 && HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_4)) {
 8002a9a:	88fb      	ldrh	r3, [r7, #6]
 8002a9c:	2b10      	cmp	r3, #16
 8002a9e:	d10a      	bne.n	8002ab6 <HAL_GPIO_EXTI_Callback+0x8a>
 8002aa0:	2110      	movs	r1, #16
 8002aa2:	4818      	ldr	r0, [pc, #96]	@ (8002b04 <HAL_GPIO_EXTI_Callback+0xd8>)
 8002aa4:	f001 fdc2 	bl	800462c <HAL_GPIO_ReadPin>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d003      	beq.n	8002ab6 <HAL_GPIO_EXTI_Callback+0x8a>
		sw3.state = 1;
 8002aae:	4b16      	ldr	r3, [pc, #88]	@ (8002b08 <HAL_GPIO_EXTI_Callback+0xdc>)
 8002ab0:	2201      	movs	r2, #1
 8002ab2:	701a      	strb	r2, [r3, #0]
 8002ab4:	e002      	b.n	8002abc <HAL_GPIO_EXTI_Callback+0x90>
	} else {
		sw3.state = 0;
 8002ab6:	4b14      	ldr	r3, [pc, #80]	@ (8002b08 <HAL_GPIO_EXTI_Callback+0xdc>)
 8002ab8:	2200      	movs	r2, #0
 8002aba:	701a      	strb	r2, [r3, #0]
	}
	if(GPIO_Pin == GPIO_PIN_10 && HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_10)) {
 8002abc:	88fb      	ldrh	r3, [r7, #6]
 8002abe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ac2:	d10b      	bne.n	8002adc <HAL_GPIO_EXTI_Callback+0xb0>
 8002ac4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002ac8:	480e      	ldr	r0, [pc, #56]	@ (8002b04 <HAL_GPIO_EXTI_Callback+0xd8>)
 8002aca:	f001 fdaf 	bl	800462c <HAL_GPIO_ReadPin>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d003      	beq.n	8002adc <HAL_GPIO_EXTI_Callback+0xb0>
		sw4.state = 1;
 8002ad4:	4b0d      	ldr	r3, [pc, #52]	@ (8002b0c <HAL_GPIO_EXTI_Callback+0xe0>)
 8002ad6:	2201      	movs	r2, #1
 8002ad8:	701a      	strb	r2, [r3, #0]
 8002ada:	e003      	b.n	8002ae4 <HAL_GPIO_EXTI_Callback+0xb8>
	} else {
		sw4.state = 0;
 8002adc:	4b0b      	ldr	r3, [pc, #44]	@ (8002b0c <HAL_GPIO_EXTI_Callback+0xe0>)
 8002ade:	2200      	movs	r2, #0
 8002ae0:	701a      	strb	r2, [r3, #0]
	}

}
 8002ae2:	bf00      	nop
 8002ae4:	bf00      	nop
 8002ae6:	3708      	adds	r7, #8
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bd80      	pop	{r7, pc}
 8002aec:	40021000 	.word	0x40021000
 8002af0:	2000028c 	.word	0x2000028c
 8002af4:	40020800 	.word	0x40020800
 8002af8:	200002a8 	.word	0x200002a8
 8002afc:	2000030d 	.word	0x2000030d
 8002b00:	20000070 	.word	0x20000070
 8002b04:	40020c00 	.word	0x40020c00
 8002b08:	200002c4 	.word	0x200002c4
 8002b0c:	200002e0 	.word	0x200002e0

08002b10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002b10:	b480      	push	{r7}
 8002b12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002b14:	b672      	cpsid	i
}
 8002b16:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002b18:	bf00      	nop
 8002b1a:	e7fd      	b.n	8002b18 <Error_Handler+0x8>

08002b1c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	b083      	sub	sp, #12
 8002b20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b22:	2300      	movs	r3, #0
 8002b24:	607b      	str	r3, [r7, #4]
 8002b26:	4b10      	ldr	r3, [pc, #64]	@ (8002b68 <HAL_MspInit+0x4c>)
 8002b28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b2a:	4a0f      	ldr	r2, [pc, #60]	@ (8002b68 <HAL_MspInit+0x4c>)
 8002b2c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002b30:	6453      	str	r3, [r2, #68]	@ 0x44
 8002b32:	4b0d      	ldr	r3, [pc, #52]	@ (8002b68 <HAL_MspInit+0x4c>)
 8002b34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b36:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b3a:	607b      	str	r3, [r7, #4]
 8002b3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b3e:	2300      	movs	r3, #0
 8002b40:	603b      	str	r3, [r7, #0]
 8002b42:	4b09      	ldr	r3, [pc, #36]	@ (8002b68 <HAL_MspInit+0x4c>)
 8002b44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b46:	4a08      	ldr	r2, [pc, #32]	@ (8002b68 <HAL_MspInit+0x4c>)
 8002b48:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b4c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b4e:	4b06      	ldr	r3, [pc, #24]	@ (8002b68 <HAL_MspInit+0x4c>)
 8002b50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b56:	603b      	str	r3, [r7, #0]
 8002b58:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002b5a:	bf00      	nop
 8002b5c:	370c      	adds	r7, #12
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b64:	4770      	bx	lr
 8002b66:	bf00      	nop
 8002b68:	40023800 	.word	0x40023800

08002b6c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	b085      	sub	sp, #20
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b7c:	d10e      	bne.n	8002b9c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002b7e:	2300      	movs	r3, #0
 8002b80:	60fb      	str	r3, [r7, #12]
 8002b82:	4b13      	ldr	r3, [pc, #76]	@ (8002bd0 <HAL_TIM_Base_MspInit+0x64>)
 8002b84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b86:	4a12      	ldr	r2, [pc, #72]	@ (8002bd0 <HAL_TIM_Base_MspInit+0x64>)
 8002b88:	f043 0301 	orr.w	r3, r3, #1
 8002b8c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b8e:	4b10      	ldr	r3, [pc, #64]	@ (8002bd0 <HAL_TIM_Base_MspInit+0x64>)
 8002b90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b92:	f003 0301 	and.w	r3, r3, #1
 8002b96:	60fb      	str	r3, [r7, #12]
 8002b98:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8002b9a:	e012      	b.n	8002bc2 <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM6)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a0c      	ldr	r2, [pc, #48]	@ (8002bd4 <HAL_TIM_Base_MspInit+0x68>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d10d      	bne.n	8002bc2 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	60bb      	str	r3, [r7, #8]
 8002baa:	4b09      	ldr	r3, [pc, #36]	@ (8002bd0 <HAL_TIM_Base_MspInit+0x64>)
 8002bac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bae:	4a08      	ldr	r2, [pc, #32]	@ (8002bd0 <HAL_TIM_Base_MspInit+0x64>)
 8002bb0:	f043 0310 	orr.w	r3, r3, #16
 8002bb4:	6413      	str	r3, [r2, #64]	@ 0x40
 8002bb6:	4b06      	ldr	r3, [pc, #24]	@ (8002bd0 <HAL_TIM_Base_MspInit+0x64>)
 8002bb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bba:	f003 0310 	and.w	r3, r3, #16
 8002bbe:	60bb      	str	r3, [r7, #8]
 8002bc0:	68bb      	ldr	r3, [r7, #8]
}
 8002bc2:	bf00      	nop
 8002bc4:	3714      	adds	r7, #20
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bcc:	4770      	bx	lr
 8002bce:	bf00      	nop
 8002bd0:	40023800 	.word	0x40023800
 8002bd4:	40001000 	.word	0x40001000

08002bd8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b088      	sub	sp, #32
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002be0:	f107 030c 	add.w	r3, r7, #12
 8002be4:	2200      	movs	r2, #0
 8002be6:	601a      	str	r2, [r3, #0]
 8002be8:	605a      	str	r2, [r3, #4]
 8002bea:	609a      	str	r2, [r3, #8]
 8002bec:	60da      	str	r2, [r3, #12]
 8002bee:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002bf8:	d11d      	bne.n	8002c36 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	60bb      	str	r3, [r7, #8]
 8002bfe:	4b10      	ldr	r3, [pc, #64]	@ (8002c40 <HAL_TIM_MspPostInit+0x68>)
 8002c00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c02:	4a0f      	ldr	r2, [pc, #60]	@ (8002c40 <HAL_TIM_MspPostInit+0x68>)
 8002c04:	f043 0301 	orr.w	r3, r3, #1
 8002c08:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c0a:	4b0d      	ldr	r3, [pc, #52]	@ (8002c40 <HAL_TIM_MspPostInit+0x68>)
 8002c0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c0e:	f003 0301 	and.w	r3, r3, #1
 8002c12:	60bb      	str	r3, [r7, #8]
 8002c14:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002c16:	2320      	movs	r3, #32
 8002c18:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c1a:	2302      	movs	r3, #2
 8002c1c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c22:	2300      	movs	r3, #0
 8002c24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002c26:	2301      	movs	r3, #1
 8002c28:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c2a:	f107 030c 	add.w	r3, r7, #12
 8002c2e:	4619      	mov	r1, r3
 8002c30:	4804      	ldr	r0, [pc, #16]	@ (8002c44 <HAL_TIM_MspPostInit+0x6c>)
 8002c32:	f001 fb5f 	bl	80042f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002c36:	bf00      	nop
 8002c38:	3720      	adds	r7, #32
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}
 8002c3e:	bf00      	nop
 8002c40:	40023800 	.word	0x40023800
 8002c44:	40020000 	.word	0x40020000

08002c48 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b08a      	sub	sp, #40	@ 0x28
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c50:	f107 0314 	add.w	r3, r7, #20
 8002c54:	2200      	movs	r2, #0
 8002c56:	601a      	str	r2, [r3, #0]
 8002c58:	605a      	str	r2, [r3, #4]
 8002c5a:	609a      	str	r2, [r3, #8]
 8002c5c:	60da      	str	r2, [r3, #12]
 8002c5e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a19      	ldr	r2, [pc, #100]	@ (8002ccc <HAL_UART_MspInit+0x84>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d12c      	bne.n	8002cc4 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	613b      	str	r3, [r7, #16]
 8002c6e:	4b18      	ldr	r3, [pc, #96]	@ (8002cd0 <HAL_UART_MspInit+0x88>)
 8002c70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c72:	4a17      	ldr	r2, [pc, #92]	@ (8002cd0 <HAL_UART_MspInit+0x88>)
 8002c74:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002c78:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c7a:	4b15      	ldr	r3, [pc, #84]	@ (8002cd0 <HAL_UART_MspInit+0x88>)
 8002c7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c7e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002c82:	613b      	str	r3, [r7, #16]
 8002c84:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002c86:	2300      	movs	r3, #0
 8002c88:	60fb      	str	r3, [r7, #12]
 8002c8a:	4b11      	ldr	r3, [pc, #68]	@ (8002cd0 <HAL_UART_MspInit+0x88>)
 8002c8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c8e:	4a10      	ldr	r2, [pc, #64]	@ (8002cd0 <HAL_UART_MspInit+0x88>)
 8002c90:	f043 0308 	orr.w	r3, r3, #8
 8002c94:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c96:	4b0e      	ldr	r3, [pc, #56]	@ (8002cd0 <HAL_UART_MspInit+0x88>)
 8002c98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c9a:	f003 0308 	and.w	r3, r3, #8
 8002c9e:	60fb      	str	r3, [r7, #12]
 8002ca0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002ca2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002ca6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ca8:	2302      	movs	r3, #2
 8002caa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cac:	2300      	movs	r3, #0
 8002cae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cb0:	2303      	movs	r3, #3
 8002cb2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002cb4:	2307      	movs	r3, #7
 8002cb6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002cb8:	f107 0314 	add.w	r3, r7, #20
 8002cbc:	4619      	mov	r1, r3
 8002cbe:	4805      	ldr	r0, [pc, #20]	@ (8002cd4 <HAL_UART_MspInit+0x8c>)
 8002cc0:	f001 fb18 	bl	80042f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002cc4:	bf00      	nop
 8002cc6:	3728      	adds	r7, #40	@ 0x28
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bd80      	pop	{r7, pc}
 8002ccc:	40004800 	.word	0x40004800
 8002cd0:	40023800 	.word	0x40023800
 8002cd4:	40020c00 	.word	0x40020c00

08002cd8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002cdc:	bf00      	nop
 8002cde:	e7fd      	b.n	8002cdc <NMI_Handler+0x4>

08002ce0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002ce4:	bf00      	nop
 8002ce6:	e7fd      	b.n	8002ce4 <HardFault_Handler+0x4>

08002ce8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002cec:	bf00      	nop
 8002cee:	e7fd      	b.n	8002cec <MemManage_Handler+0x4>

08002cf0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002cf4:	bf00      	nop
 8002cf6:	e7fd      	b.n	8002cf4 <BusFault_Handler+0x4>

08002cf8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002cfc:	bf00      	nop
 8002cfe:	e7fd      	b.n	8002cfc <UsageFault_Handler+0x4>

08002d00 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002d00:	b480      	push	{r7}
 8002d02:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002d04:	bf00      	nop
 8002d06:	46bd      	mov	sp, r7
 8002d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0c:	4770      	bx	lr

08002d0e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002d0e:	b480      	push	{r7}
 8002d10:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002d12:	bf00      	nop
 8002d14:	46bd      	mov	sp, r7
 8002d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1a:	4770      	bx	lr

08002d1c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002d20:	bf00      	nop
 8002d22:	46bd      	mov	sp, r7
 8002d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d28:	4770      	bx	lr

08002d2a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002d2a:	b580      	push	{r7, lr}
 8002d2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002d2e:	f001 f8f9 	bl	8003f24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002d32:	bf00      	nop
 8002d34:	bd80      	pop	{r7, pc}

08002d36 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8002d36:	b580      	push	{r7, lr}
 8002d38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8002d3a:	2008      	movs	r0, #8
 8002d3c:	f001 fcc2 	bl	80046c4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8002d40:	bf00      	nop
 8002d42:	bd80      	pop	{r7, pc}

08002d44 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8002d48:	2010      	movs	r0, #16
 8002d4a:	f001 fcbb 	bl	80046c4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8002d4e:	bf00      	nop
 8002d50:	bd80      	pop	{r7, pc}
	...

08002d54 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002d58:	4802      	ldr	r0, [pc, #8]	@ (8002d64 <USART3_IRQHandler+0x10>)
 8002d5a:	f003 fa79 	bl	8006250 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002d5e:	bf00      	nop
 8002d60:	bd80      	pop	{r7, pc}
 8002d62:	bf00      	nop
 8002d64:	20000238 	.word	0x20000238

08002d68 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8002d6c:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8002d70:	f001 fca8 	bl	80046c4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8002d74:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8002d78:	f001 fca4 	bl	80046c4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002d7c:	bf00      	nop
 8002d7e:	bd80      	pop	{r7, pc}

08002d80 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002d84:	4802      	ldr	r0, [pc, #8]	@ (8002d90 <TIM6_DAC_IRQHandler+0x10>)
 8002d86:	f002 fb9f 	bl	80054c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002d8a:	bf00      	nop
 8002d8c:	bd80      	pop	{r7, pc}
 8002d8e:	bf00      	nop
 8002d90:	200001f0 	.word	0x200001f0

08002d94 <segUpCount>:

#include "stopWatch.h"
stopWatchTime pausedTimer = {0, 0, 0, 0};
extern stopWatch stopwatch;

void segUpCount() {
 8002d94:	b580      	push	{r7, lr}
 8002d96:	af00      	add	r7, sp, #0
	// 스탑워치 시작 함수
	if(stopwatch.time.millisecond < 500) {
 8002d98:	4b18      	ldr	r3, [pc, #96]	@ (8002dfc <segUpCount+0x68>)
 8002d9a:	691b      	ldr	r3, [r3, #16]
 8002d9c:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8002da0:	da04      	bge.n	8002dac <segUpCount+0x18>
		stopwatch.laptime.decimalPoint = 1;
 8002da2:	4b16      	ldr	r3, [pc, #88]	@ (8002dfc <segUpCount+0x68>)
 8002da4:	2201      	movs	r2, #1
 8002da6:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
 8002daa:	e003      	b.n	8002db4 <segUpCount+0x20>
	} else {
		stopwatch.laptime.decimalPoint = 0;
 8002dac:	4b13      	ldr	r3, [pc, #76]	@ (8002dfc <segUpCount+0x68>)
 8002dae:	2200      	movs	r2, #0
 8002db0:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	}
	_7SEG_SetNumber(DGT1, stopwatch.time.second % 10, stopwatch.laptime.decimalPoint);
 8002db4:	4b11      	ldr	r3, [pc, #68]	@ (8002dfc <segUpCount+0x68>)
 8002db6:	68da      	ldr	r2, [r3, #12]
 8002db8:	4b11      	ldr	r3, [pc, #68]	@ (8002e00 <segUpCount+0x6c>)
 8002dba:	fb83 1302 	smull	r1, r3, r3, r2
 8002dbe:	1099      	asrs	r1, r3, #2
 8002dc0:	17d3      	asrs	r3, r2, #31
 8002dc2:	1ac9      	subs	r1, r1, r3
 8002dc4:	460b      	mov	r3, r1
 8002dc6:	009b      	lsls	r3, r3, #2
 8002dc8:	440b      	add	r3, r1
 8002dca:	005b      	lsls	r3, r3, #1
 8002dcc:	1ad1      	subs	r1, r2, r3
 8002dce:	4b0b      	ldr	r3, [pc, #44]	@ (8002dfc <segUpCount+0x68>)
 8002dd0:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 8002dd4:	461a      	mov	r2, r3
 8002dd6:	2000      	movs	r0, #0
 8002dd8:	f7fd fca8 	bl	800072c <_7SEG_SetNumber>
	_7SEG_SetNumber(DGT2, stopwatch.time.millisecond / 100, 0);
 8002ddc:	4b07      	ldr	r3, [pc, #28]	@ (8002dfc <segUpCount+0x68>)
 8002dde:	691b      	ldr	r3, [r3, #16]
 8002de0:	4a08      	ldr	r2, [pc, #32]	@ (8002e04 <segUpCount+0x70>)
 8002de2:	fb82 1203 	smull	r1, r2, r2, r3
 8002de6:	1152      	asrs	r2, r2, #5
 8002de8:	17db      	asrs	r3, r3, #31
 8002dea:	1ad3      	subs	r3, r2, r3
 8002dec:	2200      	movs	r2, #0
 8002dee:	4619      	mov	r1, r3
 8002df0:	2001      	movs	r0, #1
 8002df2:	f7fd fc9b 	bl	800072c <_7SEG_SetNumber>

}
 8002df6:	bf00      	nop
 8002df8:	bd80      	pop	{r7, pc}
 8002dfa:	bf00      	nop
 8002dfc:	20000070 	.word	0x20000070
 8002e00:	66666667 	.word	0x66666667
 8002e04:	51eb851f 	.word	0x51eb851f

08002e08 <segReset>:

void segReset() {
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	af00      	add	r7, sp, #0
	// 7세그먼트 초기화 함수
	_7SEG_SetNumber(DGT1, 0, 1);
 8002e0c:	2201      	movs	r2, #1
 8002e0e:	2100      	movs	r1, #0
 8002e10:	2000      	movs	r0, #0
 8002e12:	f7fd fc8b 	bl	800072c <_7SEG_SetNumber>
	_7SEG_SetNumber(DGT2, 0, 0);
 8002e16:	2200      	movs	r2, #0
 8002e18:	2100      	movs	r1, #0
 8002e1a:	2001      	movs	r0, #1
 8002e1c:	f7fd fc86 	bl	800072c <_7SEG_SetNumber>
}
 8002e20:	bf00      	nop
 8002e22:	bd80      	pop	{r7, pc}

08002e24 <timerReset>:

void timerReset() {
 8002e24:	b480      	push	{r7}
 8002e26:	af00      	add	r7, sp, #0
	// 스탑워치 시간 초기화 함수
	stopwatch.time.hour = 0;
 8002e28:	4b08      	ldr	r3, [pc, #32]	@ (8002e4c <timerReset+0x28>)
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	605a      	str	r2, [r3, #4]
	stopwatch.time.minute = 0;
 8002e2e:	4b07      	ldr	r3, [pc, #28]	@ (8002e4c <timerReset+0x28>)
 8002e30:	2200      	movs	r2, #0
 8002e32:	609a      	str	r2, [r3, #8]
	stopwatch.time.second = 0;
 8002e34:	4b05      	ldr	r3, [pc, #20]	@ (8002e4c <timerReset+0x28>)
 8002e36:	2200      	movs	r2, #0
 8002e38:	60da      	str	r2, [r3, #12]
	stopwatch.time.millisecond = 0;
 8002e3a:	4b04      	ldr	r3, [pc, #16]	@ (8002e4c <timerReset+0x28>)
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	611a      	str	r2, [r3, #16]
}
 8002e40:	bf00      	nop
 8002e42:	46bd      	mov	sp, r7
 8002e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e48:	4770      	bx	lr
 8002e4a:	bf00      	nop
 8002e4c:	20000070 	.word	0x20000070

08002e50 <timerPaused>:

void timerPaused() {
 8002e50:	b480      	push	{r7}
 8002e52:	af00      	add	r7, sp, #0
	// 스탑워치 일시정지 함수
	pausedTimer.hour = stopwatch.time.hour;
 8002e54:	4b0a      	ldr	r3, [pc, #40]	@ (8002e80 <timerPaused+0x30>)
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	4a0a      	ldr	r2, [pc, #40]	@ (8002e84 <timerPaused+0x34>)
 8002e5a:	6013      	str	r3, [r2, #0]
	pausedTimer.minute = stopwatch.time.minute;
 8002e5c:	4b08      	ldr	r3, [pc, #32]	@ (8002e80 <timerPaused+0x30>)
 8002e5e:	689b      	ldr	r3, [r3, #8]
 8002e60:	4a08      	ldr	r2, [pc, #32]	@ (8002e84 <timerPaused+0x34>)
 8002e62:	6053      	str	r3, [r2, #4]
	pausedTimer.second = stopwatch.time.second;
 8002e64:	4b06      	ldr	r3, [pc, #24]	@ (8002e80 <timerPaused+0x30>)
 8002e66:	68db      	ldr	r3, [r3, #12]
 8002e68:	4a06      	ldr	r2, [pc, #24]	@ (8002e84 <timerPaused+0x34>)
 8002e6a:	6093      	str	r3, [r2, #8]
	pausedTimer.millisecond = stopwatch.time.millisecond;
 8002e6c:	4b04      	ldr	r3, [pc, #16]	@ (8002e80 <timerPaused+0x30>)
 8002e6e:	691b      	ldr	r3, [r3, #16]
 8002e70:	4a04      	ldr	r2, [pc, #16]	@ (8002e84 <timerPaused+0x34>)
 8002e72:	60d3      	str	r3, [r2, #12]
}
 8002e74:	bf00      	nop
 8002e76:	46bd      	mov	sp, r7
 8002e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7c:	4770      	bx	lr
 8002e7e:	bf00      	nop
 8002e80:	20000070 	.word	0x20000070
 8002e84:	200002fc 	.word	0x200002fc

08002e88 <timerResum>:

void timerResum() {
 8002e88:	b480      	push	{r7}
 8002e8a:	af00      	add	r7, sp, #0
	// 스탑워치 재개 함수
	stopwatch.time.hour = pausedTimer.hour;
 8002e8c:	4b0a      	ldr	r3, [pc, #40]	@ (8002eb8 <timerResum+0x30>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a0a      	ldr	r2, [pc, #40]	@ (8002ebc <timerResum+0x34>)
 8002e92:	6053      	str	r3, [r2, #4]
	stopwatch.time.minute = pausedTimer.minute;
 8002e94:	4b08      	ldr	r3, [pc, #32]	@ (8002eb8 <timerResum+0x30>)
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	4a08      	ldr	r2, [pc, #32]	@ (8002ebc <timerResum+0x34>)
 8002e9a:	6093      	str	r3, [r2, #8]
	stopwatch.time.second = pausedTimer.second;
 8002e9c:	4b06      	ldr	r3, [pc, #24]	@ (8002eb8 <timerResum+0x30>)
 8002e9e:	689b      	ldr	r3, [r3, #8]
 8002ea0:	4a06      	ldr	r2, [pc, #24]	@ (8002ebc <timerResum+0x34>)
 8002ea2:	60d3      	str	r3, [r2, #12]
	stopwatch.time.millisecond = pausedTimer.millisecond;
 8002ea4:	4b04      	ldr	r3, [pc, #16]	@ (8002eb8 <timerResum+0x30>)
 8002ea6:	68db      	ldr	r3, [r3, #12]
 8002ea8:	4a04      	ldr	r2, [pc, #16]	@ (8002ebc <timerResum+0x34>)
 8002eaa:	6113      	str	r3, [r2, #16]
}
 8002eac:	bf00      	nop
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb4:	4770      	bx	lr
 8002eb6:	bf00      	nop
 8002eb8:	200002fc 	.word	0x200002fc
 8002ebc:	20000070 	.word	0x20000070

08002ec0 <stopwatchTime>:

void stopwatchTime() {
 8002ec0:	b480      	push	{r7}
 8002ec2:	af00      	add	r7, sp, #0
	// 스탑워치 시간 저장함수
	if(stopwatch.time.millisecond % 1000 == 0) {
 8002ec4:	4b1d      	ldr	r3, [pc, #116]	@ (8002f3c <stopwatchTime+0x7c>)
 8002ec6:	691a      	ldr	r2, [r3, #16]
 8002ec8:	4b1d      	ldr	r3, [pc, #116]	@ (8002f40 <stopwatchTime+0x80>)
 8002eca:	fb83 1302 	smull	r1, r3, r3, r2
 8002ece:	1199      	asrs	r1, r3, #6
 8002ed0:	17d3      	asrs	r3, r2, #31
 8002ed2:	1acb      	subs	r3, r1, r3
 8002ed4:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002ed8:	fb01 f303 	mul.w	r3, r1, r3
 8002edc:	1ad3      	subs	r3, r2, r3
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d107      	bne.n	8002ef2 <stopwatchTime+0x32>
		stopwatch.time.millisecond = 0;
 8002ee2:	4b16      	ldr	r3, [pc, #88]	@ (8002f3c <stopwatchTime+0x7c>)
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	611a      	str	r2, [r3, #16]
		stopwatch.time.second++;
 8002ee8:	4b14      	ldr	r3, [pc, #80]	@ (8002f3c <stopwatchTime+0x7c>)
 8002eea:	68db      	ldr	r3, [r3, #12]
 8002eec:	3301      	adds	r3, #1
 8002eee:	4a13      	ldr	r2, [pc, #76]	@ (8002f3c <stopwatchTime+0x7c>)
 8002ef0:	60d3      	str	r3, [r2, #12]
	}
	if(stopwatch.time.second == 60) {
 8002ef2:	4b12      	ldr	r3, [pc, #72]	@ (8002f3c <stopwatchTime+0x7c>)
 8002ef4:	68db      	ldr	r3, [r3, #12]
 8002ef6:	2b3c      	cmp	r3, #60	@ 0x3c
 8002ef8:	d107      	bne.n	8002f0a <stopwatchTime+0x4a>
		stopwatch.time.second = 0;
 8002efa:	4b10      	ldr	r3, [pc, #64]	@ (8002f3c <stopwatchTime+0x7c>)
 8002efc:	2200      	movs	r2, #0
 8002efe:	60da      	str	r2, [r3, #12]
		stopwatch.time.minute++;
 8002f00:	4b0e      	ldr	r3, [pc, #56]	@ (8002f3c <stopwatchTime+0x7c>)
 8002f02:	689b      	ldr	r3, [r3, #8]
 8002f04:	3301      	adds	r3, #1
 8002f06:	4a0d      	ldr	r2, [pc, #52]	@ (8002f3c <stopwatchTime+0x7c>)
 8002f08:	6093      	str	r3, [r2, #8]
	}
	if(stopwatch.time.minute == 60) {
 8002f0a:	4b0c      	ldr	r3, [pc, #48]	@ (8002f3c <stopwatchTime+0x7c>)
 8002f0c:	689b      	ldr	r3, [r3, #8]
 8002f0e:	2b3c      	cmp	r3, #60	@ 0x3c
 8002f10:	d107      	bne.n	8002f22 <stopwatchTime+0x62>
		stopwatch.time.minute = 0;
 8002f12:	4b0a      	ldr	r3, [pc, #40]	@ (8002f3c <stopwatchTime+0x7c>)
 8002f14:	2200      	movs	r2, #0
 8002f16:	609a      	str	r2, [r3, #8]
		stopwatch.time.hour++;
 8002f18:	4b08      	ldr	r3, [pc, #32]	@ (8002f3c <stopwatchTime+0x7c>)
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	3301      	adds	r3, #1
 8002f1e:	4a07      	ldr	r2, [pc, #28]	@ (8002f3c <stopwatchTime+0x7c>)
 8002f20:	6053      	str	r3, [r2, #4]
	}
	if(stopwatch.time.hour == 24) {
 8002f22:	4b06      	ldr	r3, [pc, #24]	@ (8002f3c <stopwatchTime+0x7c>)
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	2b18      	cmp	r3, #24
 8002f28:	d102      	bne.n	8002f30 <stopwatchTime+0x70>
		stopwatch.time.hour = 0;
 8002f2a:	4b04      	ldr	r3, [pc, #16]	@ (8002f3c <stopwatchTime+0x7c>)
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	605a      	str	r2, [r3, #4]
	}
}
 8002f30:	bf00      	nop
 8002f32:	46bd      	mov	sp, r7
 8002f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f38:	4770      	bx	lr
 8002f3a:	bf00      	nop
 8002f3c:	20000070 	.word	0x20000070
 8002f40:	10624dd3 	.word	0x10624dd3

08002f44 <laptimeSave>:

void laptimeSave() {
 8002f44:	b5b0      	push	{r4, r5, r7, lr}
 8002f46:	b084      	sub	sp, #16
 8002f48:	af04      	add	r7, sp, #16
	// 랩타임 저장 함수
	if(stopwatch.laptime.cnt < 9) {
 8002f4a:	4b41      	ldr	r3, [pc, #260]	@ (8003050 <laptimeSave+0x10c>)
 8002f4c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8002f50:	2b08      	cmp	r3, #8
 8002f52:	d86a      	bhi.n	800302a <laptimeSave+0xe6>
		stopwatch.laptime.saveSpace[stopwatch.laptime.cnt].hour  = stopwatch.time.hour;
 8002f54:	4b3e      	ldr	r3, [pc, #248]	@ (8003050 <laptimeSave+0x10c>)
 8002f56:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	4b3c      	ldr	r3, [pc, #240]	@ (8003050 <laptimeSave+0x10c>)
 8002f5e:	685a      	ldr	r2, [r3, #4]
 8002f60:	493b      	ldr	r1, [pc, #236]	@ (8003050 <laptimeSave+0x10c>)
 8002f62:	1c43      	adds	r3, r0, #1
 8002f64:	011b      	lsls	r3, r3, #4
 8002f66:	440b      	add	r3, r1
 8002f68:	3304      	adds	r3, #4
 8002f6a:	601a      	str	r2, [r3, #0]
		stopwatch.laptime.saveSpace[stopwatch.laptime.cnt].minute = stopwatch.time.minute;
 8002f6c:	4b38      	ldr	r3, [pc, #224]	@ (8003050 <laptimeSave+0x10c>)
 8002f6e:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8002f72:	4618      	mov	r0, r3
 8002f74:	4b36      	ldr	r3, [pc, #216]	@ (8003050 <laptimeSave+0x10c>)
 8002f76:	689a      	ldr	r2, [r3, #8]
 8002f78:	4935      	ldr	r1, [pc, #212]	@ (8003050 <laptimeSave+0x10c>)
 8002f7a:	1c43      	adds	r3, r0, #1
 8002f7c:	011b      	lsls	r3, r3, #4
 8002f7e:	440b      	add	r3, r1
 8002f80:	3308      	adds	r3, #8
 8002f82:	601a      	str	r2, [r3, #0]
		stopwatch.laptime.saveSpace[stopwatch.laptime.cnt].second = stopwatch.time.second;
 8002f84:	4b32      	ldr	r3, [pc, #200]	@ (8003050 <laptimeSave+0x10c>)
 8002f86:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	4b30      	ldr	r3, [pc, #192]	@ (8003050 <laptimeSave+0x10c>)
 8002f8e:	68da      	ldr	r2, [r3, #12]
 8002f90:	492f      	ldr	r1, [pc, #188]	@ (8003050 <laptimeSave+0x10c>)
 8002f92:	0103      	lsls	r3, r0, #4
 8002f94:	440b      	add	r3, r1
 8002f96:	331c      	adds	r3, #28
 8002f98:	601a      	str	r2, [r3, #0]
		stopwatch.laptime.saveSpace[stopwatch.laptime.cnt].millisecond = stopwatch.time.millisecond;
 8002f9a:	4b2d      	ldr	r3, [pc, #180]	@ (8003050 <laptimeSave+0x10c>)
 8002f9c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	4b2b      	ldr	r3, [pc, #172]	@ (8003050 <laptimeSave+0x10c>)
 8002fa4:	691a      	ldr	r2, [r3, #16]
 8002fa6:	492a      	ldr	r1, [pc, #168]	@ (8003050 <laptimeSave+0x10c>)
 8002fa8:	0103      	lsls	r3, r0, #4
 8002faa:	440b      	add	r3, r1
 8002fac:	3320      	adds	r3, #32
 8002fae:	601a      	str	r2, [r3, #0]

		sprintf(stopwatch.laptime.buffer, "LP%d %02d:%02d:%02d.%03d", // 랩타임 저장
				(stopwatch.laptime.cnt + 1),
 8002fb0:	4b27      	ldr	r3, [pc, #156]	@ (8003050 <laptimeSave+0x10c>)
 8002fb2:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
		sprintf(stopwatch.laptime.buffer, "LP%d %02d:%02d:%02d.%03d", // 랩타임 저장
 8002fb6:	1c58      	adds	r0, r3, #1
				stopwatch.laptime.saveSpace[stopwatch.laptime.cnt].hour,
 8002fb8:	4b25      	ldr	r3, [pc, #148]	@ (8003050 <laptimeSave+0x10c>)
 8002fba:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
		sprintf(stopwatch.laptime.buffer, "LP%d %02d:%02d:%02d.%03d", // 랩타임 저장
 8002fbe:	4a24      	ldr	r2, [pc, #144]	@ (8003050 <laptimeSave+0x10c>)
 8002fc0:	3301      	adds	r3, #1
 8002fc2:	011b      	lsls	r3, r3, #4
 8002fc4:	4413      	add	r3, r2
 8002fc6:	3304      	adds	r3, #4
 8002fc8:	681c      	ldr	r4, [r3, #0]
				stopwatch.laptime.saveSpace[stopwatch.laptime.cnt].minute,
 8002fca:	4b21      	ldr	r3, [pc, #132]	@ (8003050 <laptimeSave+0x10c>)
 8002fcc:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
		sprintf(stopwatch.laptime.buffer, "LP%d %02d:%02d:%02d.%03d", // 랩타임 저장
 8002fd0:	4a1f      	ldr	r2, [pc, #124]	@ (8003050 <laptimeSave+0x10c>)
 8002fd2:	3301      	adds	r3, #1
 8002fd4:	011b      	lsls	r3, r3, #4
 8002fd6:	4413      	add	r3, r2
 8002fd8:	3308      	adds	r3, #8
 8002fda:	681b      	ldr	r3, [r3, #0]
				stopwatch.laptime.saveSpace[stopwatch.laptime.cnt].second,
 8002fdc:	4a1c      	ldr	r2, [pc, #112]	@ (8003050 <laptimeSave+0x10c>)
 8002fde:	f892 20a5 	ldrb.w	r2, [r2, #165]	@ 0xa5
		sprintf(stopwatch.laptime.buffer, "LP%d %02d:%02d:%02d.%03d", // 랩타임 저장
 8002fe2:	491b      	ldr	r1, [pc, #108]	@ (8003050 <laptimeSave+0x10c>)
 8002fe4:	0112      	lsls	r2, r2, #4
 8002fe6:	440a      	add	r2, r1
 8002fe8:	321c      	adds	r2, #28
 8002fea:	6812      	ldr	r2, [r2, #0]
				stopwatch.laptime.saveSpace[stopwatch.laptime.cnt].millisecond);
 8002fec:	4918      	ldr	r1, [pc, #96]	@ (8003050 <laptimeSave+0x10c>)
 8002fee:	f891 10a5 	ldrb.w	r1, [r1, #165]	@ 0xa5
		sprintf(stopwatch.laptime.buffer, "LP%d %02d:%02d:%02d.%03d", // 랩타임 저장
 8002ff2:	4d17      	ldr	r5, [pc, #92]	@ (8003050 <laptimeSave+0x10c>)
 8002ff4:	0109      	lsls	r1, r1, #4
 8002ff6:	4429      	add	r1, r5
 8002ff8:	3120      	adds	r1, #32
 8002ffa:	6809      	ldr	r1, [r1, #0]
 8002ffc:	9102      	str	r1, [sp, #8]
 8002ffe:	9201      	str	r2, [sp, #4]
 8003000:	9300      	str	r3, [sp, #0]
 8003002:	4623      	mov	r3, r4
 8003004:	4602      	mov	r2, r0
 8003006:	4913      	ldr	r1, [pc, #76]	@ (8003054 <laptimeSave+0x110>)
 8003008:	4813      	ldr	r0, [pc, #76]	@ (8003058 <laptimeSave+0x114>)
 800300a:	f004 f81f 	bl	800704c <siprintf>
		CLCD_Puts(0, 1, stopwatch.laptime.buffer); // 랩타임 출력
 800300e:	4a12      	ldr	r2, [pc, #72]	@ (8003058 <laptimeSave+0x114>)
 8003010:	2101      	movs	r1, #1
 8003012:	2000      	movs	r0, #0
 8003014:	f7fe f970 	bl	80012f8 <CLCD_Puts>
		stopwatch.laptime.cnt++; // 카운트 증가
 8003018:	4b0d      	ldr	r3, [pc, #52]	@ (8003050 <laptimeSave+0x10c>)
 800301a:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800301e:	3301      	adds	r3, #1
 8003020:	b2da      	uxtb	r2, r3
 8003022:	4b0b      	ldr	r3, [pc, #44]	@ (8003050 <laptimeSave+0x10c>)
 8003024:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
	} else if(stopwatch.laptime.cnt >= 9) {

		CLCD_Puts(0, 1, "                ");
		CLCD_Puts(0, 1, "LAP FULL(9/9)");
	}
}
 8003028:	e00e      	b.n	8003048 <laptimeSave+0x104>
	} else if(stopwatch.laptime.cnt >= 9) {
 800302a:	4b09      	ldr	r3, [pc, #36]	@ (8003050 <laptimeSave+0x10c>)
 800302c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8003030:	2b08      	cmp	r3, #8
 8003032:	d909      	bls.n	8003048 <laptimeSave+0x104>
		CLCD_Puts(0, 1, "                ");
 8003034:	4a09      	ldr	r2, [pc, #36]	@ (800305c <laptimeSave+0x118>)
 8003036:	2101      	movs	r1, #1
 8003038:	2000      	movs	r0, #0
 800303a:	f7fe f95d 	bl	80012f8 <CLCD_Puts>
		CLCD_Puts(0, 1, "LAP FULL(9/9)");
 800303e:	4a08      	ldr	r2, [pc, #32]	@ (8003060 <laptimeSave+0x11c>)
 8003040:	2101      	movs	r1, #1
 8003042:	2000      	movs	r0, #0
 8003044:	f7fe f958 	bl	80012f8 <CLCD_Puts>
}
 8003048:	bf00      	nop
 800304a:	46bd      	mov	sp, r7
 800304c:	bdb0      	pop	{r4, r5, r7, pc}
 800304e:	bf00      	nop
 8003050:	20000070 	.word	0x20000070
 8003054:	08007b58 	.word	0x08007b58
 8003058:	20000117 	.word	0x20000117
 800305c:	08007b74 	.word	0x08007b74
 8003060:	08007b88 	.word	0x08007b88

08003064 <laptimeDisplay>:

void laptimeDisplay() {
 8003064:	b5b0      	push	{r4, r5, r7, lr}
 8003066:	b084      	sub	sp, #16
 8003068:	af04      	add	r7, sp, #16
	// CLCD 랩타임 출력 함수
	if(stopwatch.laptime.cnt > 0) {
 800306a:	4b2d      	ldr	r3, [pc, #180]	@ (8003120 <laptimeDisplay+0xbc>)
 800306c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8003070:	2b00      	cmp	r3, #0
 8003072:	d048      	beq.n	8003106 <laptimeDisplay+0xa2>

		if(stopwatch.laptime.cnt <= stopwatch.laptime.displayCnt) {
 8003074:	4b2a      	ldr	r3, [pc, #168]	@ (8003120 <laptimeDisplay+0xbc>)
 8003076:	f893 20a5 	ldrb.w	r2, [r3, #165]	@ 0xa5
 800307a:	4b29      	ldr	r3, [pc, #164]	@ (8003120 <laptimeDisplay+0xbc>)
 800307c:	f893 30a6 	ldrb.w	r3, [r3, #166]	@ 0xa6
 8003080:	429a      	cmp	r2, r3
 8003082:	d803      	bhi.n	800308c <laptimeDisplay+0x28>
			stopwatch.laptime.displayCnt = 0;
 8003084:	4b26      	ldr	r3, [pc, #152]	@ (8003120 <laptimeDisplay+0xbc>)
 8003086:	2200      	movs	r2, #0
 8003088:	f883 20a6 	strb.w	r2, [r3, #166]	@ 0xa6
		}

		sprintf(stopwatch.laptime.buffer, "%d/9 %02d:%02d:%02d.%03d",
				(stopwatch.laptime.displayCnt + 1),
 800308c:	4b24      	ldr	r3, [pc, #144]	@ (8003120 <laptimeDisplay+0xbc>)
 800308e:	f893 30a6 	ldrb.w	r3, [r3, #166]	@ 0xa6
		sprintf(stopwatch.laptime.buffer, "%d/9 %02d:%02d:%02d.%03d",
 8003092:	1c58      	adds	r0, r3, #1
				stopwatch.laptime.saveSpace[stopwatch.laptime.displayCnt].hour,
 8003094:	4b22      	ldr	r3, [pc, #136]	@ (8003120 <laptimeDisplay+0xbc>)
 8003096:	f893 30a6 	ldrb.w	r3, [r3, #166]	@ 0xa6
		sprintf(stopwatch.laptime.buffer, "%d/9 %02d:%02d:%02d.%03d",
 800309a:	4a21      	ldr	r2, [pc, #132]	@ (8003120 <laptimeDisplay+0xbc>)
 800309c:	3301      	adds	r3, #1
 800309e:	011b      	lsls	r3, r3, #4
 80030a0:	4413      	add	r3, r2
 80030a2:	3304      	adds	r3, #4
 80030a4:	681c      	ldr	r4, [r3, #0]
				stopwatch.laptime.saveSpace[stopwatch.laptime.displayCnt].minute,
 80030a6:	4b1e      	ldr	r3, [pc, #120]	@ (8003120 <laptimeDisplay+0xbc>)
 80030a8:	f893 30a6 	ldrb.w	r3, [r3, #166]	@ 0xa6
		sprintf(stopwatch.laptime.buffer, "%d/9 %02d:%02d:%02d.%03d",
 80030ac:	4a1c      	ldr	r2, [pc, #112]	@ (8003120 <laptimeDisplay+0xbc>)
 80030ae:	3301      	adds	r3, #1
 80030b0:	011b      	lsls	r3, r3, #4
 80030b2:	4413      	add	r3, r2
 80030b4:	3308      	adds	r3, #8
 80030b6:	681b      	ldr	r3, [r3, #0]
				stopwatch.laptime.saveSpace[stopwatch.laptime.displayCnt].second,
 80030b8:	4a19      	ldr	r2, [pc, #100]	@ (8003120 <laptimeDisplay+0xbc>)
 80030ba:	f892 20a6 	ldrb.w	r2, [r2, #166]	@ 0xa6
		sprintf(stopwatch.laptime.buffer, "%d/9 %02d:%02d:%02d.%03d",
 80030be:	4918      	ldr	r1, [pc, #96]	@ (8003120 <laptimeDisplay+0xbc>)
 80030c0:	0112      	lsls	r2, r2, #4
 80030c2:	440a      	add	r2, r1
 80030c4:	321c      	adds	r2, #28
 80030c6:	6812      	ldr	r2, [r2, #0]
				stopwatch.laptime.saveSpace[stopwatch.laptime.displayCnt].millisecond);
 80030c8:	4915      	ldr	r1, [pc, #84]	@ (8003120 <laptimeDisplay+0xbc>)
 80030ca:	f891 10a6 	ldrb.w	r1, [r1, #166]	@ 0xa6
		sprintf(stopwatch.laptime.buffer, "%d/9 %02d:%02d:%02d.%03d",
 80030ce:	4d14      	ldr	r5, [pc, #80]	@ (8003120 <laptimeDisplay+0xbc>)
 80030d0:	0109      	lsls	r1, r1, #4
 80030d2:	4429      	add	r1, r5
 80030d4:	3120      	adds	r1, #32
 80030d6:	6809      	ldr	r1, [r1, #0]
 80030d8:	9102      	str	r1, [sp, #8]
 80030da:	9201      	str	r2, [sp, #4]
 80030dc:	9300      	str	r3, [sp, #0]
 80030de:	4623      	mov	r3, r4
 80030e0:	4602      	mov	r2, r0
 80030e2:	4910      	ldr	r1, [pc, #64]	@ (8003124 <laptimeDisplay+0xc0>)
 80030e4:	4810      	ldr	r0, [pc, #64]	@ (8003128 <laptimeDisplay+0xc4>)
 80030e6:	f003 ffb1 	bl	800704c <siprintf>

		CLCD_Puts(0, 1,stopwatch.laptime.buffer);
 80030ea:	4a0f      	ldr	r2, [pc, #60]	@ (8003128 <laptimeDisplay+0xc4>)
 80030ec:	2101      	movs	r1, #1
 80030ee:	2000      	movs	r0, #0
 80030f0:	f7fe f902 	bl	80012f8 <CLCD_Puts>

		stopwatch.laptime.displayCnt++;
 80030f4:	4b0a      	ldr	r3, [pc, #40]	@ (8003120 <laptimeDisplay+0xbc>)
 80030f6:	f893 30a6 	ldrb.w	r3, [r3, #166]	@ 0xa6
 80030fa:	3301      	adds	r3, #1
 80030fc:	b2da      	uxtb	r2, r3
 80030fe:	4b08      	ldr	r3, [pc, #32]	@ (8003120 <laptimeDisplay+0xbc>)
 8003100:	f883 20a6 	strb.w	r2, [r3, #166]	@ 0xa6
	} else {
		CLCD_Puts(0, 1, "                ");
		CLCD_Puts(0, 1, "NO LAP");
	}

}
 8003104:	e009      	b.n	800311a <laptimeDisplay+0xb6>
		CLCD_Puts(0, 1, "                ");
 8003106:	4a09      	ldr	r2, [pc, #36]	@ (800312c <laptimeDisplay+0xc8>)
 8003108:	2101      	movs	r1, #1
 800310a:	2000      	movs	r0, #0
 800310c:	f7fe f8f4 	bl	80012f8 <CLCD_Puts>
		CLCD_Puts(0, 1, "NO LAP");
 8003110:	4a07      	ldr	r2, [pc, #28]	@ (8003130 <laptimeDisplay+0xcc>)
 8003112:	2101      	movs	r1, #1
 8003114:	2000      	movs	r0, #0
 8003116:	f7fe f8ef 	bl	80012f8 <CLCD_Puts>
}
 800311a:	bf00      	nop
 800311c:	46bd      	mov	sp, r7
 800311e:	bdb0      	pop	{r4, r5, r7, pc}
 8003120:	20000070 	.word	0x20000070
 8003124:	08007b98 	.word	0x08007b98
 8003128:	20000117 	.word	0x20000117
 800312c:	08007b74 	.word	0x08007b74
 8003130:	08007bb4 	.word	0x08007bb4

08003134 <clcdStopWatchClear>:

void clcdStopWatchClear() {
 8003134:	b580      	push	{r7, lr}
 8003136:	b082      	sub	sp, #8
 8003138:	af00      	add	r7, sp, #0
	// CLCD 스탑워치 초기화 함수
	for(int i = 0; i < 9; i++) {
 800313a:	2300      	movs	r3, #0
 800313c:	607b      	str	r3, [r7, #4]
 800313e:	e020      	b.n	8003182 <clcdStopWatchClear+0x4e>
		// 랩타임 초기화
		stopwatch.laptime.saveSpace[i].hour = 0;
 8003140:	4a1b      	ldr	r2, [pc, #108]	@ (80031b0 <clcdStopWatchClear+0x7c>)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	3301      	adds	r3, #1
 8003146:	011b      	lsls	r3, r3, #4
 8003148:	4413      	add	r3, r2
 800314a:	3304      	adds	r3, #4
 800314c:	2200      	movs	r2, #0
 800314e:	601a      	str	r2, [r3, #0]
		stopwatch.laptime.saveSpace[i].minute = 0;
 8003150:	4a17      	ldr	r2, [pc, #92]	@ (80031b0 <clcdStopWatchClear+0x7c>)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	3301      	adds	r3, #1
 8003156:	011b      	lsls	r3, r3, #4
 8003158:	4413      	add	r3, r2
 800315a:	3308      	adds	r3, #8
 800315c:	2200      	movs	r2, #0
 800315e:	601a      	str	r2, [r3, #0]
		stopwatch.laptime.saveSpace[i].second = 0;
 8003160:	4a13      	ldr	r2, [pc, #76]	@ (80031b0 <clcdStopWatchClear+0x7c>)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	011b      	lsls	r3, r3, #4
 8003166:	4413      	add	r3, r2
 8003168:	331c      	adds	r3, #28
 800316a:	2200      	movs	r2, #0
 800316c:	601a      	str	r2, [r3, #0]
		stopwatch.laptime.saveSpace[i].millisecond = 0;
 800316e:	4a10      	ldr	r2, [pc, #64]	@ (80031b0 <clcdStopWatchClear+0x7c>)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	011b      	lsls	r3, r3, #4
 8003174:	4413      	add	r3, r2
 8003176:	3320      	adds	r3, #32
 8003178:	2200      	movs	r2, #0
 800317a:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < 9; i++) {
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	3301      	adds	r3, #1
 8003180:	607b      	str	r3, [r7, #4]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2b08      	cmp	r3, #8
 8003186:	dddb      	ble.n	8003140 <clcdStopWatchClear+0xc>
	}
	stopwatch.laptime.cnt = 0;
 8003188:	4b09      	ldr	r3, [pc, #36]	@ (80031b0 <clcdStopWatchClear+0x7c>)
 800318a:	2200      	movs	r2, #0
 800318c:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
	stopwatch.laptime.displayCnt = 0;
 8003190:	4b07      	ldr	r3, [pc, #28]	@ (80031b0 <clcdStopWatchClear+0x7c>)
 8003192:	2200      	movs	r2, #0
 8003194:	f883 20a6 	strb.w	r2, [r3, #166]	@ 0xa6
	CLCD_Clear();
 8003198:	f7fe f8f5 	bl	8001386 <CLCD_Clear>
	CLCD_Puts(0, 0, CLCD_DEFAULT);
 800319c:	4a05      	ldr	r2, [pc, #20]	@ (80031b4 <clcdStopWatchClear+0x80>)
 800319e:	2100      	movs	r1, #0
 80031a0:	2000      	movs	r0, #0
 80031a2:	f7fe f8a9 	bl	80012f8 <CLCD_Puts>
}
 80031a6:	bf00      	nop
 80031a8:	3708      	adds	r7, #8
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bd80      	pop	{r7, pc}
 80031ae:	bf00      	nop
 80031b0:	20000070 	.word	0x20000070
 80031b4:	08007bbc 	.word	0x08007bbc

080031b8 <clcdStopWatchMeasure>:

void clcdStopWatchMeasure() {
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b082      	sub	sp, #8
 80031bc:	af02      	add	r7, sp, #8
	// CLCD 스탑워치 출력함수
	if(stopwatch.laptime.decimalPoint == TRUE) {
 80031be:	4b17      	ldr	r3, [pc, #92]	@ (800321c <clcdStopWatchMeasure+0x64>)
 80031c0:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 80031c4:	2b01      	cmp	r3, #1
 80031c6:	d110      	bne.n	80031ea <clcdStopWatchMeasure+0x32>
		sprintf(stopwatch.laptime.buffer, "STW %02d:%02d:%02d.%03d",
 80031c8:	4b14      	ldr	r3, [pc, #80]	@ (800321c <clcdStopWatchMeasure+0x64>)
 80031ca:	6859      	ldr	r1, [r3, #4]
 80031cc:	4b13      	ldr	r3, [pc, #76]	@ (800321c <clcdStopWatchMeasure+0x64>)
 80031ce:	6898      	ldr	r0, [r3, #8]
 80031d0:	4b12      	ldr	r3, [pc, #72]	@ (800321c <clcdStopWatchMeasure+0x64>)
 80031d2:	68db      	ldr	r3, [r3, #12]
 80031d4:	4a11      	ldr	r2, [pc, #68]	@ (800321c <clcdStopWatchMeasure+0x64>)
 80031d6:	6912      	ldr	r2, [r2, #16]
 80031d8:	9201      	str	r2, [sp, #4]
 80031da:	9300      	str	r3, [sp, #0]
 80031dc:	4603      	mov	r3, r0
 80031de:	460a      	mov	r2, r1
 80031e0:	490f      	ldr	r1, [pc, #60]	@ (8003220 <clcdStopWatchMeasure+0x68>)
 80031e2:	4810      	ldr	r0, [pc, #64]	@ (8003224 <clcdStopWatchMeasure+0x6c>)
 80031e4:	f003 ff32 	bl	800704c <siprintf>
 80031e8:	e00f      	b.n	800320a <clcdStopWatchMeasure+0x52>
					stopwatch.time.hour, stopwatch.time.minute,
					stopwatch.time.second, stopwatch.time.millisecond);
	} else {
		sprintf(stopwatch.laptime.buffer, "STW %02d:%02d:%02d %03d",
 80031ea:	4b0c      	ldr	r3, [pc, #48]	@ (800321c <clcdStopWatchMeasure+0x64>)
 80031ec:	6859      	ldr	r1, [r3, #4]
 80031ee:	4b0b      	ldr	r3, [pc, #44]	@ (800321c <clcdStopWatchMeasure+0x64>)
 80031f0:	6898      	ldr	r0, [r3, #8]
 80031f2:	4b0a      	ldr	r3, [pc, #40]	@ (800321c <clcdStopWatchMeasure+0x64>)
 80031f4:	68db      	ldr	r3, [r3, #12]
 80031f6:	4a09      	ldr	r2, [pc, #36]	@ (800321c <clcdStopWatchMeasure+0x64>)
 80031f8:	6912      	ldr	r2, [r2, #16]
 80031fa:	9201      	str	r2, [sp, #4]
 80031fc:	9300      	str	r3, [sp, #0]
 80031fe:	4603      	mov	r3, r0
 8003200:	460a      	mov	r2, r1
 8003202:	4909      	ldr	r1, [pc, #36]	@ (8003228 <clcdStopWatchMeasure+0x70>)
 8003204:	4807      	ldr	r0, [pc, #28]	@ (8003224 <clcdStopWatchMeasure+0x6c>)
 8003206:	f003 ff21 	bl	800704c <siprintf>
					stopwatch.time.hour, stopwatch.time.minute,
					stopwatch.time.second, stopwatch.time.millisecond);
	}
	CLCD_Puts(0, 0, stopwatch.laptime.buffer);
 800320a:	4a06      	ldr	r2, [pc, #24]	@ (8003224 <clcdStopWatchMeasure+0x6c>)
 800320c:	2100      	movs	r1, #0
 800320e:	2000      	movs	r0, #0
 8003210:	f7fe f872 	bl	80012f8 <CLCD_Puts>
}
 8003214:	bf00      	nop
 8003216:	46bd      	mov	sp, r7
 8003218:	bd80      	pop	{r7, pc}
 800321a:	bf00      	nop
 800321c:	20000070 	.word	0x20000070
 8003220:	08007bd0 	.word	0x08007bd0
 8003224:	20000117 	.word	0x20000117
 8003228:	08007be8 	.word	0x08007be8

0800322c <running>:
extern button sw2;
extern button sw3;
extern button sw4;
extern system sys;

void running() {
 800322c:	b580      	push	{r7, lr}
 800322e:	af00      	add	r7, sp, #0
	// 모드 동작
	switch (mode) {
 8003230:	4b14      	ldr	r3, [pc, #80]	@ (8003284 <running+0x58>)
 8003232:	781b      	ldrb	r3, [r3, #0]
 8003234:	2b04      	cmp	r3, #4
 8003236:	d822      	bhi.n	800327e <running+0x52>
 8003238:	a201      	add	r2, pc, #4	@ (adr r2, 8003240 <running+0x14>)
 800323a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800323e:	bf00      	nop
 8003240:	08003255 	.word	0x08003255
 8003244:	0800325f 	.word	0x0800325f
 8003248:	0800327d 	.word	0x0800327d
 800324c:	08003269 	.word	0x08003269
 8003250:	08003273 	.word	0x08003273
	case CLOCK:
		clcdDisplayClock();
 8003254:	f7fe fbfe 	bl	8001a54 <clcdDisplayClock>
		tickClock();
 8003258:	f7fe fcde 	bl	8001c18 <tickClock>
		break;
 800325c:	e00f      	b.n	800327e <running+0x52>
	case ALARM:
		clcdDisplayAlarm();
 800325e:	f7fe f89d 	bl	800139c <clcdDisplayAlarm>
		tickClock();
 8003262:	f7fe fcd9 	bl	8001c18 <tickClock>
		break;
 8003266:	e00a      	b.n	800327e <running+0x52>

	case STOPWATCH:
		//		CLCD_Clear();
		break;
	case CLOCK_SETTING:
		clcdDisplayClockSetting();
 8003268:	f7fe fd96 	bl	8001d98 <clcdDisplayClockSetting>
		tickClock();
 800326c:	f7fe fcd4 	bl	8001c18 <tickClock>
		break;
 8003270:	e005      	b.n	800327e <running+0x52>
	case ALARM_TRIGGER:
		clcdDisplayAlarmTrigger();
 8003272:	f7fe f917 	bl	80014a4 <clcdDisplayAlarmTrigger>
		tickClock();
 8003276:	f7fe fccf 	bl	8001c18 <tickClock>
		break;
 800327a:	e000      	b.n	800327e <running+0x52>
		break;
 800327c:	bf00      	nop
	}


}
 800327e:	bf00      	nop
 8003280:	bd80      	pop	{r7, pc}
 8003282:	bf00      	nop
 8003284:	2000030d 	.word	0x2000030d

08003288 <sw1Controll>:

void sw1Controll() {
 8003288:	b580      	push	{r7, lr}
 800328a:	af00      	add	r7, sp, #0
	// SW1 PE3
	// 모드 변경 기능
	if(mode != ALARM_TRIGGER) {
 800328c:	4b29      	ldr	r3, [pc, #164]	@ (8003334 <sw1Controll+0xac>)
 800328e:	781b      	ldrb	r3, [r3, #0]
 8003290:	2b04      	cmp	r3, #4
 8003292:	d036      	beq.n	8003302 <sw1Controll+0x7a>
		if (sw1.state == TRUE) {
 8003294:	4b28      	ldr	r3, [pc, #160]	@ (8003338 <sw1Controll+0xb0>)
 8003296:	781b      	ldrb	r3, [r3, #0]
 8003298:	2b01      	cmp	r3, #1
 800329a:	d114      	bne.n	80032c6 <sw1Controll+0x3e>
			if (sw1.flag == FALSE) {
 800329c:	4b26      	ldr	r3, [pc, #152]	@ (8003338 <sw1Controll+0xb0>)
 800329e:	785b      	ldrb	r3, [r3, #1]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d10c      	bne.n	80032be <sw1Controll+0x36>
				HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 80032a4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80032a8:	4824      	ldr	r0, [pc, #144]	@ (800333c <sw1Controll+0xb4>)
 80032aa:	f001 f9f0 	bl	800468e <HAL_GPIO_TogglePin>
				sw1DefaultHandler();
 80032ae:	f000 fcb1 	bl	8003c14 <sw1DefaultHandler>
				setWaitingTime(0);
 80032b2:	2000      	movs	r0, #0
 80032b4:	f000 fd0e 	bl	8003cd4 <setWaitingTime>
				sw1.flag = 1;		// 플래그 변수를 1로 만들어서 버튼을 누르고 있을 때 다시 동작하는 경우 방지
 80032b8:	4b1f      	ldr	r3, [pc, #124]	@ (8003338 <sw1Controll+0xb0>)
 80032ba:	2201      	movs	r2, #1
 80032bc:	705a      	strb	r2, [r3, #1]
			}
			releasePointing(1);
 80032be:	2001      	movs	r0, #1
 80032c0:	f000 fc82 	bl	8003bc8 <releasePointing>
				sw1.flag = 0;
			}
		}
	}

}
 80032c4:	e034      	b.n	8003330 <sw1Controll+0xa8>
			if (sw1.flag == TRUE) {
 80032c6:	4b1c      	ldr	r3, [pc, #112]	@ (8003338 <sw1Controll+0xb0>)
 80032c8:	785b      	ldrb	r3, [r3, #1]
 80032ca:	2b01      	cmp	r3, #1
 80032cc:	d130      	bne.n	8003330 <sw1Controll+0xa8>
				if(rsp == SHORT) {
 80032ce:	4b1c      	ldr	r3, [pc, #112]	@ (8003340 <sw1Controll+0xb8>)
 80032d0:	781b      	ldrb	r3, [r3, #0]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d111      	bne.n	80032fa <sw1Controll+0x72>
					if (mode == STOPWATCH) { // 모드변경
 80032d6:	4b17      	ldr	r3, [pc, #92]	@ (8003334 <sw1Controll+0xac>)
 80032d8:	781b      	ldrb	r3, [r3, #0]
 80032da:	2b02      	cmp	r3, #2
 80032dc:	d103      	bne.n	80032e6 <sw1Controll+0x5e>
						mode = CLOCK;
 80032de:	4b15      	ldr	r3, [pc, #84]	@ (8003334 <sw1Controll+0xac>)
 80032e0:	2200      	movs	r2, #0
 80032e2:	701a      	strb	r2, [r3, #0]
 80032e4:	e005      	b.n	80032f2 <sw1Controll+0x6a>
						mode++;
 80032e6:	4b13      	ldr	r3, [pc, #76]	@ (8003334 <sw1Controll+0xac>)
 80032e8:	781b      	ldrb	r3, [r3, #0]
 80032ea:	3301      	adds	r3, #1
 80032ec:	b2da      	uxtb	r2, r3
 80032ee:	4b11      	ldr	r3, [pc, #68]	@ (8003334 <sw1Controll+0xac>)
 80032f0:	701a      	strb	r2, [r3, #0]
					HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_6);
 80032f2:	2140      	movs	r1, #64	@ 0x40
 80032f4:	4813      	ldr	r0, [pc, #76]	@ (8003344 <sw1Controll+0xbc>)
 80032f6:	f001 f9ca 	bl	800468e <HAL_GPIO_TogglePin>
				sw1.flag = 0;
 80032fa:	4b0f      	ldr	r3, [pc, #60]	@ (8003338 <sw1Controll+0xb0>)
 80032fc:	2200      	movs	r2, #0
 80032fe:	705a      	strb	r2, [r3, #1]
}
 8003300:	e016      	b.n	8003330 <sw1Controll+0xa8>
		if(sw1.state == TRUE) {
 8003302:	4b0d      	ldr	r3, [pc, #52]	@ (8003338 <sw1Controll+0xb0>)
 8003304:	781b      	ldrb	r3, [r3, #0]
 8003306:	2b01      	cmp	r3, #1
 8003308:	d107      	bne.n	800331a <sw1Controll+0x92>
			if(sw1.flag == FALSE) {
 800330a:	4b0b      	ldr	r3, [pc, #44]	@ (8003338 <sw1Controll+0xb0>)
 800330c:	785b      	ldrb	r3, [r3, #1]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d10e      	bne.n	8003330 <sw1Controll+0xa8>
				sw1.flag = 1;
 8003312:	4b09      	ldr	r3, [pc, #36]	@ (8003338 <sw1Controll+0xb0>)
 8003314:	2201      	movs	r2, #1
 8003316:	705a      	strb	r2, [r3, #1]
}
 8003318:	e00a      	b.n	8003330 <sw1Controll+0xa8>
			if(sw1.flag == TRUE) {
 800331a:	4b07      	ldr	r3, [pc, #28]	@ (8003338 <sw1Controll+0xb0>)
 800331c:	785b      	ldrb	r3, [r3, #1]
 800331e:	2b01      	cmp	r3, #1
 8003320:	d106      	bne.n	8003330 <sw1Controll+0xa8>
				returnToPreviousMode();
 8003322:	f7fe f94f 	bl	80015c4 <returnToPreviousMode>
				buzReset();
 8003326:	f7fe fa6f 	bl	8001808 <buzReset>
				sw1.flag = 0;
 800332a:	4b03      	ldr	r3, [pc, #12]	@ (8003338 <sw1Controll+0xb0>)
 800332c:	2200      	movs	r2, #0
 800332e:	705a      	strb	r2, [r3, #1]
}
 8003330:	bf00      	nop
 8003332:	bd80      	pop	{r7, pc}
 8003334:	2000030d 	.word	0x2000030d
 8003338:	2000028c 	.word	0x2000028c
 800333c:	40020c00 	.word	0x40020c00
 8003340:	2000030c 	.word	0x2000030c
 8003344:	40020800 	.word	0x40020800

08003348 <sw2Controll>:

void sw2Controll() {
 8003348:	b580      	push	{r7, lr}
 800334a:	af00      	add	r7, sp, #0
	// SW2 PC15
	switch (mode) {
 800334c:	4b7e      	ldr	r3, [pc, #504]	@ (8003548 <sw2Controll+0x200>)
 800334e:	781b      	ldrb	r3, [r3, #0]
 8003350:	2b04      	cmp	r3, #4
 8003352:	f200 80f7 	bhi.w	8003544 <sw2Controll+0x1fc>
 8003356:	a201      	add	r2, pc, #4	@ (adr r2, 800335c <sw2Controll+0x14>)
 8003358:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800335c:	08003371 	.word	0x08003371
 8003360:	080033d5 	.word	0x080033d5
 8003364:	0800342d 	.word	0x0800342d
 8003368:	080034b5 	.word	0x080034b5
 800336c:	08003503 	.word	0x08003503
	case CLOCK:		// 시계모드 일때 PC15 기능
		// 부저 on, off
		if(sw2.state == TRUE) {
 8003370:	4b76      	ldr	r3, [pc, #472]	@ (800354c <sw2Controll+0x204>)
 8003372:	781b      	ldrb	r3, [r3, #0]
 8003374:	2b01      	cmp	r3, #1
 8003376:	d111      	bne.n	800339c <sw2Controll+0x54>
			if (sw2.flag == FALSE) {
 8003378:	4b74      	ldr	r3, [pc, #464]	@ (800354c <sw2Controll+0x204>)
 800337a:	785b      	ldrb	r3, [r3, #1]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d109      	bne.n	8003394 <sw2Controll+0x4c>
				sw2.flag = 1;
 8003380:	4b72      	ldr	r3, [pc, #456]	@ (800354c <sw2Controll+0x204>)
 8003382:	2201      	movs	r2, #1
 8003384:	705a      	strb	r2, [r3, #1]
				sw2DefaultHandler();
 8003386:	f000 fc57 	bl	8003c38 <sw2DefaultHandler>
				HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 800338a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800338e:	4870      	ldr	r0, [pc, #448]	@ (8003550 <sw2Controll+0x208>)
 8003390:	f001 f97d 	bl	800468e <HAL_GPIO_TogglePin>

			}
			releasePointing(2);
 8003394:	2002      	movs	r0, #2
 8003396:	f000 fc17 	bl	8003bc8 <releasePointing>
				sw2.flag = 0;
			}
		}


		break;
 800339a:	e0ca      	b.n	8003532 <sw2Controll+0x1ea>
			if (sw2.flag == TRUE) {
 800339c:	4b6b      	ldr	r3, [pc, #428]	@ (800354c <sw2Controll+0x204>)
 800339e:	785b      	ldrb	r3, [r3, #1]
 80033a0:	2b01      	cmp	r3, #1
 80033a2:	f040 80c6 	bne.w	8003532 <sw2Controll+0x1ea>
				if (rsp == SHORT) {
 80033a6:	4b6b      	ldr	r3, [pc, #428]	@ (8003554 <sw2Controll+0x20c>)
 80033a8:	781b      	ldrb	r3, [r3, #0]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d10a      	bne.n	80033c4 <sw2Controll+0x7c>
					setBuzzEnabled(!getBuzzEnabled()); 	// 부저 활성, 비활성 함수
 80033ae:	f7fe fa69 	bl	8001884 <getBuzzEnabled>
 80033b2:	4603      	mov	r3, r0
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	bf0c      	ite	eq
 80033b8:	2301      	moveq	r3, #1
 80033ba:	2300      	movne	r3, #0
 80033bc:	b2db      	uxtb	r3, r3
 80033be:	4618      	mov	r0, r3
 80033c0:	f7fe fa6c 	bl	800189c <setBuzzEnabled>
				HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_6);
 80033c4:	2140      	movs	r1, #64	@ 0x40
 80033c6:	4864      	ldr	r0, [pc, #400]	@ (8003558 <sw2Controll+0x210>)
 80033c8:	f001 f961 	bl	800468e <HAL_GPIO_TogglePin>
				sw2.flag = 0;
 80033cc:	4b5f      	ldr	r3, [pc, #380]	@ (800354c <sw2Controll+0x204>)
 80033ce:	2200      	movs	r2, #0
 80033d0:	705a      	strb	r2, [r3, #1]
		break;
 80033d2:	e0ae      	b.n	8003532 <sw2Controll+0x1ea>
	case ALARM:	// 알람 모드일 때 PC15 기능
		if (sw2.state == TRUE) {
 80033d4:	4b5d      	ldr	r3, [pc, #372]	@ (800354c <sw2Controll+0x204>)
 80033d6:	781b      	ldrb	r3, [r3, #0]
 80033d8:	2b01      	cmp	r3, #1
 80033da:	d114      	bne.n	8003406 <sw2Controll+0xbe>
			if (sw2.flag == FALSE) {
 80033dc:	4b5b      	ldr	r3, [pc, #364]	@ (800354c <sw2Controll+0x204>)
 80033de:	785b      	ldrb	r3, [r3, #1]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d10c      	bne.n	80033fe <sw2Controll+0xb6>
				sw2.flag = 1;
 80033e4:	4b59      	ldr	r3, [pc, #356]	@ (800354c <sw2Controll+0x204>)
 80033e6:	2201      	movs	r2, #1
 80033e8:	705a      	strb	r2, [r3, #1]
				sw2DefaultHandler();
 80033ea:	f000 fc25 	bl	8003c38 <sw2DefaultHandler>
				setWaitingTime(0);
 80033ee:	2000      	movs	r0, #0
 80033f0:	f000 fc70 	bl	8003cd4 <setWaitingTime>
				HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 80033f4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80033f8:	4855      	ldr	r0, [pc, #340]	@ (8003550 <sw2Controll+0x208>)
 80033fa:	f001 f948 	bl	800468e <HAL_GPIO_TogglePin>
			}
			releasePointing(2);
 80033fe:	2002      	movs	r0, #2
 8003400:	f000 fbe2 	bl	8003bc8 <releasePointing>
				sw2.flag = 0;
				HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_6);
			}
		}

		break;
 8003404:	e097      	b.n	8003536 <sw2Controll+0x1ee>
			if(sw2.flag == TRUE) {
 8003406:	4b51      	ldr	r3, [pc, #324]	@ (800354c <sw2Controll+0x204>)
 8003408:	785b      	ldrb	r3, [r3, #1]
 800340a:	2b01      	cmp	r3, #1
 800340c:	f040 8093 	bne.w	8003536 <sw2Controll+0x1ee>
				if (rsp == SHORT) {
 8003410:	4b50      	ldr	r3, [pc, #320]	@ (8003554 <sw2Controll+0x20c>)
 8003412:	781b      	ldrb	r3, [r3, #0]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d101      	bne.n	800341c <sw2Controll+0xd4>
					selectAlarm();
 8003418:	f7fe f86a 	bl	80014f0 <selectAlarm>
				sw2.flag = 0;
 800341c:	4b4b      	ldr	r3, [pc, #300]	@ (800354c <sw2Controll+0x204>)
 800341e:	2200      	movs	r2, #0
 8003420:	705a      	strb	r2, [r3, #1]
				HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_6);
 8003422:	2140      	movs	r1, #64	@ 0x40
 8003424:	484c      	ldr	r0, [pc, #304]	@ (8003558 <sw2Controll+0x210>)
 8003426:	f001 f932 	bl	800468e <HAL_GPIO_TogglePin>
		break;
 800342a:	e084      	b.n	8003536 <sw2Controll+0x1ee>
	case STOPWATCH: // 스탑워치 모드일 때 PC15 기능
		// 스탑워치 시작, 일시정지, 재개 함수
		if(sw2.state == TRUE) {
 800342c:	4b47      	ldr	r3, [pc, #284]	@ (800354c <sw2Controll+0x204>)
 800342e:	781b      	ldrb	r3, [r3, #0]
 8003430:	2b01      	cmp	r3, #1
 8003432:	d10c      	bne.n	800344e <sw2Controll+0x106>
			if (sw2.flag == FALSE) {
 8003434:	4b45      	ldr	r3, [pc, #276]	@ (800354c <sw2Controll+0x204>)
 8003436:	785b      	ldrb	r3, [r3, #1]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d10f      	bne.n	800345c <sw2Controll+0x114>
				sw2.flag = 1;
 800343c:	4b43      	ldr	r3, [pc, #268]	@ (800354c <sw2Controll+0x204>)
 800343e:	2201      	movs	r2, #1
 8003440:	705a      	strb	r2, [r3, #1]
				HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 8003442:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003446:	4842      	ldr	r0, [pc, #264]	@ (8003550 <sw2Controll+0x208>)
 8003448:	f001 f921 	bl	800468e <HAL_GPIO_TogglePin>
 800344c:	e006      	b.n	800345c <sw2Controll+0x114>
			}

		} else {
			if (sw2.flag == TRUE) {
 800344e:	4b3f      	ldr	r3, [pc, #252]	@ (800354c <sw2Controll+0x204>)
 8003450:	785b      	ldrb	r3, [r3, #1]
 8003452:	2b01      	cmp	r3, #1
 8003454:	d102      	bne.n	800345c <sw2Controll+0x114>
				sw2.flag = 0;
 8003456:	4b3d      	ldr	r3, [pc, #244]	@ (800354c <sw2Controll+0x204>)
 8003458:	2200      	movs	r2, #0
 800345a:	705a      	strb	r2, [r3, #1]
			}
		}
		if(stopwatch.onOffState == TRUE) {
 800345c:	4b3f      	ldr	r3, [pc, #252]	@ (800355c <sw2Controll+0x214>)
 800345e:	781b      	ldrb	r3, [r3, #0]
 8003460:	2b01      	cmp	r3, #1
 8003462:	d119      	bne.n	8003498 <sw2Controll+0x150>

			switch (stopwatch.state) {
 8003464:	4b3d      	ldr	r3, [pc, #244]	@ (800355c <sw2Controll+0x214>)
 8003466:	785b      	ldrb	r3, [r3, #1]
 8003468:	2b02      	cmp	r3, #2
 800346a:	d006      	beq.n	800347a <sw2Controll+0x132>
 800346c:	2b02      	cmp	r3, #2
 800346e:	dc0b      	bgt.n	8003488 <sw2Controll+0x140>
 8003470:	2b00      	cmp	r3, #0
 8003472:	d008      	beq.n	8003486 <sw2Controll+0x13e>
 8003474:	2b01      	cmp	r3, #1
 8003476:	d003      	beq.n	8003480 <sw2Controll+0x138>
 8003478:	e006      	b.n	8003488 <sw2Controll+0x140>
			case STOP:
				timerReset(); // 시작 전 타이머 0으로 리셋
 800347a:	f7ff fcd3 	bl	8002e24 <timerReset>
				break;
 800347e:	e003      	b.n	8003488 <sw2Controll+0x140>
			case PAUSE:
				timerResum(); // 일시정지 전 흘렀던 시간 가져오기
 8003480:	f7ff fd02 	bl	8002e88 <timerResum>
				break;
 8003484:	e000      	b.n	8003488 <sw2Controll+0x140>
			case RUN:
				break;
 8003486:	bf00      	nop
			}
			// 스탑워치 동작상태 RUN 으로 변경 후 실행
			stopwatch.state = RUN;
 8003488:	4b34      	ldr	r3, [pc, #208]	@ (800355c <sw2Controll+0x214>)
 800348a:	2200      	movs	r2, #0
 800348c:	705a      	strb	r2, [r3, #1]
			segUpCount();
 800348e:	f7ff fc81 	bl	8002d94 <segUpCount>
			clcdStopWatchMeasure();
 8003492:	f7ff fe91 	bl	80031b8 <clcdStopWatchMeasure>
			// 스탑워치 동작상태 PAUSE 로 변경 후 흘렀던 시간 저장
			stopwatch.state = PAUSE;
			timerPaused();
		}

		break;
 8003496:	e050      	b.n	800353a <sw2Controll+0x1f2>
		} else if(stopwatch.onOffState == FALSE && stopwatch.state == RUN) {
 8003498:	4b30      	ldr	r3, [pc, #192]	@ (800355c <sw2Controll+0x214>)
 800349a:	781b      	ldrb	r3, [r3, #0]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d14c      	bne.n	800353a <sw2Controll+0x1f2>
 80034a0:	4b2e      	ldr	r3, [pc, #184]	@ (800355c <sw2Controll+0x214>)
 80034a2:	785b      	ldrb	r3, [r3, #1]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d148      	bne.n	800353a <sw2Controll+0x1f2>
			stopwatch.state = PAUSE;
 80034a8:	4b2c      	ldr	r3, [pc, #176]	@ (800355c <sw2Controll+0x214>)
 80034aa:	2201      	movs	r2, #1
 80034ac:	705a      	strb	r2, [r3, #1]
			timerPaused();
 80034ae:	f7ff fccf 	bl	8002e50 <timerPaused>
		break;
 80034b2:	e042      	b.n	800353a <sw2Controll+0x1f2>
	case CLOCK_SETTING: // 시계설정모드 일때 PC15 기능
		if(sw2.state == TRUE) {
 80034b4:	4b25      	ldr	r3, [pc, #148]	@ (800354c <sw2Controll+0x204>)
 80034b6:	781b      	ldrb	r3, [r3, #0]
 80034b8:	2b01      	cmp	r3, #1
 80034ba:	d116      	bne.n	80034ea <sw2Controll+0x1a2>
			if(sw2.flag == FALSE) {
 80034bc:	4b23      	ldr	r3, [pc, #140]	@ (800354c <sw2Controll+0x204>)
 80034be:	785b      	ldrb	r3, [r3, #1]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d10e      	bne.n	80034e2 <sw2Controll+0x19a>
				sw2.flag = 1;
 80034c4:	4b21      	ldr	r3, [pc, #132]	@ (800354c <sw2Controll+0x204>)
 80034c6:	2201      	movs	r2, #1
 80034c8:	705a      	strb	r2, [r3, #1]
				sw2DefaultHandler();
 80034ca:	f000 fbb5 	bl	8003c38 <sw2DefaultHandler>
				setWaitingTime(0);
 80034ce:	2000      	movs	r0, #0
 80034d0:	f000 fc00 	bl	8003cd4 <setWaitingTime>
				settingTime();
 80034d4:	f7fe fddc 	bl	8002090 <settingTime>
				HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 80034d8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80034dc:	481c      	ldr	r0, [pc, #112]	@ (8003550 <sw2Controll+0x208>)
 80034de:	f001 f8d6 	bl	800468e <HAL_GPIO_TogglePin>
			}
			releasePointing(2);
 80034e2:	2002      	movs	r0, #2
 80034e4:	f000 fb70 	bl	8003bc8 <releasePointing>
			if(sw2.flag == TRUE) {
				sw2.flag = 0;
				HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_6);
			}
		}
		break;
 80034e8:	e029      	b.n	800353e <sw2Controll+0x1f6>
			if(sw2.flag == TRUE) {
 80034ea:	4b18      	ldr	r3, [pc, #96]	@ (800354c <sw2Controll+0x204>)
 80034ec:	785b      	ldrb	r3, [r3, #1]
 80034ee:	2b01      	cmp	r3, #1
 80034f0:	d125      	bne.n	800353e <sw2Controll+0x1f6>
				sw2.flag = 0;
 80034f2:	4b16      	ldr	r3, [pc, #88]	@ (800354c <sw2Controll+0x204>)
 80034f4:	2200      	movs	r2, #0
 80034f6:	705a      	strb	r2, [r3, #1]
				HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_6);
 80034f8:	2140      	movs	r1, #64	@ 0x40
 80034fa:	4817      	ldr	r0, [pc, #92]	@ (8003558 <sw2Controll+0x210>)
 80034fc:	f001 f8c7 	bl	800468e <HAL_GPIO_TogglePin>
		break;
 8003500:	e01d      	b.n	800353e <sw2Controll+0x1f6>
	case ALARM_TRIGGER:
		if(sw2.state == TRUE) {
 8003502:	4b12      	ldr	r3, [pc, #72]	@ (800354c <sw2Controll+0x204>)
 8003504:	781b      	ldrb	r3, [r3, #0]
 8003506:	2b01      	cmp	r3, #1
 8003508:	d107      	bne.n	800351a <sw2Controll+0x1d2>
			if(sw2.flag == FALSE) {
 800350a:	4b10      	ldr	r3, [pc, #64]	@ (800354c <sw2Controll+0x204>)
 800350c:	785b      	ldrb	r3, [r3, #1]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d117      	bne.n	8003542 <sw2Controll+0x1fa>
				sw2.flag = 1;
 8003512:	4b0e      	ldr	r3, [pc, #56]	@ (800354c <sw2Controll+0x204>)
 8003514:	2201      	movs	r2, #1
 8003516:	705a      	strb	r2, [r3, #1]
				returnToPreviousMode();
				buzReset();
				sw2.flag = 0;
			}
		}
		break;
 8003518:	e013      	b.n	8003542 <sw2Controll+0x1fa>
			if(sw2.flag == TRUE) {
 800351a:	4b0c      	ldr	r3, [pc, #48]	@ (800354c <sw2Controll+0x204>)
 800351c:	785b      	ldrb	r3, [r3, #1]
 800351e:	2b01      	cmp	r3, #1
 8003520:	d10f      	bne.n	8003542 <sw2Controll+0x1fa>
				returnToPreviousMode();
 8003522:	f7fe f84f 	bl	80015c4 <returnToPreviousMode>
				buzReset();
 8003526:	f7fe f96f 	bl	8001808 <buzReset>
				sw2.flag = 0;
 800352a:	4b08      	ldr	r3, [pc, #32]	@ (800354c <sw2Controll+0x204>)
 800352c:	2200      	movs	r2, #0
 800352e:	705a      	strb	r2, [r3, #1]
		break;
 8003530:	e007      	b.n	8003542 <sw2Controll+0x1fa>
		break;
 8003532:	bf00      	nop
 8003534:	e006      	b.n	8003544 <sw2Controll+0x1fc>
		break;
 8003536:	bf00      	nop
 8003538:	e004      	b.n	8003544 <sw2Controll+0x1fc>
		break;
 800353a:	bf00      	nop
 800353c:	e002      	b.n	8003544 <sw2Controll+0x1fc>
		break;
 800353e:	bf00      	nop
 8003540:	e000      	b.n	8003544 <sw2Controll+0x1fc>
		break;
 8003542:	bf00      	nop
	}
}
 8003544:	bf00      	nop
 8003546:	bd80      	pop	{r7, pc}
 8003548:	2000030d 	.word	0x2000030d
 800354c:	200002a8 	.word	0x200002a8
 8003550:	40020c00 	.word	0x40020c00
 8003554:	2000030c 	.word	0x2000030c
 8003558:	40020800 	.word	0x40020800
 800355c:	20000070 	.word	0x20000070

08003560 <sw3Controll>:

void sw3Controll() {
 8003560:	b598      	push	{r3, r4, r7, lr}
 8003562:	af00      	add	r7, sp, #0
	// SW3 PD4
	switch (mode) {
 8003564:	4b8d      	ldr	r3, [pc, #564]	@ (800379c <sw3Controll+0x23c>)
 8003566:	781b      	ldrb	r3, [r3, #0]
 8003568:	2b04      	cmp	r3, #4
 800356a:	f200 8114 	bhi.w	8003796 <sw3Controll+0x236>
 800356e:	a201      	add	r2, pc, #4	@ (adr r2, 8003574 <sw3Controll+0x14>)
 8003570:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003574:	08003589 	.word	0x08003589
 8003578:	080035ed 	.word	0x080035ed
 800357c:	08003669 	.word	0x08003669
 8003580:	08003701 	.word	0x08003701
 8003584:	08003755 	.word	0x08003755
	case CLOCK:		// 시계모드 일때 PD4 기능
		//	시간 포멧 변경
		if (sw3.state == TRUE) {
 8003588:	4b85      	ldr	r3, [pc, #532]	@ (80037a0 <sw3Controll+0x240>)
 800358a:	781b      	ldrb	r3, [r3, #0]
 800358c:	2b01      	cmp	r3, #1
 800358e:	d111      	bne.n	80035b4 <sw3Controll+0x54>
			if (sw3.flag == FALSE) {
 8003590:	4b83      	ldr	r3, [pc, #524]	@ (80037a0 <sw3Controll+0x240>)
 8003592:	785b      	ldrb	r3, [r3, #1]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d109      	bne.n	80035ac <sw3Controll+0x4c>
				sw3.flag = 1;
 8003598:	4b81      	ldr	r3, [pc, #516]	@ (80037a0 <sw3Controll+0x240>)
 800359a:	2201      	movs	r2, #1
 800359c:	705a      	strb	r2, [r3, #1]
				sw3DefaultHandler();
 800359e:	f000 fb5d 	bl	8003c5c <sw3DefaultHandler>
				HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 80035a2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80035a6:	487f      	ldr	r0, [pc, #508]	@ (80037a4 <sw3Controll+0x244>)
 80035a8:	f001 f871 	bl	800468e <HAL_GPIO_TogglePin>
			}
			releasePointing(3);
 80035ac:	2003      	movs	r0, #3
 80035ae:	f000 fb0b 	bl	8003bc8 <releasePointing>
				sw3.flag = 0;
				HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_6);
			}
		}

		break;
 80035b2:	e0e7      	b.n	8003784 <sw3Controll+0x224>
			if (sw3.flag == TRUE) {
 80035b4:	4b7a      	ldr	r3, [pc, #488]	@ (80037a0 <sw3Controll+0x240>)
 80035b6:	785b      	ldrb	r3, [r3, #1]
 80035b8:	2b01      	cmp	r3, #1
 80035ba:	f040 80e3 	bne.w	8003784 <sw3Controll+0x224>
				if (rsp == SHORT) {
 80035be:	4b7a      	ldr	r3, [pc, #488]	@ (80037a8 <sw3Controll+0x248>)
 80035c0:	781b      	ldrb	r3, [r3, #0]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d10a      	bne.n	80035dc <sw3Controll+0x7c>
					setTimeFormet(!getTimeFormet()); // 시간포멧 변경
 80035c6:	f7fe ff23 	bl	8002410 <getTimeFormet>
 80035ca:	4603      	mov	r3, r0
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	bf0c      	ite	eq
 80035d0:	2301      	moveq	r3, #1
 80035d2:	2300      	movne	r3, #0
 80035d4:	b2db      	uxtb	r3, r3
 80035d6:	4618      	mov	r0, r3
 80035d8:	f7fe ff26 	bl	8002428 <setTimeFormet>
				sw3.flag = 0;
 80035dc:	4b70      	ldr	r3, [pc, #448]	@ (80037a0 <sw3Controll+0x240>)
 80035de:	2200      	movs	r2, #0
 80035e0:	705a      	strb	r2, [r3, #1]
				HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_6);
 80035e2:	2140      	movs	r1, #64	@ 0x40
 80035e4:	4871      	ldr	r0, [pc, #452]	@ (80037ac <sw3Controll+0x24c>)
 80035e6:	f001 f852 	bl	800468e <HAL_GPIO_TogglePin>
		break;
 80035ea:	e0cb      	b.n	8003784 <sw3Controll+0x224>
	case ALARM:	// 알람 모드일 때 PD4 기능
		if (sw3.state == TRUE) {
 80035ec:	4b6c      	ldr	r3, [pc, #432]	@ (80037a0 <sw3Controll+0x240>)
 80035ee:	781b      	ldrb	r3, [r3, #0]
 80035f0:	2b01      	cmp	r3, #1
 80035f2:	d114      	bne.n	800361e <sw3Controll+0xbe>
			if (sw3.flag == FALSE) {
 80035f4:	4b6a      	ldr	r3, [pc, #424]	@ (80037a0 <sw3Controll+0x240>)
 80035f6:	785b      	ldrb	r3, [r3, #1]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d10c      	bne.n	8003616 <sw3Controll+0xb6>
				sw3.flag = 1;
 80035fc:	4b68      	ldr	r3, [pc, #416]	@ (80037a0 <sw3Controll+0x240>)
 80035fe:	2201      	movs	r2, #1
 8003600:	705a      	strb	r2, [r3, #1]
				sw3DefaultHandler();
 8003602:	f000 fb2b 	bl	8003c5c <sw3DefaultHandler>
				setWaitingTime(0);
 8003606:	2000      	movs	r0, #0
 8003608:	f000 fb64 	bl	8003cd4 <setWaitingTime>
				HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 800360c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003610:	4864      	ldr	r0, [pc, #400]	@ (80037a4 <sw3Controll+0x244>)
 8003612:	f001 f83c 	bl	800468e <HAL_GPIO_TogglePin>
			}
			releasePointing(3);
 8003616:	2003      	movs	r0, #3
 8003618:	f000 fad6 	bl	8003bc8 <releasePointing>
				}
				sw3.flag = 0;
				HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_6);
			}
		}
		break;
 800361c:	e0b4      	b.n	8003788 <sw3Controll+0x228>
			if (sw3.flag == TRUE) {
 800361e:	4b60      	ldr	r3, [pc, #384]	@ (80037a0 <sw3Controll+0x240>)
 8003620:	785b      	ldrb	r3, [r3, #1]
 8003622:	2b01      	cmp	r3, #1
 8003624:	f040 80b0 	bne.w	8003788 <sw3Controll+0x228>
				if (rsp == SHORT) {
 8003628:	4b5f      	ldr	r3, [pc, #380]	@ (80037a8 <sw3Controll+0x248>)
 800362a:	781b      	ldrb	r3, [r3, #0]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d113      	bne.n	8003658 <sw3Controll+0xf8>
					setAlarmEnabled(!getAlarmEnabled(getSelect()), getSelect());
 8003630:	f7fd ffd8 	bl	80015e4 <getSelect>
 8003634:	4603      	mov	r3, r0
 8003636:	4618      	mov	r0, r3
 8003638:	f7fd ffe0 	bl	80015fc <getAlarmEnabled>
 800363c:	4603      	mov	r3, r0
 800363e:	2b00      	cmp	r3, #0
 8003640:	bf0c      	ite	eq
 8003642:	2301      	moveq	r3, #1
 8003644:	2300      	movne	r3, #0
 8003646:	b2db      	uxtb	r3, r3
 8003648:	461c      	mov	r4, r3
 800364a:	f7fd ffcb 	bl	80015e4 <getSelect>
 800364e:	4603      	mov	r3, r0
 8003650:	4619      	mov	r1, r3
 8003652:	4620      	mov	r0, r4
 8003654:	f7fd ffe6 	bl	8001624 <setAlarmEnabled>
				sw3.flag = 0;
 8003658:	4b51      	ldr	r3, [pc, #324]	@ (80037a0 <sw3Controll+0x240>)
 800365a:	2200      	movs	r2, #0
 800365c:	705a      	strb	r2, [r3, #1]
				HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_6);
 800365e:	2140      	movs	r1, #64	@ 0x40
 8003660:	4852      	ldr	r0, [pc, #328]	@ (80037ac <sw3Controll+0x24c>)
 8003662:	f001 f814 	bl	800468e <HAL_GPIO_TogglePin>
		break;
 8003666:	e08f      	b.n	8003788 <sw3Controll+0x228>
	case STOPWATCH:	// 스탑워치 모드일 때 PD4 기능
		// 스탑워치리셋, 랩타임저장, CLCD초기화 함수
		if (sw3.state == TRUE) {
 8003668:	4b4d      	ldr	r3, [pc, #308]	@ (80037a0 <sw3Controll+0x240>)
 800366a:	781b      	ldrb	r3, [r3, #0]
 800366c:	2b01      	cmp	r3, #1
 800366e:	d13d      	bne.n	80036ec <sw3Controll+0x18c>
			switch (stopwatch.state) {
 8003670:	4b4f      	ldr	r3, [pc, #316]	@ (80037b0 <sw3Controll+0x250>)
 8003672:	785b      	ldrb	r3, [r3, #1]
 8003674:	2b02      	cmp	r3, #2
 8003676:	d007      	beq.n	8003688 <sw3Controll+0x128>
 8003678:	2b02      	cmp	r3, #2
 800367a:	f300 8087 	bgt.w	800378c <sw3Controll+0x22c>
 800367e:	2b00      	cmp	r3, #0
 8003680:	d02a      	beq.n	80036d8 <sw3Controll+0x178>
 8003682:	2b01      	cmp	r3, #1
 8003684:	d014      	beq.n	80036b0 <sw3Controll+0x150>
				break;
			}
		} else {
			sw3.flag = 0;
		}
		break;
 8003686:	e081      	b.n	800378c <sw3Controll+0x22c>
				if (sw3.flag == FALSE) {
 8003688:	4b45      	ldr	r3, [pc, #276]	@ (80037a0 <sw3Controll+0x240>)
 800368a:	785b      	ldrb	r3, [r3, #1]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d131      	bne.n	80036f4 <sw3Controll+0x194>
					stopwatch.state = STOP;
 8003690:	4b47      	ldr	r3, [pc, #284]	@ (80037b0 <sw3Controll+0x250>)
 8003692:	2202      	movs	r2, #2
 8003694:	705a      	strb	r2, [r3, #1]
					segReset(); // 7세그먼트 초기화, clcd와 랩타임 저장 초기화
 8003696:	f7ff fbb7 	bl	8002e08 <segReset>
					clcdStopWatchClear();
 800369a:	f7ff fd4b 	bl	8003134 <clcdStopWatchClear>
					HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 800369e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80036a2:	4840      	ldr	r0, [pc, #256]	@ (80037a4 <sw3Controll+0x244>)
 80036a4:	f000 fff3 	bl	800468e <HAL_GPIO_TogglePin>
					sw3.flag = 1;
 80036a8:	4b3d      	ldr	r3, [pc, #244]	@ (80037a0 <sw3Controll+0x240>)
 80036aa:	2201      	movs	r2, #1
 80036ac:	705a      	strb	r2, [r3, #1]
				break;
 80036ae:	e021      	b.n	80036f4 <sw3Controll+0x194>
				if (sw3.flag == FALSE) {
 80036b0:	4b3b      	ldr	r3, [pc, #236]	@ (80037a0 <sw3Controll+0x240>)
 80036b2:	785b      	ldrb	r3, [r3, #1]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d11f      	bne.n	80036f8 <sw3Controll+0x198>
					stopwatch.state = STOP;
 80036b8:	4b3d      	ldr	r3, [pc, #244]	@ (80037b0 <sw3Controll+0x250>)
 80036ba:	2202      	movs	r2, #2
 80036bc:	705a      	strb	r2, [r3, #1]
					segReset(); // 7세그먼트 초기화, clcd와 랩타임 저장 초기화
 80036be:	f7ff fba3 	bl	8002e08 <segReset>
					clcdStopWatchClear();
 80036c2:	f7ff fd37 	bl	8003134 <clcdStopWatchClear>
					HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 80036c6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80036ca:	4836      	ldr	r0, [pc, #216]	@ (80037a4 <sw3Controll+0x244>)
 80036cc:	f000 ffdf 	bl	800468e <HAL_GPIO_TogglePin>
					sw3.flag = 1;
 80036d0:	4b33      	ldr	r3, [pc, #204]	@ (80037a0 <sw3Controll+0x240>)
 80036d2:	2201      	movs	r2, #1
 80036d4:	705a      	strb	r2, [r3, #1]
				break;
 80036d6:	e00f      	b.n	80036f8 <sw3Controll+0x198>
				if (sw3.flag == FALSE) {
 80036d8:	4b31      	ldr	r3, [pc, #196]	@ (80037a0 <sw3Controll+0x240>)
 80036da:	785b      	ldrb	r3, [r3, #1]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d10d      	bne.n	80036fc <sw3Controll+0x19c>
					laptimeSave(); // 랩타임 저장
 80036e0:	f7ff fc30 	bl	8002f44 <laptimeSave>
					sw3.flag = 1;
 80036e4:	4b2e      	ldr	r3, [pc, #184]	@ (80037a0 <sw3Controll+0x240>)
 80036e6:	2201      	movs	r2, #1
 80036e8:	705a      	strb	r2, [r3, #1]
				break;
 80036ea:	e007      	b.n	80036fc <sw3Controll+0x19c>
			sw3.flag = 0;
 80036ec:	4b2c      	ldr	r3, [pc, #176]	@ (80037a0 <sw3Controll+0x240>)
 80036ee:	2200      	movs	r2, #0
 80036f0:	705a      	strb	r2, [r3, #1]
		break;
 80036f2:	e04b      	b.n	800378c <sw3Controll+0x22c>
				break;
 80036f4:	bf00      	nop
 80036f6:	e049      	b.n	800378c <sw3Controll+0x22c>
				break;
 80036f8:	bf00      	nop
 80036fa:	e047      	b.n	800378c <sw3Controll+0x22c>
				break;
 80036fc:	bf00      	nop
		break;
 80036fe:	e045      	b.n	800378c <sw3Controll+0x22c>
	case CLOCK_SETTING: // 시계설정모드 일때 PD4 기능
		if (sw3.state == TRUE) {
 8003700:	4b27      	ldr	r3, [pc, #156]	@ (80037a0 <sw3Controll+0x240>)
 8003702:	781b      	ldrb	r3, [r3, #0]
 8003704:	2b01      	cmp	r3, #1
 8003706:	d116      	bne.n	8003736 <sw3Controll+0x1d6>
			if (sw3.flag == FALSE) {
 8003708:	4b25      	ldr	r3, [pc, #148]	@ (80037a0 <sw3Controll+0x240>)
 800370a:	785b      	ldrb	r3, [r3, #1]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d10b      	bne.n	8003728 <sw3Controll+0x1c8>
				sw3.flag = 1;
 8003710:	4b23      	ldr	r3, [pc, #140]	@ (80037a0 <sw3Controll+0x240>)
 8003712:	2201      	movs	r2, #1
 8003714:	705a      	strb	r2, [r3, #1]
				sw3DefaultHandler();
 8003716:	f000 faa1 	bl	8003c5c <sw3DefaultHandler>
				incrementTime();
 800371a:	f7fe fcd1 	bl	80020c0 <incrementTime>
				HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 800371e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003722:	4820      	ldr	r0, [pc, #128]	@ (80037a4 <sw3Controll+0x244>)
 8003724:	f000 ffb3 	bl	800468e <HAL_GPIO_TogglePin>
			}
			setWaitingTime(0);
 8003728:	2000      	movs	r0, #0
 800372a:	f000 fad3 	bl	8003cd4 <setWaitingTime>
			releasePointing(3);
 800372e:	2003      	movs	r0, #3
 8003730:	f000 fa4a 	bl	8003bc8 <releasePointing>
				sw3.flag = 0;
				rsp = SHORT;
				HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_6);
			}
		}
		break;
 8003734:	e02c      	b.n	8003790 <sw3Controll+0x230>
			if (sw3.flag == TRUE) {
 8003736:	4b1a      	ldr	r3, [pc, #104]	@ (80037a0 <sw3Controll+0x240>)
 8003738:	785b      	ldrb	r3, [r3, #1]
 800373a:	2b01      	cmp	r3, #1
 800373c:	d128      	bne.n	8003790 <sw3Controll+0x230>
				sw3.flag = 0;
 800373e:	4b18      	ldr	r3, [pc, #96]	@ (80037a0 <sw3Controll+0x240>)
 8003740:	2200      	movs	r2, #0
 8003742:	705a      	strb	r2, [r3, #1]
				rsp = SHORT;
 8003744:	4b18      	ldr	r3, [pc, #96]	@ (80037a8 <sw3Controll+0x248>)
 8003746:	2200      	movs	r2, #0
 8003748:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_6);
 800374a:	2140      	movs	r1, #64	@ 0x40
 800374c:	4817      	ldr	r0, [pc, #92]	@ (80037ac <sw3Controll+0x24c>)
 800374e:	f000 ff9e 	bl	800468e <HAL_GPIO_TogglePin>
		break;
 8003752:	e01d      	b.n	8003790 <sw3Controll+0x230>
	case ALARM_TRIGGER:
		if(sw3.state == TRUE) {
 8003754:	4b12      	ldr	r3, [pc, #72]	@ (80037a0 <sw3Controll+0x240>)
 8003756:	781b      	ldrb	r3, [r3, #0]
 8003758:	2b01      	cmp	r3, #1
 800375a:	d107      	bne.n	800376c <sw3Controll+0x20c>
			if(sw3.flag == FALSE) {
 800375c:	4b10      	ldr	r3, [pc, #64]	@ (80037a0 <sw3Controll+0x240>)
 800375e:	785b      	ldrb	r3, [r3, #1]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d117      	bne.n	8003794 <sw3Controll+0x234>
				sw3.flag = 1;
 8003764:	4b0e      	ldr	r3, [pc, #56]	@ (80037a0 <sw3Controll+0x240>)
 8003766:	2201      	movs	r2, #1
 8003768:	705a      	strb	r2, [r3, #1]
				returnToPreviousMode();
				buzReset();
				sw3.flag = 0;
			}
		}
		break;
 800376a:	e013      	b.n	8003794 <sw3Controll+0x234>
			if(sw3.flag == TRUE) {
 800376c:	4b0c      	ldr	r3, [pc, #48]	@ (80037a0 <sw3Controll+0x240>)
 800376e:	785b      	ldrb	r3, [r3, #1]
 8003770:	2b01      	cmp	r3, #1
 8003772:	d10f      	bne.n	8003794 <sw3Controll+0x234>
				returnToPreviousMode();
 8003774:	f7fd ff26 	bl	80015c4 <returnToPreviousMode>
				buzReset();
 8003778:	f7fe f846 	bl	8001808 <buzReset>
				sw3.flag = 0;
 800377c:	4b08      	ldr	r3, [pc, #32]	@ (80037a0 <sw3Controll+0x240>)
 800377e:	2200      	movs	r2, #0
 8003780:	705a      	strb	r2, [r3, #1]
		break;
 8003782:	e007      	b.n	8003794 <sw3Controll+0x234>
		break;
 8003784:	bf00      	nop
 8003786:	e006      	b.n	8003796 <sw3Controll+0x236>
		break;
 8003788:	bf00      	nop
 800378a:	e004      	b.n	8003796 <sw3Controll+0x236>
		break;
 800378c:	bf00      	nop
 800378e:	e002      	b.n	8003796 <sw3Controll+0x236>
		break;
 8003790:	bf00      	nop
 8003792:	e000      	b.n	8003796 <sw3Controll+0x236>
		break;
 8003794:	bf00      	nop
	}
}
 8003796:	bf00      	nop
 8003798:	bd98      	pop	{r3, r4, r7, pc}
 800379a:	bf00      	nop
 800379c:	2000030d 	.word	0x2000030d
 80037a0:	200002c4 	.word	0x200002c4
 80037a4:	40020c00 	.word	0x40020c00
 80037a8:	2000030c 	.word	0x2000030c
 80037ac:	40020800 	.word	0x40020800
 80037b0:	20000070 	.word	0x20000070

080037b4 <sw4Controll>:

void sw4Controll() {
 80037b4:	b580      	push	{r7, lr}
 80037b6:	af00      	add	r7, sp, #0
	// SW4 PD10
	switch (mode) {
 80037b8:	4b5d      	ldr	r3, [pc, #372]	@ (8003930 <sw4Controll+0x17c>)
 80037ba:	781b      	ldrb	r3, [r3, #0]
 80037bc:	2b04      	cmp	r3, #4
 80037be:	f200 80b4 	bhi.w	800392a <sw4Controll+0x176>
 80037c2:	a201      	add	r2, pc, #4	@ (adr r2, 80037c8 <sw4Controll+0x14>)
 80037c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037c8:	080037dd 	.word	0x080037dd
 80037cc:	08003823 	.word	0x08003823
 80037d0:	0800386d 	.word	0x0800386d
 80037d4:	08003899 	.word	0x08003899
 80037d8:	080038ed 	.word	0x080038ed
	case CLOCK:		// 시계모드 일때 PD10 기능

		if (sw4.state == TRUE) {
 80037dc:	4b55      	ldr	r3, [pc, #340]	@ (8003934 <sw4Controll+0x180>)
 80037de:	781b      	ldrb	r3, [r3, #0]
 80037e0:	2b01      	cmp	r3, #1
 80037e2:	d111      	bne.n	8003808 <sw4Controll+0x54>
			if (sw4.flag == FALSE) {
 80037e4:	4b53      	ldr	r3, [pc, #332]	@ (8003934 <sw4Controll+0x180>)
 80037e6:	785b      	ldrb	r3, [r3, #1]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d109      	bne.n	8003800 <sw4Controll+0x4c>
				sw4.flag = 1;
 80037ec:	4b51      	ldr	r3, [pc, #324]	@ (8003934 <sw4Controll+0x180>)
 80037ee:	2201      	movs	r2, #1
 80037f0:	705a      	strb	r2, [r3, #1]
				sw4DefaultHandler();
 80037f2:	f000 fa45 	bl	8003c80 <sw4DefaultHandler>
				HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 80037f6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80037fa:	484f      	ldr	r0, [pc, #316]	@ (8003938 <sw4Controll+0x184>)
 80037fc:	f000 ff47 	bl	800468e <HAL_GPIO_TogglePin>
			}
			releasePointing(4);
 8003800:	2004      	movs	r0, #4
 8003802:	f000 f9e1 	bl	8003bc8 <releasePointing>
			if (sw4.flag == TRUE) {
				HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_6);
				sw4.flag = 0;
			}
		}
		break;
 8003806:	e089      	b.n	800391c <sw4Controll+0x168>
			if (sw4.flag == TRUE) {
 8003808:	4b4a      	ldr	r3, [pc, #296]	@ (8003934 <sw4Controll+0x180>)
 800380a:	785b      	ldrb	r3, [r3, #1]
 800380c:	2b01      	cmp	r3, #1
 800380e:	f040 8085 	bne.w	800391c <sw4Controll+0x168>
				HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_6);
 8003812:	2140      	movs	r1, #64	@ 0x40
 8003814:	4849      	ldr	r0, [pc, #292]	@ (800393c <sw4Controll+0x188>)
 8003816:	f000 ff3a 	bl	800468e <HAL_GPIO_TogglePin>
				sw4.flag = 0;
 800381a:	4b46      	ldr	r3, [pc, #280]	@ (8003934 <sw4Controll+0x180>)
 800381c:	2200      	movs	r2, #0
 800381e:	705a      	strb	r2, [r3, #1]
		break;
 8003820:	e07c      	b.n	800391c <sw4Controll+0x168>
	case ALARM:	// 알람 모드일 때 PD10 기능
		if (sw4.state == TRUE) {
 8003822:	4b44      	ldr	r3, [pc, #272]	@ (8003934 <sw4Controll+0x180>)
 8003824:	781b      	ldrb	r3, [r3, #0]
 8003826:	2b01      	cmp	r3, #1
 8003828:	d114      	bne.n	8003854 <sw4Controll+0xa0>
			if (sw4.flag == FALSE) {
 800382a:	4b42      	ldr	r3, [pc, #264]	@ (8003934 <sw4Controll+0x180>)
 800382c:	785b      	ldrb	r3, [r3, #1]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d10c      	bne.n	800384c <sw4Controll+0x98>
				sw4.flag = 1;
 8003832:	4b40      	ldr	r3, [pc, #256]	@ (8003934 <sw4Controll+0x180>)
 8003834:	2201      	movs	r2, #1
 8003836:	705a      	strb	r2, [r3, #1]
				setWaitingTime(0);
 8003838:	2000      	movs	r0, #0
 800383a:	f000 fa4b 	bl	8003cd4 <setWaitingTime>
				sw4DefaultHandler();
 800383e:	f000 fa1f 	bl	8003c80 <sw4DefaultHandler>
				HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 8003842:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003846:	483c      	ldr	r0, [pc, #240]	@ (8003938 <sw4Controll+0x184>)
 8003848:	f000 ff21 	bl	800468e <HAL_GPIO_TogglePin>
			}
			releasePointing(4);
 800384c:	2004      	movs	r0, #4
 800384e:	f000 f9bb 	bl	8003bc8 <releasePointing>
			if (sw4.flag == TRUE) {
				sw4.flag = 0;
				HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_6);
			}
		}
		break;
 8003852:	e065      	b.n	8003920 <sw4Controll+0x16c>
			if (sw4.flag == TRUE) {
 8003854:	4b37      	ldr	r3, [pc, #220]	@ (8003934 <sw4Controll+0x180>)
 8003856:	785b      	ldrb	r3, [r3, #1]
 8003858:	2b01      	cmp	r3, #1
 800385a:	d161      	bne.n	8003920 <sw4Controll+0x16c>
				sw4.flag = 0;
 800385c:	4b35      	ldr	r3, [pc, #212]	@ (8003934 <sw4Controll+0x180>)
 800385e:	2200      	movs	r2, #0
 8003860:	705a      	strb	r2, [r3, #1]
				HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_6);
 8003862:	2140      	movs	r1, #64	@ 0x40
 8003864:	4835      	ldr	r0, [pc, #212]	@ (800393c <sw4Controll+0x188>)
 8003866:	f000 ff12 	bl	800468e <HAL_GPIO_TogglePin>
		break;
 800386a:	e059      	b.n	8003920 <sw4Controll+0x16c>
	case STOPWATCH: // 스탑워치 모드일 때 PD10 기능
		// 저장된 laptime 출력
		if (sw4.state == TRUE) {
 800386c:	4b31      	ldr	r3, [pc, #196]	@ (8003934 <sw4Controll+0x180>)
 800386e:	781b      	ldrb	r3, [r3, #0]
 8003870:	2b01      	cmp	r3, #1
 8003872:	d10d      	bne.n	8003890 <sw4Controll+0xdc>
			if (sw4.flag == FALSE) {
 8003874:	4b2f      	ldr	r3, [pc, #188]	@ (8003934 <sw4Controll+0x180>)
 8003876:	785b      	ldrb	r3, [r3, #1]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d153      	bne.n	8003924 <sw4Controll+0x170>
				laptimeDisplay(); // 랩타임 순서대로 출력
 800387c:	f7ff fbf2 	bl	8003064 <laptimeDisplay>
				HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_6);
 8003880:	2140      	movs	r1, #64	@ 0x40
 8003882:	482e      	ldr	r0, [pc, #184]	@ (800393c <sw4Controll+0x188>)
 8003884:	f000 ff03 	bl	800468e <HAL_GPIO_TogglePin>
				sw4.flag = 1;
 8003888:	4b2a      	ldr	r3, [pc, #168]	@ (8003934 <sw4Controll+0x180>)
 800388a:	2201      	movs	r2, #1
 800388c:	705a      	strb	r2, [r3, #1]
			}
		} else {
			sw4.flag = 0;
		}
		break;
 800388e:	e049      	b.n	8003924 <sw4Controll+0x170>
			sw4.flag = 0;
 8003890:	4b28      	ldr	r3, [pc, #160]	@ (8003934 <sw4Controll+0x180>)
 8003892:	2200      	movs	r2, #0
 8003894:	705a      	strb	r2, [r3, #1]
		break;
 8003896:	e045      	b.n	8003924 <sw4Controll+0x170>
	case CLOCK_SETTING:  // 시계설정모드 일때 PD10 기능
		if (sw4.state == TRUE) {
 8003898:	4b26      	ldr	r3, [pc, #152]	@ (8003934 <sw4Controll+0x180>)
 800389a:	781b      	ldrb	r3, [r3, #0]
 800389c:	2b01      	cmp	r3, #1
 800389e:	d116      	bne.n	80038ce <sw4Controll+0x11a>
			if (sw4.flag == FALSE) {
 80038a0:	4b24      	ldr	r3, [pc, #144]	@ (8003934 <sw4Controll+0x180>)
 80038a2:	785b      	ldrb	r3, [r3, #1]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d10b      	bne.n	80038c0 <sw4Controll+0x10c>
				sw4.flag = 1;
 80038a8:	4b22      	ldr	r3, [pc, #136]	@ (8003934 <sw4Controll+0x180>)
 80038aa:	2201      	movs	r2, #1
 80038ac:	705a      	strb	r2, [r3, #1]
				sw4DefaultHandler();
 80038ae:	f000 f9e7 	bl	8003c80 <sw4DefaultHandler>
				decrementTime();
 80038b2:	f7fe fcd5 	bl	8002260 <decrementTime>
				HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 80038b6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80038ba:	481f      	ldr	r0, [pc, #124]	@ (8003938 <sw4Controll+0x184>)
 80038bc:	f000 fee7 	bl	800468e <HAL_GPIO_TogglePin>
			}
			setWaitingTime(0);
 80038c0:	2000      	movs	r0, #0
 80038c2:	f000 fa07 	bl	8003cd4 <setWaitingTime>
			releasePointing(4);
 80038c6:	2004      	movs	r0, #4
 80038c8:	f000 f97e 	bl	8003bc8 <releasePointing>
				sw4.flag = 0;
				rsp = SHORT;
				HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_6);
			}
		}
		break;
 80038cc:	e02c      	b.n	8003928 <sw4Controll+0x174>
			if (sw4.flag == TRUE) {
 80038ce:	4b19      	ldr	r3, [pc, #100]	@ (8003934 <sw4Controll+0x180>)
 80038d0:	785b      	ldrb	r3, [r3, #1]
 80038d2:	2b01      	cmp	r3, #1
 80038d4:	d128      	bne.n	8003928 <sw4Controll+0x174>
				sw4.flag = 0;
 80038d6:	4b17      	ldr	r3, [pc, #92]	@ (8003934 <sw4Controll+0x180>)
 80038d8:	2200      	movs	r2, #0
 80038da:	705a      	strb	r2, [r3, #1]
				rsp = SHORT;
 80038dc:	4b18      	ldr	r3, [pc, #96]	@ (8003940 <sw4Controll+0x18c>)
 80038de:	2200      	movs	r2, #0
 80038e0:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_6);
 80038e2:	2140      	movs	r1, #64	@ 0x40
 80038e4:	4815      	ldr	r0, [pc, #84]	@ (800393c <sw4Controll+0x188>)
 80038e6:	f000 fed2 	bl	800468e <HAL_GPIO_TogglePin>
		break;
 80038ea:	e01d      	b.n	8003928 <sw4Controll+0x174>
	case ALARM_TRIGGER:
		if(sw4.state == TRUE) {
 80038ec:	4b11      	ldr	r3, [pc, #68]	@ (8003934 <sw4Controll+0x180>)
 80038ee:	781b      	ldrb	r3, [r3, #0]
 80038f0:	2b01      	cmp	r3, #1
 80038f2:	d107      	bne.n	8003904 <sw4Controll+0x150>
			if(sw4.flag == FALSE) {
 80038f4:	4b0f      	ldr	r3, [pc, #60]	@ (8003934 <sw4Controll+0x180>)
 80038f6:	785b      	ldrb	r3, [r3, #1]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d116      	bne.n	800392a <sw4Controll+0x176>
				sw4.flag = 1;
 80038fc:	4b0d      	ldr	r3, [pc, #52]	@ (8003934 <sw4Controll+0x180>)
 80038fe:	2201      	movs	r2, #1
 8003900:	705a      	strb	r2, [r3, #1]
				buzReset();
				sw4.flag = 0;
			}
		}
	}
}
 8003902:	e012      	b.n	800392a <sw4Controll+0x176>
			if(sw4.flag == TRUE) {
 8003904:	4b0b      	ldr	r3, [pc, #44]	@ (8003934 <sw4Controll+0x180>)
 8003906:	785b      	ldrb	r3, [r3, #1]
 8003908:	2b01      	cmp	r3, #1
 800390a:	d10e      	bne.n	800392a <sw4Controll+0x176>
				returnToPreviousMode();
 800390c:	f7fd fe5a 	bl	80015c4 <returnToPreviousMode>
				buzReset();
 8003910:	f7fd ff7a 	bl	8001808 <buzReset>
				sw4.flag = 0;
 8003914:	4b07      	ldr	r3, [pc, #28]	@ (8003934 <sw4Controll+0x180>)
 8003916:	2200      	movs	r2, #0
 8003918:	705a      	strb	r2, [r3, #1]
}
 800391a:	e006      	b.n	800392a <sw4Controll+0x176>
		break;
 800391c:	bf00      	nop
 800391e:	e004      	b.n	800392a <sw4Controll+0x176>
		break;
 8003920:	bf00      	nop
 8003922:	e002      	b.n	800392a <sw4Controll+0x176>
		break;
 8003924:	bf00      	nop
 8003926:	e000      	b.n	800392a <sw4Controll+0x176>
		break;
 8003928:	bf00      	nop
}
 800392a:	bf00      	nop
 800392c:	bd80      	pop	{r7, pc}
 800392e:	bf00      	nop
 8003930:	2000030d 	.word	0x2000030d
 8003934:	200002e0 	.word	0x200002e0
 8003938:	40020c00 	.word	0x40020c00
 800393c:	40020800 	.word	0x40020800
 8003940:	2000030c 	.word	0x2000030c

08003944 <getPressCount>:

int getPressCount(int swNum) {
 8003944:	b480      	push	{r7}
 8003946:	b085      	sub	sp, #20
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
	int temp;
	switch(swNum) {
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	3b01      	subs	r3, #1
 8003950:	2b03      	cmp	r3, #3
 8003952:	d81b      	bhi.n	800398c <getPressCount+0x48>
 8003954:	a201      	add	r2, pc, #4	@ (adr r2, 800395c <getPressCount+0x18>)
 8003956:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800395a:	bf00      	nop
 800395c:	0800396d 	.word	0x0800396d
 8003960:	08003975 	.word	0x08003975
 8003964:	0800397d 	.word	0x0800397d
 8003968:	08003985 	.word	0x08003985
	case 1:
		temp = sw1.pressCnt;
 800396c:	4b0b      	ldr	r3, [pc, #44]	@ (800399c <getPressCount+0x58>)
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	60fb      	str	r3, [r7, #12]
		break;
 8003972:	e00b      	b.n	800398c <getPressCount+0x48>
	case 2:
		temp = sw2.pressCnt;
 8003974:	4b0a      	ldr	r3, [pc, #40]	@ (80039a0 <getPressCount+0x5c>)
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	60fb      	str	r3, [r7, #12]
		break;
 800397a:	e007      	b.n	800398c <getPressCount+0x48>
	case 3:
		temp = sw3.pressCnt;
 800397c:	4b09      	ldr	r3, [pc, #36]	@ (80039a4 <getPressCount+0x60>)
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	60fb      	str	r3, [r7, #12]
		break;
 8003982:	e003      	b.n	800398c <getPressCount+0x48>
	case 4:
		temp = sw4.pressCnt;
 8003984:	4b08      	ldr	r3, [pc, #32]	@ (80039a8 <getPressCount+0x64>)
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	60fb      	str	r3, [r7, #12]
		break;
 800398a:	bf00      	nop
	}
	return temp;
 800398c:	68fb      	ldr	r3, [r7, #12]

}
 800398e:	4618      	mov	r0, r3
 8003990:	3714      	adds	r7, #20
 8003992:	46bd      	mov	sp, r7
 8003994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003998:	4770      	bx	lr
 800399a:	bf00      	nop
 800399c:	2000028c 	.word	0x2000028c
 80039a0:	200002a8 	.word	0x200002a8
 80039a4:	200002c4 	.word	0x200002c4
 80039a8:	200002e0 	.word	0x200002e0

080039ac <holdEvent>:

void holdEvent() {
 80039ac:	b580      	push	{r7, lr}
 80039ae:	af00      	add	r7, sp, #0
	if(sw1.state == TRUE) {
 80039b0:	4b7c      	ldr	r3, [pc, #496]	@ (8003ba4 <holdEvent+0x1f8>)
 80039b2:	781b      	ldrb	r3, [r3, #0]
 80039b4:	2b01      	cmp	r3, #1
 80039b6:	d115      	bne.n	80039e4 <holdEvent+0x38>
		if(sw1.pressCnt <= LONG_PRESS) {
 80039b8:	4b7a      	ldr	r3, [pc, #488]	@ (8003ba4 <holdEvent+0x1f8>)
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 80039c0:	4293      	cmp	r3, r2
 80039c2:	dc04      	bgt.n	80039ce <holdEvent+0x22>
			sw1.pressCnt++;
 80039c4:	4b77      	ldr	r3, [pc, #476]	@ (8003ba4 <holdEvent+0x1f8>)
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	3301      	adds	r3, #1
 80039ca:	4a76      	ldr	r2, [pc, #472]	@ (8003ba4 <holdEvent+0x1f8>)
 80039cc:	6053      	str	r3, [r2, #4]
		}
		switch(rsp) {
 80039ce:	4b76      	ldr	r3, [pc, #472]	@ (8003ba8 <holdEvent+0x1fc>)
 80039d0:	781b      	ldrb	r3, [r3, #0]
 80039d2:	2b02      	cmp	r3, #2
 80039d4:	d006      	beq.n	80039e4 <holdEvent+0x38>
 80039d6:	2b02      	cmp	r3, #2
 80039d8:	dc04      	bgt.n	80039e4 <holdEvent+0x38>
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d001      	beq.n	80039e2 <holdEvent+0x36>
 80039de:	2b01      	cmp	r3, #1
 80039e0:	e000      	b.n	80039e4 <holdEvent+0x38>
		case SHORT:
			break;
 80039e2:	bf00      	nop
			}
			break;

		}
	}
	if(sw2.state == TRUE) {
 80039e4:	4b71      	ldr	r3, [pc, #452]	@ (8003bac <holdEvent+0x200>)
 80039e6:	781b      	ldrb	r3, [r3, #0]
 80039e8:	2b01      	cmp	r3, #1
 80039ea:	d115      	bne.n	8003a18 <holdEvent+0x6c>
		if(sw2.pressCnt <= LONG_PRESS) {
 80039ec:	4b6f      	ldr	r3, [pc, #444]	@ (8003bac <holdEvent+0x200>)
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 80039f4:	4293      	cmp	r3, r2
 80039f6:	dc04      	bgt.n	8003a02 <holdEvent+0x56>
			sw2.pressCnt++;
 80039f8:	4b6c      	ldr	r3, [pc, #432]	@ (8003bac <holdEvent+0x200>)
 80039fa:	685b      	ldr	r3, [r3, #4]
 80039fc:	3301      	adds	r3, #1
 80039fe:	4a6b      	ldr	r2, [pc, #428]	@ (8003bac <holdEvent+0x200>)
 8003a00:	6053      	str	r3, [r2, #4]
		}
		switch(rsp) {
 8003a02:	4b69      	ldr	r3, [pc, #420]	@ (8003ba8 <holdEvent+0x1fc>)
 8003a04:	781b      	ldrb	r3, [r3, #0]
 8003a06:	2b02      	cmp	r3, #2
 8003a08:	d006      	beq.n	8003a18 <holdEvent+0x6c>
 8003a0a:	2b02      	cmp	r3, #2
 8003a0c:	dc04      	bgt.n	8003a18 <holdEvent+0x6c>
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d001      	beq.n	8003a16 <holdEvent+0x6a>
 8003a12:	2b01      	cmp	r3, #1
 8003a14:	e000      	b.n	8003a18 <holdEvent+0x6c>
		case SHORT:
			break;
 8003a16:	bf00      	nop
			}
			break;

		}
	}
	if(sw3.state == TRUE) {
 8003a18:	4b65      	ldr	r3, [pc, #404]	@ (8003bb0 <holdEvent+0x204>)
 8003a1a:	781b      	ldrb	r3, [r3, #0]
 8003a1c:	2b01      	cmp	r3, #1
 8003a1e:	d15c      	bne.n	8003ada <holdEvent+0x12e>
		if(sw3.pressCnt <= LONG_PRESS) {
 8003a20:	4b63      	ldr	r3, [pc, #396]	@ (8003bb0 <holdEvent+0x204>)
 8003a22:	685b      	ldr	r3, [r3, #4]
 8003a24:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	dc04      	bgt.n	8003a36 <holdEvent+0x8a>
			sw3.pressCnt++;
 8003a2c:	4b60      	ldr	r3, [pc, #384]	@ (8003bb0 <holdEvent+0x204>)
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	3301      	adds	r3, #1
 8003a32:	4a5f      	ldr	r2, [pc, #380]	@ (8003bb0 <holdEvent+0x204>)
 8003a34:	6053      	str	r3, [r2, #4]
		}
		if(sw3.pressCnt == MID_PRESS && mode == CLOCK_SETTING) {
 8003a36:	4b5e      	ldr	r3, [pc, #376]	@ (8003bb0 <holdEvent+0x204>)
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	f5b3 7f2f 	cmp.w	r3, #700	@ 0x2bc
 8003a3e:	d106      	bne.n	8003a4e <holdEvent+0xa2>
 8003a40:	4b5c      	ldr	r3, [pc, #368]	@ (8003bb4 <holdEvent+0x208>)
 8003a42:	781b      	ldrb	r3, [r3, #0]
 8003a44:	2b03      	cmp	r3, #3
 8003a46:	d102      	bne.n	8003a4e <holdEvent+0xa2>
			playMidTone();
 8003a48:	f7fd fe34 	bl	80016b4 <playMidTone>
 8003a4c:	e00b      	b.n	8003a66 <holdEvent+0xba>
		} else if(sw3.pressCnt == LONG_PRESS && mode == CLOCK_SETTING) {
 8003a4e:	4b58      	ldr	r3, [pc, #352]	@ (8003bb0 <holdEvent+0x204>)
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d105      	bne.n	8003a66 <holdEvent+0xba>
 8003a5a:	4b56      	ldr	r3, [pc, #344]	@ (8003bb4 <holdEvent+0x208>)
 8003a5c:	781b      	ldrb	r3, [r3, #0]
 8003a5e:	2b03      	cmp	r3, #3
 8003a60:	d101      	bne.n	8003a66 <holdEvent+0xba>
			playHighTone();
 8003a62:	f7fd fe39 	bl	80016d8 <playHighTone>
		}
		switch(rsp) {
 8003a66:	4b50      	ldr	r3, [pc, #320]	@ (8003ba8 <holdEvent+0x1fc>)
 8003a68:	781b      	ldrb	r3, [r3, #0]
 8003a6a:	2b02      	cmp	r3, #2
 8003a6c:	d01a      	beq.n	8003aa4 <holdEvent+0xf8>
 8003a6e:	2b02      	cmp	r3, #2
 8003a70:	dc33      	bgt.n	8003ada <holdEvent+0x12e>
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d02c      	beq.n	8003ad0 <holdEvent+0x124>
 8003a76:	2b01      	cmp	r3, #1
 8003a78:	d12f      	bne.n	8003ada <holdEvent+0x12e>
		case SHORT:
			break;
		case MID:
			if(sys.millisecond % 150 == 0) {
 8003a7a:	4b4f      	ldr	r3, [pc, #316]	@ (8003bb8 <holdEvent+0x20c>)
 8003a7c:	681a      	ldr	r2, [r3, #0]
 8003a7e:	4b4f      	ldr	r3, [pc, #316]	@ (8003bbc <holdEvent+0x210>)
 8003a80:	fb83 1302 	smull	r1, r3, r3, r2
 8003a84:	1119      	asrs	r1, r3, #4
 8003a86:	17d3      	asrs	r3, r2, #31
 8003a88:	1acb      	subs	r3, r1, r3
 8003a8a:	2196      	movs	r1, #150	@ 0x96
 8003a8c:	fb01 f303 	mul.w	r3, r1, r3
 8003a90:	1ad3      	subs	r3, r2, r3
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d11e      	bne.n	8003ad4 <holdEvent+0x128>
				if(mode == CLOCK_SETTING) {
 8003a96:	4b47      	ldr	r3, [pc, #284]	@ (8003bb4 <holdEvent+0x208>)
 8003a98:	781b      	ldrb	r3, [r3, #0]
 8003a9a:	2b03      	cmp	r3, #3
 8003a9c:	d11a      	bne.n	8003ad4 <holdEvent+0x128>
					incrementTime();
 8003a9e:	f7fe fb0f 	bl	80020c0 <incrementTime>
				}
			}
			break;
 8003aa2:	e017      	b.n	8003ad4 <holdEvent+0x128>
		case LONG:
			if(sys.millisecond % 20 == 0) {
 8003aa4:	4b44      	ldr	r3, [pc, #272]	@ (8003bb8 <holdEvent+0x20c>)
 8003aa6:	6819      	ldr	r1, [r3, #0]
 8003aa8:	4b45      	ldr	r3, [pc, #276]	@ (8003bc0 <holdEvent+0x214>)
 8003aaa:	fb83 2301 	smull	r2, r3, r3, r1
 8003aae:	10da      	asrs	r2, r3, #3
 8003ab0:	17cb      	asrs	r3, r1, #31
 8003ab2:	1ad2      	subs	r2, r2, r3
 8003ab4:	4613      	mov	r3, r2
 8003ab6:	009b      	lsls	r3, r3, #2
 8003ab8:	4413      	add	r3, r2
 8003aba:	009b      	lsls	r3, r3, #2
 8003abc:	1aca      	subs	r2, r1, r3
 8003abe:	2a00      	cmp	r2, #0
 8003ac0:	d10a      	bne.n	8003ad8 <holdEvent+0x12c>
				if(mode == CLOCK_SETTING) {
 8003ac2:	4b3c      	ldr	r3, [pc, #240]	@ (8003bb4 <holdEvent+0x208>)
 8003ac4:	781b      	ldrb	r3, [r3, #0]
 8003ac6:	2b03      	cmp	r3, #3
 8003ac8:	d106      	bne.n	8003ad8 <holdEvent+0x12c>
					incrementTime();
 8003aca:	f7fe faf9 	bl	80020c0 <incrementTime>

				}
			}
			break;
 8003ace:	e003      	b.n	8003ad8 <holdEvent+0x12c>
			break;
 8003ad0:	bf00      	nop
 8003ad2:	e002      	b.n	8003ada <holdEvent+0x12e>
			break;
 8003ad4:	bf00      	nop
 8003ad6:	e000      	b.n	8003ada <holdEvent+0x12e>
			break;
 8003ad8:	bf00      	nop

		}
	}
	if(sw4.state == TRUE) {
 8003ada:	4b3a      	ldr	r3, [pc, #232]	@ (8003bc4 <holdEvent+0x218>)
 8003adc:	781b      	ldrb	r3, [r3, #0]
 8003ade:	2b01      	cmp	r3, #1
 8003ae0:	d15d      	bne.n	8003b9e <holdEvent+0x1f2>
		if(sw4.pressCnt <= LONG_PRESS) {
 8003ae2:	4b38      	ldr	r3, [pc, #224]	@ (8003bc4 <holdEvent+0x218>)
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 8003aea:	4293      	cmp	r3, r2
 8003aec:	dc04      	bgt.n	8003af8 <holdEvent+0x14c>
			sw4.pressCnt++;
 8003aee:	4b35      	ldr	r3, [pc, #212]	@ (8003bc4 <holdEvent+0x218>)
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	3301      	adds	r3, #1
 8003af4:	4a33      	ldr	r2, [pc, #204]	@ (8003bc4 <holdEvent+0x218>)
 8003af6:	6053      	str	r3, [r2, #4]
		}
		if(sw4.pressCnt == MID_PRESS && mode == CLOCK_SETTING) {
 8003af8:	4b32      	ldr	r3, [pc, #200]	@ (8003bc4 <holdEvent+0x218>)
 8003afa:	685b      	ldr	r3, [r3, #4]
 8003afc:	f5b3 7f2f 	cmp.w	r3, #700	@ 0x2bc
 8003b00:	d106      	bne.n	8003b10 <holdEvent+0x164>
 8003b02:	4b2c      	ldr	r3, [pc, #176]	@ (8003bb4 <holdEvent+0x208>)
 8003b04:	781b      	ldrb	r3, [r3, #0]
 8003b06:	2b03      	cmp	r3, #3
 8003b08:	d102      	bne.n	8003b10 <holdEvent+0x164>
			playMidTone();
 8003b0a:	f7fd fdd3 	bl	80016b4 <playMidTone>
 8003b0e:	e00b      	b.n	8003b28 <holdEvent+0x17c>
		} else if(sw4.pressCnt == LONG_PRESS && mode == CLOCK_SETTING) {
 8003b10:	4b2c      	ldr	r3, [pc, #176]	@ (8003bc4 <holdEvent+0x218>)
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d105      	bne.n	8003b28 <holdEvent+0x17c>
 8003b1c:	4b25      	ldr	r3, [pc, #148]	@ (8003bb4 <holdEvent+0x208>)
 8003b1e:	781b      	ldrb	r3, [r3, #0]
 8003b20:	2b03      	cmp	r3, #3
 8003b22:	d101      	bne.n	8003b28 <holdEvent+0x17c>
			playHighTone();
 8003b24:	f7fd fdd8 	bl	80016d8 <playHighTone>
		}
		switch(rsp) {
 8003b28:	4b1f      	ldr	r3, [pc, #124]	@ (8003ba8 <holdEvent+0x1fc>)
 8003b2a:	781b      	ldrb	r3, [r3, #0]
 8003b2c:	2b02      	cmp	r3, #2
 8003b2e:	d01b      	beq.n	8003b68 <holdEvent+0x1bc>
 8003b30:	2b02      	cmp	r3, #2
 8003b32:	dc34      	bgt.n	8003b9e <holdEvent+0x1f2>
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d02d      	beq.n	8003b94 <holdEvent+0x1e8>
 8003b38:	2b01      	cmp	r3, #1
 8003b3a:	d000      	beq.n	8003b3e <holdEvent+0x192>
			}
			break;

		}
	}
}
 8003b3c:	e02f      	b.n	8003b9e <holdEvent+0x1f2>
			if(sys.millisecond % 150 == 0) {
 8003b3e:	4b1e      	ldr	r3, [pc, #120]	@ (8003bb8 <holdEvent+0x20c>)
 8003b40:	681a      	ldr	r2, [r3, #0]
 8003b42:	4b1e      	ldr	r3, [pc, #120]	@ (8003bbc <holdEvent+0x210>)
 8003b44:	fb83 1302 	smull	r1, r3, r3, r2
 8003b48:	1119      	asrs	r1, r3, #4
 8003b4a:	17d3      	asrs	r3, r2, #31
 8003b4c:	1acb      	subs	r3, r1, r3
 8003b4e:	2196      	movs	r1, #150	@ 0x96
 8003b50:	fb01 f303 	mul.w	r3, r1, r3
 8003b54:	1ad3      	subs	r3, r2, r3
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d11e      	bne.n	8003b98 <holdEvent+0x1ec>
				if(mode == CLOCK_SETTING) {
 8003b5a:	4b16      	ldr	r3, [pc, #88]	@ (8003bb4 <holdEvent+0x208>)
 8003b5c:	781b      	ldrb	r3, [r3, #0]
 8003b5e:	2b03      	cmp	r3, #3
 8003b60:	d11a      	bne.n	8003b98 <holdEvent+0x1ec>
					decrementTime();
 8003b62:	f7fe fb7d 	bl	8002260 <decrementTime>
			break;
 8003b66:	e017      	b.n	8003b98 <holdEvent+0x1ec>
			if(sys.millisecond % 20 == 0) {
 8003b68:	4b13      	ldr	r3, [pc, #76]	@ (8003bb8 <holdEvent+0x20c>)
 8003b6a:	6819      	ldr	r1, [r3, #0]
 8003b6c:	4b14      	ldr	r3, [pc, #80]	@ (8003bc0 <holdEvent+0x214>)
 8003b6e:	fb83 2301 	smull	r2, r3, r3, r1
 8003b72:	10da      	asrs	r2, r3, #3
 8003b74:	17cb      	asrs	r3, r1, #31
 8003b76:	1ad2      	subs	r2, r2, r3
 8003b78:	4613      	mov	r3, r2
 8003b7a:	009b      	lsls	r3, r3, #2
 8003b7c:	4413      	add	r3, r2
 8003b7e:	009b      	lsls	r3, r3, #2
 8003b80:	1aca      	subs	r2, r1, r3
 8003b82:	2a00      	cmp	r2, #0
 8003b84:	d10a      	bne.n	8003b9c <holdEvent+0x1f0>
				if(mode == CLOCK_SETTING) {
 8003b86:	4b0b      	ldr	r3, [pc, #44]	@ (8003bb4 <holdEvent+0x208>)
 8003b88:	781b      	ldrb	r3, [r3, #0]
 8003b8a:	2b03      	cmp	r3, #3
 8003b8c:	d106      	bne.n	8003b9c <holdEvent+0x1f0>
					decrementTime();
 8003b8e:	f7fe fb67 	bl	8002260 <decrementTime>
			break;
 8003b92:	e003      	b.n	8003b9c <holdEvent+0x1f0>
			break;
 8003b94:	bf00      	nop
 8003b96:	e002      	b.n	8003b9e <holdEvent+0x1f2>
			break;
 8003b98:	bf00      	nop
 8003b9a:	e000      	b.n	8003b9e <holdEvent+0x1f2>
			break;
 8003b9c:	bf00      	nop
}
 8003b9e:	bf00      	nop
 8003ba0:	bd80      	pop	{r7, pc}
 8003ba2:	bf00      	nop
 8003ba4:	2000028c 	.word	0x2000028c
 8003ba8:	2000030c 	.word	0x2000030c
 8003bac:	200002a8 	.word	0x200002a8
 8003bb0:	200002c4 	.word	0x200002c4
 8003bb4:	2000030d 	.word	0x2000030d
 8003bb8:	20000280 	.word	0x20000280
 8003bbc:	1b4e81b5 	.word	0x1b4e81b5
 8003bc0:	66666667 	.word	0x66666667
 8003bc4:	200002e0 	.word	0x200002e0

08003bc8 <releasePointing>:
void releasePointing(int swNum) {
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b084      	sub	sp, #16
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
		int cnt = getPressCount(swNum);
 8003bd0:	6878      	ldr	r0, [r7, #4]
 8003bd2:	f7ff feb7 	bl	8003944 <getPressCount>
 8003bd6:	60f8      	str	r0, [r7, #12]
		if(cnt < MID_PRESS) {
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	f5b3 7f2f 	cmp.w	r3, #700	@ 0x2bc
 8003bde:	da03      	bge.n	8003be8 <releasePointing+0x20>
			rsp = SHORT;
 8003be0:	4b0b      	ldr	r3, [pc, #44]	@ (8003c10 <releasePointing+0x48>)
 8003be2:	2200      	movs	r2, #0
 8003be4:	701a      	strb	r2, [r3, #0]
		} else if(cnt > MID_PRESS && cnt < LONG_PRESS) {
			rsp = MID;
		} else {
			rsp = LONG;
		}
}
 8003be6:	e00f      	b.n	8003c08 <releasePointing+0x40>
		} else if(cnt > MID_PRESS && cnt < LONG_PRESS) {
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	f5b3 7f2f 	cmp.w	r3, #700	@ 0x2bc
 8003bee:	dd08      	ble.n	8003c02 <releasePointing+0x3a>
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	f640 12c3 	movw	r2, #2499	@ 0x9c3
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	dc03      	bgt.n	8003c02 <releasePointing+0x3a>
			rsp = MID;
 8003bfa:	4b05      	ldr	r3, [pc, #20]	@ (8003c10 <releasePointing+0x48>)
 8003bfc:	2201      	movs	r2, #1
 8003bfe:	701a      	strb	r2, [r3, #0]
}
 8003c00:	e002      	b.n	8003c08 <releasePointing+0x40>
			rsp = LONG;
 8003c02:	4b03      	ldr	r3, [pc, #12]	@ (8003c10 <releasePointing+0x48>)
 8003c04:	2202      	movs	r2, #2
 8003c06:	701a      	strb	r2, [r3, #0]
}
 8003c08:	bf00      	nop
 8003c0a:	3710      	adds	r7, #16
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	bd80      	pop	{r7, pc}
 8003c10:	2000030c 	.word	0x2000030c

08003c14 <sw1DefaultHandler>:

void sw1DefaultHandler() {
 8003c14:	b580      	push	{r7, lr}
 8003c16:	af00      	add	r7, sp, #0
	sw1.pressCnt = 0;
 8003c18:	4b06      	ldr	r3, [pc, #24]	@ (8003c34 <sw1DefaultHandler+0x20>)
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	605a      	str	r2, [r3, #4]
	if(getBuzzEnabled() == TRUE) {
 8003c1e:	f7fd fe31 	bl	8001884 <getBuzzEnabled>
 8003c22:	4603      	mov	r3, r0
 8003c24:	2b01      	cmp	r3, #1
 8003c26:	d102      	bne.n	8003c2e <sw1DefaultHandler+0x1a>
		setbuzzerOnOff(1);		   // 부저 on
 8003c28:	2001      	movs	r0, #1
 8003c2a:	f7fd fe47 	bl	80018bc <setbuzzerOnOff>
	}
}
 8003c2e:	bf00      	nop
 8003c30:	bd80      	pop	{r7, pc}
 8003c32:	bf00      	nop
 8003c34:	2000028c 	.word	0x2000028c

08003c38 <sw2DefaultHandler>:
void sw2DefaultHandler() {
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	af00      	add	r7, sp, #0
	sw2.pressCnt = 0;
 8003c3c:	4b06      	ldr	r3, [pc, #24]	@ (8003c58 <sw2DefaultHandler+0x20>)
 8003c3e:	2200      	movs	r2, #0
 8003c40:	605a      	str	r2, [r3, #4]
	if(getBuzzEnabled() == TRUE) {
 8003c42:	f7fd fe1f 	bl	8001884 <getBuzzEnabled>
 8003c46:	4603      	mov	r3, r0
 8003c48:	2b01      	cmp	r3, #1
 8003c4a:	d102      	bne.n	8003c52 <sw2DefaultHandler+0x1a>
		setbuzzerOnOff(1);		   // 부저 on
 8003c4c:	2001      	movs	r0, #1
 8003c4e:	f7fd fe35 	bl	80018bc <setbuzzerOnOff>
	}
}
 8003c52:	bf00      	nop
 8003c54:	bd80      	pop	{r7, pc}
 8003c56:	bf00      	nop
 8003c58:	200002a8 	.word	0x200002a8

08003c5c <sw3DefaultHandler>:
void sw3DefaultHandler() {
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	af00      	add	r7, sp, #0
	sw3.pressCnt = 0;
 8003c60:	4b06      	ldr	r3, [pc, #24]	@ (8003c7c <sw3DefaultHandler+0x20>)
 8003c62:	2200      	movs	r2, #0
 8003c64:	605a      	str	r2, [r3, #4]
	if(getBuzzEnabled() == TRUE) {
 8003c66:	f7fd fe0d 	bl	8001884 <getBuzzEnabled>
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	2b01      	cmp	r3, #1
 8003c6e:	d102      	bne.n	8003c76 <sw3DefaultHandler+0x1a>
		setbuzzerOnOff(1);		   // 부저 on
 8003c70:	2001      	movs	r0, #1
 8003c72:	f7fd fe23 	bl	80018bc <setbuzzerOnOff>
	}
}
 8003c76:	bf00      	nop
 8003c78:	bd80      	pop	{r7, pc}
 8003c7a:	bf00      	nop
 8003c7c:	200002c4 	.word	0x200002c4

08003c80 <sw4DefaultHandler>:
void sw4DefaultHandler() {
 8003c80:	b580      	push	{r7, lr}
 8003c82:	af00      	add	r7, sp, #0
	sw4.pressCnt = 0;
 8003c84:	4b06      	ldr	r3, [pc, #24]	@ (8003ca0 <sw4DefaultHandler+0x20>)
 8003c86:	2200      	movs	r2, #0
 8003c88:	605a      	str	r2, [r3, #4]
	if(getBuzzEnabled() == TRUE) {
 8003c8a:	f7fd fdfb 	bl	8001884 <getBuzzEnabled>
 8003c8e:	4603      	mov	r3, r0
 8003c90:	2b01      	cmp	r3, #1
 8003c92:	d102      	bne.n	8003c9a <sw4DefaultHandler+0x1a>
		setbuzzerOnOff(1);		   // 부저 on
 8003c94:	2001      	movs	r0, #1
 8003c96:	f7fd fe11 	bl	80018bc <setbuzzerOnOff>
	}
}
 8003c9a:	bf00      	nop
 8003c9c:	bd80      	pop	{r7, pc}
 8003c9e:	bf00      	nop
 8003ca0:	200002e0 	.word	0x200002e0

08003ca4 <getBlink>:

int getSystemMillisecond() {
	return sys.millisecond;
}

uint8_t getBlink() {
 8003ca4:	b480      	push	{r7}
 8003ca6:	af00      	add	r7, sp, #0
	return sys.blink;
 8003ca8:	4b03      	ldr	r3, [pc, #12]	@ (8003cb8 <getBlink+0x14>)
 8003caa:	791b      	ldrb	r3, [r3, #4]
}
 8003cac:	4618      	mov	r0, r3
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb4:	4770      	bx	lr
 8003cb6:	bf00      	nop
 8003cb8:	20000280 	.word	0x20000280

08003cbc <getWaitingTime>:

int getWaitingTime() {
 8003cbc:	b480      	push	{r7}
 8003cbe:	af00      	add	r7, sp, #0
	return sys.waitingTime;
 8003cc0:	4b03      	ldr	r3, [pc, #12]	@ (8003cd0 <getWaitingTime+0x14>)
 8003cc2:	689b      	ldr	r3, [r3, #8]
}
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ccc:	4770      	bx	lr
 8003cce:	bf00      	nop
 8003cd0:	20000280 	.word	0x20000280

08003cd4 <setWaitingTime>:

void setWaitingTime(int t) {
 8003cd4:	b480      	push	{r7}
 8003cd6:	b083      	sub	sp, #12
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
	sys.waitingTime = t;
 8003cdc:	4a04      	ldr	r2, [pc, #16]	@ (8003cf0 <setWaitingTime+0x1c>)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6093      	str	r3, [r2, #8]
}
 8003ce2:	bf00      	nop
 8003ce4:	370c      	adds	r7, #12
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cec:	4770      	bx	lr
 8003cee:	bf00      	nop
 8003cf0:	20000280 	.word	0x20000280

08003cf4 <systemMillisecondCount>:

void systemMillisecondCount() {
 8003cf4:	b480      	push	{r7}
 8003cf6:	af00      	add	r7, sp, #0
	if(sys.millisecond < 1000) {
 8003cf8:	4b09      	ldr	r3, [pc, #36]	@ (8003d20 <systemMillisecondCount+0x2c>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003d00:	da05      	bge.n	8003d0e <systemMillisecondCount+0x1a>
		sys.millisecond++;
 8003d02:	4b07      	ldr	r3, [pc, #28]	@ (8003d20 <systemMillisecondCount+0x2c>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	3301      	adds	r3, #1
 8003d08:	4a05      	ldr	r2, [pc, #20]	@ (8003d20 <systemMillisecondCount+0x2c>)
 8003d0a:	6013      	str	r3, [r2, #0]
	} else {
		sys.millisecond = 0;
	}
}
 8003d0c:	e002      	b.n	8003d14 <systemMillisecondCount+0x20>
		sys.millisecond = 0;
 8003d0e:	4b04      	ldr	r3, [pc, #16]	@ (8003d20 <systemMillisecondCount+0x2c>)
 8003d10:	2200      	movs	r2, #0
 8003d12:	601a      	str	r2, [r3, #0]
}
 8003d14:	bf00      	nop
 8003d16:	46bd      	mov	sp, r7
 8003d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1c:	4770      	bx	lr
 8003d1e:	bf00      	nop
 8003d20:	20000280 	.word	0x20000280

08003d24 <blinking>:

void blinking() {
 8003d24:	b480      	push	{r7}
 8003d26:	af00      	add	r7, sp, #0
	if(sys.millisecond > 500) {
 8003d28:	4b08      	ldr	r3, [pc, #32]	@ (8003d4c <blinking+0x28>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8003d30:	dd03      	ble.n	8003d3a <blinking+0x16>
		sys.blink = 1;
 8003d32:	4b06      	ldr	r3, [pc, #24]	@ (8003d4c <blinking+0x28>)
 8003d34:	2201      	movs	r2, #1
 8003d36:	711a      	strb	r2, [r3, #4]
	} else {
		sys.blink = 0;
	}
}
 8003d38:	e002      	b.n	8003d40 <blinking+0x1c>
		sys.blink = 0;
 8003d3a:	4b04      	ldr	r3, [pc, #16]	@ (8003d4c <blinking+0x28>)
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	711a      	strb	r2, [r3, #4]
}
 8003d40:	bf00      	nop
 8003d42:	46bd      	mov	sp, r7
 8003d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d48:	4770      	bx	lr
 8003d4a:	bf00      	nop
 8003d4c:	20000280 	.word	0x20000280

08003d50 <waitingTimeCnt>:
void waitingTimeCnt() {
 8003d50:	b580      	push	{r7, lr}
 8003d52:	af00      	add	r7, sp, #0
	if(mode == CLOCK_SETTING || mode == ALARM){
 8003d54:	4b0f      	ldr	r3, [pc, #60]	@ (8003d94 <waitingTimeCnt+0x44>)
 8003d56:	781b      	ldrb	r3, [r3, #0]
 8003d58:	2b03      	cmp	r3, #3
 8003d5a:	d003      	beq.n	8003d64 <waitingTimeCnt+0x14>
 8003d5c:	4b0d      	ldr	r3, [pc, #52]	@ (8003d94 <waitingTimeCnt+0x44>)
 8003d5e:	781b      	ldrb	r3, [r3, #0]
 8003d60:	2b01      	cmp	r3, #1
 8003d62:	d114      	bne.n	8003d8e <waitingTimeCnt+0x3e>
		if(sys.waitingTime <= 30000) { // 30초 대기
 8003d64:	4b0c      	ldr	r3, [pc, #48]	@ (8003d98 <waitingTimeCnt+0x48>)
 8003d66:	689b      	ldr	r3, [r3, #8]
 8003d68:	f247 5230 	movw	r2, #30000	@ 0x7530
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	dc05      	bgt.n	8003d7c <waitingTimeCnt+0x2c>
			sys.waitingTime++;
 8003d70:	4b09      	ldr	r3, [pc, #36]	@ (8003d98 <waitingTimeCnt+0x48>)
 8003d72:	689b      	ldr	r3, [r3, #8]
 8003d74:	3301      	adds	r3, #1
 8003d76:	4a08      	ldr	r2, [pc, #32]	@ (8003d98 <waitingTimeCnt+0x48>)
 8003d78:	6093      	str	r3, [r2, #8]
			setbuzzerOnOff(1);
			sys.waitingTime = 0;
			mode = CLOCK;
		}
	}
}
 8003d7a:	e008      	b.n	8003d8e <waitingTimeCnt+0x3e>
			setbuzzerOnOff(1);
 8003d7c:	2001      	movs	r0, #1
 8003d7e:	f7fd fd9d 	bl	80018bc <setbuzzerOnOff>
			sys.waitingTime = 0;
 8003d82:	4b05      	ldr	r3, [pc, #20]	@ (8003d98 <waitingTimeCnt+0x48>)
 8003d84:	2200      	movs	r2, #0
 8003d86:	609a      	str	r2, [r3, #8]
			mode = CLOCK;
 8003d88:	4b02      	ldr	r3, [pc, #8]	@ (8003d94 <waitingTimeCnt+0x44>)
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	701a      	strb	r2, [r3, #0]
}
 8003d8e:	bf00      	nop
 8003d90:	bd80      	pop	{r7, pc}
 8003d92:	bf00      	nop
 8003d94:	2000030d 	.word	0x2000030d
 8003d98:	20000280 	.word	0x20000280

08003d9c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b086      	sub	sp, #24
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003da4:	4a14      	ldr	r2, [pc, #80]	@ (8003df8 <_sbrk+0x5c>)
 8003da6:	4b15      	ldr	r3, [pc, #84]	@ (8003dfc <_sbrk+0x60>)
 8003da8:	1ad3      	subs	r3, r2, r3
 8003daa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003dac:	697b      	ldr	r3, [r7, #20]
 8003dae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003db0:	4b13      	ldr	r3, [pc, #76]	@ (8003e00 <_sbrk+0x64>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d102      	bne.n	8003dbe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003db8:	4b11      	ldr	r3, [pc, #68]	@ (8003e00 <_sbrk+0x64>)
 8003dba:	4a12      	ldr	r2, [pc, #72]	@ (8003e04 <_sbrk+0x68>)
 8003dbc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003dbe:	4b10      	ldr	r3, [pc, #64]	@ (8003e00 <_sbrk+0x64>)
 8003dc0:	681a      	ldr	r2, [r3, #0]
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	4413      	add	r3, r2
 8003dc6:	693a      	ldr	r2, [r7, #16]
 8003dc8:	429a      	cmp	r2, r3
 8003dca:	d207      	bcs.n	8003ddc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003dcc:	f003 f966 	bl	800709c <__errno>
 8003dd0:	4603      	mov	r3, r0
 8003dd2:	220c      	movs	r2, #12
 8003dd4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003dd6:	f04f 33ff 	mov.w	r3, #4294967295
 8003dda:	e009      	b.n	8003df0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003ddc:	4b08      	ldr	r3, [pc, #32]	@ (8003e00 <_sbrk+0x64>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003de2:	4b07      	ldr	r3, [pc, #28]	@ (8003e00 <_sbrk+0x64>)
 8003de4:	681a      	ldr	r2, [r3, #0]
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	4413      	add	r3, r2
 8003dea:	4a05      	ldr	r2, [pc, #20]	@ (8003e00 <_sbrk+0x64>)
 8003dec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003dee:	68fb      	ldr	r3, [r7, #12]
}
 8003df0:	4618      	mov	r0, r3
 8003df2:	3718      	adds	r7, #24
 8003df4:	46bd      	mov	sp, r7
 8003df6:	bd80      	pop	{r7, pc}
 8003df8:	20020000 	.word	0x20020000
 8003dfc:	00000400 	.word	0x00000400
 8003e00:	20000310 	.word	0x20000310
 8003e04:	20000468 	.word	0x20000468

08003e08 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003e08:	b480      	push	{r7}
 8003e0a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003e0c:	4b06      	ldr	r3, [pc, #24]	@ (8003e28 <SystemInit+0x20>)
 8003e0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e12:	4a05      	ldr	r2, [pc, #20]	@ (8003e28 <SystemInit+0x20>)
 8003e14:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003e18:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003e1c:	bf00      	nop
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e24:	4770      	bx	lr
 8003e26:	bf00      	nop
 8003e28:	e000ed00 	.word	0xe000ed00

08003e2c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003e2c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003e64 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8003e30:	f7ff ffea 	bl	8003e08 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003e34:	480c      	ldr	r0, [pc, #48]	@ (8003e68 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003e36:	490d      	ldr	r1, [pc, #52]	@ (8003e6c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003e38:	4a0d      	ldr	r2, [pc, #52]	@ (8003e70 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003e3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003e3c:	e002      	b.n	8003e44 <LoopCopyDataInit>

08003e3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003e3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003e40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003e42:	3304      	adds	r3, #4

08003e44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003e44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003e46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003e48:	d3f9      	bcc.n	8003e3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003e4a:	4a0a      	ldr	r2, [pc, #40]	@ (8003e74 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003e4c:	4c0a      	ldr	r4, [pc, #40]	@ (8003e78 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003e4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003e50:	e001      	b.n	8003e56 <LoopFillZerobss>

08003e52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003e52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003e54:	3204      	adds	r2, #4

08003e56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003e56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003e58:	d3fb      	bcc.n	8003e52 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003e5a:	f003 f925 	bl	80070a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003e5e:	f7fe faf3 	bl	8002448 <main>
  bx  lr    
 8003e62:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003e64:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003e68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003e6c:	20000188 	.word	0x20000188
  ldr r2, =_sidata
 8003e70:	08007c5c 	.word	0x08007c5c
  ldr r2, =_sbss
 8003e74:	20000188 	.word	0x20000188
  ldr r4, =_ebss
 8003e78:	20000464 	.word	0x20000464

08003e7c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003e7c:	e7fe      	b.n	8003e7c <ADC_IRQHandler>
	...

08003e80 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003e84:	4b0e      	ldr	r3, [pc, #56]	@ (8003ec0 <HAL_Init+0x40>)
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4a0d      	ldr	r2, [pc, #52]	@ (8003ec0 <HAL_Init+0x40>)
 8003e8a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003e8e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003e90:	4b0b      	ldr	r3, [pc, #44]	@ (8003ec0 <HAL_Init+0x40>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4a0a      	ldr	r2, [pc, #40]	@ (8003ec0 <HAL_Init+0x40>)
 8003e96:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003e9a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003e9c:	4b08      	ldr	r3, [pc, #32]	@ (8003ec0 <HAL_Init+0x40>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4a07      	ldr	r2, [pc, #28]	@ (8003ec0 <HAL_Init+0x40>)
 8003ea2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ea6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003ea8:	2003      	movs	r0, #3
 8003eaa:	f000 f94f 	bl	800414c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003eae:	200f      	movs	r0, #15
 8003eb0:	f000 f808 	bl	8003ec4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003eb4:	f7fe fe32 	bl	8002b1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003eb8:	2300      	movs	r3, #0
}
 8003eba:	4618      	mov	r0, r3
 8003ebc:	bd80      	pop	{r7, pc}
 8003ebe:	bf00      	nop
 8003ec0:	40023c00 	.word	0x40023c00

08003ec4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b082      	sub	sp, #8
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003ecc:	4b12      	ldr	r3, [pc, #72]	@ (8003f18 <HAL_InitTick+0x54>)
 8003ece:	681a      	ldr	r2, [r3, #0]
 8003ed0:	4b12      	ldr	r3, [pc, #72]	@ (8003f1c <HAL_InitTick+0x58>)
 8003ed2:	781b      	ldrb	r3, [r3, #0]
 8003ed4:	4619      	mov	r1, r3
 8003ed6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003eda:	fbb3 f3f1 	udiv	r3, r3, r1
 8003ede:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	f000 f967 	bl	80041b6 <HAL_SYSTICK_Config>
 8003ee8:	4603      	mov	r3, r0
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d001      	beq.n	8003ef2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003eee:	2301      	movs	r3, #1
 8003ef0:	e00e      	b.n	8003f10 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2b0f      	cmp	r3, #15
 8003ef6:	d80a      	bhi.n	8003f0e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003ef8:	2200      	movs	r2, #0
 8003efa:	6879      	ldr	r1, [r7, #4]
 8003efc:	f04f 30ff 	mov.w	r0, #4294967295
 8003f00:	f000 f92f 	bl	8004162 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003f04:	4a06      	ldr	r2, [pc, #24]	@ (8003f20 <HAL_InitTick+0x5c>)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	e000      	b.n	8003f10 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003f0e:	2301      	movs	r3, #1
}
 8003f10:	4618      	mov	r0, r3
 8003f12:	3708      	adds	r7, #8
 8003f14:	46bd      	mov	sp, r7
 8003f16:	bd80      	pop	{r7, pc}
 8003f18:	2000012c 	.word	0x2000012c
 8003f1c:	20000134 	.word	0x20000134
 8003f20:	20000130 	.word	0x20000130

08003f24 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003f24:	b480      	push	{r7}
 8003f26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003f28:	4b06      	ldr	r3, [pc, #24]	@ (8003f44 <HAL_IncTick+0x20>)
 8003f2a:	781b      	ldrb	r3, [r3, #0]
 8003f2c:	461a      	mov	r2, r3
 8003f2e:	4b06      	ldr	r3, [pc, #24]	@ (8003f48 <HAL_IncTick+0x24>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4413      	add	r3, r2
 8003f34:	4a04      	ldr	r2, [pc, #16]	@ (8003f48 <HAL_IncTick+0x24>)
 8003f36:	6013      	str	r3, [r2, #0]
}
 8003f38:	bf00      	nop
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f40:	4770      	bx	lr
 8003f42:	bf00      	nop
 8003f44:	20000134 	.word	0x20000134
 8003f48:	20000318 	.word	0x20000318

08003f4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	af00      	add	r7, sp, #0
  return uwTick;
 8003f50:	4b03      	ldr	r3, [pc, #12]	@ (8003f60 <HAL_GetTick+0x14>)
 8003f52:	681b      	ldr	r3, [r3, #0]
}
 8003f54:	4618      	mov	r0, r3
 8003f56:	46bd      	mov	sp, r7
 8003f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5c:	4770      	bx	lr
 8003f5e:	bf00      	nop
 8003f60:	20000318 	.word	0x20000318

08003f64 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b084      	sub	sp, #16
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003f6c:	f7ff ffee 	bl	8003f4c <HAL_GetTick>
 8003f70:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f7c:	d005      	beq.n	8003f8a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003f7e:	4b0a      	ldr	r3, [pc, #40]	@ (8003fa8 <HAL_Delay+0x44>)
 8003f80:	781b      	ldrb	r3, [r3, #0]
 8003f82:	461a      	mov	r2, r3
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	4413      	add	r3, r2
 8003f88:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003f8a:	bf00      	nop
 8003f8c:	f7ff ffde 	bl	8003f4c <HAL_GetTick>
 8003f90:	4602      	mov	r2, r0
 8003f92:	68bb      	ldr	r3, [r7, #8]
 8003f94:	1ad3      	subs	r3, r2, r3
 8003f96:	68fa      	ldr	r2, [r7, #12]
 8003f98:	429a      	cmp	r2, r3
 8003f9a:	d8f7      	bhi.n	8003f8c <HAL_Delay+0x28>
  {
  }
}
 8003f9c:	bf00      	nop
 8003f9e:	bf00      	nop
 8003fa0:	3710      	adds	r7, #16
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	bd80      	pop	{r7, pc}
 8003fa6:	bf00      	nop
 8003fa8:	20000134 	.word	0x20000134

08003fac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003fac:	b480      	push	{r7}
 8003fae:	b085      	sub	sp, #20
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	f003 0307 	and.w	r3, r3, #7
 8003fba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003fbc:	4b0c      	ldr	r3, [pc, #48]	@ (8003ff0 <__NVIC_SetPriorityGrouping+0x44>)
 8003fbe:	68db      	ldr	r3, [r3, #12]
 8003fc0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003fc2:	68ba      	ldr	r2, [r7, #8]
 8003fc4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003fc8:	4013      	ands	r3, r2
 8003fca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003fd0:	68bb      	ldr	r3, [r7, #8]
 8003fd2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003fd4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003fd8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003fdc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003fde:	4a04      	ldr	r2, [pc, #16]	@ (8003ff0 <__NVIC_SetPriorityGrouping+0x44>)
 8003fe0:	68bb      	ldr	r3, [r7, #8]
 8003fe2:	60d3      	str	r3, [r2, #12]
}
 8003fe4:	bf00      	nop
 8003fe6:	3714      	adds	r7, #20
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fee:	4770      	bx	lr
 8003ff0:	e000ed00 	.word	0xe000ed00

08003ff4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003ff4:	b480      	push	{r7}
 8003ff6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003ff8:	4b04      	ldr	r3, [pc, #16]	@ (800400c <__NVIC_GetPriorityGrouping+0x18>)
 8003ffa:	68db      	ldr	r3, [r3, #12]
 8003ffc:	0a1b      	lsrs	r3, r3, #8
 8003ffe:	f003 0307 	and.w	r3, r3, #7
}
 8004002:	4618      	mov	r0, r3
 8004004:	46bd      	mov	sp, r7
 8004006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400a:	4770      	bx	lr
 800400c:	e000ed00 	.word	0xe000ed00

08004010 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004010:	b480      	push	{r7}
 8004012:	b083      	sub	sp, #12
 8004014:	af00      	add	r7, sp, #0
 8004016:	4603      	mov	r3, r0
 8004018:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800401a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800401e:	2b00      	cmp	r3, #0
 8004020:	db0b      	blt.n	800403a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004022:	79fb      	ldrb	r3, [r7, #7]
 8004024:	f003 021f 	and.w	r2, r3, #31
 8004028:	4907      	ldr	r1, [pc, #28]	@ (8004048 <__NVIC_EnableIRQ+0x38>)
 800402a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800402e:	095b      	lsrs	r3, r3, #5
 8004030:	2001      	movs	r0, #1
 8004032:	fa00 f202 	lsl.w	r2, r0, r2
 8004036:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800403a:	bf00      	nop
 800403c:	370c      	adds	r7, #12
 800403e:	46bd      	mov	sp, r7
 8004040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004044:	4770      	bx	lr
 8004046:	bf00      	nop
 8004048:	e000e100 	.word	0xe000e100

0800404c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800404c:	b480      	push	{r7}
 800404e:	b083      	sub	sp, #12
 8004050:	af00      	add	r7, sp, #0
 8004052:	4603      	mov	r3, r0
 8004054:	6039      	str	r1, [r7, #0]
 8004056:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004058:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800405c:	2b00      	cmp	r3, #0
 800405e:	db0a      	blt.n	8004076 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	b2da      	uxtb	r2, r3
 8004064:	490c      	ldr	r1, [pc, #48]	@ (8004098 <__NVIC_SetPriority+0x4c>)
 8004066:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800406a:	0112      	lsls	r2, r2, #4
 800406c:	b2d2      	uxtb	r2, r2
 800406e:	440b      	add	r3, r1
 8004070:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004074:	e00a      	b.n	800408c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	b2da      	uxtb	r2, r3
 800407a:	4908      	ldr	r1, [pc, #32]	@ (800409c <__NVIC_SetPriority+0x50>)
 800407c:	79fb      	ldrb	r3, [r7, #7]
 800407e:	f003 030f 	and.w	r3, r3, #15
 8004082:	3b04      	subs	r3, #4
 8004084:	0112      	lsls	r2, r2, #4
 8004086:	b2d2      	uxtb	r2, r2
 8004088:	440b      	add	r3, r1
 800408a:	761a      	strb	r2, [r3, #24]
}
 800408c:	bf00      	nop
 800408e:	370c      	adds	r7, #12
 8004090:	46bd      	mov	sp, r7
 8004092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004096:	4770      	bx	lr
 8004098:	e000e100 	.word	0xe000e100
 800409c:	e000ed00 	.word	0xe000ed00

080040a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80040a0:	b480      	push	{r7}
 80040a2:	b089      	sub	sp, #36	@ 0x24
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	60f8      	str	r0, [r7, #12]
 80040a8:	60b9      	str	r1, [r7, #8]
 80040aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	f003 0307 	and.w	r3, r3, #7
 80040b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80040b4:	69fb      	ldr	r3, [r7, #28]
 80040b6:	f1c3 0307 	rsb	r3, r3, #7
 80040ba:	2b04      	cmp	r3, #4
 80040bc:	bf28      	it	cs
 80040be:	2304      	movcs	r3, #4
 80040c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80040c2:	69fb      	ldr	r3, [r7, #28]
 80040c4:	3304      	adds	r3, #4
 80040c6:	2b06      	cmp	r3, #6
 80040c8:	d902      	bls.n	80040d0 <NVIC_EncodePriority+0x30>
 80040ca:	69fb      	ldr	r3, [r7, #28]
 80040cc:	3b03      	subs	r3, #3
 80040ce:	e000      	b.n	80040d2 <NVIC_EncodePriority+0x32>
 80040d0:	2300      	movs	r3, #0
 80040d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80040d4:	f04f 32ff 	mov.w	r2, #4294967295
 80040d8:	69bb      	ldr	r3, [r7, #24]
 80040da:	fa02 f303 	lsl.w	r3, r2, r3
 80040de:	43da      	mvns	r2, r3
 80040e0:	68bb      	ldr	r3, [r7, #8]
 80040e2:	401a      	ands	r2, r3
 80040e4:	697b      	ldr	r3, [r7, #20]
 80040e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80040e8:	f04f 31ff 	mov.w	r1, #4294967295
 80040ec:	697b      	ldr	r3, [r7, #20]
 80040ee:	fa01 f303 	lsl.w	r3, r1, r3
 80040f2:	43d9      	mvns	r1, r3
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80040f8:	4313      	orrs	r3, r2
         );
}
 80040fa:	4618      	mov	r0, r3
 80040fc:	3724      	adds	r7, #36	@ 0x24
 80040fe:	46bd      	mov	sp, r7
 8004100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004104:	4770      	bx	lr
	...

08004108 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b082      	sub	sp, #8
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	3b01      	subs	r3, #1
 8004114:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004118:	d301      	bcc.n	800411e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800411a:	2301      	movs	r3, #1
 800411c:	e00f      	b.n	800413e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800411e:	4a0a      	ldr	r2, [pc, #40]	@ (8004148 <SysTick_Config+0x40>)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	3b01      	subs	r3, #1
 8004124:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004126:	210f      	movs	r1, #15
 8004128:	f04f 30ff 	mov.w	r0, #4294967295
 800412c:	f7ff ff8e 	bl	800404c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004130:	4b05      	ldr	r3, [pc, #20]	@ (8004148 <SysTick_Config+0x40>)
 8004132:	2200      	movs	r2, #0
 8004134:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004136:	4b04      	ldr	r3, [pc, #16]	@ (8004148 <SysTick_Config+0x40>)
 8004138:	2207      	movs	r2, #7
 800413a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800413c:	2300      	movs	r3, #0
}
 800413e:	4618      	mov	r0, r3
 8004140:	3708      	adds	r7, #8
 8004142:	46bd      	mov	sp, r7
 8004144:	bd80      	pop	{r7, pc}
 8004146:	bf00      	nop
 8004148:	e000e010 	.word	0xe000e010

0800414c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b082      	sub	sp, #8
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004154:	6878      	ldr	r0, [r7, #4]
 8004156:	f7ff ff29 	bl	8003fac <__NVIC_SetPriorityGrouping>
}
 800415a:	bf00      	nop
 800415c:	3708      	adds	r7, #8
 800415e:	46bd      	mov	sp, r7
 8004160:	bd80      	pop	{r7, pc}

08004162 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004162:	b580      	push	{r7, lr}
 8004164:	b086      	sub	sp, #24
 8004166:	af00      	add	r7, sp, #0
 8004168:	4603      	mov	r3, r0
 800416a:	60b9      	str	r1, [r7, #8]
 800416c:	607a      	str	r2, [r7, #4]
 800416e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004170:	2300      	movs	r3, #0
 8004172:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004174:	f7ff ff3e 	bl	8003ff4 <__NVIC_GetPriorityGrouping>
 8004178:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800417a:	687a      	ldr	r2, [r7, #4]
 800417c:	68b9      	ldr	r1, [r7, #8]
 800417e:	6978      	ldr	r0, [r7, #20]
 8004180:	f7ff ff8e 	bl	80040a0 <NVIC_EncodePriority>
 8004184:	4602      	mov	r2, r0
 8004186:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800418a:	4611      	mov	r1, r2
 800418c:	4618      	mov	r0, r3
 800418e:	f7ff ff5d 	bl	800404c <__NVIC_SetPriority>
}
 8004192:	bf00      	nop
 8004194:	3718      	adds	r7, #24
 8004196:	46bd      	mov	sp, r7
 8004198:	bd80      	pop	{r7, pc}

0800419a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800419a:	b580      	push	{r7, lr}
 800419c:	b082      	sub	sp, #8
 800419e:	af00      	add	r7, sp, #0
 80041a0:	4603      	mov	r3, r0
 80041a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80041a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041a8:	4618      	mov	r0, r3
 80041aa:	f7ff ff31 	bl	8004010 <__NVIC_EnableIRQ>
}
 80041ae:	bf00      	nop
 80041b0:	3708      	adds	r7, #8
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bd80      	pop	{r7, pc}

080041b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80041b6:	b580      	push	{r7, lr}
 80041b8:	b082      	sub	sp, #8
 80041ba:	af00      	add	r7, sp, #0
 80041bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80041be:	6878      	ldr	r0, [r7, #4]
 80041c0:	f7ff ffa2 	bl	8004108 <SysTick_Config>
 80041c4:	4603      	mov	r3, r0
}
 80041c6:	4618      	mov	r0, r3
 80041c8:	3708      	adds	r7, #8
 80041ca:	46bd      	mov	sp, r7
 80041cc:	bd80      	pop	{r7, pc}

080041ce <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80041ce:	b580      	push	{r7, lr}
 80041d0:	b084      	sub	sp, #16
 80041d2:	af00      	add	r7, sp, #0
 80041d4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041da:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80041dc:	f7ff feb6 	bl	8003f4c <HAL_GetTick>
 80041e0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80041e8:	b2db      	uxtb	r3, r3
 80041ea:	2b02      	cmp	r3, #2
 80041ec:	d008      	beq.n	8004200 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2280      	movs	r2, #128	@ 0x80
 80041f2:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2200      	movs	r2, #0
 80041f8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80041fc:	2301      	movs	r3, #1
 80041fe:	e052      	b.n	80042a6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	681a      	ldr	r2, [r3, #0]
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f022 0216 	bic.w	r2, r2, #22
 800420e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	695a      	ldr	r2, [r3, #20]
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800421e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004224:	2b00      	cmp	r3, #0
 8004226:	d103      	bne.n	8004230 <HAL_DMA_Abort+0x62>
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800422c:	2b00      	cmp	r3, #0
 800422e:	d007      	beq.n	8004240 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	681a      	ldr	r2, [r3, #0]
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f022 0208 	bic.w	r2, r2, #8
 800423e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	681a      	ldr	r2, [r3, #0]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f022 0201 	bic.w	r2, r2, #1
 800424e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004250:	e013      	b.n	800427a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004252:	f7ff fe7b 	bl	8003f4c <HAL_GetTick>
 8004256:	4602      	mov	r2, r0
 8004258:	68bb      	ldr	r3, [r7, #8]
 800425a:	1ad3      	subs	r3, r2, r3
 800425c:	2b05      	cmp	r3, #5
 800425e:	d90c      	bls.n	800427a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2220      	movs	r2, #32
 8004264:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2203      	movs	r2, #3
 800426a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2200      	movs	r2, #0
 8004272:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8004276:	2303      	movs	r3, #3
 8004278:	e015      	b.n	80042a6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f003 0301 	and.w	r3, r3, #1
 8004284:	2b00      	cmp	r3, #0
 8004286:	d1e4      	bne.n	8004252 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800428c:	223f      	movs	r2, #63	@ 0x3f
 800428e:	409a      	lsls	r2, r3
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2201      	movs	r2, #1
 8004298:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2200      	movs	r2, #0
 80042a0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80042a4:	2300      	movs	r3, #0
}
 80042a6:	4618      	mov	r0, r3
 80042a8:	3710      	adds	r7, #16
 80042aa:	46bd      	mov	sp, r7
 80042ac:	bd80      	pop	{r7, pc}

080042ae <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80042ae:	b480      	push	{r7}
 80042b0:	b083      	sub	sp, #12
 80042b2:	af00      	add	r7, sp, #0
 80042b4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80042bc:	b2db      	uxtb	r3, r3
 80042be:	2b02      	cmp	r3, #2
 80042c0:	d004      	beq.n	80042cc <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2280      	movs	r2, #128	@ 0x80
 80042c6:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80042c8:	2301      	movs	r3, #1
 80042ca:	e00c      	b.n	80042e6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2205      	movs	r2, #5
 80042d0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	681a      	ldr	r2, [r3, #0]
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f022 0201 	bic.w	r2, r2, #1
 80042e2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80042e4:	2300      	movs	r3, #0
}
 80042e6:	4618      	mov	r0, r3
 80042e8:	370c      	adds	r7, #12
 80042ea:	46bd      	mov	sp, r7
 80042ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f0:	4770      	bx	lr
	...

080042f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80042f4:	b480      	push	{r7}
 80042f6:	b089      	sub	sp, #36	@ 0x24
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
 80042fc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80042fe:	2300      	movs	r3, #0
 8004300:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004302:	2300      	movs	r3, #0
 8004304:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004306:	2300      	movs	r3, #0
 8004308:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800430a:	2300      	movs	r3, #0
 800430c:	61fb      	str	r3, [r7, #28]
 800430e:	e16b      	b.n	80045e8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004310:	2201      	movs	r2, #1
 8004312:	69fb      	ldr	r3, [r7, #28]
 8004314:	fa02 f303 	lsl.w	r3, r2, r3
 8004318:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	697a      	ldr	r2, [r7, #20]
 8004320:	4013      	ands	r3, r2
 8004322:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004324:	693a      	ldr	r2, [r7, #16]
 8004326:	697b      	ldr	r3, [r7, #20]
 8004328:	429a      	cmp	r2, r3
 800432a:	f040 815a 	bne.w	80045e2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	685b      	ldr	r3, [r3, #4]
 8004332:	f003 0303 	and.w	r3, r3, #3
 8004336:	2b01      	cmp	r3, #1
 8004338:	d005      	beq.n	8004346 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	685b      	ldr	r3, [r3, #4]
 800433e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004342:	2b02      	cmp	r3, #2
 8004344:	d130      	bne.n	80043a8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	689b      	ldr	r3, [r3, #8]
 800434a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800434c:	69fb      	ldr	r3, [r7, #28]
 800434e:	005b      	lsls	r3, r3, #1
 8004350:	2203      	movs	r2, #3
 8004352:	fa02 f303 	lsl.w	r3, r2, r3
 8004356:	43db      	mvns	r3, r3
 8004358:	69ba      	ldr	r2, [r7, #24]
 800435a:	4013      	ands	r3, r2
 800435c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	68da      	ldr	r2, [r3, #12]
 8004362:	69fb      	ldr	r3, [r7, #28]
 8004364:	005b      	lsls	r3, r3, #1
 8004366:	fa02 f303 	lsl.w	r3, r2, r3
 800436a:	69ba      	ldr	r2, [r7, #24]
 800436c:	4313      	orrs	r3, r2
 800436e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	69ba      	ldr	r2, [r7, #24]
 8004374:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	685b      	ldr	r3, [r3, #4]
 800437a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800437c:	2201      	movs	r2, #1
 800437e:	69fb      	ldr	r3, [r7, #28]
 8004380:	fa02 f303 	lsl.w	r3, r2, r3
 8004384:	43db      	mvns	r3, r3
 8004386:	69ba      	ldr	r2, [r7, #24]
 8004388:	4013      	ands	r3, r2
 800438a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	685b      	ldr	r3, [r3, #4]
 8004390:	091b      	lsrs	r3, r3, #4
 8004392:	f003 0201 	and.w	r2, r3, #1
 8004396:	69fb      	ldr	r3, [r7, #28]
 8004398:	fa02 f303 	lsl.w	r3, r2, r3
 800439c:	69ba      	ldr	r2, [r7, #24]
 800439e:	4313      	orrs	r3, r2
 80043a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	69ba      	ldr	r2, [r7, #24]
 80043a6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	685b      	ldr	r3, [r3, #4]
 80043ac:	f003 0303 	and.w	r3, r3, #3
 80043b0:	2b03      	cmp	r3, #3
 80043b2:	d017      	beq.n	80043e4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	68db      	ldr	r3, [r3, #12]
 80043b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80043ba:	69fb      	ldr	r3, [r7, #28]
 80043bc:	005b      	lsls	r3, r3, #1
 80043be:	2203      	movs	r2, #3
 80043c0:	fa02 f303 	lsl.w	r3, r2, r3
 80043c4:	43db      	mvns	r3, r3
 80043c6:	69ba      	ldr	r2, [r7, #24]
 80043c8:	4013      	ands	r3, r2
 80043ca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	689a      	ldr	r2, [r3, #8]
 80043d0:	69fb      	ldr	r3, [r7, #28]
 80043d2:	005b      	lsls	r3, r3, #1
 80043d4:	fa02 f303 	lsl.w	r3, r2, r3
 80043d8:	69ba      	ldr	r2, [r7, #24]
 80043da:	4313      	orrs	r3, r2
 80043dc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	69ba      	ldr	r2, [r7, #24]
 80043e2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	685b      	ldr	r3, [r3, #4]
 80043e8:	f003 0303 	and.w	r3, r3, #3
 80043ec:	2b02      	cmp	r3, #2
 80043ee:	d123      	bne.n	8004438 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80043f0:	69fb      	ldr	r3, [r7, #28]
 80043f2:	08da      	lsrs	r2, r3, #3
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	3208      	adds	r2, #8
 80043f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80043fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80043fe:	69fb      	ldr	r3, [r7, #28]
 8004400:	f003 0307 	and.w	r3, r3, #7
 8004404:	009b      	lsls	r3, r3, #2
 8004406:	220f      	movs	r2, #15
 8004408:	fa02 f303 	lsl.w	r3, r2, r3
 800440c:	43db      	mvns	r3, r3
 800440e:	69ba      	ldr	r2, [r7, #24]
 8004410:	4013      	ands	r3, r2
 8004412:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	691a      	ldr	r2, [r3, #16]
 8004418:	69fb      	ldr	r3, [r7, #28]
 800441a:	f003 0307 	and.w	r3, r3, #7
 800441e:	009b      	lsls	r3, r3, #2
 8004420:	fa02 f303 	lsl.w	r3, r2, r3
 8004424:	69ba      	ldr	r2, [r7, #24]
 8004426:	4313      	orrs	r3, r2
 8004428:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800442a:	69fb      	ldr	r3, [r7, #28]
 800442c:	08da      	lsrs	r2, r3, #3
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	3208      	adds	r2, #8
 8004432:	69b9      	ldr	r1, [r7, #24]
 8004434:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800443e:	69fb      	ldr	r3, [r7, #28]
 8004440:	005b      	lsls	r3, r3, #1
 8004442:	2203      	movs	r2, #3
 8004444:	fa02 f303 	lsl.w	r3, r2, r3
 8004448:	43db      	mvns	r3, r3
 800444a:	69ba      	ldr	r2, [r7, #24]
 800444c:	4013      	ands	r3, r2
 800444e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	f003 0203 	and.w	r2, r3, #3
 8004458:	69fb      	ldr	r3, [r7, #28]
 800445a:	005b      	lsls	r3, r3, #1
 800445c:	fa02 f303 	lsl.w	r3, r2, r3
 8004460:	69ba      	ldr	r2, [r7, #24]
 8004462:	4313      	orrs	r3, r2
 8004464:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	69ba      	ldr	r2, [r7, #24]
 800446a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	685b      	ldr	r3, [r3, #4]
 8004470:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004474:	2b00      	cmp	r3, #0
 8004476:	f000 80b4 	beq.w	80045e2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800447a:	2300      	movs	r3, #0
 800447c:	60fb      	str	r3, [r7, #12]
 800447e:	4b60      	ldr	r3, [pc, #384]	@ (8004600 <HAL_GPIO_Init+0x30c>)
 8004480:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004482:	4a5f      	ldr	r2, [pc, #380]	@ (8004600 <HAL_GPIO_Init+0x30c>)
 8004484:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004488:	6453      	str	r3, [r2, #68]	@ 0x44
 800448a:	4b5d      	ldr	r3, [pc, #372]	@ (8004600 <HAL_GPIO_Init+0x30c>)
 800448c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800448e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004492:	60fb      	str	r3, [r7, #12]
 8004494:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004496:	4a5b      	ldr	r2, [pc, #364]	@ (8004604 <HAL_GPIO_Init+0x310>)
 8004498:	69fb      	ldr	r3, [r7, #28]
 800449a:	089b      	lsrs	r3, r3, #2
 800449c:	3302      	adds	r3, #2
 800449e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80044a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80044a4:	69fb      	ldr	r3, [r7, #28]
 80044a6:	f003 0303 	and.w	r3, r3, #3
 80044aa:	009b      	lsls	r3, r3, #2
 80044ac:	220f      	movs	r2, #15
 80044ae:	fa02 f303 	lsl.w	r3, r2, r3
 80044b2:	43db      	mvns	r3, r3
 80044b4:	69ba      	ldr	r2, [r7, #24]
 80044b6:	4013      	ands	r3, r2
 80044b8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	4a52      	ldr	r2, [pc, #328]	@ (8004608 <HAL_GPIO_Init+0x314>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d02b      	beq.n	800451a <HAL_GPIO_Init+0x226>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	4a51      	ldr	r2, [pc, #324]	@ (800460c <HAL_GPIO_Init+0x318>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d025      	beq.n	8004516 <HAL_GPIO_Init+0x222>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	4a50      	ldr	r2, [pc, #320]	@ (8004610 <HAL_GPIO_Init+0x31c>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d01f      	beq.n	8004512 <HAL_GPIO_Init+0x21e>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	4a4f      	ldr	r2, [pc, #316]	@ (8004614 <HAL_GPIO_Init+0x320>)
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d019      	beq.n	800450e <HAL_GPIO_Init+0x21a>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	4a4e      	ldr	r2, [pc, #312]	@ (8004618 <HAL_GPIO_Init+0x324>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d013      	beq.n	800450a <HAL_GPIO_Init+0x216>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	4a4d      	ldr	r2, [pc, #308]	@ (800461c <HAL_GPIO_Init+0x328>)
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d00d      	beq.n	8004506 <HAL_GPIO_Init+0x212>
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	4a4c      	ldr	r2, [pc, #304]	@ (8004620 <HAL_GPIO_Init+0x32c>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d007      	beq.n	8004502 <HAL_GPIO_Init+0x20e>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	4a4b      	ldr	r2, [pc, #300]	@ (8004624 <HAL_GPIO_Init+0x330>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d101      	bne.n	80044fe <HAL_GPIO_Init+0x20a>
 80044fa:	2307      	movs	r3, #7
 80044fc:	e00e      	b.n	800451c <HAL_GPIO_Init+0x228>
 80044fe:	2308      	movs	r3, #8
 8004500:	e00c      	b.n	800451c <HAL_GPIO_Init+0x228>
 8004502:	2306      	movs	r3, #6
 8004504:	e00a      	b.n	800451c <HAL_GPIO_Init+0x228>
 8004506:	2305      	movs	r3, #5
 8004508:	e008      	b.n	800451c <HAL_GPIO_Init+0x228>
 800450a:	2304      	movs	r3, #4
 800450c:	e006      	b.n	800451c <HAL_GPIO_Init+0x228>
 800450e:	2303      	movs	r3, #3
 8004510:	e004      	b.n	800451c <HAL_GPIO_Init+0x228>
 8004512:	2302      	movs	r3, #2
 8004514:	e002      	b.n	800451c <HAL_GPIO_Init+0x228>
 8004516:	2301      	movs	r3, #1
 8004518:	e000      	b.n	800451c <HAL_GPIO_Init+0x228>
 800451a:	2300      	movs	r3, #0
 800451c:	69fa      	ldr	r2, [r7, #28]
 800451e:	f002 0203 	and.w	r2, r2, #3
 8004522:	0092      	lsls	r2, r2, #2
 8004524:	4093      	lsls	r3, r2
 8004526:	69ba      	ldr	r2, [r7, #24]
 8004528:	4313      	orrs	r3, r2
 800452a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800452c:	4935      	ldr	r1, [pc, #212]	@ (8004604 <HAL_GPIO_Init+0x310>)
 800452e:	69fb      	ldr	r3, [r7, #28]
 8004530:	089b      	lsrs	r3, r3, #2
 8004532:	3302      	adds	r3, #2
 8004534:	69ba      	ldr	r2, [r7, #24]
 8004536:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800453a:	4b3b      	ldr	r3, [pc, #236]	@ (8004628 <HAL_GPIO_Init+0x334>)
 800453c:	689b      	ldr	r3, [r3, #8]
 800453e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004540:	693b      	ldr	r3, [r7, #16]
 8004542:	43db      	mvns	r3, r3
 8004544:	69ba      	ldr	r2, [r7, #24]
 8004546:	4013      	ands	r3, r2
 8004548:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	685b      	ldr	r3, [r3, #4]
 800454e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004552:	2b00      	cmp	r3, #0
 8004554:	d003      	beq.n	800455e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004556:	69ba      	ldr	r2, [r7, #24]
 8004558:	693b      	ldr	r3, [r7, #16]
 800455a:	4313      	orrs	r3, r2
 800455c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800455e:	4a32      	ldr	r2, [pc, #200]	@ (8004628 <HAL_GPIO_Init+0x334>)
 8004560:	69bb      	ldr	r3, [r7, #24]
 8004562:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004564:	4b30      	ldr	r3, [pc, #192]	@ (8004628 <HAL_GPIO_Init+0x334>)
 8004566:	68db      	ldr	r3, [r3, #12]
 8004568:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800456a:	693b      	ldr	r3, [r7, #16]
 800456c:	43db      	mvns	r3, r3
 800456e:	69ba      	ldr	r2, [r7, #24]
 8004570:	4013      	ands	r3, r2
 8004572:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	685b      	ldr	r3, [r3, #4]
 8004578:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800457c:	2b00      	cmp	r3, #0
 800457e:	d003      	beq.n	8004588 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004580:	69ba      	ldr	r2, [r7, #24]
 8004582:	693b      	ldr	r3, [r7, #16]
 8004584:	4313      	orrs	r3, r2
 8004586:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004588:	4a27      	ldr	r2, [pc, #156]	@ (8004628 <HAL_GPIO_Init+0x334>)
 800458a:	69bb      	ldr	r3, [r7, #24]
 800458c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800458e:	4b26      	ldr	r3, [pc, #152]	@ (8004628 <HAL_GPIO_Init+0x334>)
 8004590:	685b      	ldr	r3, [r3, #4]
 8004592:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004594:	693b      	ldr	r3, [r7, #16]
 8004596:	43db      	mvns	r3, r3
 8004598:	69ba      	ldr	r2, [r7, #24]
 800459a:	4013      	ands	r3, r2
 800459c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	685b      	ldr	r3, [r3, #4]
 80045a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d003      	beq.n	80045b2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80045aa:	69ba      	ldr	r2, [r7, #24]
 80045ac:	693b      	ldr	r3, [r7, #16]
 80045ae:	4313      	orrs	r3, r2
 80045b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80045b2:	4a1d      	ldr	r2, [pc, #116]	@ (8004628 <HAL_GPIO_Init+0x334>)
 80045b4:	69bb      	ldr	r3, [r7, #24]
 80045b6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80045b8:	4b1b      	ldr	r3, [pc, #108]	@ (8004628 <HAL_GPIO_Init+0x334>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80045be:	693b      	ldr	r3, [r7, #16]
 80045c0:	43db      	mvns	r3, r3
 80045c2:	69ba      	ldr	r2, [r7, #24]
 80045c4:	4013      	ands	r3, r2
 80045c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	685b      	ldr	r3, [r3, #4]
 80045cc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d003      	beq.n	80045dc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80045d4:	69ba      	ldr	r2, [r7, #24]
 80045d6:	693b      	ldr	r3, [r7, #16]
 80045d8:	4313      	orrs	r3, r2
 80045da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80045dc:	4a12      	ldr	r2, [pc, #72]	@ (8004628 <HAL_GPIO_Init+0x334>)
 80045de:	69bb      	ldr	r3, [r7, #24]
 80045e0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80045e2:	69fb      	ldr	r3, [r7, #28]
 80045e4:	3301      	adds	r3, #1
 80045e6:	61fb      	str	r3, [r7, #28]
 80045e8:	69fb      	ldr	r3, [r7, #28]
 80045ea:	2b0f      	cmp	r3, #15
 80045ec:	f67f ae90 	bls.w	8004310 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80045f0:	bf00      	nop
 80045f2:	bf00      	nop
 80045f4:	3724      	adds	r7, #36	@ 0x24
 80045f6:	46bd      	mov	sp, r7
 80045f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fc:	4770      	bx	lr
 80045fe:	bf00      	nop
 8004600:	40023800 	.word	0x40023800
 8004604:	40013800 	.word	0x40013800
 8004608:	40020000 	.word	0x40020000
 800460c:	40020400 	.word	0x40020400
 8004610:	40020800 	.word	0x40020800
 8004614:	40020c00 	.word	0x40020c00
 8004618:	40021000 	.word	0x40021000
 800461c:	40021400 	.word	0x40021400
 8004620:	40021800 	.word	0x40021800
 8004624:	40021c00 	.word	0x40021c00
 8004628:	40013c00 	.word	0x40013c00

0800462c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800462c:	b480      	push	{r7}
 800462e:	b085      	sub	sp, #20
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
 8004634:	460b      	mov	r3, r1
 8004636:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	691a      	ldr	r2, [r3, #16]
 800463c:	887b      	ldrh	r3, [r7, #2]
 800463e:	4013      	ands	r3, r2
 8004640:	2b00      	cmp	r3, #0
 8004642:	d002      	beq.n	800464a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004644:	2301      	movs	r3, #1
 8004646:	73fb      	strb	r3, [r7, #15]
 8004648:	e001      	b.n	800464e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800464a:	2300      	movs	r3, #0
 800464c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800464e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004650:	4618      	mov	r0, r3
 8004652:	3714      	adds	r7, #20
 8004654:	46bd      	mov	sp, r7
 8004656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465a:	4770      	bx	lr

0800465c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800465c:	b480      	push	{r7}
 800465e:	b083      	sub	sp, #12
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
 8004664:	460b      	mov	r3, r1
 8004666:	807b      	strh	r3, [r7, #2]
 8004668:	4613      	mov	r3, r2
 800466a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800466c:	787b      	ldrb	r3, [r7, #1]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d003      	beq.n	800467a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004672:	887a      	ldrh	r2, [r7, #2]
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004678:	e003      	b.n	8004682 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800467a:	887b      	ldrh	r3, [r7, #2]
 800467c:	041a      	lsls	r2, r3, #16
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	619a      	str	r2, [r3, #24]
}
 8004682:	bf00      	nop
 8004684:	370c      	adds	r7, #12
 8004686:	46bd      	mov	sp, r7
 8004688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468c:	4770      	bx	lr

0800468e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800468e:	b480      	push	{r7}
 8004690:	b085      	sub	sp, #20
 8004692:	af00      	add	r7, sp, #0
 8004694:	6078      	str	r0, [r7, #4]
 8004696:	460b      	mov	r3, r1
 8004698:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	695b      	ldr	r3, [r3, #20]
 800469e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80046a0:	887a      	ldrh	r2, [r7, #2]
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	4013      	ands	r3, r2
 80046a6:	041a      	lsls	r2, r3, #16
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	43d9      	mvns	r1, r3
 80046ac:	887b      	ldrh	r3, [r7, #2]
 80046ae:	400b      	ands	r3, r1
 80046b0:	431a      	orrs	r2, r3
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	619a      	str	r2, [r3, #24]
}
 80046b6:	bf00      	nop
 80046b8:	3714      	adds	r7, #20
 80046ba:	46bd      	mov	sp, r7
 80046bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c0:	4770      	bx	lr
	...

080046c4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b082      	sub	sp, #8
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	4603      	mov	r3, r0
 80046cc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80046ce:	4b08      	ldr	r3, [pc, #32]	@ (80046f0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80046d0:	695a      	ldr	r2, [r3, #20]
 80046d2:	88fb      	ldrh	r3, [r7, #6]
 80046d4:	4013      	ands	r3, r2
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d006      	beq.n	80046e8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80046da:	4a05      	ldr	r2, [pc, #20]	@ (80046f0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80046dc:	88fb      	ldrh	r3, [r7, #6]
 80046de:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80046e0:	88fb      	ldrh	r3, [r7, #6]
 80046e2:	4618      	mov	r0, r3
 80046e4:	f7fe f9a2 	bl	8002a2c <HAL_GPIO_EXTI_Callback>
  }
}
 80046e8:	bf00      	nop
 80046ea:	3708      	adds	r7, #8
 80046ec:	46bd      	mov	sp, r7
 80046ee:	bd80      	pop	{r7, pc}
 80046f0:	40013c00 	.word	0x40013c00

080046f4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b086      	sub	sp, #24
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d101      	bne.n	8004706 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004702:	2301      	movs	r3, #1
 8004704:	e267      	b.n	8004bd6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f003 0301 	and.w	r3, r3, #1
 800470e:	2b00      	cmp	r3, #0
 8004710:	d075      	beq.n	80047fe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004712:	4b88      	ldr	r3, [pc, #544]	@ (8004934 <HAL_RCC_OscConfig+0x240>)
 8004714:	689b      	ldr	r3, [r3, #8]
 8004716:	f003 030c 	and.w	r3, r3, #12
 800471a:	2b04      	cmp	r3, #4
 800471c:	d00c      	beq.n	8004738 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800471e:	4b85      	ldr	r3, [pc, #532]	@ (8004934 <HAL_RCC_OscConfig+0x240>)
 8004720:	689b      	ldr	r3, [r3, #8]
 8004722:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004726:	2b08      	cmp	r3, #8
 8004728:	d112      	bne.n	8004750 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800472a:	4b82      	ldr	r3, [pc, #520]	@ (8004934 <HAL_RCC_OscConfig+0x240>)
 800472c:	685b      	ldr	r3, [r3, #4]
 800472e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004732:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004736:	d10b      	bne.n	8004750 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004738:	4b7e      	ldr	r3, [pc, #504]	@ (8004934 <HAL_RCC_OscConfig+0x240>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004740:	2b00      	cmp	r3, #0
 8004742:	d05b      	beq.n	80047fc <HAL_RCC_OscConfig+0x108>
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	685b      	ldr	r3, [r3, #4]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d157      	bne.n	80047fc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800474c:	2301      	movs	r3, #1
 800474e:	e242      	b.n	8004bd6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	685b      	ldr	r3, [r3, #4]
 8004754:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004758:	d106      	bne.n	8004768 <HAL_RCC_OscConfig+0x74>
 800475a:	4b76      	ldr	r3, [pc, #472]	@ (8004934 <HAL_RCC_OscConfig+0x240>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4a75      	ldr	r2, [pc, #468]	@ (8004934 <HAL_RCC_OscConfig+0x240>)
 8004760:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004764:	6013      	str	r3, [r2, #0]
 8004766:	e01d      	b.n	80047a4 <HAL_RCC_OscConfig+0xb0>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	685b      	ldr	r3, [r3, #4]
 800476c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004770:	d10c      	bne.n	800478c <HAL_RCC_OscConfig+0x98>
 8004772:	4b70      	ldr	r3, [pc, #448]	@ (8004934 <HAL_RCC_OscConfig+0x240>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4a6f      	ldr	r2, [pc, #444]	@ (8004934 <HAL_RCC_OscConfig+0x240>)
 8004778:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800477c:	6013      	str	r3, [r2, #0]
 800477e:	4b6d      	ldr	r3, [pc, #436]	@ (8004934 <HAL_RCC_OscConfig+0x240>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	4a6c      	ldr	r2, [pc, #432]	@ (8004934 <HAL_RCC_OscConfig+0x240>)
 8004784:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004788:	6013      	str	r3, [r2, #0]
 800478a:	e00b      	b.n	80047a4 <HAL_RCC_OscConfig+0xb0>
 800478c:	4b69      	ldr	r3, [pc, #420]	@ (8004934 <HAL_RCC_OscConfig+0x240>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4a68      	ldr	r2, [pc, #416]	@ (8004934 <HAL_RCC_OscConfig+0x240>)
 8004792:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004796:	6013      	str	r3, [r2, #0]
 8004798:	4b66      	ldr	r3, [pc, #408]	@ (8004934 <HAL_RCC_OscConfig+0x240>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4a65      	ldr	r2, [pc, #404]	@ (8004934 <HAL_RCC_OscConfig+0x240>)
 800479e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80047a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	685b      	ldr	r3, [r3, #4]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d013      	beq.n	80047d4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047ac:	f7ff fbce 	bl	8003f4c <HAL_GetTick>
 80047b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047b2:	e008      	b.n	80047c6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80047b4:	f7ff fbca 	bl	8003f4c <HAL_GetTick>
 80047b8:	4602      	mov	r2, r0
 80047ba:	693b      	ldr	r3, [r7, #16]
 80047bc:	1ad3      	subs	r3, r2, r3
 80047be:	2b64      	cmp	r3, #100	@ 0x64
 80047c0:	d901      	bls.n	80047c6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80047c2:	2303      	movs	r3, #3
 80047c4:	e207      	b.n	8004bd6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047c6:	4b5b      	ldr	r3, [pc, #364]	@ (8004934 <HAL_RCC_OscConfig+0x240>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d0f0      	beq.n	80047b4 <HAL_RCC_OscConfig+0xc0>
 80047d2:	e014      	b.n	80047fe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047d4:	f7ff fbba 	bl	8003f4c <HAL_GetTick>
 80047d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80047da:	e008      	b.n	80047ee <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80047dc:	f7ff fbb6 	bl	8003f4c <HAL_GetTick>
 80047e0:	4602      	mov	r2, r0
 80047e2:	693b      	ldr	r3, [r7, #16]
 80047e4:	1ad3      	subs	r3, r2, r3
 80047e6:	2b64      	cmp	r3, #100	@ 0x64
 80047e8:	d901      	bls.n	80047ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80047ea:	2303      	movs	r3, #3
 80047ec:	e1f3      	b.n	8004bd6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80047ee:	4b51      	ldr	r3, [pc, #324]	@ (8004934 <HAL_RCC_OscConfig+0x240>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d1f0      	bne.n	80047dc <HAL_RCC_OscConfig+0xe8>
 80047fa:	e000      	b.n	80047fe <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f003 0302 	and.w	r3, r3, #2
 8004806:	2b00      	cmp	r3, #0
 8004808:	d063      	beq.n	80048d2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800480a:	4b4a      	ldr	r3, [pc, #296]	@ (8004934 <HAL_RCC_OscConfig+0x240>)
 800480c:	689b      	ldr	r3, [r3, #8]
 800480e:	f003 030c 	and.w	r3, r3, #12
 8004812:	2b00      	cmp	r3, #0
 8004814:	d00b      	beq.n	800482e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004816:	4b47      	ldr	r3, [pc, #284]	@ (8004934 <HAL_RCC_OscConfig+0x240>)
 8004818:	689b      	ldr	r3, [r3, #8]
 800481a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800481e:	2b08      	cmp	r3, #8
 8004820:	d11c      	bne.n	800485c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004822:	4b44      	ldr	r3, [pc, #272]	@ (8004934 <HAL_RCC_OscConfig+0x240>)
 8004824:	685b      	ldr	r3, [r3, #4]
 8004826:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800482a:	2b00      	cmp	r3, #0
 800482c:	d116      	bne.n	800485c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800482e:	4b41      	ldr	r3, [pc, #260]	@ (8004934 <HAL_RCC_OscConfig+0x240>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f003 0302 	and.w	r3, r3, #2
 8004836:	2b00      	cmp	r3, #0
 8004838:	d005      	beq.n	8004846 <HAL_RCC_OscConfig+0x152>
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	68db      	ldr	r3, [r3, #12]
 800483e:	2b01      	cmp	r3, #1
 8004840:	d001      	beq.n	8004846 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004842:	2301      	movs	r3, #1
 8004844:	e1c7      	b.n	8004bd6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004846:	4b3b      	ldr	r3, [pc, #236]	@ (8004934 <HAL_RCC_OscConfig+0x240>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	691b      	ldr	r3, [r3, #16]
 8004852:	00db      	lsls	r3, r3, #3
 8004854:	4937      	ldr	r1, [pc, #220]	@ (8004934 <HAL_RCC_OscConfig+0x240>)
 8004856:	4313      	orrs	r3, r2
 8004858:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800485a:	e03a      	b.n	80048d2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	68db      	ldr	r3, [r3, #12]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d020      	beq.n	80048a6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004864:	4b34      	ldr	r3, [pc, #208]	@ (8004938 <HAL_RCC_OscConfig+0x244>)
 8004866:	2201      	movs	r2, #1
 8004868:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800486a:	f7ff fb6f 	bl	8003f4c <HAL_GetTick>
 800486e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004870:	e008      	b.n	8004884 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004872:	f7ff fb6b 	bl	8003f4c <HAL_GetTick>
 8004876:	4602      	mov	r2, r0
 8004878:	693b      	ldr	r3, [r7, #16]
 800487a:	1ad3      	subs	r3, r2, r3
 800487c:	2b02      	cmp	r3, #2
 800487e:	d901      	bls.n	8004884 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004880:	2303      	movs	r3, #3
 8004882:	e1a8      	b.n	8004bd6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004884:	4b2b      	ldr	r3, [pc, #172]	@ (8004934 <HAL_RCC_OscConfig+0x240>)
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f003 0302 	and.w	r3, r3, #2
 800488c:	2b00      	cmp	r3, #0
 800488e:	d0f0      	beq.n	8004872 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004890:	4b28      	ldr	r3, [pc, #160]	@ (8004934 <HAL_RCC_OscConfig+0x240>)
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	691b      	ldr	r3, [r3, #16]
 800489c:	00db      	lsls	r3, r3, #3
 800489e:	4925      	ldr	r1, [pc, #148]	@ (8004934 <HAL_RCC_OscConfig+0x240>)
 80048a0:	4313      	orrs	r3, r2
 80048a2:	600b      	str	r3, [r1, #0]
 80048a4:	e015      	b.n	80048d2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80048a6:	4b24      	ldr	r3, [pc, #144]	@ (8004938 <HAL_RCC_OscConfig+0x244>)
 80048a8:	2200      	movs	r2, #0
 80048aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048ac:	f7ff fb4e 	bl	8003f4c <HAL_GetTick>
 80048b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80048b2:	e008      	b.n	80048c6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80048b4:	f7ff fb4a 	bl	8003f4c <HAL_GetTick>
 80048b8:	4602      	mov	r2, r0
 80048ba:	693b      	ldr	r3, [r7, #16]
 80048bc:	1ad3      	subs	r3, r2, r3
 80048be:	2b02      	cmp	r3, #2
 80048c0:	d901      	bls.n	80048c6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80048c2:	2303      	movs	r3, #3
 80048c4:	e187      	b.n	8004bd6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80048c6:	4b1b      	ldr	r3, [pc, #108]	@ (8004934 <HAL_RCC_OscConfig+0x240>)
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f003 0302 	and.w	r3, r3, #2
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d1f0      	bne.n	80048b4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f003 0308 	and.w	r3, r3, #8
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d036      	beq.n	800494c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	695b      	ldr	r3, [r3, #20]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d016      	beq.n	8004914 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80048e6:	4b15      	ldr	r3, [pc, #84]	@ (800493c <HAL_RCC_OscConfig+0x248>)
 80048e8:	2201      	movs	r2, #1
 80048ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048ec:	f7ff fb2e 	bl	8003f4c <HAL_GetTick>
 80048f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80048f2:	e008      	b.n	8004906 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80048f4:	f7ff fb2a 	bl	8003f4c <HAL_GetTick>
 80048f8:	4602      	mov	r2, r0
 80048fa:	693b      	ldr	r3, [r7, #16]
 80048fc:	1ad3      	subs	r3, r2, r3
 80048fe:	2b02      	cmp	r3, #2
 8004900:	d901      	bls.n	8004906 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004902:	2303      	movs	r3, #3
 8004904:	e167      	b.n	8004bd6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004906:	4b0b      	ldr	r3, [pc, #44]	@ (8004934 <HAL_RCC_OscConfig+0x240>)
 8004908:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800490a:	f003 0302 	and.w	r3, r3, #2
 800490e:	2b00      	cmp	r3, #0
 8004910:	d0f0      	beq.n	80048f4 <HAL_RCC_OscConfig+0x200>
 8004912:	e01b      	b.n	800494c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004914:	4b09      	ldr	r3, [pc, #36]	@ (800493c <HAL_RCC_OscConfig+0x248>)
 8004916:	2200      	movs	r2, #0
 8004918:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800491a:	f7ff fb17 	bl	8003f4c <HAL_GetTick>
 800491e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004920:	e00e      	b.n	8004940 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004922:	f7ff fb13 	bl	8003f4c <HAL_GetTick>
 8004926:	4602      	mov	r2, r0
 8004928:	693b      	ldr	r3, [r7, #16]
 800492a:	1ad3      	subs	r3, r2, r3
 800492c:	2b02      	cmp	r3, #2
 800492e:	d907      	bls.n	8004940 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004930:	2303      	movs	r3, #3
 8004932:	e150      	b.n	8004bd6 <HAL_RCC_OscConfig+0x4e2>
 8004934:	40023800 	.word	0x40023800
 8004938:	42470000 	.word	0x42470000
 800493c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004940:	4b88      	ldr	r3, [pc, #544]	@ (8004b64 <HAL_RCC_OscConfig+0x470>)
 8004942:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004944:	f003 0302 	and.w	r3, r3, #2
 8004948:	2b00      	cmp	r3, #0
 800494a:	d1ea      	bne.n	8004922 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f003 0304 	and.w	r3, r3, #4
 8004954:	2b00      	cmp	r3, #0
 8004956:	f000 8097 	beq.w	8004a88 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800495a:	2300      	movs	r3, #0
 800495c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800495e:	4b81      	ldr	r3, [pc, #516]	@ (8004b64 <HAL_RCC_OscConfig+0x470>)
 8004960:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004962:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004966:	2b00      	cmp	r3, #0
 8004968:	d10f      	bne.n	800498a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800496a:	2300      	movs	r3, #0
 800496c:	60bb      	str	r3, [r7, #8]
 800496e:	4b7d      	ldr	r3, [pc, #500]	@ (8004b64 <HAL_RCC_OscConfig+0x470>)
 8004970:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004972:	4a7c      	ldr	r2, [pc, #496]	@ (8004b64 <HAL_RCC_OscConfig+0x470>)
 8004974:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004978:	6413      	str	r3, [r2, #64]	@ 0x40
 800497a:	4b7a      	ldr	r3, [pc, #488]	@ (8004b64 <HAL_RCC_OscConfig+0x470>)
 800497c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800497e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004982:	60bb      	str	r3, [r7, #8]
 8004984:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004986:	2301      	movs	r3, #1
 8004988:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800498a:	4b77      	ldr	r3, [pc, #476]	@ (8004b68 <HAL_RCC_OscConfig+0x474>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004992:	2b00      	cmp	r3, #0
 8004994:	d118      	bne.n	80049c8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004996:	4b74      	ldr	r3, [pc, #464]	@ (8004b68 <HAL_RCC_OscConfig+0x474>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4a73      	ldr	r2, [pc, #460]	@ (8004b68 <HAL_RCC_OscConfig+0x474>)
 800499c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80049a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80049a2:	f7ff fad3 	bl	8003f4c <HAL_GetTick>
 80049a6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049a8:	e008      	b.n	80049bc <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80049aa:	f7ff facf 	bl	8003f4c <HAL_GetTick>
 80049ae:	4602      	mov	r2, r0
 80049b0:	693b      	ldr	r3, [r7, #16]
 80049b2:	1ad3      	subs	r3, r2, r3
 80049b4:	2b02      	cmp	r3, #2
 80049b6:	d901      	bls.n	80049bc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80049b8:	2303      	movs	r3, #3
 80049ba:	e10c      	b.n	8004bd6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049bc:	4b6a      	ldr	r3, [pc, #424]	@ (8004b68 <HAL_RCC_OscConfig+0x474>)
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d0f0      	beq.n	80049aa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	689b      	ldr	r3, [r3, #8]
 80049cc:	2b01      	cmp	r3, #1
 80049ce:	d106      	bne.n	80049de <HAL_RCC_OscConfig+0x2ea>
 80049d0:	4b64      	ldr	r3, [pc, #400]	@ (8004b64 <HAL_RCC_OscConfig+0x470>)
 80049d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049d4:	4a63      	ldr	r2, [pc, #396]	@ (8004b64 <HAL_RCC_OscConfig+0x470>)
 80049d6:	f043 0301 	orr.w	r3, r3, #1
 80049da:	6713      	str	r3, [r2, #112]	@ 0x70
 80049dc:	e01c      	b.n	8004a18 <HAL_RCC_OscConfig+0x324>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	689b      	ldr	r3, [r3, #8]
 80049e2:	2b05      	cmp	r3, #5
 80049e4:	d10c      	bne.n	8004a00 <HAL_RCC_OscConfig+0x30c>
 80049e6:	4b5f      	ldr	r3, [pc, #380]	@ (8004b64 <HAL_RCC_OscConfig+0x470>)
 80049e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049ea:	4a5e      	ldr	r2, [pc, #376]	@ (8004b64 <HAL_RCC_OscConfig+0x470>)
 80049ec:	f043 0304 	orr.w	r3, r3, #4
 80049f0:	6713      	str	r3, [r2, #112]	@ 0x70
 80049f2:	4b5c      	ldr	r3, [pc, #368]	@ (8004b64 <HAL_RCC_OscConfig+0x470>)
 80049f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049f6:	4a5b      	ldr	r2, [pc, #364]	@ (8004b64 <HAL_RCC_OscConfig+0x470>)
 80049f8:	f043 0301 	orr.w	r3, r3, #1
 80049fc:	6713      	str	r3, [r2, #112]	@ 0x70
 80049fe:	e00b      	b.n	8004a18 <HAL_RCC_OscConfig+0x324>
 8004a00:	4b58      	ldr	r3, [pc, #352]	@ (8004b64 <HAL_RCC_OscConfig+0x470>)
 8004a02:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a04:	4a57      	ldr	r2, [pc, #348]	@ (8004b64 <HAL_RCC_OscConfig+0x470>)
 8004a06:	f023 0301 	bic.w	r3, r3, #1
 8004a0a:	6713      	str	r3, [r2, #112]	@ 0x70
 8004a0c:	4b55      	ldr	r3, [pc, #340]	@ (8004b64 <HAL_RCC_OscConfig+0x470>)
 8004a0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a10:	4a54      	ldr	r2, [pc, #336]	@ (8004b64 <HAL_RCC_OscConfig+0x470>)
 8004a12:	f023 0304 	bic.w	r3, r3, #4
 8004a16:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	689b      	ldr	r3, [r3, #8]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d015      	beq.n	8004a4c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a20:	f7ff fa94 	bl	8003f4c <HAL_GetTick>
 8004a24:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a26:	e00a      	b.n	8004a3e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a28:	f7ff fa90 	bl	8003f4c <HAL_GetTick>
 8004a2c:	4602      	mov	r2, r0
 8004a2e:	693b      	ldr	r3, [r7, #16]
 8004a30:	1ad3      	subs	r3, r2, r3
 8004a32:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d901      	bls.n	8004a3e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004a3a:	2303      	movs	r3, #3
 8004a3c:	e0cb      	b.n	8004bd6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a3e:	4b49      	ldr	r3, [pc, #292]	@ (8004b64 <HAL_RCC_OscConfig+0x470>)
 8004a40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a42:	f003 0302 	and.w	r3, r3, #2
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d0ee      	beq.n	8004a28 <HAL_RCC_OscConfig+0x334>
 8004a4a:	e014      	b.n	8004a76 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a4c:	f7ff fa7e 	bl	8003f4c <HAL_GetTick>
 8004a50:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a52:	e00a      	b.n	8004a6a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a54:	f7ff fa7a 	bl	8003f4c <HAL_GetTick>
 8004a58:	4602      	mov	r2, r0
 8004a5a:	693b      	ldr	r3, [r7, #16]
 8004a5c:	1ad3      	subs	r3, r2, r3
 8004a5e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d901      	bls.n	8004a6a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004a66:	2303      	movs	r3, #3
 8004a68:	e0b5      	b.n	8004bd6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a6a:	4b3e      	ldr	r3, [pc, #248]	@ (8004b64 <HAL_RCC_OscConfig+0x470>)
 8004a6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a6e:	f003 0302 	and.w	r3, r3, #2
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d1ee      	bne.n	8004a54 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004a76:	7dfb      	ldrb	r3, [r7, #23]
 8004a78:	2b01      	cmp	r3, #1
 8004a7a:	d105      	bne.n	8004a88 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a7c:	4b39      	ldr	r3, [pc, #228]	@ (8004b64 <HAL_RCC_OscConfig+0x470>)
 8004a7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a80:	4a38      	ldr	r2, [pc, #224]	@ (8004b64 <HAL_RCC_OscConfig+0x470>)
 8004a82:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004a86:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	699b      	ldr	r3, [r3, #24]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	f000 80a1 	beq.w	8004bd4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004a92:	4b34      	ldr	r3, [pc, #208]	@ (8004b64 <HAL_RCC_OscConfig+0x470>)
 8004a94:	689b      	ldr	r3, [r3, #8]
 8004a96:	f003 030c 	and.w	r3, r3, #12
 8004a9a:	2b08      	cmp	r3, #8
 8004a9c:	d05c      	beq.n	8004b58 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	699b      	ldr	r3, [r3, #24]
 8004aa2:	2b02      	cmp	r3, #2
 8004aa4:	d141      	bne.n	8004b2a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004aa6:	4b31      	ldr	r3, [pc, #196]	@ (8004b6c <HAL_RCC_OscConfig+0x478>)
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004aac:	f7ff fa4e 	bl	8003f4c <HAL_GetTick>
 8004ab0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ab2:	e008      	b.n	8004ac6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ab4:	f7ff fa4a 	bl	8003f4c <HAL_GetTick>
 8004ab8:	4602      	mov	r2, r0
 8004aba:	693b      	ldr	r3, [r7, #16]
 8004abc:	1ad3      	subs	r3, r2, r3
 8004abe:	2b02      	cmp	r3, #2
 8004ac0:	d901      	bls.n	8004ac6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004ac2:	2303      	movs	r3, #3
 8004ac4:	e087      	b.n	8004bd6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ac6:	4b27      	ldr	r3, [pc, #156]	@ (8004b64 <HAL_RCC_OscConfig+0x470>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d1f0      	bne.n	8004ab4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	69da      	ldr	r2, [r3, #28]
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6a1b      	ldr	r3, [r3, #32]
 8004ada:	431a      	orrs	r2, r3
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ae0:	019b      	lsls	r3, r3, #6
 8004ae2:	431a      	orrs	r2, r3
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ae8:	085b      	lsrs	r3, r3, #1
 8004aea:	3b01      	subs	r3, #1
 8004aec:	041b      	lsls	r3, r3, #16
 8004aee:	431a      	orrs	r2, r3
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004af4:	061b      	lsls	r3, r3, #24
 8004af6:	491b      	ldr	r1, [pc, #108]	@ (8004b64 <HAL_RCC_OscConfig+0x470>)
 8004af8:	4313      	orrs	r3, r2
 8004afa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004afc:	4b1b      	ldr	r3, [pc, #108]	@ (8004b6c <HAL_RCC_OscConfig+0x478>)
 8004afe:	2201      	movs	r2, #1
 8004b00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b02:	f7ff fa23 	bl	8003f4c <HAL_GetTick>
 8004b06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b08:	e008      	b.n	8004b1c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b0a:	f7ff fa1f 	bl	8003f4c <HAL_GetTick>
 8004b0e:	4602      	mov	r2, r0
 8004b10:	693b      	ldr	r3, [r7, #16]
 8004b12:	1ad3      	subs	r3, r2, r3
 8004b14:	2b02      	cmp	r3, #2
 8004b16:	d901      	bls.n	8004b1c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004b18:	2303      	movs	r3, #3
 8004b1a:	e05c      	b.n	8004bd6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b1c:	4b11      	ldr	r3, [pc, #68]	@ (8004b64 <HAL_RCC_OscConfig+0x470>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d0f0      	beq.n	8004b0a <HAL_RCC_OscConfig+0x416>
 8004b28:	e054      	b.n	8004bd4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b2a:	4b10      	ldr	r3, [pc, #64]	@ (8004b6c <HAL_RCC_OscConfig+0x478>)
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b30:	f7ff fa0c 	bl	8003f4c <HAL_GetTick>
 8004b34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b36:	e008      	b.n	8004b4a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b38:	f7ff fa08 	bl	8003f4c <HAL_GetTick>
 8004b3c:	4602      	mov	r2, r0
 8004b3e:	693b      	ldr	r3, [r7, #16]
 8004b40:	1ad3      	subs	r3, r2, r3
 8004b42:	2b02      	cmp	r3, #2
 8004b44:	d901      	bls.n	8004b4a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004b46:	2303      	movs	r3, #3
 8004b48:	e045      	b.n	8004bd6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b4a:	4b06      	ldr	r3, [pc, #24]	@ (8004b64 <HAL_RCC_OscConfig+0x470>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d1f0      	bne.n	8004b38 <HAL_RCC_OscConfig+0x444>
 8004b56:	e03d      	b.n	8004bd4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	699b      	ldr	r3, [r3, #24]
 8004b5c:	2b01      	cmp	r3, #1
 8004b5e:	d107      	bne.n	8004b70 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004b60:	2301      	movs	r3, #1
 8004b62:	e038      	b.n	8004bd6 <HAL_RCC_OscConfig+0x4e2>
 8004b64:	40023800 	.word	0x40023800
 8004b68:	40007000 	.word	0x40007000
 8004b6c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004b70:	4b1b      	ldr	r3, [pc, #108]	@ (8004be0 <HAL_RCC_OscConfig+0x4ec>)
 8004b72:	685b      	ldr	r3, [r3, #4]
 8004b74:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	699b      	ldr	r3, [r3, #24]
 8004b7a:	2b01      	cmp	r3, #1
 8004b7c:	d028      	beq.n	8004bd0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b88:	429a      	cmp	r2, r3
 8004b8a:	d121      	bne.n	8004bd0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b96:	429a      	cmp	r2, r3
 8004b98:	d11a      	bne.n	8004bd0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004b9a:	68fa      	ldr	r2, [r7, #12]
 8004b9c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004ba0:	4013      	ands	r3, r2
 8004ba2:	687a      	ldr	r2, [r7, #4]
 8004ba4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004ba6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004ba8:	4293      	cmp	r3, r2
 8004baa:	d111      	bne.n	8004bd0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bb6:	085b      	lsrs	r3, r3, #1
 8004bb8:	3b01      	subs	r3, #1
 8004bba:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004bbc:	429a      	cmp	r2, r3
 8004bbe:	d107      	bne.n	8004bd0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bca:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004bcc:	429a      	cmp	r2, r3
 8004bce:	d001      	beq.n	8004bd4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004bd0:	2301      	movs	r3, #1
 8004bd2:	e000      	b.n	8004bd6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004bd4:	2300      	movs	r3, #0
}
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	3718      	adds	r7, #24
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	bd80      	pop	{r7, pc}
 8004bde:	bf00      	nop
 8004be0:	40023800 	.word	0x40023800

08004be4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b084      	sub	sp, #16
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
 8004bec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d101      	bne.n	8004bf8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004bf4:	2301      	movs	r3, #1
 8004bf6:	e0cc      	b.n	8004d92 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004bf8:	4b68      	ldr	r3, [pc, #416]	@ (8004d9c <HAL_RCC_ClockConfig+0x1b8>)
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f003 0307 	and.w	r3, r3, #7
 8004c00:	683a      	ldr	r2, [r7, #0]
 8004c02:	429a      	cmp	r2, r3
 8004c04:	d90c      	bls.n	8004c20 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c06:	4b65      	ldr	r3, [pc, #404]	@ (8004d9c <HAL_RCC_ClockConfig+0x1b8>)
 8004c08:	683a      	ldr	r2, [r7, #0]
 8004c0a:	b2d2      	uxtb	r2, r2
 8004c0c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c0e:	4b63      	ldr	r3, [pc, #396]	@ (8004d9c <HAL_RCC_ClockConfig+0x1b8>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f003 0307 	and.w	r3, r3, #7
 8004c16:	683a      	ldr	r2, [r7, #0]
 8004c18:	429a      	cmp	r2, r3
 8004c1a:	d001      	beq.n	8004c20 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004c1c:	2301      	movs	r3, #1
 8004c1e:	e0b8      	b.n	8004d92 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f003 0302 	and.w	r3, r3, #2
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d020      	beq.n	8004c6e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f003 0304 	and.w	r3, r3, #4
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d005      	beq.n	8004c44 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004c38:	4b59      	ldr	r3, [pc, #356]	@ (8004da0 <HAL_RCC_ClockConfig+0x1bc>)
 8004c3a:	689b      	ldr	r3, [r3, #8]
 8004c3c:	4a58      	ldr	r2, [pc, #352]	@ (8004da0 <HAL_RCC_ClockConfig+0x1bc>)
 8004c3e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004c42:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f003 0308 	and.w	r3, r3, #8
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d005      	beq.n	8004c5c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004c50:	4b53      	ldr	r3, [pc, #332]	@ (8004da0 <HAL_RCC_ClockConfig+0x1bc>)
 8004c52:	689b      	ldr	r3, [r3, #8]
 8004c54:	4a52      	ldr	r2, [pc, #328]	@ (8004da0 <HAL_RCC_ClockConfig+0x1bc>)
 8004c56:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004c5a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c5c:	4b50      	ldr	r3, [pc, #320]	@ (8004da0 <HAL_RCC_ClockConfig+0x1bc>)
 8004c5e:	689b      	ldr	r3, [r3, #8]
 8004c60:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	689b      	ldr	r3, [r3, #8]
 8004c68:	494d      	ldr	r1, [pc, #308]	@ (8004da0 <HAL_RCC_ClockConfig+0x1bc>)
 8004c6a:	4313      	orrs	r3, r2
 8004c6c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f003 0301 	and.w	r3, r3, #1
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d044      	beq.n	8004d04 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	685b      	ldr	r3, [r3, #4]
 8004c7e:	2b01      	cmp	r3, #1
 8004c80:	d107      	bne.n	8004c92 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c82:	4b47      	ldr	r3, [pc, #284]	@ (8004da0 <HAL_RCC_ClockConfig+0x1bc>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d119      	bne.n	8004cc2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c8e:	2301      	movs	r3, #1
 8004c90:	e07f      	b.n	8004d92 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	685b      	ldr	r3, [r3, #4]
 8004c96:	2b02      	cmp	r3, #2
 8004c98:	d003      	beq.n	8004ca2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004c9e:	2b03      	cmp	r3, #3
 8004ca0:	d107      	bne.n	8004cb2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ca2:	4b3f      	ldr	r3, [pc, #252]	@ (8004da0 <HAL_RCC_ClockConfig+0x1bc>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d109      	bne.n	8004cc2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004cae:	2301      	movs	r3, #1
 8004cb0:	e06f      	b.n	8004d92 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004cb2:	4b3b      	ldr	r3, [pc, #236]	@ (8004da0 <HAL_RCC_ClockConfig+0x1bc>)
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f003 0302 	and.w	r3, r3, #2
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d101      	bne.n	8004cc2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	e067      	b.n	8004d92 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004cc2:	4b37      	ldr	r3, [pc, #220]	@ (8004da0 <HAL_RCC_ClockConfig+0x1bc>)
 8004cc4:	689b      	ldr	r3, [r3, #8]
 8004cc6:	f023 0203 	bic.w	r2, r3, #3
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	685b      	ldr	r3, [r3, #4]
 8004cce:	4934      	ldr	r1, [pc, #208]	@ (8004da0 <HAL_RCC_ClockConfig+0x1bc>)
 8004cd0:	4313      	orrs	r3, r2
 8004cd2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004cd4:	f7ff f93a 	bl	8003f4c <HAL_GetTick>
 8004cd8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004cda:	e00a      	b.n	8004cf2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004cdc:	f7ff f936 	bl	8003f4c <HAL_GetTick>
 8004ce0:	4602      	mov	r2, r0
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	1ad3      	subs	r3, r2, r3
 8004ce6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d901      	bls.n	8004cf2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004cee:	2303      	movs	r3, #3
 8004cf0:	e04f      	b.n	8004d92 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004cf2:	4b2b      	ldr	r3, [pc, #172]	@ (8004da0 <HAL_RCC_ClockConfig+0x1bc>)
 8004cf4:	689b      	ldr	r3, [r3, #8]
 8004cf6:	f003 020c 	and.w	r2, r3, #12
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	685b      	ldr	r3, [r3, #4]
 8004cfe:	009b      	lsls	r3, r3, #2
 8004d00:	429a      	cmp	r2, r3
 8004d02:	d1eb      	bne.n	8004cdc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004d04:	4b25      	ldr	r3, [pc, #148]	@ (8004d9c <HAL_RCC_ClockConfig+0x1b8>)
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f003 0307 	and.w	r3, r3, #7
 8004d0c:	683a      	ldr	r2, [r7, #0]
 8004d0e:	429a      	cmp	r2, r3
 8004d10:	d20c      	bcs.n	8004d2c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d12:	4b22      	ldr	r3, [pc, #136]	@ (8004d9c <HAL_RCC_ClockConfig+0x1b8>)
 8004d14:	683a      	ldr	r2, [r7, #0]
 8004d16:	b2d2      	uxtb	r2, r2
 8004d18:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d1a:	4b20      	ldr	r3, [pc, #128]	@ (8004d9c <HAL_RCC_ClockConfig+0x1b8>)
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f003 0307 	and.w	r3, r3, #7
 8004d22:	683a      	ldr	r2, [r7, #0]
 8004d24:	429a      	cmp	r2, r3
 8004d26:	d001      	beq.n	8004d2c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004d28:	2301      	movs	r3, #1
 8004d2a:	e032      	b.n	8004d92 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f003 0304 	and.w	r3, r3, #4
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d008      	beq.n	8004d4a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d38:	4b19      	ldr	r3, [pc, #100]	@ (8004da0 <HAL_RCC_ClockConfig+0x1bc>)
 8004d3a:	689b      	ldr	r3, [r3, #8]
 8004d3c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	68db      	ldr	r3, [r3, #12]
 8004d44:	4916      	ldr	r1, [pc, #88]	@ (8004da0 <HAL_RCC_ClockConfig+0x1bc>)
 8004d46:	4313      	orrs	r3, r2
 8004d48:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f003 0308 	and.w	r3, r3, #8
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d009      	beq.n	8004d6a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004d56:	4b12      	ldr	r3, [pc, #72]	@ (8004da0 <HAL_RCC_ClockConfig+0x1bc>)
 8004d58:	689b      	ldr	r3, [r3, #8]
 8004d5a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	691b      	ldr	r3, [r3, #16]
 8004d62:	00db      	lsls	r3, r3, #3
 8004d64:	490e      	ldr	r1, [pc, #56]	@ (8004da0 <HAL_RCC_ClockConfig+0x1bc>)
 8004d66:	4313      	orrs	r3, r2
 8004d68:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004d6a:	f000 f821 	bl	8004db0 <HAL_RCC_GetSysClockFreq>
 8004d6e:	4602      	mov	r2, r0
 8004d70:	4b0b      	ldr	r3, [pc, #44]	@ (8004da0 <HAL_RCC_ClockConfig+0x1bc>)
 8004d72:	689b      	ldr	r3, [r3, #8]
 8004d74:	091b      	lsrs	r3, r3, #4
 8004d76:	f003 030f 	and.w	r3, r3, #15
 8004d7a:	490a      	ldr	r1, [pc, #40]	@ (8004da4 <HAL_RCC_ClockConfig+0x1c0>)
 8004d7c:	5ccb      	ldrb	r3, [r1, r3]
 8004d7e:	fa22 f303 	lsr.w	r3, r2, r3
 8004d82:	4a09      	ldr	r2, [pc, #36]	@ (8004da8 <HAL_RCC_ClockConfig+0x1c4>)
 8004d84:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004d86:	4b09      	ldr	r3, [pc, #36]	@ (8004dac <HAL_RCC_ClockConfig+0x1c8>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	f7ff f89a 	bl	8003ec4 <HAL_InitTick>

  return HAL_OK;
 8004d90:	2300      	movs	r3, #0
}
 8004d92:	4618      	mov	r0, r3
 8004d94:	3710      	adds	r7, #16
 8004d96:	46bd      	mov	sp, r7
 8004d98:	bd80      	pop	{r7, pc}
 8004d9a:	bf00      	nop
 8004d9c:	40023c00 	.word	0x40023c00
 8004da0:	40023800 	.word	0x40023800
 8004da4:	08007c00 	.word	0x08007c00
 8004da8:	2000012c 	.word	0x2000012c
 8004dac:	20000130 	.word	0x20000130

08004db0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004db0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004db4:	b094      	sub	sp, #80	@ 0x50
 8004db6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004db8:	2300      	movs	r3, #0
 8004dba:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004dc8:	4b79      	ldr	r3, [pc, #484]	@ (8004fb0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004dca:	689b      	ldr	r3, [r3, #8]
 8004dcc:	f003 030c 	and.w	r3, r3, #12
 8004dd0:	2b08      	cmp	r3, #8
 8004dd2:	d00d      	beq.n	8004df0 <HAL_RCC_GetSysClockFreq+0x40>
 8004dd4:	2b08      	cmp	r3, #8
 8004dd6:	f200 80e1 	bhi.w	8004f9c <HAL_RCC_GetSysClockFreq+0x1ec>
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d002      	beq.n	8004de4 <HAL_RCC_GetSysClockFreq+0x34>
 8004dde:	2b04      	cmp	r3, #4
 8004de0:	d003      	beq.n	8004dea <HAL_RCC_GetSysClockFreq+0x3a>
 8004de2:	e0db      	b.n	8004f9c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004de4:	4b73      	ldr	r3, [pc, #460]	@ (8004fb4 <HAL_RCC_GetSysClockFreq+0x204>)
 8004de6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004de8:	e0db      	b.n	8004fa2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004dea:	4b73      	ldr	r3, [pc, #460]	@ (8004fb8 <HAL_RCC_GetSysClockFreq+0x208>)
 8004dec:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004dee:	e0d8      	b.n	8004fa2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004df0:	4b6f      	ldr	r3, [pc, #444]	@ (8004fb0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004df2:	685b      	ldr	r3, [r3, #4]
 8004df4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004df8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004dfa:	4b6d      	ldr	r3, [pc, #436]	@ (8004fb0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004dfc:	685b      	ldr	r3, [r3, #4]
 8004dfe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d063      	beq.n	8004ece <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e06:	4b6a      	ldr	r3, [pc, #424]	@ (8004fb0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004e08:	685b      	ldr	r3, [r3, #4]
 8004e0a:	099b      	lsrs	r3, r3, #6
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004e10:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004e12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e18:	633b      	str	r3, [r7, #48]	@ 0x30
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	637b      	str	r3, [r7, #52]	@ 0x34
 8004e1e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004e22:	4622      	mov	r2, r4
 8004e24:	462b      	mov	r3, r5
 8004e26:	f04f 0000 	mov.w	r0, #0
 8004e2a:	f04f 0100 	mov.w	r1, #0
 8004e2e:	0159      	lsls	r1, r3, #5
 8004e30:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004e34:	0150      	lsls	r0, r2, #5
 8004e36:	4602      	mov	r2, r0
 8004e38:	460b      	mov	r3, r1
 8004e3a:	4621      	mov	r1, r4
 8004e3c:	1a51      	subs	r1, r2, r1
 8004e3e:	6139      	str	r1, [r7, #16]
 8004e40:	4629      	mov	r1, r5
 8004e42:	eb63 0301 	sbc.w	r3, r3, r1
 8004e46:	617b      	str	r3, [r7, #20]
 8004e48:	f04f 0200 	mov.w	r2, #0
 8004e4c:	f04f 0300 	mov.w	r3, #0
 8004e50:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004e54:	4659      	mov	r1, fp
 8004e56:	018b      	lsls	r3, r1, #6
 8004e58:	4651      	mov	r1, sl
 8004e5a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004e5e:	4651      	mov	r1, sl
 8004e60:	018a      	lsls	r2, r1, #6
 8004e62:	4651      	mov	r1, sl
 8004e64:	ebb2 0801 	subs.w	r8, r2, r1
 8004e68:	4659      	mov	r1, fp
 8004e6a:	eb63 0901 	sbc.w	r9, r3, r1
 8004e6e:	f04f 0200 	mov.w	r2, #0
 8004e72:	f04f 0300 	mov.w	r3, #0
 8004e76:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004e7a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004e7e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004e82:	4690      	mov	r8, r2
 8004e84:	4699      	mov	r9, r3
 8004e86:	4623      	mov	r3, r4
 8004e88:	eb18 0303 	adds.w	r3, r8, r3
 8004e8c:	60bb      	str	r3, [r7, #8]
 8004e8e:	462b      	mov	r3, r5
 8004e90:	eb49 0303 	adc.w	r3, r9, r3
 8004e94:	60fb      	str	r3, [r7, #12]
 8004e96:	f04f 0200 	mov.w	r2, #0
 8004e9a:	f04f 0300 	mov.w	r3, #0
 8004e9e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004ea2:	4629      	mov	r1, r5
 8004ea4:	024b      	lsls	r3, r1, #9
 8004ea6:	4621      	mov	r1, r4
 8004ea8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004eac:	4621      	mov	r1, r4
 8004eae:	024a      	lsls	r2, r1, #9
 8004eb0:	4610      	mov	r0, r2
 8004eb2:	4619      	mov	r1, r3
 8004eb4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004eba:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004ebc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004ec0:	f7fb f9d6 	bl	8000270 <__aeabi_uldivmod>
 8004ec4:	4602      	mov	r2, r0
 8004ec6:	460b      	mov	r3, r1
 8004ec8:	4613      	mov	r3, r2
 8004eca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004ecc:	e058      	b.n	8004f80 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ece:	4b38      	ldr	r3, [pc, #224]	@ (8004fb0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004ed0:	685b      	ldr	r3, [r3, #4]
 8004ed2:	099b      	lsrs	r3, r3, #6
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	4611      	mov	r1, r2
 8004eda:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004ede:	623b      	str	r3, [r7, #32]
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	627b      	str	r3, [r7, #36]	@ 0x24
 8004ee4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004ee8:	4642      	mov	r2, r8
 8004eea:	464b      	mov	r3, r9
 8004eec:	f04f 0000 	mov.w	r0, #0
 8004ef0:	f04f 0100 	mov.w	r1, #0
 8004ef4:	0159      	lsls	r1, r3, #5
 8004ef6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004efa:	0150      	lsls	r0, r2, #5
 8004efc:	4602      	mov	r2, r0
 8004efe:	460b      	mov	r3, r1
 8004f00:	4641      	mov	r1, r8
 8004f02:	ebb2 0a01 	subs.w	sl, r2, r1
 8004f06:	4649      	mov	r1, r9
 8004f08:	eb63 0b01 	sbc.w	fp, r3, r1
 8004f0c:	f04f 0200 	mov.w	r2, #0
 8004f10:	f04f 0300 	mov.w	r3, #0
 8004f14:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004f18:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004f1c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004f20:	ebb2 040a 	subs.w	r4, r2, sl
 8004f24:	eb63 050b 	sbc.w	r5, r3, fp
 8004f28:	f04f 0200 	mov.w	r2, #0
 8004f2c:	f04f 0300 	mov.w	r3, #0
 8004f30:	00eb      	lsls	r3, r5, #3
 8004f32:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004f36:	00e2      	lsls	r2, r4, #3
 8004f38:	4614      	mov	r4, r2
 8004f3a:	461d      	mov	r5, r3
 8004f3c:	4643      	mov	r3, r8
 8004f3e:	18e3      	adds	r3, r4, r3
 8004f40:	603b      	str	r3, [r7, #0]
 8004f42:	464b      	mov	r3, r9
 8004f44:	eb45 0303 	adc.w	r3, r5, r3
 8004f48:	607b      	str	r3, [r7, #4]
 8004f4a:	f04f 0200 	mov.w	r2, #0
 8004f4e:	f04f 0300 	mov.w	r3, #0
 8004f52:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004f56:	4629      	mov	r1, r5
 8004f58:	028b      	lsls	r3, r1, #10
 8004f5a:	4621      	mov	r1, r4
 8004f5c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004f60:	4621      	mov	r1, r4
 8004f62:	028a      	lsls	r2, r1, #10
 8004f64:	4610      	mov	r0, r2
 8004f66:	4619      	mov	r1, r3
 8004f68:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	61bb      	str	r3, [r7, #24]
 8004f6e:	61fa      	str	r2, [r7, #28]
 8004f70:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004f74:	f7fb f97c 	bl	8000270 <__aeabi_uldivmod>
 8004f78:	4602      	mov	r2, r0
 8004f7a:	460b      	mov	r3, r1
 8004f7c:	4613      	mov	r3, r2
 8004f7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004f80:	4b0b      	ldr	r3, [pc, #44]	@ (8004fb0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004f82:	685b      	ldr	r3, [r3, #4]
 8004f84:	0c1b      	lsrs	r3, r3, #16
 8004f86:	f003 0303 	and.w	r3, r3, #3
 8004f8a:	3301      	adds	r3, #1
 8004f8c:	005b      	lsls	r3, r3, #1
 8004f8e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004f90:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004f92:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004f94:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f98:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004f9a:	e002      	b.n	8004fa2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004f9c:	4b05      	ldr	r3, [pc, #20]	@ (8004fb4 <HAL_RCC_GetSysClockFreq+0x204>)
 8004f9e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004fa0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004fa2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	3750      	adds	r7, #80	@ 0x50
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004fae:	bf00      	nop
 8004fb0:	40023800 	.word	0x40023800
 8004fb4:	00f42400 	.word	0x00f42400
 8004fb8:	007a1200 	.word	0x007a1200

08004fbc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004fbc:	b480      	push	{r7}
 8004fbe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004fc0:	4b03      	ldr	r3, [pc, #12]	@ (8004fd0 <HAL_RCC_GetHCLKFreq+0x14>)
 8004fc2:	681b      	ldr	r3, [r3, #0]
}
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fcc:	4770      	bx	lr
 8004fce:	bf00      	nop
 8004fd0:	2000012c 	.word	0x2000012c

08004fd4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004fd8:	f7ff fff0 	bl	8004fbc <HAL_RCC_GetHCLKFreq>
 8004fdc:	4602      	mov	r2, r0
 8004fde:	4b05      	ldr	r3, [pc, #20]	@ (8004ff4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004fe0:	689b      	ldr	r3, [r3, #8]
 8004fe2:	0a9b      	lsrs	r3, r3, #10
 8004fe4:	f003 0307 	and.w	r3, r3, #7
 8004fe8:	4903      	ldr	r1, [pc, #12]	@ (8004ff8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004fea:	5ccb      	ldrb	r3, [r1, r3]
 8004fec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	bd80      	pop	{r7, pc}
 8004ff4:	40023800 	.word	0x40023800
 8004ff8:	08007c10 	.word	0x08007c10

08004ffc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005000:	f7ff ffdc 	bl	8004fbc <HAL_RCC_GetHCLKFreq>
 8005004:	4602      	mov	r2, r0
 8005006:	4b05      	ldr	r3, [pc, #20]	@ (800501c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005008:	689b      	ldr	r3, [r3, #8]
 800500a:	0b5b      	lsrs	r3, r3, #13
 800500c:	f003 0307 	and.w	r3, r3, #7
 8005010:	4903      	ldr	r1, [pc, #12]	@ (8005020 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005012:	5ccb      	ldrb	r3, [r1, r3]
 8005014:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005018:	4618      	mov	r0, r3
 800501a:	bd80      	pop	{r7, pc}
 800501c:	40023800 	.word	0x40023800
 8005020:	08007c10 	.word	0x08007c10

08005024 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005024:	b580      	push	{r7, lr}
 8005026:	b082      	sub	sp, #8
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d101      	bne.n	8005036 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005032:	2301      	movs	r3, #1
 8005034:	e041      	b.n	80050ba <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800503c:	b2db      	uxtb	r3, r3
 800503e:	2b00      	cmp	r3, #0
 8005040:	d106      	bne.n	8005050 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2200      	movs	r2, #0
 8005046:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800504a:	6878      	ldr	r0, [r7, #4]
 800504c:	f7fd fd8e 	bl	8002b6c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2202      	movs	r2, #2
 8005054:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681a      	ldr	r2, [r3, #0]
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	3304      	adds	r3, #4
 8005060:	4619      	mov	r1, r3
 8005062:	4610      	mov	r0, r2
 8005064:	f000 fcd2 	bl	8005a0c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2201      	movs	r2, #1
 800506c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2201      	movs	r2, #1
 8005074:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2201      	movs	r2, #1
 800507c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2201      	movs	r2, #1
 8005084:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2201      	movs	r2, #1
 800508c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2201      	movs	r2, #1
 8005094:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2201      	movs	r2, #1
 800509c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2201      	movs	r2, #1
 80050a4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2201      	movs	r2, #1
 80050ac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2201      	movs	r2, #1
 80050b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80050b8:	2300      	movs	r3, #0
}
 80050ba:	4618      	mov	r0, r3
 80050bc:	3708      	adds	r7, #8
 80050be:	46bd      	mov	sp, r7
 80050c0:	bd80      	pop	{r7, pc}
	...

080050c4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80050c4:	b480      	push	{r7}
 80050c6:	b085      	sub	sp, #20
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80050d2:	b2db      	uxtb	r3, r3
 80050d4:	2b01      	cmp	r3, #1
 80050d6:	d001      	beq.n	80050dc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80050d8:	2301      	movs	r3, #1
 80050da:	e04e      	b.n	800517a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2202      	movs	r2, #2
 80050e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	68da      	ldr	r2, [r3, #12]
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f042 0201 	orr.w	r2, r2, #1
 80050f2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	4a23      	ldr	r2, [pc, #140]	@ (8005188 <HAL_TIM_Base_Start_IT+0xc4>)
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d022      	beq.n	8005144 <HAL_TIM_Base_Start_IT+0x80>
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005106:	d01d      	beq.n	8005144 <HAL_TIM_Base_Start_IT+0x80>
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	4a1f      	ldr	r2, [pc, #124]	@ (800518c <HAL_TIM_Base_Start_IT+0xc8>)
 800510e:	4293      	cmp	r3, r2
 8005110:	d018      	beq.n	8005144 <HAL_TIM_Base_Start_IT+0x80>
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	4a1e      	ldr	r2, [pc, #120]	@ (8005190 <HAL_TIM_Base_Start_IT+0xcc>)
 8005118:	4293      	cmp	r3, r2
 800511a:	d013      	beq.n	8005144 <HAL_TIM_Base_Start_IT+0x80>
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	4a1c      	ldr	r2, [pc, #112]	@ (8005194 <HAL_TIM_Base_Start_IT+0xd0>)
 8005122:	4293      	cmp	r3, r2
 8005124:	d00e      	beq.n	8005144 <HAL_TIM_Base_Start_IT+0x80>
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	4a1b      	ldr	r2, [pc, #108]	@ (8005198 <HAL_TIM_Base_Start_IT+0xd4>)
 800512c:	4293      	cmp	r3, r2
 800512e:	d009      	beq.n	8005144 <HAL_TIM_Base_Start_IT+0x80>
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	4a19      	ldr	r2, [pc, #100]	@ (800519c <HAL_TIM_Base_Start_IT+0xd8>)
 8005136:	4293      	cmp	r3, r2
 8005138:	d004      	beq.n	8005144 <HAL_TIM_Base_Start_IT+0x80>
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	4a18      	ldr	r2, [pc, #96]	@ (80051a0 <HAL_TIM_Base_Start_IT+0xdc>)
 8005140:	4293      	cmp	r3, r2
 8005142:	d111      	bne.n	8005168 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	689b      	ldr	r3, [r3, #8]
 800514a:	f003 0307 	and.w	r3, r3, #7
 800514e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	2b06      	cmp	r3, #6
 8005154:	d010      	beq.n	8005178 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	681a      	ldr	r2, [r3, #0]
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f042 0201 	orr.w	r2, r2, #1
 8005164:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005166:	e007      	b.n	8005178 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	681a      	ldr	r2, [r3, #0]
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f042 0201 	orr.w	r2, r2, #1
 8005176:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005178:	2300      	movs	r3, #0
}
 800517a:	4618      	mov	r0, r3
 800517c:	3714      	adds	r7, #20
 800517e:	46bd      	mov	sp, r7
 8005180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005184:	4770      	bx	lr
 8005186:	bf00      	nop
 8005188:	40010000 	.word	0x40010000
 800518c:	40000400 	.word	0x40000400
 8005190:	40000800 	.word	0x40000800
 8005194:	40000c00 	.word	0x40000c00
 8005198:	40010400 	.word	0x40010400
 800519c:	40014000 	.word	0x40014000
 80051a0:	40001800 	.word	0x40001800

080051a4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b082      	sub	sp, #8
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d101      	bne.n	80051b6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80051b2:	2301      	movs	r3, #1
 80051b4:	e041      	b.n	800523a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80051bc:	b2db      	uxtb	r3, r3
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d106      	bne.n	80051d0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	2200      	movs	r2, #0
 80051c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80051ca:	6878      	ldr	r0, [r7, #4]
 80051cc:	f000 f839 	bl	8005242 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2202      	movs	r2, #2
 80051d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681a      	ldr	r2, [r3, #0]
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	3304      	adds	r3, #4
 80051e0:	4619      	mov	r1, r3
 80051e2:	4610      	mov	r0, r2
 80051e4:	f000 fc12 	bl	8005a0c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2201      	movs	r2, #1
 80051ec:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2201      	movs	r2, #1
 80051f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2201      	movs	r2, #1
 80051fc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2201      	movs	r2, #1
 8005204:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2201      	movs	r2, #1
 800520c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2201      	movs	r2, #1
 8005214:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2201      	movs	r2, #1
 800521c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2201      	movs	r2, #1
 8005224:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2201      	movs	r2, #1
 800522c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2201      	movs	r2, #1
 8005234:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005238:	2300      	movs	r3, #0
}
 800523a:	4618      	mov	r0, r3
 800523c:	3708      	adds	r7, #8
 800523e:	46bd      	mov	sp, r7
 8005240:	bd80      	pop	{r7, pc}

08005242 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005242:	b480      	push	{r7}
 8005244:	b083      	sub	sp, #12
 8005246:	af00      	add	r7, sp, #0
 8005248:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800524a:	bf00      	nop
 800524c:	370c      	adds	r7, #12
 800524e:	46bd      	mov	sp, r7
 8005250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005254:	4770      	bx	lr
	...

08005258 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005258:	b580      	push	{r7, lr}
 800525a:	b084      	sub	sp, #16
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
 8005260:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d109      	bne.n	800527c <HAL_TIM_PWM_Start+0x24>
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800526e:	b2db      	uxtb	r3, r3
 8005270:	2b01      	cmp	r3, #1
 8005272:	bf14      	ite	ne
 8005274:	2301      	movne	r3, #1
 8005276:	2300      	moveq	r3, #0
 8005278:	b2db      	uxtb	r3, r3
 800527a:	e022      	b.n	80052c2 <HAL_TIM_PWM_Start+0x6a>
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	2b04      	cmp	r3, #4
 8005280:	d109      	bne.n	8005296 <HAL_TIM_PWM_Start+0x3e>
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005288:	b2db      	uxtb	r3, r3
 800528a:	2b01      	cmp	r3, #1
 800528c:	bf14      	ite	ne
 800528e:	2301      	movne	r3, #1
 8005290:	2300      	moveq	r3, #0
 8005292:	b2db      	uxtb	r3, r3
 8005294:	e015      	b.n	80052c2 <HAL_TIM_PWM_Start+0x6a>
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	2b08      	cmp	r3, #8
 800529a:	d109      	bne.n	80052b0 <HAL_TIM_PWM_Start+0x58>
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80052a2:	b2db      	uxtb	r3, r3
 80052a4:	2b01      	cmp	r3, #1
 80052a6:	bf14      	ite	ne
 80052a8:	2301      	movne	r3, #1
 80052aa:	2300      	moveq	r3, #0
 80052ac:	b2db      	uxtb	r3, r3
 80052ae:	e008      	b.n	80052c2 <HAL_TIM_PWM_Start+0x6a>
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80052b6:	b2db      	uxtb	r3, r3
 80052b8:	2b01      	cmp	r3, #1
 80052ba:	bf14      	ite	ne
 80052bc:	2301      	movne	r3, #1
 80052be:	2300      	moveq	r3, #0
 80052c0:	b2db      	uxtb	r3, r3
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d001      	beq.n	80052ca <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80052c6:	2301      	movs	r3, #1
 80052c8:	e07c      	b.n	80053c4 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d104      	bne.n	80052da <HAL_TIM_PWM_Start+0x82>
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2202      	movs	r2, #2
 80052d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80052d8:	e013      	b.n	8005302 <HAL_TIM_PWM_Start+0xaa>
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	2b04      	cmp	r3, #4
 80052de:	d104      	bne.n	80052ea <HAL_TIM_PWM_Start+0x92>
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2202      	movs	r2, #2
 80052e4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80052e8:	e00b      	b.n	8005302 <HAL_TIM_PWM_Start+0xaa>
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	2b08      	cmp	r3, #8
 80052ee:	d104      	bne.n	80052fa <HAL_TIM_PWM_Start+0xa2>
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2202      	movs	r2, #2
 80052f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80052f8:	e003      	b.n	8005302 <HAL_TIM_PWM_Start+0xaa>
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2202      	movs	r2, #2
 80052fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	2201      	movs	r2, #1
 8005308:	6839      	ldr	r1, [r7, #0]
 800530a:	4618      	mov	r0, r3
 800530c:	f000 fe74 	bl	8005ff8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	4a2d      	ldr	r2, [pc, #180]	@ (80053cc <HAL_TIM_PWM_Start+0x174>)
 8005316:	4293      	cmp	r3, r2
 8005318:	d004      	beq.n	8005324 <HAL_TIM_PWM_Start+0xcc>
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	4a2c      	ldr	r2, [pc, #176]	@ (80053d0 <HAL_TIM_PWM_Start+0x178>)
 8005320:	4293      	cmp	r3, r2
 8005322:	d101      	bne.n	8005328 <HAL_TIM_PWM_Start+0xd0>
 8005324:	2301      	movs	r3, #1
 8005326:	e000      	b.n	800532a <HAL_TIM_PWM_Start+0xd2>
 8005328:	2300      	movs	r3, #0
 800532a:	2b00      	cmp	r3, #0
 800532c:	d007      	beq.n	800533e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800533c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	4a22      	ldr	r2, [pc, #136]	@ (80053cc <HAL_TIM_PWM_Start+0x174>)
 8005344:	4293      	cmp	r3, r2
 8005346:	d022      	beq.n	800538e <HAL_TIM_PWM_Start+0x136>
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005350:	d01d      	beq.n	800538e <HAL_TIM_PWM_Start+0x136>
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	4a1f      	ldr	r2, [pc, #124]	@ (80053d4 <HAL_TIM_PWM_Start+0x17c>)
 8005358:	4293      	cmp	r3, r2
 800535a:	d018      	beq.n	800538e <HAL_TIM_PWM_Start+0x136>
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	4a1d      	ldr	r2, [pc, #116]	@ (80053d8 <HAL_TIM_PWM_Start+0x180>)
 8005362:	4293      	cmp	r3, r2
 8005364:	d013      	beq.n	800538e <HAL_TIM_PWM_Start+0x136>
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	4a1c      	ldr	r2, [pc, #112]	@ (80053dc <HAL_TIM_PWM_Start+0x184>)
 800536c:	4293      	cmp	r3, r2
 800536e:	d00e      	beq.n	800538e <HAL_TIM_PWM_Start+0x136>
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	4a16      	ldr	r2, [pc, #88]	@ (80053d0 <HAL_TIM_PWM_Start+0x178>)
 8005376:	4293      	cmp	r3, r2
 8005378:	d009      	beq.n	800538e <HAL_TIM_PWM_Start+0x136>
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	4a18      	ldr	r2, [pc, #96]	@ (80053e0 <HAL_TIM_PWM_Start+0x188>)
 8005380:	4293      	cmp	r3, r2
 8005382:	d004      	beq.n	800538e <HAL_TIM_PWM_Start+0x136>
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	4a16      	ldr	r2, [pc, #88]	@ (80053e4 <HAL_TIM_PWM_Start+0x18c>)
 800538a:	4293      	cmp	r3, r2
 800538c:	d111      	bne.n	80053b2 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	689b      	ldr	r3, [r3, #8]
 8005394:	f003 0307 	and.w	r3, r3, #7
 8005398:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	2b06      	cmp	r3, #6
 800539e:	d010      	beq.n	80053c2 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	681a      	ldr	r2, [r3, #0]
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f042 0201 	orr.w	r2, r2, #1
 80053ae:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053b0:	e007      	b.n	80053c2 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	681a      	ldr	r2, [r3, #0]
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f042 0201 	orr.w	r2, r2, #1
 80053c0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80053c2:	2300      	movs	r3, #0
}
 80053c4:	4618      	mov	r0, r3
 80053c6:	3710      	adds	r7, #16
 80053c8:	46bd      	mov	sp, r7
 80053ca:	bd80      	pop	{r7, pc}
 80053cc:	40010000 	.word	0x40010000
 80053d0:	40010400 	.word	0x40010400
 80053d4:	40000400 	.word	0x40000400
 80053d8:	40000800 	.word	0x40000800
 80053dc:	40000c00 	.word	0x40000c00
 80053e0:	40014000 	.word	0x40014000
 80053e4:	40001800 	.word	0x40001800

080053e8 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b082      	sub	sp, #8
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
 80053f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	2200      	movs	r2, #0
 80053f8:	6839      	ldr	r1, [r7, #0]
 80053fa:	4618      	mov	r0, r3
 80053fc:	f000 fdfc 	bl	8005ff8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	4a2e      	ldr	r2, [pc, #184]	@ (80054c0 <HAL_TIM_PWM_Stop+0xd8>)
 8005406:	4293      	cmp	r3, r2
 8005408:	d004      	beq.n	8005414 <HAL_TIM_PWM_Stop+0x2c>
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	4a2d      	ldr	r2, [pc, #180]	@ (80054c4 <HAL_TIM_PWM_Stop+0xdc>)
 8005410:	4293      	cmp	r3, r2
 8005412:	d101      	bne.n	8005418 <HAL_TIM_PWM_Stop+0x30>
 8005414:	2301      	movs	r3, #1
 8005416:	e000      	b.n	800541a <HAL_TIM_PWM_Stop+0x32>
 8005418:	2300      	movs	r3, #0
 800541a:	2b00      	cmp	r3, #0
 800541c:	d017      	beq.n	800544e <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	6a1a      	ldr	r2, [r3, #32]
 8005424:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005428:	4013      	ands	r3, r2
 800542a:	2b00      	cmp	r3, #0
 800542c:	d10f      	bne.n	800544e <HAL_TIM_PWM_Stop+0x66>
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	6a1a      	ldr	r2, [r3, #32]
 8005434:	f240 4344 	movw	r3, #1092	@ 0x444
 8005438:	4013      	ands	r3, r2
 800543a:	2b00      	cmp	r3, #0
 800543c:	d107      	bne.n	800544e <HAL_TIM_PWM_Stop+0x66>
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800544c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	6a1a      	ldr	r2, [r3, #32]
 8005454:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005458:	4013      	ands	r3, r2
 800545a:	2b00      	cmp	r3, #0
 800545c:	d10f      	bne.n	800547e <HAL_TIM_PWM_Stop+0x96>
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	6a1a      	ldr	r2, [r3, #32]
 8005464:	f240 4344 	movw	r3, #1092	@ 0x444
 8005468:	4013      	ands	r3, r2
 800546a:	2b00      	cmp	r3, #0
 800546c:	d107      	bne.n	800547e <HAL_TIM_PWM_Stop+0x96>
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	681a      	ldr	r2, [r3, #0]
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f022 0201 	bic.w	r2, r2, #1
 800547c:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800547e:	683b      	ldr	r3, [r7, #0]
 8005480:	2b00      	cmp	r3, #0
 8005482:	d104      	bne.n	800548e <HAL_TIM_PWM_Stop+0xa6>
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2201      	movs	r2, #1
 8005488:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800548c:	e013      	b.n	80054b6 <HAL_TIM_PWM_Stop+0xce>
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	2b04      	cmp	r3, #4
 8005492:	d104      	bne.n	800549e <HAL_TIM_PWM_Stop+0xb6>
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2201      	movs	r2, #1
 8005498:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800549c:	e00b      	b.n	80054b6 <HAL_TIM_PWM_Stop+0xce>
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	2b08      	cmp	r3, #8
 80054a2:	d104      	bne.n	80054ae <HAL_TIM_PWM_Stop+0xc6>
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2201      	movs	r2, #1
 80054a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80054ac:	e003      	b.n	80054b6 <HAL_TIM_PWM_Stop+0xce>
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2201      	movs	r2, #1
 80054b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 80054b6:	2300      	movs	r3, #0
}
 80054b8:	4618      	mov	r0, r3
 80054ba:	3708      	adds	r7, #8
 80054bc:	46bd      	mov	sp, r7
 80054be:	bd80      	pop	{r7, pc}
 80054c0:	40010000 	.word	0x40010000
 80054c4:	40010400 	.word	0x40010400

080054c8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b084      	sub	sp, #16
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	68db      	ldr	r3, [r3, #12]
 80054d6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	691b      	ldr	r3, [r3, #16]
 80054de:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80054e0:	68bb      	ldr	r3, [r7, #8]
 80054e2:	f003 0302 	and.w	r3, r3, #2
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d020      	beq.n	800552c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	f003 0302 	and.w	r3, r3, #2
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d01b      	beq.n	800552c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f06f 0202 	mvn.w	r2, #2
 80054fc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	2201      	movs	r2, #1
 8005502:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	699b      	ldr	r3, [r3, #24]
 800550a:	f003 0303 	and.w	r3, r3, #3
 800550e:	2b00      	cmp	r3, #0
 8005510:	d003      	beq.n	800551a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005512:	6878      	ldr	r0, [r7, #4]
 8005514:	f000 fa5b 	bl	80059ce <HAL_TIM_IC_CaptureCallback>
 8005518:	e005      	b.n	8005526 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800551a:	6878      	ldr	r0, [r7, #4]
 800551c:	f000 fa4d 	bl	80059ba <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005520:	6878      	ldr	r0, [r7, #4]
 8005522:	f000 fa5e 	bl	80059e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2200      	movs	r2, #0
 800552a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800552c:	68bb      	ldr	r3, [r7, #8]
 800552e:	f003 0304 	and.w	r3, r3, #4
 8005532:	2b00      	cmp	r3, #0
 8005534:	d020      	beq.n	8005578 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	f003 0304 	and.w	r3, r3, #4
 800553c:	2b00      	cmp	r3, #0
 800553e:	d01b      	beq.n	8005578 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f06f 0204 	mvn.w	r2, #4
 8005548:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	2202      	movs	r2, #2
 800554e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	699b      	ldr	r3, [r3, #24]
 8005556:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800555a:	2b00      	cmp	r3, #0
 800555c:	d003      	beq.n	8005566 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800555e:	6878      	ldr	r0, [r7, #4]
 8005560:	f000 fa35 	bl	80059ce <HAL_TIM_IC_CaptureCallback>
 8005564:	e005      	b.n	8005572 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005566:	6878      	ldr	r0, [r7, #4]
 8005568:	f000 fa27 	bl	80059ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800556c:	6878      	ldr	r0, [r7, #4]
 800556e:	f000 fa38 	bl	80059e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	2200      	movs	r2, #0
 8005576:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005578:	68bb      	ldr	r3, [r7, #8]
 800557a:	f003 0308 	and.w	r3, r3, #8
 800557e:	2b00      	cmp	r3, #0
 8005580:	d020      	beq.n	80055c4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	f003 0308 	and.w	r3, r3, #8
 8005588:	2b00      	cmp	r3, #0
 800558a:	d01b      	beq.n	80055c4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f06f 0208 	mvn.w	r2, #8
 8005594:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2204      	movs	r2, #4
 800559a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	69db      	ldr	r3, [r3, #28]
 80055a2:	f003 0303 	and.w	r3, r3, #3
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d003      	beq.n	80055b2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80055aa:	6878      	ldr	r0, [r7, #4]
 80055ac:	f000 fa0f 	bl	80059ce <HAL_TIM_IC_CaptureCallback>
 80055b0:	e005      	b.n	80055be <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055b2:	6878      	ldr	r0, [r7, #4]
 80055b4:	f000 fa01 	bl	80059ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055b8:	6878      	ldr	r0, [r7, #4]
 80055ba:	f000 fa12 	bl	80059e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	2200      	movs	r2, #0
 80055c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80055c4:	68bb      	ldr	r3, [r7, #8]
 80055c6:	f003 0310 	and.w	r3, r3, #16
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d020      	beq.n	8005610 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	f003 0310 	and.w	r3, r3, #16
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d01b      	beq.n	8005610 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f06f 0210 	mvn.w	r2, #16
 80055e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2208      	movs	r2, #8
 80055e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	69db      	ldr	r3, [r3, #28]
 80055ee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d003      	beq.n	80055fe <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80055f6:	6878      	ldr	r0, [r7, #4]
 80055f8:	f000 f9e9 	bl	80059ce <HAL_TIM_IC_CaptureCallback>
 80055fc:	e005      	b.n	800560a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055fe:	6878      	ldr	r0, [r7, #4]
 8005600:	f000 f9db 	bl	80059ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005604:	6878      	ldr	r0, [r7, #4]
 8005606:	f000 f9ec 	bl	80059e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2200      	movs	r2, #0
 800560e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005610:	68bb      	ldr	r3, [r7, #8]
 8005612:	f003 0301 	and.w	r3, r3, #1
 8005616:	2b00      	cmp	r3, #0
 8005618:	d00c      	beq.n	8005634 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	f003 0301 	and.w	r3, r3, #1
 8005620:	2b00      	cmp	r3, #0
 8005622:	d007      	beq.n	8005634 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f06f 0201 	mvn.w	r2, #1
 800562c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800562e:	6878      	ldr	r0, [r7, #4]
 8005630:	f7fd f9d4 	bl	80029dc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005634:	68bb      	ldr	r3, [r7, #8]
 8005636:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800563a:	2b00      	cmp	r3, #0
 800563c:	d00c      	beq.n	8005658 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005644:	2b00      	cmp	r3, #0
 8005646:	d007      	beq.n	8005658 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005650:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005652:	6878      	ldr	r0, [r7, #4]
 8005654:	f000 fd7c 	bl	8006150 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005658:	68bb      	ldr	r3, [r7, #8]
 800565a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800565e:	2b00      	cmp	r3, #0
 8005660:	d00c      	beq.n	800567c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005668:	2b00      	cmp	r3, #0
 800566a:	d007      	beq.n	800567c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005674:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005676:	6878      	ldr	r0, [r7, #4]
 8005678:	f000 f9bd 	bl	80059f6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800567c:	68bb      	ldr	r3, [r7, #8]
 800567e:	f003 0320 	and.w	r3, r3, #32
 8005682:	2b00      	cmp	r3, #0
 8005684:	d00c      	beq.n	80056a0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	f003 0320 	and.w	r3, r3, #32
 800568c:	2b00      	cmp	r3, #0
 800568e:	d007      	beq.n	80056a0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f06f 0220 	mvn.w	r2, #32
 8005698:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800569a:	6878      	ldr	r0, [r7, #4]
 800569c:	f000 fd4e 	bl	800613c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80056a0:	bf00      	nop
 80056a2:	3710      	adds	r7, #16
 80056a4:	46bd      	mov	sp, r7
 80056a6:	bd80      	pop	{r7, pc}

080056a8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b086      	sub	sp, #24
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	60f8      	str	r0, [r7, #12]
 80056b0:	60b9      	str	r1, [r7, #8]
 80056b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80056b4:	2300      	movs	r3, #0
 80056b6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80056be:	2b01      	cmp	r3, #1
 80056c0:	d101      	bne.n	80056c6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80056c2:	2302      	movs	r3, #2
 80056c4:	e0ae      	b.n	8005824 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	2201      	movs	r2, #1
 80056ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2b0c      	cmp	r3, #12
 80056d2:	f200 809f 	bhi.w	8005814 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80056d6:	a201      	add	r2, pc, #4	@ (adr r2, 80056dc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80056d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056dc:	08005711 	.word	0x08005711
 80056e0:	08005815 	.word	0x08005815
 80056e4:	08005815 	.word	0x08005815
 80056e8:	08005815 	.word	0x08005815
 80056ec:	08005751 	.word	0x08005751
 80056f0:	08005815 	.word	0x08005815
 80056f4:	08005815 	.word	0x08005815
 80056f8:	08005815 	.word	0x08005815
 80056fc:	08005793 	.word	0x08005793
 8005700:	08005815 	.word	0x08005815
 8005704:	08005815 	.word	0x08005815
 8005708:	08005815 	.word	0x08005815
 800570c:	080057d3 	.word	0x080057d3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	68b9      	ldr	r1, [r7, #8]
 8005716:	4618      	mov	r0, r3
 8005718:	f000 fa24 	bl	8005b64 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	699a      	ldr	r2, [r3, #24]
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f042 0208 	orr.w	r2, r2, #8
 800572a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	699a      	ldr	r2, [r3, #24]
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f022 0204 	bic.w	r2, r2, #4
 800573a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	6999      	ldr	r1, [r3, #24]
 8005742:	68bb      	ldr	r3, [r7, #8]
 8005744:	691a      	ldr	r2, [r3, #16]
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	430a      	orrs	r2, r1
 800574c:	619a      	str	r2, [r3, #24]
      break;
 800574e:	e064      	b.n	800581a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	68b9      	ldr	r1, [r7, #8]
 8005756:	4618      	mov	r0, r3
 8005758:	f000 fa74 	bl	8005c44 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	699a      	ldr	r2, [r3, #24]
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800576a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	699a      	ldr	r2, [r3, #24]
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800577a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	6999      	ldr	r1, [r3, #24]
 8005782:	68bb      	ldr	r3, [r7, #8]
 8005784:	691b      	ldr	r3, [r3, #16]
 8005786:	021a      	lsls	r2, r3, #8
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	430a      	orrs	r2, r1
 800578e:	619a      	str	r2, [r3, #24]
      break;
 8005790:	e043      	b.n	800581a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	68b9      	ldr	r1, [r7, #8]
 8005798:	4618      	mov	r0, r3
 800579a:	f000 fac9 	bl	8005d30 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	69da      	ldr	r2, [r3, #28]
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f042 0208 	orr.w	r2, r2, #8
 80057ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	69da      	ldr	r2, [r3, #28]
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f022 0204 	bic.w	r2, r2, #4
 80057bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	69d9      	ldr	r1, [r3, #28]
 80057c4:	68bb      	ldr	r3, [r7, #8]
 80057c6:	691a      	ldr	r2, [r3, #16]
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	430a      	orrs	r2, r1
 80057ce:	61da      	str	r2, [r3, #28]
      break;
 80057d0:	e023      	b.n	800581a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	68b9      	ldr	r1, [r7, #8]
 80057d8:	4618      	mov	r0, r3
 80057da:	f000 fb1d 	bl	8005e18 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	69da      	ldr	r2, [r3, #28]
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80057ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	69da      	ldr	r2, [r3, #28]
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80057fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	69d9      	ldr	r1, [r3, #28]
 8005804:	68bb      	ldr	r3, [r7, #8]
 8005806:	691b      	ldr	r3, [r3, #16]
 8005808:	021a      	lsls	r2, r3, #8
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	430a      	orrs	r2, r1
 8005810:	61da      	str	r2, [r3, #28]
      break;
 8005812:	e002      	b.n	800581a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005814:	2301      	movs	r3, #1
 8005816:	75fb      	strb	r3, [r7, #23]
      break;
 8005818:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	2200      	movs	r2, #0
 800581e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005822:	7dfb      	ldrb	r3, [r7, #23]
}
 8005824:	4618      	mov	r0, r3
 8005826:	3718      	adds	r7, #24
 8005828:	46bd      	mov	sp, r7
 800582a:	bd80      	pop	{r7, pc}

0800582c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800582c:	b580      	push	{r7, lr}
 800582e:	b084      	sub	sp, #16
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
 8005834:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005836:	2300      	movs	r3, #0
 8005838:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005840:	2b01      	cmp	r3, #1
 8005842:	d101      	bne.n	8005848 <HAL_TIM_ConfigClockSource+0x1c>
 8005844:	2302      	movs	r3, #2
 8005846:	e0b4      	b.n	80059b2 <HAL_TIM_ConfigClockSource+0x186>
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2201      	movs	r2, #1
 800584c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2202      	movs	r2, #2
 8005854:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	689b      	ldr	r3, [r3, #8]
 800585e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005860:	68bb      	ldr	r3, [r7, #8]
 8005862:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005866:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005868:	68bb      	ldr	r3, [r7, #8]
 800586a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800586e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	68ba      	ldr	r2, [r7, #8]
 8005876:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005880:	d03e      	beq.n	8005900 <HAL_TIM_ConfigClockSource+0xd4>
 8005882:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005886:	f200 8087 	bhi.w	8005998 <HAL_TIM_ConfigClockSource+0x16c>
 800588a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800588e:	f000 8086 	beq.w	800599e <HAL_TIM_ConfigClockSource+0x172>
 8005892:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005896:	d87f      	bhi.n	8005998 <HAL_TIM_ConfigClockSource+0x16c>
 8005898:	2b70      	cmp	r3, #112	@ 0x70
 800589a:	d01a      	beq.n	80058d2 <HAL_TIM_ConfigClockSource+0xa6>
 800589c:	2b70      	cmp	r3, #112	@ 0x70
 800589e:	d87b      	bhi.n	8005998 <HAL_TIM_ConfigClockSource+0x16c>
 80058a0:	2b60      	cmp	r3, #96	@ 0x60
 80058a2:	d050      	beq.n	8005946 <HAL_TIM_ConfigClockSource+0x11a>
 80058a4:	2b60      	cmp	r3, #96	@ 0x60
 80058a6:	d877      	bhi.n	8005998 <HAL_TIM_ConfigClockSource+0x16c>
 80058a8:	2b50      	cmp	r3, #80	@ 0x50
 80058aa:	d03c      	beq.n	8005926 <HAL_TIM_ConfigClockSource+0xfa>
 80058ac:	2b50      	cmp	r3, #80	@ 0x50
 80058ae:	d873      	bhi.n	8005998 <HAL_TIM_ConfigClockSource+0x16c>
 80058b0:	2b40      	cmp	r3, #64	@ 0x40
 80058b2:	d058      	beq.n	8005966 <HAL_TIM_ConfigClockSource+0x13a>
 80058b4:	2b40      	cmp	r3, #64	@ 0x40
 80058b6:	d86f      	bhi.n	8005998 <HAL_TIM_ConfigClockSource+0x16c>
 80058b8:	2b30      	cmp	r3, #48	@ 0x30
 80058ba:	d064      	beq.n	8005986 <HAL_TIM_ConfigClockSource+0x15a>
 80058bc:	2b30      	cmp	r3, #48	@ 0x30
 80058be:	d86b      	bhi.n	8005998 <HAL_TIM_ConfigClockSource+0x16c>
 80058c0:	2b20      	cmp	r3, #32
 80058c2:	d060      	beq.n	8005986 <HAL_TIM_ConfigClockSource+0x15a>
 80058c4:	2b20      	cmp	r3, #32
 80058c6:	d867      	bhi.n	8005998 <HAL_TIM_ConfigClockSource+0x16c>
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d05c      	beq.n	8005986 <HAL_TIM_ConfigClockSource+0x15a>
 80058cc:	2b10      	cmp	r3, #16
 80058ce:	d05a      	beq.n	8005986 <HAL_TIM_ConfigClockSource+0x15a>
 80058d0:	e062      	b.n	8005998 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80058d6:	683b      	ldr	r3, [r7, #0]
 80058d8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80058e2:	f000 fb69 	bl	8005fb8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	689b      	ldr	r3, [r3, #8]
 80058ec:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80058ee:	68bb      	ldr	r3, [r7, #8]
 80058f0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80058f4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	68ba      	ldr	r2, [r7, #8]
 80058fc:	609a      	str	r2, [r3, #8]
      break;
 80058fe:	e04f      	b.n	80059a0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005910:	f000 fb52 	bl	8005fb8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	689a      	ldr	r2, [r3, #8]
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005922:	609a      	str	r2, [r3, #8]
      break;
 8005924:	e03c      	b.n	80059a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005932:	461a      	mov	r2, r3
 8005934:	f000 fac6 	bl	8005ec4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	2150      	movs	r1, #80	@ 0x50
 800593e:	4618      	mov	r0, r3
 8005940:	f000 fb1f 	bl	8005f82 <TIM_ITRx_SetConfig>
      break;
 8005944:	e02c      	b.n	80059a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800594e:	683b      	ldr	r3, [r7, #0]
 8005950:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005952:	461a      	mov	r2, r3
 8005954:	f000 fae5 	bl	8005f22 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	2160      	movs	r1, #96	@ 0x60
 800595e:	4618      	mov	r0, r3
 8005960:	f000 fb0f 	bl	8005f82 <TIM_ITRx_SetConfig>
      break;
 8005964:	e01c      	b.n	80059a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800596a:	683b      	ldr	r3, [r7, #0]
 800596c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005972:	461a      	mov	r2, r3
 8005974:	f000 faa6 	bl	8005ec4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	2140      	movs	r1, #64	@ 0x40
 800597e:	4618      	mov	r0, r3
 8005980:	f000 faff 	bl	8005f82 <TIM_ITRx_SetConfig>
      break;
 8005984:	e00c      	b.n	80059a0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681a      	ldr	r2, [r3, #0]
 800598a:	683b      	ldr	r3, [r7, #0]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	4619      	mov	r1, r3
 8005990:	4610      	mov	r0, r2
 8005992:	f000 faf6 	bl	8005f82 <TIM_ITRx_SetConfig>
      break;
 8005996:	e003      	b.n	80059a0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005998:	2301      	movs	r3, #1
 800599a:	73fb      	strb	r3, [r7, #15]
      break;
 800599c:	e000      	b.n	80059a0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800599e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2201      	movs	r2, #1
 80059a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2200      	movs	r2, #0
 80059ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80059b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80059b2:	4618      	mov	r0, r3
 80059b4:	3710      	adds	r7, #16
 80059b6:	46bd      	mov	sp, r7
 80059b8:	bd80      	pop	{r7, pc}

080059ba <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80059ba:	b480      	push	{r7}
 80059bc:	b083      	sub	sp, #12
 80059be:	af00      	add	r7, sp, #0
 80059c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80059c2:	bf00      	nop
 80059c4:	370c      	adds	r7, #12
 80059c6:	46bd      	mov	sp, r7
 80059c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059cc:	4770      	bx	lr

080059ce <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80059ce:	b480      	push	{r7}
 80059d0:	b083      	sub	sp, #12
 80059d2:	af00      	add	r7, sp, #0
 80059d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80059d6:	bf00      	nop
 80059d8:	370c      	adds	r7, #12
 80059da:	46bd      	mov	sp, r7
 80059dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e0:	4770      	bx	lr

080059e2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80059e2:	b480      	push	{r7}
 80059e4:	b083      	sub	sp, #12
 80059e6:	af00      	add	r7, sp, #0
 80059e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80059ea:	bf00      	nop
 80059ec:	370c      	adds	r7, #12
 80059ee:	46bd      	mov	sp, r7
 80059f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f4:	4770      	bx	lr

080059f6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80059f6:	b480      	push	{r7}
 80059f8:	b083      	sub	sp, #12
 80059fa:	af00      	add	r7, sp, #0
 80059fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80059fe:	bf00      	nop
 8005a00:	370c      	adds	r7, #12
 8005a02:	46bd      	mov	sp, r7
 8005a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a08:	4770      	bx	lr
	...

08005a0c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005a0c:	b480      	push	{r7}
 8005a0e:	b085      	sub	sp, #20
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
 8005a14:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	4a46      	ldr	r2, [pc, #280]	@ (8005b38 <TIM_Base_SetConfig+0x12c>)
 8005a20:	4293      	cmp	r3, r2
 8005a22:	d013      	beq.n	8005a4c <TIM_Base_SetConfig+0x40>
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a2a:	d00f      	beq.n	8005a4c <TIM_Base_SetConfig+0x40>
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	4a43      	ldr	r2, [pc, #268]	@ (8005b3c <TIM_Base_SetConfig+0x130>)
 8005a30:	4293      	cmp	r3, r2
 8005a32:	d00b      	beq.n	8005a4c <TIM_Base_SetConfig+0x40>
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	4a42      	ldr	r2, [pc, #264]	@ (8005b40 <TIM_Base_SetConfig+0x134>)
 8005a38:	4293      	cmp	r3, r2
 8005a3a:	d007      	beq.n	8005a4c <TIM_Base_SetConfig+0x40>
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	4a41      	ldr	r2, [pc, #260]	@ (8005b44 <TIM_Base_SetConfig+0x138>)
 8005a40:	4293      	cmp	r3, r2
 8005a42:	d003      	beq.n	8005a4c <TIM_Base_SetConfig+0x40>
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	4a40      	ldr	r2, [pc, #256]	@ (8005b48 <TIM_Base_SetConfig+0x13c>)
 8005a48:	4293      	cmp	r3, r2
 8005a4a:	d108      	bne.n	8005a5e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a52:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	685b      	ldr	r3, [r3, #4]
 8005a58:	68fa      	ldr	r2, [r7, #12]
 8005a5a:	4313      	orrs	r3, r2
 8005a5c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	4a35      	ldr	r2, [pc, #212]	@ (8005b38 <TIM_Base_SetConfig+0x12c>)
 8005a62:	4293      	cmp	r3, r2
 8005a64:	d02b      	beq.n	8005abe <TIM_Base_SetConfig+0xb2>
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a6c:	d027      	beq.n	8005abe <TIM_Base_SetConfig+0xb2>
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	4a32      	ldr	r2, [pc, #200]	@ (8005b3c <TIM_Base_SetConfig+0x130>)
 8005a72:	4293      	cmp	r3, r2
 8005a74:	d023      	beq.n	8005abe <TIM_Base_SetConfig+0xb2>
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	4a31      	ldr	r2, [pc, #196]	@ (8005b40 <TIM_Base_SetConfig+0x134>)
 8005a7a:	4293      	cmp	r3, r2
 8005a7c:	d01f      	beq.n	8005abe <TIM_Base_SetConfig+0xb2>
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	4a30      	ldr	r2, [pc, #192]	@ (8005b44 <TIM_Base_SetConfig+0x138>)
 8005a82:	4293      	cmp	r3, r2
 8005a84:	d01b      	beq.n	8005abe <TIM_Base_SetConfig+0xb2>
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	4a2f      	ldr	r2, [pc, #188]	@ (8005b48 <TIM_Base_SetConfig+0x13c>)
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	d017      	beq.n	8005abe <TIM_Base_SetConfig+0xb2>
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	4a2e      	ldr	r2, [pc, #184]	@ (8005b4c <TIM_Base_SetConfig+0x140>)
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d013      	beq.n	8005abe <TIM_Base_SetConfig+0xb2>
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	4a2d      	ldr	r2, [pc, #180]	@ (8005b50 <TIM_Base_SetConfig+0x144>)
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	d00f      	beq.n	8005abe <TIM_Base_SetConfig+0xb2>
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	4a2c      	ldr	r2, [pc, #176]	@ (8005b54 <TIM_Base_SetConfig+0x148>)
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	d00b      	beq.n	8005abe <TIM_Base_SetConfig+0xb2>
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	4a2b      	ldr	r2, [pc, #172]	@ (8005b58 <TIM_Base_SetConfig+0x14c>)
 8005aaa:	4293      	cmp	r3, r2
 8005aac:	d007      	beq.n	8005abe <TIM_Base_SetConfig+0xb2>
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	4a2a      	ldr	r2, [pc, #168]	@ (8005b5c <TIM_Base_SetConfig+0x150>)
 8005ab2:	4293      	cmp	r3, r2
 8005ab4:	d003      	beq.n	8005abe <TIM_Base_SetConfig+0xb2>
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	4a29      	ldr	r2, [pc, #164]	@ (8005b60 <TIM_Base_SetConfig+0x154>)
 8005aba:	4293      	cmp	r3, r2
 8005abc:	d108      	bne.n	8005ad0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005ac4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	68db      	ldr	r3, [r3, #12]
 8005aca:	68fa      	ldr	r2, [r7, #12]
 8005acc:	4313      	orrs	r3, r2
 8005ace:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	695b      	ldr	r3, [r3, #20]
 8005ada:	4313      	orrs	r3, r2
 8005adc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	68fa      	ldr	r2, [r7, #12]
 8005ae2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	689a      	ldr	r2, [r3, #8]
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	681a      	ldr	r2, [r3, #0]
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	4a10      	ldr	r2, [pc, #64]	@ (8005b38 <TIM_Base_SetConfig+0x12c>)
 8005af8:	4293      	cmp	r3, r2
 8005afa:	d003      	beq.n	8005b04 <TIM_Base_SetConfig+0xf8>
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	4a12      	ldr	r2, [pc, #72]	@ (8005b48 <TIM_Base_SetConfig+0x13c>)
 8005b00:	4293      	cmp	r3, r2
 8005b02:	d103      	bne.n	8005b0c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	691a      	ldr	r2, [r3, #16]
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2201      	movs	r2, #1
 8005b10:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	691b      	ldr	r3, [r3, #16]
 8005b16:	f003 0301 	and.w	r3, r3, #1
 8005b1a:	2b01      	cmp	r3, #1
 8005b1c:	d105      	bne.n	8005b2a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	691b      	ldr	r3, [r3, #16]
 8005b22:	f023 0201 	bic.w	r2, r3, #1
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	611a      	str	r2, [r3, #16]
  }
}
 8005b2a:	bf00      	nop
 8005b2c:	3714      	adds	r7, #20
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b34:	4770      	bx	lr
 8005b36:	bf00      	nop
 8005b38:	40010000 	.word	0x40010000
 8005b3c:	40000400 	.word	0x40000400
 8005b40:	40000800 	.word	0x40000800
 8005b44:	40000c00 	.word	0x40000c00
 8005b48:	40010400 	.word	0x40010400
 8005b4c:	40014000 	.word	0x40014000
 8005b50:	40014400 	.word	0x40014400
 8005b54:	40014800 	.word	0x40014800
 8005b58:	40001800 	.word	0x40001800
 8005b5c:	40001c00 	.word	0x40001c00
 8005b60:	40002000 	.word	0x40002000

08005b64 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005b64:	b480      	push	{r7}
 8005b66:	b087      	sub	sp, #28
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
 8005b6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	6a1b      	ldr	r3, [r3, #32]
 8005b72:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	6a1b      	ldr	r3, [r3, #32]
 8005b78:	f023 0201 	bic.w	r2, r3, #1
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	685b      	ldr	r3, [r3, #4]
 8005b84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	699b      	ldr	r3, [r3, #24]
 8005b8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	f023 0303 	bic.w	r3, r3, #3
 8005b9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	68fa      	ldr	r2, [r7, #12]
 8005ba2:	4313      	orrs	r3, r2
 8005ba4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005ba6:	697b      	ldr	r3, [r7, #20]
 8005ba8:	f023 0302 	bic.w	r3, r3, #2
 8005bac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	689b      	ldr	r3, [r3, #8]
 8005bb2:	697a      	ldr	r2, [r7, #20]
 8005bb4:	4313      	orrs	r3, r2
 8005bb6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	4a20      	ldr	r2, [pc, #128]	@ (8005c3c <TIM_OC1_SetConfig+0xd8>)
 8005bbc:	4293      	cmp	r3, r2
 8005bbe:	d003      	beq.n	8005bc8 <TIM_OC1_SetConfig+0x64>
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	4a1f      	ldr	r2, [pc, #124]	@ (8005c40 <TIM_OC1_SetConfig+0xdc>)
 8005bc4:	4293      	cmp	r3, r2
 8005bc6:	d10c      	bne.n	8005be2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005bc8:	697b      	ldr	r3, [r7, #20]
 8005bca:	f023 0308 	bic.w	r3, r3, #8
 8005bce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	68db      	ldr	r3, [r3, #12]
 8005bd4:	697a      	ldr	r2, [r7, #20]
 8005bd6:	4313      	orrs	r3, r2
 8005bd8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005bda:	697b      	ldr	r3, [r7, #20]
 8005bdc:	f023 0304 	bic.w	r3, r3, #4
 8005be0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	4a15      	ldr	r2, [pc, #84]	@ (8005c3c <TIM_OC1_SetConfig+0xd8>)
 8005be6:	4293      	cmp	r3, r2
 8005be8:	d003      	beq.n	8005bf2 <TIM_OC1_SetConfig+0x8e>
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	4a14      	ldr	r2, [pc, #80]	@ (8005c40 <TIM_OC1_SetConfig+0xdc>)
 8005bee:	4293      	cmp	r3, r2
 8005bf0:	d111      	bne.n	8005c16 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005bf2:	693b      	ldr	r3, [r7, #16]
 8005bf4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005bf8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005bfa:	693b      	ldr	r3, [r7, #16]
 8005bfc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005c00:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	695b      	ldr	r3, [r3, #20]
 8005c06:	693a      	ldr	r2, [r7, #16]
 8005c08:	4313      	orrs	r3, r2
 8005c0a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	699b      	ldr	r3, [r3, #24]
 8005c10:	693a      	ldr	r2, [r7, #16]
 8005c12:	4313      	orrs	r3, r2
 8005c14:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	693a      	ldr	r2, [r7, #16]
 8005c1a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	68fa      	ldr	r2, [r7, #12]
 8005c20:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	685a      	ldr	r2, [r3, #4]
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	697a      	ldr	r2, [r7, #20]
 8005c2e:	621a      	str	r2, [r3, #32]
}
 8005c30:	bf00      	nop
 8005c32:	371c      	adds	r7, #28
 8005c34:	46bd      	mov	sp, r7
 8005c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3a:	4770      	bx	lr
 8005c3c:	40010000 	.word	0x40010000
 8005c40:	40010400 	.word	0x40010400

08005c44 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005c44:	b480      	push	{r7}
 8005c46:	b087      	sub	sp, #28
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
 8005c4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6a1b      	ldr	r3, [r3, #32]
 8005c52:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	6a1b      	ldr	r3, [r3, #32]
 8005c58:	f023 0210 	bic.w	r2, r3, #16
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	685b      	ldr	r3, [r3, #4]
 8005c64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	699b      	ldr	r3, [r3, #24]
 8005c6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005c72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005c7a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	021b      	lsls	r3, r3, #8
 8005c82:	68fa      	ldr	r2, [r7, #12]
 8005c84:	4313      	orrs	r3, r2
 8005c86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005c88:	697b      	ldr	r3, [r7, #20]
 8005c8a:	f023 0320 	bic.w	r3, r3, #32
 8005c8e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	689b      	ldr	r3, [r3, #8]
 8005c94:	011b      	lsls	r3, r3, #4
 8005c96:	697a      	ldr	r2, [r7, #20]
 8005c98:	4313      	orrs	r3, r2
 8005c9a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	4a22      	ldr	r2, [pc, #136]	@ (8005d28 <TIM_OC2_SetConfig+0xe4>)
 8005ca0:	4293      	cmp	r3, r2
 8005ca2:	d003      	beq.n	8005cac <TIM_OC2_SetConfig+0x68>
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	4a21      	ldr	r2, [pc, #132]	@ (8005d2c <TIM_OC2_SetConfig+0xe8>)
 8005ca8:	4293      	cmp	r3, r2
 8005caa:	d10d      	bne.n	8005cc8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005cac:	697b      	ldr	r3, [r7, #20]
 8005cae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005cb2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	68db      	ldr	r3, [r3, #12]
 8005cb8:	011b      	lsls	r3, r3, #4
 8005cba:	697a      	ldr	r2, [r7, #20]
 8005cbc:	4313      	orrs	r3, r2
 8005cbe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005cc0:	697b      	ldr	r3, [r7, #20]
 8005cc2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005cc6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	4a17      	ldr	r2, [pc, #92]	@ (8005d28 <TIM_OC2_SetConfig+0xe4>)
 8005ccc:	4293      	cmp	r3, r2
 8005cce:	d003      	beq.n	8005cd8 <TIM_OC2_SetConfig+0x94>
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	4a16      	ldr	r2, [pc, #88]	@ (8005d2c <TIM_OC2_SetConfig+0xe8>)
 8005cd4:	4293      	cmp	r3, r2
 8005cd6:	d113      	bne.n	8005d00 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005cd8:	693b      	ldr	r3, [r7, #16]
 8005cda:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005cde:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005ce0:	693b      	ldr	r3, [r7, #16]
 8005ce2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005ce6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	695b      	ldr	r3, [r3, #20]
 8005cec:	009b      	lsls	r3, r3, #2
 8005cee:	693a      	ldr	r2, [r7, #16]
 8005cf0:	4313      	orrs	r3, r2
 8005cf2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	699b      	ldr	r3, [r3, #24]
 8005cf8:	009b      	lsls	r3, r3, #2
 8005cfa:	693a      	ldr	r2, [r7, #16]
 8005cfc:	4313      	orrs	r3, r2
 8005cfe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	693a      	ldr	r2, [r7, #16]
 8005d04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	68fa      	ldr	r2, [r7, #12]
 8005d0a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005d0c:	683b      	ldr	r3, [r7, #0]
 8005d0e:	685a      	ldr	r2, [r3, #4]
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	697a      	ldr	r2, [r7, #20]
 8005d18:	621a      	str	r2, [r3, #32]
}
 8005d1a:	bf00      	nop
 8005d1c:	371c      	adds	r7, #28
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d24:	4770      	bx	lr
 8005d26:	bf00      	nop
 8005d28:	40010000 	.word	0x40010000
 8005d2c:	40010400 	.word	0x40010400

08005d30 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005d30:	b480      	push	{r7}
 8005d32:	b087      	sub	sp, #28
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
 8005d38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6a1b      	ldr	r3, [r3, #32]
 8005d3e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	6a1b      	ldr	r3, [r3, #32]
 8005d44:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	685b      	ldr	r3, [r3, #4]
 8005d50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	69db      	ldr	r3, [r3, #28]
 8005d56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	f023 0303 	bic.w	r3, r3, #3
 8005d66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	68fa      	ldr	r2, [r7, #12]
 8005d6e:	4313      	orrs	r3, r2
 8005d70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005d72:	697b      	ldr	r3, [r7, #20]
 8005d74:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005d78:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005d7a:	683b      	ldr	r3, [r7, #0]
 8005d7c:	689b      	ldr	r3, [r3, #8]
 8005d7e:	021b      	lsls	r3, r3, #8
 8005d80:	697a      	ldr	r2, [r7, #20]
 8005d82:	4313      	orrs	r3, r2
 8005d84:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	4a21      	ldr	r2, [pc, #132]	@ (8005e10 <TIM_OC3_SetConfig+0xe0>)
 8005d8a:	4293      	cmp	r3, r2
 8005d8c:	d003      	beq.n	8005d96 <TIM_OC3_SetConfig+0x66>
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	4a20      	ldr	r2, [pc, #128]	@ (8005e14 <TIM_OC3_SetConfig+0xe4>)
 8005d92:	4293      	cmp	r3, r2
 8005d94:	d10d      	bne.n	8005db2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005d96:	697b      	ldr	r3, [r7, #20]
 8005d98:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005d9c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005d9e:	683b      	ldr	r3, [r7, #0]
 8005da0:	68db      	ldr	r3, [r3, #12]
 8005da2:	021b      	lsls	r3, r3, #8
 8005da4:	697a      	ldr	r2, [r7, #20]
 8005da6:	4313      	orrs	r3, r2
 8005da8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005daa:	697b      	ldr	r3, [r7, #20]
 8005dac:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005db0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	4a16      	ldr	r2, [pc, #88]	@ (8005e10 <TIM_OC3_SetConfig+0xe0>)
 8005db6:	4293      	cmp	r3, r2
 8005db8:	d003      	beq.n	8005dc2 <TIM_OC3_SetConfig+0x92>
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	4a15      	ldr	r2, [pc, #84]	@ (8005e14 <TIM_OC3_SetConfig+0xe4>)
 8005dbe:	4293      	cmp	r3, r2
 8005dc0:	d113      	bne.n	8005dea <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005dc2:	693b      	ldr	r3, [r7, #16]
 8005dc4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005dc8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005dca:	693b      	ldr	r3, [r7, #16]
 8005dcc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005dd0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005dd2:	683b      	ldr	r3, [r7, #0]
 8005dd4:	695b      	ldr	r3, [r3, #20]
 8005dd6:	011b      	lsls	r3, r3, #4
 8005dd8:	693a      	ldr	r2, [r7, #16]
 8005dda:	4313      	orrs	r3, r2
 8005ddc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	699b      	ldr	r3, [r3, #24]
 8005de2:	011b      	lsls	r3, r3, #4
 8005de4:	693a      	ldr	r2, [r7, #16]
 8005de6:	4313      	orrs	r3, r2
 8005de8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	693a      	ldr	r2, [r7, #16]
 8005dee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	68fa      	ldr	r2, [r7, #12]
 8005df4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005df6:	683b      	ldr	r3, [r7, #0]
 8005df8:	685a      	ldr	r2, [r3, #4]
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	697a      	ldr	r2, [r7, #20]
 8005e02:	621a      	str	r2, [r3, #32]
}
 8005e04:	bf00      	nop
 8005e06:	371c      	adds	r7, #28
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0e:	4770      	bx	lr
 8005e10:	40010000 	.word	0x40010000
 8005e14:	40010400 	.word	0x40010400

08005e18 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005e18:	b480      	push	{r7}
 8005e1a:	b087      	sub	sp, #28
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]
 8005e20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	6a1b      	ldr	r3, [r3, #32]
 8005e26:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	6a1b      	ldr	r3, [r3, #32]
 8005e2c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	685b      	ldr	r3, [r3, #4]
 8005e38:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	69db      	ldr	r3, [r3, #28]
 8005e3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005e46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005e4e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	021b      	lsls	r3, r3, #8
 8005e56:	68fa      	ldr	r2, [r7, #12]
 8005e58:	4313      	orrs	r3, r2
 8005e5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005e5c:	693b      	ldr	r3, [r7, #16]
 8005e5e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005e62:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005e64:	683b      	ldr	r3, [r7, #0]
 8005e66:	689b      	ldr	r3, [r3, #8]
 8005e68:	031b      	lsls	r3, r3, #12
 8005e6a:	693a      	ldr	r2, [r7, #16]
 8005e6c:	4313      	orrs	r3, r2
 8005e6e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	4a12      	ldr	r2, [pc, #72]	@ (8005ebc <TIM_OC4_SetConfig+0xa4>)
 8005e74:	4293      	cmp	r3, r2
 8005e76:	d003      	beq.n	8005e80 <TIM_OC4_SetConfig+0x68>
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	4a11      	ldr	r2, [pc, #68]	@ (8005ec0 <TIM_OC4_SetConfig+0xa8>)
 8005e7c:	4293      	cmp	r3, r2
 8005e7e:	d109      	bne.n	8005e94 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005e80:	697b      	ldr	r3, [r7, #20]
 8005e82:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005e86:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	695b      	ldr	r3, [r3, #20]
 8005e8c:	019b      	lsls	r3, r3, #6
 8005e8e:	697a      	ldr	r2, [r7, #20]
 8005e90:	4313      	orrs	r3, r2
 8005e92:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	697a      	ldr	r2, [r7, #20]
 8005e98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	68fa      	ldr	r2, [r7, #12]
 8005e9e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	685a      	ldr	r2, [r3, #4]
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	693a      	ldr	r2, [r7, #16]
 8005eac:	621a      	str	r2, [r3, #32]
}
 8005eae:	bf00      	nop
 8005eb0:	371c      	adds	r7, #28
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb8:	4770      	bx	lr
 8005eba:	bf00      	nop
 8005ebc:	40010000 	.word	0x40010000
 8005ec0:	40010400 	.word	0x40010400

08005ec4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005ec4:	b480      	push	{r7}
 8005ec6:	b087      	sub	sp, #28
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	60f8      	str	r0, [r7, #12]
 8005ecc:	60b9      	str	r1, [r7, #8]
 8005ece:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	6a1b      	ldr	r3, [r3, #32]
 8005ed4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	6a1b      	ldr	r3, [r3, #32]
 8005eda:	f023 0201 	bic.w	r2, r3, #1
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	699b      	ldr	r3, [r3, #24]
 8005ee6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005ee8:	693b      	ldr	r3, [r7, #16]
 8005eea:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005eee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	011b      	lsls	r3, r3, #4
 8005ef4:	693a      	ldr	r2, [r7, #16]
 8005ef6:	4313      	orrs	r3, r2
 8005ef8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005efa:	697b      	ldr	r3, [r7, #20]
 8005efc:	f023 030a 	bic.w	r3, r3, #10
 8005f00:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005f02:	697a      	ldr	r2, [r7, #20]
 8005f04:	68bb      	ldr	r3, [r7, #8]
 8005f06:	4313      	orrs	r3, r2
 8005f08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	693a      	ldr	r2, [r7, #16]
 8005f0e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	697a      	ldr	r2, [r7, #20]
 8005f14:	621a      	str	r2, [r3, #32]
}
 8005f16:	bf00      	nop
 8005f18:	371c      	adds	r7, #28
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f20:	4770      	bx	lr

08005f22 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005f22:	b480      	push	{r7}
 8005f24:	b087      	sub	sp, #28
 8005f26:	af00      	add	r7, sp, #0
 8005f28:	60f8      	str	r0, [r7, #12]
 8005f2a:	60b9      	str	r1, [r7, #8]
 8005f2c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	6a1b      	ldr	r3, [r3, #32]
 8005f32:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	6a1b      	ldr	r3, [r3, #32]
 8005f38:	f023 0210 	bic.w	r2, r3, #16
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	699b      	ldr	r3, [r3, #24]
 8005f44:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005f46:	693b      	ldr	r3, [r7, #16]
 8005f48:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005f4c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	031b      	lsls	r3, r3, #12
 8005f52:	693a      	ldr	r2, [r7, #16]
 8005f54:	4313      	orrs	r3, r2
 8005f56:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005f58:	697b      	ldr	r3, [r7, #20]
 8005f5a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005f5e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005f60:	68bb      	ldr	r3, [r7, #8]
 8005f62:	011b      	lsls	r3, r3, #4
 8005f64:	697a      	ldr	r2, [r7, #20]
 8005f66:	4313      	orrs	r3, r2
 8005f68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	693a      	ldr	r2, [r7, #16]
 8005f6e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	697a      	ldr	r2, [r7, #20]
 8005f74:	621a      	str	r2, [r3, #32]
}
 8005f76:	bf00      	nop
 8005f78:	371c      	adds	r7, #28
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f80:	4770      	bx	lr

08005f82 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005f82:	b480      	push	{r7}
 8005f84:	b085      	sub	sp, #20
 8005f86:	af00      	add	r7, sp, #0
 8005f88:	6078      	str	r0, [r7, #4]
 8005f8a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	689b      	ldr	r3, [r3, #8]
 8005f90:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f98:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005f9a:	683a      	ldr	r2, [r7, #0]
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	4313      	orrs	r3, r2
 8005fa0:	f043 0307 	orr.w	r3, r3, #7
 8005fa4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	68fa      	ldr	r2, [r7, #12]
 8005faa:	609a      	str	r2, [r3, #8]
}
 8005fac:	bf00      	nop
 8005fae:	3714      	adds	r7, #20
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb6:	4770      	bx	lr

08005fb8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005fb8:	b480      	push	{r7}
 8005fba:	b087      	sub	sp, #28
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	60f8      	str	r0, [r7, #12]
 8005fc0:	60b9      	str	r1, [r7, #8]
 8005fc2:	607a      	str	r2, [r7, #4]
 8005fc4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	689b      	ldr	r3, [r3, #8]
 8005fca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005fcc:	697b      	ldr	r3, [r7, #20]
 8005fce:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005fd2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005fd4:	683b      	ldr	r3, [r7, #0]
 8005fd6:	021a      	lsls	r2, r3, #8
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	431a      	orrs	r2, r3
 8005fdc:	68bb      	ldr	r3, [r7, #8]
 8005fde:	4313      	orrs	r3, r2
 8005fe0:	697a      	ldr	r2, [r7, #20]
 8005fe2:	4313      	orrs	r3, r2
 8005fe4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	697a      	ldr	r2, [r7, #20]
 8005fea:	609a      	str	r2, [r3, #8]
}
 8005fec:	bf00      	nop
 8005fee:	371c      	adds	r7, #28
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff6:	4770      	bx	lr

08005ff8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005ff8:	b480      	push	{r7}
 8005ffa:	b087      	sub	sp, #28
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	60f8      	str	r0, [r7, #12]
 8006000:	60b9      	str	r1, [r7, #8]
 8006002:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006004:	68bb      	ldr	r3, [r7, #8]
 8006006:	f003 031f 	and.w	r3, r3, #31
 800600a:	2201      	movs	r2, #1
 800600c:	fa02 f303 	lsl.w	r3, r2, r3
 8006010:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	6a1a      	ldr	r2, [r3, #32]
 8006016:	697b      	ldr	r3, [r7, #20]
 8006018:	43db      	mvns	r3, r3
 800601a:	401a      	ands	r2, r3
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	6a1a      	ldr	r2, [r3, #32]
 8006024:	68bb      	ldr	r3, [r7, #8]
 8006026:	f003 031f 	and.w	r3, r3, #31
 800602a:	6879      	ldr	r1, [r7, #4]
 800602c:	fa01 f303 	lsl.w	r3, r1, r3
 8006030:	431a      	orrs	r2, r3
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	621a      	str	r2, [r3, #32]
}
 8006036:	bf00      	nop
 8006038:	371c      	adds	r7, #28
 800603a:	46bd      	mov	sp, r7
 800603c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006040:	4770      	bx	lr
	...

08006044 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006044:	b480      	push	{r7}
 8006046:	b085      	sub	sp, #20
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
 800604c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006054:	2b01      	cmp	r3, #1
 8006056:	d101      	bne.n	800605c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006058:	2302      	movs	r3, #2
 800605a:	e05a      	b.n	8006112 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2201      	movs	r2, #1
 8006060:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2202      	movs	r2, #2
 8006068:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	685b      	ldr	r3, [r3, #4]
 8006072:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	689b      	ldr	r3, [r3, #8]
 800607a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006082:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006084:	683b      	ldr	r3, [r7, #0]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	68fa      	ldr	r2, [r7, #12]
 800608a:	4313      	orrs	r3, r2
 800608c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	68fa      	ldr	r2, [r7, #12]
 8006094:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	4a21      	ldr	r2, [pc, #132]	@ (8006120 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800609c:	4293      	cmp	r3, r2
 800609e:	d022      	beq.n	80060e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80060a8:	d01d      	beq.n	80060e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	4a1d      	ldr	r2, [pc, #116]	@ (8006124 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80060b0:	4293      	cmp	r3, r2
 80060b2:	d018      	beq.n	80060e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	4a1b      	ldr	r2, [pc, #108]	@ (8006128 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80060ba:	4293      	cmp	r3, r2
 80060bc:	d013      	beq.n	80060e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	4a1a      	ldr	r2, [pc, #104]	@ (800612c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80060c4:	4293      	cmp	r3, r2
 80060c6:	d00e      	beq.n	80060e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	4a18      	ldr	r2, [pc, #96]	@ (8006130 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80060ce:	4293      	cmp	r3, r2
 80060d0:	d009      	beq.n	80060e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	4a17      	ldr	r2, [pc, #92]	@ (8006134 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80060d8:	4293      	cmp	r3, r2
 80060da:	d004      	beq.n	80060e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	4a15      	ldr	r2, [pc, #84]	@ (8006138 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80060e2:	4293      	cmp	r3, r2
 80060e4:	d10c      	bne.n	8006100 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80060e6:	68bb      	ldr	r3, [r7, #8]
 80060e8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80060ec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80060ee:	683b      	ldr	r3, [r7, #0]
 80060f0:	685b      	ldr	r3, [r3, #4]
 80060f2:	68ba      	ldr	r2, [r7, #8]
 80060f4:	4313      	orrs	r3, r2
 80060f6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	68ba      	ldr	r2, [r7, #8]
 80060fe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2201      	movs	r2, #1
 8006104:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2200      	movs	r2, #0
 800610c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006110:	2300      	movs	r3, #0
}
 8006112:	4618      	mov	r0, r3
 8006114:	3714      	adds	r7, #20
 8006116:	46bd      	mov	sp, r7
 8006118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611c:	4770      	bx	lr
 800611e:	bf00      	nop
 8006120:	40010000 	.word	0x40010000
 8006124:	40000400 	.word	0x40000400
 8006128:	40000800 	.word	0x40000800
 800612c:	40000c00 	.word	0x40000c00
 8006130:	40010400 	.word	0x40010400
 8006134:	40014000 	.word	0x40014000
 8006138:	40001800 	.word	0x40001800

0800613c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800613c:	b480      	push	{r7}
 800613e:	b083      	sub	sp, #12
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006144:	bf00      	nop
 8006146:	370c      	adds	r7, #12
 8006148:	46bd      	mov	sp, r7
 800614a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614e:	4770      	bx	lr

08006150 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006150:	b480      	push	{r7}
 8006152:	b083      	sub	sp, #12
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006158:	bf00      	nop
 800615a:	370c      	adds	r7, #12
 800615c:	46bd      	mov	sp, r7
 800615e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006162:	4770      	bx	lr

08006164 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006164:	b580      	push	{r7, lr}
 8006166:	b082      	sub	sp, #8
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2b00      	cmp	r3, #0
 8006170:	d101      	bne.n	8006176 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006172:	2301      	movs	r3, #1
 8006174:	e042      	b.n	80061fc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800617c:	b2db      	uxtb	r3, r3
 800617e:	2b00      	cmp	r3, #0
 8006180:	d106      	bne.n	8006190 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	2200      	movs	r2, #0
 8006186:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800618a:	6878      	ldr	r0, [r7, #4]
 800618c:	f7fc fd5c 	bl	8002c48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2224      	movs	r2, #36	@ 0x24
 8006194:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	68da      	ldr	r2, [r3, #12]
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80061a6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80061a8:	6878      	ldr	r0, [r7, #4]
 80061aa:	f000 fcdb 	bl	8006b64 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	691a      	ldr	r2, [r3, #16]
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80061bc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	695a      	ldr	r2, [r3, #20]
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80061cc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	68da      	ldr	r2, [r3, #12]
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80061dc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	2200      	movs	r2, #0
 80061e2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2220      	movs	r2, #32
 80061e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2220      	movs	r2, #32
 80061f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2200      	movs	r2, #0
 80061f8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80061fa:	2300      	movs	r3, #0
}
 80061fc:	4618      	mov	r0, r3
 80061fe:	3708      	adds	r7, #8
 8006200:	46bd      	mov	sp, r7
 8006202:	bd80      	pop	{r7, pc}

08006204 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006204:	b580      	push	{r7, lr}
 8006206:	b084      	sub	sp, #16
 8006208:	af00      	add	r7, sp, #0
 800620a:	60f8      	str	r0, [r7, #12]
 800620c:	60b9      	str	r1, [r7, #8]
 800620e:	4613      	mov	r3, r2
 8006210:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006218:	b2db      	uxtb	r3, r3
 800621a:	2b20      	cmp	r3, #32
 800621c:	d112      	bne.n	8006244 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800621e:	68bb      	ldr	r3, [r7, #8]
 8006220:	2b00      	cmp	r3, #0
 8006222:	d002      	beq.n	800622a <HAL_UART_Receive_IT+0x26>
 8006224:	88fb      	ldrh	r3, [r7, #6]
 8006226:	2b00      	cmp	r3, #0
 8006228:	d101      	bne.n	800622e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800622a:	2301      	movs	r3, #1
 800622c:	e00b      	b.n	8006246 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	2200      	movs	r2, #0
 8006232:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006234:	88fb      	ldrh	r3, [r7, #6]
 8006236:	461a      	mov	r2, r3
 8006238:	68b9      	ldr	r1, [r7, #8]
 800623a:	68f8      	ldr	r0, [r7, #12]
 800623c:	f000 faba 	bl	80067b4 <UART_Start_Receive_IT>
 8006240:	4603      	mov	r3, r0
 8006242:	e000      	b.n	8006246 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8006244:	2302      	movs	r3, #2
  }
}
 8006246:	4618      	mov	r0, r3
 8006248:	3710      	adds	r7, #16
 800624a:	46bd      	mov	sp, r7
 800624c:	bd80      	pop	{r7, pc}
	...

08006250 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006250:	b580      	push	{r7, lr}
 8006252:	b0ba      	sub	sp, #232	@ 0xe8
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	68db      	ldr	r3, [r3, #12]
 8006268:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	695b      	ldr	r3, [r3, #20]
 8006272:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8006276:	2300      	movs	r3, #0
 8006278:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800627c:	2300      	movs	r3, #0
 800627e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006282:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006286:	f003 030f 	and.w	r3, r3, #15
 800628a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800628e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006292:	2b00      	cmp	r3, #0
 8006294:	d10f      	bne.n	80062b6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006296:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800629a:	f003 0320 	and.w	r3, r3, #32
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d009      	beq.n	80062b6 <HAL_UART_IRQHandler+0x66>
 80062a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80062a6:	f003 0320 	and.w	r3, r3, #32
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d003      	beq.n	80062b6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80062ae:	6878      	ldr	r0, [r7, #4]
 80062b0:	f000 fb99 	bl	80069e6 <UART_Receive_IT>
      return;
 80062b4:	e25b      	b.n	800676e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80062b6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	f000 80de 	beq.w	800647c <HAL_UART_IRQHandler+0x22c>
 80062c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80062c4:	f003 0301 	and.w	r3, r3, #1
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d106      	bne.n	80062da <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80062cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80062d0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	f000 80d1 	beq.w	800647c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80062da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80062de:	f003 0301 	and.w	r3, r3, #1
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d00b      	beq.n	80062fe <HAL_UART_IRQHandler+0xae>
 80062e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80062ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d005      	beq.n	80062fe <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80062f6:	f043 0201 	orr.w	r2, r3, #1
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80062fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006302:	f003 0304 	and.w	r3, r3, #4
 8006306:	2b00      	cmp	r3, #0
 8006308:	d00b      	beq.n	8006322 <HAL_UART_IRQHandler+0xd2>
 800630a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800630e:	f003 0301 	and.w	r3, r3, #1
 8006312:	2b00      	cmp	r3, #0
 8006314:	d005      	beq.n	8006322 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800631a:	f043 0202 	orr.w	r2, r3, #2
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006322:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006326:	f003 0302 	and.w	r3, r3, #2
 800632a:	2b00      	cmp	r3, #0
 800632c:	d00b      	beq.n	8006346 <HAL_UART_IRQHandler+0xf6>
 800632e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006332:	f003 0301 	and.w	r3, r3, #1
 8006336:	2b00      	cmp	r3, #0
 8006338:	d005      	beq.n	8006346 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800633e:	f043 0204 	orr.w	r2, r3, #4
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006346:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800634a:	f003 0308 	and.w	r3, r3, #8
 800634e:	2b00      	cmp	r3, #0
 8006350:	d011      	beq.n	8006376 <HAL_UART_IRQHandler+0x126>
 8006352:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006356:	f003 0320 	and.w	r3, r3, #32
 800635a:	2b00      	cmp	r3, #0
 800635c:	d105      	bne.n	800636a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800635e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006362:	f003 0301 	and.w	r3, r3, #1
 8006366:	2b00      	cmp	r3, #0
 8006368:	d005      	beq.n	8006376 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800636e:	f043 0208 	orr.w	r2, r3, #8
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800637a:	2b00      	cmp	r3, #0
 800637c:	f000 81f2 	beq.w	8006764 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006380:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006384:	f003 0320 	and.w	r3, r3, #32
 8006388:	2b00      	cmp	r3, #0
 800638a:	d008      	beq.n	800639e <HAL_UART_IRQHandler+0x14e>
 800638c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006390:	f003 0320 	and.w	r3, r3, #32
 8006394:	2b00      	cmp	r3, #0
 8006396:	d002      	beq.n	800639e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006398:	6878      	ldr	r0, [r7, #4]
 800639a:	f000 fb24 	bl	80069e6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	695b      	ldr	r3, [r3, #20]
 80063a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063a8:	2b40      	cmp	r3, #64	@ 0x40
 80063aa:	bf0c      	ite	eq
 80063ac:	2301      	moveq	r3, #1
 80063ae:	2300      	movne	r3, #0
 80063b0:	b2db      	uxtb	r3, r3
 80063b2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80063ba:	f003 0308 	and.w	r3, r3, #8
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d103      	bne.n	80063ca <HAL_UART_IRQHandler+0x17a>
 80063c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d04f      	beq.n	800646a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80063ca:	6878      	ldr	r0, [r7, #4]
 80063cc:	f000 fa2c 	bl	8006828 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	695b      	ldr	r3, [r3, #20]
 80063d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063da:	2b40      	cmp	r3, #64	@ 0x40
 80063dc:	d141      	bne.n	8006462 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	3314      	adds	r3, #20
 80063e4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063e8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80063ec:	e853 3f00 	ldrex	r3, [r3]
 80063f0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80063f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80063f8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80063fc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	3314      	adds	r3, #20
 8006406:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800640a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800640e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006412:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006416:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800641a:	e841 2300 	strex	r3, r2, [r1]
 800641e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006422:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006426:	2b00      	cmp	r3, #0
 8006428:	d1d9      	bne.n	80063de <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800642e:	2b00      	cmp	r3, #0
 8006430:	d013      	beq.n	800645a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006436:	4a7e      	ldr	r2, [pc, #504]	@ (8006630 <HAL_UART_IRQHandler+0x3e0>)
 8006438:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800643e:	4618      	mov	r0, r3
 8006440:	f7fd ff35 	bl	80042ae <HAL_DMA_Abort_IT>
 8006444:	4603      	mov	r3, r0
 8006446:	2b00      	cmp	r3, #0
 8006448:	d016      	beq.n	8006478 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800644e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006450:	687a      	ldr	r2, [r7, #4]
 8006452:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006454:	4610      	mov	r0, r2
 8006456:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006458:	e00e      	b.n	8006478 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800645a:	6878      	ldr	r0, [r7, #4]
 800645c:	f000 f994 	bl	8006788 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006460:	e00a      	b.n	8006478 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006462:	6878      	ldr	r0, [r7, #4]
 8006464:	f000 f990 	bl	8006788 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006468:	e006      	b.n	8006478 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800646a:	6878      	ldr	r0, [r7, #4]
 800646c:	f000 f98c 	bl	8006788 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2200      	movs	r2, #0
 8006474:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8006476:	e175      	b.n	8006764 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006478:	bf00      	nop
    return;
 800647a:	e173      	b.n	8006764 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006480:	2b01      	cmp	r3, #1
 8006482:	f040 814f 	bne.w	8006724 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006486:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800648a:	f003 0310 	and.w	r3, r3, #16
 800648e:	2b00      	cmp	r3, #0
 8006490:	f000 8148 	beq.w	8006724 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006494:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006498:	f003 0310 	and.w	r3, r3, #16
 800649c:	2b00      	cmp	r3, #0
 800649e:	f000 8141 	beq.w	8006724 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80064a2:	2300      	movs	r3, #0
 80064a4:	60bb      	str	r3, [r7, #8]
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	60bb      	str	r3, [r7, #8]
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	685b      	ldr	r3, [r3, #4]
 80064b4:	60bb      	str	r3, [r7, #8]
 80064b6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	695b      	ldr	r3, [r3, #20]
 80064be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80064c2:	2b40      	cmp	r3, #64	@ 0x40
 80064c4:	f040 80b6 	bne.w	8006634 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	685b      	ldr	r3, [r3, #4]
 80064d0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80064d4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80064d8:	2b00      	cmp	r3, #0
 80064da:	f000 8145 	beq.w	8006768 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80064e2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80064e6:	429a      	cmp	r2, r3
 80064e8:	f080 813e 	bcs.w	8006768 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80064f2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80064f8:	69db      	ldr	r3, [r3, #28]
 80064fa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80064fe:	f000 8088 	beq.w	8006612 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	330c      	adds	r3, #12
 8006508:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800650c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006510:	e853 3f00 	ldrex	r3, [r3]
 8006514:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006518:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800651c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006520:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	330c      	adds	r3, #12
 800652a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800652e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006532:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006536:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800653a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800653e:	e841 2300 	strex	r3, r2, [r1]
 8006542:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006546:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800654a:	2b00      	cmp	r3, #0
 800654c:	d1d9      	bne.n	8006502 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	3314      	adds	r3, #20
 8006554:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006556:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006558:	e853 3f00 	ldrex	r3, [r3]
 800655c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800655e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006560:	f023 0301 	bic.w	r3, r3, #1
 8006564:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	3314      	adds	r3, #20
 800656e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006572:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006576:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006578:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800657a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800657e:	e841 2300 	strex	r3, r2, [r1]
 8006582:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006584:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006586:	2b00      	cmp	r3, #0
 8006588:	d1e1      	bne.n	800654e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	3314      	adds	r3, #20
 8006590:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006592:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006594:	e853 3f00 	ldrex	r3, [r3]
 8006598:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800659a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800659c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80065a0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	3314      	adds	r3, #20
 80065aa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80065ae:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80065b0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065b2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80065b4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80065b6:	e841 2300 	strex	r3, r2, [r1]
 80065ba:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80065bc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d1e3      	bne.n	800658a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	2220      	movs	r2, #32
 80065c6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	2200      	movs	r2, #0
 80065ce:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	330c      	adds	r3, #12
 80065d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80065da:	e853 3f00 	ldrex	r3, [r3]
 80065de:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80065e0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80065e2:	f023 0310 	bic.w	r3, r3, #16
 80065e6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	330c      	adds	r3, #12
 80065f0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80065f4:	65ba      	str	r2, [r7, #88]	@ 0x58
 80065f6:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065f8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80065fa:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80065fc:	e841 2300 	strex	r3, r2, [r1]
 8006600:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006602:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006604:	2b00      	cmp	r3, #0
 8006606:	d1e3      	bne.n	80065d0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800660c:	4618      	mov	r0, r3
 800660e:	f7fd fdde 	bl	80041ce <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	2202      	movs	r2, #2
 8006616:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006620:	b29b      	uxth	r3, r3
 8006622:	1ad3      	subs	r3, r2, r3
 8006624:	b29b      	uxth	r3, r3
 8006626:	4619      	mov	r1, r3
 8006628:	6878      	ldr	r0, [r7, #4]
 800662a:	f000 f8b7 	bl	800679c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800662e:	e09b      	b.n	8006768 <HAL_UART_IRQHandler+0x518>
 8006630:	080068ef 	.word	0x080068ef
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800663c:	b29b      	uxth	r3, r3
 800663e:	1ad3      	subs	r3, r2, r3
 8006640:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006648:	b29b      	uxth	r3, r3
 800664a:	2b00      	cmp	r3, #0
 800664c:	f000 808e 	beq.w	800676c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006650:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006654:	2b00      	cmp	r3, #0
 8006656:	f000 8089 	beq.w	800676c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	330c      	adds	r3, #12
 8006660:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006662:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006664:	e853 3f00 	ldrex	r3, [r3]
 8006668:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800666a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800666c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006670:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	330c      	adds	r3, #12
 800667a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800667e:	647a      	str	r2, [r7, #68]	@ 0x44
 8006680:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006682:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006684:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006686:	e841 2300 	strex	r3, r2, [r1]
 800668a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800668c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800668e:	2b00      	cmp	r3, #0
 8006690:	d1e3      	bne.n	800665a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	3314      	adds	r3, #20
 8006698:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800669a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800669c:	e853 3f00 	ldrex	r3, [r3]
 80066a0:	623b      	str	r3, [r7, #32]
   return(result);
 80066a2:	6a3b      	ldr	r3, [r7, #32]
 80066a4:	f023 0301 	bic.w	r3, r3, #1
 80066a8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	3314      	adds	r3, #20
 80066b2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80066b6:	633a      	str	r2, [r7, #48]	@ 0x30
 80066b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066ba:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80066bc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80066be:	e841 2300 	strex	r3, r2, [r1]
 80066c2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80066c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d1e3      	bne.n	8006692 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	2220      	movs	r2, #32
 80066ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	2200      	movs	r2, #0
 80066d6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	330c      	adds	r3, #12
 80066de:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066e0:	693b      	ldr	r3, [r7, #16]
 80066e2:	e853 3f00 	ldrex	r3, [r3]
 80066e6:	60fb      	str	r3, [r7, #12]
   return(result);
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	f023 0310 	bic.w	r3, r3, #16
 80066ee:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	330c      	adds	r3, #12
 80066f8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80066fc:	61fa      	str	r2, [r7, #28]
 80066fe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006700:	69b9      	ldr	r1, [r7, #24]
 8006702:	69fa      	ldr	r2, [r7, #28]
 8006704:	e841 2300 	strex	r3, r2, [r1]
 8006708:	617b      	str	r3, [r7, #20]
   return(result);
 800670a:	697b      	ldr	r3, [r7, #20]
 800670c:	2b00      	cmp	r3, #0
 800670e:	d1e3      	bne.n	80066d8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2202      	movs	r2, #2
 8006714:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006716:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800671a:	4619      	mov	r1, r3
 800671c:	6878      	ldr	r0, [r7, #4]
 800671e:	f000 f83d 	bl	800679c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006722:	e023      	b.n	800676c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006724:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006728:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800672c:	2b00      	cmp	r3, #0
 800672e:	d009      	beq.n	8006744 <HAL_UART_IRQHandler+0x4f4>
 8006730:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006734:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006738:	2b00      	cmp	r3, #0
 800673a:	d003      	beq.n	8006744 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800673c:	6878      	ldr	r0, [r7, #4]
 800673e:	f000 f8ea 	bl	8006916 <UART_Transmit_IT>
    return;
 8006742:	e014      	b.n	800676e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006744:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006748:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800674c:	2b00      	cmp	r3, #0
 800674e:	d00e      	beq.n	800676e <HAL_UART_IRQHandler+0x51e>
 8006750:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006754:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006758:	2b00      	cmp	r3, #0
 800675a:	d008      	beq.n	800676e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800675c:	6878      	ldr	r0, [r7, #4]
 800675e:	f000 f92a 	bl	80069b6 <UART_EndTransmit_IT>
    return;
 8006762:	e004      	b.n	800676e <HAL_UART_IRQHandler+0x51e>
    return;
 8006764:	bf00      	nop
 8006766:	e002      	b.n	800676e <HAL_UART_IRQHandler+0x51e>
      return;
 8006768:	bf00      	nop
 800676a:	e000      	b.n	800676e <HAL_UART_IRQHandler+0x51e>
      return;
 800676c:	bf00      	nop
  }
}
 800676e:	37e8      	adds	r7, #232	@ 0xe8
 8006770:	46bd      	mov	sp, r7
 8006772:	bd80      	pop	{r7, pc}

08006774 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006774:	b480      	push	{r7}
 8006776:	b083      	sub	sp, #12
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800677c:	bf00      	nop
 800677e:	370c      	adds	r7, #12
 8006780:	46bd      	mov	sp, r7
 8006782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006786:	4770      	bx	lr

08006788 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006788:	b480      	push	{r7}
 800678a:	b083      	sub	sp, #12
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006790:	bf00      	nop
 8006792:	370c      	adds	r7, #12
 8006794:	46bd      	mov	sp, r7
 8006796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679a:	4770      	bx	lr

0800679c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800679c:	b480      	push	{r7}
 800679e:	b083      	sub	sp, #12
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
 80067a4:	460b      	mov	r3, r1
 80067a6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80067a8:	bf00      	nop
 80067aa:	370c      	adds	r7, #12
 80067ac:	46bd      	mov	sp, r7
 80067ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b2:	4770      	bx	lr

080067b4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80067b4:	b480      	push	{r7}
 80067b6:	b085      	sub	sp, #20
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	60f8      	str	r0, [r7, #12]
 80067bc:	60b9      	str	r1, [r7, #8]
 80067be:	4613      	mov	r3, r2
 80067c0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	68ba      	ldr	r2, [r7, #8]
 80067c6:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	88fa      	ldrh	r2, [r7, #6]
 80067cc:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	88fa      	ldrh	r2, [r7, #6]
 80067d2:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	2200      	movs	r2, #0
 80067d8:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	2222      	movs	r2, #34	@ 0x22
 80067de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	691b      	ldr	r3, [r3, #16]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d007      	beq.n	80067fa <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	68da      	ldr	r2, [r3, #12]
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80067f8:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	695a      	ldr	r2, [r3, #20]
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	f042 0201 	orr.w	r2, r2, #1
 8006808:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	68da      	ldr	r2, [r3, #12]
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f042 0220 	orr.w	r2, r2, #32
 8006818:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800681a:	2300      	movs	r3, #0
}
 800681c:	4618      	mov	r0, r3
 800681e:	3714      	adds	r7, #20
 8006820:	46bd      	mov	sp, r7
 8006822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006826:	4770      	bx	lr

08006828 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006828:	b480      	push	{r7}
 800682a:	b095      	sub	sp, #84	@ 0x54
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	330c      	adds	r3, #12
 8006836:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006838:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800683a:	e853 3f00 	ldrex	r3, [r3]
 800683e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006840:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006842:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006846:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	330c      	adds	r3, #12
 800684e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006850:	643a      	str	r2, [r7, #64]	@ 0x40
 8006852:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006854:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006856:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006858:	e841 2300 	strex	r3, r2, [r1]
 800685c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800685e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006860:	2b00      	cmp	r3, #0
 8006862:	d1e5      	bne.n	8006830 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	3314      	adds	r3, #20
 800686a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800686c:	6a3b      	ldr	r3, [r7, #32]
 800686e:	e853 3f00 	ldrex	r3, [r3]
 8006872:	61fb      	str	r3, [r7, #28]
   return(result);
 8006874:	69fb      	ldr	r3, [r7, #28]
 8006876:	f023 0301 	bic.w	r3, r3, #1
 800687a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	3314      	adds	r3, #20
 8006882:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006884:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006886:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006888:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800688a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800688c:	e841 2300 	strex	r3, r2, [r1]
 8006890:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006892:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006894:	2b00      	cmp	r3, #0
 8006896:	d1e5      	bne.n	8006864 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800689c:	2b01      	cmp	r3, #1
 800689e:	d119      	bne.n	80068d4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	330c      	adds	r3, #12
 80068a6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	e853 3f00 	ldrex	r3, [r3]
 80068ae:	60bb      	str	r3, [r7, #8]
   return(result);
 80068b0:	68bb      	ldr	r3, [r7, #8]
 80068b2:	f023 0310 	bic.w	r3, r3, #16
 80068b6:	647b      	str	r3, [r7, #68]	@ 0x44
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	330c      	adds	r3, #12
 80068be:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80068c0:	61ba      	str	r2, [r7, #24]
 80068c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068c4:	6979      	ldr	r1, [r7, #20]
 80068c6:	69ba      	ldr	r2, [r7, #24]
 80068c8:	e841 2300 	strex	r3, r2, [r1]
 80068cc:	613b      	str	r3, [r7, #16]
   return(result);
 80068ce:	693b      	ldr	r3, [r7, #16]
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d1e5      	bne.n	80068a0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2220      	movs	r2, #32
 80068d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2200      	movs	r2, #0
 80068e0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80068e2:	bf00      	nop
 80068e4:	3754      	adds	r7, #84	@ 0x54
 80068e6:	46bd      	mov	sp, r7
 80068e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ec:	4770      	bx	lr

080068ee <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80068ee:	b580      	push	{r7, lr}
 80068f0:	b084      	sub	sp, #16
 80068f2:	af00      	add	r7, sp, #0
 80068f4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068fa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	2200      	movs	r2, #0
 8006900:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	2200      	movs	r2, #0
 8006906:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006908:	68f8      	ldr	r0, [r7, #12]
 800690a:	f7ff ff3d 	bl	8006788 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800690e:	bf00      	nop
 8006910:	3710      	adds	r7, #16
 8006912:	46bd      	mov	sp, r7
 8006914:	bd80      	pop	{r7, pc}

08006916 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006916:	b480      	push	{r7}
 8006918:	b085      	sub	sp, #20
 800691a:	af00      	add	r7, sp, #0
 800691c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006924:	b2db      	uxtb	r3, r3
 8006926:	2b21      	cmp	r3, #33	@ 0x21
 8006928:	d13e      	bne.n	80069a8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	689b      	ldr	r3, [r3, #8]
 800692e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006932:	d114      	bne.n	800695e <UART_Transmit_IT+0x48>
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	691b      	ldr	r3, [r3, #16]
 8006938:	2b00      	cmp	r3, #0
 800693a:	d110      	bne.n	800695e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	6a1b      	ldr	r3, [r3, #32]
 8006940:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	881b      	ldrh	r3, [r3, #0]
 8006946:	461a      	mov	r2, r3
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006950:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	6a1b      	ldr	r3, [r3, #32]
 8006956:	1c9a      	adds	r2, r3, #2
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	621a      	str	r2, [r3, #32]
 800695c:	e008      	b.n	8006970 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	6a1b      	ldr	r3, [r3, #32]
 8006962:	1c59      	adds	r1, r3, #1
 8006964:	687a      	ldr	r2, [r7, #4]
 8006966:	6211      	str	r1, [r2, #32]
 8006968:	781a      	ldrb	r2, [r3, #0]
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006974:	b29b      	uxth	r3, r3
 8006976:	3b01      	subs	r3, #1
 8006978:	b29b      	uxth	r3, r3
 800697a:	687a      	ldr	r2, [r7, #4]
 800697c:	4619      	mov	r1, r3
 800697e:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8006980:	2b00      	cmp	r3, #0
 8006982:	d10f      	bne.n	80069a4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	68da      	ldr	r2, [r3, #12]
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006992:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	68da      	ldr	r2, [r3, #12]
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80069a2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80069a4:	2300      	movs	r3, #0
 80069a6:	e000      	b.n	80069aa <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80069a8:	2302      	movs	r3, #2
  }
}
 80069aa:	4618      	mov	r0, r3
 80069ac:	3714      	adds	r7, #20
 80069ae:	46bd      	mov	sp, r7
 80069b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b4:	4770      	bx	lr

080069b6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80069b6:	b580      	push	{r7, lr}
 80069b8:	b082      	sub	sp, #8
 80069ba:	af00      	add	r7, sp, #0
 80069bc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	68da      	ldr	r2, [r3, #12]
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80069cc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	2220      	movs	r2, #32
 80069d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80069d6:	6878      	ldr	r0, [r7, #4]
 80069d8:	f7ff fecc 	bl	8006774 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80069dc:	2300      	movs	r3, #0
}
 80069de:	4618      	mov	r0, r3
 80069e0:	3708      	adds	r7, #8
 80069e2:	46bd      	mov	sp, r7
 80069e4:	bd80      	pop	{r7, pc}

080069e6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80069e6:	b580      	push	{r7, lr}
 80069e8:	b08c      	sub	sp, #48	@ 0x30
 80069ea:	af00      	add	r7, sp, #0
 80069ec:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80069f4:	b2db      	uxtb	r3, r3
 80069f6:	2b22      	cmp	r3, #34	@ 0x22
 80069f8:	f040 80ae 	bne.w	8006b58 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	689b      	ldr	r3, [r3, #8]
 8006a00:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006a04:	d117      	bne.n	8006a36 <UART_Receive_IT+0x50>
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	691b      	ldr	r3, [r3, #16]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d113      	bne.n	8006a36 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006a0e:	2300      	movs	r3, #0
 8006a10:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a16:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	685b      	ldr	r3, [r3, #4]
 8006a1e:	b29b      	uxth	r3, r3
 8006a20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a24:	b29a      	uxth	r2, r3
 8006a26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a28:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a2e:	1c9a      	adds	r2, r3, #2
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	629a      	str	r2, [r3, #40]	@ 0x28
 8006a34:	e026      	b.n	8006a84 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8006a3c:	2300      	movs	r3, #0
 8006a3e:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	689b      	ldr	r3, [r3, #8]
 8006a44:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006a48:	d007      	beq.n	8006a5a <UART_Receive_IT+0x74>
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	689b      	ldr	r3, [r3, #8]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d10a      	bne.n	8006a68 <UART_Receive_IT+0x82>
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	691b      	ldr	r3, [r3, #16]
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d106      	bne.n	8006a68 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	685b      	ldr	r3, [r3, #4]
 8006a60:	b2da      	uxtb	r2, r3
 8006a62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a64:	701a      	strb	r2, [r3, #0]
 8006a66:	e008      	b.n	8006a7a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	685b      	ldr	r3, [r3, #4]
 8006a6e:	b2db      	uxtb	r3, r3
 8006a70:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006a74:	b2da      	uxtb	r2, r3
 8006a76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a78:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a7e:	1c5a      	adds	r2, r3, #1
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006a88:	b29b      	uxth	r3, r3
 8006a8a:	3b01      	subs	r3, #1
 8006a8c:	b29b      	uxth	r3, r3
 8006a8e:	687a      	ldr	r2, [r7, #4]
 8006a90:	4619      	mov	r1, r3
 8006a92:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d15d      	bne.n	8006b54 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	68da      	ldr	r2, [r3, #12]
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	f022 0220 	bic.w	r2, r2, #32
 8006aa6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	68da      	ldr	r2, [r3, #12]
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006ab6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	695a      	ldr	r2, [r3, #20]
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	f022 0201 	bic.w	r2, r2, #1
 8006ac6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	2220      	movs	r2, #32
 8006acc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ada:	2b01      	cmp	r3, #1
 8006adc:	d135      	bne.n	8006b4a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	2200      	movs	r2, #0
 8006ae2:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	330c      	adds	r3, #12
 8006aea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aec:	697b      	ldr	r3, [r7, #20]
 8006aee:	e853 3f00 	ldrex	r3, [r3]
 8006af2:	613b      	str	r3, [r7, #16]
   return(result);
 8006af4:	693b      	ldr	r3, [r7, #16]
 8006af6:	f023 0310 	bic.w	r3, r3, #16
 8006afa:	627b      	str	r3, [r7, #36]	@ 0x24
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	330c      	adds	r3, #12
 8006b02:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006b04:	623a      	str	r2, [r7, #32]
 8006b06:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b08:	69f9      	ldr	r1, [r7, #28]
 8006b0a:	6a3a      	ldr	r2, [r7, #32]
 8006b0c:	e841 2300 	strex	r3, r2, [r1]
 8006b10:	61bb      	str	r3, [r7, #24]
   return(result);
 8006b12:	69bb      	ldr	r3, [r7, #24]
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d1e5      	bne.n	8006ae4 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	f003 0310 	and.w	r3, r3, #16
 8006b22:	2b10      	cmp	r3, #16
 8006b24:	d10a      	bne.n	8006b3c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006b26:	2300      	movs	r3, #0
 8006b28:	60fb      	str	r3, [r7, #12]
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	60fb      	str	r3, [r7, #12]
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	685b      	ldr	r3, [r3, #4]
 8006b38:	60fb      	str	r3, [r7, #12]
 8006b3a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006b40:	4619      	mov	r1, r3
 8006b42:	6878      	ldr	r0, [r7, #4]
 8006b44:	f7ff fe2a 	bl	800679c <HAL_UARTEx_RxEventCallback>
 8006b48:	e002      	b.n	8006b50 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006b4a:	6878      	ldr	r0, [r7, #4]
 8006b4c:	f7fb ff2a 	bl	80029a4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006b50:	2300      	movs	r3, #0
 8006b52:	e002      	b.n	8006b5a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006b54:	2300      	movs	r3, #0
 8006b56:	e000      	b.n	8006b5a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006b58:	2302      	movs	r3, #2
  }
}
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	3730      	adds	r7, #48	@ 0x30
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	bd80      	pop	{r7, pc}
	...

08006b64 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006b64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006b68:	b0c0      	sub	sp, #256	@ 0x100
 8006b6a:	af00      	add	r7, sp, #0
 8006b6c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006b70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	691b      	ldr	r3, [r3, #16]
 8006b78:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006b7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b80:	68d9      	ldr	r1, [r3, #12]
 8006b82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b86:	681a      	ldr	r2, [r3, #0]
 8006b88:	ea40 0301 	orr.w	r3, r0, r1
 8006b8c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006b8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b92:	689a      	ldr	r2, [r3, #8]
 8006b94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b98:	691b      	ldr	r3, [r3, #16]
 8006b9a:	431a      	orrs	r2, r3
 8006b9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ba0:	695b      	ldr	r3, [r3, #20]
 8006ba2:	431a      	orrs	r2, r3
 8006ba4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ba8:	69db      	ldr	r3, [r3, #28]
 8006baa:	4313      	orrs	r3, r2
 8006bac:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006bb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	68db      	ldr	r3, [r3, #12]
 8006bb8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006bbc:	f021 010c 	bic.w	r1, r1, #12
 8006bc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006bc4:	681a      	ldr	r2, [r3, #0]
 8006bc6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006bca:	430b      	orrs	r3, r1
 8006bcc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006bce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	695b      	ldr	r3, [r3, #20]
 8006bd6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006bda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006bde:	6999      	ldr	r1, [r3, #24]
 8006be0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006be4:	681a      	ldr	r2, [r3, #0]
 8006be6:	ea40 0301 	orr.w	r3, r0, r1
 8006bea:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006bec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006bf0:	681a      	ldr	r2, [r3, #0]
 8006bf2:	4b8f      	ldr	r3, [pc, #572]	@ (8006e30 <UART_SetConfig+0x2cc>)
 8006bf4:	429a      	cmp	r2, r3
 8006bf6:	d005      	beq.n	8006c04 <UART_SetConfig+0xa0>
 8006bf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006bfc:	681a      	ldr	r2, [r3, #0]
 8006bfe:	4b8d      	ldr	r3, [pc, #564]	@ (8006e34 <UART_SetConfig+0x2d0>)
 8006c00:	429a      	cmp	r2, r3
 8006c02:	d104      	bne.n	8006c0e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006c04:	f7fe f9fa 	bl	8004ffc <HAL_RCC_GetPCLK2Freq>
 8006c08:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006c0c:	e003      	b.n	8006c16 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006c0e:	f7fe f9e1 	bl	8004fd4 <HAL_RCC_GetPCLK1Freq>
 8006c12:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006c16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c1a:	69db      	ldr	r3, [r3, #28]
 8006c1c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006c20:	f040 810c 	bne.w	8006e3c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006c24:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006c28:	2200      	movs	r2, #0
 8006c2a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006c2e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006c32:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006c36:	4622      	mov	r2, r4
 8006c38:	462b      	mov	r3, r5
 8006c3a:	1891      	adds	r1, r2, r2
 8006c3c:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006c3e:	415b      	adcs	r3, r3
 8006c40:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006c42:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006c46:	4621      	mov	r1, r4
 8006c48:	eb12 0801 	adds.w	r8, r2, r1
 8006c4c:	4629      	mov	r1, r5
 8006c4e:	eb43 0901 	adc.w	r9, r3, r1
 8006c52:	f04f 0200 	mov.w	r2, #0
 8006c56:	f04f 0300 	mov.w	r3, #0
 8006c5a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006c5e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006c62:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006c66:	4690      	mov	r8, r2
 8006c68:	4699      	mov	r9, r3
 8006c6a:	4623      	mov	r3, r4
 8006c6c:	eb18 0303 	adds.w	r3, r8, r3
 8006c70:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006c74:	462b      	mov	r3, r5
 8006c76:	eb49 0303 	adc.w	r3, r9, r3
 8006c7a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006c7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c82:	685b      	ldr	r3, [r3, #4]
 8006c84:	2200      	movs	r2, #0
 8006c86:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006c8a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006c8e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006c92:	460b      	mov	r3, r1
 8006c94:	18db      	adds	r3, r3, r3
 8006c96:	653b      	str	r3, [r7, #80]	@ 0x50
 8006c98:	4613      	mov	r3, r2
 8006c9a:	eb42 0303 	adc.w	r3, r2, r3
 8006c9e:	657b      	str	r3, [r7, #84]	@ 0x54
 8006ca0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006ca4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006ca8:	f7f9 fae2 	bl	8000270 <__aeabi_uldivmod>
 8006cac:	4602      	mov	r2, r0
 8006cae:	460b      	mov	r3, r1
 8006cb0:	4b61      	ldr	r3, [pc, #388]	@ (8006e38 <UART_SetConfig+0x2d4>)
 8006cb2:	fba3 2302 	umull	r2, r3, r3, r2
 8006cb6:	095b      	lsrs	r3, r3, #5
 8006cb8:	011c      	lsls	r4, r3, #4
 8006cba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006cc4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006cc8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006ccc:	4642      	mov	r2, r8
 8006cce:	464b      	mov	r3, r9
 8006cd0:	1891      	adds	r1, r2, r2
 8006cd2:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006cd4:	415b      	adcs	r3, r3
 8006cd6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006cd8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006cdc:	4641      	mov	r1, r8
 8006cde:	eb12 0a01 	adds.w	sl, r2, r1
 8006ce2:	4649      	mov	r1, r9
 8006ce4:	eb43 0b01 	adc.w	fp, r3, r1
 8006ce8:	f04f 0200 	mov.w	r2, #0
 8006cec:	f04f 0300 	mov.w	r3, #0
 8006cf0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006cf4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006cf8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006cfc:	4692      	mov	sl, r2
 8006cfe:	469b      	mov	fp, r3
 8006d00:	4643      	mov	r3, r8
 8006d02:	eb1a 0303 	adds.w	r3, sl, r3
 8006d06:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006d0a:	464b      	mov	r3, r9
 8006d0c:	eb4b 0303 	adc.w	r3, fp, r3
 8006d10:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006d14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d18:	685b      	ldr	r3, [r3, #4]
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006d20:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006d24:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006d28:	460b      	mov	r3, r1
 8006d2a:	18db      	adds	r3, r3, r3
 8006d2c:	643b      	str	r3, [r7, #64]	@ 0x40
 8006d2e:	4613      	mov	r3, r2
 8006d30:	eb42 0303 	adc.w	r3, r2, r3
 8006d34:	647b      	str	r3, [r7, #68]	@ 0x44
 8006d36:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006d3a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8006d3e:	f7f9 fa97 	bl	8000270 <__aeabi_uldivmod>
 8006d42:	4602      	mov	r2, r0
 8006d44:	460b      	mov	r3, r1
 8006d46:	4611      	mov	r1, r2
 8006d48:	4b3b      	ldr	r3, [pc, #236]	@ (8006e38 <UART_SetConfig+0x2d4>)
 8006d4a:	fba3 2301 	umull	r2, r3, r3, r1
 8006d4e:	095b      	lsrs	r3, r3, #5
 8006d50:	2264      	movs	r2, #100	@ 0x64
 8006d52:	fb02 f303 	mul.w	r3, r2, r3
 8006d56:	1acb      	subs	r3, r1, r3
 8006d58:	00db      	lsls	r3, r3, #3
 8006d5a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8006d5e:	4b36      	ldr	r3, [pc, #216]	@ (8006e38 <UART_SetConfig+0x2d4>)
 8006d60:	fba3 2302 	umull	r2, r3, r3, r2
 8006d64:	095b      	lsrs	r3, r3, #5
 8006d66:	005b      	lsls	r3, r3, #1
 8006d68:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006d6c:	441c      	add	r4, r3
 8006d6e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006d72:	2200      	movs	r2, #0
 8006d74:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006d78:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006d7c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006d80:	4642      	mov	r2, r8
 8006d82:	464b      	mov	r3, r9
 8006d84:	1891      	adds	r1, r2, r2
 8006d86:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006d88:	415b      	adcs	r3, r3
 8006d8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006d8c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006d90:	4641      	mov	r1, r8
 8006d92:	1851      	adds	r1, r2, r1
 8006d94:	6339      	str	r1, [r7, #48]	@ 0x30
 8006d96:	4649      	mov	r1, r9
 8006d98:	414b      	adcs	r3, r1
 8006d9a:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d9c:	f04f 0200 	mov.w	r2, #0
 8006da0:	f04f 0300 	mov.w	r3, #0
 8006da4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006da8:	4659      	mov	r1, fp
 8006daa:	00cb      	lsls	r3, r1, #3
 8006dac:	4651      	mov	r1, sl
 8006dae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006db2:	4651      	mov	r1, sl
 8006db4:	00ca      	lsls	r2, r1, #3
 8006db6:	4610      	mov	r0, r2
 8006db8:	4619      	mov	r1, r3
 8006dba:	4603      	mov	r3, r0
 8006dbc:	4642      	mov	r2, r8
 8006dbe:	189b      	adds	r3, r3, r2
 8006dc0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006dc4:	464b      	mov	r3, r9
 8006dc6:	460a      	mov	r2, r1
 8006dc8:	eb42 0303 	adc.w	r3, r2, r3
 8006dcc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006dd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006dd4:	685b      	ldr	r3, [r3, #4]
 8006dd6:	2200      	movs	r2, #0
 8006dd8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006ddc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006de0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006de4:	460b      	mov	r3, r1
 8006de6:	18db      	adds	r3, r3, r3
 8006de8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006dea:	4613      	mov	r3, r2
 8006dec:	eb42 0303 	adc.w	r3, r2, r3
 8006df0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006df2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006df6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006dfa:	f7f9 fa39 	bl	8000270 <__aeabi_uldivmod>
 8006dfe:	4602      	mov	r2, r0
 8006e00:	460b      	mov	r3, r1
 8006e02:	4b0d      	ldr	r3, [pc, #52]	@ (8006e38 <UART_SetConfig+0x2d4>)
 8006e04:	fba3 1302 	umull	r1, r3, r3, r2
 8006e08:	095b      	lsrs	r3, r3, #5
 8006e0a:	2164      	movs	r1, #100	@ 0x64
 8006e0c:	fb01 f303 	mul.w	r3, r1, r3
 8006e10:	1ad3      	subs	r3, r2, r3
 8006e12:	00db      	lsls	r3, r3, #3
 8006e14:	3332      	adds	r3, #50	@ 0x32
 8006e16:	4a08      	ldr	r2, [pc, #32]	@ (8006e38 <UART_SetConfig+0x2d4>)
 8006e18:	fba2 2303 	umull	r2, r3, r2, r3
 8006e1c:	095b      	lsrs	r3, r3, #5
 8006e1e:	f003 0207 	and.w	r2, r3, #7
 8006e22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	4422      	add	r2, r4
 8006e2a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006e2c:	e106      	b.n	800703c <UART_SetConfig+0x4d8>
 8006e2e:	bf00      	nop
 8006e30:	40011000 	.word	0x40011000
 8006e34:	40011400 	.word	0x40011400
 8006e38:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006e3c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006e40:	2200      	movs	r2, #0
 8006e42:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006e46:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006e4a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8006e4e:	4642      	mov	r2, r8
 8006e50:	464b      	mov	r3, r9
 8006e52:	1891      	adds	r1, r2, r2
 8006e54:	6239      	str	r1, [r7, #32]
 8006e56:	415b      	adcs	r3, r3
 8006e58:	627b      	str	r3, [r7, #36]	@ 0x24
 8006e5a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006e5e:	4641      	mov	r1, r8
 8006e60:	1854      	adds	r4, r2, r1
 8006e62:	4649      	mov	r1, r9
 8006e64:	eb43 0501 	adc.w	r5, r3, r1
 8006e68:	f04f 0200 	mov.w	r2, #0
 8006e6c:	f04f 0300 	mov.w	r3, #0
 8006e70:	00eb      	lsls	r3, r5, #3
 8006e72:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006e76:	00e2      	lsls	r2, r4, #3
 8006e78:	4614      	mov	r4, r2
 8006e7a:	461d      	mov	r5, r3
 8006e7c:	4643      	mov	r3, r8
 8006e7e:	18e3      	adds	r3, r4, r3
 8006e80:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006e84:	464b      	mov	r3, r9
 8006e86:	eb45 0303 	adc.w	r3, r5, r3
 8006e8a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006e8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e92:	685b      	ldr	r3, [r3, #4]
 8006e94:	2200      	movs	r2, #0
 8006e96:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006e9a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006e9e:	f04f 0200 	mov.w	r2, #0
 8006ea2:	f04f 0300 	mov.w	r3, #0
 8006ea6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006eaa:	4629      	mov	r1, r5
 8006eac:	008b      	lsls	r3, r1, #2
 8006eae:	4621      	mov	r1, r4
 8006eb0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006eb4:	4621      	mov	r1, r4
 8006eb6:	008a      	lsls	r2, r1, #2
 8006eb8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006ebc:	f7f9 f9d8 	bl	8000270 <__aeabi_uldivmod>
 8006ec0:	4602      	mov	r2, r0
 8006ec2:	460b      	mov	r3, r1
 8006ec4:	4b60      	ldr	r3, [pc, #384]	@ (8007048 <UART_SetConfig+0x4e4>)
 8006ec6:	fba3 2302 	umull	r2, r3, r3, r2
 8006eca:	095b      	lsrs	r3, r3, #5
 8006ecc:	011c      	lsls	r4, r3, #4
 8006ece:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006ed2:	2200      	movs	r2, #0
 8006ed4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006ed8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006edc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006ee0:	4642      	mov	r2, r8
 8006ee2:	464b      	mov	r3, r9
 8006ee4:	1891      	adds	r1, r2, r2
 8006ee6:	61b9      	str	r1, [r7, #24]
 8006ee8:	415b      	adcs	r3, r3
 8006eea:	61fb      	str	r3, [r7, #28]
 8006eec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006ef0:	4641      	mov	r1, r8
 8006ef2:	1851      	adds	r1, r2, r1
 8006ef4:	6139      	str	r1, [r7, #16]
 8006ef6:	4649      	mov	r1, r9
 8006ef8:	414b      	adcs	r3, r1
 8006efa:	617b      	str	r3, [r7, #20]
 8006efc:	f04f 0200 	mov.w	r2, #0
 8006f00:	f04f 0300 	mov.w	r3, #0
 8006f04:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006f08:	4659      	mov	r1, fp
 8006f0a:	00cb      	lsls	r3, r1, #3
 8006f0c:	4651      	mov	r1, sl
 8006f0e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006f12:	4651      	mov	r1, sl
 8006f14:	00ca      	lsls	r2, r1, #3
 8006f16:	4610      	mov	r0, r2
 8006f18:	4619      	mov	r1, r3
 8006f1a:	4603      	mov	r3, r0
 8006f1c:	4642      	mov	r2, r8
 8006f1e:	189b      	adds	r3, r3, r2
 8006f20:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006f24:	464b      	mov	r3, r9
 8006f26:	460a      	mov	r2, r1
 8006f28:	eb42 0303 	adc.w	r3, r2, r3
 8006f2c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006f30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f34:	685b      	ldr	r3, [r3, #4]
 8006f36:	2200      	movs	r2, #0
 8006f38:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006f3a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006f3c:	f04f 0200 	mov.w	r2, #0
 8006f40:	f04f 0300 	mov.w	r3, #0
 8006f44:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006f48:	4649      	mov	r1, r9
 8006f4a:	008b      	lsls	r3, r1, #2
 8006f4c:	4641      	mov	r1, r8
 8006f4e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006f52:	4641      	mov	r1, r8
 8006f54:	008a      	lsls	r2, r1, #2
 8006f56:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006f5a:	f7f9 f989 	bl	8000270 <__aeabi_uldivmod>
 8006f5e:	4602      	mov	r2, r0
 8006f60:	460b      	mov	r3, r1
 8006f62:	4611      	mov	r1, r2
 8006f64:	4b38      	ldr	r3, [pc, #224]	@ (8007048 <UART_SetConfig+0x4e4>)
 8006f66:	fba3 2301 	umull	r2, r3, r3, r1
 8006f6a:	095b      	lsrs	r3, r3, #5
 8006f6c:	2264      	movs	r2, #100	@ 0x64
 8006f6e:	fb02 f303 	mul.w	r3, r2, r3
 8006f72:	1acb      	subs	r3, r1, r3
 8006f74:	011b      	lsls	r3, r3, #4
 8006f76:	3332      	adds	r3, #50	@ 0x32
 8006f78:	4a33      	ldr	r2, [pc, #204]	@ (8007048 <UART_SetConfig+0x4e4>)
 8006f7a:	fba2 2303 	umull	r2, r3, r2, r3
 8006f7e:	095b      	lsrs	r3, r3, #5
 8006f80:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006f84:	441c      	add	r4, r3
 8006f86:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006f8a:	2200      	movs	r2, #0
 8006f8c:	673b      	str	r3, [r7, #112]	@ 0x70
 8006f8e:	677a      	str	r2, [r7, #116]	@ 0x74
 8006f90:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006f94:	4642      	mov	r2, r8
 8006f96:	464b      	mov	r3, r9
 8006f98:	1891      	adds	r1, r2, r2
 8006f9a:	60b9      	str	r1, [r7, #8]
 8006f9c:	415b      	adcs	r3, r3
 8006f9e:	60fb      	str	r3, [r7, #12]
 8006fa0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006fa4:	4641      	mov	r1, r8
 8006fa6:	1851      	adds	r1, r2, r1
 8006fa8:	6039      	str	r1, [r7, #0]
 8006faa:	4649      	mov	r1, r9
 8006fac:	414b      	adcs	r3, r1
 8006fae:	607b      	str	r3, [r7, #4]
 8006fb0:	f04f 0200 	mov.w	r2, #0
 8006fb4:	f04f 0300 	mov.w	r3, #0
 8006fb8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006fbc:	4659      	mov	r1, fp
 8006fbe:	00cb      	lsls	r3, r1, #3
 8006fc0:	4651      	mov	r1, sl
 8006fc2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006fc6:	4651      	mov	r1, sl
 8006fc8:	00ca      	lsls	r2, r1, #3
 8006fca:	4610      	mov	r0, r2
 8006fcc:	4619      	mov	r1, r3
 8006fce:	4603      	mov	r3, r0
 8006fd0:	4642      	mov	r2, r8
 8006fd2:	189b      	adds	r3, r3, r2
 8006fd4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006fd6:	464b      	mov	r3, r9
 8006fd8:	460a      	mov	r2, r1
 8006fda:	eb42 0303 	adc.w	r3, r2, r3
 8006fde:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006fe0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006fe4:	685b      	ldr	r3, [r3, #4]
 8006fe6:	2200      	movs	r2, #0
 8006fe8:	663b      	str	r3, [r7, #96]	@ 0x60
 8006fea:	667a      	str	r2, [r7, #100]	@ 0x64
 8006fec:	f04f 0200 	mov.w	r2, #0
 8006ff0:	f04f 0300 	mov.w	r3, #0
 8006ff4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006ff8:	4649      	mov	r1, r9
 8006ffa:	008b      	lsls	r3, r1, #2
 8006ffc:	4641      	mov	r1, r8
 8006ffe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007002:	4641      	mov	r1, r8
 8007004:	008a      	lsls	r2, r1, #2
 8007006:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800700a:	f7f9 f931 	bl	8000270 <__aeabi_uldivmod>
 800700e:	4602      	mov	r2, r0
 8007010:	460b      	mov	r3, r1
 8007012:	4b0d      	ldr	r3, [pc, #52]	@ (8007048 <UART_SetConfig+0x4e4>)
 8007014:	fba3 1302 	umull	r1, r3, r3, r2
 8007018:	095b      	lsrs	r3, r3, #5
 800701a:	2164      	movs	r1, #100	@ 0x64
 800701c:	fb01 f303 	mul.w	r3, r1, r3
 8007020:	1ad3      	subs	r3, r2, r3
 8007022:	011b      	lsls	r3, r3, #4
 8007024:	3332      	adds	r3, #50	@ 0x32
 8007026:	4a08      	ldr	r2, [pc, #32]	@ (8007048 <UART_SetConfig+0x4e4>)
 8007028:	fba2 2303 	umull	r2, r3, r2, r3
 800702c:	095b      	lsrs	r3, r3, #5
 800702e:	f003 020f 	and.w	r2, r3, #15
 8007032:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	4422      	add	r2, r4
 800703a:	609a      	str	r2, [r3, #8]
}
 800703c:	bf00      	nop
 800703e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8007042:	46bd      	mov	sp, r7
 8007044:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007048:	51eb851f 	.word	0x51eb851f

0800704c <siprintf>:
 800704c:	b40e      	push	{r1, r2, r3}
 800704e:	b500      	push	{lr}
 8007050:	b09c      	sub	sp, #112	@ 0x70
 8007052:	ab1d      	add	r3, sp, #116	@ 0x74
 8007054:	9002      	str	r0, [sp, #8]
 8007056:	9006      	str	r0, [sp, #24]
 8007058:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800705c:	4809      	ldr	r0, [pc, #36]	@ (8007084 <siprintf+0x38>)
 800705e:	9107      	str	r1, [sp, #28]
 8007060:	9104      	str	r1, [sp, #16]
 8007062:	4909      	ldr	r1, [pc, #36]	@ (8007088 <siprintf+0x3c>)
 8007064:	f853 2b04 	ldr.w	r2, [r3], #4
 8007068:	9105      	str	r1, [sp, #20]
 800706a:	6800      	ldr	r0, [r0, #0]
 800706c:	9301      	str	r3, [sp, #4]
 800706e:	a902      	add	r1, sp, #8
 8007070:	f000 f994 	bl	800739c <_svfiprintf_r>
 8007074:	9b02      	ldr	r3, [sp, #8]
 8007076:	2200      	movs	r2, #0
 8007078:	701a      	strb	r2, [r3, #0]
 800707a:	b01c      	add	sp, #112	@ 0x70
 800707c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007080:	b003      	add	sp, #12
 8007082:	4770      	bx	lr
 8007084:	20000138 	.word	0x20000138
 8007088:	ffff0208 	.word	0xffff0208

0800708c <memset>:
 800708c:	4402      	add	r2, r0
 800708e:	4603      	mov	r3, r0
 8007090:	4293      	cmp	r3, r2
 8007092:	d100      	bne.n	8007096 <memset+0xa>
 8007094:	4770      	bx	lr
 8007096:	f803 1b01 	strb.w	r1, [r3], #1
 800709a:	e7f9      	b.n	8007090 <memset+0x4>

0800709c <__errno>:
 800709c:	4b01      	ldr	r3, [pc, #4]	@ (80070a4 <__errno+0x8>)
 800709e:	6818      	ldr	r0, [r3, #0]
 80070a0:	4770      	bx	lr
 80070a2:	bf00      	nop
 80070a4:	20000138 	.word	0x20000138

080070a8 <__libc_init_array>:
 80070a8:	b570      	push	{r4, r5, r6, lr}
 80070aa:	4d0d      	ldr	r5, [pc, #52]	@ (80070e0 <__libc_init_array+0x38>)
 80070ac:	4c0d      	ldr	r4, [pc, #52]	@ (80070e4 <__libc_init_array+0x3c>)
 80070ae:	1b64      	subs	r4, r4, r5
 80070b0:	10a4      	asrs	r4, r4, #2
 80070b2:	2600      	movs	r6, #0
 80070b4:	42a6      	cmp	r6, r4
 80070b6:	d109      	bne.n	80070cc <__libc_init_array+0x24>
 80070b8:	4d0b      	ldr	r5, [pc, #44]	@ (80070e8 <__libc_init_array+0x40>)
 80070ba:	4c0c      	ldr	r4, [pc, #48]	@ (80070ec <__libc_init_array+0x44>)
 80070bc:	f000 fc66 	bl	800798c <_init>
 80070c0:	1b64      	subs	r4, r4, r5
 80070c2:	10a4      	asrs	r4, r4, #2
 80070c4:	2600      	movs	r6, #0
 80070c6:	42a6      	cmp	r6, r4
 80070c8:	d105      	bne.n	80070d6 <__libc_init_array+0x2e>
 80070ca:	bd70      	pop	{r4, r5, r6, pc}
 80070cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80070d0:	4798      	blx	r3
 80070d2:	3601      	adds	r6, #1
 80070d4:	e7ee      	b.n	80070b4 <__libc_init_array+0xc>
 80070d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80070da:	4798      	blx	r3
 80070dc:	3601      	adds	r6, #1
 80070de:	e7f2      	b.n	80070c6 <__libc_init_array+0x1e>
 80070e0:	08007c54 	.word	0x08007c54
 80070e4:	08007c54 	.word	0x08007c54
 80070e8:	08007c54 	.word	0x08007c54
 80070ec:	08007c58 	.word	0x08007c58

080070f0 <__retarget_lock_acquire_recursive>:
 80070f0:	4770      	bx	lr

080070f2 <__retarget_lock_release_recursive>:
 80070f2:	4770      	bx	lr

080070f4 <_free_r>:
 80070f4:	b538      	push	{r3, r4, r5, lr}
 80070f6:	4605      	mov	r5, r0
 80070f8:	2900      	cmp	r1, #0
 80070fa:	d041      	beq.n	8007180 <_free_r+0x8c>
 80070fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007100:	1f0c      	subs	r4, r1, #4
 8007102:	2b00      	cmp	r3, #0
 8007104:	bfb8      	it	lt
 8007106:	18e4      	addlt	r4, r4, r3
 8007108:	f000 f8e0 	bl	80072cc <__malloc_lock>
 800710c:	4a1d      	ldr	r2, [pc, #116]	@ (8007184 <_free_r+0x90>)
 800710e:	6813      	ldr	r3, [r2, #0]
 8007110:	b933      	cbnz	r3, 8007120 <_free_r+0x2c>
 8007112:	6063      	str	r3, [r4, #4]
 8007114:	6014      	str	r4, [r2, #0]
 8007116:	4628      	mov	r0, r5
 8007118:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800711c:	f000 b8dc 	b.w	80072d8 <__malloc_unlock>
 8007120:	42a3      	cmp	r3, r4
 8007122:	d908      	bls.n	8007136 <_free_r+0x42>
 8007124:	6820      	ldr	r0, [r4, #0]
 8007126:	1821      	adds	r1, r4, r0
 8007128:	428b      	cmp	r3, r1
 800712a:	bf01      	itttt	eq
 800712c:	6819      	ldreq	r1, [r3, #0]
 800712e:	685b      	ldreq	r3, [r3, #4]
 8007130:	1809      	addeq	r1, r1, r0
 8007132:	6021      	streq	r1, [r4, #0]
 8007134:	e7ed      	b.n	8007112 <_free_r+0x1e>
 8007136:	461a      	mov	r2, r3
 8007138:	685b      	ldr	r3, [r3, #4]
 800713a:	b10b      	cbz	r3, 8007140 <_free_r+0x4c>
 800713c:	42a3      	cmp	r3, r4
 800713e:	d9fa      	bls.n	8007136 <_free_r+0x42>
 8007140:	6811      	ldr	r1, [r2, #0]
 8007142:	1850      	adds	r0, r2, r1
 8007144:	42a0      	cmp	r0, r4
 8007146:	d10b      	bne.n	8007160 <_free_r+0x6c>
 8007148:	6820      	ldr	r0, [r4, #0]
 800714a:	4401      	add	r1, r0
 800714c:	1850      	adds	r0, r2, r1
 800714e:	4283      	cmp	r3, r0
 8007150:	6011      	str	r1, [r2, #0]
 8007152:	d1e0      	bne.n	8007116 <_free_r+0x22>
 8007154:	6818      	ldr	r0, [r3, #0]
 8007156:	685b      	ldr	r3, [r3, #4]
 8007158:	6053      	str	r3, [r2, #4]
 800715a:	4408      	add	r0, r1
 800715c:	6010      	str	r0, [r2, #0]
 800715e:	e7da      	b.n	8007116 <_free_r+0x22>
 8007160:	d902      	bls.n	8007168 <_free_r+0x74>
 8007162:	230c      	movs	r3, #12
 8007164:	602b      	str	r3, [r5, #0]
 8007166:	e7d6      	b.n	8007116 <_free_r+0x22>
 8007168:	6820      	ldr	r0, [r4, #0]
 800716a:	1821      	adds	r1, r4, r0
 800716c:	428b      	cmp	r3, r1
 800716e:	bf04      	itt	eq
 8007170:	6819      	ldreq	r1, [r3, #0]
 8007172:	685b      	ldreq	r3, [r3, #4]
 8007174:	6063      	str	r3, [r4, #4]
 8007176:	bf04      	itt	eq
 8007178:	1809      	addeq	r1, r1, r0
 800717a:	6021      	streq	r1, [r4, #0]
 800717c:	6054      	str	r4, [r2, #4]
 800717e:	e7ca      	b.n	8007116 <_free_r+0x22>
 8007180:	bd38      	pop	{r3, r4, r5, pc}
 8007182:	bf00      	nop
 8007184:	20000460 	.word	0x20000460

08007188 <sbrk_aligned>:
 8007188:	b570      	push	{r4, r5, r6, lr}
 800718a:	4e0f      	ldr	r6, [pc, #60]	@ (80071c8 <sbrk_aligned+0x40>)
 800718c:	460c      	mov	r4, r1
 800718e:	6831      	ldr	r1, [r6, #0]
 8007190:	4605      	mov	r5, r0
 8007192:	b911      	cbnz	r1, 800719a <sbrk_aligned+0x12>
 8007194:	f000 fba6 	bl	80078e4 <_sbrk_r>
 8007198:	6030      	str	r0, [r6, #0]
 800719a:	4621      	mov	r1, r4
 800719c:	4628      	mov	r0, r5
 800719e:	f000 fba1 	bl	80078e4 <_sbrk_r>
 80071a2:	1c43      	adds	r3, r0, #1
 80071a4:	d103      	bne.n	80071ae <sbrk_aligned+0x26>
 80071a6:	f04f 34ff 	mov.w	r4, #4294967295
 80071aa:	4620      	mov	r0, r4
 80071ac:	bd70      	pop	{r4, r5, r6, pc}
 80071ae:	1cc4      	adds	r4, r0, #3
 80071b0:	f024 0403 	bic.w	r4, r4, #3
 80071b4:	42a0      	cmp	r0, r4
 80071b6:	d0f8      	beq.n	80071aa <sbrk_aligned+0x22>
 80071b8:	1a21      	subs	r1, r4, r0
 80071ba:	4628      	mov	r0, r5
 80071bc:	f000 fb92 	bl	80078e4 <_sbrk_r>
 80071c0:	3001      	adds	r0, #1
 80071c2:	d1f2      	bne.n	80071aa <sbrk_aligned+0x22>
 80071c4:	e7ef      	b.n	80071a6 <sbrk_aligned+0x1e>
 80071c6:	bf00      	nop
 80071c8:	2000045c 	.word	0x2000045c

080071cc <_malloc_r>:
 80071cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80071d0:	1ccd      	adds	r5, r1, #3
 80071d2:	f025 0503 	bic.w	r5, r5, #3
 80071d6:	3508      	adds	r5, #8
 80071d8:	2d0c      	cmp	r5, #12
 80071da:	bf38      	it	cc
 80071dc:	250c      	movcc	r5, #12
 80071de:	2d00      	cmp	r5, #0
 80071e0:	4606      	mov	r6, r0
 80071e2:	db01      	blt.n	80071e8 <_malloc_r+0x1c>
 80071e4:	42a9      	cmp	r1, r5
 80071e6:	d904      	bls.n	80071f2 <_malloc_r+0x26>
 80071e8:	230c      	movs	r3, #12
 80071ea:	6033      	str	r3, [r6, #0]
 80071ec:	2000      	movs	r0, #0
 80071ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80071f2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80072c8 <_malloc_r+0xfc>
 80071f6:	f000 f869 	bl	80072cc <__malloc_lock>
 80071fa:	f8d8 3000 	ldr.w	r3, [r8]
 80071fe:	461c      	mov	r4, r3
 8007200:	bb44      	cbnz	r4, 8007254 <_malloc_r+0x88>
 8007202:	4629      	mov	r1, r5
 8007204:	4630      	mov	r0, r6
 8007206:	f7ff ffbf 	bl	8007188 <sbrk_aligned>
 800720a:	1c43      	adds	r3, r0, #1
 800720c:	4604      	mov	r4, r0
 800720e:	d158      	bne.n	80072c2 <_malloc_r+0xf6>
 8007210:	f8d8 4000 	ldr.w	r4, [r8]
 8007214:	4627      	mov	r7, r4
 8007216:	2f00      	cmp	r7, #0
 8007218:	d143      	bne.n	80072a2 <_malloc_r+0xd6>
 800721a:	2c00      	cmp	r4, #0
 800721c:	d04b      	beq.n	80072b6 <_malloc_r+0xea>
 800721e:	6823      	ldr	r3, [r4, #0]
 8007220:	4639      	mov	r1, r7
 8007222:	4630      	mov	r0, r6
 8007224:	eb04 0903 	add.w	r9, r4, r3
 8007228:	f000 fb5c 	bl	80078e4 <_sbrk_r>
 800722c:	4581      	cmp	r9, r0
 800722e:	d142      	bne.n	80072b6 <_malloc_r+0xea>
 8007230:	6821      	ldr	r1, [r4, #0]
 8007232:	1a6d      	subs	r5, r5, r1
 8007234:	4629      	mov	r1, r5
 8007236:	4630      	mov	r0, r6
 8007238:	f7ff ffa6 	bl	8007188 <sbrk_aligned>
 800723c:	3001      	adds	r0, #1
 800723e:	d03a      	beq.n	80072b6 <_malloc_r+0xea>
 8007240:	6823      	ldr	r3, [r4, #0]
 8007242:	442b      	add	r3, r5
 8007244:	6023      	str	r3, [r4, #0]
 8007246:	f8d8 3000 	ldr.w	r3, [r8]
 800724a:	685a      	ldr	r2, [r3, #4]
 800724c:	bb62      	cbnz	r2, 80072a8 <_malloc_r+0xdc>
 800724e:	f8c8 7000 	str.w	r7, [r8]
 8007252:	e00f      	b.n	8007274 <_malloc_r+0xa8>
 8007254:	6822      	ldr	r2, [r4, #0]
 8007256:	1b52      	subs	r2, r2, r5
 8007258:	d420      	bmi.n	800729c <_malloc_r+0xd0>
 800725a:	2a0b      	cmp	r2, #11
 800725c:	d917      	bls.n	800728e <_malloc_r+0xc2>
 800725e:	1961      	adds	r1, r4, r5
 8007260:	42a3      	cmp	r3, r4
 8007262:	6025      	str	r5, [r4, #0]
 8007264:	bf18      	it	ne
 8007266:	6059      	strne	r1, [r3, #4]
 8007268:	6863      	ldr	r3, [r4, #4]
 800726a:	bf08      	it	eq
 800726c:	f8c8 1000 	streq.w	r1, [r8]
 8007270:	5162      	str	r2, [r4, r5]
 8007272:	604b      	str	r3, [r1, #4]
 8007274:	4630      	mov	r0, r6
 8007276:	f000 f82f 	bl	80072d8 <__malloc_unlock>
 800727a:	f104 000b 	add.w	r0, r4, #11
 800727e:	1d23      	adds	r3, r4, #4
 8007280:	f020 0007 	bic.w	r0, r0, #7
 8007284:	1ac2      	subs	r2, r0, r3
 8007286:	bf1c      	itt	ne
 8007288:	1a1b      	subne	r3, r3, r0
 800728a:	50a3      	strne	r3, [r4, r2]
 800728c:	e7af      	b.n	80071ee <_malloc_r+0x22>
 800728e:	6862      	ldr	r2, [r4, #4]
 8007290:	42a3      	cmp	r3, r4
 8007292:	bf0c      	ite	eq
 8007294:	f8c8 2000 	streq.w	r2, [r8]
 8007298:	605a      	strne	r2, [r3, #4]
 800729a:	e7eb      	b.n	8007274 <_malloc_r+0xa8>
 800729c:	4623      	mov	r3, r4
 800729e:	6864      	ldr	r4, [r4, #4]
 80072a0:	e7ae      	b.n	8007200 <_malloc_r+0x34>
 80072a2:	463c      	mov	r4, r7
 80072a4:	687f      	ldr	r7, [r7, #4]
 80072a6:	e7b6      	b.n	8007216 <_malloc_r+0x4a>
 80072a8:	461a      	mov	r2, r3
 80072aa:	685b      	ldr	r3, [r3, #4]
 80072ac:	42a3      	cmp	r3, r4
 80072ae:	d1fb      	bne.n	80072a8 <_malloc_r+0xdc>
 80072b0:	2300      	movs	r3, #0
 80072b2:	6053      	str	r3, [r2, #4]
 80072b4:	e7de      	b.n	8007274 <_malloc_r+0xa8>
 80072b6:	230c      	movs	r3, #12
 80072b8:	6033      	str	r3, [r6, #0]
 80072ba:	4630      	mov	r0, r6
 80072bc:	f000 f80c 	bl	80072d8 <__malloc_unlock>
 80072c0:	e794      	b.n	80071ec <_malloc_r+0x20>
 80072c2:	6005      	str	r5, [r0, #0]
 80072c4:	e7d6      	b.n	8007274 <_malloc_r+0xa8>
 80072c6:	bf00      	nop
 80072c8:	20000460 	.word	0x20000460

080072cc <__malloc_lock>:
 80072cc:	4801      	ldr	r0, [pc, #4]	@ (80072d4 <__malloc_lock+0x8>)
 80072ce:	f7ff bf0f 	b.w	80070f0 <__retarget_lock_acquire_recursive>
 80072d2:	bf00      	nop
 80072d4:	20000458 	.word	0x20000458

080072d8 <__malloc_unlock>:
 80072d8:	4801      	ldr	r0, [pc, #4]	@ (80072e0 <__malloc_unlock+0x8>)
 80072da:	f7ff bf0a 	b.w	80070f2 <__retarget_lock_release_recursive>
 80072de:	bf00      	nop
 80072e0:	20000458 	.word	0x20000458

080072e4 <__ssputs_r>:
 80072e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80072e8:	688e      	ldr	r6, [r1, #8]
 80072ea:	461f      	mov	r7, r3
 80072ec:	42be      	cmp	r6, r7
 80072ee:	680b      	ldr	r3, [r1, #0]
 80072f0:	4682      	mov	sl, r0
 80072f2:	460c      	mov	r4, r1
 80072f4:	4690      	mov	r8, r2
 80072f6:	d82d      	bhi.n	8007354 <__ssputs_r+0x70>
 80072f8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80072fc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007300:	d026      	beq.n	8007350 <__ssputs_r+0x6c>
 8007302:	6965      	ldr	r5, [r4, #20]
 8007304:	6909      	ldr	r1, [r1, #16]
 8007306:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800730a:	eba3 0901 	sub.w	r9, r3, r1
 800730e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007312:	1c7b      	adds	r3, r7, #1
 8007314:	444b      	add	r3, r9
 8007316:	106d      	asrs	r5, r5, #1
 8007318:	429d      	cmp	r5, r3
 800731a:	bf38      	it	cc
 800731c:	461d      	movcc	r5, r3
 800731e:	0553      	lsls	r3, r2, #21
 8007320:	d527      	bpl.n	8007372 <__ssputs_r+0x8e>
 8007322:	4629      	mov	r1, r5
 8007324:	f7ff ff52 	bl	80071cc <_malloc_r>
 8007328:	4606      	mov	r6, r0
 800732a:	b360      	cbz	r0, 8007386 <__ssputs_r+0xa2>
 800732c:	6921      	ldr	r1, [r4, #16]
 800732e:	464a      	mov	r2, r9
 8007330:	f000 fae8 	bl	8007904 <memcpy>
 8007334:	89a3      	ldrh	r3, [r4, #12]
 8007336:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800733a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800733e:	81a3      	strh	r3, [r4, #12]
 8007340:	6126      	str	r6, [r4, #16]
 8007342:	6165      	str	r5, [r4, #20]
 8007344:	444e      	add	r6, r9
 8007346:	eba5 0509 	sub.w	r5, r5, r9
 800734a:	6026      	str	r6, [r4, #0]
 800734c:	60a5      	str	r5, [r4, #8]
 800734e:	463e      	mov	r6, r7
 8007350:	42be      	cmp	r6, r7
 8007352:	d900      	bls.n	8007356 <__ssputs_r+0x72>
 8007354:	463e      	mov	r6, r7
 8007356:	6820      	ldr	r0, [r4, #0]
 8007358:	4632      	mov	r2, r6
 800735a:	4641      	mov	r1, r8
 800735c:	f000 faa8 	bl	80078b0 <memmove>
 8007360:	68a3      	ldr	r3, [r4, #8]
 8007362:	1b9b      	subs	r3, r3, r6
 8007364:	60a3      	str	r3, [r4, #8]
 8007366:	6823      	ldr	r3, [r4, #0]
 8007368:	4433      	add	r3, r6
 800736a:	6023      	str	r3, [r4, #0]
 800736c:	2000      	movs	r0, #0
 800736e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007372:	462a      	mov	r2, r5
 8007374:	f000 fad4 	bl	8007920 <_realloc_r>
 8007378:	4606      	mov	r6, r0
 800737a:	2800      	cmp	r0, #0
 800737c:	d1e0      	bne.n	8007340 <__ssputs_r+0x5c>
 800737e:	6921      	ldr	r1, [r4, #16]
 8007380:	4650      	mov	r0, sl
 8007382:	f7ff feb7 	bl	80070f4 <_free_r>
 8007386:	230c      	movs	r3, #12
 8007388:	f8ca 3000 	str.w	r3, [sl]
 800738c:	89a3      	ldrh	r3, [r4, #12]
 800738e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007392:	81a3      	strh	r3, [r4, #12]
 8007394:	f04f 30ff 	mov.w	r0, #4294967295
 8007398:	e7e9      	b.n	800736e <__ssputs_r+0x8a>
	...

0800739c <_svfiprintf_r>:
 800739c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073a0:	4698      	mov	r8, r3
 80073a2:	898b      	ldrh	r3, [r1, #12]
 80073a4:	061b      	lsls	r3, r3, #24
 80073a6:	b09d      	sub	sp, #116	@ 0x74
 80073a8:	4607      	mov	r7, r0
 80073aa:	460d      	mov	r5, r1
 80073ac:	4614      	mov	r4, r2
 80073ae:	d510      	bpl.n	80073d2 <_svfiprintf_r+0x36>
 80073b0:	690b      	ldr	r3, [r1, #16]
 80073b2:	b973      	cbnz	r3, 80073d2 <_svfiprintf_r+0x36>
 80073b4:	2140      	movs	r1, #64	@ 0x40
 80073b6:	f7ff ff09 	bl	80071cc <_malloc_r>
 80073ba:	6028      	str	r0, [r5, #0]
 80073bc:	6128      	str	r0, [r5, #16]
 80073be:	b930      	cbnz	r0, 80073ce <_svfiprintf_r+0x32>
 80073c0:	230c      	movs	r3, #12
 80073c2:	603b      	str	r3, [r7, #0]
 80073c4:	f04f 30ff 	mov.w	r0, #4294967295
 80073c8:	b01d      	add	sp, #116	@ 0x74
 80073ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073ce:	2340      	movs	r3, #64	@ 0x40
 80073d0:	616b      	str	r3, [r5, #20]
 80073d2:	2300      	movs	r3, #0
 80073d4:	9309      	str	r3, [sp, #36]	@ 0x24
 80073d6:	2320      	movs	r3, #32
 80073d8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80073dc:	f8cd 800c 	str.w	r8, [sp, #12]
 80073e0:	2330      	movs	r3, #48	@ 0x30
 80073e2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007580 <_svfiprintf_r+0x1e4>
 80073e6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80073ea:	f04f 0901 	mov.w	r9, #1
 80073ee:	4623      	mov	r3, r4
 80073f0:	469a      	mov	sl, r3
 80073f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80073f6:	b10a      	cbz	r2, 80073fc <_svfiprintf_r+0x60>
 80073f8:	2a25      	cmp	r2, #37	@ 0x25
 80073fa:	d1f9      	bne.n	80073f0 <_svfiprintf_r+0x54>
 80073fc:	ebba 0b04 	subs.w	fp, sl, r4
 8007400:	d00b      	beq.n	800741a <_svfiprintf_r+0x7e>
 8007402:	465b      	mov	r3, fp
 8007404:	4622      	mov	r2, r4
 8007406:	4629      	mov	r1, r5
 8007408:	4638      	mov	r0, r7
 800740a:	f7ff ff6b 	bl	80072e4 <__ssputs_r>
 800740e:	3001      	adds	r0, #1
 8007410:	f000 80a7 	beq.w	8007562 <_svfiprintf_r+0x1c6>
 8007414:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007416:	445a      	add	r2, fp
 8007418:	9209      	str	r2, [sp, #36]	@ 0x24
 800741a:	f89a 3000 	ldrb.w	r3, [sl]
 800741e:	2b00      	cmp	r3, #0
 8007420:	f000 809f 	beq.w	8007562 <_svfiprintf_r+0x1c6>
 8007424:	2300      	movs	r3, #0
 8007426:	f04f 32ff 	mov.w	r2, #4294967295
 800742a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800742e:	f10a 0a01 	add.w	sl, sl, #1
 8007432:	9304      	str	r3, [sp, #16]
 8007434:	9307      	str	r3, [sp, #28]
 8007436:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800743a:	931a      	str	r3, [sp, #104]	@ 0x68
 800743c:	4654      	mov	r4, sl
 800743e:	2205      	movs	r2, #5
 8007440:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007444:	484e      	ldr	r0, [pc, #312]	@ (8007580 <_svfiprintf_r+0x1e4>)
 8007446:	f7f8 fec3 	bl	80001d0 <memchr>
 800744a:	9a04      	ldr	r2, [sp, #16]
 800744c:	b9d8      	cbnz	r0, 8007486 <_svfiprintf_r+0xea>
 800744e:	06d0      	lsls	r0, r2, #27
 8007450:	bf44      	itt	mi
 8007452:	2320      	movmi	r3, #32
 8007454:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007458:	0711      	lsls	r1, r2, #28
 800745a:	bf44      	itt	mi
 800745c:	232b      	movmi	r3, #43	@ 0x2b
 800745e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007462:	f89a 3000 	ldrb.w	r3, [sl]
 8007466:	2b2a      	cmp	r3, #42	@ 0x2a
 8007468:	d015      	beq.n	8007496 <_svfiprintf_r+0xfa>
 800746a:	9a07      	ldr	r2, [sp, #28]
 800746c:	4654      	mov	r4, sl
 800746e:	2000      	movs	r0, #0
 8007470:	f04f 0c0a 	mov.w	ip, #10
 8007474:	4621      	mov	r1, r4
 8007476:	f811 3b01 	ldrb.w	r3, [r1], #1
 800747a:	3b30      	subs	r3, #48	@ 0x30
 800747c:	2b09      	cmp	r3, #9
 800747e:	d94b      	bls.n	8007518 <_svfiprintf_r+0x17c>
 8007480:	b1b0      	cbz	r0, 80074b0 <_svfiprintf_r+0x114>
 8007482:	9207      	str	r2, [sp, #28]
 8007484:	e014      	b.n	80074b0 <_svfiprintf_r+0x114>
 8007486:	eba0 0308 	sub.w	r3, r0, r8
 800748a:	fa09 f303 	lsl.w	r3, r9, r3
 800748e:	4313      	orrs	r3, r2
 8007490:	9304      	str	r3, [sp, #16]
 8007492:	46a2      	mov	sl, r4
 8007494:	e7d2      	b.n	800743c <_svfiprintf_r+0xa0>
 8007496:	9b03      	ldr	r3, [sp, #12]
 8007498:	1d19      	adds	r1, r3, #4
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	9103      	str	r1, [sp, #12]
 800749e:	2b00      	cmp	r3, #0
 80074a0:	bfbb      	ittet	lt
 80074a2:	425b      	neglt	r3, r3
 80074a4:	f042 0202 	orrlt.w	r2, r2, #2
 80074a8:	9307      	strge	r3, [sp, #28]
 80074aa:	9307      	strlt	r3, [sp, #28]
 80074ac:	bfb8      	it	lt
 80074ae:	9204      	strlt	r2, [sp, #16]
 80074b0:	7823      	ldrb	r3, [r4, #0]
 80074b2:	2b2e      	cmp	r3, #46	@ 0x2e
 80074b4:	d10a      	bne.n	80074cc <_svfiprintf_r+0x130>
 80074b6:	7863      	ldrb	r3, [r4, #1]
 80074b8:	2b2a      	cmp	r3, #42	@ 0x2a
 80074ba:	d132      	bne.n	8007522 <_svfiprintf_r+0x186>
 80074bc:	9b03      	ldr	r3, [sp, #12]
 80074be:	1d1a      	adds	r2, r3, #4
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	9203      	str	r2, [sp, #12]
 80074c4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80074c8:	3402      	adds	r4, #2
 80074ca:	9305      	str	r3, [sp, #20]
 80074cc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007590 <_svfiprintf_r+0x1f4>
 80074d0:	7821      	ldrb	r1, [r4, #0]
 80074d2:	2203      	movs	r2, #3
 80074d4:	4650      	mov	r0, sl
 80074d6:	f7f8 fe7b 	bl	80001d0 <memchr>
 80074da:	b138      	cbz	r0, 80074ec <_svfiprintf_r+0x150>
 80074dc:	9b04      	ldr	r3, [sp, #16]
 80074de:	eba0 000a 	sub.w	r0, r0, sl
 80074e2:	2240      	movs	r2, #64	@ 0x40
 80074e4:	4082      	lsls	r2, r0
 80074e6:	4313      	orrs	r3, r2
 80074e8:	3401      	adds	r4, #1
 80074ea:	9304      	str	r3, [sp, #16]
 80074ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80074f0:	4824      	ldr	r0, [pc, #144]	@ (8007584 <_svfiprintf_r+0x1e8>)
 80074f2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80074f6:	2206      	movs	r2, #6
 80074f8:	f7f8 fe6a 	bl	80001d0 <memchr>
 80074fc:	2800      	cmp	r0, #0
 80074fe:	d036      	beq.n	800756e <_svfiprintf_r+0x1d2>
 8007500:	4b21      	ldr	r3, [pc, #132]	@ (8007588 <_svfiprintf_r+0x1ec>)
 8007502:	bb1b      	cbnz	r3, 800754c <_svfiprintf_r+0x1b0>
 8007504:	9b03      	ldr	r3, [sp, #12]
 8007506:	3307      	adds	r3, #7
 8007508:	f023 0307 	bic.w	r3, r3, #7
 800750c:	3308      	adds	r3, #8
 800750e:	9303      	str	r3, [sp, #12]
 8007510:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007512:	4433      	add	r3, r6
 8007514:	9309      	str	r3, [sp, #36]	@ 0x24
 8007516:	e76a      	b.n	80073ee <_svfiprintf_r+0x52>
 8007518:	fb0c 3202 	mla	r2, ip, r2, r3
 800751c:	460c      	mov	r4, r1
 800751e:	2001      	movs	r0, #1
 8007520:	e7a8      	b.n	8007474 <_svfiprintf_r+0xd8>
 8007522:	2300      	movs	r3, #0
 8007524:	3401      	adds	r4, #1
 8007526:	9305      	str	r3, [sp, #20]
 8007528:	4619      	mov	r1, r3
 800752a:	f04f 0c0a 	mov.w	ip, #10
 800752e:	4620      	mov	r0, r4
 8007530:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007534:	3a30      	subs	r2, #48	@ 0x30
 8007536:	2a09      	cmp	r2, #9
 8007538:	d903      	bls.n	8007542 <_svfiprintf_r+0x1a6>
 800753a:	2b00      	cmp	r3, #0
 800753c:	d0c6      	beq.n	80074cc <_svfiprintf_r+0x130>
 800753e:	9105      	str	r1, [sp, #20]
 8007540:	e7c4      	b.n	80074cc <_svfiprintf_r+0x130>
 8007542:	fb0c 2101 	mla	r1, ip, r1, r2
 8007546:	4604      	mov	r4, r0
 8007548:	2301      	movs	r3, #1
 800754a:	e7f0      	b.n	800752e <_svfiprintf_r+0x192>
 800754c:	ab03      	add	r3, sp, #12
 800754e:	9300      	str	r3, [sp, #0]
 8007550:	462a      	mov	r2, r5
 8007552:	4b0e      	ldr	r3, [pc, #56]	@ (800758c <_svfiprintf_r+0x1f0>)
 8007554:	a904      	add	r1, sp, #16
 8007556:	4638      	mov	r0, r7
 8007558:	f3af 8000 	nop.w
 800755c:	1c42      	adds	r2, r0, #1
 800755e:	4606      	mov	r6, r0
 8007560:	d1d6      	bne.n	8007510 <_svfiprintf_r+0x174>
 8007562:	89ab      	ldrh	r3, [r5, #12]
 8007564:	065b      	lsls	r3, r3, #25
 8007566:	f53f af2d 	bmi.w	80073c4 <_svfiprintf_r+0x28>
 800756a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800756c:	e72c      	b.n	80073c8 <_svfiprintf_r+0x2c>
 800756e:	ab03      	add	r3, sp, #12
 8007570:	9300      	str	r3, [sp, #0]
 8007572:	462a      	mov	r2, r5
 8007574:	4b05      	ldr	r3, [pc, #20]	@ (800758c <_svfiprintf_r+0x1f0>)
 8007576:	a904      	add	r1, sp, #16
 8007578:	4638      	mov	r0, r7
 800757a:	f000 f879 	bl	8007670 <_printf_i>
 800757e:	e7ed      	b.n	800755c <_svfiprintf_r+0x1c0>
 8007580:	08007c18 	.word	0x08007c18
 8007584:	08007c22 	.word	0x08007c22
 8007588:	00000000 	.word	0x00000000
 800758c:	080072e5 	.word	0x080072e5
 8007590:	08007c1e 	.word	0x08007c1e

08007594 <_printf_common>:
 8007594:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007598:	4616      	mov	r6, r2
 800759a:	4698      	mov	r8, r3
 800759c:	688a      	ldr	r2, [r1, #8]
 800759e:	690b      	ldr	r3, [r1, #16]
 80075a0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80075a4:	4293      	cmp	r3, r2
 80075a6:	bfb8      	it	lt
 80075a8:	4613      	movlt	r3, r2
 80075aa:	6033      	str	r3, [r6, #0]
 80075ac:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80075b0:	4607      	mov	r7, r0
 80075b2:	460c      	mov	r4, r1
 80075b4:	b10a      	cbz	r2, 80075ba <_printf_common+0x26>
 80075b6:	3301      	adds	r3, #1
 80075b8:	6033      	str	r3, [r6, #0]
 80075ba:	6823      	ldr	r3, [r4, #0]
 80075bc:	0699      	lsls	r1, r3, #26
 80075be:	bf42      	ittt	mi
 80075c0:	6833      	ldrmi	r3, [r6, #0]
 80075c2:	3302      	addmi	r3, #2
 80075c4:	6033      	strmi	r3, [r6, #0]
 80075c6:	6825      	ldr	r5, [r4, #0]
 80075c8:	f015 0506 	ands.w	r5, r5, #6
 80075cc:	d106      	bne.n	80075dc <_printf_common+0x48>
 80075ce:	f104 0a19 	add.w	sl, r4, #25
 80075d2:	68e3      	ldr	r3, [r4, #12]
 80075d4:	6832      	ldr	r2, [r6, #0]
 80075d6:	1a9b      	subs	r3, r3, r2
 80075d8:	42ab      	cmp	r3, r5
 80075da:	dc26      	bgt.n	800762a <_printf_common+0x96>
 80075dc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80075e0:	6822      	ldr	r2, [r4, #0]
 80075e2:	3b00      	subs	r3, #0
 80075e4:	bf18      	it	ne
 80075e6:	2301      	movne	r3, #1
 80075e8:	0692      	lsls	r2, r2, #26
 80075ea:	d42b      	bmi.n	8007644 <_printf_common+0xb0>
 80075ec:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80075f0:	4641      	mov	r1, r8
 80075f2:	4638      	mov	r0, r7
 80075f4:	47c8      	blx	r9
 80075f6:	3001      	adds	r0, #1
 80075f8:	d01e      	beq.n	8007638 <_printf_common+0xa4>
 80075fa:	6823      	ldr	r3, [r4, #0]
 80075fc:	6922      	ldr	r2, [r4, #16]
 80075fe:	f003 0306 	and.w	r3, r3, #6
 8007602:	2b04      	cmp	r3, #4
 8007604:	bf02      	ittt	eq
 8007606:	68e5      	ldreq	r5, [r4, #12]
 8007608:	6833      	ldreq	r3, [r6, #0]
 800760a:	1aed      	subeq	r5, r5, r3
 800760c:	68a3      	ldr	r3, [r4, #8]
 800760e:	bf0c      	ite	eq
 8007610:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007614:	2500      	movne	r5, #0
 8007616:	4293      	cmp	r3, r2
 8007618:	bfc4      	itt	gt
 800761a:	1a9b      	subgt	r3, r3, r2
 800761c:	18ed      	addgt	r5, r5, r3
 800761e:	2600      	movs	r6, #0
 8007620:	341a      	adds	r4, #26
 8007622:	42b5      	cmp	r5, r6
 8007624:	d11a      	bne.n	800765c <_printf_common+0xc8>
 8007626:	2000      	movs	r0, #0
 8007628:	e008      	b.n	800763c <_printf_common+0xa8>
 800762a:	2301      	movs	r3, #1
 800762c:	4652      	mov	r2, sl
 800762e:	4641      	mov	r1, r8
 8007630:	4638      	mov	r0, r7
 8007632:	47c8      	blx	r9
 8007634:	3001      	adds	r0, #1
 8007636:	d103      	bne.n	8007640 <_printf_common+0xac>
 8007638:	f04f 30ff 	mov.w	r0, #4294967295
 800763c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007640:	3501      	adds	r5, #1
 8007642:	e7c6      	b.n	80075d2 <_printf_common+0x3e>
 8007644:	18e1      	adds	r1, r4, r3
 8007646:	1c5a      	adds	r2, r3, #1
 8007648:	2030      	movs	r0, #48	@ 0x30
 800764a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800764e:	4422      	add	r2, r4
 8007650:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007654:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007658:	3302      	adds	r3, #2
 800765a:	e7c7      	b.n	80075ec <_printf_common+0x58>
 800765c:	2301      	movs	r3, #1
 800765e:	4622      	mov	r2, r4
 8007660:	4641      	mov	r1, r8
 8007662:	4638      	mov	r0, r7
 8007664:	47c8      	blx	r9
 8007666:	3001      	adds	r0, #1
 8007668:	d0e6      	beq.n	8007638 <_printf_common+0xa4>
 800766a:	3601      	adds	r6, #1
 800766c:	e7d9      	b.n	8007622 <_printf_common+0x8e>
	...

08007670 <_printf_i>:
 8007670:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007674:	7e0f      	ldrb	r7, [r1, #24]
 8007676:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007678:	2f78      	cmp	r7, #120	@ 0x78
 800767a:	4691      	mov	r9, r2
 800767c:	4680      	mov	r8, r0
 800767e:	460c      	mov	r4, r1
 8007680:	469a      	mov	sl, r3
 8007682:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007686:	d807      	bhi.n	8007698 <_printf_i+0x28>
 8007688:	2f62      	cmp	r7, #98	@ 0x62
 800768a:	d80a      	bhi.n	80076a2 <_printf_i+0x32>
 800768c:	2f00      	cmp	r7, #0
 800768e:	f000 80d2 	beq.w	8007836 <_printf_i+0x1c6>
 8007692:	2f58      	cmp	r7, #88	@ 0x58
 8007694:	f000 80b9 	beq.w	800780a <_printf_i+0x19a>
 8007698:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800769c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80076a0:	e03a      	b.n	8007718 <_printf_i+0xa8>
 80076a2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80076a6:	2b15      	cmp	r3, #21
 80076a8:	d8f6      	bhi.n	8007698 <_printf_i+0x28>
 80076aa:	a101      	add	r1, pc, #4	@ (adr r1, 80076b0 <_printf_i+0x40>)
 80076ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80076b0:	08007709 	.word	0x08007709
 80076b4:	0800771d 	.word	0x0800771d
 80076b8:	08007699 	.word	0x08007699
 80076bc:	08007699 	.word	0x08007699
 80076c0:	08007699 	.word	0x08007699
 80076c4:	08007699 	.word	0x08007699
 80076c8:	0800771d 	.word	0x0800771d
 80076cc:	08007699 	.word	0x08007699
 80076d0:	08007699 	.word	0x08007699
 80076d4:	08007699 	.word	0x08007699
 80076d8:	08007699 	.word	0x08007699
 80076dc:	0800781d 	.word	0x0800781d
 80076e0:	08007747 	.word	0x08007747
 80076e4:	080077d7 	.word	0x080077d7
 80076e8:	08007699 	.word	0x08007699
 80076ec:	08007699 	.word	0x08007699
 80076f0:	0800783f 	.word	0x0800783f
 80076f4:	08007699 	.word	0x08007699
 80076f8:	08007747 	.word	0x08007747
 80076fc:	08007699 	.word	0x08007699
 8007700:	08007699 	.word	0x08007699
 8007704:	080077df 	.word	0x080077df
 8007708:	6833      	ldr	r3, [r6, #0]
 800770a:	1d1a      	adds	r2, r3, #4
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	6032      	str	r2, [r6, #0]
 8007710:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007714:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007718:	2301      	movs	r3, #1
 800771a:	e09d      	b.n	8007858 <_printf_i+0x1e8>
 800771c:	6833      	ldr	r3, [r6, #0]
 800771e:	6820      	ldr	r0, [r4, #0]
 8007720:	1d19      	adds	r1, r3, #4
 8007722:	6031      	str	r1, [r6, #0]
 8007724:	0606      	lsls	r6, r0, #24
 8007726:	d501      	bpl.n	800772c <_printf_i+0xbc>
 8007728:	681d      	ldr	r5, [r3, #0]
 800772a:	e003      	b.n	8007734 <_printf_i+0xc4>
 800772c:	0645      	lsls	r5, r0, #25
 800772e:	d5fb      	bpl.n	8007728 <_printf_i+0xb8>
 8007730:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007734:	2d00      	cmp	r5, #0
 8007736:	da03      	bge.n	8007740 <_printf_i+0xd0>
 8007738:	232d      	movs	r3, #45	@ 0x2d
 800773a:	426d      	negs	r5, r5
 800773c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007740:	4859      	ldr	r0, [pc, #356]	@ (80078a8 <_printf_i+0x238>)
 8007742:	230a      	movs	r3, #10
 8007744:	e011      	b.n	800776a <_printf_i+0xfa>
 8007746:	6821      	ldr	r1, [r4, #0]
 8007748:	6833      	ldr	r3, [r6, #0]
 800774a:	0608      	lsls	r0, r1, #24
 800774c:	f853 5b04 	ldr.w	r5, [r3], #4
 8007750:	d402      	bmi.n	8007758 <_printf_i+0xe8>
 8007752:	0649      	lsls	r1, r1, #25
 8007754:	bf48      	it	mi
 8007756:	b2ad      	uxthmi	r5, r5
 8007758:	2f6f      	cmp	r7, #111	@ 0x6f
 800775a:	4853      	ldr	r0, [pc, #332]	@ (80078a8 <_printf_i+0x238>)
 800775c:	6033      	str	r3, [r6, #0]
 800775e:	bf14      	ite	ne
 8007760:	230a      	movne	r3, #10
 8007762:	2308      	moveq	r3, #8
 8007764:	2100      	movs	r1, #0
 8007766:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800776a:	6866      	ldr	r6, [r4, #4]
 800776c:	60a6      	str	r6, [r4, #8]
 800776e:	2e00      	cmp	r6, #0
 8007770:	bfa2      	ittt	ge
 8007772:	6821      	ldrge	r1, [r4, #0]
 8007774:	f021 0104 	bicge.w	r1, r1, #4
 8007778:	6021      	strge	r1, [r4, #0]
 800777a:	b90d      	cbnz	r5, 8007780 <_printf_i+0x110>
 800777c:	2e00      	cmp	r6, #0
 800777e:	d04b      	beq.n	8007818 <_printf_i+0x1a8>
 8007780:	4616      	mov	r6, r2
 8007782:	fbb5 f1f3 	udiv	r1, r5, r3
 8007786:	fb03 5711 	mls	r7, r3, r1, r5
 800778a:	5dc7      	ldrb	r7, [r0, r7]
 800778c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007790:	462f      	mov	r7, r5
 8007792:	42bb      	cmp	r3, r7
 8007794:	460d      	mov	r5, r1
 8007796:	d9f4      	bls.n	8007782 <_printf_i+0x112>
 8007798:	2b08      	cmp	r3, #8
 800779a:	d10b      	bne.n	80077b4 <_printf_i+0x144>
 800779c:	6823      	ldr	r3, [r4, #0]
 800779e:	07df      	lsls	r7, r3, #31
 80077a0:	d508      	bpl.n	80077b4 <_printf_i+0x144>
 80077a2:	6923      	ldr	r3, [r4, #16]
 80077a4:	6861      	ldr	r1, [r4, #4]
 80077a6:	4299      	cmp	r1, r3
 80077a8:	bfde      	ittt	le
 80077aa:	2330      	movle	r3, #48	@ 0x30
 80077ac:	f806 3c01 	strble.w	r3, [r6, #-1]
 80077b0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80077b4:	1b92      	subs	r2, r2, r6
 80077b6:	6122      	str	r2, [r4, #16]
 80077b8:	f8cd a000 	str.w	sl, [sp]
 80077bc:	464b      	mov	r3, r9
 80077be:	aa03      	add	r2, sp, #12
 80077c0:	4621      	mov	r1, r4
 80077c2:	4640      	mov	r0, r8
 80077c4:	f7ff fee6 	bl	8007594 <_printf_common>
 80077c8:	3001      	adds	r0, #1
 80077ca:	d14a      	bne.n	8007862 <_printf_i+0x1f2>
 80077cc:	f04f 30ff 	mov.w	r0, #4294967295
 80077d0:	b004      	add	sp, #16
 80077d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80077d6:	6823      	ldr	r3, [r4, #0]
 80077d8:	f043 0320 	orr.w	r3, r3, #32
 80077dc:	6023      	str	r3, [r4, #0]
 80077de:	4833      	ldr	r0, [pc, #204]	@ (80078ac <_printf_i+0x23c>)
 80077e0:	2778      	movs	r7, #120	@ 0x78
 80077e2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80077e6:	6823      	ldr	r3, [r4, #0]
 80077e8:	6831      	ldr	r1, [r6, #0]
 80077ea:	061f      	lsls	r7, r3, #24
 80077ec:	f851 5b04 	ldr.w	r5, [r1], #4
 80077f0:	d402      	bmi.n	80077f8 <_printf_i+0x188>
 80077f2:	065f      	lsls	r7, r3, #25
 80077f4:	bf48      	it	mi
 80077f6:	b2ad      	uxthmi	r5, r5
 80077f8:	6031      	str	r1, [r6, #0]
 80077fa:	07d9      	lsls	r1, r3, #31
 80077fc:	bf44      	itt	mi
 80077fe:	f043 0320 	orrmi.w	r3, r3, #32
 8007802:	6023      	strmi	r3, [r4, #0]
 8007804:	b11d      	cbz	r5, 800780e <_printf_i+0x19e>
 8007806:	2310      	movs	r3, #16
 8007808:	e7ac      	b.n	8007764 <_printf_i+0xf4>
 800780a:	4827      	ldr	r0, [pc, #156]	@ (80078a8 <_printf_i+0x238>)
 800780c:	e7e9      	b.n	80077e2 <_printf_i+0x172>
 800780e:	6823      	ldr	r3, [r4, #0]
 8007810:	f023 0320 	bic.w	r3, r3, #32
 8007814:	6023      	str	r3, [r4, #0]
 8007816:	e7f6      	b.n	8007806 <_printf_i+0x196>
 8007818:	4616      	mov	r6, r2
 800781a:	e7bd      	b.n	8007798 <_printf_i+0x128>
 800781c:	6833      	ldr	r3, [r6, #0]
 800781e:	6825      	ldr	r5, [r4, #0]
 8007820:	6961      	ldr	r1, [r4, #20]
 8007822:	1d18      	adds	r0, r3, #4
 8007824:	6030      	str	r0, [r6, #0]
 8007826:	062e      	lsls	r6, r5, #24
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	d501      	bpl.n	8007830 <_printf_i+0x1c0>
 800782c:	6019      	str	r1, [r3, #0]
 800782e:	e002      	b.n	8007836 <_printf_i+0x1c6>
 8007830:	0668      	lsls	r0, r5, #25
 8007832:	d5fb      	bpl.n	800782c <_printf_i+0x1bc>
 8007834:	8019      	strh	r1, [r3, #0]
 8007836:	2300      	movs	r3, #0
 8007838:	6123      	str	r3, [r4, #16]
 800783a:	4616      	mov	r6, r2
 800783c:	e7bc      	b.n	80077b8 <_printf_i+0x148>
 800783e:	6833      	ldr	r3, [r6, #0]
 8007840:	1d1a      	adds	r2, r3, #4
 8007842:	6032      	str	r2, [r6, #0]
 8007844:	681e      	ldr	r6, [r3, #0]
 8007846:	6862      	ldr	r2, [r4, #4]
 8007848:	2100      	movs	r1, #0
 800784a:	4630      	mov	r0, r6
 800784c:	f7f8 fcc0 	bl	80001d0 <memchr>
 8007850:	b108      	cbz	r0, 8007856 <_printf_i+0x1e6>
 8007852:	1b80      	subs	r0, r0, r6
 8007854:	6060      	str	r0, [r4, #4]
 8007856:	6863      	ldr	r3, [r4, #4]
 8007858:	6123      	str	r3, [r4, #16]
 800785a:	2300      	movs	r3, #0
 800785c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007860:	e7aa      	b.n	80077b8 <_printf_i+0x148>
 8007862:	6923      	ldr	r3, [r4, #16]
 8007864:	4632      	mov	r2, r6
 8007866:	4649      	mov	r1, r9
 8007868:	4640      	mov	r0, r8
 800786a:	47d0      	blx	sl
 800786c:	3001      	adds	r0, #1
 800786e:	d0ad      	beq.n	80077cc <_printf_i+0x15c>
 8007870:	6823      	ldr	r3, [r4, #0]
 8007872:	079b      	lsls	r3, r3, #30
 8007874:	d413      	bmi.n	800789e <_printf_i+0x22e>
 8007876:	68e0      	ldr	r0, [r4, #12]
 8007878:	9b03      	ldr	r3, [sp, #12]
 800787a:	4298      	cmp	r0, r3
 800787c:	bfb8      	it	lt
 800787e:	4618      	movlt	r0, r3
 8007880:	e7a6      	b.n	80077d0 <_printf_i+0x160>
 8007882:	2301      	movs	r3, #1
 8007884:	4632      	mov	r2, r6
 8007886:	4649      	mov	r1, r9
 8007888:	4640      	mov	r0, r8
 800788a:	47d0      	blx	sl
 800788c:	3001      	adds	r0, #1
 800788e:	d09d      	beq.n	80077cc <_printf_i+0x15c>
 8007890:	3501      	adds	r5, #1
 8007892:	68e3      	ldr	r3, [r4, #12]
 8007894:	9903      	ldr	r1, [sp, #12]
 8007896:	1a5b      	subs	r3, r3, r1
 8007898:	42ab      	cmp	r3, r5
 800789a:	dcf2      	bgt.n	8007882 <_printf_i+0x212>
 800789c:	e7eb      	b.n	8007876 <_printf_i+0x206>
 800789e:	2500      	movs	r5, #0
 80078a0:	f104 0619 	add.w	r6, r4, #25
 80078a4:	e7f5      	b.n	8007892 <_printf_i+0x222>
 80078a6:	bf00      	nop
 80078a8:	08007c29 	.word	0x08007c29
 80078ac:	08007c3a 	.word	0x08007c3a

080078b0 <memmove>:
 80078b0:	4288      	cmp	r0, r1
 80078b2:	b510      	push	{r4, lr}
 80078b4:	eb01 0402 	add.w	r4, r1, r2
 80078b8:	d902      	bls.n	80078c0 <memmove+0x10>
 80078ba:	4284      	cmp	r4, r0
 80078bc:	4623      	mov	r3, r4
 80078be:	d807      	bhi.n	80078d0 <memmove+0x20>
 80078c0:	1e43      	subs	r3, r0, #1
 80078c2:	42a1      	cmp	r1, r4
 80078c4:	d008      	beq.n	80078d8 <memmove+0x28>
 80078c6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80078ca:	f803 2f01 	strb.w	r2, [r3, #1]!
 80078ce:	e7f8      	b.n	80078c2 <memmove+0x12>
 80078d0:	4402      	add	r2, r0
 80078d2:	4601      	mov	r1, r0
 80078d4:	428a      	cmp	r2, r1
 80078d6:	d100      	bne.n	80078da <memmove+0x2a>
 80078d8:	bd10      	pop	{r4, pc}
 80078da:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80078de:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80078e2:	e7f7      	b.n	80078d4 <memmove+0x24>

080078e4 <_sbrk_r>:
 80078e4:	b538      	push	{r3, r4, r5, lr}
 80078e6:	4d06      	ldr	r5, [pc, #24]	@ (8007900 <_sbrk_r+0x1c>)
 80078e8:	2300      	movs	r3, #0
 80078ea:	4604      	mov	r4, r0
 80078ec:	4608      	mov	r0, r1
 80078ee:	602b      	str	r3, [r5, #0]
 80078f0:	f7fc fa54 	bl	8003d9c <_sbrk>
 80078f4:	1c43      	adds	r3, r0, #1
 80078f6:	d102      	bne.n	80078fe <_sbrk_r+0x1a>
 80078f8:	682b      	ldr	r3, [r5, #0]
 80078fa:	b103      	cbz	r3, 80078fe <_sbrk_r+0x1a>
 80078fc:	6023      	str	r3, [r4, #0]
 80078fe:	bd38      	pop	{r3, r4, r5, pc}
 8007900:	20000454 	.word	0x20000454

08007904 <memcpy>:
 8007904:	440a      	add	r2, r1
 8007906:	4291      	cmp	r1, r2
 8007908:	f100 33ff 	add.w	r3, r0, #4294967295
 800790c:	d100      	bne.n	8007910 <memcpy+0xc>
 800790e:	4770      	bx	lr
 8007910:	b510      	push	{r4, lr}
 8007912:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007916:	f803 4f01 	strb.w	r4, [r3, #1]!
 800791a:	4291      	cmp	r1, r2
 800791c:	d1f9      	bne.n	8007912 <memcpy+0xe>
 800791e:	bd10      	pop	{r4, pc}

08007920 <_realloc_r>:
 8007920:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007924:	4680      	mov	r8, r0
 8007926:	4615      	mov	r5, r2
 8007928:	460c      	mov	r4, r1
 800792a:	b921      	cbnz	r1, 8007936 <_realloc_r+0x16>
 800792c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007930:	4611      	mov	r1, r2
 8007932:	f7ff bc4b 	b.w	80071cc <_malloc_r>
 8007936:	b92a      	cbnz	r2, 8007944 <_realloc_r+0x24>
 8007938:	f7ff fbdc 	bl	80070f4 <_free_r>
 800793c:	2400      	movs	r4, #0
 800793e:	4620      	mov	r0, r4
 8007940:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007944:	f000 f81a 	bl	800797c <_malloc_usable_size_r>
 8007948:	4285      	cmp	r5, r0
 800794a:	4606      	mov	r6, r0
 800794c:	d802      	bhi.n	8007954 <_realloc_r+0x34>
 800794e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8007952:	d8f4      	bhi.n	800793e <_realloc_r+0x1e>
 8007954:	4629      	mov	r1, r5
 8007956:	4640      	mov	r0, r8
 8007958:	f7ff fc38 	bl	80071cc <_malloc_r>
 800795c:	4607      	mov	r7, r0
 800795e:	2800      	cmp	r0, #0
 8007960:	d0ec      	beq.n	800793c <_realloc_r+0x1c>
 8007962:	42b5      	cmp	r5, r6
 8007964:	462a      	mov	r2, r5
 8007966:	4621      	mov	r1, r4
 8007968:	bf28      	it	cs
 800796a:	4632      	movcs	r2, r6
 800796c:	f7ff ffca 	bl	8007904 <memcpy>
 8007970:	4621      	mov	r1, r4
 8007972:	4640      	mov	r0, r8
 8007974:	f7ff fbbe 	bl	80070f4 <_free_r>
 8007978:	463c      	mov	r4, r7
 800797a:	e7e0      	b.n	800793e <_realloc_r+0x1e>

0800797c <_malloc_usable_size_r>:
 800797c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007980:	1f18      	subs	r0, r3, #4
 8007982:	2b00      	cmp	r3, #0
 8007984:	bfbc      	itt	lt
 8007986:	580b      	ldrlt	r3, [r1, r0]
 8007988:	18c0      	addlt	r0, r0, r3
 800798a:	4770      	bx	lr

0800798c <_init>:
 800798c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800798e:	bf00      	nop
 8007990:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007992:	bc08      	pop	{r3}
 8007994:	469e      	mov	lr, r3
 8007996:	4770      	bx	lr

08007998 <_fini>:
 8007998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800799a:	bf00      	nop
 800799c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800799e:	bc08      	pop	{r3}
 80079a0:	469e      	mov	lr, r3
 80079a2:	4770      	bx	lr
