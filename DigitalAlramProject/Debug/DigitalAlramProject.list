
DigitalAlramProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005028  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000108  080051b8  080051b8  000061b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080052c0  080052c0  00007118  2**0
                  CONTENTS
  4 .ARM          00000008  080052c0  080052c0  000062c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080052c8  080052c8  00007118  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080052c8  080052c8  000062c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080052cc  080052cc  000062cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000118  20000000  080052d0  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00007118  2**0
                  CONTENTS
 10 .bss          0000021c  20000118  20000118  00007118  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000334  20000334  00007118  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00007118  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e0f8  00000000  00000000  00007148  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002349  00000000  00000000  00015240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d88  00000000  00000000  00017590  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a88  00000000  00000000  00018318  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021f90  00000000  00000000  00018da0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011144  00000000  00000000  0003ad30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cc190  00000000  00000000  0004be74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00118004  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003cb0  00000000  00000000  00118048  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006d  00000000  00000000  0011bcf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000118 	.word	0x20000118
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080051a0 	.word	0x080051a0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000011c 	.word	0x2000011c
 80001cc:	080051a0 	.word	0x080051a0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <_7SEG_GPIO_Init>:
#include "7seg.h"

void _7SEG_GPIO_Init()
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b08a      	sub	sp, #40	@ 0x28
 8000564:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct;

	/* GPIOA,D,E Periph clock enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000566:	2300      	movs	r3, #0
 8000568:	613b      	str	r3, [r7, #16]
 800056a:	4b6b      	ldr	r3, [pc, #428]	@ (8000718 <_7SEG_GPIO_Init+0x1b8>)
 800056c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800056e:	4a6a      	ldr	r2, [pc, #424]	@ (8000718 <_7SEG_GPIO_Init+0x1b8>)
 8000570:	f043 0301 	orr.w	r3, r3, #1
 8000574:	6313      	str	r3, [r2, #48]	@ 0x30
 8000576:	4b68      	ldr	r3, [pc, #416]	@ (8000718 <_7SEG_GPIO_Init+0x1b8>)
 8000578:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800057a:	f003 0301 	and.w	r3, r3, #1
 800057e:	613b      	str	r3, [r7, #16]
 8000580:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000582:	2300      	movs	r3, #0
 8000584:	60fb      	str	r3, [r7, #12]
 8000586:	4b64      	ldr	r3, [pc, #400]	@ (8000718 <_7SEG_GPIO_Init+0x1b8>)
 8000588:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800058a:	4a63      	ldr	r2, [pc, #396]	@ (8000718 <_7SEG_GPIO_Init+0x1b8>)
 800058c:	f043 0304 	orr.w	r3, r3, #4
 8000590:	6313      	str	r3, [r2, #48]	@ 0x30
 8000592:	4b61      	ldr	r3, [pc, #388]	@ (8000718 <_7SEG_GPIO_Init+0x1b8>)
 8000594:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000596:	f003 0304 	and.w	r3, r3, #4
 800059a:	60fb      	str	r3, [r7, #12]
 800059c:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800059e:	2300      	movs	r3, #0
 80005a0:	60bb      	str	r3, [r7, #8]
 80005a2:	4b5d      	ldr	r3, [pc, #372]	@ (8000718 <_7SEG_GPIO_Init+0x1b8>)
 80005a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005a6:	4a5c      	ldr	r2, [pc, #368]	@ (8000718 <_7SEG_GPIO_Init+0x1b8>)
 80005a8:	f043 0308 	orr.w	r3, r3, #8
 80005ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80005ae:	4b5a      	ldr	r3, [pc, #360]	@ (8000718 <_7SEG_GPIO_Init+0x1b8>)
 80005b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005b2:	f003 0308 	and.w	r3, r3, #8
 80005b6:	60bb      	str	r3, [r7, #8]
 80005b8:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 80005ba:	2300      	movs	r3, #0
 80005bc:	607b      	str	r3, [r7, #4]
 80005be:	4b56      	ldr	r3, [pc, #344]	@ (8000718 <_7SEG_GPIO_Init+0x1b8>)
 80005c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005c2:	4a55      	ldr	r2, [pc, #340]	@ (8000718 <_7SEG_GPIO_Init+0x1b8>)
 80005c4:	f043 0310 	orr.w	r3, r3, #16
 80005c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80005ca:	4b53      	ldr	r3, [pc, #332]	@ (8000718 <_7SEG_GPIO_Init+0x1b8>)
 80005cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ce:	f003 0310 	and.w	r3, r3, #16
 80005d2:	607b      	str	r3, [r7, #4]
 80005d4:	687b      	ldr	r3, [r7, #4]

	//Digit1
	GPIO_InitStruct.Pin = GPIO_PIN_DGT1_A;
 80005d6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80005da:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005dc:	2301      	movs	r3, #1
 80005de:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e0:	2300      	movs	r3, #0
 80005e2:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005e4:	2300      	movs	r3, #0
 80005e6:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIO_DGT1_A, &GPIO_InitStruct);
 80005e8:	f107 0314 	add.w	r3, r7, #20
 80005ec:	4619      	mov	r1, r3
 80005ee:	484b      	ldr	r0, [pc, #300]	@ (800071c <_7SEG_GPIO_Init+0x1bc>)
 80005f0:	f002 f816 	bl	8002620 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_DGT1_B;
 80005f4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80005f8:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT1_B, &GPIO_InitStruct);
 80005fa:	f107 0314 	add.w	r3, r7, #20
 80005fe:	4619      	mov	r1, r3
 8000600:	4847      	ldr	r0, [pc, #284]	@ (8000720 <_7SEG_GPIO_Init+0x1c0>)
 8000602:	f002 f80d 	bl	8002620 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_DGT1_C;
 8000606:	2340      	movs	r3, #64	@ 0x40
 8000608:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT1_C, &GPIO_InitStruct);
 800060a:	f107 0314 	add.w	r3, r7, #20
 800060e:	4619      	mov	r1, r3
 8000610:	4842      	ldr	r0, [pc, #264]	@ (800071c <_7SEG_GPIO_Init+0x1bc>)
 8000612:	f002 f805 	bl	8002620 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_DGT1_D;
 8000616:	2320      	movs	r3, #32
 8000618:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT1_D, &GPIO_InitStruct);
 800061a:	f107 0314 	add.w	r3, r7, #20
 800061e:	4619      	mov	r1, r3
 8000620:	483e      	ldr	r0, [pc, #248]	@ (800071c <_7SEG_GPIO_Init+0x1bc>)
 8000622:	f001 fffd 	bl	8002620 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_DGT1_E;
 8000626:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800062a:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT1_E, &GPIO_InitStruct);
 800062c:	f107 0314 	add.w	r3, r7, #20
 8000630:	4619      	mov	r1, r3
 8000632:	483c      	ldr	r0, [pc, #240]	@ (8000724 <_7SEG_GPIO_Init+0x1c4>)
 8000634:	f001 fff4 	bl	8002620 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_DGT1_F;
 8000638:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800063c:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT1_F, &GPIO_InitStruct);
 800063e:	f107 0314 	add.w	r3, r7, #20
 8000642:	4619      	mov	r1, r3
 8000644:	4837      	ldr	r0, [pc, #220]	@ (8000724 <_7SEG_GPIO_Init+0x1c4>)
 8000646:	f001 ffeb 	bl	8002620 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_DGT1_G;
 800064a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800064e:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT1_G, &GPIO_InitStruct);
 8000650:	f107 0314 	add.w	r3, r7, #20
 8000654:	4619      	mov	r1, r3
 8000656:	4831      	ldr	r0, [pc, #196]	@ (800071c <_7SEG_GPIO_Init+0x1bc>)
 8000658:	f001 ffe2 	bl	8002620 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_DGT1_DP;
 800065c:	2380      	movs	r3, #128	@ 0x80
 800065e:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT1_DP, &GPIO_InitStruct);
 8000660:	f107 0314 	add.w	r3, r7, #20
 8000664:	4619      	mov	r1, r3
 8000666:	482d      	ldr	r0, [pc, #180]	@ (800071c <_7SEG_GPIO_Init+0x1bc>)
 8000668:	f001 ffda 	bl	8002620 <HAL_GPIO_Init>

	//Digit2
	GPIO_InitStruct.Pin = GPIO_PIN_DGT2_A;
 800066c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000670:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT2_A, &GPIO_InitStruct);
 8000672:	f107 0314 	add.w	r3, r7, #20
 8000676:	4619      	mov	r1, r3
 8000678:	482b      	ldr	r0, [pc, #172]	@ (8000728 <_7SEG_GPIO_Init+0x1c8>)
 800067a:	f001 ffd1 	bl	8002620 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_DGT2_B;
 800067e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000682:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT2_B, &GPIO_InitStruct);
 8000684:	f107 0314 	add.w	r3, r7, #20
 8000688:	4619      	mov	r1, r3
 800068a:	4827      	ldr	r0, [pc, #156]	@ (8000728 <_7SEG_GPIO_Init+0x1c8>)
 800068c:	f001 ffc8 	bl	8002620 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_DGT2_C;
 8000690:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000694:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT2_C, &GPIO_InitStruct);
 8000696:	f107 0314 	add.w	r3, r7, #20
 800069a:	4619      	mov	r1, r3
 800069c:	4822      	ldr	r0, [pc, #136]	@ (8000728 <_7SEG_GPIO_Init+0x1c8>)
 800069e:	f001 ffbf 	bl	8002620 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_DGT2_D;
 80006a2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80006a6:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT2_D, &GPIO_InitStruct);
 80006a8:	f107 0314 	add.w	r3, r7, #20
 80006ac:	4619      	mov	r1, r3
 80006ae:	481e      	ldr	r0, [pc, #120]	@ (8000728 <_7SEG_GPIO_Init+0x1c8>)
 80006b0:	f001 ffb6 	bl	8002620 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_DGT2_E;
 80006b4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80006b8:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT2_E, &GPIO_InitStruct);
 80006ba:	f107 0314 	add.w	r3, r7, #20
 80006be:	4619      	mov	r1, r3
 80006c0:	4819      	ldr	r0, [pc, #100]	@ (8000728 <_7SEG_GPIO_Init+0x1c8>)
 80006c2:	f001 ffad 	bl	8002620 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_DGT2_F;
 80006c6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80006ca:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT2_F, &GPIO_InitStruct);
 80006cc:	f107 0314 	add.w	r3, r7, #20
 80006d0:	4619      	mov	r1, r3
 80006d2:	4815      	ldr	r0, [pc, #84]	@ (8000728 <_7SEG_GPIO_Init+0x1c8>)
 80006d4:	f001 ffa4 	bl	8002620 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_DGT2_G;
 80006d8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80006dc:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT2_G, &GPIO_InitStruct);
 80006de:	f107 0314 	add.w	r3, r7, #20
 80006e2:	4619      	mov	r1, r3
 80006e4:	4810      	ldr	r0, [pc, #64]	@ (8000728 <_7SEG_GPIO_Init+0x1c8>)
 80006e6:	f001 ff9b 	bl	8002620 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_DGT2_DP;
 80006ea:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80006ee:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT2_DP, &GPIO_InitStruct);
 80006f0:	f107 0314 	add.w	r3, r7, #20
 80006f4:	4619      	mov	r1, r3
 80006f6:	480c      	ldr	r0, [pc, #48]	@ (8000728 <_7SEG_GPIO_Init+0x1c8>)
 80006f8:	f001 ff92 	bl	8002620 <HAL_GPIO_Init>

	
	_7SEG_SetNumber(DGT1, 0, ON);
 80006fc:	2201      	movs	r2, #1
 80006fe:	2100      	movs	r1, #0
 8000700:	2000      	movs	r0, #0
 8000702:	f000 f813 	bl	800072c <_7SEG_SetNumber>
	_7SEG_SetNumber(DGT2, 0, ON);
 8000706:	2201      	movs	r2, #1
 8000708:	2100      	movs	r1, #0
 800070a:	2001      	movs	r0, #1
 800070c:	f000 f80e 	bl	800072c <_7SEG_SetNumber>
}
 8000710:	bf00      	nop
 8000712:	3728      	adds	r7, #40	@ 0x28
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}
 8000718:	40023800 	.word	0x40023800
 800071c:	40020c00 	.word	0x40020c00
 8000720:	40020000 	.word	0x40020000
 8000724:	40020800 	.word	0x40020800
 8000728:	40021000 	.word	0x40021000

0800072c <_7SEG_SetNumber>:


void _7SEG_SetNumber(int dgt, int num, int dp)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b084      	sub	sp, #16
 8000730:	af00      	add	r7, sp, #0
 8000732:	60f8      	str	r0, [r7, #12]
 8000734:	60b9      	str	r1, [r7, #8]
 8000736:	607a      	str	r2, [r7, #4]
	if(dgt == DGT1)
 8000738:	68fb      	ldr	r3, [r7, #12]
 800073a:	2b00      	cmp	r3, #0
 800073c:	f040 81dc 	bne.w	8000af8 <_7SEG_SetNumber+0x3cc>
	{
		switch(num%10)
 8000740:	68b9      	ldr	r1, [r7, #8]
 8000742:	4bcb      	ldr	r3, [pc, #812]	@ (8000a70 <_7SEG_SetNumber+0x344>)
 8000744:	fb83 2301 	smull	r2, r3, r3, r1
 8000748:	109a      	asrs	r2, r3, #2
 800074a:	17cb      	asrs	r3, r1, #31
 800074c:	1ad2      	subs	r2, r2, r3
 800074e:	4613      	mov	r3, r2
 8000750:	009b      	lsls	r3, r3, #2
 8000752:	4413      	add	r3, r2
 8000754:	005b      	lsls	r3, r3, #1
 8000756:	1aca      	subs	r2, r1, r3
 8000758:	2a09      	cmp	r2, #9
 800075a:	f200 81ba 	bhi.w	8000ad2 <_7SEG_SetNumber+0x3a6>
 800075e:	a301      	add	r3, pc, #4	@ (adr r3, 8000764 <_7SEG_SetNumber+0x38>)
 8000760:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 8000764:	0800078d 	.word	0x0800078d
 8000768:	080007df 	.word	0x080007df
 800076c:	08000831 	.word	0x08000831
 8000770:	08000883 	.word	0x08000883
 8000774:	080008d5 	.word	0x080008d5
 8000778:	08000927 	.word	0x08000927
 800077c:	08000979 	.word	0x08000979
 8000780:	080009cb 	.word	0x080009cb
 8000784:	08000a1d 	.word	0x08000a1d
 8000788:	08000a81 	.word	0x08000a81
		{
			case 0: DGT1_A_ON; DGT1_B_ON; DGT1_C_ON; DGT1_D_ON; DGT1_E_ON; DGT1_F_ON;
 800078c:	2200      	movs	r2, #0
 800078e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000792:	48b8      	ldr	r0, [pc, #736]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 8000794:	f002 f8f8 	bl	8002988 <HAL_GPIO_WritePin>
 8000798:	2200      	movs	r2, #0
 800079a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800079e:	48b6      	ldr	r0, [pc, #728]	@ (8000a78 <_7SEG_SetNumber+0x34c>)
 80007a0:	f002 f8f2 	bl	8002988 <HAL_GPIO_WritePin>
 80007a4:	2200      	movs	r2, #0
 80007a6:	2140      	movs	r1, #64	@ 0x40
 80007a8:	48b2      	ldr	r0, [pc, #712]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 80007aa:	f002 f8ed 	bl	8002988 <HAL_GPIO_WritePin>
 80007ae:	2200      	movs	r2, #0
 80007b0:	2120      	movs	r1, #32
 80007b2:	48b0      	ldr	r0, [pc, #704]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 80007b4:	f002 f8e8 	bl	8002988 <HAL_GPIO_WritePin>
 80007b8:	2200      	movs	r2, #0
 80007ba:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80007be:	48af      	ldr	r0, [pc, #700]	@ (8000a7c <_7SEG_SetNumber+0x350>)
 80007c0:	f002 f8e2 	bl	8002988 <HAL_GPIO_WritePin>
 80007c4:	2200      	movs	r2, #0
 80007c6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80007ca:	48ac      	ldr	r0, [pc, #688]	@ (8000a7c <_7SEG_SetNumber+0x350>)
 80007cc:	f002 f8dc 	bl	8002988 <HAL_GPIO_WritePin>
					DGT1_G_OFF;
 80007d0:	2201      	movs	r2, #1
 80007d2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80007d6:	48a7      	ldr	r0, [pc, #668]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 80007d8:	f002 f8d6 	bl	8002988 <HAL_GPIO_WritePin>
				break;
 80007dc:	e179      	b.n	8000ad2 <_7SEG_SetNumber+0x3a6>
			case 1: DGT1_B_ON; DGT1_C_ON;
 80007de:	2200      	movs	r2, #0
 80007e0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80007e4:	48a4      	ldr	r0, [pc, #656]	@ (8000a78 <_7SEG_SetNumber+0x34c>)
 80007e6:	f002 f8cf 	bl	8002988 <HAL_GPIO_WritePin>
 80007ea:	2200      	movs	r2, #0
 80007ec:	2140      	movs	r1, #64	@ 0x40
 80007ee:	48a1      	ldr	r0, [pc, #644]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 80007f0:	f002 f8ca 	bl	8002988 <HAL_GPIO_WritePin>
					DGT1_A_OFF; DGT1_D_OFF; DGT1_E_OFF; DGT1_F_OFF; DGT1_G_OFF;
 80007f4:	2201      	movs	r2, #1
 80007f6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80007fa:	489e      	ldr	r0, [pc, #632]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 80007fc:	f002 f8c4 	bl	8002988 <HAL_GPIO_WritePin>
 8000800:	2201      	movs	r2, #1
 8000802:	2120      	movs	r1, #32
 8000804:	489b      	ldr	r0, [pc, #620]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 8000806:	f002 f8bf 	bl	8002988 <HAL_GPIO_WritePin>
 800080a:	2201      	movs	r2, #1
 800080c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000810:	489a      	ldr	r0, [pc, #616]	@ (8000a7c <_7SEG_SetNumber+0x350>)
 8000812:	f002 f8b9 	bl	8002988 <HAL_GPIO_WritePin>
 8000816:	2201      	movs	r2, #1
 8000818:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800081c:	4897      	ldr	r0, [pc, #604]	@ (8000a7c <_7SEG_SetNumber+0x350>)
 800081e:	f002 f8b3 	bl	8002988 <HAL_GPIO_WritePin>
 8000822:	2201      	movs	r2, #1
 8000824:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000828:	4892      	ldr	r0, [pc, #584]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 800082a:	f002 f8ad 	bl	8002988 <HAL_GPIO_WritePin>
				break;
 800082e:	e150      	b.n	8000ad2 <_7SEG_SetNumber+0x3a6>
			case 2: DGT1_A_ON; DGT1_B_ON; DGT1_G_ON; DGT1_E_ON; DGT1_D_ON;
 8000830:	2200      	movs	r2, #0
 8000832:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000836:	488f      	ldr	r0, [pc, #572]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 8000838:	f002 f8a6 	bl	8002988 <HAL_GPIO_WritePin>
 800083c:	2200      	movs	r2, #0
 800083e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000842:	488d      	ldr	r0, [pc, #564]	@ (8000a78 <_7SEG_SetNumber+0x34c>)
 8000844:	f002 f8a0 	bl	8002988 <HAL_GPIO_WritePin>
 8000848:	2200      	movs	r2, #0
 800084a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800084e:	4889      	ldr	r0, [pc, #548]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 8000850:	f002 f89a 	bl	8002988 <HAL_GPIO_WritePin>
 8000854:	2200      	movs	r2, #0
 8000856:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800085a:	4888      	ldr	r0, [pc, #544]	@ (8000a7c <_7SEG_SetNumber+0x350>)
 800085c:	f002 f894 	bl	8002988 <HAL_GPIO_WritePin>
 8000860:	2200      	movs	r2, #0
 8000862:	2120      	movs	r1, #32
 8000864:	4883      	ldr	r0, [pc, #524]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 8000866:	f002 f88f 	bl	8002988 <HAL_GPIO_WritePin>
					DGT1_C_OFF; DGT1_F_OFF;
 800086a:	2201      	movs	r2, #1
 800086c:	2140      	movs	r1, #64	@ 0x40
 800086e:	4881      	ldr	r0, [pc, #516]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 8000870:	f002 f88a 	bl	8002988 <HAL_GPIO_WritePin>
 8000874:	2201      	movs	r2, #1
 8000876:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800087a:	4880      	ldr	r0, [pc, #512]	@ (8000a7c <_7SEG_SetNumber+0x350>)
 800087c:	f002 f884 	bl	8002988 <HAL_GPIO_WritePin>
				break;
 8000880:	e127      	b.n	8000ad2 <_7SEG_SetNumber+0x3a6>
			case 3: DGT1_A_ON; DGT1_B_ON; DGT1_C_ON; DGT1_D_ON; DGT1_G_ON;
 8000882:	2200      	movs	r2, #0
 8000884:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000888:	487a      	ldr	r0, [pc, #488]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 800088a:	f002 f87d 	bl	8002988 <HAL_GPIO_WritePin>
 800088e:	2200      	movs	r2, #0
 8000890:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000894:	4878      	ldr	r0, [pc, #480]	@ (8000a78 <_7SEG_SetNumber+0x34c>)
 8000896:	f002 f877 	bl	8002988 <HAL_GPIO_WritePin>
 800089a:	2200      	movs	r2, #0
 800089c:	2140      	movs	r1, #64	@ 0x40
 800089e:	4875      	ldr	r0, [pc, #468]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 80008a0:	f002 f872 	bl	8002988 <HAL_GPIO_WritePin>
 80008a4:	2200      	movs	r2, #0
 80008a6:	2120      	movs	r1, #32
 80008a8:	4872      	ldr	r0, [pc, #456]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 80008aa:	f002 f86d 	bl	8002988 <HAL_GPIO_WritePin>
 80008ae:	2200      	movs	r2, #0
 80008b0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80008b4:	486f      	ldr	r0, [pc, #444]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 80008b6:	f002 f867 	bl	8002988 <HAL_GPIO_WritePin>
					DGT1_E_OFF; DGT1_F_OFF;
 80008ba:	2201      	movs	r2, #1
 80008bc:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80008c0:	486e      	ldr	r0, [pc, #440]	@ (8000a7c <_7SEG_SetNumber+0x350>)
 80008c2:	f002 f861 	bl	8002988 <HAL_GPIO_WritePin>
 80008c6:	2201      	movs	r2, #1
 80008c8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80008cc:	486b      	ldr	r0, [pc, #428]	@ (8000a7c <_7SEG_SetNumber+0x350>)
 80008ce:	f002 f85b 	bl	8002988 <HAL_GPIO_WritePin>
				break;
 80008d2:	e0fe      	b.n	8000ad2 <_7SEG_SetNumber+0x3a6>
			case 4: DGT1_F_ON; DGT1_G_ON; DGT1_B_ON; DGT1_C_ON;
 80008d4:	2200      	movs	r2, #0
 80008d6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80008da:	4868      	ldr	r0, [pc, #416]	@ (8000a7c <_7SEG_SetNumber+0x350>)
 80008dc:	f002 f854 	bl	8002988 <HAL_GPIO_WritePin>
 80008e0:	2200      	movs	r2, #0
 80008e2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80008e6:	4863      	ldr	r0, [pc, #396]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 80008e8:	f002 f84e 	bl	8002988 <HAL_GPIO_WritePin>
 80008ec:	2200      	movs	r2, #0
 80008ee:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80008f2:	4861      	ldr	r0, [pc, #388]	@ (8000a78 <_7SEG_SetNumber+0x34c>)
 80008f4:	f002 f848 	bl	8002988 <HAL_GPIO_WritePin>
 80008f8:	2200      	movs	r2, #0
 80008fa:	2140      	movs	r1, #64	@ 0x40
 80008fc:	485d      	ldr	r0, [pc, #372]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 80008fe:	f002 f843 	bl	8002988 <HAL_GPIO_WritePin>
					DGT1_A_OFF; DGT1_D_OFF; DGT1_E_OFF;
 8000902:	2201      	movs	r2, #1
 8000904:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000908:	485a      	ldr	r0, [pc, #360]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 800090a:	f002 f83d 	bl	8002988 <HAL_GPIO_WritePin>
 800090e:	2201      	movs	r2, #1
 8000910:	2120      	movs	r1, #32
 8000912:	4858      	ldr	r0, [pc, #352]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 8000914:	f002 f838 	bl	8002988 <HAL_GPIO_WritePin>
 8000918:	2201      	movs	r2, #1
 800091a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800091e:	4857      	ldr	r0, [pc, #348]	@ (8000a7c <_7SEG_SetNumber+0x350>)
 8000920:	f002 f832 	bl	8002988 <HAL_GPIO_WritePin>
				break;
 8000924:	e0d5      	b.n	8000ad2 <_7SEG_SetNumber+0x3a6>
			case 5: DGT1_A_ON; DGT1_F_ON; DGT1_G_ON; DGT1_C_ON; DGT1_D_ON;
 8000926:	2200      	movs	r2, #0
 8000928:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800092c:	4851      	ldr	r0, [pc, #324]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 800092e:	f002 f82b 	bl	8002988 <HAL_GPIO_WritePin>
 8000932:	2200      	movs	r2, #0
 8000934:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000938:	4850      	ldr	r0, [pc, #320]	@ (8000a7c <_7SEG_SetNumber+0x350>)
 800093a:	f002 f825 	bl	8002988 <HAL_GPIO_WritePin>
 800093e:	2200      	movs	r2, #0
 8000940:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000944:	484b      	ldr	r0, [pc, #300]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 8000946:	f002 f81f 	bl	8002988 <HAL_GPIO_WritePin>
 800094a:	2200      	movs	r2, #0
 800094c:	2140      	movs	r1, #64	@ 0x40
 800094e:	4849      	ldr	r0, [pc, #292]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 8000950:	f002 f81a 	bl	8002988 <HAL_GPIO_WritePin>
 8000954:	2200      	movs	r2, #0
 8000956:	2120      	movs	r1, #32
 8000958:	4846      	ldr	r0, [pc, #280]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 800095a:	f002 f815 	bl	8002988 <HAL_GPIO_WritePin>
					DGT1_B_OFF; DGT1_E_OFF;
 800095e:	2201      	movs	r2, #1
 8000960:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000964:	4844      	ldr	r0, [pc, #272]	@ (8000a78 <_7SEG_SetNumber+0x34c>)
 8000966:	f002 f80f 	bl	8002988 <HAL_GPIO_WritePin>
 800096a:	2201      	movs	r2, #1
 800096c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000970:	4842      	ldr	r0, [pc, #264]	@ (8000a7c <_7SEG_SetNumber+0x350>)
 8000972:	f002 f809 	bl	8002988 <HAL_GPIO_WritePin>
				break;
 8000976:	e0ac      	b.n	8000ad2 <_7SEG_SetNumber+0x3a6>
			case 6: DGT1_A_ON; DGT1_C_ON; DGT1_D_ON; DGT1_E_ON; DGT1_F_ON; DGT1_G_ON;
 8000978:	2200      	movs	r2, #0
 800097a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800097e:	483d      	ldr	r0, [pc, #244]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 8000980:	f002 f802 	bl	8002988 <HAL_GPIO_WritePin>
 8000984:	2200      	movs	r2, #0
 8000986:	2140      	movs	r1, #64	@ 0x40
 8000988:	483a      	ldr	r0, [pc, #232]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 800098a:	f001 fffd 	bl	8002988 <HAL_GPIO_WritePin>
 800098e:	2200      	movs	r2, #0
 8000990:	2120      	movs	r1, #32
 8000992:	4838      	ldr	r0, [pc, #224]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 8000994:	f001 fff8 	bl	8002988 <HAL_GPIO_WritePin>
 8000998:	2200      	movs	r2, #0
 800099a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800099e:	4837      	ldr	r0, [pc, #220]	@ (8000a7c <_7SEG_SetNumber+0x350>)
 80009a0:	f001 fff2 	bl	8002988 <HAL_GPIO_WritePin>
 80009a4:	2200      	movs	r2, #0
 80009a6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80009aa:	4834      	ldr	r0, [pc, #208]	@ (8000a7c <_7SEG_SetNumber+0x350>)
 80009ac:	f001 ffec 	bl	8002988 <HAL_GPIO_WritePin>
 80009b0:	2200      	movs	r2, #0
 80009b2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80009b6:	482f      	ldr	r0, [pc, #188]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 80009b8:	f001 ffe6 	bl	8002988 <HAL_GPIO_WritePin>
					DGT1_B_OFF;
 80009bc:	2201      	movs	r2, #1
 80009be:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80009c2:	482d      	ldr	r0, [pc, #180]	@ (8000a78 <_7SEG_SetNumber+0x34c>)
 80009c4:	f001 ffe0 	bl	8002988 <HAL_GPIO_WritePin>
				break;
 80009c8:	e083      	b.n	8000ad2 <_7SEG_SetNumber+0x3a6>
			case 7: DGT1_F_ON; DGT1_A_ON; DGT1_B_ON; DGT1_C_ON;
 80009ca:	2200      	movs	r2, #0
 80009cc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80009d0:	482a      	ldr	r0, [pc, #168]	@ (8000a7c <_7SEG_SetNumber+0x350>)
 80009d2:	f001 ffd9 	bl	8002988 <HAL_GPIO_WritePin>
 80009d6:	2200      	movs	r2, #0
 80009d8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80009dc:	4825      	ldr	r0, [pc, #148]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 80009de:	f001 ffd3 	bl	8002988 <HAL_GPIO_WritePin>
 80009e2:	2200      	movs	r2, #0
 80009e4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80009e8:	4823      	ldr	r0, [pc, #140]	@ (8000a78 <_7SEG_SetNumber+0x34c>)
 80009ea:	f001 ffcd 	bl	8002988 <HAL_GPIO_WritePin>
 80009ee:	2200      	movs	r2, #0
 80009f0:	2140      	movs	r1, #64	@ 0x40
 80009f2:	4820      	ldr	r0, [pc, #128]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 80009f4:	f001 ffc8 	bl	8002988 <HAL_GPIO_WritePin>
					DGT1_D_OFF; DGT1_E_OFF; DGT1_G_OFF;
 80009f8:	2201      	movs	r2, #1
 80009fa:	2120      	movs	r1, #32
 80009fc:	481d      	ldr	r0, [pc, #116]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 80009fe:	f001 ffc3 	bl	8002988 <HAL_GPIO_WritePin>
 8000a02:	2201      	movs	r2, #1
 8000a04:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000a08:	481c      	ldr	r0, [pc, #112]	@ (8000a7c <_7SEG_SetNumber+0x350>)
 8000a0a:	f001 ffbd 	bl	8002988 <HAL_GPIO_WritePin>
 8000a0e:	2201      	movs	r2, #1
 8000a10:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000a14:	4817      	ldr	r0, [pc, #92]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 8000a16:	f001 ffb7 	bl	8002988 <HAL_GPIO_WritePin>
				break;
 8000a1a:	e05a      	b.n	8000ad2 <_7SEG_SetNumber+0x3a6>
			case 8: DGT1_A_ON; DGT1_B_ON; DGT1_C_ON; DGT1_D_ON; DGT1_E_ON; DGT1_F_ON; DGT1_G_ON;
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000a22:	4814      	ldr	r0, [pc, #80]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 8000a24:	f001 ffb0 	bl	8002988 <HAL_GPIO_WritePin>
 8000a28:	2200      	movs	r2, #0
 8000a2a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000a2e:	4812      	ldr	r0, [pc, #72]	@ (8000a78 <_7SEG_SetNumber+0x34c>)
 8000a30:	f001 ffaa 	bl	8002988 <HAL_GPIO_WritePin>
 8000a34:	2200      	movs	r2, #0
 8000a36:	2140      	movs	r1, #64	@ 0x40
 8000a38:	480e      	ldr	r0, [pc, #56]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 8000a3a:	f001 ffa5 	bl	8002988 <HAL_GPIO_WritePin>
 8000a3e:	2200      	movs	r2, #0
 8000a40:	2120      	movs	r1, #32
 8000a42:	480c      	ldr	r0, [pc, #48]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 8000a44:	f001 ffa0 	bl	8002988 <HAL_GPIO_WritePin>
 8000a48:	2200      	movs	r2, #0
 8000a4a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000a4e:	480b      	ldr	r0, [pc, #44]	@ (8000a7c <_7SEG_SetNumber+0x350>)
 8000a50:	f001 ff9a 	bl	8002988 <HAL_GPIO_WritePin>
 8000a54:	2200      	movs	r2, #0
 8000a56:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a5a:	4808      	ldr	r0, [pc, #32]	@ (8000a7c <_7SEG_SetNumber+0x350>)
 8000a5c:	f001 ff94 	bl	8002988 <HAL_GPIO_WritePin>
 8000a60:	2200      	movs	r2, #0
 8000a62:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000a66:	4803      	ldr	r0, [pc, #12]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 8000a68:	f001 ff8e 	bl	8002988 <HAL_GPIO_WritePin>
				break;
 8000a6c:	e031      	b.n	8000ad2 <_7SEG_SetNumber+0x3a6>
 8000a6e:	bf00      	nop
 8000a70:	66666667 	.word	0x66666667
 8000a74:	40020c00 	.word	0x40020c00
 8000a78:	40020000 	.word	0x40020000
 8000a7c:	40020800 	.word	0x40020800
			case 9: DGT1_A_ON; DGT1_B_ON; DGT1_C_ON; DGT1_D_ON; DGT1_F_ON; DGT1_G_ON;
 8000a80:	2200      	movs	r2, #0
 8000a82:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000a86:	48c8      	ldr	r0, [pc, #800]	@ (8000da8 <_7SEG_SetNumber+0x67c>)
 8000a88:	f001 ff7e 	bl	8002988 <HAL_GPIO_WritePin>
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000a92:	48c6      	ldr	r0, [pc, #792]	@ (8000dac <_7SEG_SetNumber+0x680>)
 8000a94:	f001 ff78 	bl	8002988 <HAL_GPIO_WritePin>
 8000a98:	2200      	movs	r2, #0
 8000a9a:	2140      	movs	r1, #64	@ 0x40
 8000a9c:	48c2      	ldr	r0, [pc, #776]	@ (8000da8 <_7SEG_SetNumber+0x67c>)
 8000a9e:	f001 ff73 	bl	8002988 <HAL_GPIO_WritePin>
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	2120      	movs	r1, #32
 8000aa6:	48c0      	ldr	r0, [pc, #768]	@ (8000da8 <_7SEG_SetNumber+0x67c>)
 8000aa8:	f001 ff6e 	bl	8002988 <HAL_GPIO_WritePin>
 8000aac:	2200      	movs	r2, #0
 8000aae:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000ab2:	48bf      	ldr	r0, [pc, #764]	@ (8000db0 <_7SEG_SetNumber+0x684>)
 8000ab4:	f001 ff68 	bl	8002988 <HAL_GPIO_WritePin>
 8000ab8:	2200      	movs	r2, #0
 8000aba:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000abe:	48ba      	ldr	r0, [pc, #744]	@ (8000da8 <_7SEG_SetNumber+0x67c>)
 8000ac0:	f001 ff62 	bl	8002988 <HAL_GPIO_WritePin>
					DGT1_E_OFF;
 8000ac4:	2201      	movs	r2, #1
 8000ac6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000aca:	48b9      	ldr	r0, [pc, #740]	@ (8000db0 <_7SEG_SetNumber+0x684>)
 8000acc:	f001 ff5c 	bl	8002988 <HAL_GPIO_WritePin>
				break;
 8000ad0:	bf00      	nop
		}

		if(dp == ON)
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	2b01      	cmp	r3, #1
 8000ad6:	d105      	bne.n	8000ae4 <_7SEG_SetNumber+0x3b8>
		{
			DGT1_DP_ON;
 8000ad8:	2200      	movs	r2, #0
 8000ada:	2180      	movs	r1, #128	@ 0x80
 8000adc:	48b2      	ldr	r0, [pc, #712]	@ (8000da8 <_7SEG_SetNumber+0x67c>)
 8000ade:	f001 ff53 	bl	8002988 <HAL_GPIO_WritePin>
		else if(dp == OFF)
		{
			DGT2_DP_OFF;
		}
	}
}
 8000ae2:	e1ff      	b.n	8000ee4 <_7SEG_SetNumber+0x7b8>
		else if(dp == OFF)
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	f040 81fc 	bne.w	8000ee4 <_7SEG_SetNumber+0x7b8>
			DGT1_DP_OFF;
 8000aec:	2201      	movs	r2, #1
 8000aee:	2180      	movs	r1, #128	@ 0x80
 8000af0:	48ad      	ldr	r0, [pc, #692]	@ (8000da8 <_7SEG_SetNumber+0x67c>)
 8000af2:	f001 ff49 	bl	8002988 <HAL_GPIO_WritePin>
}
 8000af6:	e1f5      	b.n	8000ee4 <_7SEG_SetNumber+0x7b8>
	else if(dgt == DGT2)
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	2b01      	cmp	r3, #1
 8000afc:	f040 81f2 	bne.w	8000ee4 <_7SEG_SetNumber+0x7b8>
		switch(num%10)
 8000b00:	68b9      	ldr	r1, [r7, #8]
 8000b02:	4bac      	ldr	r3, [pc, #688]	@ (8000db4 <_7SEG_SetNumber+0x688>)
 8000b04:	fb83 2301 	smull	r2, r3, r3, r1
 8000b08:	109a      	asrs	r2, r3, #2
 8000b0a:	17cb      	asrs	r3, r1, #31
 8000b0c:	1ad2      	subs	r2, r2, r3
 8000b0e:	4613      	mov	r3, r2
 8000b10:	009b      	lsls	r3, r3, #2
 8000b12:	4413      	add	r3, r2
 8000b14:	005b      	lsls	r3, r3, #1
 8000b16:	1aca      	subs	r2, r1, r3
 8000b18:	2a09      	cmp	r2, #9
 8000b1a:	f200 81d0 	bhi.w	8000ebe <_7SEG_SetNumber+0x792>
 8000b1e:	a301      	add	r3, pc, #4	@ (adr r3, 8000b24 <_7SEG_SetNumber+0x3f8>)
 8000b20:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 8000b24:	08000b4d 	.word	0x08000b4d
 8000b28:	08000ba3 	.word	0x08000ba3
 8000b2c:	08000bf9 	.word	0x08000bf9
 8000b30:	08000c4f 	.word	0x08000c4f
 8000b34:	08000ca5 	.word	0x08000ca5
 8000b38:	08000cfb 	.word	0x08000cfb
 8000b3c:	08000d51 	.word	0x08000d51
 8000b40:	08000dbd 	.word	0x08000dbd
 8000b44:	08000e13 	.word	0x08000e13
 8000b48:	08000e69 	.word	0x08000e69
			case 0: DGT2_A_ON; DGT2_B_ON; DGT2_C_ON; DGT2_D_ON; DGT2_E_ON; DGT2_F_ON;
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000b52:	4899      	ldr	r0, [pc, #612]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000b54:	f001 ff18 	bl	8002988 <HAL_GPIO_WritePin>
 8000b58:	2200      	movs	r2, #0
 8000b5a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000b5e:	4896      	ldr	r0, [pc, #600]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000b60:	f001 ff12 	bl	8002988 <HAL_GPIO_WritePin>
 8000b64:	2200      	movs	r2, #0
 8000b66:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000b6a:	4893      	ldr	r0, [pc, #588]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000b6c:	f001 ff0c 	bl	8002988 <HAL_GPIO_WritePin>
 8000b70:	2200      	movs	r2, #0
 8000b72:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000b76:	4890      	ldr	r0, [pc, #576]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000b78:	f001 ff06 	bl	8002988 <HAL_GPIO_WritePin>
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000b82:	488d      	ldr	r0, [pc, #564]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000b84:	f001 ff00 	bl	8002988 <HAL_GPIO_WritePin>
 8000b88:	2200      	movs	r2, #0
 8000b8a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000b8e:	488a      	ldr	r0, [pc, #552]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000b90:	f001 fefa 	bl	8002988 <HAL_GPIO_WritePin>
					DGT2_G_OFF;
 8000b94:	2201      	movs	r2, #1
 8000b96:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000b9a:	4887      	ldr	r0, [pc, #540]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000b9c:	f001 fef4 	bl	8002988 <HAL_GPIO_WritePin>
				break;
 8000ba0:	e18d      	b.n	8000ebe <_7SEG_SetNumber+0x792>
			case 1: DGT2_B_ON; DGT2_C_ON;
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000ba8:	4883      	ldr	r0, [pc, #524]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000baa:	f001 feed 	bl	8002988 <HAL_GPIO_WritePin>
 8000bae:	2200      	movs	r2, #0
 8000bb0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000bb4:	4880      	ldr	r0, [pc, #512]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000bb6:	f001 fee7 	bl	8002988 <HAL_GPIO_WritePin>
					DGT2_A_OFF; DGT2_D_OFF; DGT2_E_OFF; DGT2_F_OFF; DGT2_G_OFF;
 8000bba:	2201      	movs	r2, #1
 8000bbc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000bc0:	487d      	ldr	r0, [pc, #500]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000bc2:	f001 fee1 	bl	8002988 <HAL_GPIO_WritePin>
 8000bc6:	2201      	movs	r2, #1
 8000bc8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000bcc:	487a      	ldr	r0, [pc, #488]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000bce:	f001 fedb 	bl	8002988 <HAL_GPIO_WritePin>
 8000bd2:	2201      	movs	r2, #1
 8000bd4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000bd8:	4877      	ldr	r0, [pc, #476]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000bda:	f001 fed5 	bl	8002988 <HAL_GPIO_WritePin>
 8000bde:	2201      	movs	r2, #1
 8000be0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000be4:	4874      	ldr	r0, [pc, #464]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000be6:	f001 fecf 	bl	8002988 <HAL_GPIO_WritePin>
 8000bea:	2201      	movs	r2, #1
 8000bec:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000bf0:	4871      	ldr	r0, [pc, #452]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000bf2:	f001 fec9 	bl	8002988 <HAL_GPIO_WritePin>
				break;
 8000bf6:	e162      	b.n	8000ebe <_7SEG_SetNumber+0x792>
			case 2: DGT2_A_ON; DGT2_B_ON; DGT2_G_ON; DGT2_E_ON; DGT2_D_ON;
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000bfe:	486e      	ldr	r0, [pc, #440]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000c00:	f001 fec2 	bl	8002988 <HAL_GPIO_WritePin>
 8000c04:	2200      	movs	r2, #0
 8000c06:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000c0a:	486b      	ldr	r0, [pc, #428]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000c0c:	f001 febc 	bl	8002988 <HAL_GPIO_WritePin>
 8000c10:	2200      	movs	r2, #0
 8000c12:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000c16:	4868      	ldr	r0, [pc, #416]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000c18:	f001 feb6 	bl	8002988 <HAL_GPIO_WritePin>
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000c22:	4865      	ldr	r0, [pc, #404]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000c24:	f001 feb0 	bl	8002988 <HAL_GPIO_WritePin>
 8000c28:	2200      	movs	r2, #0
 8000c2a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000c2e:	4862      	ldr	r0, [pc, #392]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000c30:	f001 feaa 	bl	8002988 <HAL_GPIO_WritePin>
					DGT2_C_OFF; DGT2_F_OFF;
 8000c34:	2201      	movs	r2, #1
 8000c36:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000c3a:	485f      	ldr	r0, [pc, #380]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000c3c:	f001 fea4 	bl	8002988 <HAL_GPIO_WritePin>
 8000c40:	2201      	movs	r2, #1
 8000c42:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000c46:	485c      	ldr	r0, [pc, #368]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000c48:	f001 fe9e 	bl	8002988 <HAL_GPIO_WritePin>
				break;
 8000c4c:	e137      	b.n	8000ebe <_7SEG_SetNumber+0x792>
			case 3: DGT2_A_ON; DGT2_B_ON; DGT2_C_ON; DGT2_D_ON; DGT2_G_ON;
 8000c4e:	2200      	movs	r2, #0
 8000c50:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000c54:	4858      	ldr	r0, [pc, #352]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000c56:	f001 fe97 	bl	8002988 <HAL_GPIO_WritePin>
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000c60:	4855      	ldr	r0, [pc, #340]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000c62:	f001 fe91 	bl	8002988 <HAL_GPIO_WritePin>
 8000c66:	2200      	movs	r2, #0
 8000c68:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000c6c:	4852      	ldr	r0, [pc, #328]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000c6e:	f001 fe8b 	bl	8002988 <HAL_GPIO_WritePin>
 8000c72:	2200      	movs	r2, #0
 8000c74:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000c78:	484f      	ldr	r0, [pc, #316]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000c7a:	f001 fe85 	bl	8002988 <HAL_GPIO_WritePin>
 8000c7e:	2200      	movs	r2, #0
 8000c80:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000c84:	484c      	ldr	r0, [pc, #304]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000c86:	f001 fe7f 	bl	8002988 <HAL_GPIO_WritePin>
					DGT2_E_OFF; DGT2_F_OFF;
 8000c8a:	2201      	movs	r2, #1
 8000c8c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000c90:	4849      	ldr	r0, [pc, #292]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000c92:	f001 fe79 	bl	8002988 <HAL_GPIO_WritePin>
 8000c96:	2201      	movs	r2, #1
 8000c98:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000c9c:	4846      	ldr	r0, [pc, #280]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000c9e:	f001 fe73 	bl	8002988 <HAL_GPIO_WritePin>
				break;
 8000ca2:	e10c      	b.n	8000ebe <_7SEG_SetNumber+0x792>
			case 4: DGT2_F_ON; DGT2_G_ON; DGT2_B_ON; DGT2_C_ON;
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000caa:	4843      	ldr	r0, [pc, #268]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000cac:	f001 fe6c 	bl	8002988 <HAL_GPIO_WritePin>
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000cb6:	4840      	ldr	r0, [pc, #256]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000cb8:	f001 fe66 	bl	8002988 <HAL_GPIO_WritePin>
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000cc2:	483d      	ldr	r0, [pc, #244]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000cc4:	f001 fe60 	bl	8002988 <HAL_GPIO_WritePin>
 8000cc8:	2200      	movs	r2, #0
 8000cca:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000cce:	483a      	ldr	r0, [pc, #232]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000cd0:	f001 fe5a 	bl	8002988 <HAL_GPIO_WritePin>
					DGT2_A_OFF; DGT2_D_OFF; DGT2_E_OFF;
 8000cd4:	2201      	movs	r2, #1
 8000cd6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000cda:	4837      	ldr	r0, [pc, #220]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000cdc:	f001 fe54 	bl	8002988 <HAL_GPIO_WritePin>
 8000ce0:	2201      	movs	r2, #1
 8000ce2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000ce6:	4834      	ldr	r0, [pc, #208]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000ce8:	f001 fe4e 	bl	8002988 <HAL_GPIO_WritePin>
 8000cec:	2201      	movs	r2, #1
 8000cee:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000cf2:	4831      	ldr	r0, [pc, #196]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000cf4:	f001 fe48 	bl	8002988 <HAL_GPIO_WritePin>
				break;
 8000cf8:	e0e1      	b.n	8000ebe <_7SEG_SetNumber+0x792>
			case 5: DGT2_A_ON; DGT2_F_ON; DGT2_G_ON; DGT2_C_ON; DGT2_D_ON;
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000d00:	482d      	ldr	r0, [pc, #180]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000d02:	f001 fe41 	bl	8002988 <HAL_GPIO_WritePin>
 8000d06:	2200      	movs	r2, #0
 8000d08:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000d0c:	482a      	ldr	r0, [pc, #168]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000d0e:	f001 fe3b 	bl	8002988 <HAL_GPIO_WritePin>
 8000d12:	2200      	movs	r2, #0
 8000d14:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000d18:	4827      	ldr	r0, [pc, #156]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000d1a:	f001 fe35 	bl	8002988 <HAL_GPIO_WritePin>
 8000d1e:	2200      	movs	r2, #0
 8000d20:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000d24:	4824      	ldr	r0, [pc, #144]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000d26:	f001 fe2f 	bl	8002988 <HAL_GPIO_WritePin>
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000d30:	4821      	ldr	r0, [pc, #132]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000d32:	f001 fe29 	bl	8002988 <HAL_GPIO_WritePin>
					DGT2_B_OFF; DGT2_E_OFF;
 8000d36:	2201      	movs	r2, #1
 8000d38:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000d3c:	481e      	ldr	r0, [pc, #120]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000d3e:	f001 fe23 	bl	8002988 <HAL_GPIO_WritePin>
 8000d42:	2201      	movs	r2, #1
 8000d44:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000d48:	481b      	ldr	r0, [pc, #108]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000d4a:	f001 fe1d 	bl	8002988 <HAL_GPIO_WritePin>
				break;
 8000d4e:	e0b6      	b.n	8000ebe <_7SEG_SetNumber+0x792>
			case 6: DGT2_A_ON; DGT2_C_ON; DGT2_D_ON; DGT2_E_ON; DGT2_F_ON; DGT2_G_ON;
 8000d50:	2200      	movs	r2, #0
 8000d52:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000d56:	4818      	ldr	r0, [pc, #96]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000d58:	f001 fe16 	bl	8002988 <HAL_GPIO_WritePin>
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000d62:	4815      	ldr	r0, [pc, #84]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000d64:	f001 fe10 	bl	8002988 <HAL_GPIO_WritePin>
 8000d68:	2200      	movs	r2, #0
 8000d6a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000d6e:	4812      	ldr	r0, [pc, #72]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000d70:	f001 fe0a 	bl	8002988 <HAL_GPIO_WritePin>
 8000d74:	2200      	movs	r2, #0
 8000d76:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000d7a:	480f      	ldr	r0, [pc, #60]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000d7c:	f001 fe04 	bl	8002988 <HAL_GPIO_WritePin>
 8000d80:	2200      	movs	r2, #0
 8000d82:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000d86:	480c      	ldr	r0, [pc, #48]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000d88:	f001 fdfe 	bl	8002988 <HAL_GPIO_WritePin>
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000d92:	4809      	ldr	r0, [pc, #36]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000d94:	f001 fdf8 	bl	8002988 <HAL_GPIO_WritePin>
					DGT2_B_OFF;
 8000d98:	2201      	movs	r2, #1
 8000d9a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000d9e:	4806      	ldr	r0, [pc, #24]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000da0:	f001 fdf2 	bl	8002988 <HAL_GPIO_WritePin>
				break;
 8000da4:	e08b      	b.n	8000ebe <_7SEG_SetNumber+0x792>
 8000da6:	bf00      	nop
 8000da8:	40020c00 	.word	0x40020c00
 8000dac:	40020000 	.word	0x40020000
 8000db0:	40020800 	.word	0x40020800
 8000db4:	66666667 	.word	0x66666667
 8000db8:	40021000 	.word	0x40021000
			case 7: DGT2_F_ON; DGT2_A_ON; DGT2_B_ON; DGT2_C_ON;
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000dc2:	484a      	ldr	r0, [pc, #296]	@ (8000eec <_7SEG_SetNumber+0x7c0>)
 8000dc4:	f001 fde0 	bl	8002988 <HAL_GPIO_WritePin>
 8000dc8:	2200      	movs	r2, #0
 8000dca:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000dce:	4847      	ldr	r0, [pc, #284]	@ (8000eec <_7SEG_SetNumber+0x7c0>)
 8000dd0:	f001 fdda 	bl	8002988 <HAL_GPIO_WritePin>
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000dda:	4844      	ldr	r0, [pc, #272]	@ (8000eec <_7SEG_SetNumber+0x7c0>)
 8000ddc:	f001 fdd4 	bl	8002988 <HAL_GPIO_WritePin>
 8000de0:	2200      	movs	r2, #0
 8000de2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000de6:	4841      	ldr	r0, [pc, #260]	@ (8000eec <_7SEG_SetNumber+0x7c0>)
 8000de8:	f001 fdce 	bl	8002988 <HAL_GPIO_WritePin>
					DGT2_D_OFF; DGT2_E_OFF; DGT2_G_OFF;
 8000dec:	2201      	movs	r2, #1
 8000dee:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000df2:	483e      	ldr	r0, [pc, #248]	@ (8000eec <_7SEG_SetNumber+0x7c0>)
 8000df4:	f001 fdc8 	bl	8002988 <HAL_GPIO_WritePin>
 8000df8:	2201      	movs	r2, #1
 8000dfa:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000dfe:	483b      	ldr	r0, [pc, #236]	@ (8000eec <_7SEG_SetNumber+0x7c0>)
 8000e00:	f001 fdc2 	bl	8002988 <HAL_GPIO_WritePin>
 8000e04:	2201      	movs	r2, #1
 8000e06:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000e0a:	4838      	ldr	r0, [pc, #224]	@ (8000eec <_7SEG_SetNumber+0x7c0>)
 8000e0c:	f001 fdbc 	bl	8002988 <HAL_GPIO_WritePin>
				break;
 8000e10:	e055      	b.n	8000ebe <_7SEG_SetNumber+0x792>
			case 8: DGT2_A_ON; DGT2_B_ON; DGT2_C_ON; DGT2_D_ON; DGT2_E_ON; DGT2_F_ON; DGT2_G_ON;
 8000e12:	2200      	movs	r2, #0
 8000e14:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000e18:	4834      	ldr	r0, [pc, #208]	@ (8000eec <_7SEG_SetNumber+0x7c0>)
 8000e1a:	f001 fdb5 	bl	8002988 <HAL_GPIO_WritePin>
 8000e1e:	2200      	movs	r2, #0
 8000e20:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000e24:	4831      	ldr	r0, [pc, #196]	@ (8000eec <_7SEG_SetNumber+0x7c0>)
 8000e26:	f001 fdaf 	bl	8002988 <HAL_GPIO_WritePin>
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000e30:	482e      	ldr	r0, [pc, #184]	@ (8000eec <_7SEG_SetNumber+0x7c0>)
 8000e32:	f001 fda9 	bl	8002988 <HAL_GPIO_WritePin>
 8000e36:	2200      	movs	r2, #0
 8000e38:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000e3c:	482b      	ldr	r0, [pc, #172]	@ (8000eec <_7SEG_SetNumber+0x7c0>)
 8000e3e:	f001 fda3 	bl	8002988 <HAL_GPIO_WritePin>
 8000e42:	2200      	movs	r2, #0
 8000e44:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000e48:	4828      	ldr	r0, [pc, #160]	@ (8000eec <_7SEG_SetNumber+0x7c0>)
 8000e4a:	f001 fd9d 	bl	8002988 <HAL_GPIO_WritePin>
 8000e4e:	2200      	movs	r2, #0
 8000e50:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000e54:	4825      	ldr	r0, [pc, #148]	@ (8000eec <_7SEG_SetNumber+0x7c0>)
 8000e56:	f001 fd97 	bl	8002988 <HAL_GPIO_WritePin>
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000e60:	4822      	ldr	r0, [pc, #136]	@ (8000eec <_7SEG_SetNumber+0x7c0>)
 8000e62:	f001 fd91 	bl	8002988 <HAL_GPIO_WritePin>
				break;
 8000e66:	e02a      	b.n	8000ebe <_7SEG_SetNumber+0x792>
			case 9: DGT2_A_ON; DGT2_B_ON; DGT2_C_ON; DGT2_D_ON; DGT2_F_ON; DGT2_G_ON;
 8000e68:	2200      	movs	r2, #0
 8000e6a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000e6e:	481f      	ldr	r0, [pc, #124]	@ (8000eec <_7SEG_SetNumber+0x7c0>)
 8000e70:	f001 fd8a 	bl	8002988 <HAL_GPIO_WritePin>
 8000e74:	2200      	movs	r2, #0
 8000e76:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000e7a:	481c      	ldr	r0, [pc, #112]	@ (8000eec <_7SEG_SetNumber+0x7c0>)
 8000e7c:	f001 fd84 	bl	8002988 <HAL_GPIO_WritePin>
 8000e80:	2200      	movs	r2, #0
 8000e82:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000e86:	4819      	ldr	r0, [pc, #100]	@ (8000eec <_7SEG_SetNumber+0x7c0>)
 8000e88:	f001 fd7e 	bl	8002988 <HAL_GPIO_WritePin>
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000e92:	4816      	ldr	r0, [pc, #88]	@ (8000eec <_7SEG_SetNumber+0x7c0>)
 8000e94:	f001 fd78 	bl	8002988 <HAL_GPIO_WritePin>
 8000e98:	2200      	movs	r2, #0
 8000e9a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000e9e:	4813      	ldr	r0, [pc, #76]	@ (8000eec <_7SEG_SetNumber+0x7c0>)
 8000ea0:	f001 fd72 	bl	8002988 <HAL_GPIO_WritePin>
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000eaa:	4810      	ldr	r0, [pc, #64]	@ (8000eec <_7SEG_SetNumber+0x7c0>)
 8000eac:	f001 fd6c 	bl	8002988 <HAL_GPIO_WritePin>
					DGT2_E_OFF;
 8000eb0:	2201      	movs	r2, #1
 8000eb2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000eb6:	480d      	ldr	r0, [pc, #52]	@ (8000eec <_7SEG_SetNumber+0x7c0>)
 8000eb8:	f001 fd66 	bl	8002988 <HAL_GPIO_WritePin>
				break;
 8000ebc:	bf00      	nop
		if(dp == ON)
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	2b01      	cmp	r3, #1
 8000ec2:	d106      	bne.n	8000ed2 <_7SEG_SetNumber+0x7a6>
			DGT2_DP_ON;
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000eca:	4808      	ldr	r0, [pc, #32]	@ (8000eec <_7SEG_SetNumber+0x7c0>)
 8000ecc:	f001 fd5c 	bl	8002988 <HAL_GPIO_WritePin>
}
 8000ed0:	e008      	b.n	8000ee4 <_7SEG_SetNumber+0x7b8>
		else if(dp == OFF)
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d105      	bne.n	8000ee4 <_7SEG_SetNumber+0x7b8>
			DGT2_DP_OFF;
 8000ed8:	2201      	movs	r2, #1
 8000eda:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000ede:	4803      	ldr	r0, [pc, #12]	@ (8000eec <_7SEG_SetNumber+0x7c0>)
 8000ee0:	f001 fd52 	bl	8002988 <HAL_GPIO_WritePin>
}
 8000ee4:	bf00      	nop
 8000ee6:	3710      	adds	r7, #16
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	40021000 	.word	0x40021000

08000ef0 <CLCD_GPIO_Init>:
 */

#include "CLCD.h"

void CLCD_GPIO_Init(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b086      	sub	sp, #24
 8000ef4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct;

	/* GPIOE Periph clock enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	603b      	str	r3, [r7, #0]
 8000efa:	4b23      	ldr	r3, [pc, #140]	@ (8000f88 <CLCD_GPIO_Init+0x98>)
 8000efc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000efe:	4a22      	ldr	r2, [pc, #136]	@ (8000f88 <CLCD_GPIO_Init+0x98>)
 8000f00:	f043 0310 	orr.w	r3, r3, #16
 8000f04:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f06:	4b20      	ldr	r3, [pc, #128]	@ (8000f88 <CLCD_GPIO_Init+0x98>)
 8000f08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f0a:	f003 0310 	and.w	r3, r3, #16
 8000f0e:	603b      	str	r3, [r7, #0]
 8000f10:	683b      	ldr	r3, [r7, #0]

	/* Configure RS, RW, EN, D4, D5, D6, D7 in output pushpull mode */
	GPIO_InitStruct.Pin = GPIO_PIN_RS;
 8000f12:	2301      	movs	r3, #1
 8000f14:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f16:	2301      	movs	r3, #1
 8000f18:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIO_RS, &GPIO_InitStruct);
 8000f22:	1d3b      	adds	r3, r7, #4
 8000f24:	4619      	mov	r1, r3
 8000f26:	4819      	ldr	r0, [pc, #100]	@ (8000f8c <CLCD_GPIO_Init+0x9c>)
 8000f28:	f001 fb7a 	bl	8002620 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = GPIO_PIN_RW;
 8000f2c:	2302      	movs	r3, #2
 8000f2e:	607b      	str	r3, [r7, #4]
	HAL_GPIO_Init(GPIO_RW, &GPIO_InitStruct);
 8000f30:	1d3b      	adds	r3, r7, #4
 8000f32:	4619      	mov	r1, r3
 8000f34:	4815      	ldr	r0, [pc, #84]	@ (8000f8c <CLCD_GPIO_Init+0x9c>)
 8000f36:	f001 fb73 	bl	8002620 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = GPIO_PIN_EN;
 8000f3a:	2304      	movs	r3, #4
 8000f3c:	607b      	str	r3, [r7, #4]
	HAL_GPIO_Init(GPIO_EN, &GPIO_InitStruct);
 8000f3e:	1d3b      	adds	r3, r7, #4
 8000f40:	4619      	mov	r1, r3
 8000f42:	4812      	ldr	r0, [pc, #72]	@ (8000f8c <CLCD_GPIO_Init+0x9c>)
 8000f44:	f001 fb6c 	bl	8002620 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = GPIO_PIN_D4;
 8000f48:	2310      	movs	r3, #16
 8000f4a:	607b      	str	r3, [r7, #4]
	HAL_GPIO_Init(GPIO_D4, &GPIO_InitStruct);
 8000f4c:	1d3b      	adds	r3, r7, #4
 8000f4e:	4619      	mov	r1, r3
 8000f50:	480e      	ldr	r0, [pc, #56]	@ (8000f8c <CLCD_GPIO_Init+0x9c>)
 8000f52:	f001 fb65 	bl	8002620 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = GPIO_PIN_D5;
 8000f56:	2320      	movs	r3, #32
 8000f58:	607b      	str	r3, [r7, #4]
	HAL_GPIO_Init(GPIO_D5, &GPIO_InitStruct);
 8000f5a:	1d3b      	adds	r3, r7, #4
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	480b      	ldr	r0, [pc, #44]	@ (8000f8c <CLCD_GPIO_Init+0x9c>)
 8000f60:	f001 fb5e 	bl	8002620 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = GPIO_PIN_D6;
 8000f64:	2340      	movs	r3, #64	@ 0x40
 8000f66:	607b      	str	r3, [r7, #4]
	HAL_GPIO_Init(GPIO_D6, &GPIO_InitStruct);
 8000f68:	1d3b      	adds	r3, r7, #4
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	4807      	ldr	r0, [pc, #28]	@ (8000f8c <CLCD_GPIO_Init+0x9c>)
 8000f6e:	f001 fb57 	bl	8002620 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = GPIO_PIN_D7;
 8000f72:	2380      	movs	r3, #128	@ 0x80
 8000f74:	607b      	str	r3, [r7, #4]
	HAL_GPIO_Init(GPIO_D7, &GPIO_InitStruct);
 8000f76:	1d3b      	adds	r3, r7, #4
 8000f78:	4619      	mov	r1, r3
 8000f7a:	4804      	ldr	r0, [pc, #16]	@ (8000f8c <CLCD_GPIO_Init+0x9c>)
 8000f7c:	f001 fb50 	bl	8002620 <HAL_GPIO_Init>
}
 8000f80:	bf00      	nop
 8000f82:	3718      	adds	r7, #24
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	40023800 	.word	0x40023800
 8000f8c:	40021000 	.word	0x40021000

08000f90 <CLCD_Write_Instruction>:

void CLCD_Write_Instruction(unsigned char b)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b082      	sub	sp, #8
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	4603      	mov	r3, r0
 8000f98:	71fb      	strb	r3, [r7, #7]
	//���� 4��Ʈ
	GPIO_D7->ODR = (b & 0x80) ? GPIO_D7->ODR | GPIO_PIN_D7 : GPIO_D7->ODR & ~GPIO_PIN_D7; //D7
 8000f9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	da04      	bge.n	8000fac <CLCD_Write_Instruction+0x1c>
 8000fa2:	4b5f      	ldr	r3, [pc, #380]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 8000fa4:	695b      	ldr	r3, [r3, #20]
 8000fa6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000faa:	e003      	b.n	8000fb4 <CLCD_Write_Instruction+0x24>
 8000fac:	4b5c      	ldr	r3, [pc, #368]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 8000fae:	695b      	ldr	r3, [r3, #20]
 8000fb0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000fb4:	4a5a      	ldr	r2, [pc, #360]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 8000fb6:	6153      	str	r3, [r2, #20]
	GPIO_D6->ODR = (b & 0x40) ? GPIO_D6->ODR | GPIO_PIN_D6 : GPIO_D6->ODR & ~GPIO_PIN_D6; //D6
 8000fb8:	79fb      	ldrb	r3, [r7, #7]
 8000fba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d004      	beq.n	8000fcc <CLCD_Write_Instruction+0x3c>
 8000fc2:	4b57      	ldr	r3, [pc, #348]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 8000fc4:	695b      	ldr	r3, [r3, #20]
 8000fc6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000fca:	e003      	b.n	8000fd4 <CLCD_Write_Instruction+0x44>
 8000fcc:	4b54      	ldr	r3, [pc, #336]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 8000fce:	695b      	ldr	r3, [r3, #20]
 8000fd0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000fd4:	4a52      	ldr	r2, [pc, #328]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 8000fd6:	6153      	str	r3, [r2, #20]
	GPIO_D5->ODR = (b & 0x20) ? GPIO_D5->ODR | GPIO_PIN_D5 : GPIO_D5->ODR & ~GPIO_PIN_D5; //D5
 8000fd8:	79fb      	ldrb	r3, [r7, #7]
 8000fda:	f003 0320 	and.w	r3, r3, #32
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d004      	beq.n	8000fec <CLCD_Write_Instruction+0x5c>
 8000fe2:	4b4f      	ldr	r3, [pc, #316]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 8000fe4:	695b      	ldr	r3, [r3, #20]
 8000fe6:	f043 0320 	orr.w	r3, r3, #32
 8000fea:	e003      	b.n	8000ff4 <CLCD_Write_Instruction+0x64>
 8000fec:	4b4c      	ldr	r3, [pc, #304]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 8000fee:	695b      	ldr	r3, [r3, #20]
 8000ff0:	f023 0320 	bic.w	r3, r3, #32
 8000ff4:	4a4a      	ldr	r2, [pc, #296]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 8000ff6:	6153      	str	r3, [r2, #20]
	GPIO_D4->ODR = (b & 0x10) ? GPIO_D4->ODR | GPIO_PIN_D4 : GPIO_D4->ODR & ~GPIO_PIN_D4; //D4
 8000ff8:	79fb      	ldrb	r3, [r7, #7]
 8000ffa:	f003 0310 	and.w	r3, r3, #16
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d004      	beq.n	800100c <CLCD_Write_Instruction+0x7c>
 8001002:	4b47      	ldr	r3, [pc, #284]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 8001004:	695b      	ldr	r3, [r3, #20]
 8001006:	f043 0310 	orr.w	r3, r3, #16
 800100a:	e003      	b.n	8001014 <CLCD_Write_Instruction+0x84>
 800100c:	4b44      	ldr	r3, [pc, #272]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 800100e:	695b      	ldr	r3, [r3, #20]
 8001010:	f023 0310 	bic.w	r3, r3, #16
 8001014:	4a42      	ldr	r2, [pc, #264]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 8001016:	6153      	str	r3, [r2, #20]

	GPIO_RS->ODR = GPIO_RS->ODR & ~GPIO_PIN_RS; //RS�� Low
 8001018:	4b41      	ldr	r3, [pc, #260]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 800101a:	695b      	ldr	r3, [r3, #20]
 800101c:	4a40      	ldr	r2, [pc, #256]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 800101e:	f023 0301 	bic.w	r3, r3, #1
 8001022:	6153      	str	r3, [r2, #20]
	GPIO_RW->ODR = GPIO_RW->ODR & ~GPIO_PIN_RW; //RW�� Low
 8001024:	4b3e      	ldr	r3, [pc, #248]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 8001026:	695b      	ldr	r3, [r3, #20]
 8001028:	4a3d      	ldr	r2, [pc, #244]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 800102a:	f023 0302 	bic.w	r3, r3, #2
 800102e:	6153      	str	r3, [r2, #20]
	GPIO_EN->ODR = GPIO_EN->ODR & ~GPIO_PIN_EN; //EN�� Low
 8001030:	4b3b      	ldr	r3, [pc, #236]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 8001032:	695b      	ldr	r3, [r3, #20]
 8001034:	4a3a      	ldr	r2, [pc, #232]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 8001036:	f023 0304 	bic.w	r3, r3, #4
 800103a:	6153      	str	r3, [r2, #20]

	GPIO_EN->ODR = GPIO_EN->ODR | GPIO_PIN_EN; //EN�� High
 800103c:	4b38      	ldr	r3, [pc, #224]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 800103e:	695b      	ldr	r3, [r3, #20]
 8001040:	4a37      	ldr	r2, [pc, #220]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 8001042:	f043 0304 	orr.w	r3, r3, #4
 8001046:	6153      	str	r3, [r2, #20]
	GPIO_EN->ODR = GPIO_EN->ODR & ~GPIO_PIN_EN; //EN�� Low
 8001048:	4b35      	ldr	r3, [pc, #212]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 800104a:	695b      	ldr	r3, [r3, #20]
 800104c:	4a34      	ldr	r2, [pc, #208]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 800104e:	f023 0304 	bic.w	r3, r3, #4
 8001052:	6153      	str	r3, [r2, #20]

	//���� 4��Ʈ
	GPIO_D7->ODR = (b & 0x08) ? GPIO_D7->ODR | GPIO_PIN_D7 : GPIO_D7->ODR & ~GPIO_PIN_D7; //D7
 8001054:	79fb      	ldrb	r3, [r7, #7]
 8001056:	f003 0308 	and.w	r3, r3, #8
 800105a:	2b00      	cmp	r3, #0
 800105c:	d004      	beq.n	8001068 <CLCD_Write_Instruction+0xd8>
 800105e:	4b30      	ldr	r3, [pc, #192]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 8001060:	695b      	ldr	r3, [r3, #20]
 8001062:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001066:	e003      	b.n	8001070 <CLCD_Write_Instruction+0xe0>
 8001068:	4b2d      	ldr	r3, [pc, #180]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 800106a:	695b      	ldr	r3, [r3, #20]
 800106c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001070:	4a2b      	ldr	r2, [pc, #172]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 8001072:	6153      	str	r3, [r2, #20]
	GPIO_D6->ODR = (b & 0x04) ? GPIO_D6->ODR | GPIO_PIN_D6 : GPIO_D6->ODR & ~GPIO_PIN_D6; //D6
 8001074:	79fb      	ldrb	r3, [r7, #7]
 8001076:	f003 0304 	and.w	r3, r3, #4
 800107a:	2b00      	cmp	r3, #0
 800107c:	d004      	beq.n	8001088 <CLCD_Write_Instruction+0xf8>
 800107e:	4b28      	ldr	r3, [pc, #160]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 8001080:	695b      	ldr	r3, [r3, #20]
 8001082:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001086:	e003      	b.n	8001090 <CLCD_Write_Instruction+0x100>
 8001088:	4b25      	ldr	r3, [pc, #148]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 800108a:	695b      	ldr	r3, [r3, #20]
 800108c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001090:	4a23      	ldr	r2, [pc, #140]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 8001092:	6153      	str	r3, [r2, #20]
	GPIO_D5->ODR = (b & 0x02) ? GPIO_D5->ODR | GPIO_PIN_D5 : GPIO_D5->ODR & ~GPIO_PIN_D5; //D5
 8001094:	79fb      	ldrb	r3, [r7, #7]
 8001096:	f003 0302 	and.w	r3, r3, #2
 800109a:	2b00      	cmp	r3, #0
 800109c:	d004      	beq.n	80010a8 <CLCD_Write_Instruction+0x118>
 800109e:	4b20      	ldr	r3, [pc, #128]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 80010a0:	695b      	ldr	r3, [r3, #20]
 80010a2:	f043 0320 	orr.w	r3, r3, #32
 80010a6:	e003      	b.n	80010b0 <CLCD_Write_Instruction+0x120>
 80010a8:	4b1d      	ldr	r3, [pc, #116]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 80010aa:	695b      	ldr	r3, [r3, #20]
 80010ac:	f023 0320 	bic.w	r3, r3, #32
 80010b0:	4a1b      	ldr	r2, [pc, #108]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 80010b2:	6153      	str	r3, [r2, #20]
	GPIO_D4->ODR = (b & 0x01) ? GPIO_D4->ODR | GPIO_PIN_D4 : GPIO_D4->ODR & ~GPIO_PIN_D4; //D4
 80010b4:	79fb      	ldrb	r3, [r7, #7]
 80010b6:	f003 0301 	and.w	r3, r3, #1
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d004      	beq.n	80010c8 <CLCD_Write_Instruction+0x138>
 80010be:	4b18      	ldr	r3, [pc, #96]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 80010c0:	695b      	ldr	r3, [r3, #20]
 80010c2:	f043 0310 	orr.w	r3, r3, #16
 80010c6:	e003      	b.n	80010d0 <CLCD_Write_Instruction+0x140>
 80010c8:	4b15      	ldr	r3, [pc, #84]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 80010ca:	695b      	ldr	r3, [r3, #20]
 80010cc:	f023 0310 	bic.w	r3, r3, #16
 80010d0:	4a13      	ldr	r2, [pc, #76]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 80010d2:	6153      	str	r3, [r2, #20]

	GPIO_RS->ODR = GPIO_RS->ODR & ~GPIO_PIN_RS; //RS�� Low
 80010d4:	4b12      	ldr	r3, [pc, #72]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 80010d6:	695b      	ldr	r3, [r3, #20]
 80010d8:	4a11      	ldr	r2, [pc, #68]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 80010da:	f023 0301 	bic.w	r3, r3, #1
 80010de:	6153      	str	r3, [r2, #20]
	GPIO_RW->ODR = GPIO_RW->ODR & ~GPIO_PIN_RW; //RW�� Low
 80010e0:	4b0f      	ldr	r3, [pc, #60]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 80010e2:	695b      	ldr	r3, [r3, #20]
 80010e4:	4a0e      	ldr	r2, [pc, #56]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 80010e6:	f023 0302 	bic.w	r3, r3, #2
 80010ea:	6153      	str	r3, [r2, #20]
	GPIO_EN->ODR = GPIO_EN->ODR & ~GPIO_PIN_EN; //EN�� Low
 80010ec:	4b0c      	ldr	r3, [pc, #48]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 80010ee:	695b      	ldr	r3, [r3, #20]
 80010f0:	4a0b      	ldr	r2, [pc, #44]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 80010f2:	f023 0304 	bic.w	r3, r3, #4
 80010f6:	6153      	str	r3, [r2, #20]

	GPIO_EN->ODR = GPIO_EN->ODR | GPIO_PIN_EN; //EN�� High
 80010f8:	4b09      	ldr	r3, [pc, #36]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 80010fa:	695b      	ldr	r3, [r3, #20]
 80010fc:	4a08      	ldr	r2, [pc, #32]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 80010fe:	f043 0304 	orr.w	r3, r3, #4
 8001102:	6153      	str	r3, [r2, #20]
	GPIO_EN->ODR = GPIO_EN->ODR & ~GPIO_PIN_EN; //EN�� Low
 8001104:	4b06      	ldr	r3, [pc, #24]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 8001106:	695b      	ldr	r3, [r3, #20]
 8001108:	4a05      	ldr	r2, [pc, #20]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 800110a:	f023 0304 	bic.w	r3, r3, #4
 800110e:	6153      	str	r3, [r2, #20]

	HAL_Delay(1);
 8001110:	2001      	movs	r0, #1
 8001112:	f001 f8bd 	bl	8002290 <HAL_Delay>
}
 8001116:	bf00      	nop
 8001118:	3708      	adds	r7, #8
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	40021000 	.word	0x40021000

08001124 <CLCD_Write_Display>:

void CLCD_Write_Display(unsigned char b)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b082      	sub	sp, #8
 8001128:	af00      	add	r7, sp, #0
 800112a:	4603      	mov	r3, r0
 800112c:	71fb      	strb	r3, [r7, #7]
	//���� 4��Ʈ
	GPIO_D7->ODR = (b & 0x80) ? GPIO_D7->ODR | GPIO_PIN_D7 : GPIO_D7->ODR & ~GPIO_PIN_D7; //D7
 800112e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001132:	2b00      	cmp	r3, #0
 8001134:	da04      	bge.n	8001140 <CLCD_Write_Display+0x1c>
 8001136:	4b5f      	ldr	r3, [pc, #380]	@ (80012b4 <CLCD_Write_Display+0x190>)
 8001138:	695b      	ldr	r3, [r3, #20]
 800113a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800113e:	e003      	b.n	8001148 <CLCD_Write_Display+0x24>
 8001140:	4b5c      	ldr	r3, [pc, #368]	@ (80012b4 <CLCD_Write_Display+0x190>)
 8001142:	695b      	ldr	r3, [r3, #20]
 8001144:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001148:	4a5a      	ldr	r2, [pc, #360]	@ (80012b4 <CLCD_Write_Display+0x190>)
 800114a:	6153      	str	r3, [r2, #20]
	GPIO_D6->ODR = (b & 0x40) ? GPIO_D6->ODR | GPIO_PIN_D6 : GPIO_D6->ODR & ~GPIO_PIN_D6; //D6
 800114c:	79fb      	ldrb	r3, [r7, #7]
 800114e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001152:	2b00      	cmp	r3, #0
 8001154:	d004      	beq.n	8001160 <CLCD_Write_Display+0x3c>
 8001156:	4b57      	ldr	r3, [pc, #348]	@ (80012b4 <CLCD_Write_Display+0x190>)
 8001158:	695b      	ldr	r3, [r3, #20]
 800115a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800115e:	e003      	b.n	8001168 <CLCD_Write_Display+0x44>
 8001160:	4b54      	ldr	r3, [pc, #336]	@ (80012b4 <CLCD_Write_Display+0x190>)
 8001162:	695b      	ldr	r3, [r3, #20]
 8001164:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001168:	4a52      	ldr	r2, [pc, #328]	@ (80012b4 <CLCD_Write_Display+0x190>)
 800116a:	6153      	str	r3, [r2, #20]
	GPIO_D5->ODR = (b & 0x20) ? GPIO_D5->ODR | GPIO_PIN_D5 : GPIO_D5->ODR & ~GPIO_PIN_D5; //D5
 800116c:	79fb      	ldrb	r3, [r7, #7]
 800116e:	f003 0320 	and.w	r3, r3, #32
 8001172:	2b00      	cmp	r3, #0
 8001174:	d004      	beq.n	8001180 <CLCD_Write_Display+0x5c>
 8001176:	4b4f      	ldr	r3, [pc, #316]	@ (80012b4 <CLCD_Write_Display+0x190>)
 8001178:	695b      	ldr	r3, [r3, #20]
 800117a:	f043 0320 	orr.w	r3, r3, #32
 800117e:	e003      	b.n	8001188 <CLCD_Write_Display+0x64>
 8001180:	4b4c      	ldr	r3, [pc, #304]	@ (80012b4 <CLCD_Write_Display+0x190>)
 8001182:	695b      	ldr	r3, [r3, #20]
 8001184:	f023 0320 	bic.w	r3, r3, #32
 8001188:	4a4a      	ldr	r2, [pc, #296]	@ (80012b4 <CLCD_Write_Display+0x190>)
 800118a:	6153      	str	r3, [r2, #20]
	GPIO_D4->ODR = (b & 0x10) ? GPIO_D4->ODR | GPIO_PIN_D4 : GPIO_D4->ODR & ~GPIO_PIN_D4; //D4
 800118c:	79fb      	ldrb	r3, [r7, #7]
 800118e:	f003 0310 	and.w	r3, r3, #16
 8001192:	2b00      	cmp	r3, #0
 8001194:	d004      	beq.n	80011a0 <CLCD_Write_Display+0x7c>
 8001196:	4b47      	ldr	r3, [pc, #284]	@ (80012b4 <CLCD_Write_Display+0x190>)
 8001198:	695b      	ldr	r3, [r3, #20]
 800119a:	f043 0310 	orr.w	r3, r3, #16
 800119e:	e003      	b.n	80011a8 <CLCD_Write_Display+0x84>
 80011a0:	4b44      	ldr	r3, [pc, #272]	@ (80012b4 <CLCD_Write_Display+0x190>)
 80011a2:	695b      	ldr	r3, [r3, #20]
 80011a4:	f023 0310 	bic.w	r3, r3, #16
 80011a8:	4a42      	ldr	r2, [pc, #264]	@ (80012b4 <CLCD_Write_Display+0x190>)
 80011aa:	6153      	str	r3, [r2, #20]

	GPIO_RS->ODR = GPIO_RS->ODR | GPIO_PIN_RS; //RS�� High
 80011ac:	4b41      	ldr	r3, [pc, #260]	@ (80012b4 <CLCD_Write_Display+0x190>)
 80011ae:	695b      	ldr	r3, [r3, #20]
 80011b0:	4a40      	ldr	r2, [pc, #256]	@ (80012b4 <CLCD_Write_Display+0x190>)
 80011b2:	f043 0301 	orr.w	r3, r3, #1
 80011b6:	6153      	str	r3, [r2, #20]
	GPIO_RW->ODR = GPIO_RW->ODR & ~GPIO_PIN_RW; //RW�� Low
 80011b8:	4b3e      	ldr	r3, [pc, #248]	@ (80012b4 <CLCD_Write_Display+0x190>)
 80011ba:	695b      	ldr	r3, [r3, #20]
 80011bc:	4a3d      	ldr	r2, [pc, #244]	@ (80012b4 <CLCD_Write_Display+0x190>)
 80011be:	f023 0302 	bic.w	r3, r3, #2
 80011c2:	6153      	str	r3, [r2, #20]
	GPIO_EN->ODR = GPIO_EN->ODR & ~GPIO_PIN_EN; //EN�� Low
 80011c4:	4b3b      	ldr	r3, [pc, #236]	@ (80012b4 <CLCD_Write_Display+0x190>)
 80011c6:	695b      	ldr	r3, [r3, #20]
 80011c8:	4a3a      	ldr	r2, [pc, #232]	@ (80012b4 <CLCD_Write_Display+0x190>)
 80011ca:	f023 0304 	bic.w	r3, r3, #4
 80011ce:	6153      	str	r3, [r2, #20]

	GPIO_EN->ODR = GPIO_EN->ODR | GPIO_PIN_EN; //EN�� High
 80011d0:	4b38      	ldr	r3, [pc, #224]	@ (80012b4 <CLCD_Write_Display+0x190>)
 80011d2:	695b      	ldr	r3, [r3, #20]
 80011d4:	4a37      	ldr	r2, [pc, #220]	@ (80012b4 <CLCD_Write_Display+0x190>)
 80011d6:	f043 0304 	orr.w	r3, r3, #4
 80011da:	6153      	str	r3, [r2, #20]
	GPIO_EN->ODR = GPIO_EN->ODR & ~GPIO_PIN_EN; //EN�� Low
 80011dc:	4b35      	ldr	r3, [pc, #212]	@ (80012b4 <CLCD_Write_Display+0x190>)
 80011de:	695b      	ldr	r3, [r3, #20]
 80011e0:	4a34      	ldr	r2, [pc, #208]	@ (80012b4 <CLCD_Write_Display+0x190>)
 80011e2:	f023 0304 	bic.w	r3, r3, #4
 80011e6:	6153      	str	r3, [r2, #20]

	//���� 4��Ʈ
	GPIO_D7->ODR = (b & 0x08) ? GPIO_D7->ODR | GPIO_PIN_D7 : GPIO_D7->ODR & ~GPIO_PIN_D7; //D7
 80011e8:	79fb      	ldrb	r3, [r7, #7]
 80011ea:	f003 0308 	and.w	r3, r3, #8
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d004      	beq.n	80011fc <CLCD_Write_Display+0xd8>
 80011f2:	4b30      	ldr	r3, [pc, #192]	@ (80012b4 <CLCD_Write_Display+0x190>)
 80011f4:	695b      	ldr	r3, [r3, #20]
 80011f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80011fa:	e003      	b.n	8001204 <CLCD_Write_Display+0xe0>
 80011fc:	4b2d      	ldr	r3, [pc, #180]	@ (80012b4 <CLCD_Write_Display+0x190>)
 80011fe:	695b      	ldr	r3, [r3, #20]
 8001200:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001204:	4a2b      	ldr	r2, [pc, #172]	@ (80012b4 <CLCD_Write_Display+0x190>)
 8001206:	6153      	str	r3, [r2, #20]
	GPIO_D6->ODR = (b & 0x04) ? GPIO_D6->ODR | GPIO_PIN_D6 : GPIO_D6->ODR & ~GPIO_PIN_D6; //D6
 8001208:	79fb      	ldrb	r3, [r7, #7]
 800120a:	f003 0304 	and.w	r3, r3, #4
 800120e:	2b00      	cmp	r3, #0
 8001210:	d004      	beq.n	800121c <CLCD_Write_Display+0xf8>
 8001212:	4b28      	ldr	r3, [pc, #160]	@ (80012b4 <CLCD_Write_Display+0x190>)
 8001214:	695b      	ldr	r3, [r3, #20]
 8001216:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800121a:	e003      	b.n	8001224 <CLCD_Write_Display+0x100>
 800121c:	4b25      	ldr	r3, [pc, #148]	@ (80012b4 <CLCD_Write_Display+0x190>)
 800121e:	695b      	ldr	r3, [r3, #20]
 8001220:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001224:	4a23      	ldr	r2, [pc, #140]	@ (80012b4 <CLCD_Write_Display+0x190>)
 8001226:	6153      	str	r3, [r2, #20]
	GPIO_D5->ODR = (b & 0x02) ? GPIO_D5->ODR | GPIO_PIN_D5 : GPIO_D5->ODR & ~GPIO_PIN_D5; //D5
 8001228:	79fb      	ldrb	r3, [r7, #7]
 800122a:	f003 0302 	and.w	r3, r3, #2
 800122e:	2b00      	cmp	r3, #0
 8001230:	d004      	beq.n	800123c <CLCD_Write_Display+0x118>
 8001232:	4b20      	ldr	r3, [pc, #128]	@ (80012b4 <CLCD_Write_Display+0x190>)
 8001234:	695b      	ldr	r3, [r3, #20]
 8001236:	f043 0320 	orr.w	r3, r3, #32
 800123a:	e003      	b.n	8001244 <CLCD_Write_Display+0x120>
 800123c:	4b1d      	ldr	r3, [pc, #116]	@ (80012b4 <CLCD_Write_Display+0x190>)
 800123e:	695b      	ldr	r3, [r3, #20]
 8001240:	f023 0320 	bic.w	r3, r3, #32
 8001244:	4a1b      	ldr	r2, [pc, #108]	@ (80012b4 <CLCD_Write_Display+0x190>)
 8001246:	6153      	str	r3, [r2, #20]
	GPIO_D4->ODR = (b & 0x01) ? GPIO_D4->ODR | GPIO_PIN_D4 : GPIO_D4->ODR & ~GPIO_PIN_D4; //D4
 8001248:	79fb      	ldrb	r3, [r7, #7]
 800124a:	f003 0301 	and.w	r3, r3, #1
 800124e:	2b00      	cmp	r3, #0
 8001250:	d004      	beq.n	800125c <CLCD_Write_Display+0x138>
 8001252:	4b18      	ldr	r3, [pc, #96]	@ (80012b4 <CLCD_Write_Display+0x190>)
 8001254:	695b      	ldr	r3, [r3, #20]
 8001256:	f043 0310 	orr.w	r3, r3, #16
 800125a:	e003      	b.n	8001264 <CLCD_Write_Display+0x140>
 800125c:	4b15      	ldr	r3, [pc, #84]	@ (80012b4 <CLCD_Write_Display+0x190>)
 800125e:	695b      	ldr	r3, [r3, #20]
 8001260:	f023 0310 	bic.w	r3, r3, #16
 8001264:	4a13      	ldr	r2, [pc, #76]	@ (80012b4 <CLCD_Write_Display+0x190>)
 8001266:	6153      	str	r3, [r2, #20]

	GPIO_RS->ODR = GPIO_RS->ODR | GPIO_PIN_RS; //RS�� High
 8001268:	4b12      	ldr	r3, [pc, #72]	@ (80012b4 <CLCD_Write_Display+0x190>)
 800126a:	695b      	ldr	r3, [r3, #20]
 800126c:	4a11      	ldr	r2, [pc, #68]	@ (80012b4 <CLCD_Write_Display+0x190>)
 800126e:	f043 0301 	orr.w	r3, r3, #1
 8001272:	6153      	str	r3, [r2, #20]
	GPIO_RW->ODR = GPIO_RW->ODR & ~GPIO_PIN_RW; //RW�� Low
 8001274:	4b0f      	ldr	r3, [pc, #60]	@ (80012b4 <CLCD_Write_Display+0x190>)
 8001276:	695b      	ldr	r3, [r3, #20]
 8001278:	4a0e      	ldr	r2, [pc, #56]	@ (80012b4 <CLCD_Write_Display+0x190>)
 800127a:	f023 0302 	bic.w	r3, r3, #2
 800127e:	6153      	str	r3, [r2, #20]
	GPIO_EN->ODR = GPIO_EN->ODR & ~GPIO_PIN_EN; //EN�� Low
 8001280:	4b0c      	ldr	r3, [pc, #48]	@ (80012b4 <CLCD_Write_Display+0x190>)
 8001282:	695b      	ldr	r3, [r3, #20]
 8001284:	4a0b      	ldr	r2, [pc, #44]	@ (80012b4 <CLCD_Write_Display+0x190>)
 8001286:	f023 0304 	bic.w	r3, r3, #4
 800128a:	6153      	str	r3, [r2, #20]

	GPIO_EN->ODR = GPIO_EN->ODR | GPIO_PIN_EN; //EN�� High
 800128c:	4b09      	ldr	r3, [pc, #36]	@ (80012b4 <CLCD_Write_Display+0x190>)
 800128e:	695b      	ldr	r3, [r3, #20]
 8001290:	4a08      	ldr	r2, [pc, #32]	@ (80012b4 <CLCD_Write_Display+0x190>)
 8001292:	f043 0304 	orr.w	r3, r3, #4
 8001296:	6153      	str	r3, [r2, #20]
	GPIO_EN->ODR = GPIO_EN->ODR & ~GPIO_PIN_EN; //EN�� Low
 8001298:	4b06      	ldr	r3, [pc, #24]	@ (80012b4 <CLCD_Write_Display+0x190>)
 800129a:	695b      	ldr	r3, [r3, #20]
 800129c:	4a05      	ldr	r2, [pc, #20]	@ (80012b4 <CLCD_Write_Display+0x190>)
 800129e:	f023 0304 	bic.w	r3, r3, #4
 80012a2:	6153      	str	r3, [r2, #20]

	HAL_Delay(1);
 80012a4:	2001      	movs	r0, #1
 80012a6:	f000 fff3 	bl	8002290 <HAL_Delay>
}
 80012aa:	bf00      	nop
 80012ac:	3708      	adds	r7, #8
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	40021000 	.word	0x40021000

080012b8 <CLCD_Gotoxy>:


void CLCD_Gotoxy(unsigned char x, unsigned char y)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b082      	sub	sp, #8
 80012bc:	af00      	add	r7, sp, #0
 80012be:	4603      	mov	r3, r0
 80012c0:	460a      	mov	r2, r1
 80012c2:	71fb      	strb	r3, [r7, #7]
 80012c4:	4613      	mov	r3, r2
 80012c6:	71bb      	strb	r3, [r7, #6]
	// 16 * 2 character LCD
	switch(y)
 80012c8:	79bb      	ldrb	r3, [r7, #6]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d002      	beq.n	80012d4 <CLCD_Gotoxy+0x1c>
 80012ce:	2b01      	cmp	r3, #1
 80012d0:	d007      	beq.n	80012e2 <CLCD_Gotoxy+0x2a>
		case 0 : CLCD_Write_Instruction(0x80 + x); break;
		case 1 : CLCD_Write_Instruction(0xC0 + x); break;
		//case 2 : CLCD_Write_Instruction(0x90+x); break; //Uncomment for 16 * 4 character LCD
		//case 3 : CLCD_Write_Instruction(0xd0+x); break; //Uncomment for 16 * 4 character LCD
	}
}
 80012d2:	e00d      	b.n	80012f0 <CLCD_Gotoxy+0x38>
		case 0 : CLCD_Write_Instruction(0x80 + x); break;
 80012d4:	79fb      	ldrb	r3, [r7, #7]
 80012d6:	3b80      	subs	r3, #128	@ 0x80
 80012d8:	b2db      	uxtb	r3, r3
 80012da:	4618      	mov	r0, r3
 80012dc:	f7ff fe58 	bl	8000f90 <CLCD_Write_Instruction>
 80012e0:	e006      	b.n	80012f0 <CLCD_Gotoxy+0x38>
		case 1 : CLCD_Write_Instruction(0xC0 + x); break;
 80012e2:	79fb      	ldrb	r3, [r7, #7]
 80012e4:	3b40      	subs	r3, #64	@ 0x40
 80012e6:	b2db      	uxtb	r3, r3
 80012e8:	4618      	mov	r0, r3
 80012ea:	f7ff fe51 	bl	8000f90 <CLCD_Write_Instruction>
 80012ee:	bf00      	nop
}
 80012f0:	bf00      	nop
 80012f2:	3708      	adds	r7, #8
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}

080012f8 <CLCD_Puts>:

void CLCD_Puts(unsigned char x, unsigned char y, unsigned char *str)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b084      	sub	sp, #16
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	4603      	mov	r3, r0
 8001300:	603a      	str	r2, [r7, #0]
 8001302:	71fb      	strb	r3, [r7, #7]
 8001304:	460b      	mov	r3, r1
 8001306:	71bb      	strb	r3, [r7, #6]
	unsigned int i=0;
 8001308:	2300      	movs	r3, #0
 800130a:	60fb      	str	r3, [r7, #12]

	CLCD_Gotoxy(x,y);
 800130c:	79ba      	ldrb	r2, [r7, #6]
 800130e:	79fb      	ldrb	r3, [r7, #7]
 8001310:	4611      	mov	r1, r2
 8001312:	4618      	mov	r0, r3
 8001314:	f7ff ffd0 	bl	80012b8 <CLCD_Gotoxy>
	do
	{
		CLCD_Write_Display(str[i]);
 8001318:	683a      	ldr	r2, [r7, #0]
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	4413      	add	r3, r2
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	4618      	mov	r0, r3
 8001322:	f7ff feff 	bl	8001124 <CLCD_Write_Display>
	}
	while(str[++i]!='\0');
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	3301      	adds	r3, #1
 800132a:	60fb      	str	r3, [r7, #12]
 800132c:	683a      	ldr	r2, [r7, #0]
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	4413      	add	r3, r2
 8001332:	781b      	ldrb	r3, [r3, #0]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d1ef      	bne.n	8001318 <CLCD_Puts+0x20>
}
 8001338:	bf00      	nop
 800133a:	bf00      	nop
 800133c:	3710      	adds	r7, #16
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}

08001342 <CLCD_Init>:

void CLCD_Init(void)
{
 8001342:	b580      	push	{r7, lr}
 8001344:	af00      	add	r7, sp, #0
	HAL_Delay(100);
 8001346:	2064      	movs	r0, #100	@ 0x64
 8001348:	f000 ffa2 	bl	8002290 <HAL_Delay>
	CLCD_Write_Instruction(0x28);
 800134c:	2028      	movs	r0, #40	@ 0x28
 800134e:	f7ff fe1f 	bl	8000f90 <CLCD_Write_Instruction>
	HAL_Delay(10);
 8001352:	200a      	movs	r0, #10
 8001354:	f000 ff9c 	bl	8002290 <HAL_Delay>
	CLCD_Write_Instruction(0x28);
 8001358:	2028      	movs	r0, #40	@ 0x28
 800135a:	f7ff fe19 	bl	8000f90 <CLCD_Write_Instruction>
	HAL_Delay(10);
 800135e:	200a      	movs	r0, #10
 8001360:	f000 ff96 	bl	8002290 <HAL_Delay>
	CLCD_Write_Instruction(0x0C);
 8001364:	200c      	movs	r0, #12
 8001366:	f7ff fe13 	bl	8000f90 <CLCD_Write_Instruction>
	CLCD_Write_Instruction(0x06);
 800136a:	2006      	movs	r0, #6
 800136c:	f7ff fe10 	bl	8000f90 <CLCD_Write_Instruction>
	CLCD_Write_Instruction(0x02);
 8001370:	2002      	movs	r0, #2
 8001372:	f7ff fe0d 	bl	8000f90 <CLCD_Write_Instruction>
	CLCD_Write_Instruction(0x01);
 8001376:	2001      	movs	r0, #1
 8001378:	f7ff fe0a 	bl	8000f90 <CLCD_Write_Instruction>
	CLCD_Write_Instruction(0x01);
 800137c:	2001      	movs	r0, #1
 800137e:	f7ff fe07 	bl	8000f90 <CLCD_Write_Instruction>
}
 8001382:	bf00      	nop
 8001384:	bd80      	pop	{r7, pc}

08001386 <CLCD_Clear>:

void CLCD_Clear(void)
{
 8001386:	b580      	push	{r7, lr}
 8001388:	af00      	add	r7, sp, #0
	CLCD_Write_Instruction(0x01);
 800138a:	2001      	movs	r0, #1
 800138c:	f7ff fe00 	bl	8000f90 <CLCD_Write_Instruction>
	HAL_Delay(10);
 8001390:	200a      	movs	r0, #10
 8001392:	f000 ff7d 	bl	8002290 <HAL_Delay>
}
 8001396:	bf00      	nop
 8001398:	bd80      	pop	{r7, pc}
	...

0800139c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013a0:	f000 ff04 	bl	80021ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013a4:	f000 f852 	bl	800144c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013a8:	f000 f93e 	bl	8001628 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80013ac:	f000 f912 	bl	80015d4 <MX_USART3_UART_Init>
  MX_TIM6_Init();
 80013b0:	f000 f8da 	bl	8001568 <MX_TIM6_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 80013b4:	f000 f8b4 	bl	8001520 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  // UART call
  HAL_UART_Receive_IT(&huart3, &uartRxfd.uart3_rx_data, sizeof(uartRxfd.uart3_rx_data));
 80013b8:	2201      	movs	r2, #1
 80013ba:	491d      	ldr	r1, [pc, #116]	@ (8001430 <main+0x94>)
 80013bc:	481d      	ldr	r0, [pc, #116]	@ (8001434 <main+0x98>)
 80013be:	f002 fb2b 	bl	8003a18 <HAL_UART_Receive_IT>
  HAL_TIM_Base_Start_IT(&htim6);
 80013c2:	481d      	ldr	r0, [pc, #116]	@ (8001438 <main+0x9c>)
 80013c4:	f002 f814 	bl	80033f0 <HAL_TIM_Base_Start_IT>
  CLCD_GPIO_Init();
 80013c8:	f7ff fd92 	bl	8000ef0 <CLCD_GPIO_Init>
  CLCD_Init();
 80013cc:	f7ff ffb9 	bl	8001342 <CLCD_Init>
  _7SEG_GPIO_Init();
 80013d0:	f7ff f8c6 	bl	8000560 <_7SEG_GPIO_Init>

  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, 1);
 80013d4:	2201      	movs	r2, #1
 80013d6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80013da:	4818      	ldr	r0, [pc, #96]	@ (800143c <main+0xa0>)
 80013dc:	f001 fad4 	bl	8002988 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);
 80013e0:	2201      	movs	r2, #1
 80013e2:	2140      	movs	r1, #64	@ 0x40
 80013e4:	4816      	ldr	r0, [pc, #88]	@ (8001440 <main+0xa4>)
 80013e6:	f001 facf 	bl	8002988 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, 1);
 80013ea:	2201      	movs	r2, #1
 80013ec:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80013f0:	4812      	ldr	r0, [pc, #72]	@ (800143c <main+0xa0>)
 80013f2:	f001 fac9 	bl	8002988 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 1);
 80013f6:	2201      	movs	r2, #1
 80013f8:	2120      	movs	r1, #32
 80013fa:	4812      	ldr	r0, [pc, #72]	@ (8001444 <main+0xa8>)
 80013fc:	f001 fac4 	bl	8002988 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, 1);
 8001400:	2201      	movs	r2, #1
 8001402:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001406:	480d      	ldr	r0, [pc, #52]	@ (800143c <main+0xa0>)
 8001408:	f001 fabe 	bl	8002988 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 1);
 800140c:	2201      	movs	r2, #1
 800140e:	2101      	movs	r1, #1
 8001410:	480c      	ldr	r0, [pc, #48]	@ (8001444 <main+0xa8>)
 8001412:	f001 fab9 	bl	8002988 <HAL_GPIO_WritePin>

  CLCD_Puts(0, 0, CLCD_DEFAULT);
 8001416:	4a0c      	ldr	r2, [pc, #48]	@ (8001448 <main+0xac>)
 8001418:	2100      	movs	r1, #0
 800141a:	2000      	movs	r0, #0
 800141c:	f7ff ff6c 	bl	80012f8 <CLCD_Puts>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  sw2StopWatchControll();
 8001420:	f000 fdbe 	bl	8001fa0 <sw2StopWatchControll>
	  sw3StopWatchReset();
 8001424:	f000 fdf0 	bl	8002008 <sw3StopWatchReset>
	  sw4LaptimeDisplay();
 8001428:	f000 fe36 	bl	8002098 <sw4LaptimeDisplay>
	  sw2StopWatchControll();
 800142c:	bf00      	nop
 800142e:	e7f7      	b.n	8001420 <main+0x84>
 8001430:	200001e4 	.word	0x200001e4
 8001434:	2000017c 	.word	0x2000017c
 8001438:	20000134 	.word	0x20000134
 800143c:	40020c00 	.word	0x40020c00
 8001440:	40020800 	.word	0x40020800
 8001444:	40020400 	.word	0x40020400
 8001448:	080051b8 	.word	0x080051b8

0800144c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b094      	sub	sp, #80	@ 0x50
 8001450:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001452:	f107 0320 	add.w	r3, r7, #32
 8001456:	2230      	movs	r2, #48	@ 0x30
 8001458:	2100      	movs	r1, #0
 800145a:	4618      	mov	r0, r3
 800145c:	f003 fa20 	bl	80048a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001460:	f107 030c 	add.w	r3, r7, #12
 8001464:	2200      	movs	r2, #0
 8001466:	601a      	str	r2, [r3, #0]
 8001468:	605a      	str	r2, [r3, #4]
 800146a:	609a      	str	r2, [r3, #8]
 800146c:	60da      	str	r2, [r3, #12]
 800146e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001470:	2300      	movs	r3, #0
 8001472:	60bb      	str	r3, [r7, #8]
 8001474:	4b28      	ldr	r3, [pc, #160]	@ (8001518 <SystemClock_Config+0xcc>)
 8001476:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001478:	4a27      	ldr	r2, [pc, #156]	@ (8001518 <SystemClock_Config+0xcc>)
 800147a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800147e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001480:	4b25      	ldr	r3, [pc, #148]	@ (8001518 <SystemClock_Config+0xcc>)
 8001482:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001484:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001488:	60bb      	str	r3, [r7, #8]
 800148a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800148c:	2300      	movs	r3, #0
 800148e:	607b      	str	r3, [r7, #4]
 8001490:	4b22      	ldr	r3, [pc, #136]	@ (800151c <SystemClock_Config+0xd0>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4a21      	ldr	r2, [pc, #132]	@ (800151c <SystemClock_Config+0xd0>)
 8001496:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800149a:	6013      	str	r3, [r2, #0]
 800149c:	4b1f      	ldr	r3, [pc, #124]	@ (800151c <SystemClock_Config+0xd0>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80014a4:	607b      	str	r3, [r7, #4]
 80014a6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80014a8:	2301      	movs	r3, #1
 80014aa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80014ac:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80014b0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014b2:	2302      	movs	r3, #2
 80014b4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80014b6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80014ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80014bc:	2304      	movs	r3, #4
 80014be:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80014c0:	23a8      	movs	r3, #168	@ 0xa8
 80014c2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80014c4:	2302      	movs	r3, #2
 80014c6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80014c8:	2304      	movs	r3, #4
 80014ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014cc:	f107 0320 	add.w	r3, r7, #32
 80014d0:	4618      	mov	r0, r3
 80014d2:	f001 faa5 	bl	8002a20 <HAL_RCC_OscConfig>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d001      	beq.n	80014e0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80014dc:	f000 fa1e 	bl	800191c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014e0:	230f      	movs	r3, #15
 80014e2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014e4:	2302      	movs	r3, #2
 80014e6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014e8:	2300      	movs	r3, #0
 80014ea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80014ec:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80014f0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80014f2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80014f6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80014f8:	f107 030c 	add.w	r3, r7, #12
 80014fc:	2105      	movs	r1, #5
 80014fe:	4618      	mov	r0, r3
 8001500:	f001 fd06 	bl	8002f10 <HAL_RCC_ClockConfig>
 8001504:	4603      	mov	r3, r0
 8001506:	2b00      	cmp	r3, #0
 8001508:	d001      	beq.n	800150e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800150a:	f000 fa07 	bl	800191c <Error_Handler>
  }
}
 800150e:	bf00      	nop
 8001510:	3750      	adds	r7, #80	@ 0x50
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	40023800 	.word	0x40023800
 800151c:	40007000 	.word	0x40007000

08001520 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	af00      	add	r7, sp, #0
  /* USART3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001524:	2200      	movs	r2, #0
 8001526:	2100      	movs	r1, #0
 8001528:	2027      	movs	r0, #39	@ 0x27
 800152a:	f000 ffb0 	bl	800248e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART3_IRQn);
 800152e:	2027      	movs	r0, #39	@ 0x27
 8001530:	f000 ffc9 	bl	80024c6 <HAL_NVIC_EnableIRQ>
  /* EXTI4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001534:	2200      	movs	r2, #0
 8001536:	2100      	movs	r1, #0
 8001538:	200a      	movs	r0, #10
 800153a:	f000 ffa8 	bl	800248e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800153e:	200a      	movs	r0, #10
 8001540:	f000 ffc1 	bl	80024c6 <HAL_NVIC_EnableIRQ>
  /* EXTI15_10_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001544:	2200      	movs	r2, #0
 8001546:	2100      	movs	r1, #0
 8001548:	2028      	movs	r0, #40	@ 0x28
 800154a:	f000 ffa0 	bl	800248e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800154e:	2028      	movs	r0, #40	@ 0x28
 8001550:	f000 ffb9 	bl	80024c6 <HAL_NVIC_EnableIRQ>
  /* TIM6_DAC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001554:	2200      	movs	r2, #0
 8001556:	2100      	movs	r1, #0
 8001558:	2036      	movs	r0, #54	@ 0x36
 800155a:	f000 ff98 	bl	800248e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800155e:	2036      	movs	r0, #54	@ 0x36
 8001560:	f000 ffb1 	bl	80024c6 <HAL_NVIC_EnableIRQ>
}
 8001564:	bf00      	nop
 8001566:	bd80      	pop	{r7, pc}

08001568 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b082      	sub	sp, #8
 800156c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800156e:	463b      	mov	r3, r7
 8001570:	2200      	movs	r2, #0
 8001572:	601a      	str	r2, [r3, #0]
 8001574:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001576:	4b15      	ldr	r3, [pc, #84]	@ (80015cc <MX_TIM6_Init+0x64>)
 8001578:	4a15      	ldr	r2, [pc, #84]	@ (80015d0 <MX_TIM6_Init+0x68>)
 800157a:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 99;
 800157c:	4b13      	ldr	r3, [pc, #76]	@ (80015cc <MX_TIM6_Init+0x64>)
 800157e:	2263      	movs	r2, #99	@ 0x63
 8001580:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001582:	4b12      	ldr	r3, [pc, #72]	@ (80015cc <MX_TIM6_Init+0x64>)
 8001584:	2200      	movs	r2, #0
 8001586:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 839;
 8001588:	4b10      	ldr	r3, [pc, #64]	@ (80015cc <MX_TIM6_Init+0x64>)
 800158a:	f240 3247 	movw	r2, #839	@ 0x347
 800158e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001590:	4b0e      	ldr	r3, [pc, #56]	@ (80015cc <MX_TIM6_Init+0x64>)
 8001592:	2280      	movs	r2, #128	@ 0x80
 8001594:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001596:	480d      	ldr	r0, [pc, #52]	@ (80015cc <MX_TIM6_Init+0x64>)
 8001598:	f001 feda 	bl	8003350 <HAL_TIM_Base_Init>
 800159c:	4603      	mov	r3, r0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d001      	beq.n	80015a6 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 80015a2:	f000 f9bb 	bl	800191c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015a6:	2300      	movs	r3, #0
 80015a8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015aa:	2300      	movs	r3, #0
 80015ac:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80015ae:	463b      	mov	r3, r7
 80015b0:	4619      	mov	r1, r3
 80015b2:	4806      	ldr	r0, [pc, #24]	@ (80015cc <MX_TIM6_Init+0x64>)
 80015b4:	f002 f950 	bl	8003858 <HAL_TIMEx_MasterConfigSynchronization>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d001      	beq.n	80015c2 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 80015be:	f000 f9ad 	bl	800191c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80015c2:	bf00      	nop
 80015c4:	3708      	adds	r7, #8
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	20000134 	.word	0x20000134
 80015d0:	40001000 	.word	0x40001000

080015d4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80015d8:	4b11      	ldr	r3, [pc, #68]	@ (8001620 <MX_USART3_UART_Init+0x4c>)
 80015da:	4a12      	ldr	r2, [pc, #72]	@ (8001624 <MX_USART3_UART_Init+0x50>)
 80015dc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80015de:	4b10      	ldr	r3, [pc, #64]	@ (8001620 <MX_USART3_UART_Init+0x4c>)
 80015e0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80015e4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80015e6:	4b0e      	ldr	r3, [pc, #56]	@ (8001620 <MX_USART3_UART_Init+0x4c>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80015ec:	4b0c      	ldr	r3, [pc, #48]	@ (8001620 <MX_USART3_UART_Init+0x4c>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80015f2:	4b0b      	ldr	r3, [pc, #44]	@ (8001620 <MX_USART3_UART_Init+0x4c>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80015f8:	4b09      	ldr	r3, [pc, #36]	@ (8001620 <MX_USART3_UART_Init+0x4c>)
 80015fa:	220c      	movs	r2, #12
 80015fc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015fe:	4b08      	ldr	r3, [pc, #32]	@ (8001620 <MX_USART3_UART_Init+0x4c>)
 8001600:	2200      	movs	r2, #0
 8001602:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001604:	4b06      	ldr	r3, [pc, #24]	@ (8001620 <MX_USART3_UART_Init+0x4c>)
 8001606:	2200      	movs	r2, #0
 8001608:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800160a:	4805      	ldr	r0, [pc, #20]	@ (8001620 <MX_USART3_UART_Init+0x4c>)
 800160c:	f002 f9b4 	bl	8003978 <HAL_UART_Init>
 8001610:	4603      	mov	r3, r0
 8001612:	2b00      	cmp	r3, #0
 8001614:	d001      	beq.n	800161a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001616:	f000 f981 	bl	800191c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800161a:	bf00      	nop
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	2000017c 	.word	0x2000017c
 8001624:	40004800 	.word	0x40004800

08001628 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b08a      	sub	sp, #40	@ 0x28
 800162c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800162e:	f107 0314 	add.w	r3, r7, #20
 8001632:	2200      	movs	r2, #0
 8001634:	601a      	str	r2, [r3, #0]
 8001636:	605a      	str	r2, [r3, #4]
 8001638:	609a      	str	r2, [r3, #8]
 800163a:	60da      	str	r2, [r3, #12]
 800163c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800163e:	2300      	movs	r3, #0
 8001640:	613b      	str	r3, [r7, #16]
 8001642:	4b5a      	ldr	r3, [pc, #360]	@ (80017ac <MX_GPIO_Init+0x184>)
 8001644:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001646:	4a59      	ldr	r2, [pc, #356]	@ (80017ac <MX_GPIO_Init+0x184>)
 8001648:	f043 0310 	orr.w	r3, r3, #16
 800164c:	6313      	str	r3, [r2, #48]	@ 0x30
 800164e:	4b57      	ldr	r3, [pc, #348]	@ (80017ac <MX_GPIO_Init+0x184>)
 8001650:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001652:	f003 0310 	and.w	r3, r3, #16
 8001656:	613b      	str	r3, [r7, #16]
 8001658:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800165a:	2300      	movs	r3, #0
 800165c:	60fb      	str	r3, [r7, #12]
 800165e:	4b53      	ldr	r3, [pc, #332]	@ (80017ac <MX_GPIO_Init+0x184>)
 8001660:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001662:	4a52      	ldr	r2, [pc, #328]	@ (80017ac <MX_GPIO_Init+0x184>)
 8001664:	f043 0304 	orr.w	r3, r3, #4
 8001668:	6313      	str	r3, [r2, #48]	@ 0x30
 800166a:	4b50      	ldr	r3, [pc, #320]	@ (80017ac <MX_GPIO_Init+0x184>)
 800166c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800166e:	f003 0304 	and.w	r3, r3, #4
 8001672:	60fb      	str	r3, [r7, #12]
 8001674:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001676:	2300      	movs	r3, #0
 8001678:	60bb      	str	r3, [r7, #8]
 800167a:	4b4c      	ldr	r3, [pc, #304]	@ (80017ac <MX_GPIO_Init+0x184>)
 800167c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800167e:	4a4b      	ldr	r2, [pc, #300]	@ (80017ac <MX_GPIO_Init+0x184>)
 8001680:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001684:	6313      	str	r3, [r2, #48]	@ 0x30
 8001686:	4b49      	ldr	r3, [pc, #292]	@ (80017ac <MX_GPIO_Init+0x184>)
 8001688:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800168a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800168e:	60bb      	str	r3, [r7, #8]
 8001690:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001692:	2300      	movs	r3, #0
 8001694:	607b      	str	r3, [r7, #4]
 8001696:	4b45      	ldr	r3, [pc, #276]	@ (80017ac <MX_GPIO_Init+0x184>)
 8001698:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800169a:	4a44      	ldr	r2, [pc, #272]	@ (80017ac <MX_GPIO_Init+0x184>)
 800169c:	f043 0302 	orr.w	r3, r3, #2
 80016a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80016a2:	4b42      	ldr	r3, [pc, #264]	@ (80017ac <MX_GPIO_Init+0x184>)
 80016a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016a6:	f003 0302 	and.w	r3, r3, #2
 80016aa:	607b      	str	r3, [r7, #4]
 80016ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80016ae:	2300      	movs	r3, #0
 80016b0:	603b      	str	r3, [r7, #0]
 80016b2:	4b3e      	ldr	r3, [pc, #248]	@ (80017ac <MX_GPIO_Init+0x184>)
 80016b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016b6:	4a3d      	ldr	r2, [pc, #244]	@ (80017ac <MX_GPIO_Init+0x184>)
 80016b8:	f043 0308 	orr.w	r3, r3, #8
 80016bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80016be:	4b3b      	ldr	r3, [pc, #236]	@ (80017ac <MX_GPIO_Init+0x184>)
 80016c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016c2:	f003 0308 	and.w	r3, r3, #8
 80016c6:	603b      	str	r3, [r7, #0]
 80016c8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_5, GPIO_PIN_RESET);
 80016ca:	2200      	movs	r2, #0
 80016cc:	2121      	movs	r1, #33	@ 0x21
 80016ce:	4838      	ldr	r0, [pc, #224]	@ (80017b0 <MX_GPIO_Init+0x188>)
 80016d0:	f001 f95a 	bl	8002988 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 80016d4:	2200      	movs	r2, #0
 80016d6:	f44f 41e0 	mov.w	r1, #28672	@ 0x7000
 80016da:	4836      	ldr	r0, [pc, #216]	@ (80017b4 <MX_GPIO_Init+0x18c>)
 80016dc:	f001 f954 	bl	8002988 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 80016e0:	2200      	movs	r2, #0
 80016e2:	2140      	movs	r1, #64	@ 0x40
 80016e4:	4834      	ldr	r0, [pc, #208]	@ (80017b8 <MX_GPIO_Init+0x190>)
 80016e6:	f001 f94f 	bl	8002988 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80016ea:	2308      	movs	r3, #8
 80016ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80016ee:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 80016f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f4:	2300      	movs	r3, #0
 80016f6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80016f8:	f107 0314 	add.w	r3, r7, #20
 80016fc:	4619      	mov	r1, r3
 80016fe:	482f      	ldr	r0, [pc, #188]	@ (80017bc <MX_GPIO_Init+0x194>)
 8001700:	f000 ff8e 	bl	8002620 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001704:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001708:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800170a:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 800170e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001710:	2300      	movs	r3, #0
 8001712:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001714:	f107 0314 	add.w	r3, r7, #20
 8001718:	4619      	mov	r1, r3
 800171a:	4827      	ldr	r0, [pc, #156]	@ (80017b8 <MX_GPIO_Init+0x190>)
 800171c:	f000 ff80 	bl	8002620 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_5;
 8001720:	2321      	movs	r3, #33	@ 0x21
 8001722:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001724:	2301      	movs	r3, #1
 8001726:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001728:	2300      	movs	r3, #0
 800172a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800172c:	2300      	movs	r3, #0
 800172e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001730:	f107 0314 	add.w	r3, r7, #20
 8001734:	4619      	mov	r1, r3
 8001736:	481e      	ldr	r0, [pc, #120]	@ (80017b0 <MX_GPIO_Init+0x188>)
 8001738:	f000 ff72 	bl	8002620 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD10 PD4 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_4;
 800173c:	f44f 6382 	mov.w	r3, #1040	@ 0x410
 8001740:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001742:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8001746:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001748:	2300      	movs	r3, #0
 800174a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800174c:	f107 0314 	add.w	r3, r7, #20
 8001750:	4619      	mov	r1, r3
 8001752:	4818      	ldr	r0, [pc, #96]	@ (80017b4 <MX_GPIO_Init+0x18c>)
 8001754:	f000 ff64 	bl	8002620 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 8001758:	f44f 43e0 	mov.w	r3, #28672	@ 0x7000
 800175c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800175e:	2301      	movs	r3, #1
 8001760:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001762:	2300      	movs	r3, #0
 8001764:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001766:	2300      	movs	r3, #0
 8001768:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800176a:	f107 0314 	add.w	r3, r7, #20
 800176e:	4619      	mov	r1, r3
 8001770:	4810      	ldr	r0, [pc, #64]	@ (80017b4 <MX_GPIO_Init+0x18c>)
 8001772:	f000 ff55 	bl	8002620 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001776:	2340      	movs	r3, #64	@ 0x40
 8001778:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800177a:	2301      	movs	r3, #1
 800177c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800177e:	2300      	movs	r3, #0
 8001780:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001782:	2300      	movs	r3, #0
 8001784:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001786:	f107 0314 	add.w	r3, r7, #20
 800178a:	4619      	mov	r1, r3
 800178c:	480a      	ldr	r0, [pc, #40]	@ (80017b8 <MX_GPIO_Init+0x190>)
 800178e:	f000 ff47 	bl	8002620 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8001792:	2200      	movs	r2, #0
 8001794:	2100      	movs	r1, #0
 8001796:	2009      	movs	r0, #9
 8001798:	f000 fe79 	bl	800248e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800179c:	2009      	movs	r0, #9
 800179e:	f000 fe92 	bl	80024c6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80017a2:	bf00      	nop
 80017a4:	3728      	adds	r7, #40	@ 0x28
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	40023800 	.word	0x40023800
 80017b0:	40020400 	.word	0x40020400
 80017b4:	40020c00 	.word	0x40020c00
 80017b8:	40020800 	.word	0x40020800
 80017bc:	40021000 	.word	0x40021000

080017c0 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b082      	sub	sp, #8
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  if(huart -> Instance == USART3) {
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4a07      	ldr	r2, [pc, #28]	@ (80017ec <HAL_UART_RxCpltCallback+0x2c>)
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d107      	bne.n	80017e2 <HAL_UART_RxCpltCallback+0x22>
	  HAL_UART_Receive_IT(&huart3, &uartRxfd.uart3_rx_data, sizeof(uartRxfd.uart3_rx_data));
 80017d2:	2201      	movs	r2, #1
 80017d4:	4906      	ldr	r1, [pc, #24]	@ (80017f0 <HAL_UART_RxCpltCallback+0x30>)
 80017d6:	4807      	ldr	r0, [pc, #28]	@ (80017f4 <HAL_UART_RxCpltCallback+0x34>)
 80017d8:	f002 f91e 	bl	8003a18 <HAL_UART_Receive_IT>
	  uartRxfd.uart3_rx_flag = 1;
 80017dc:	4b04      	ldr	r3, [pc, #16]	@ (80017f0 <HAL_UART_RxCpltCallback+0x30>)
 80017de:	2201      	movs	r2, #1
 80017e0:	705a      	strb	r2, [r3, #1]
  }
}
 80017e2:	bf00      	nop
 80017e4:	3708      	adds	r7, #8
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	40004800 	.word	0x40004800
 80017f0:	200001e4 	.word	0x200001e4
 80017f4:	2000017c 	.word	0x2000017c

080017f8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b082      	sub	sp, #8
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM6) {
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4a06      	ldr	r2, [pc, #24]	@ (8001820 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8001806:	4293      	cmp	r3, r2
 8001808:	d106      	bne.n	8001818 <HAL_TIM_PeriodElapsedCallback+0x20>
		stopwatch.time.millisecond++;
 800180a:	4b06      	ldr	r3, [pc, #24]	@ (8001824 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 800180c:	691b      	ldr	r3, [r3, #16]
 800180e:	3301      	adds	r3, #1
 8001810:	4a04      	ldr	r2, [pc, #16]	@ (8001824 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8001812:	6113      	str	r3, [r2, #16]
		saveTime();
 8001814:	f000 fa0e 	bl	8001c34 <saveTime>

	}
}
 8001818:	bf00      	nop
 800181a:	3708      	adds	r7, #8
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}
 8001820:	40001000 	.word	0x40001000
 8001824:	20000000 	.word	0x20000000

08001828 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b082      	sub	sp, #8
 800182c:	af00      	add	r7, sp, #0
 800182e:	4603      	mov	r3, r0
 8001830:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_3 && HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_3)) {
 8001832:	88fb      	ldrh	r3, [r7, #6]
 8001834:	2b08      	cmp	r3, #8
 8001836:	d10b      	bne.n	8001850 <HAL_GPIO_EXTI_Callback+0x28>
 8001838:	2108      	movs	r1, #8
 800183a:	4831      	ldr	r0, [pc, #196]	@ (8001900 <HAL_GPIO_EXTI_Callback+0xd8>)
 800183c:	f001 f88c 	bl	8002958 <HAL_GPIO_ReadPin>
 8001840:	4603      	mov	r3, r0
 8001842:	2b00      	cmp	r3, #0
 8001844:	d004      	beq.n	8001850 <HAL_GPIO_EXTI_Callback+0x28>
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 8001846:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800184a:	482e      	ldr	r0, [pc, #184]	@ (8001904 <HAL_GPIO_EXTI_Callback+0xdc>)
 800184c:	f001 f8b5 	bl	80029ba <HAL_GPIO_TogglePin>
	}

	if(GPIO_Pin == GPIO_PIN_15 && HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_15)) {
 8001850:	88fb      	ldrh	r3, [r7, #6]
 8001852:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001856:	d116      	bne.n	8001886 <HAL_GPIO_EXTI_Callback+0x5e>
 8001858:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800185c:	482a      	ldr	r0, [pc, #168]	@ (8001908 <HAL_GPIO_EXTI_Callback+0xe0>)
 800185e:	f001 f87b 	bl	8002958 <HAL_GPIO_ReadPin>
 8001862:	4603      	mov	r3, r0
 8001864:	2b00      	cmp	r3, #0
 8001866:	d00e      	beq.n	8001886 <HAL_GPIO_EXTI_Callback+0x5e>
		PC15.state = !PC15.state;
 8001868:	4b28      	ldr	r3, [pc, #160]	@ (800190c <HAL_GPIO_EXTI_Callback+0xe4>)
 800186a:	781b      	ldrb	r3, [r3, #0]
 800186c:	2b00      	cmp	r3, #0
 800186e:	bf0c      	ite	eq
 8001870:	2301      	moveq	r3, #1
 8001872:	2300      	movne	r3, #0
 8001874:	b2db      	uxtb	r3, r3
 8001876:	461a      	mov	r2, r3
 8001878:	4b24      	ldr	r3, [pc, #144]	@ (800190c <HAL_GPIO_EXTI_Callback+0xe4>)
 800187a:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 800187c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001880:	4820      	ldr	r0, [pc, #128]	@ (8001904 <HAL_GPIO_EXTI_Callback+0xdc>)
 8001882:	f001 f89a 	bl	80029ba <HAL_GPIO_TogglePin>
	}
	if(GPIO_Pin == GPIO_PIN_4 && HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_4)) {
 8001886:	88fb      	ldrh	r3, [r7, #6]
 8001888:	2b10      	cmp	r3, #16
 800188a:	d117      	bne.n	80018bc <HAL_GPIO_EXTI_Callback+0x94>
 800188c:	2110      	movs	r1, #16
 800188e:	481d      	ldr	r0, [pc, #116]	@ (8001904 <HAL_GPIO_EXTI_Callback+0xdc>)
 8001890:	f001 f862 	bl	8002958 <HAL_GPIO_ReadPin>
 8001894:	4603      	mov	r3, r0
 8001896:	2b00      	cmp	r3, #0
 8001898:	d010      	beq.n	80018bc <HAL_GPIO_EXTI_Callback+0x94>
		PD4.state = 1;
 800189a:	4b1d      	ldr	r3, [pc, #116]	@ (8001910 <HAL_GPIO_EXTI_Callback+0xe8>)
 800189c:	2201      	movs	r2, #1
 800189e:	701a      	strb	r2, [r3, #0]
		if(stopwatch.state == PAUSE || stopwatch.state == STOP) {
 80018a0:	4b1c      	ldr	r3, [pc, #112]	@ (8001914 <HAL_GPIO_EXTI_Callback+0xec>)
 80018a2:	781b      	ldrb	r3, [r3, #0]
 80018a4:	2b01      	cmp	r3, #1
 80018a6:	d003      	beq.n	80018b0 <HAL_GPIO_EXTI_Callback+0x88>
 80018a8:	4b1a      	ldr	r3, [pc, #104]	@ (8001914 <HAL_GPIO_EXTI_Callback+0xec>)
 80018aa:	781b      	ldrb	r3, [r3, #0]
 80018ac:	2b02      	cmp	r3, #2
 80018ae:	d109      	bne.n	80018c4 <HAL_GPIO_EXTI_Callback+0x9c>
			HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 80018b0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80018b4:	4813      	ldr	r0, [pc, #76]	@ (8001904 <HAL_GPIO_EXTI_Callback+0xdc>)
 80018b6:	f001 f880 	bl	80029ba <HAL_GPIO_TogglePin>
		if(stopwatch.state == PAUSE || stopwatch.state == STOP) {
 80018ba:	e003      	b.n	80018c4 <HAL_GPIO_EXTI_Callback+0x9c>
		}
	} else {
		PD4.state = 0;
 80018bc:	4b14      	ldr	r3, [pc, #80]	@ (8001910 <HAL_GPIO_EXTI_Callback+0xe8>)
 80018be:	2200      	movs	r2, #0
 80018c0:	701a      	strb	r2, [r3, #0]
 80018c2:	e000      	b.n	80018c6 <HAL_GPIO_EXTI_Callback+0x9e>
		if(stopwatch.state == PAUSE || stopwatch.state == STOP) {
 80018c4:	bf00      	nop
	}
	if(GPIO_Pin == GPIO_PIN_10 && HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_10)) {
 80018c6:	88fb      	ldrh	r3, [r7, #6]
 80018c8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80018cc:	d10f      	bne.n	80018ee <HAL_GPIO_EXTI_Callback+0xc6>
 80018ce:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80018d2:	480c      	ldr	r0, [pc, #48]	@ (8001904 <HAL_GPIO_EXTI_Callback+0xdc>)
 80018d4:	f001 f840 	bl	8002958 <HAL_GPIO_ReadPin>
 80018d8:	4603      	mov	r3, r0
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d007      	beq.n	80018ee <HAL_GPIO_EXTI_Callback+0xc6>
		PD10.state = 1;
 80018de:	4b0e      	ldr	r3, [pc, #56]	@ (8001918 <HAL_GPIO_EXTI_Callback+0xf0>)
 80018e0:	2201      	movs	r2, #1
 80018e2:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_6);
 80018e4:	2140      	movs	r1, #64	@ 0x40
 80018e6:	4808      	ldr	r0, [pc, #32]	@ (8001908 <HAL_GPIO_EXTI_Callback+0xe0>)
 80018e8:	f001 f867 	bl	80029ba <HAL_GPIO_TogglePin>
 80018ec:	e003      	b.n	80018f6 <HAL_GPIO_EXTI_Callback+0xce>
	} else {
		PD10.state = 0;
 80018ee:	4b0a      	ldr	r3, [pc, #40]	@ (8001918 <HAL_GPIO_EXTI_Callback+0xf0>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	701a      	strb	r2, [r3, #0]
	}

}
 80018f4:	bf00      	nop
 80018f6:	bf00      	nop
 80018f8:	3708      	adds	r7, #8
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	40021000 	.word	0x40021000
 8001904:	40020c00 	.word	0x40020c00
 8001908:	40020800 	.word	0x40020800
 800190c:	200001d4 	.word	0x200001d4
 8001910:	200001d8 	.word	0x200001d8
 8001914:	20000000 	.word	0x20000000
 8001918:	200001dc 	.word	0x200001dc

0800191c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800191c:	b480      	push	{r7}
 800191e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001920:	b672      	cpsid	i
}
 8001922:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001924:	bf00      	nop
 8001926:	e7fd      	b.n	8001924 <Error_Handler+0x8>

08001928 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001928:	b480      	push	{r7}
 800192a:	b083      	sub	sp, #12
 800192c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800192e:	2300      	movs	r3, #0
 8001930:	607b      	str	r3, [r7, #4]
 8001932:	4b10      	ldr	r3, [pc, #64]	@ (8001974 <HAL_MspInit+0x4c>)
 8001934:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001936:	4a0f      	ldr	r2, [pc, #60]	@ (8001974 <HAL_MspInit+0x4c>)
 8001938:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800193c:	6453      	str	r3, [r2, #68]	@ 0x44
 800193e:	4b0d      	ldr	r3, [pc, #52]	@ (8001974 <HAL_MspInit+0x4c>)
 8001940:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001942:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001946:	607b      	str	r3, [r7, #4]
 8001948:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800194a:	2300      	movs	r3, #0
 800194c:	603b      	str	r3, [r7, #0]
 800194e:	4b09      	ldr	r3, [pc, #36]	@ (8001974 <HAL_MspInit+0x4c>)
 8001950:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001952:	4a08      	ldr	r2, [pc, #32]	@ (8001974 <HAL_MspInit+0x4c>)
 8001954:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001958:	6413      	str	r3, [r2, #64]	@ 0x40
 800195a:	4b06      	ldr	r3, [pc, #24]	@ (8001974 <HAL_MspInit+0x4c>)
 800195c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800195e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001962:	603b      	str	r3, [r7, #0]
 8001964:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001966:	bf00      	nop
 8001968:	370c      	adds	r7, #12
 800196a:	46bd      	mov	sp, r7
 800196c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001970:	4770      	bx	lr
 8001972:	bf00      	nop
 8001974:	40023800 	.word	0x40023800

08001978 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001978:	b480      	push	{r7}
 800197a:	b085      	sub	sp, #20
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4a0b      	ldr	r2, [pc, #44]	@ (80019b4 <HAL_TIM_Base_MspInit+0x3c>)
 8001986:	4293      	cmp	r3, r2
 8001988:	d10d      	bne.n	80019a6 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800198a:	2300      	movs	r3, #0
 800198c:	60fb      	str	r3, [r7, #12]
 800198e:	4b0a      	ldr	r3, [pc, #40]	@ (80019b8 <HAL_TIM_Base_MspInit+0x40>)
 8001990:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001992:	4a09      	ldr	r2, [pc, #36]	@ (80019b8 <HAL_TIM_Base_MspInit+0x40>)
 8001994:	f043 0310 	orr.w	r3, r3, #16
 8001998:	6413      	str	r3, [r2, #64]	@ 0x40
 800199a:	4b07      	ldr	r3, [pc, #28]	@ (80019b8 <HAL_TIM_Base_MspInit+0x40>)
 800199c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800199e:	f003 0310 	and.w	r3, r3, #16
 80019a2:	60fb      	str	r3, [r7, #12]
 80019a4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 80019a6:	bf00      	nop
 80019a8:	3714      	adds	r7, #20
 80019aa:	46bd      	mov	sp, r7
 80019ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b0:	4770      	bx	lr
 80019b2:	bf00      	nop
 80019b4:	40001000 	.word	0x40001000
 80019b8:	40023800 	.word	0x40023800

080019bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b08a      	sub	sp, #40	@ 0x28
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019c4:	f107 0314 	add.w	r3, r7, #20
 80019c8:	2200      	movs	r2, #0
 80019ca:	601a      	str	r2, [r3, #0]
 80019cc:	605a      	str	r2, [r3, #4]
 80019ce:	609a      	str	r2, [r3, #8]
 80019d0:	60da      	str	r2, [r3, #12]
 80019d2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4a19      	ldr	r2, [pc, #100]	@ (8001a40 <HAL_UART_MspInit+0x84>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d12c      	bne.n	8001a38 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80019de:	2300      	movs	r3, #0
 80019e0:	613b      	str	r3, [r7, #16]
 80019e2:	4b18      	ldr	r3, [pc, #96]	@ (8001a44 <HAL_UART_MspInit+0x88>)
 80019e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019e6:	4a17      	ldr	r2, [pc, #92]	@ (8001a44 <HAL_UART_MspInit+0x88>)
 80019e8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80019ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80019ee:	4b15      	ldr	r3, [pc, #84]	@ (8001a44 <HAL_UART_MspInit+0x88>)
 80019f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019f2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80019f6:	613b      	str	r3, [r7, #16]
 80019f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80019fa:	2300      	movs	r3, #0
 80019fc:	60fb      	str	r3, [r7, #12]
 80019fe:	4b11      	ldr	r3, [pc, #68]	@ (8001a44 <HAL_UART_MspInit+0x88>)
 8001a00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a02:	4a10      	ldr	r2, [pc, #64]	@ (8001a44 <HAL_UART_MspInit+0x88>)
 8001a04:	f043 0308 	orr.w	r3, r3, #8
 8001a08:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a0a:	4b0e      	ldr	r3, [pc, #56]	@ (8001a44 <HAL_UART_MspInit+0x88>)
 8001a0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a0e:	f003 0308 	and.w	r3, r3, #8
 8001a12:	60fb      	str	r3, [r7, #12]
 8001a14:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001a16:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001a1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a1c:	2302      	movs	r3, #2
 8001a1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a20:	2300      	movs	r3, #0
 8001a22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a24:	2303      	movs	r3, #3
 8001a26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001a28:	2307      	movs	r3, #7
 8001a2a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a2c:	f107 0314 	add.w	r3, r7, #20
 8001a30:	4619      	mov	r1, r3
 8001a32:	4805      	ldr	r0, [pc, #20]	@ (8001a48 <HAL_UART_MspInit+0x8c>)
 8001a34:	f000 fdf4 	bl	8002620 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001a38:	bf00      	nop
 8001a3a:	3728      	adds	r7, #40	@ 0x28
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}
 8001a40:	40004800 	.word	0x40004800
 8001a44:	40023800 	.word	0x40023800
 8001a48:	40020c00 	.word	0x40020c00

08001a4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a50:	bf00      	nop
 8001a52:	e7fd      	b.n	8001a50 <NMI_Handler+0x4>

08001a54 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a54:	b480      	push	{r7}
 8001a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a58:	bf00      	nop
 8001a5a:	e7fd      	b.n	8001a58 <HardFault_Handler+0x4>

08001a5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a60:	bf00      	nop
 8001a62:	e7fd      	b.n	8001a60 <MemManage_Handler+0x4>

08001a64 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a64:	b480      	push	{r7}
 8001a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a68:	bf00      	nop
 8001a6a:	e7fd      	b.n	8001a68 <BusFault_Handler+0x4>

08001a6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a70:	bf00      	nop
 8001a72:	e7fd      	b.n	8001a70 <UsageFault_Handler+0x4>

08001a74 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a74:	b480      	push	{r7}
 8001a76:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a78:	bf00      	nop
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a80:	4770      	bx	lr

08001a82 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a82:	b480      	push	{r7}
 8001a84:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a86:	bf00      	nop
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8e:	4770      	bx	lr

08001a90 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a90:	b480      	push	{r7}
 8001a92:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a94:	bf00      	nop
 8001a96:	46bd      	mov	sp, r7
 8001a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9c:	4770      	bx	lr

08001a9e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a9e:	b580      	push	{r7, lr}
 8001aa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001aa2:	f000 fbd5 	bl	8002250 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001aa6:	bf00      	nop
 8001aa8:	bd80      	pop	{r7, pc}

08001aaa <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001aaa:	b580      	push	{r7, lr}
 8001aac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8001aae:	2008      	movs	r0, #8
 8001ab0:	f000 ff9e 	bl	80029f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001ab4:	bf00      	nop
 8001ab6:	bd80      	pop	{r7, pc}

08001ab8 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8001abc:	2010      	movs	r0, #16
 8001abe:	f000 ff97 	bl	80029f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001ac2:	bf00      	nop
 8001ac4:	bd80      	pop	{r7, pc}
	...

08001ac8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001acc:	4802      	ldr	r0, [pc, #8]	@ (8001ad8 <USART3_IRQHandler+0x10>)
 8001ace:	f001 ffc9 	bl	8003a64 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001ad2:	bf00      	nop
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	2000017c 	.word	0x2000017c

08001adc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8001ae0:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8001ae4:	f000 ff84 	bl	80029f0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8001ae8:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8001aec:	f000 ff80 	bl	80029f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001af0:	bf00      	nop
 8001af2:	bd80      	pop	{r7, pc}

08001af4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001af8:	4802      	ldr	r0, [pc, #8]	@ (8001b04 <TIM6_DAC_IRQHandler+0x10>)
 8001afa:	f001 fce9 	bl	80034d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001afe:	bf00      	nop
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop
 8001b04:	20000134 	.word	0x20000134

08001b08 <segUpCount>:
sw2 PC15;
sw3 PD4;
sw4 PD10;


void segUpCount() {
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	af00      	add	r7, sp, #0
	// 스탑워치 시작 함수
	if(stopwatch.time.millisecond < 500) {
 8001b0c:	4b18      	ldr	r3, [pc, #96]	@ (8001b70 <segUpCount+0x68>)
 8001b0e:	691b      	ldr	r3, [r3, #16]
 8001b10:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001b14:	da04      	bge.n	8001b20 <segUpCount+0x18>
		stopwatch.laptime.decimalPoint = 1;
 8001b16:	4b16      	ldr	r3, [pc, #88]	@ (8001b70 <segUpCount+0x68>)
 8001b18:	2201      	movs	r2, #1
 8001b1a:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
 8001b1e:	e003      	b.n	8001b28 <segUpCount+0x20>
	} else {
		stopwatch.laptime.decimalPoint = 0;
 8001b20:	4b13      	ldr	r3, [pc, #76]	@ (8001b70 <segUpCount+0x68>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	}
	_7SEG_SetNumber(DGT1, stopwatch.time.second % 10, stopwatch.laptime.decimalPoint);
 8001b28:	4b11      	ldr	r3, [pc, #68]	@ (8001b70 <segUpCount+0x68>)
 8001b2a:	68da      	ldr	r2, [r3, #12]
 8001b2c:	4b11      	ldr	r3, [pc, #68]	@ (8001b74 <segUpCount+0x6c>)
 8001b2e:	fb83 1302 	smull	r1, r3, r3, r2
 8001b32:	1099      	asrs	r1, r3, #2
 8001b34:	17d3      	asrs	r3, r2, #31
 8001b36:	1ac9      	subs	r1, r1, r3
 8001b38:	460b      	mov	r3, r1
 8001b3a:	009b      	lsls	r3, r3, #2
 8001b3c:	440b      	add	r3, r1
 8001b3e:	005b      	lsls	r3, r3, #1
 8001b40:	1ad1      	subs	r1, r2, r3
 8001b42:	4b0b      	ldr	r3, [pc, #44]	@ (8001b70 <segUpCount+0x68>)
 8001b44:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 8001b48:	461a      	mov	r2, r3
 8001b4a:	2000      	movs	r0, #0
 8001b4c:	f7fe fdee 	bl	800072c <_7SEG_SetNumber>
	_7SEG_SetNumber(DGT2, stopwatch.time.millisecond / 100, 0);
 8001b50:	4b07      	ldr	r3, [pc, #28]	@ (8001b70 <segUpCount+0x68>)
 8001b52:	691b      	ldr	r3, [r3, #16]
 8001b54:	4a08      	ldr	r2, [pc, #32]	@ (8001b78 <segUpCount+0x70>)
 8001b56:	fb82 1203 	smull	r1, r2, r2, r3
 8001b5a:	1152      	asrs	r2, r2, #5
 8001b5c:	17db      	asrs	r3, r3, #31
 8001b5e:	1ad3      	subs	r3, r2, r3
 8001b60:	2200      	movs	r2, #0
 8001b62:	4619      	mov	r1, r3
 8001b64:	2001      	movs	r0, #1
 8001b66:	f7fe fde1 	bl	800072c <_7SEG_SetNumber>

}
 8001b6a:	bf00      	nop
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	20000000 	.word	0x20000000
 8001b74:	66666667 	.word	0x66666667
 8001b78:	51eb851f 	.word	0x51eb851f

08001b7c <segReset>:

void segReset() {
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	af00      	add	r7, sp, #0
	// 7세그먼트 초기화 함수
	_7SEG_SetNumber(DGT1, 0, 1);
 8001b80:	2201      	movs	r2, #1
 8001b82:	2100      	movs	r1, #0
 8001b84:	2000      	movs	r0, #0
 8001b86:	f7fe fdd1 	bl	800072c <_7SEG_SetNumber>
	_7SEG_SetNumber(DGT2, 0, 0);
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	2100      	movs	r1, #0
 8001b8e:	2001      	movs	r0, #1
 8001b90:	f7fe fdcc 	bl	800072c <_7SEG_SetNumber>
}
 8001b94:	bf00      	nop
 8001b96:	bd80      	pop	{r7, pc}

08001b98 <timerReset>:

void timerReset() {
 8001b98:	b480      	push	{r7}
 8001b9a:	af00      	add	r7, sp, #0
	// 스탑워치 시간 초기화 함수
	stopwatch.time.hour = 0;
 8001b9c:	4b08      	ldr	r3, [pc, #32]	@ (8001bc0 <timerReset+0x28>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	605a      	str	r2, [r3, #4]
	stopwatch.time.minute = 0;
 8001ba2:	4b07      	ldr	r3, [pc, #28]	@ (8001bc0 <timerReset+0x28>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	609a      	str	r2, [r3, #8]
	stopwatch.time.second = 0;
 8001ba8:	4b05      	ldr	r3, [pc, #20]	@ (8001bc0 <timerReset+0x28>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	60da      	str	r2, [r3, #12]
	stopwatch.time.millisecond = 0;
 8001bae:	4b04      	ldr	r3, [pc, #16]	@ (8001bc0 <timerReset+0x28>)
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	611a      	str	r2, [r3, #16]
}
 8001bb4:	bf00      	nop
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbc:	4770      	bx	lr
 8001bbe:	bf00      	nop
 8001bc0:	20000000 	.word	0x20000000

08001bc4 <timerPaused>:

void timerPaused() {
 8001bc4:	b480      	push	{r7}
 8001bc6:	af00      	add	r7, sp, #0
	// 스탑워치 일시정지 함수
	pausedTimer.hour = stopwatch.time.hour;
 8001bc8:	4b0a      	ldr	r3, [pc, #40]	@ (8001bf4 <timerPaused+0x30>)
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	4a0a      	ldr	r2, [pc, #40]	@ (8001bf8 <timerPaused+0x34>)
 8001bce:	6013      	str	r3, [r2, #0]
	pausedTimer.minute = stopwatch.time.minute;
 8001bd0:	4b08      	ldr	r3, [pc, #32]	@ (8001bf4 <timerPaused+0x30>)
 8001bd2:	689b      	ldr	r3, [r3, #8]
 8001bd4:	4a08      	ldr	r2, [pc, #32]	@ (8001bf8 <timerPaused+0x34>)
 8001bd6:	6053      	str	r3, [r2, #4]
	pausedTimer.second = stopwatch.time.second;
 8001bd8:	4b06      	ldr	r3, [pc, #24]	@ (8001bf4 <timerPaused+0x30>)
 8001bda:	68db      	ldr	r3, [r3, #12]
 8001bdc:	4a06      	ldr	r2, [pc, #24]	@ (8001bf8 <timerPaused+0x34>)
 8001bde:	6093      	str	r3, [r2, #8]
	pausedTimer.millisecond = stopwatch.time.millisecond;
 8001be0:	4b04      	ldr	r3, [pc, #16]	@ (8001bf4 <timerPaused+0x30>)
 8001be2:	691b      	ldr	r3, [r3, #16]
 8001be4:	4a04      	ldr	r2, [pc, #16]	@ (8001bf8 <timerPaused+0x34>)
 8001be6:	60d3      	str	r3, [r2, #12]
}
 8001be8:	bf00      	nop
 8001bea:	46bd      	mov	sp, r7
 8001bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf0:	4770      	bx	lr
 8001bf2:	bf00      	nop
 8001bf4:	20000000 	.word	0x20000000
 8001bf8:	200001c4 	.word	0x200001c4

08001bfc <timerResum>:

void timerResum() {
 8001bfc:	b480      	push	{r7}
 8001bfe:	af00      	add	r7, sp, #0
	// 스탑워치 재개 함수
	stopwatch.time.hour = pausedTimer.hour;
 8001c00:	4b0a      	ldr	r3, [pc, #40]	@ (8001c2c <timerResum+0x30>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a0a      	ldr	r2, [pc, #40]	@ (8001c30 <timerResum+0x34>)
 8001c06:	6053      	str	r3, [r2, #4]
	stopwatch.time.minute = pausedTimer.minute;
 8001c08:	4b08      	ldr	r3, [pc, #32]	@ (8001c2c <timerResum+0x30>)
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	4a08      	ldr	r2, [pc, #32]	@ (8001c30 <timerResum+0x34>)
 8001c0e:	6093      	str	r3, [r2, #8]
	stopwatch.time.second = pausedTimer.second;
 8001c10:	4b06      	ldr	r3, [pc, #24]	@ (8001c2c <timerResum+0x30>)
 8001c12:	689b      	ldr	r3, [r3, #8]
 8001c14:	4a06      	ldr	r2, [pc, #24]	@ (8001c30 <timerResum+0x34>)
 8001c16:	60d3      	str	r3, [r2, #12]
	stopwatch.time.millisecond = pausedTimer.millisecond;
 8001c18:	4b04      	ldr	r3, [pc, #16]	@ (8001c2c <timerResum+0x30>)
 8001c1a:	68db      	ldr	r3, [r3, #12]
 8001c1c:	4a04      	ldr	r2, [pc, #16]	@ (8001c30 <timerResum+0x34>)
 8001c1e:	6113      	str	r3, [r2, #16]
}
 8001c20:	bf00      	nop
 8001c22:	46bd      	mov	sp, r7
 8001c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c28:	4770      	bx	lr
 8001c2a:	bf00      	nop
 8001c2c:	200001c4 	.word	0x200001c4
 8001c30:	20000000 	.word	0x20000000

08001c34 <saveTime>:

void saveTime() {
 8001c34:	b480      	push	{r7}
 8001c36:	af00      	add	r7, sp, #0
	// 스탑워치 시간 저장함수
	if(stopwatch.time.millisecond % 1000 == 0) {
 8001c38:	4b1d      	ldr	r3, [pc, #116]	@ (8001cb0 <saveTime+0x7c>)
 8001c3a:	691a      	ldr	r2, [r3, #16]
 8001c3c:	4b1d      	ldr	r3, [pc, #116]	@ (8001cb4 <saveTime+0x80>)
 8001c3e:	fb83 1302 	smull	r1, r3, r3, r2
 8001c42:	1199      	asrs	r1, r3, #6
 8001c44:	17d3      	asrs	r3, r2, #31
 8001c46:	1acb      	subs	r3, r1, r3
 8001c48:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001c4c:	fb01 f303 	mul.w	r3, r1, r3
 8001c50:	1ad3      	subs	r3, r2, r3
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d107      	bne.n	8001c66 <saveTime+0x32>
		stopwatch.time.millisecond = 0;
 8001c56:	4b16      	ldr	r3, [pc, #88]	@ (8001cb0 <saveTime+0x7c>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	611a      	str	r2, [r3, #16]
		stopwatch.time.second++;
 8001c5c:	4b14      	ldr	r3, [pc, #80]	@ (8001cb0 <saveTime+0x7c>)
 8001c5e:	68db      	ldr	r3, [r3, #12]
 8001c60:	3301      	adds	r3, #1
 8001c62:	4a13      	ldr	r2, [pc, #76]	@ (8001cb0 <saveTime+0x7c>)
 8001c64:	60d3      	str	r3, [r2, #12]
	}
	if(stopwatch.time.second == 60) {
 8001c66:	4b12      	ldr	r3, [pc, #72]	@ (8001cb0 <saveTime+0x7c>)
 8001c68:	68db      	ldr	r3, [r3, #12]
 8001c6a:	2b3c      	cmp	r3, #60	@ 0x3c
 8001c6c:	d107      	bne.n	8001c7e <saveTime+0x4a>
		stopwatch.time.second = 0;
 8001c6e:	4b10      	ldr	r3, [pc, #64]	@ (8001cb0 <saveTime+0x7c>)
 8001c70:	2200      	movs	r2, #0
 8001c72:	60da      	str	r2, [r3, #12]
		stopwatch.time.minute++;
 8001c74:	4b0e      	ldr	r3, [pc, #56]	@ (8001cb0 <saveTime+0x7c>)
 8001c76:	689b      	ldr	r3, [r3, #8]
 8001c78:	3301      	adds	r3, #1
 8001c7a:	4a0d      	ldr	r2, [pc, #52]	@ (8001cb0 <saveTime+0x7c>)
 8001c7c:	6093      	str	r3, [r2, #8]
	}
	if(stopwatch.time.minute == 60) {
 8001c7e:	4b0c      	ldr	r3, [pc, #48]	@ (8001cb0 <saveTime+0x7c>)
 8001c80:	689b      	ldr	r3, [r3, #8]
 8001c82:	2b3c      	cmp	r3, #60	@ 0x3c
 8001c84:	d107      	bne.n	8001c96 <saveTime+0x62>
		stopwatch.time.minute = 0;
 8001c86:	4b0a      	ldr	r3, [pc, #40]	@ (8001cb0 <saveTime+0x7c>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	609a      	str	r2, [r3, #8]
		stopwatch.time.hour++;
 8001c8c:	4b08      	ldr	r3, [pc, #32]	@ (8001cb0 <saveTime+0x7c>)
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	3301      	adds	r3, #1
 8001c92:	4a07      	ldr	r2, [pc, #28]	@ (8001cb0 <saveTime+0x7c>)
 8001c94:	6053      	str	r3, [r2, #4]
	}
	if(stopwatch.time.hour == 24) {
 8001c96:	4b06      	ldr	r3, [pc, #24]	@ (8001cb0 <saveTime+0x7c>)
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	2b18      	cmp	r3, #24
 8001c9c:	d102      	bne.n	8001ca4 <saveTime+0x70>
		stopwatch.time.hour = 0;
 8001c9e:	4b04      	ldr	r3, [pc, #16]	@ (8001cb0 <saveTime+0x7c>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	605a      	str	r2, [r3, #4]
	}
}
 8001ca4:	bf00      	nop
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cac:	4770      	bx	lr
 8001cae:	bf00      	nop
 8001cb0:	20000000 	.word	0x20000000
 8001cb4:	10624dd3 	.word	0x10624dd3

08001cb8 <laptimeTimeSave>:

void laptimeTimeSave() {
 8001cb8:	b5b0      	push	{r4, r5, r7, lr}
 8001cba:	b084      	sub	sp, #16
 8001cbc:	af04      	add	r7, sp, #16
	// 랩타임 저장 함수
	if(stopwatch.laptime.cnt < 9) {
 8001cbe:	4b41      	ldr	r3, [pc, #260]	@ (8001dc4 <laptimeTimeSave+0x10c>)
 8001cc0:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8001cc4:	2b08      	cmp	r3, #8
 8001cc6:	d86a      	bhi.n	8001d9e <laptimeTimeSave+0xe6>
		stopwatch.laptime.saveSpace[stopwatch.laptime.cnt].hour  = stopwatch.time.hour;
 8001cc8:	4b3e      	ldr	r3, [pc, #248]	@ (8001dc4 <laptimeTimeSave+0x10c>)
 8001cca:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8001cce:	4618      	mov	r0, r3
 8001cd0:	4b3c      	ldr	r3, [pc, #240]	@ (8001dc4 <laptimeTimeSave+0x10c>)
 8001cd2:	685a      	ldr	r2, [r3, #4]
 8001cd4:	493b      	ldr	r1, [pc, #236]	@ (8001dc4 <laptimeTimeSave+0x10c>)
 8001cd6:	1c43      	adds	r3, r0, #1
 8001cd8:	011b      	lsls	r3, r3, #4
 8001cda:	440b      	add	r3, r1
 8001cdc:	3304      	adds	r3, #4
 8001cde:	601a      	str	r2, [r3, #0]
		stopwatch.laptime.saveSpace[stopwatch.laptime.cnt].minute = stopwatch.time.minute;
 8001ce0:	4b38      	ldr	r3, [pc, #224]	@ (8001dc4 <laptimeTimeSave+0x10c>)
 8001ce2:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	4b36      	ldr	r3, [pc, #216]	@ (8001dc4 <laptimeTimeSave+0x10c>)
 8001cea:	689a      	ldr	r2, [r3, #8]
 8001cec:	4935      	ldr	r1, [pc, #212]	@ (8001dc4 <laptimeTimeSave+0x10c>)
 8001cee:	1c43      	adds	r3, r0, #1
 8001cf0:	011b      	lsls	r3, r3, #4
 8001cf2:	440b      	add	r3, r1
 8001cf4:	3308      	adds	r3, #8
 8001cf6:	601a      	str	r2, [r3, #0]
		stopwatch.laptime.saveSpace[stopwatch.laptime.cnt].second = stopwatch.time.second;
 8001cf8:	4b32      	ldr	r3, [pc, #200]	@ (8001dc4 <laptimeTimeSave+0x10c>)
 8001cfa:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8001cfe:	4618      	mov	r0, r3
 8001d00:	4b30      	ldr	r3, [pc, #192]	@ (8001dc4 <laptimeTimeSave+0x10c>)
 8001d02:	68da      	ldr	r2, [r3, #12]
 8001d04:	492f      	ldr	r1, [pc, #188]	@ (8001dc4 <laptimeTimeSave+0x10c>)
 8001d06:	0103      	lsls	r3, r0, #4
 8001d08:	440b      	add	r3, r1
 8001d0a:	331c      	adds	r3, #28
 8001d0c:	601a      	str	r2, [r3, #0]
		stopwatch.laptime.saveSpace[stopwatch.laptime.cnt].millisecond = stopwatch.time.millisecond;
 8001d0e:	4b2d      	ldr	r3, [pc, #180]	@ (8001dc4 <laptimeTimeSave+0x10c>)
 8001d10:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8001d14:	4618      	mov	r0, r3
 8001d16:	4b2b      	ldr	r3, [pc, #172]	@ (8001dc4 <laptimeTimeSave+0x10c>)
 8001d18:	691a      	ldr	r2, [r3, #16]
 8001d1a:	492a      	ldr	r1, [pc, #168]	@ (8001dc4 <laptimeTimeSave+0x10c>)
 8001d1c:	0103      	lsls	r3, r0, #4
 8001d1e:	440b      	add	r3, r1
 8001d20:	3320      	adds	r3, #32
 8001d22:	601a      	str	r2, [r3, #0]

		sprintf(stopwatch.laptime.buffer, "LP%d %02d:%02d:%02d.%03d", // 랩타임 저장
				(stopwatch.laptime.cnt + 1),
 8001d24:	4b27      	ldr	r3, [pc, #156]	@ (8001dc4 <laptimeTimeSave+0x10c>)
 8001d26:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
		sprintf(stopwatch.laptime.buffer, "LP%d %02d:%02d:%02d.%03d", // 랩타임 저장
 8001d2a:	1c58      	adds	r0, r3, #1
				stopwatch.laptime.saveSpace[stopwatch.laptime.cnt].hour,
 8001d2c:	4b25      	ldr	r3, [pc, #148]	@ (8001dc4 <laptimeTimeSave+0x10c>)
 8001d2e:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
		sprintf(stopwatch.laptime.buffer, "LP%d %02d:%02d:%02d.%03d", // 랩타임 저장
 8001d32:	4a24      	ldr	r2, [pc, #144]	@ (8001dc4 <laptimeTimeSave+0x10c>)
 8001d34:	3301      	adds	r3, #1
 8001d36:	011b      	lsls	r3, r3, #4
 8001d38:	4413      	add	r3, r2
 8001d3a:	3304      	adds	r3, #4
 8001d3c:	681c      	ldr	r4, [r3, #0]
				stopwatch.laptime.saveSpace[stopwatch.laptime.cnt].minute,
 8001d3e:	4b21      	ldr	r3, [pc, #132]	@ (8001dc4 <laptimeTimeSave+0x10c>)
 8001d40:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
		sprintf(stopwatch.laptime.buffer, "LP%d %02d:%02d:%02d.%03d", // 랩타임 저장
 8001d44:	4a1f      	ldr	r2, [pc, #124]	@ (8001dc4 <laptimeTimeSave+0x10c>)
 8001d46:	3301      	adds	r3, #1
 8001d48:	011b      	lsls	r3, r3, #4
 8001d4a:	4413      	add	r3, r2
 8001d4c:	3308      	adds	r3, #8
 8001d4e:	681b      	ldr	r3, [r3, #0]
				stopwatch.laptime.saveSpace[stopwatch.laptime.cnt].second,
 8001d50:	4a1c      	ldr	r2, [pc, #112]	@ (8001dc4 <laptimeTimeSave+0x10c>)
 8001d52:	f892 20a5 	ldrb.w	r2, [r2, #165]	@ 0xa5
		sprintf(stopwatch.laptime.buffer, "LP%d %02d:%02d:%02d.%03d", // 랩타임 저장
 8001d56:	491b      	ldr	r1, [pc, #108]	@ (8001dc4 <laptimeTimeSave+0x10c>)
 8001d58:	0112      	lsls	r2, r2, #4
 8001d5a:	440a      	add	r2, r1
 8001d5c:	321c      	adds	r2, #28
 8001d5e:	6812      	ldr	r2, [r2, #0]
				stopwatch.laptime.saveSpace[stopwatch.laptime.cnt].millisecond);
 8001d60:	4918      	ldr	r1, [pc, #96]	@ (8001dc4 <laptimeTimeSave+0x10c>)
 8001d62:	f891 10a5 	ldrb.w	r1, [r1, #165]	@ 0xa5
		sprintf(stopwatch.laptime.buffer, "LP%d %02d:%02d:%02d.%03d", // 랩타임 저장
 8001d66:	4d17      	ldr	r5, [pc, #92]	@ (8001dc4 <laptimeTimeSave+0x10c>)
 8001d68:	0109      	lsls	r1, r1, #4
 8001d6a:	4429      	add	r1, r5
 8001d6c:	3120      	adds	r1, #32
 8001d6e:	6809      	ldr	r1, [r1, #0]
 8001d70:	9102      	str	r1, [sp, #8]
 8001d72:	9201      	str	r2, [sp, #4]
 8001d74:	9300      	str	r3, [sp, #0]
 8001d76:	4623      	mov	r3, r4
 8001d78:	4602      	mov	r2, r0
 8001d7a:	4913      	ldr	r1, [pc, #76]	@ (8001dc8 <laptimeTimeSave+0x110>)
 8001d7c:	4813      	ldr	r0, [pc, #76]	@ (8001dcc <laptimeTimeSave+0x114>)
 8001d7e:	f002 fd6f 	bl	8004860 <siprintf>
		CLCD_Puts(0, 1, stopwatch.laptime.buffer); // 랩타임 출력
 8001d82:	4a12      	ldr	r2, [pc, #72]	@ (8001dcc <laptimeTimeSave+0x114>)
 8001d84:	2101      	movs	r1, #1
 8001d86:	2000      	movs	r0, #0
 8001d88:	f7ff fab6 	bl	80012f8 <CLCD_Puts>
		stopwatch.laptime.cnt++; // 카운트 증가
 8001d8c:	4b0d      	ldr	r3, [pc, #52]	@ (8001dc4 <laptimeTimeSave+0x10c>)
 8001d8e:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8001d92:	3301      	adds	r3, #1
 8001d94:	b2da      	uxtb	r2, r3
 8001d96:	4b0b      	ldr	r3, [pc, #44]	@ (8001dc4 <laptimeTimeSave+0x10c>)
 8001d98:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
	} else if(stopwatch.laptime.cnt >= 9) {

		CLCD_Puts(0, 1, "                ");
		CLCD_Puts(0, 1, "LAP FULL(9/9)");
	}
}
 8001d9c:	e00e      	b.n	8001dbc <laptimeTimeSave+0x104>
	} else if(stopwatch.laptime.cnt >= 9) {
 8001d9e:	4b09      	ldr	r3, [pc, #36]	@ (8001dc4 <laptimeTimeSave+0x10c>)
 8001da0:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8001da4:	2b08      	cmp	r3, #8
 8001da6:	d909      	bls.n	8001dbc <laptimeTimeSave+0x104>
		CLCD_Puts(0, 1, "                ");
 8001da8:	4a09      	ldr	r2, [pc, #36]	@ (8001dd0 <laptimeTimeSave+0x118>)
 8001daa:	2101      	movs	r1, #1
 8001dac:	2000      	movs	r0, #0
 8001dae:	f7ff faa3 	bl	80012f8 <CLCD_Puts>
		CLCD_Puts(0, 1, "LAP FULL(9/9)");
 8001db2:	4a08      	ldr	r2, [pc, #32]	@ (8001dd4 <laptimeTimeSave+0x11c>)
 8001db4:	2101      	movs	r1, #1
 8001db6:	2000      	movs	r0, #0
 8001db8:	f7ff fa9e 	bl	80012f8 <CLCD_Puts>
}
 8001dbc:	bf00      	nop
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bdb0      	pop	{r4, r5, r7, pc}
 8001dc2:	bf00      	nop
 8001dc4:	20000000 	.word	0x20000000
 8001dc8:	080051cc 	.word	0x080051cc
 8001dcc:	200000a7 	.word	0x200000a7
 8001dd0:	080051e8 	.word	0x080051e8
 8001dd4:	080051fc 	.word	0x080051fc

08001dd8 <laptimeTimeDisplay>:

void laptimeTimeDisplay() {
 8001dd8:	b5b0      	push	{r4, r5, r7, lr}
 8001dda:	b084      	sub	sp, #16
 8001ddc:	af04      	add	r7, sp, #16
	// CLCD 랩타임 출력 함수
	if(stopwatch.laptime.cnt > 0) {
 8001dde:	4b2d      	ldr	r3, [pc, #180]	@ (8001e94 <laptimeTimeDisplay+0xbc>)
 8001de0:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d048      	beq.n	8001e7a <laptimeTimeDisplay+0xa2>

		if(stopwatch.laptime.cnt <= stopwatch.laptime.displayCnt) {
 8001de8:	4b2a      	ldr	r3, [pc, #168]	@ (8001e94 <laptimeTimeDisplay+0xbc>)
 8001dea:	f893 20a5 	ldrb.w	r2, [r3, #165]	@ 0xa5
 8001dee:	4b29      	ldr	r3, [pc, #164]	@ (8001e94 <laptimeTimeDisplay+0xbc>)
 8001df0:	f893 30a6 	ldrb.w	r3, [r3, #166]	@ 0xa6
 8001df4:	429a      	cmp	r2, r3
 8001df6:	d803      	bhi.n	8001e00 <laptimeTimeDisplay+0x28>
			stopwatch.laptime.displayCnt = 0;
 8001df8:	4b26      	ldr	r3, [pc, #152]	@ (8001e94 <laptimeTimeDisplay+0xbc>)
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	f883 20a6 	strb.w	r2, [r3, #166]	@ 0xa6
		}

		sprintf(stopwatch.laptime.buffer, "%d/9 %02d:%02d:%02d.%03d",
				(stopwatch.laptime.displayCnt + 1),
 8001e00:	4b24      	ldr	r3, [pc, #144]	@ (8001e94 <laptimeTimeDisplay+0xbc>)
 8001e02:	f893 30a6 	ldrb.w	r3, [r3, #166]	@ 0xa6
		sprintf(stopwatch.laptime.buffer, "%d/9 %02d:%02d:%02d.%03d",
 8001e06:	1c58      	adds	r0, r3, #1
				stopwatch.laptime.saveSpace[stopwatch.laptime.displayCnt].hour,
 8001e08:	4b22      	ldr	r3, [pc, #136]	@ (8001e94 <laptimeTimeDisplay+0xbc>)
 8001e0a:	f893 30a6 	ldrb.w	r3, [r3, #166]	@ 0xa6
		sprintf(stopwatch.laptime.buffer, "%d/9 %02d:%02d:%02d.%03d",
 8001e0e:	4a21      	ldr	r2, [pc, #132]	@ (8001e94 <laptimeTimeDisplay+0xbc>)
 8001e10:	3301      	adds	r3, #1
 8001e12:	011b      	lsls	r3, r3, #4
 8001e14:	4413      	add	r3, r2
 8001e16:	3304      	adds	r3, #4
 8001e18:	681c      	ldr	r4, [r3, #0]
				stopwatch.laptime.saveSpace[stopwatch.laptime.displayCnt].minute,
 8001e1a:	4b1e      	ldr	r3, [pc, #120]	@ (8001e94 <laptimeTimeDisplay+0xbc>)
 8001e1c:	f893 30a6 	ldrb.w	r3, [r3, #166]	@ 0xa6
		sprintf(stopwatch.laptime.buffer, "%d/9 %02d:%02d:%02d.%03d",
 8001e20:	4a1c      	ldr	r2, [pc, #112]	@ (8001e94 <laptimeTimeDisplay+0xbc>)
 8001e22:	3301      	adds	r3, #1
 8001e24:	011b      	lsls	r3, r3, #4
 8001e26:	4413      	add	r3, r2
 8001e28:	3308      	adds	r3, #8
 8001e2a:	681b      	ldr	r3, [r3, #0]
				stopwatch.laptime.saveSpace[stopwatch.laptime.displayCnt].second,
 8001e2c:	4a19      	ldr	r2, [pc, #100]	@ (8001e94 <laptimeTimeDisplay+0xbc>)
 8001e2e:	f892 20a6 	ldrb.w	r2, [r2, #166]	@ 0xa6
		sprintf(stopwatch.laptime.buffer, "%d/9 %02d:%02d:%02d.%03d",
 8001e32:	4918      	ldr	r1, [pc, #96]	@ (8001e94 <laptimeTimeDisplay+0xbc>)
 8001e34:	0112      	lsls	r2, r2, #4
 8001e36:	440a      	add	r2, r1
 8001e38:	321c      	adds	r2, #28
 8001e3a:	6812      	ldr	r2, [r2, #0]
				stopwatch.laptime.saveSpace[stopwatch.laptime.displayCnt].millisecond);
 8001e3c:	4915      	ldr	r1, [pc, #84]	@ (8001e94 <laptimeTimeDisplay+0xbc>)
 8001e3e:	f891 10a6 	ldrb.w	r1, [r1, #166]	@ 0xa6
		sprintf(stopwatch.laptime.buffer, "%d/9 %02d:%02d:%02d.%03d",
 8001e42:	4d14      	ldr	r5, [pc, #80]	@ (8001e94 <laptimeTimeDisplay+0xbc>)
 8001e44:	0109      	lsls	r1, r1, #4
 8001e46:	4429      	add	r1, r5
 8001e48:	3120      	adds	r1, #32
 8001e4a:	6809      	ldr	r1, [r1, #0]
 8001e4c:	9102      	str	r1, [sp, #8]
 8001e4e:	9201      	str	r2, [sp, #4]
 8001e50:	9300      	str	r3, [sp, #0]
 8001e52:	4623      	mov	r3, r4
 8001e54:	4602      	mov	r2, r0
 8001e56:	4910      	ldr	r1, [pc, #64]	@ (8001e98 <laptimeTimeDisplay+0xc0>)
 8001e58:	4810      	ldr	r0, [pc, #64]	@ (8001e9c <laptimeTimeDisplay+0xc4>)
 8001e5a:	f002 fd01 	bl	8004860 <siprintf>

		CLCD_Puts(0, 1,stopwatch.laptime.buffer);
 8001e5e:	4a0f      	ldr	r2, [pc, #60]	@ (8001e9c <laptimeTimeDisplay+0xc4>)
 8001e60:	2101      	movs	r1, #1
 8001e62:	2000      	movs	r0, #0
 8001e64:	f7ff fa48 	bl	80012f8 <CLCD_Puts>

		stopwatch.laptime.displayCnt++;
 8001e68:	4b0a      	ldr	r3, [pc, #40]	@ (8001e94 <laptimeTimeDisplay+0xbc>)
 8001e6a:	f893 30a6 	ldrb.w	r3, [r3, #166]	@ 0xa6
 8001e6e:	3301      	adds	r3, #1
 8001e70:	b2da      	uxtb	r2, r3
 8001e72:	4b08      	ldr	r3, [pc, #32]	@ (8001e94 <laptimeTimeDisplay+0xbc>)
 8001e74:	f883 20a6 	strb.w	r2, [r3, #166]	@ 0xa6
	} else {
		CLCD_Puts(0, 1, "                ");
		CLCD_Puts(0, 1, "NO LAP");
	}

}
 8001e78:	e009      	b.n	8001e8e <laptimeTimeDisplay+0xb6>
		CLCD_Puts(0, 1, "                ");
 8001e7a:	4a09      	ldr	r2, [pc, #36]	@ (8001ea0 <laptimeTimeDisplay+0xc8>)
 8001e7c:	2101      	movs	r1, #1
 8001e7e:	2000      	movs	r0, #0
 8001e80:	f7ff fa3a 	bl	80012f8 <CLCD_Puts>
		CLCD_Puts(0, 1, "NO LAP");
 8001e84:	4a07      	ldr	r2, [pc, #28]	@ (8001ea4 <laptimeTimeDisplay+0xcc>)
 8001e86:	2101      	movs	r1, #1
 8001e88:	2000      	movs	r0, #0
 8001e8a:	f7ff fa35 	bl	80012f8 <CLCD_Puts>
}
 8001e8e:	bf00      	nop
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bdb0      	pop	{r4, r5, r7, pc}
 8001e94:	20000000 	.word	0x20000000
 8001e98:	0800520c 	.word	0x0800520c
 8001e9c:	200000a7 	.word	0x200000a7
 8001ea0:	080051e8 	.word	0x080051e8
 8001ea4:	08005228 	.word	0x08005228

08001ea8 <clcdStopWatchClear>:

void clcdStopWatchClear() {
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b082      	sub	sp, #8
 8001eac:	af00      	add	r7, sp, #0
	// CLCD 스탑워치 초기화 함수
	for(int i = 0; i < 9; i++) {
 8001eae:	2300      	movs	r3, #0
 8001eb0:	607b      	str	r3, [r7, #4]
 8001eb2:	e020      	b.n	8001ef6 <clcdStopWatchClear+0x4e>
		stopwatch.laptime.saveSpace[i].hour = 0;
 8001eb4:	4a1b      	ldr	r2, [pc, #108]	@ (8001f24 <clcdStopWatchClear+0x7c>)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	3301      	adds	r3, #1
 8001eba:	011b      	lsls	r3, r3, #4
 8001ebc:	4413      	add	r3, r2
 8001ebe:	3304      	adds	r3, #4
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	601a      	str	r2, [r3, #0]
		stopwatch.laptime.saveSpace[i].minute = 0;
 8001ec4:	4a17      	ldr	r2, [pc, #92]	@ (8001f24 <clcdStopWatchClear+0x7c>)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	3301      	adds	r3, #1
 8001eca:	011b      	lsls	r3, r3, #4
 8001ecc:	4413      	add	r3, r2
 8001ece:	3308      	adds	r3, #8
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	601a      	str	r2, [r3, #0]
		stopwatch.laptime.saveSpace[i].second = 0;
 8001ed4:	4a13      	ldr	r2, [pc, #76]	@ (8001f24 <clcdStopWatchClear+0x7c>)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	011b      	lsls	r3, r3, #4
 8001eda:	4413      	add	r3, r2
 8001edc:	331c      	adds	r3, #28
 8001ede:	2200      	movs	r2, #0
 8001ee0:	601a      	str	r2, [r3, #0]
		stopwatch.laptime.saveSpace[i].millisecond = 0;
 8001ee2:	4a10      	ldr	r2, [pc, #64]	@ (8001f24 <clcdStopWatchClear+0x7c>)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	011b      	lsls	r3, r3, #4
 8001ee8:	4413      	add	r3, r2
 8001eea:	3320      	adds	r3, #32
 8001eec:	2200      	movs	r2, #0
 8001eee:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < 9; i++) {
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	3301      	adds	r3, #1
 8001ef4:	607b      	str	r3, [r7, #4]
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2b08      	cmp	r3, #8
 8001efa:	dddb      	ble.n	8001eb4 <clcdStopWatchClear+0xc>
	}
	stopwatch.laptime.cnt = 0;
 8001efc:	4b09      	ldr	r3, [pc, #36]	@ (8001f24 <clcdStopWatchClear+0x7c>)
 8001efe:	2200      	movs	r2, #0
 8001f00:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
	stopwatch.laptime.displayCnt = 0;
 8001f04:	4b07      	ldr	r3, [pc, #28]	@ (8001f24 <clcdStopWatchClear+0x7c>)
 8001f06:	2200      	movs	r2, #0
 8001f08:	f883 20a6 	strb.w	r2, [r3, #166]	@ 0xa6
	CLCD_Clear();
 8001f0c:	f7ff fa3b 	bl	8001386 <CLCD_Clear>
	CLCD_Puts(0, 0, CLCD_DEFAULT);
 8001f10:	4a05      	ldr	r2, [pc, #20]	@ (8001f28 <clcdStopWatchClear+0x80>)
 8001f12:	2100      	movs	r1, #0
 8001f14:	2000      	movs	r0, #0
 8001f16:	f7ff f9ef 	bl	80012f8 <CLCD_Puts>
}
 8001f1a:	bf00      	nop
 8001f1c:	3708      	adds	r7, #8
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}
 8001f22:	bf00      	nop
 8001f24:	20000000 	.word	0x20000000
 8001f28:	08005230 	.word	0x08005230

08001f2c <clcdStopWatchMeasure>:

void clcdStopWatchMeasure() {
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b082      	sub	sp, #8
 8001f30:	af02      	add	r7, sp, #8
	// CLCD 스탑워치 출력함수
	if(stopwatch.laptime.decimalPoint == TRUE) {
 8001f32:	4b17      	ldr	r3, [pc, #92]	@ (8001f90 <clcdStopWatchMeasure+0x64>)
 8001f34:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 8001f38:	2b01      	cmp	r3, #1
 8001f3a:	d110      	bne.n	8001f5e <clcdStopWatchMeasure+0x32>
		sprintf(stopwatch.laptime.buffer, "STW %02d:%02d:%02d.%03d",
 8001f3c:	4b14      	ldr	r3, [pc, #80]	@ (8001f90 <clcdStopWatchMeasure+0x64>)
 8001f3e:	6859      	ldr	r1, [r3, #4]
 8001f40:	4b13      	ldr	r3, [pc, #76]	@ (8001f90 <clcdStopWatchMeasure+0x64>)
 8001f42:	6898      	ldr	r0, [r3, #8]
 8001f44:	4b12      	ldr	r3, [pc, #72]	@ (8001f90 <clcdStopWatchMeasure+0x64>)
 8001f46:	68db      	ldr	r3, [r3, #12]
 8001f48:	4a11      	ldr	r2, [pc, #68]	@ (8001f90 <clcdStopWatchMeasure+0x64>)
 8001f4a:	6912      	ldr	r2, [r2, #16]
 8001f4c:	9201      	str	r2, [sp, #4]
 8001f4e:	9300      	str	r3, [sp, #0]
 8001f50:	4603      	mov	r3, r0
 8001f52:	460a      	mov	r2, r1
 8001f54:	490f      	ldr	r1, [pc, #60]	@ (8001f94 <clcdStopWatchMeasure+0x68>)
 8001f56:	4810      	ldr	r0, [pc, #64]	@ (8001f98 <clcdStopWatchMeasure+0x6c>)
 8001f58:	f002 fc82 	bl	8004860 <siprintf>
 8001f5c:	e00f      	b.n	8001f7e <clcdStopWatchMeasure+0x52>
					stopwatch.time.hour, stopwatch.time.minute,
					stopwatch.time.second, stopwatch.time.millisecond);
	} else {
		sprintf(stopwatch.laptime.buffer, "STW %02d:%02d:%02d %03d",
 8001f5e:	4b0c      	ldr	r3, [pc, #48]	@ (8001f90 <clcdStopWatchMeasure+0x64>)
 8001f60:	6859      	ldr	r1, [r3, #4]
 8001f62:	4b0b      	ldr	r3, [pc, #44]	@ (8001f90 <clcdStopWatchMeasure+0x64>)
 8001f64:	6898      	ldr	r0, [r3, #8]
 8001f66:	4b0a      	ldr	r3, [pc, #40]	@ (8001f90 <clcdStopWatchMeasure+0x64>)
 8001f68:	68db      	ldr	r3, [r3, #12]
 8001f6a:	4a09      	ldr	r2, [pc, #36]	@ (8001f90 <clcdStopWatchMeasure+0x64>)
 8001f6c:	6912      	ldr	r2, [r2, #16]
 8001f6e:	9201      	str	r2, [sp, #4]
 8001f70:	9300      	str	r3, [sp, #0]
 8001f72:	4603      	mov	r3, r0
 8001f74:	460a      	mov	r2, r1
 8001f76:	4909      	ldr	r1, [pc, #36]	@ (8001f9c <clcdStopWatchMeasure+0x70>)
 8001f78:	4807      	ldr	r0, [pc, #28]	@ (8001f98 <clcdStopWatchMeasure+0x6c>)
 8001f7a:	f002 fc71 	bl	8004860 <siprintf>
					stopwatch.time.hour, stopwatch.time.minute,
					stopwatch.time.second, stopwatch.time.millisecond);
	}
	CLCD_Puts(0, 0, stopwatch.laptime.buffer);
 8001f7e:	4a06      	ldr	r2, [pc, #24]	@ (8001f98 <clcdStopWatchMeasure+0x6c>)
 8001f80:	2100      	movs	r1, #0
 8001f82:	2000      	movs	r0, #0
 8001f84:	f7ff f9b8 	bl	80012f8 <CLCD_Puts>
}
 8001f88:	bf00      	nop
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd80      	pop	{r7, pc}
 8001f8e:	bf00      	nop
 8001f90:	20000000 	.word	0x20000000
 8001f94:	08005244 	.word	0x08005244
 8001f98:	200000a7 	.word	0x200000a7
 8001f9c:	0800525c 	.word	0x0800525c

08001fa0 <sw2StopWatchControll>:

void sw2StopWatchControll() {
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	af00      	add	r7, sp, #0
	// SW2 PC15, PD13
	// 스탑워치 시작, 일시정지, 재개 함수
	if (PC15.state == TRUE) {
 8001fa4:	4b16      	ldr	r3, [pc, #88]	@ (8002000 <sw2StopWatchControll+0x60>)
 8001fa6:	781b      	ldrb	r3, [r3, #0]
 8001fa8:	2b01      	cmp	r3, #1
 8001faa:	d119      	bne.n	8001fe0 <sw2StopWatchControll+0x40>

		switch(stopwatch.state) {
 8001fac:	4b15      	ldr	r3, [pc, #84]	@ (8002004 <sw2StopWatchControll+0x64>)
 8001fae:	781b      	ldrb	r3, [r3, #0]
 8001fb0:	2b02      	cmp	r3, #2
 8001fb2:	d006      	beq.n	8001fc2 <sw2StopWatchControll+0x22>
 8001fb4:	2b02      	cmp	r3, #2
 8001fb6:	dc0b      	bgt.n	8001fd0 <sw2StopWatchControll+0x30>
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d008      	beq.n	8001fce <sw2StopWatchControll+0x2e>
 8001fbc:	2b01      	cmp	r3, #1
 8001fbe:	d003      	beq.n	8001fc8 <sw2StopWatchControll+0x28>
 8001fc0:	e006      	b.n	8001fd0 <sw2StopWatchControll+0x30>
		case STOP: timerReset();
 8001fc2:	f7ff fde9 	bl	8001b98 <timerReset>
			break;
 8001fc6:	e003      	b.n	8001fd0 <sw2StopWatchControll+0x30>
		case PAUSE: timerResum();
 8001fc8:	f7ff fe18 	bl	8001bfc <timerResum>
			break;
 8001fcc:	e000      	b.n	8001fd0 <sw2StopWatchControll+0x30>
		case RUN:
			break;
 8001fce:	bf00      	nop
		}
		stopwatch.state = RUN;
 8001fd0:	4b0c      	ldr	r3, [pc, #48]	@ (8002004 <sw2StopWatchControll+0x64>)
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	701a      	strb	r2, [r3, #0]
		segUpCount();
 8001fd6:	f7ff fd97 	bl	8001b08 <segUpCount>
		clcdStopWatchMeasure();
 8001fda:	f7ff ffa7 	bl	8001f2c <clcdStopWatchMeasure>
	} else if(PC15.state == FALSE && stopwatch.state == RUN) {
		stopwatch.state = PAUSE;
		timerPaused();
	}
}
 8001fde:	e00c      	b.n	8001ffa <sw2StopWatchControll+0x5a>
	} else if(PC15.state == FALSE && stopwatch.state == RUN) {
 8001fe0:	4b07      	ldr	r3, [pc, #28]	@ (8002000 <sw2StopWatchControll+0x60>)
 8001fe2:	781b      	ldrb	r3, [r3, #0]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d108      	bne.n	8001ffa <sw2StopWatchControll+0x5a>
 8001fe8:	4b06      	ldr	r3, [pc, #24]	@ (8002004 <sw2StopWatchControll+0x64>)
 8001fea:	781b      	ldrb	r3, [r3, #0]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d104      	bne.n	8001ffa <sw2StopWatchControll+0x5a>
		stopwatch.state = PAUSE;
 8001ff0:	4b04      	ldr	r3, [pc, #16]	@ (8002004 <sw2StopWatchControll+0x64>)
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	701a      	strb	r2, [r3, #0]
		timerPaused();
 8001ff6:	f7ff fde5 	bl	8001bc4 <timerPaused>
}
 8001ffa:	bf00      	nop
 8001ffc:	bd80      	pop	{r7, pc}
 8001ffe:	bf00      	nop
 8002000:	200001d4 	.word	0x200001d4
 8002004:	20000000 	.word	0x20000000

08002008 <sw3StopWatchReset>:

void sw3StopWatchReset() {
 8002008:	b580      	push	{r7, lr}
 800200a:	af00      	add	r7, sp, #0
	// SW3 PD4, PD14
	// 스탑워치리셋, 랩타임저장, CLCD초기화 함수
	if(PD4.state) {
 800200c:	4b20      	ldr	r3, [pc, #128]	@ (8002090 <sw3StopWatchReset+0x88>)
 800200e:	781b      	ldrb	r3, [r3, #0]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d032      	beq.n	800207a <sw3StopWatchReset+0x72>

		switch(stopwatch.state) {
 8002014:	4b1f      	ldr	r3, [pc, #124]	@ (8002094 <sw3StopWatchReset+0x8c>)
 8002016:	781b      	ldrb	r3, [r3, #0]
 8002018:	2b02      	cmp	r3, #2
 800201a:	d006      	beq.n	800202a <sw3StopWatchReset+0x22>
 800201c:	2b02      	cmp	r3, #2
 800201e:	dc35      	bgt.n	800208c <sw3StopWatchReset+0x84>
 8002020:	2b00      	cmp	r3, #0
 8002022:	d020      	beq.n	8002066 <sw3StopWatchReset+0x5e>
 8002024:	2b01      	cmp	r3, #1
 8002026:	d00f      	beq.n	8002048 <sw3StopWatchReset+0x40>
			break;
		}
	} else {
		PD4.flag = 0;
	}
}
 8002028:	e030      	b.n	800208c <sw3StopWatchReset+0x84>
			if (PD4.flag == FALSE) {
 800202a:	4b19      	ldr	r3, [pc, #100]	@ (8002090 <sw3StopWatchReset+0x88>)
 800202c:	785b      	ldrb	r3, [r3, #1]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d127      	bne.n	8002082 <sw3StopWatchReset+0x7a>
				stopwatch.state = STOP;
 8002032:	4b18      	ldr	r3, [pc, #96]	@ (8002094 <sw3StopWatchReset+0x8c>)
 8002034:	2202      	movs	r2, #2
 8002036:	701a      	strb	r2, [r3, #0]
				segReset();
 8002038:	f7ff fda0 	bl	8001b7c <segReset>
				clcdStopWatchClear();
 800203c:	f7ff ff34 	bl	8001ea8 <clcdStopWatchClear>
				PD4.flag = 1;
 8002040:	4b13      	ldr	r3, [pc, #76]	@ (8002090 <sw3StopWatchReset+0x88>)
 8002042:	2201      	movs	r2, #1
 8002044:	705a      	strb	r2, [r3, #1]
			break;
 8002046:	e01c      	b.n	8002082 <sw3StopWatchReset+0x7a>
			if (PD4.flag == FALSE) {
 8002048:	4b11      	ldr	r3, [pc, #68]	@ (8002090 <sw3StopWatchReset+0x88>)
 800204a:	785b      	ldrb	r3, [r3, #1]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d11a      	bne.n	8002086 <sw3StopWatchReset+0x7e>
				stopwatch.state = STOP;
 8002050:	4b10      	ldr	r3, [pc, #64]	@ (8002094 <sw3StopWatchReset+0x8c>)
 8002052:	2202      	movs	r2, #2
 8002054:	701a      	strb	r2, [r3, #0]
				segReset();
 8002056:	f7ff fd91 	bl	8001b7c <segReset>
				clcdStopWatchClear();
 800205a:	f7ff ff25 	bl	8001ea8 <clcdStopWatchClear>
				PD4.flag = 1;
 800205e:	4b0c      	ldr	r3, [pc, #48]	@ (8002090 <sw3StopWatchReset+0x88>)
 8002060:	2201      	movs	r2, #1
 8002062:	705a      	strb	r2, [r3, #1]
			break;
 8002064:	e00f      	b.n	8002086 <sw3StopWatchReset+0x7e>
			if(PD4.flag == FALSE) {
 8002066:	4b0a      	ldr	r3, [pc, #40]	@ (8002090 <sw3StopWatchReset+0x88>)
 8002068:	785b      	ldrb	r3, [r3, #1]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d10d      	bne.n	800208a <sw3StopWatchReset+0x82>
				laptimeTimeSave();
 800206e:	f7ff fe23 	bl	8001cb8 <laptimeTimeSave>
				PD4.flag = 1;
 8002072:	4b07      	ldr	r3, [pc, #28]	@ (8002090 <sw3StopWatchReset+0x88>)
 8002074:	2201      	movs	r2, #1
 8002076:	705a      	strb	r2, [r3, #1]
			break;
 8002078:	e007      	b.n	800208a <sw3StopWatchReset+0x82>
		PD4.flag = 0;
 800207a:	4b05      	ldr	r3, [pc, #20]	@ (8002090 <sw3StopWatchReset+0x88>)
 800207c:	2200      	movs	r2, #0
 800207e:	705a      	strb	r2, [r3, #1]
}
 8002080:	e004      	b.n	800208c <sw3StopWatchReset+0x84>
			break;
 8002082:	bf00      	nop
 8002084:	e002      	b.n	800208c <sw3StopWatchReset+0x84>
			break;
 8002086:	bf00      	nop
 8002088:	e000      	b.n	800208c <sw3StopWatchReset+0x84>
			break;
 800208a:	bf00      	nop
}
 800208c:	bf00      	nop
 800208e:	bd80      	pop	{r7, pc}
 8002090:	200001d8 	.word	0x200001d8
 8002094:	20000000 	.word	0x20000000

08002098 <sw4LaptimeDisplay>:

void sw4LaptimeDisplay() {
 8002098:	b580      	push	{r7, lr}
 800209a:	af00      	add	r7, sp, #0
	// SW4 PD10, PC6
	if(PD10.state == TRUE) {
 800209c:	4b09      	ldr	r3, [pc, #36]	@ (80020c4 <sw4LaptimeDisplay+0x2c>)
 800209e:	781b      	ldrb	r3, [r3, #0]
 80020a0:	2b01      	cmp	r3, #1
 80020a2:	d109      	bne.n	80020b8 <sw4LaptimeDisplay+0x20>
		if(PD10.flag == FALSE) {
 80020a4:	4b07      	ldr	r3, [pc, #28]	@ (80020c4 <sw4LaptimeDisplay+0x2c>)
 80020a6:	785b      	ldrb	r3, [r3, #1]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d108      	bne.n	80020be <sw4LaptimeDisplay+0x26>
			laptimeTimeDisplay();
 80020ac:	f7ff fe94 	bl	8001dd8 <laptimeTimeDisplay>
			PD10.flag = 1;
 80020b0:	4b04      	ldr	r3, [pc, #16]	@ (80020c4 <sw4LaptimeDisplay+0x2c>)
 80020b2:	2201      	movs	r2, #1
 80020b4:	705a      	strb	r2, [r3, #1]
		}
	} else {
		PD10.flag = 0;
	}
}
 80020b6:	e002      	b.n	80020be <sw4LaptimeDisplay+0x26>
		PD10.flag = 0;
 80020b8:	4b02      	ldr	r3, [pc, #8]	@ (80020c4 <sw4LaptimeDisplay+0x2c>)
 80020ba:	2200      	movs	r2, #0
 80020bc:	705a      	strb	r2, [r3, #1]
}
 80020be:	bf00      	nop
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	bf00      	nop
 80020c4:	200001dc 	.word	0x200001dc

080020c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b086      	sub	sp, #24
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80020d0:	4a14      	ldr	r2, [pc, #80]	@ (8002124 <_sbrk+0x5c>)
 80020d2:	4b15      	ldr	r3, [pc, #84]	@ (8002128 <_sbrk+0x60>)
 80020d4:	1ad3      	subs	r3, r2, r3
 80020d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80020d8:	697b      	ldr	r3, [r7, #20]
 80020da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80020dc:	4b13      	ldr	r3, [pc, #76]	@ (800212c <_sbrk+0x64>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d102      	bne.n	80020ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80020e4:	4b11      	ldr	r3, [pc, #68]	@ (800212c <_sbrk+0x64>)
 80020e6:	4a12      	ldr	r2, [pc, #72]	@ (8002130 <_sbrk+0x68>)
 80020e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80020ea:	4b10      	ldr	r3, [pc, #64]	@ (800212c <_sbrk+0x64>)
 80020ec:	681a      	ldr	r2, [r3, #0]
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	4413      	add	r3, r2
 80020f2:	693a      	ldr	r2, [r7, #16]
 80020f4:	429a      	cmp	r2, r3
 80020f6:	d207      	bcs.n	8002108 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80020f8:	f002 fbda 	bl	80048b0 <__errno>
 80020fc:	4603      	mov	r3, r0
 80020fe:	220c      	movs	r2, #12
 8002100:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002102:	f04f 33ff 	mov.w	r3, #4294967295
 8002106:	e009      	b.n	800211c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002108:	4b08      	ldr	r3, [pc, #32]	@ (800212c <_sbrk+0x64>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800210e:	4b07      	ldr	r3, [pc, #28]	@ (800212c <_sbrk+0x64>)
 8002110:	681a      	ldr	r2, [r3, #0]
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	4413      	add	r3, r2
 8002116:	4a05      	ldr	r2, [pc, #20]	@ (800212c <_sbrk+0x64>)
 8002118:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800211a:	68fb      	ldr	r3, [r7, #12]
}
 800211c:	4618      	mov	r0, r3
 800211e:	3718      	adds	r7, #24
 8002120:	46bd      	mov	sp, r7
 8002122:	bd80      	pop	{r7, pc}
 8002124:	20020000 	.word	0x20020000
 8002128:	00000400 	.word	0x00000400
 800212c:	200001e0 	.word	0x200001e0
 8002130:	20000338 	.word	0x20000338

08002134 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002134:	b480      	push	{r7}
 8002136:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002138:	4b06      	ldr	r3, [pc, #24]	@ (8002154 <SystemInit+0x20>)
 800213a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800213e:	4a05      	ldr	r2, [pc, #20]	@ (8002154 <SystemInit+0x20>)
 8002140:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002144:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002148:	bf00      	nop
 800214a:	46bd      	mov	sp, r7
 800214c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002150:	4770      	bx	lr
 8002152:	bf00      	nop
 8002154:	e000ed00 	.word	0xe000ed00

08002158 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002158:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002190 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800215c:	f7ff ffea 	bl	8002134 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002160:	480c      	ldr	r0, [pc, #48]	@ (8002194 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002162:	490d      	ldr	r1, [pc, #52]	@ (8002198 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002164:	4a0d      	ldr	r2, [pc, #52]	@ (800219c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002166:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002168:	e002      	b.n	8002170 <LoopCopyDataInit>

0800216a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800216a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800216c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800216e:	3304      	adds	r3, #4

08002170 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002170:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002172:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002174:	d3f9      	bcc.n	800216a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002176:	4a0a      	ldr	r2, [pc, #40]	@ (80021a0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002178:	4c0a      	ldr	r4, [pc, #40]	@ (80021a4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800217a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800217c:	e001      	b.n	8002182 <LoopFillZerobss>

0800217e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800217e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002180:	3204      	adds	r2, #4

08002182 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002182:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002184:	d3fb      	bcc.n	800217e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002186:	f002 fb99 	bl	80048bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800218a:	f7ff f907 	bl	800139c <main>
  bx  lr    
 800218e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002190:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002194:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002198:	20000118 	.word	0x20000118
  ldr r2, =_sidata
 800219c:	080052d0 	.word	0x080052d0
  ldr r2, =_sbss
 80021a0:	20000118 	.word	0x20000118
  ldr r4, =_ebss
 80021a4:	20000334 	.word	0x20000334

080021a8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80021a8:	e7fe      	b.n	80021a8 <ADC_IRQHandler>
	...

080021ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80021b0:	4b0e      	ldr	r3, [pc, #56]	@ (80021ec <HAL_Init+0x40>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a0d      	ldr	r2, [pc, #52]	@ (80021ec <HAL_Init+0x40>)
 80021b6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80021ba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80021bc:	4b0b      	ldr	r3, [pc, #44]	@ (80021ec <HAL_Init+0x40>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a0a      	ldr	r2, [pc, #40]	@ (80021ec <HAL_Init+0x40>)
 80021c2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80021c6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80021c8:	4b08      	ldr	r3, [pc, #32]	@ (80021ec <HAL_Init+0x40>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4a07      	ldr	r2, [pc, #28]	@ (80021ec <HAL_Init+0x40>)
 80021ce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80021d2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021d4:	2003      	movs	r0, #3
 80021d6:	f000 f94f 	bl	8002478 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80021da:	200f      	movs	r0, #15
 80021dc:	f000 f808 	bl	80021f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80021e0:	f7ff fba2 	bl	8001928 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80021e4:	2300      	movs	r3, #0
}
 80021e6:	4618      	mov	r0, r3
 80021e8:	bd80      	pop	{r7, pc}
 80021ea:	bf00      	nop
 80021ec:	40023c00 	.word	0x40023c00

080021f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b082      	sub	sp, #8
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80021f8:	4b12      	ldr	r3, [pc, #72]	@ (8002244 <HAL_InitTick+0x54>)
 80021fa:	681a      	ldr	r2, [r3, #0]
 80021fc:	4b12      	ldr	r3, [pc, #72]	@ (8002248 <HAL_InitTick+0x58>)
 80021fe:	781b      	ldrb	r3, [r3, #0]
 8002200:	4619      	mov	r1, r3
 8002202:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002206:	fbb3 f3f1 	udiv	r3, r3, r1
 800220a:	fbb2 f3f3 	udiv	r3, r2, r3
 800220e:	4618      	mov	r0, r3
 8002210:	f000 f967 	bl	80024e2 <HAL_SYSTICK_Config>
 8002214:	4603      	mov	r3, r0
 8002216:	2b00      	cmp	r3, #0
 8002218:	d001      	beq.n	800221e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800221a:	2301      	movs	r3, #1
 800221c:	e00e      	b.n	800223c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2b0f      	cmp	r3, #15
 8002222:	d80a      	bhi.n	800223a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002224:	2200      	movs	r2, #0
 8002226:	6879      	ldr	r1, [r7, #4]
 8002228:	f04f 30ff 	mov.w	r0, #4294967295
 800222c:	f000 f92f 	bl	800248e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002230:	4a06      	ldr	r2, [pc, #24]	@ (800224c <HAL_InitTick+0x5c>)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002236:	2300      	movs	r3, #0
 8002238:	e000      	b.n	800223c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800223a:	2301      	movs	r3, #1
}
 800223c:	4618      	mov	r0, r3
 800223e:	3708      	adds	r7, #8
 8002240:	46bd      	mov	sp, r7
 8002242:	bd80      	pop	{r7, pc}
 8002244:	200000bc 	.word	0x200000bc
 8002248:	200000c4 	.word	0x200000c4
 800224c:	200000c0 	.word	0x200000c0

08002250 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002250:	b480      	push	{r7}
 8002252:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002254:	4b06      	ldr	r3, [pc, #24]	@ (8002270 <HAL_IncTick+0x20>)
 8002256:	781b      	ldrb	r3, [r3, #0]
 8002258:	461a      	mov	r2, r3
 800225a:	4b06      	ldr	r3, [pc, #24]	@ (8002274 <HAL_IncTick+0x24>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4413      	add	r3, r2
 8002260:	4a04      	ldr	r2, [pc, #16]	@ (8002274 <HAL_IncTick+0x24>)
 8002262:	6013      	str	r3, [r2, #0]
}
 8002264:	bf00      	nop
 8002266:	46bd      	mov	sp, r7
 8002268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226c:	4770      	bx	lr
 800226e:	bf00      	nop
 8002270:	200000c4 	.word	0x200000c4
 8002274:	200001e8 	.word	0x200001e8

08002278 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002278:	b480      	push	{r7}
 800227a:	af00      	add	r7, sp, #0
  return uwTick;
 800227c:	4b03      	ldr	r3, [pc, #12]	@ (800228c <HAL_GetTick+0x14>)
 800227e:	681b      	ldr	r3, [r3, #0]
}
 8002280:	4618      	mov	r0, r3
 8002282:	46bd      	mov	sp, r7
 8002284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002288:	4770      	bx	lr
 800228a:	bf00      	nop
 800228c:	200001e8 	.word	0x200001e8

08002290 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b084      	sub	sp, #16
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002298:	f7ff ffee 	bl	8002278 <HAL_GetTick>
 800229c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022a8:	d005      	beq.n	80022b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80022aa:	4b0a      	ldr	r3, [pc, #40]	@ (80022d4 <HAL_Delay+0x44>)
 80022ac:	781b      	ldrb	r3, [r3, #0]
 80022ae:	461a      	mov	r2, r3
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	4413      	add	r3, r2
 80022b4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80022b6:	bf00      	nop
 80022b8:	f7ff ffde 	bl	8002278 <HAL_GetTick>
 80022bc:	4602      	mov	r2, r0
 80022be:	68bb      	ldr	r3, [r7, #8]
 80022c0:	1ad3      	subs	r3, r2, r3
 80022c2:	68fa      	ldr	r2, [r7, #12]
 80022c4:	429a      	cmp	r2, r3
 80022c6:	d8f7      	bhi.n	80022b8 <HAL_Delay+0x28>
  {
  }
}
 80022c8:	bf00      	nop
 80022ca:	bf00      	nop
 80022cc:	3710      	adds	r7, #16
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	bf00      	nop
 80022d4:	200000c4 	.word	0x200000c4

080022d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022d8:	b480      	push	{r7}
 80022da:	b085      	sub	sp, #20
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	f003 0307 	and.w	r3, r3, #7
 80022e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022e8:	4b0c      	ldr	r3, [pc, #48]	@ (800231c <__NVIC_SetPriorityGrouping+0x44>)
 80022ea:	68db      	ldr	r3, [r3, #12]
 80022ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022ee:	68ba      	ldr	r2, [r7, #8]
 80022f0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80022f4:	4013      	ands	r3, r2
 80022f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022fc:	68bb      	ldr	r3, [r7, #8]
 80022fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002300:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002304:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002308:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800230a:	4a04      	ldr	r2, [pc, #16]	@ (800231c <__NVIC_SetPriorityGrouping+0x44>)
 800230c:	68bb      	ldr	r3, [r7, #8]
 800230e:	60d3      	str	r3, [r2, #12]
}
 8002310:	bf00      	nop
 8002312:	3714      	adds	r7, #20
 8002314:	46bd      	mov	sp, r7
 8002316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231a:	4770      	bx	lr
 800231c:	e000ed00 	.word	0xe000ed00

08002320 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002320:	b480      	push	{r7}
 8002322:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002324:	4b04      	ldr	r3, [pc, #16]	@ (8002338 <__NVIC_GetPriorityGrouping+0x18>)
 8002326:	68db      	ldr	r3, [r3, #12]
 8002328:	0a1b      	lsrs	r3, r3, #8
 800232a:	f003 0307 	and.w	r3, r3, #7
}
 800232e:	4618      	mov	r0, r3
 8002330:	46bd      	mov	sp, r7
 8002332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002336:	4770      	bx	lr
 8002338:	e000ed00 	.word	0xe000ed00

0800233c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800233c:	b480      	push	{r7}
 800233e:	b083      	sub	sp, #12
 8002340:	af00      	add	r7, sp, #0
 8002342:	4603      	mov	r3, r0
 8002344:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002346:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800234a:	2b00      	cmp	r3, #0
 800234c:	db0b      	blt.n	8002366 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800234e:	79fb      	ldrb	r3, [r7, #7]
 8002350:	f003 021f 	and.w	r2, r3, #31
 8002354:	4907      	ldr	r1, [pc, #28]	@ (8002374 <__NVIC_EnableIRQ+0x38>)
 8002356:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800235a:	095b      	lsrs	r3, r3, #5
 800235c:	2001      	movs	r0, #1
 800235e:	fa00 f202 	lsl.w	r2, r0, r2
 8002362:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002366:	bf00      	nop
 8002368:	370c      	adds	r7, #12
 800236a:	46bd      	mov	sp, r7
 800236c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002370:	4770      	bx	lr
 8002372:	bf00      	nop
 8002374:	e000e100 	.word	0xe000e100

08002378 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002378:	b480      	push	{r7}
 800237a:	b083      	sub	sp, #12
 800237c:	af00      	add	r7, sp, #0
 800237e:	4603      	mov	r3, r0
 8002380:	6039      	str	r1, [r7, #0]
 8002382:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002384:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002388:	2b00      	cmp	r3, #0
 800238a:	db0a      	blt.n	80023a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	b2da      	uxtb	r2, r3
 8002390:	490c      	ldr	r1, [pc, #48]	@ (80023c4 <__NVIC_SetPriority+0x4c>)
 8002392:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002396:	0112      	lsls	r2, r2, #4
 8002398:	b2d2      	uxtb	r2, r2
 800239a:	440b      	add	r3, r1
 800239c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023a0:	e00a      	b.n	80023b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	b2da      	uxtb	r2, r3
 80023a6:	4908      	ldr	r1, [pc, #32]	@ (80023c8 <__NVIC_SetPriority+0x50>)
 80023a8:	79fb      	ldrb	r3, [r7, #7]
 80023aa:	f003 030f 	and.w	r3, r3, #15
 80023ae:	3b04      	subs	r3, #4
 80023b0:	0112      	lsls	r2, r2, #4
 80023b2:	b2d2      	uxtb	r2, r2
 80023b4:	440b      	add	r3, r1
 80023b6:	761a      	strb	r2, [r3, #24]
}
 80023b8:	bf00      	nop
 80023ba:	370c      	adds	r7, #12
 80023bc:	46bd      	mov	sp, r7
 80023be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c2:	4770      	bx	lr
 80023c4:	e000e100 	.word	0xe000e100
 80023c8:	e000ed00 	.word	0xe000ed00

080023cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023cc:	b480      	push	{r7}
 80023ce:	b089      	sub	sp, #36	@ 0x24
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	60f8      	str	r0, [r7, #12]
 80023d4:	60b9      	str	r1, [r7, #8]
 80023d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	f003 0307 	and.w	r3, r3, #7
 80023de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023e0:	69fb      	ldr	r3, [r7, #28]
 80023e2:	f1c3 0307 	rsb	r3, r3, #7
 80023e6:	2b04      	cmp	r3, #4
 80023e8:	bf28      	it	cs
 80023ea:	2304      	movcs	r3, #4
 80023ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023ee:	69fb      	ldr	r3, [r7, #28]
 80023f0:	3304      	adds	r3, #4
 80023f2:	2b06      	cmp	r3, #6
 80023f4:	d902      	bls.n	80023fc <NVIC_EncodePriority+0x30>
 80023f6:	69fb      	ldr	r3, [r7, #28]
 80023f8:	3b03      	subs	r3, #3
 80023fa:	e000      	b.n	80023fe <NVIC_EncodePriority+0x32>
 80023fc:	2300      	movs	r3, #0
 80023fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002400:	f04f 32ff 	mov.w	r2, #4294967295
 8002404:	69bb      	ldr	r3, [r7, #24]
 8002406:	fa02 f303 	lsl.w	r3, r2, r3
 800240a:	43da      	mvns	r2, r3
 800240c:	68bb      	ldr	r3, [r7, #8]
 800240e:	401a      	ands	r2, r3
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002414:	f04f 31ff 	mov.w	r1, #4294967295
 8002418:	697b      	ldr	r3, [r7, #20]
 800241a:	fa01 f303 	lsl.w	r3, r1, r3
 800241e:	43d9      	mvns	r1, r3
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002424:	4313      	orrs	r3, r2
         );
}
 8002426:	4618      	mov	r0, r3
 8002428:	3724      	adds	r7, #36	@ 0x24
 800242a:	46bd      	mov	sp, r7
 800242c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002430:	4770      	bx	lr
	...

08002434 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b082      	sub	sp, #8
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	3b01      	subs	r3, #1
 8002440:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002444:	d301      	bcc.n	800244a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002446:	2301      	movs	r3, #1
 8002448:	e00f      	b.n	800246a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800244a:	4a0a      	ldr	r2, [pc, #40]	@ (8002474 <SysTick_Config+0x40>)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	3b01      	subs	r3, #1
 8002450:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002452:	210f      	movs	r1, #15
 8002454:	f04f 30ff 	mov.w	r0, #4294967295
 8002458:	f7ff ff8e 	bl	8002378 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800245c:	4b05      	ldr	r3, [pc, #20]	@ (8002474 <SysTick_Config+0x40>)
 800245e:	2200      	movs	r2, #0
 8002460:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002462:	4b04      	ldr	r3, [pc, #16]	@ (8002474 <SysTick_Config+0x40>)
 8002464:	2207      	movs	r2, #7
 8002466:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002468:	2300      	movs	r3, #0
}
 800246a:	4618      	mov	r0, r3
 800246c:	3708      	adds	r7, #8
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}
 8002472:	bf00      	nop
 8002474:	e000e010 	.word	0xe000e010

08002478 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b082      	sub	sp, #8
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002480:	6878      	ldr	r0, [r7, #4]
 8002482:	f7ff ff29 	bl	80022d8 <__NVIC_SetPriorityGrouping>
}
 8002486:	bf00      	nop
 8002488:	3708      	adds	r7, #8
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}

0800248e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800248e:	b580      	push	{r7, lr}
 8002490:	b086      	sub	sp, #24
 8002492:	af00      	add	r7, sp, #0
 8002494:	4603      	mov	r3, r0
 8002496:	60b9      	str	r1, [r7, #8]
 8002498:	607a      	str	r2, [r7, #4]
 800249a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800249c:	2300      	movs	r3, #0
 800249e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80024a0:	f7ff ff3e 	bl	8002320 <__NVIC_GetPriorityGrouping>
 80024a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024a6:	687a      	ldr	r2, [r7, #4]
 80024a8:	68b9      	ldr	r1, [r7, #8]
 80024aa:	6978      	ldr	r0, [r7, #20]
 80024ac:	f7ff ff8e 	bl	80023cc <NVIC_EncodePriority>
 80024b0:	4602      	mov	r2, r0
 80024b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024b6:	4611      	mov	r1, r2
 80024b8:	4618      	mov	r0, r3
 80024ba:	f7ff ff5d 	bl	8002378 <__NVIC_SetPriority>
}
 80024be:	bf00      	nop
 80024c0:	3718      	adds	r7, #24
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}

080024c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024c6:	b580      	push	{r7, lr}
 80024c8:	b082      	sub	sp, #8
 80024ca:	af00      	add	r7, sp, #0
 80024cc:	4603      	mov	r3, r0
 80024ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80024d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024d4:	4618      	mov	r0, r3
 80024d6:	f7ff ff31 	bl	800233c <__NVIC_EnableIRQ>
}
 80024da:	bf00      	nop
 80024dc:	3708      	adds	r7, #8
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}

080024e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024e2:	b580      	push	{r7, lr}
 80024e4:	b082      	sub	sp, #8
 80024e6:	af00      	add	r7, sp, #0
 80024e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80024ea:	6878      	ldr	r0, [r7, #4]
 80024ec:	f7ff ffa2 	bl	8002434 <SysTick_Config>
 80024f0:	4603      	mov	r3, r0
}
 80024f2:	4618      	mov	r0, r3
 80024f4:	3708      	adds	r7, #8
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}

080024fa <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80024fa:	b580      	push	{r7, lr}
 80024fc:	b084      	sub	sp, #16
 80024fe:	af00      	add	r7, sp, #0
 8002500:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002506:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002508:	f7ff feb6 	bl	8002278 <HAL_GetTick>
 800250c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002514:	b2db      	uxtb	r3, r3
 8002516:	2b02      	cmp	r3, #2
 8002518:	d008      	beq.n	800252c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2280      	movs	r2, #128	@ 0x80
 800251e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2200      	movs	r2, #0
 8002524:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002528:	2301      	movs	r3, #1
 800252a:	e052      	b.n	80025d2 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	681a      	ldr	r2, [r3, #0]
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f022 0216 	bic.w	r2, r2, #22
 800253a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	695a      	ldr	r2, [r3, #20]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800254a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002550:	2b00      	cmp	r3, #0
 8002552:	d103      	bne.n	800255c <HAL_DMA_Abort+0x62>
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002558:	2b00      	cmp	r3, #0
 800255a:	d007      	beq.n	800256c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	681a      	ldr	r2, [r3, #0]
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f022 0208 	bic.w	r2, r2, #8
 800256a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	681a      	ldr	r2, [r3, #0]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f022 0201 	bic.w	r2, r2, #1
 800257a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800257c:	e013      	b.n	80025a6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800257e:	f7ff fe7b 	bl	8002278 <HAL_GetTick>
 8002582:	4602      	mov	r2, r0
 8002584:	68bb      	ldr	r3, [r7, #8]
 8002586:	1ad3      	subs	r3, r2, r3
 8002588:	2b05      	cmp	r3, #5
 800258a:	d90c      	bls.n	80025a6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2220      	movs	r2, #32
 8002590:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2203      	movs	r2, #3
 8002596:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2200      	movs	r2, #0
 800259e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80025a2:	2303      	movs	r3, #3
 80025a4:	e015      	b.n	80025d2 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f003 0301 	and.w	r3, r3, #1
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d1e4      	bne.n	800257e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025b8:	223f      	movs	r2, #63	@ 0x3f
 80025ba:	409a      	lsls	r2, r3
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2201      	movs	r2, #1
 80025c4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2200      	movs	r2, #0
 80025cc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80025d0:	2300      	movs	r3, #0
}
 80025d2:	4618      	mov	r0, r3
 80025d4:	3710      	adds	r7, #16
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}

080025da <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80025da:	b480      	push	{r7}
 80025dc:	b083      	sub	sp, #12
 80025de:	af00      	add	r7, sp, #0
 80025e0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80025e8:	b2db      	uxtb	r3, r3
 80025ea:	2b02      	cmp	r3, #2
 80025ec:	d004      	beq.n	80025f8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2280      	movs	r2, #128	@ 0x80
 80025f2:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80025f4:	2301      	movs	r3, #1
 80025f6:	e00c      	b.n	8002612 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2205      	movs	r2, #5
 80025fc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	681a      	ldr	r2, [r3, #0]
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f022 0201 	bic.w	r2, r2, #1
 800260e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002610:	2300      	movs	r3, #0
}
 8002612:	4618      	mov	r0, r3
 8002614:	370c      	adds	r7, #12
 8002616:	46bd      	mov	sp, r7
 8002618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261c:	4770      	bx	lr
	...

08002620 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002620:	b480      	push	{r7}
 8002622:	b089      	sub	sp, #36	@ 0x24
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
 8002628:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800262a:	2300      	movs	r3, #0
 800262c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800262e:	2300      	movs	r3, #0
 8002630:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002632:	2300      	movs	r3, #0
 8002634:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002636:	2300      	movs	r3, #0
 8002638:	61fb      	str	r3, [r7, #28]
 800263a:	e16b      	b.n	8002914 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800263c:	2201      	movs	r2, #1
 800263e:	69fb      	ldr	r3, [r7, #28]
 8002640:	fa02 f303 	lsl.w	r3, r2, r3
 8002644:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	697a      	ldr	r2, [r7, #20]
 800264c:	4013      	ands	r3, r2
 800264e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002650:	693a      	ldr	r2, [r7, #16]
 8002652:	697b      	ldr	r3, [r7, #20]
 8002654:	429a      	cmp	r2, r3
 8002656:	f040 815a 	bne.w	800290e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	f003 0303 	and.w	r3, r3, #3
 8002662:	2b01      	cmp	r3, #1
 8002664:	d005      	beq.n	8002672 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800266e:	2b02      	cmp	r3, #2
 8002670:	d130      	bne.n	80026d4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	689b      	ldr	r3, [r3, #8]
 8002676:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002678:	69fb      	ldr	r3, [r7, #28]
 800267a:	005b      	lsls	r3, r3, #1
 800267c:	2203      	movs	r2, #3
 800267e:	fa02 f303 	lsl.w	r3, r2, r3
 8002682:	43db      	mvns	r3, r3
 8002684:	69ba      	ldr	r2, [r7, #24]
 8002686:	4013      	ands	r3, r2
 8002688:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	68da      	ldr	r2, [r3, #12]
 800268e:	69fb      	ldr	r3, [r7, #28]
 8002690:	005b      	lsls	r3, r3, #1
 8002692:	fa02 f303 	lsl.w	r3, r2, r3
 8002696:	69ba      	ldr	r2, [r7, #24]
 8002698:	4313      	orrs	r3, r2
 800269a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	69ba      	ldr	r2, [r7, #24]
 80026a0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80026a8:	2201      	movs	r2, #1
 80026aa:	69fb      	ldr	r3, [r7, #28]
 80026ac:	fa02 f303 	lsl.w	r3, r2, r3
 80026b0:	43db      	mvns	r3, r3
 80026b2:	69ba      	ldr	r2, [r7, #24]
 80026b4:	4013      	ands	r3, r2
 80026b6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	091b      	lsrs	r3, r3, #4
 80026be:	f003 0201 	and.w	r2, r3, #1
 80026c2:	69fb      	ldr	r3, [r7, #28]
 80026c4:	fa02 f303 	lsl.w	r3, r2, r3
 80026c8:	69ba      	ldr	r2, [r7, #24]
 80026ca:	4313      	orrs	r3, r2
 80026cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	69ba      	ldr	r2, [r7, #24]
 80026d2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	f003 0303 	and.w	r3, r3, #3
 80026dc:	2b03      	cmp	r3, #3
 80026de:	d017      	beq.n	8002710 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	68db      	ldr	r3, [r3, #12]
 80026e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80026e6:	69fb      	ldr	r3, [r7, #28]
 80026e8:	005b      	lsls	r3, r3, #1
 80026ea:	2203      	movs	r2, #3
 80026ec:	fa02 f303 	lsl.w	r3, r2, r3
 80026f0:	43db      	mvns	r3, r3
 80026f2:	69ba      	ldr	r2, [r7, #24]
 80026f4:	4013      	ands	r3, r2
 80026f6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	689a      	ldr	r2, [r3, #8]
 80026fc:	69fb      	ldr	r3, [r7, #28]
 80026fe:	005b      	lsls	r3, r3, #1
 8002700:	fa02 f303 	lsl.w	r3, r2, r3
 8002704:	69ba      	ldr	r2, [r7, #24]
 8002706:	4313      	orrs	r3, r2
 8002708:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	69ba      	ldr	r2, [r7, #24]
 800270e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	f003 0303 	and.w	r3, r3, #3
 8002718:	2b02      	cmp	r3, #2
 800271a:	d123      	bne.n	8002764 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800271c:	69fb      	ldr	r3, [r7, #28]
 800271e:	08da      	lsrs	r2, r3, #3
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	3208      	adds	r2, #8
 8002724:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002728:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800272a:	69fb      	ldr	r3, [r7, #28]
 800272c:	f003 0307 	and.w	r3, r3, #7
 8002730:	009b      	lsls	r3, r3, #2
 8002732:	220f      	movs	r2, #15
 8002734:	fa02 f303 	lsl.w	r3, r2, r3
 8002738:	43db      	mvns	r3, r3
 800273a:	69ba      	ldr	r2, [r7, #24]
 800273c:	4013      	ands	r3, r2
 800273e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	691a      	ldr	r2, [r3, #16]
 8002744:	69fb      	ldr	r3, [r7, #28]
 8002746:	f003 0307 	and.w	r3, r3, #7
 800274a:	009b      	lsls	r3, r3, #2
 800274c:	fa02 f303 	lsl.w	r3, r2, r3
 8002750:	69ba      	ldr	r2, [r7, #24]
 8002752:	4313      	orrs	r3, r2
 8002754:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002756:	69fb      	ldr	r3, [r7, #28]
 8002758:	08da      	lsrs	r2, r3, #3
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	3208      	adds	r2, #8
 800275e:	69b9      	ldr	r1, [r7, #24]
 8002760:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800276a:	69fb      	ldr	r3, [r7, #28]
 800276c:	005b      	lsls	r3, r3, #1
 800276e:	2203      	movs	r2, #3
 8002770:	fa02 f303 	lsl.w	r3, r2, r3
 8002774:	43db      	mvns	r3, r3
 8002776:	69ba      	ldr	r2, [r7, #24]
 8002778:	4013      	ands	r3, r2
 800277a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	f003 0203 	and.w	r2, r3, #3
 8002784:	69fb      	ldr	r3, [r7, #28]
 8002786:	005b      	lsls	r3, r3, #1
 8002788:	fa02 f303 	lsl.w	r3, r2, r3
 800278c:	69ba      	ldr	r2, [r7, #24]
 800278e:	4313      	orrs	r3, r2
 8002790:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	69ba      	ldr	r2, [r7, #24]
 8002796:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	f000 80b4 	beq.w	800290e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027a6:	2300      	movs	r3, #0
 80027a8:	60fb      	str	r3, [r7, #12]
 80027aa:	4b60      	ldr	r3, [pc, #384]	@ (800292c <HAL_GPIO_Init+0x30c>)
 80027ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027ae:	4a5f      	ldr	r2, [pc, #380]	@ (800292c <HAL_GPIO_Init+0x30c>)
 80027b0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80027b4:	6453      	str	r3, [r2, #68]	@ 0x44
 80027b6:	4b5d      	ldr	r3, [pc, #372]	@ (800292c <HAL_GPIO_Init+0x30c>)
 80027b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80027be:	60fb      	str	r3, [r7, #12]
 80027c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80027c2:	4a5b      	ldr	r2, [pc, #364]	@ (8002930 <HAL_GPIO_Init+0x310>)
 80027c4:	69fb      	ldr	r3, [r7, #28]
 80027c6:	089b      	lsrs	r3, r3, #2
 80027c8:	3302      	adds	r3, #2
 80027ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80027d0:	69fb      	ldr	r3, [r7, #28]
 80027d2:	f003 0303 	and.w	r3, r3, #3
 80027d6:	009b      	lsls	r3, r3, #2
 80027d8:	220f      	movs	r2, #15
 80027da:	fa02 f303 	lsl.w	r3, r2, r3
 80027de:	43db      	mvns	r3, r3
 80027e0:	69ba      	ldr	r2, [r7, #24]
 80027e2:	4013      	ands	r3, r2
 80027e4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	4a52      	ldr	r2, [pc, #328]	@ (8002934 <HAL_GPIO_Init+0x314>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d02b      	beq.n	8002846 <HAL_GPIO_Init+0x226>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	4a51      	ldr	r2, [pc, #324]	@ (8002938 <HAL_GPIO_Init+0x318>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d025      	beq.n	8002842 <HAL_GPIO_Init+0x222>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	4a50      	ldr	r2, [pc, #320]	@ (800293c <HAL_GPIO_Init+0x31c>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d01f      	beq.n	800283e <HAL_GPIO_Init+0x21e>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	4a4f      	ldr	r2, [pc, #316]	@ (8002940 <HAL_GPIO_Init+0x320>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d019      	beq.n	800283a <HAL_GPIO_Init+0x21a>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	4a4e      	ldr	r2, [pc, #312]	@ (8002944 <HAL_GPIO_Init+0x324>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d013      	beq.n	8002836 <HAL_GPIO_Init+0x216>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	4a4d      	ldr	r2, [pc, #308]	@ (8002948 <HAL_GPIO_Init+0x328>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d00d      	beq.n	8002832 <HAL_GPIO_Init+0x212>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	4a4c      	ldr	r2, [pc, #304]	@ (800294c <HAL_GPIO_Init+0x32c>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d007      	beq.n	800282e <HAL_GPIO_Init+0x20e>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	4a4b      	ldr	r2, [pc, #300]	@ (8002950 <HAL_GPIO_Init+0x330>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d101      	bne.n	800282a <HAL_GPIO_Init+0x20a>
 8002826:	2307      	movs	r3, #7
 8002828:	e00e      	b.n	8002848 <HAL_GPIO_Init+0x228>
 800282a:	2308      	movs	r3, #8
 800282c:	e00c      	b.n	8002848 <HAL_GPIO_Init+0x228>
 800282e:	2306      	movs	r3, #6
 8002830:	e00a      	b.n	8002848 <HAL_GPIO_Init+0x228>
 8002832:	2305      	movs	r3, #5
 8002834:	e008      	b.n	8002848 <HAL_GPIO_Init+0x228>
 8002836:	2304      	movs	r3, #4
 8002838:	e006      	b.n	8002848 <HAL_GPIO_Init+0x228>
 800283a:	2303      	movs	r3, #3
 800283c:	e004      	b.n	8002848 <HAL_GPIO_Init+0x228>
 800283e:	2302      	movs	r3, #2
 8002840:	e002      	b.n	8002848 <HAL_GPIO_Init+0x228>
 8002842:	2301      	movs	r3, #1
 8002844:	e000      	b.n	8002848 <HAL_GPIO_Init+0x228>
 8002846:	2300      	movs	r3, #0
 8002848:	69fa      	ldr	r2, [r7, #28]
 800284a:	f002 0203 	and.w	r2, r2, #3
 800284e:	0092      	lsls	r2, r2, #2
 8002850:	4093      	lsls	r3, r2
 8002852:	69ba      	ldr	r2, [r7, #24]
 8002854:	4313      	orrs	r3, r2
 8002856:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002858:	4935      	ldr	r1, [pc, #212]	@ (8002930 <HAL_GPIO_Init+0x310>)
 800285a:	69fb      	ldr	r3, [r7, #28]
 800285c:	089b      	lsrs	r3, r3, #2
 800285e:	3302      	adds	r3, #2
 8002860:	69ba      	ldr	r2, [r7, #24]
 8002862:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002866:	4b3b      	ldr	r3, [pc, #236]	@ (8002954 <HAL_GPIO_Init+0x334>)
 8002868:	689b      	ldr	r3, [r3, #8]
 800286a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800286c:	693b      	ldr	r3, [r7, #16]
 800286e:	43db      	mvns	r3, r3
 8002870:	69ba      	ldr	r2, [r7, #24]
 8002872:	4013      	ands	r3, r2
 8002874:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800287e:	2b00      	cmp	r3, #0
 8002880:	d003      	beq.n	800288a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002882:	69ba      	ldr	r2, [r7, #24]
 8002884:	693b      	ldr	r3, [r7, #16]
 8002886:	4313      	orrs	r3, r2
 8002888:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800288a:	4a32      	ldr	r2, [pc, #200]	@ (8002954 <HAL_GPIO_Init+0x334>)
 800288c:	69bb      	ldr	r3, [r7, #24]
 800288e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002890:	4b30      	ldr	r3, [pc, #192]	@ (8002954 <HAL_GPIO_Init+0x334>)
 8002892:	68db      	ldr	r3, [r3, #12]
 8002894:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002896:	693b      	ldr	r3, [r7, #16]
 8002898:	43db      	mvns	r3, r3
 800289a:	69ba      	ldr	r2, [r7, #24]
 800289c:	4013      	ands	r3, r2
 800289e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d003      	beq.n	80028b4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80028ac:	69ba      	ldr	r2, [r7, #24]
 80028ae:	693b      	ldr	r3, [r7, #16]
 80028b0:	4313      	orrs	r3, r2
 80028b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80028b4:	4a27      	ldr	r2, [pc, #156]	@ (8002954 <HAL_GPIO_Init+0x334>)
 80028b6:	69bb      	ldr	r3, [r7, #24]
 80028b8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80028ba:	4b26      	ldr	r3, [pc, #152]	@ (8002954 <HAL_GPIO_Init+0x334>)
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028c0:	693b      	ldr	r3, [r7, #16]
 80028c2:	43db      	mvns	r3, r3
 80028c4:	69ba      	ldr	r2, [r7, #24]
 80028c6:	4013      	ands	r3, r2
 80028c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d003      	beq.n	80028de <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80028d6:	69ba      	ldr	r2, [r7, #24]
 80028d8:	693b      	ldr	r3, [r7, #16]
 80028da:	4313      	orrs	r3, r2
 80028dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80028de:	4a1d      	ldr	r2, [pc, #116]	@ (8002954 <HAL_GPIO_Init+0x334>)
 80028e0:	69bb      	ldr	r3, [r7, #24]
 80028e2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80028e4:	4b1b      	ldr	r3, [pc, #108]	@ (8002954 <HAL_GPIO_Init+0x334>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028ea:	693b      	ldr	r3, [r7, #16]
 80028ec:	43db      	mvns	r3, r3
 80028ee:	69ba      	ldr	r2, [r7, #24]
 80028f0:	4013      	ands	r3, r2
 80028f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d003      	beq.n	8002908 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002900:	69ba      	ldr	r2, [r7, #24]
 8002902:	693b      	ldr	r3, [r7, #16]
 8002904:	4313      	orrs	r3, r2
 8002906:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002908:	4a12      	ldr	r2, [pc, #72]	@ (8002954 <HAL_GPIO_Init+0x334>)
 800290a:	69bb      	ldr	r3, [r7, #24]
 800290c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800290e:	69fb      	ldr	r3, [r7, #28]
 8002910:	3301      	adds	r3, #1
 8002912:	61fb      	str	r3, [r7, #28]
 8002914:	69fb      	ldr	r3, [r7, #28]
 8002916:	2b0f      	cmp	r3, #15
 8002918:	f67f ae90 	bls.w	800263c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800291c:	bf00      	nop
 800291e:	bf00      	nop
 8002920:	3724      	adds	r7, #36	@ 0x24
 8002922:	46bd      	mov	sp, r7
 8002924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002928:	4770      	bx	lr
 800292a:	bf00      	nop
 800292c:	40023800 	.word	0x40023800
 8002930:	40013800 	.word	0x40013800
 8002934:	40020000 	.word	0x40020000
 8002938:	40020400 	.word	0x40020400
 800293c:	40020800 	.word	0x40020800
 8002940:	40020c00 	.word	0x40020c00
 8002944:	40021000 	.word	0x40021000
 8002948:	40021400 	.word	0x40021400
 800294c:	40021800 	.word	0x40021800
 8002950:	40021c00 	.word	0x40021c00
 8002954:	40013c00 	.word	0x40013c00

08002958 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002958:	b480      	push	{r7}
 800295a:	b085      	sub	sp, #20
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
 8002960:	460b      	mov	r3, r1
 8002962:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	691a      	ldr	r2, [r3, #16]
 8002968:	887b      	ldrh	r3, [r7, #2]
 800296a:	4013      	ands	r3, r2
 800296c:	2b00      	cmp	r3, #0
 800296e:	d002      	beq.n	8002976 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002970:	2301      	movs	r3, #1
 8002972:	73fb      	strb	r3, [r7, #15]
 8002974:	e001      	b.n	800297a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002976:	2300      	movs	r3, #0
 8002978:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800297a:	7bfb      	ldrb	r3, [r7, #15]
}
 800297c:	4618      	mov	r0, r3
 800297e:	3714      	adds	r7, #20
 8002980:	46bd      	mov	sp, r7
 8002982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002986:	4770      	bx	lr

08002988 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002988:	b480      	push	{r7}
 800298a:	b083      	sub	sp, #12
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
 8002990:	460b      	mov	r3, r1
 8002992:	807b      	strh	r3, [r7, #2]
 8002994:	4613      	mov	r3, r2
 8002996:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002998:	787b      	ldrb	r3, [r7, #1]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d003      	beq.n	80029a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800299e:	887a      	ldrh	r2, [r7, #2]
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80029a4:	e003      	b.n	80029ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80029a6:	887b      	ldrh	r3, [r7, #2]
 80029a8:	041a      	lsls	r2, r3, #16
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	619a      	str	r2, [r3, #24]
}
 80029ae:	bf00      	nop
 80029b0:	370c      	adds	r7, #12
 80029b2:	46bd      	mov	sp, r7
 80029b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b8:	4770      	bx	lr

080029ba <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80029ba:	b480      	push	{r7}
 80029bc:	b085      	sub	sp, #20
 80029be:	af00      	add	r7, sp, #0
 80029c0:	6078      	str	r0, [r7, #4]
 80029c2:	460b      	mov	r3, r1
 80029c4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	695b      	ldr	r3, [r3, #20]
 80029ca:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80029cc:	887a      	ldrh	r2, [r7, #2]
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	4013      	ands	r3, r2
 80029d2:	041a      	lsls	r2, r3, #16
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	43d9      	mvns	r1, r3
 80029d8:	887b      	ldrh	r3, [r7, #2]
 80029da:	400b      	ands	r3, r1
 80029dc:	431a      	orrs	r2, r3
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	619a      	str	r2, [r3, #24]
}
 80029e2:	bf00      	nop
 80029e4:	3714      	adds	r7, #20
 80029e6:	46bd      	mov	sp, r7
 80029e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ec:	4770      	bx	lr
	...

080029f0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b082      	sub	sp, #8
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	4603      	mov	r3, r0
 80029f8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80029fa:	4b08      	ldr	r3, [pc, #32]	@ (8002a1c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80029fc:	695a      	ldr	r2, [r3, #20]
 80029fe:	88fb      	ldrh	r3, [r7, #6]
 8002a00:	4013      	ands	r3, r2
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d006      	beq.n	8002a14 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002a06:	4a05      	ldr	r2, [pc, #20]	@ (8002a1c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002a08:	88fb      	ldrh	r3, [r7, #6]
 8002a0a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002a0c:	88fb      	ldrh	r3, [r7, #6]
 8002a0e:	4618      	mov	r0, r3
 8002a10:	f7fe ff0a 	bl	8001828 <HAL_GPIO_EXTI_Callback>
  }
}
 8002a14:	bf00      	nop
 8002a16:	3708      	adds	r7, #8
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bd80      	pop	{r7, pc}
 8002a1c:	40013c00 	.word	0x40013c00

08002a20 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b086      	sub	sp, #24
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d101      	bne.n	8002a32 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	e267      	b.n	8002f02 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f003 0301 	and.w	r3, r3, #1
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d075      	beq.n	8002b2a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002a3e:	4b88      	ldr	r3, [pc, #544]	@ (8002c60 <HAL_RCC_OscConfig+0x240>)
 8002a40:	689b      	ldr	r3, [r3, #8]
 8002a42:	f003 030c 	and.w	r3, r3, #12
 8002a46:	2b04      	cmp	r3, #4
 8002a48:	d00c      	beq.n	8002a64 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a4a:	4b85      	ldr	r3, [pc, #532]	@ (8002c60 <HAL_RCC_OscConfig+0x240>)
 8002a4c:	689b      	ldr	r3, [r3, #8]
 8002a4e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002a52:	2b08      	cmp	r3, #8
 8002a54:	d112      	bne.n	8002a7c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a56:	4b82      	ldr	r3, [pc, #520]	@ (8002c60 <HAL_RCC_OscConfig+0x240>)
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a5e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002a62:	d10b      	bne.n	8002a7c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a64:	4b7e      	ldr	r3, [pc, #504]	@ (8002c60 <HAL_RCC_OscConfig+0x240>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d05b      	beq.n	8002b28 <HAL_RCC_OscConfig+0x108>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d157      	bne.n	8002b28 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002a78:	2301      	movs	r3, #1
 8002a7a:	e242      	b.n	8002f02 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a84:	d106      	bne.n	8002a94 <HAL_RCC_OscConfig+0x74>
 8002a86:	4b76      	ldr	r3, [pc, #472]	@ (8002c60 <HAL_RCC_OscConfig+0x240>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4a75      	ldr	r2, [pc, #468]	@ (8002c60 <HAL_RCC_OscConfig+0x240>)
 8002a8c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a90:	6013      	str	r3, [r2, #0]
 8002a92:	e01d      	b.n	8002ad0 <HAL_RCC_OscConfig+0xb0>
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002a9c:	d10c      	bne.n	8002ab8 <HAL_RCC_OscConfig+0x98>
 8002a9e:	4b70      	ldr	r3, [pc, #448]	@ (8002c60 <HAL_RCC_OscConfig+0x240>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4a6f      	ldr	r2, [pc, #444]	@ (8002c60 <HAL_RCC_OscConfig+0x240>)
 8002aa4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002aa8:	6013      	str	r3, [r2, #0]
 8002aaa:	4b6d      	ldr	r3, [pc, #436]	@ (8002c60 <HAL_RCC_OscConfig+0x240>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4a6c      	ldr	r2, [pc, #432]	@ (8002c60 <HAL_RCC_OscConfig+0x240>)
 8002ab0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ab4:	6013      	str	r3, [r2, #0]
 8002ab6:	e00b      	b.n	8002ad0 <HAL_RCC_OscConfig+0xb0>
 8002ab8:	4b69      	ldr	r3, [pc, #420]	@ (8002c60 <HAL_RCC_OscConfig+0x240>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a68      	ldr	r2, [pc, #416]	@ (8002c60 <HAL_RCC_OscConfig+0x240>)
 8002abe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ac2:	6013      	str	r3, [r2, #0]
 8002ac4:	4b66      	ldr	r3, [pc, #408]	@ (8002c60 <HAL_RCC_OscConfig+0x240>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4a65      	ldr	r2, [pc, #404]	@ (8002c60 <HAL_RCC_OscConfig+0x240>)
 8002aca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002ace:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d013      	beq.n	8002b00 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ad8:	f7ff fbce 	bl	8002278 <HAL_GetTick>
 8002adc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ade:	e008      	b.n	8002af2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ae0:	f7ff fbca 	bl	8002278 <HAL_GetTick>
 8002ae4:	4602      	mov	r2, r0
 8002ae6:	693b      	ldr	r3, [r7, #16]
 8002ae8:	1ad3      	subs	r3, r2, r3
 8002aea:	2b64      	cmp	r3, #100	@ 0x64
 8002aec:	d901      	bls.n	8002af2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002aee:	2303      	movs	r3, #3
 8002af0:	e207      	b.n	8002f02 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002af2:	4b5b      	ldr	r3, [pc, #364]	@ (8002c60 <HAL_RCC_OscConfig+0x240>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d0f0      	beq.n	8002ae0 <HAL_RCC_OscConfig+0xc0>
 8002afe:	e014      	b.n	8002b2a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b00:	f7ff fbba 	bl	8002278 <HAL_GetTick>
 8002b04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b06:	e008      	b.n	8002b1a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b08:	f7ff fbb6 	bl	8002278 <HAL_GetTick>
 8002b0c:	4602      	mov	r2, r0
 8002b0e:	693b      	ldr	r3, [r7, #16]
 8002b10:	1ad3      	subs	r3, r2, r3
 8002b12:	2b64      	cmp	r3, #100	@ 0x64
 8002b14:	d901      	bls.n	8002b1a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002b16:	2303      	movs	r3, #3
 8002b18:	e1f3      	b.n	8002f02 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b1a:	4b51      	ldr	r3, [pc, #324]	@ (8002c60 <HAL_RCC_OscConfig+0x240>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d1f0      	bne.n	8002b08 <HAL_RCC_OscConfig+0xe8>
 8002b26:	e000      	b.n	8002b2a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b28:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f003 0302 	and.w	r3, r3, #2
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d063      	beq.n	8002bfe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002b36:	4b4a      	ldr	r3, [pc, #296]	@ (8002c60 <HAL_RCC_OscConfig+0x240>)
 8002b38:	689b      	ldr	r3, [r3, #8]
 8002b3a:	f003 030c 	and.w	r3, r3, #12
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d00b      	beq.n	8002b5a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b42:	4b47      	ldr	r3, [pc, #284]	@ (8002c60 <HAL_RCC_OscConfig+0x240>)
 8002b44:	689b      	ldr	r3, [r3, #8]
 8002b46:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002b4a:	2b08      	cmp	r3, #8
 8002b4c:	d11c      	bne.n	8002b88 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b4e:	4b44      	ldr	r3, [pc, #272]	@ (8002c60 <HAL_RCC_OscConfig+0x240>)
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d116      	bne.n	8002b88 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b5a:	4b41      	ldr	r3, [pc, #260]	@ (8002c60 <HAL_RCC_OscConfig+0x240>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f003 0302 	and.w	r3, r3, #2
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d005      	beq.n	8002b72 <HAL_RCC_OscConfig+0x152>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	68db      	ldr	r3, [r3, #12]
 8002b6a:	2b01      	cmp	r3, #1
 8002b6c:	d001      	beq.n	8002b72 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	e1c7      	b.n	8002f02 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b72:	4b3b      	ldr	r3, [pc, #236]	@ (8002c60 <HAL_RCC_OscConfig+0x240>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	691b      	ldr	r3, [r3, #16]
 8002b7e:	00db      	lsls	r3, r3, #3
 8002b80:	4937      	ldr	r1, [pc, #220]	@ (8002c60 <HAL_RCC_OscConfig+0x240>)
 8002b82:	4313      	orrs	r3, r2
 8002b84:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b86:	e03a      	b.n	8002bfe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	68db      	ldr	r3, [r3, #12]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d020      	beq.n	8002bd2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b90:	4b34      	ldr	r3, [pc, #208]	@ (8002c64 <HAL_RCC_OscConfig+0x244>)
 8002b92:	2201      	movs	r2, #1
 8002b94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b96:	f7ff fb6f 	bl	8002278 <HAL_GetTick>
 8002b9a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b9c:	e008      	b.n	8002bb0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b9e:	f7ff fb6b 	bl	8002278 <HAL_GetTick>
 8002ba2:	4602      	mov	r2, r0
 8002ba4:	693b      	ldr	r3, [r7, #16]
 8002ba6:	1ad3      	subs	r3, r2, r3
 8002ba8:	2b02      	cmp	r3, #2
 8002baa:	d901      	bls.n	8002bb0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002bac:	2303      	movs	r3, #3
 8002bae:	e1a8      	b.n	8002f02 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bb0:	4b2b      	ldr	r3, [pc, #172]	@ (8002c60 <HAL_RCC_OscConfig+0x240>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f003 0302 	and.w	r3, r3, #2
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d0f0      	beq.n	8002b9e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bbc:	4b28      	ldr	r3, [pc, #160]	@ (8002c60 <HAL_RCC_OscConfig+0x240>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	691b      	ldr	r3, [r3, #16]
 8002bc8:	00db      	lsls	r3, r3, #3
 8002bca:	4925      	ldr	r1, [pc, #148]	@ (8002c60 <HAL_RCC_OscConfig+0x240>)
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	600b      	str	r3, [r1, #0]
 8002bd0:	e015      	b.n	8002bfe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002bd2:	4b24      	ldr	r3, [pc, #144]	@ (8002c64 <HAL_RCC_OscConfig+0x244>)
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bd8:	f7ff fb4e 	bl	8002278 <HAL_GetTick>
 8002bdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bde:	e008      	b.n	8002bf2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002be0:	f7ff fb4a 	bl	8002278 <HAL_GetTick>
 8002be4:	4602      	mov	r2, r0
 8002be6:	693b      	ldr	r3, [r7, #16]
 8002be8:	1ad3      	subs	r3, r2, r3
 8002bea:	2b02      	cmp	r3, #2
 8002bec:	d901      	bls.n	8002bf2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002bee:	2303      	movs	r3, #3
 8002bf0:	e187      	b.n	8002f02 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bf2:	4b1b      	ldr	r3, [pc, #108]	@ (8002c60 <HAL_RCC_OscConfig+0x240>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f003 0302 	and.w	r3, r3, #2
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d1f0      	bne.n	8002be0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f003 0308 	and.w	r3, r3, #8
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d036      	beq.n	8002c78 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	695b      	ldr	r3, [r3, #20]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d016      	beq.n	8002c40 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c12:	4b15      	ldr	r3, [pc, #84]	@ (8002c68 <HAL_RCC_OscConfig+0x248>)
 8002c14:	2201      	movs	r2, #1
 8002c16:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c18:	f7ff fb2e 	bl	8002278 <HAL_GetTick>
 8002c1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c1e:	e008      	b.n	8002c32 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c20:	f7ff fb2a 	bl	8002278 <HAL_GetTick>
 8002c24:	4602      	mov	r2, r0
 8002c26:	693b      	ldr	r3, [r7, #16]
 8002c28:	1ad3      	subs	r3, r2, r3
 8002c2a:	2b02      	cmp	r3, #2
 8002c2c:	d901      	bls.n	8002c32 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002c2e:	2303      	movs	r3, #3
 8002c30:	e167      	b.n	8002f02 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c32:	4b0b      	ldr	r3, [pc, #44]	@ (8002c60 <HAL_RCC_OscConfig+0x240>)
 8002c34:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c36:	f003 0302 	and.w	r3, r3, #2
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d0f0      	beq.n	8002c20 <HAL_RCC_OscConfig+0x200>
 8002c3e:	e01b      	b.n	8002c78 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c40:	4b09      	ldr	r3, [pc, #36]	@ (8002c68 <HAL_RCC_OscConfig+0x248>)
 8002c42:	2200      	movs	r2, #0
 8002c44:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c46:	f7ff fb17 	bl	8002278 <HAL_GetTick>
 8002c4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c4c:	e00e      	b.n	8002c6c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c4e:	f7ff fb13 	bl	8002278 <HAL_GetTick>
 8002c52:	4602      	mov	r2, r0
 8002c54:	693b      	ldr	r3, [r7, #16]
 8002c56:	1ad3      	subs	r3, r2, r3
 8002c58:	2b02      	cmp	r3, #2
 8002c5a:	d907      	bls.n	8002c6c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002c5c:	2303      	movs	r3, #3
 8002c5e:	e150      	b.n	8002f02 <HAL_RCC_OscConfig+0x4e2>
 8002c60:	40023800 	.word	0x40023800
 8002c64:	42470000 	.word	0x42470000
 8002c68:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c6c:	4b88      	ldr	r3, [pc, #544]	@ (8002e90 <HAL_RCC_OscConfig+0x470>)
 8002c6e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c70:	f003 0302 	and.w	r3, r3, #2
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d1ea      	bne.n	8002c4e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f003 0304 	and.w	r3, r3, #4
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	f000 8097 	beq.w	8002db4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c86:	2300      	movs	r3, #0
 8002c88:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c8a:	4b81      	ldr	r3, [pc, #516]	@ (8002e90 <HAL_RCC_OscConfig+0x470>)
 8002c8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d10f      	bne.n	8002cb6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c96:	2300      	movs	r3, #0
 8002c98:	60bb      	str	r3, [r7, #8]
 8002c9a:	4b7d      	ldr	r3, [pc, #500]	@ (8002e90 <HAL_RCC_OscConfig+0x470>)
 8002c9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c9e:	4a7c      	ldr	r2, [pc, #496]	@ (8002e90 <HAL_RCC_OscConfig+0x470>)
 8002ca0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ca4:	6413      	str	r3, [r2, #64]	@ 0x40
 8002ca6:	4b7a      	ldr	r3, [pc, #488]	@ (8002e90 <HAL_RCC_OscConfig+0x470>)
 8002ca8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002caa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002cae:	60bb      	str	r3, [r7, #8]
 8002cb0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cb6:	4b77      	ldr	r3, [pc, #476]	@ (8002e94 <HAL_RCC_OscConfig+0x474>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d118      	bne.n	8002cf4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002cc2:	4b74      	ldr	r3, [pc, #464]	@ (8002e94 <HAL_RCC_OscConfig+0x474>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4a73      	ldr	r2, [pc, #460]	@ (8002e94 <HAL_RCC_OscConfig+0x474>)
 8002cc8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ccc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002cce:	f7ff fad3 	bl	8002278 <HAL_GetTick>
 8002cd2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cd4:	e008      	b.n	8002ce8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cd6:	f7ff facf 	bl	8002278 <HAL_GetTick>
 8002cda:	4602      	mov	r2, r0
 8002cdc:	693b      	ldr	r3, [r7, #16]
 8002cde:	1ad3      	subs	r3, r2, r3
 8002ce0:	2b02      	cmp	r3, #2
 8002ce2:	d901      	bls.n	8002ce8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002ce4:	2303      	movs	r3, #3
 8002ce6:	e10c      	b.n	8002f02 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ce8:	4b6a      	ldr	r3, [pc, #424]	@ (8002e94 <HAL_RCC_OscConfig+0x474>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d0f0      	beq.n	8002cd6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	689b      	ldr	r3, [r3, #8]
 8002cf8:	2b01      	cmp	r3, #1
 8002cfa:	d106      	bne.n	8002d0a <HAL_RCC_OscConfig+0x2ea>
 8002cfc:	4b64      	ldr	r3, [pc, #400]	@ (8002e90 <HAL_RCC_OscConfig+0x470>)
 8002cfe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d00:	4a63      	ldr	r2, [pc, #396]	@ (8002e90 <HAL_RCC_OscConfig+0x470>)
 8002d02:	f043 0301 	orr.w	r3, r3, #1
 8002d06:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d08:	e01c      	b.n	8002d44 <HAL_RCC_OscConfig+0x324>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	689b      	ldr	r3, [r3, #8]
 8002d0e:	2b05      	cmp	r3, #5
 8002d10:	d10c      	bne.n	8002d2c <HAL_RCC_OscConfig+0x30c>
 8002d12:	4b5f      	ldr	r3, [pc, #380]	@ (8002e90 <HAL_RCC_OscConfig+0x470>)
 8002d14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d16:	4a5e      	ldr	r2, [pc, #376]	@ (8002e90 <HAL_RCC_OscConfig+0x470>)
 8002d18:	f043 0304 	orr.w	r3, r3, #4
 8002d1c:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d1e:	4b5c      	ldr	r3, [pc, #368]	@ (8002e90 <HAL_RCC_OscConfig+0x470>)
 8002d20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d22:	4a5b      	ldr	r2, [pc, #364]	@ (8002e90 <HAL_RCC_OscConfig+0x470>)
 8002d24:	f043 0301 	orr.w	r3, r3, #1
 8002d28:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d2a:	e00b      	b.n	8002d44 <HAL_RCC_OscConfig+0x324>
 8002d2c:	4b58      	ldr	r3, [pc, #352]	@ (8002e90 <HAL_RCC_OscConfig+0x470>)
 8002d2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d30:	4a57      	ldr	r2, [pc, #348]	@ (8002e90 <HAL_RCC_OscConfig+0x470>)
 8002d32:	f023 0301 	bic.w	r3, r3, #1
 8002d36:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d38:	4b55      	ldr	r3, [pc, #340]	@ (8002e90 <HAL_RCC_OscConfig+0x470>)
 8002d3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d3c:	4a54      	ldr	r2, [pc, #336]	@ (8002e90 <HAL_RCC_OscConfig+0x470>)
 8002d3e:	f023 0304 	bic.w	r3, r3, #4
 8002d42:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	689b      	ldr	r3, [r3, #8]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d015      	beq.n	8002d78 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d4c:	f7ff fa94 	bl	8002278 <HAL_GetTick>
 8002d50:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d52:	e00a      	b.n	8002d6a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d54:	f7ff fa90 	bl	8002278 <HAL_GetTick>
 8002d58:	4602      	mov	r2, r0
 8002d5a:	693b      	ldr	r3, [r7, #16]
 8002d5c:	1ad3      	subs	r3, r2, r3
 8002d5e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d901      	bls.n	8002d6a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002d66:	2303      	movs	r3, #3
 8002d68:	e0cb      	b.n	8002f02 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d6a:	4b49      	ldr	r3, [pc, #292]	@ (8002e90 <HAL_RCC_OscConfig+0x470>)
 8002d6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d6e:	f003 0302 	and.w	r3, r3, #2
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d0ee      	beq.n	8002d54 <HAL_RCC_OscConfig+0x334>
 8002d76:	e014      	b.n	8002da2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d78:	f7ff fa7e 	bl	8002278 <HAL_GetTick>
 8002d7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d7e:	e00a      	b.n	8002d96 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d80:	f7ff fa7a 	bl	8002278 <HAL_GetTick>
 8002d84:	4602      	mov	r2, r0
 8002d86:	693b      	ldr	r3, [r7, #16]
 8002d88:	1ad3      	subs	r3, r2, r3
 8002d8a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d901      	bls.n	8002d96 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002d92:	2303      	movs	r3, #3
 8002d94:	e0b5      	b.n	8002f02 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d96:	4b3e      	ldr	r3, [pc, #248]	@ (8002e90 <HAL_RCC_OscConfig+0x470>)
 8002d98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d9a:	f003 0302 	and.w	r3, r3, #2
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d1ee      	bne.n	8002d80 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002da2:	7dfb      	ldrb	r3, [r7, #23]
 8002da4:	2b01      	cmp	r3, #1
 8002da6:	d105      	bne.n	8002db4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002da8:	4b39      	ldr	r3, [pc, #228]	@ (8002e90 <HAL_RCC_OscConfig+0x470>)
 8002daa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dac:	4a38      	ldr	r2, [pc, #224]	@ (8002e90 <HAL_RCC_OscConfig+0x470>)
 8002dae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002db2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	699b      	ldr	r3, [r3, #24]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	f000 80a1 	beq.w	8002f00 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002dbe:	4b34      	ldr	r3, [pc, #208]	@ (8002e90 <HAL_RCC_OscConfig+0x470>)
 8002dc0:	689b      	ldr	r3, [r3, #8]
 8002dc2:	f003 030c 	and.w	r3, r3, #12
 8002dc6:	2b08      	cmp	r3, #8
 8002dc8:	d05c      	beq.n	8002e84 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	699b      	ldr	r3, [r3, #24]
 8002dce:	2b02      	cmp	r3, #2
 8002dd0:	d141      	bne.n	8002e56 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dd2:	4b31      	ldr	r3, [pc, #196]	@ (8002e98 <HAL_RCC_OscConfig+0x478>)
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dd8:	f7ff fa4e 	bl	8002278 <HAL_GetTick>
 8002ddc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dde:	e008      	b.n	8002df2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002de0:	f7ff fa4a 	bl	8002278 <HAL_GetTick>
 8002de4:	4602      	mov	r2, r0
 8002de6:	693b      	ldr	r3, [r7, #16]
 8002de8:	1ad3      	subs	r3, r2, r3
 8002dea:	2b02      	cmp	r3, #2
 8002dec:	d901      	bls.n	8002df2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002dee:	2303      	movs	r3, #3
 8002df0:	e087      	b.n	8002f02 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002df2:	4b27      	ldr	r3, [pc, #156]	@ (8002e90 <HAL_RCC_OscConfig+0x470>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d1f0      	bne.n	8002de0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	69da      	ldr	r2, [r3, #28]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6a1b      	ldr	r3, [r3, #32]
 8002e06:	431a      	orrs	r2, r3
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e0c:	019b      	lsls	r3, r3, #6
 8002e0e:	431a      	orrs	r2, r3
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e14:	085b      	lsrs	r3, r3, #1
 8002e16:	3b01      	subs	r3, #1
 8002e18:	041b      	lsls	r3, r3, #16
 8002e1a:	431a      	orrs	r2, r3
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e20:	061b      	lsls	r3, r3, #24
 8002e22:	491b      	ldr	r1, [pc, #108]	@ (8002e90 <HAL_RCC_OscConfig+0x470>)
 8002e24:	4313      	orrs	r3, r2
 8002e26:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e28:	4b1b      	ldr	r3, [pc, #108]	@ (8002e98 <HAL_RCC_OscConfig+0x478>)
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e2e:	f7ff fa23 	bl	8002278 <HAL_GetTick>
 8002e32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e34:	e008      	b.n	8002e48 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e36:	f7ff fa1f 	bl	8002278 <HAL_GetTick>
 8002e3a:	4602      	mov	r2, r0
 8002e3c:	693b      	ldr	r3, [r7, #16]
 8002e3e:	1ad3      	subs	r3, r2, r3
 8002e40:	2b02      	cmp	r3, #2
 8002e42:	d901      	bls.n	8002e48 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002e44:	2303      	movs	r3, #3
 8002e46:	e05c      	b.n	8002f02 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e48:	4b11      	ldr	r3, [pc, #68]	@ (8002e90 <HAL_RCC_OscConfig+0x470>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d0f0      	beq.n	8002e36 <HAL_RCC_OscConfig+0x416>
 8002e54:	e054      	b.n	8002f00 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e56:	4b10      	ldr	r3, [pc, #64]	@ (8002e98 <HAL_RCC_OscConfig+0x478>)
 8002e58:	2200      	movs	r2, #0
 8002e5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e5c:	f7ff fa0c 	bl	8002278 <HAL_GetTick>
 8002e60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e62:	e008      	b.n	8002e76 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e64:	f7ff fa08 	bl	8002278 <HAL_GetTick>
 8002e68:	4602      	mov	r2, r0
 8002e6a:	693b      	ldr	r3, [r7, #16]
 8002e6c:	1ad3      	subs	r3, r2, r3
 8002e6e:	2b02      	cmp	r3, #2
 8002e70:	d901      	bls.n	8002e76 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002e72:	2303      	movs	r3, #3
 8002e74:	e045      	b.n	8002f02 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e76:	4b06      	ldr	r3, [pc, #24]	@ (8002e90 <HAL_RCC_OscConfig+0x470>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d1f0      	bne.n	8002e64 <HAL_RCC_OscConfig+0x444>
 8002e82:	e03d      	b.n	8002f00 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	699b      	ldr	r3, [r3, #24]
 8002e88:	2b01      	cmp	r3, #1
 8002e8a:	d107      	bne.n	8002e9c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	e038      	b.n	8002f02 <HAL_RCC_OscConfig+0x4e2>
 8002e90:	40023800 	.word	0x40023800
 8002e94:	40007000 	.word	0x40007000
 8002e98:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002e9c:	4b1b      	ldr	r3, [pc, #108]	@ (8002f0c <HAL_RCC_OscConfig+0x4ec>)
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	699b      	ldr	r3, [r3, #24]
 8002ea6:	2b01      	cmp	r3, #1
 8002ea8:	d028      	beq.n	8002efc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002eb4:	429a      	cmp	r2, r3
 8002eb6:	d121      	bne.n	8002efc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ec2:	429a      	cmp	r2, r3
 8002ec4:	d11a      	bne.n	8002efc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ec6:	68fa      	ldr	r2, [r7, #12]
 8002ec8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002ecc:	4013      	ands	r3, r2
 8002ece:	687a      	ldr	r2, [r7, #4]
 8002ed0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002ed2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d111      	bne.n	8002efc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ee2:	085b      	lsrs	r3, r3, #1
 8002ee4:	3b01      	subs	r3, #1
 8002ee6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ee8:	429a      	cmp	r2, r3
 8002eea:	d107      	bne.n	8002efc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ef6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ef8:	429a      	cmp	r2, r3
 8002efa:	d001      	beq.n	8002f00 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002efc:	2301      	movs	r3, #1
 8002efe:	e000      	b.n	8002f02 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002f00:	2300      	movs	r3, #0
}
 8002f02:	4618      	mov	r0, r3
 8002f04:	3718      	adds	r7, #24
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bd80      	pop	{r7, pc}
 8002f0a:	bf00      	nop
 8002f0c:	40023800 	.word	0x40023800

08002f10 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b084      	sub	sp, #16
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
 8002f18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d101      	bne.n	8002f24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f20:	2301      	movs	r3, #1
 8002f22:	e0cc      	b.n	80030be <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002f24:	4b68      	ldr	r3, [pc, #416]	@ (80030c8 <HAL_RCC_ClockConfig+0x1b8>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f003 0307 	and.w	r3, r3, #7
 8002f2c:	683a      	ldr	r2, [r7, #0]
 8002f2e:	429a      	cmp	r2, r3
 8002f30:	d90c      	bls.n	8002f4c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f32:	4b65      	ldr	r3, [pc, #404]	@ (80030c8 <HAL_RCC_ClockConfig+0x1b8>)
 8002f34:	683a      	ldr	r2, [r7, #0]
 8002f36:	b2d2      	uxtb	r2, r2
 8002f38:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f3a:	4b63      	ldr	r3, [pc, #396]	@ (80030c8 <HAL_RCC_ClockConfig+0x1b8>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f003 0307 	and.w	r3, r3, #7
 8002f42:	683a      	ldr	r2, [r7, #0]
 8002f44:	429a      	cmp	r2, r3
 8002f46:	d001      	beq.n	8002f4c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002f48:	2301      	movs	r3, #1
 8002f4a:	e0b8      	b.n	80030be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f003 0302 	and.w	r3, r3, #2
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d020      	beq.n	8002f9a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f003 0304 	and.w	r3, r3, #4
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d005      	beq.n	8002f70 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f64:	4b59      	ldr	r3, [pc, #356]	@ (80030cc <HAL_RCC_ClockConfig+0x1bc>)
 8002f66:	689b      	ldr	r3, [r3, #8]
 8002f68:	4a58      	ldr	r2, [pc, #352]	@ (80030cc <HAL_RCC_ClockConfig+0x1bc>)
 8002f6a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002f6e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f003 0308 	and.w	r3, r3, #8
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d005      	beq.n	8002f88 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f7c:	4b53      	ldr	r3, [pc, #332]	@ (80030cc <HAL_RCC_ClockConfig+0x1bc>)
 8002f7e:	689b      	ldr	r3, [r3, #8]
 8002f80:	4a52      	ldr	r2, [pc, #328]	@ (80030cc <HAL_RCC_ClockConfig+0x1bc>)
 8002f82:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002f86:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f88:	4b50      	ldr	r3, [pc, #320]	@ (80030cc <HAL_RCC_ClockConfig+0x1bc>)
 8002f8a:	689b      	ldr	r3, [r3, #8]
 8002f8c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	689b      	ldr	r3, [r3, #8]
 8002f94:	494d      	ldr	r1, [pc, #308]	@ (80030cc <HAL_RCC_ClockConfig+0x1bc>)
 8002f96:	4313      	orrs	r3, r2
 8002f98:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f003 0301 	and.w	r3, r3, #1
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d044      	beq.n	8003030 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	2b01      	cmp	r3, #1
 8002fac:	d107      	bne.n	8002fbe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fae:	4b47      	ldr	r3, [pc, #284]	@ (80030cc <HAL_RCC_ClockConfig+0x1bc>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d119      	bne.n	8002fee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	e07f      	b.n	80030be <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	2b02      	cmp	r3, #2
 8002fc4:	d003      	beq.n	8002fce <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002fca:	2b03      	cmp	r3, #3
 8002fcc:	d107      	bne.n	8002fde <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fce:	4b3f      	ldr	r3, [pc, #252]	@ (80030cc <HAL_RCC_ClockConfig+0x1bc>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d109      	bne.n	8002fee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	e06f      	b.n	80030be <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fde:	4b3b      	ldr	r3, [pc, #236]	@ (80030cc <HAL_RCC_ClockConfig+0x1bc>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f003 0302 	and.w	r3, r3, #2
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d101      	bne.n	8002fee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fea:	2301      	movs	r3, #1
 8002fec:	e067      	b.n	80030be <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002fee:	4b37      	ldr	r3, [pc, #220]	@ (80030cc <HAL_RCC_ClockConfig+0x1bc>)
 8002ff0:	689b      	ldr	r3, [r3, #8]
 8002ff2:	f023 0203 	bic.w	r2, r3, #3
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	4934      	ldr	r1, [pc, #208]	@ (80030cc <HAL_RCC_ClockConfig+0x1bc>)
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003000:	f7ff f93a 	bl	8002278 <HAL_GetTick>
 8003004:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003006:	e00a      	b.n	800301e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003008:	f7ff f936 	bl	8002278 <HAL_GetTick>
 800300c:	4602      	mov	r2, r0
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	1ad3      	subs	r3, r2, r3
 8003012:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003016:	4293      	cmp	r3, r2
 8003018:	d901      	bls.n	800301e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800301a:	2303      	movs	r3, #3
 800301c:	e04f      	b.n	80030be <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800301e:	4b2b      	ldr	r3, [pc, #172]	@ (80030cc <HAL_RCC_ClockConfig+0x1bc>)
 8003020:	689b      	ldr	r3, [r3, #8]
 8003022:	f003 020c 	and.w	r2, r3, #12
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	009b      	lsls	r3, r3, #2
 800302c:	429a      	cmp	r2, r3
 800302e:	d1eb      	bne.n	8003008 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003030:	4b25      	ldr	r3, [pc, #148]	@ (80030c8 <HAL_RCC_ClockConfig+0x1b8>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f003 0307 	and.w	r3, r3, #7
 8003038:	683a      	ldr	r2, [r7, #0]
 800303a:	429a      	cmp	r2, r3
 800303c:	d20c      	bcs.n	8003058 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800303e:	4b22      	ldr	r3, [pc, #136]	@ (80030c8 <HAL_RCC_ClockConfig+0x1b8>)
 8003040:	683a      	ldr	r2, [r7, #0]
 8003042:	b2d2      	uxtb	r2, r2
 8003044:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003046:	4b20      	ldr	r3, [pc, #128]	@ (80030c8 <HAL_RCC_ClockConfig+0x1b8>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f003 0307 	and.w	r3, r3, #7
 800304e:	683a      	ldr	r2, [r7, #0]
 8003050:	429a      	cmp	r2, r3
 8003052:	d001      	beq.n	8003058 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003054:	2301      	movs	r3, #1
 8003056:	e032      	b.n	80030be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f003 0304 	and.w	r3, r3, #4
 8003060:	2b00      	cmp	r3, #0
 8003062:	d008      	beq.n	8003076 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003064:	4b19      	ldr	r3, [pc, #100]	@ (80030cc <HAL_RCC_ClockConfig+0x1bc>)
 8003066:	689b      	ldr	r3, [r3, #8]
 8003068:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	68db      	ldr	r3, [r3, #12]
 8003070:	4916      	ldr	r1, [pc, #88]	@ (80030cc <HAL_RCC_ClockConfig+0x1bc>)
 8003072:	4313      	orrs	r3, r2
 8003074:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f003 0308 	and.w	r3, r3, #8
 800307e:	2b00      	cmp	r3, #0
 8003080:	d009      	beq.n	8003096 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003082:	4b12      	ldr	r3, [pc, #72]	@ (80030cc <HAL_RCC_ClockConfig+0x1bc>)
 8003084:	689b      	ldr	r3, [r3, #8]
 8003086:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	691b      	ldr	r3, [r3, #16]
 800308e:	00db      	lsls	r3, r3, #3
 8003090:	490e      	ldr	r1, [pc, #56]	@ (80030cc <HAL_RCC_ClockConfig+0x1bc>)
 8003092:	4313      	orrs	r3, r2
 8003094:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003096:	f000 f821 	bl	80030dc <HAL_RCC_GetSysClockFreq>
 800309a:	4602      	mov	r2, r0
 800309c:	4b0b      	ldr	r3, [pc, #44]	@ (80030cc <HAL_RCC_ClockConfig+0x1bc>)
 800309e:	689b      	ldr	r3, [r3, #8]
 80030a0:	091b      	lsrs	r3, r3, #4
 80030a2:	f003 030f 	and.w	r3, r3, #15
 80030a6:	490a      	ldr	r1, [pc, #40]	@ (80030d0 <HAL_RCC_ClockConfig+0x1c0>)
 80030a8:	5ccb      	ldrb	r3, [r1, r3]
 80030aa:	fa22 f303 	lsr.w	r3, r2, r3
 80030ae:	4a09      	ldr	r2, [pc, #36]	@ (80030d4 <HAL_RCC_ClockConfig+0x1c4>)
 80030b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80030b2:	4b09      	ldr	r3, [pc, #36]	@ (80030d8 <HAL_RCC_ClockConfig+0x1c8>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4618      	mov	r0, r3
 80030b8:	f7ff f89a 	bl	80021f0 <HAL_InitTick>

  return HAL_OK;
 80030bc:	2300      	movs	r3, #0
}
 80030be:	4618      	mov	r0, r3
 80030c0:	3710      	adds	r7, #16
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bd80      	pop	{r7, pc}
 80030c6:	bf00      	nop
 80030c8:	40023c00 	.word	0x40023c00
 80030cc:	40023800 	.word	0x40023800
 80030d0:	08005274 	.word	0x08005274
 80030d4:	200000bc 	.word	0x200000bc
 80030d8:	200000c0 	.word	0x200000c0

080030dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80030e0:	b094      	sub	sp, #80	@ 0x50
 80030e2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80030e4:	2300      	movs	r3, #0
 80030e6:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80030e8:	2300      	movs	r3, #0
 80030ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80030ec:	2300      	movs	r3, #0
 80030ee:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80030f0:	2300      	movs	r3, #0
 80030f2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80030f4:	4b79      	ldr	r3, [pc, #484]	@ (80032dc <HAL_RCC_GetSysClockFreq+0x200>)
 80030f6:	689b      	ldr	r3, [r3, #8]
 80030f8:	f003 030c 	and.w	r3, r3, #12
 80030fc:	2b08      	cmp	r3, #8
 80030fe:	d00d      	beq.n	800311c <HAL_RCC_GetSysClockFreq+0x40>
 8003100:	2b08      	cmp	r3, #8
 8003102:	f200 80e1 	bhi.w	80032c8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003106:	2b00      	cmp	r3, #0
 8003108:	d002      	beq.n	8003110 <HAL_RCC_GetSysClockFreq+0x34>
 800310a:	2b04      	cmp	r3, #4
 800310c:	d003      	beq.n	8003116 <HAL_RCC_GetSysClockFreq+0x3a>
 800310e:	e0db      	b.n	80032c8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003110:	4b73      	ldr	r3, [pc, #460]	@ (80032e0 <HAL_RCC_GetSysClockFreq+0x204>)
 8003112:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003114:	e0db      	b.n	80032ce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003116:	4b73      	ldr	r3, [pc, #460]	@ (80032e4 <HAL_RCC_GetSysClockFreq+0x208>)
 8003118:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800311a:	e0d8      	b.n	80032ce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800311c:	4b6f      	ldr	r3, [pc, #444]	@ (80032dc <HAL_RCC_GetSysClockFreq+0x200>)
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003124:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003126:	4b6d      	ldr	r3, [pc, #436]	@ (80032dc <HAL_RCC_GetSysClockFreq+0x200>)
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800312e:	2b00      	cmp	r3, #0
 8003130:	d063      	beq.n	80031fa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003132:	4b6a      	ldr	r3, [pc, #424]	@ (80032dc <HAL_RCC_GetSysClockFreq+0x200>)
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	099b      	lsrs	r3, r3, #6
 8003138:	2200      	movs	r2, #0
 800313a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800313c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800313e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003140:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003144:	633b      	str	r3, [r7, #48]	@ 0x30
 8003146:	2300      	movs	r3, #0
 8003148:	637b      	str	r3, [r7, #52]	@ 0x34
 800314a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800314e:	4622      	mov	r2, r4
 8003150:	462b      	mov	r3, r5
 8003152:	f04f 0000 	mov.w	r0, #0
 8003156:	f04f 0100 	mov.w	r1, #0
 800315a:	0159      	lsls	r1, r3, #5
 800315c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003160:	0150      	lsls	r0, r2, #5
 8003162:	4602      	mov	r2, r0
 8003164:	460b      	mov	r3, r1
 8003166:	4621      	mov	r1, r4
 8003168:	1a51      	subs	r1, r2, r1
 800316a:	6139      	str	r1, [r7, #16]
 800316c:	4629      	mov	r1, r5
 800316e:	eb63 0301 	sbc.w	r3, r3, r1
 8003172:	617b      	str	r3, [r7, #20]
 8003174:	f04f 0200 	mov.w	r2, #0
 8003178:	f04f 0300 	mov.w	r3, #0
 800317c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003180:	4659      	mov	r1, fp
 8003182:	018b      	lsls	r3, r1, #6
 8003184:	4651      	mov	r1, sl
 8003186:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800318a:	4651      	mov	r1, sl
 800318c:	018a      	lsls	r2, r1, #6
 800318e:	4651      	mov	r1, sl
 8003190:	ebb2 0801 	subs.w	r8, r2, r1
 8003194:	4659      	mov	r1, fp
 8003196:	eb63 0901 	sbc.w	r9, r3, r1
 800319a:	f04f 0200 	mov.w	r2, #0
 800319e:	f04f 0300 	mov.w	r3, #0
 80031a2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80031a6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80031aa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80031ae:	4690      	mov	r8, r2
 80031b0:	4699      	mov	r9, r3
 80031b2:	4623      	mov	r3, r4
 80031b4:	eb18 0303 	adds.w	r3, r8, r3
 80031b8:	60bb      	str	r3, [r7, #8]
 80031ba:	462b      	mov	r3, r5
 80031bc:	eb49 0303 	adc.w	r3, r9, r3
 80031c0:	60fb      	str	r3, [r7, #12]
 80031c2:	f04f 0200 	mov.w	r2, #0
 80031c6:	f04f 0300 	mov.w	r3, #0
 80031ca:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80031ce:	4629      	mov	r1, r5
 80031d0:	024b      	lsls	r3, r1, #9
 80031d2:	4621      	mov	r1, r4
 80031d4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80031d8:	4621      	mov	r1, r4
 80031da:	024a      	lsls	r2, r1, #9
 80031dc:	4610      	mov	r0, r2
 80031de:	4619      	mov	r1, r3
 80031e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80031e2:	2200      	movs	r2, #0
 80031e4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80031e6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80031e8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80031ec:	f7fd f840 	bl	8000270 <__aeabi_uldivmod>
 80031f0:	4602      	mov	r2, r0
 80031f2:	460b      	mov	r3, r1
 80031f4:	4613      	mov	r3, r2
 80031f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80031f8:	e058      	b.n	80032ac <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031fa:	4b38      	ldr	r3, [pc, #224]	@ (80032dc <HAL_RCC_GetSysClockFreq+0x200>)
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	099b      	lsrs	r3, r3, #6
 8003200:	2200      	movs	r2, #0
 8003202:	4618      	mov	r0, r3
 8003204:	4611      	mov	r1, r2
 8003206:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800320a:	623b      	str	r3, [r7, #32]
 800320c:	2300      	movs	r3, #0
 800320e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003210:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003214:	4642      	mov	r2, r8
 8003216:	464b      	mov	r3, r9
 8003218:	f04f 0000 	mov.w	r0, #0
 800321c:	f04f 0100 	mov.w	r1, #0
 8003220:	0159      	lsls	r1, r3, #5
 8003222:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003226:	0150      	lsls	r0, r2, #5
 8003228:	4602      	mov	r2, r0
 800322a:	460b      	mov	r3, r1
 800322c:	4641      	mov	r1, r8
 800322e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003232:	4649      	mov	r1, r9
 8003234:	eb63 0b01 	sbc.w	fp, r3, r1
 8003238:	f04f 0200 	mov.w	r2, #0
 800323c:	f04f 0300 	mov.w	r3, #0
 8003240:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003244:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003248:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800324c:	ebb2 040a 	subs.w	r4, r2, sl
 8003250:	eb63 050b 	sbc.w	r5, r3, fp
 8003254:	f04f 0200 	mov.w	r2, #0
 8003258:	f04f 0300 	mov.w	r3, #0
 800325c:	00eb      	lsls	r3, r5, #3
 800325e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003262:	00e2      	lsls	r2, r4, #3
 8003264:	4614      	mov	r4, r2
 8003266:	461d      	mov	r5, r3
 8003268:	4643      	mov	r3, r8
 800326a:	18e3      	adds	r3, r4, r3
 800326c:	603b      	str	r3, [r7, #0]
 800326e:	464b      	mov	r3, r9
 8003270:	eb45 0303 	adc.w	r3, r5, r3
 8003274:	607b      	str	r3, [r7, #4]
 8003276:	f04f 0200 	mov.w	r2, #0
 800327a:	f04f 0300 	mov.w	r3, #0
 800327e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003282:	4629      	mov	r1, r5
 8003284:	028b      	lsls	r3, r1, #10
 8003286:	4621      	mov	r1, r4
 8003288:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800328c:	4621      	mov	r1, r4
 800328e:	028a      	lsls	r2, r1, #10
 8003290:	4610      	mov	r0, r2
 8003292:	4619      	mov	r1, r3
 8003294:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003296:	2200      	movs	r2, #0
 8003298:	61bb      	str	r3, [r7, #24]
 800329a:	61fa      	str	r2, [r7, #28]
 800329c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80032a0:	f7fc ffe6 	bl	8000270 <__aeabi_uldivmod>
 80032a4:	4602      	mov	r2, r0
 80032a6:	460b      	mov	r3, r1
 80032a8:	4613      	mov	r3, r2
 80032aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80032ac:	4b0b      	ldr	r3, [pc, #44]	@ (80032dc <HAL_RCC_GetSysClockFreq+0x200>)
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	0c1b      	lsrs	r3, r3, #16
 80032b2:	f003 0303 	and.w	r3, r3, #3
 80032b6:	3301      	adds	r3, #1
 80032b8:	005b      	lsls	r3, r3, #1
 80032ba:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80032bc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80032be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80032c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80032c4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80032c6:	e002      	b.n	80032ce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80032c8:	4b05      	ldr	r3, [pc, #20]	@ (80032e0 <HAL_RCC_GetSysClockFreq+0x204>)
 80032ca:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80032cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80032ce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80032d0:	4618      	mov	r0, r3
 80032d2:	3750      	adds	r7, #80	@ 0x50
 80032d4:	46bd      	mov	sp, r7
 80032d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80032da:	bf00      	nop
 80032dc:	40023800 	.word	0x40023800
 80032e0:	00f42400 	.word	0x00f42400
 80032e4:	007a1200 	.word	0x007a1200

080032e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80032e8:	b480      	push	{r7}
 80032ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80032ec:	4b03      	ldr	r3, [pc, #12]	@ (80032fc <HAL_RCC_GetHCLKFreq+0x14>)
 80032ee:	681b      	ldr	r3, [r3, #0]
}
 80032f0:	4618      	mov	r0, r3
 80032f2:	46bd      	mov	sp, r7
 80032f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f8:	4770      	bx	lr
 80032fa:	bf00      	nop
 80032fc:	200000bc 	.word	0x200000bc

08003300 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003304:	f7ff fff0 	bl	80032e8 <HAL_RCC_GetHCLKFreq>
 8003308:	4602      	mov	r2, r0
 800330a:	4b05      	ldr	r3, [pc, #20]	@ (8003320 <HAL_RCC_GetPCLK1Freq+0x20>)
 800330c:	689b      	ldr	r3, [r3, #8]
 800330e:	0a9b      	lsrs	r3, r3, #10
 8003310:	f003 0307 	and.w	r3, r3, #7
 8003314:	4903      	ldr	r1, [pc, #12]	@ (8003324 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003316:	5ccb      	ldrb	r3, [r1, r3]
 8003318:	fa22 f303 	lsr.w	r3, r2, r3
}
 800331c:	4618      	mov	r0, r3
 800331e:	bd80      	pop	{r7, pc}
 8003320:	40023800 	.word	0x40023800
 8003324:	08005284 	.word	0x08005284

08003328 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800332c:	f7ff ffdc 	bl	80032e8 <HAL_RCC_GetHCLKFreq>
 8003330:	4602      	mov	r2, r0
 8003332:	4b05      	ldr	r3, [pc, #20]	@ (8003348 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003334:	689b      	ldr	r3, [r3, #8]
 8003336:	0b5b      	lsrs	r3, r3, #13
 8003338:	f003 0307 	and.w	r3, r3, #7
 800333c:	4903      	ldr	r1, [pc, #12]	@ (800334c <HAL_RCC_GetPCLK2Freq+0x24>)
 800333e:	5ccb      	ldrb	r3, [r1, r3]
 8003340:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003344:	4618      	mov	r0, r3
 8003346:	bd80      	pop	{r7, pc}
 8003348:	40023800 	.word	0x40023800
 800334c:	08005284 	.word	0x08005284

08003350 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b082      	sub	sp, #8
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d101      	bne.n	8003362 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800335e:	2301      	movs	r3, #1
 8003360:	e041      	b.n	80033e6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003368:	b2db      	uxtb	r3, r3
 800336a:	2b00      	cmp	r3, #0
 800336c:	d106      	bne.n	800337c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2200      	movs	r2, #0
 8003372:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003376:	6878      	ldr	r0, [r7, #4]
 8003378:	f7fe fafe 	bl	8001978 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2202      	movs	r2, #2
 8003380:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681a      	ldr	r2, [r3, #0]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	3304      	adds	r3, #4
 800338c:	4619      	mov	r1, r3
 800338e:	4610      	mov	r0, r2
 8003390:	f000 f9b6 	bl	8003700 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2201      	movs	r2, #1
 8003398:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2201      	movs	r2, #1
 80033a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2201      	movs	r2, #1
 80033a8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2201      	movs	r2, #1
 80033b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2201      	movs	r2, #1
 80033b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2201      	movs	r2, #1
 80033c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2201      	movs	r2, #1
 80033c8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2201      	movs	r2, #1
 80033d0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2201      	movs	r2, #1
 80033d8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2201      	movs	r2, #1
 80033e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80033e4:	2300      	movs	r3, #0
}
 80033e6:	4618      	mov	r0, r3
 80033e8:	3708      	adds	r7, #8
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bd80      	pop	{r7, pc}
	...

080033f0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80033f0:	b480      	push	{r7}
 80033f2:	b085      	sub	sp, #20
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80033fe:	b2db      	uxtb	r3, r3
 8003400:	2b01      	cmp	r3, #1
 8003402:	d001      	beq.n	8003408 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003404:	2301      	movs	r3, #1
 8003406:	e04e      	b.n	80034a6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2202      	movs	r2, #2
 800340c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	68da      	ldr	r2, [r3, #12]
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f042 0201 	orr.w	r2, r2, #1
 800341e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a23      	ldr	r2, [pc, #140]	@ (80034b4 <HAL_TIM_Base_Start_IT+0xc4>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d022      	beq.n	8003470 <HAL_TIM_Base_Start_IT+0x80>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003432:	d01d      	beq.n	8003470 <HAL_TIM_Base_Start_IT+0x80>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4a1f      	ldr	r2, [pc, #124]	@ (80034b8 <HAL_TIM_Base_Start_IT+0xc8>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d018      	beq.n	8003470 <HAL_TIM_Base_Start_IT+0x80>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4a1e      	ldr	r2, [pc, #120]	@ (80034bc <HAL_TIM_Base_Start_IT+0xcc>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d013      	beq.n	8003470 <HAL_TIM_Base_Start_IT+0x80>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4a1c      	ldr	r2, [pc, #112]	@ (80034c0 <HAL_TIM_Base_Start_IT+0xd0>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d00e      	beq.n	8003470 <HAL_TIM_Base_Start_IT+0x80>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4a1b      	ldr	r2, [pc, #108]	@ (80034c4 <HAL_TIM_Base_Start_IT+0xd4>)
 8003458:	4293      	cmp	r3, r2
 800345a:	d009      	beq.n	8003470 <HAL_TIM_Base_Start_IT+0x80>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4a19      	ldr	r2, [pc, #100]	@ (80034c8 <HAL_TIM_Base_Start_IT+0xd8>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d004      	beq.n	8003470 <HAL_TIM_Base_Start_IT+0x80>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4a18      	ldr	r2, [pc, #96]	@ (80034cc <HAL_TIM_Base_Start_IT+0xdc>)
 800346c:	4293      	cmp	r3, r2
 800346e:	d111      	bne.n	8003494 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	689b      	ldr	r3, [r3, #8]
 8003476:	f003 0307 	and.w	r3, r3, #7
 800347a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	2b06      	cmp	r3, #6
 8003480:	d010      	beq.n	80034a4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	681a      	ldr	r2, [r3, #0]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f042 0201 	orr.w	r2, r2, #1
 8003490:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003492:	e007      	b.n	80034a4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	681a      	ldr	r2, [r3, #0]
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f042 0201 	orr.w	r2, r2, #1
 80034a2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80034a4:	2300      	movs	r3, #0
}
 80034a6:	4618      	mov	r0, r3
 80034a8:	3714      	adds	r7, #20
 80034aa:	46bd      	mov	sp, r7
 80034ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b0:	4770      	bx	lr
 80034b2:	bf00      	nop
 80034b4:	40010000 	.word	0x40010000
 80034b8:	40000400 	.word	0x40000400
 80034bc:	40000800 	.word	0x40000800
 80034c0:	40000c00 	.word	0x40000c00
 80034c4:	40010400 	.word	0x40010400
 80034c8:	40014000 	.word	0x40014000
 80034cc:	40001800 	.word	0x40001800

080034d0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b084      	sub	sp, #16
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	68db      	ldr	r3, [r3, #12]
 80034de:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	691b      	ldr	r3, [r3, #16]
 80034e6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80034e8:	68bb      	ldr	r3, [r7, #8]
 80034ea:	f003 0302 	and.w	r3, r3, #2
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d020      	beq.n	8003534 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	f003 0302 	and.w	r3, r3, #2
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d01b      	beq.n	8003534 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f06f 0202 	mvn.w	r2, #2
 8003504:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2201      	movs	r2, #1
 800350a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	699b      	ldr	r3, [r3, #24]
 8003512:	f003 0303 	and.w	r3, r3, #3
 8003516:	2b00      	cmp	r3, #0
 8003518:	d003      	beq.n	8003522 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800351a:	6878      	ldr	r0, [r7, #4]
 800351c:	f000 f8d2 	bl	80036c4 <HAL_TIM_IC_CaptureCallback>
 8003520:	e005      	b.n	800352e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003522:	6878      	ldr	r0, [r7, #4]
 8003524:	f000 f8c4 	bl	80036b0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003528:	6878      	ldr	r0, [r7, #4]
 800352a:	f000 f8d5 	bl	80036d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2200      	movs	r2, #0
 8003532:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003534:	68bb      	ldr	r3, [r7, #8]
 8003536:	f003 0304 	and.w	r3, r3, #4
 800353a:	2b00      	cmp	r3, #0
 800353c:	d020      	beq.n	8003580 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	f003 0304 	and.w	r3, r3, #4
 8003544:	2b00      	cmp	r3, #0
 8003546:	d01b      	beq.n	8003580 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f06f 0204 	mvn.w	r2, #4
 8003550:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2202      	movs	r2, #2
 8003556:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	699b      	ldr	r3, [r3, #24]
 800355e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003562:	2b00      	cmp	r3, #0
 8003564:	d003      	beq.n	800356e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003566:	6878      	ldr	r0, [r7, #4]
 8003568:	f000 f8ac 	bl	80036c4 <HAL_TIM_IC_CaptureCallback>
 800356c:	e005      	b.n	800357a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800356e:	6878      	ldr	r0, [r7, #4]
 8003570:	f000 f89e 	bl	80036b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003574:	6878      	ldr	r0, [r7, #4]
 8003576:	f000 f8af 	bl	80036d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2200      	movs	r2, #0
 800357e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003580:	68bb      	ldr	r3, [r7, #8]
 8003582:	f003 0308 	and.w	r3, r3, #8
 8003586:	2b00      	cmp	r3, #0
 8003588:	d020      	beq.n	80035cc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	f003 0308 	and.w	r3, r3, #8
 8003590:	2b00      	cmp	r3, #0
 8003592:	d01b      	beq.n	80035cc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f06f 0208 	mvn.w	r2, #8
 800359c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2204      	movs	r2, #4
 80035a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	69db      	ldr	r3, [r3, #28]
 80035aa:	f003 0303 	and.w	r3, r3, #3
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d003      	beq.n	80035ba <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035b2:	6878      	ldr	r0, [r7, #4]
 80035b4:	f000 f886 	bl	80036c4 <HAL_TIM_IC_CaptureCallback>
 80035b8:	e005      	b.n	80035c6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035ba:	6878      	ldr	r0, [r7, #4]
 80035bc:	f000 f878 	bl	80036b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035c0:	6878      	ldr	r0, [r7, #4]
 80035c2:	f000 f889 	bl	80036d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2200      	movs	r2, #0
 80035ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80035cc:	68bb      	ldr	r3, [r7, #8]
 80035ce:	f003 0310 	and.w	r3, r3, #16
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d020      	beq.n	8003618 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	f003 0310 	and.w	r3, r3, #16
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d01b      	beq.n	8003618 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f06f 0210 	mvn.w	r2, #16
 80035e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2208      	movs	r2, #8
 80035ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	69db      	ldr	r3, [r3, #28]
 80035f6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d003      	beq.n	8003606 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035fe:	6878      	ldr	r0, [r7, #4]
 8003600:	f000 f860 	bl	80036c4 <HAL_TIM_IC_CaptureCallback>
 8003604:	e005      	b.n	8003612 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003606:	6878      	ldr	r0, [r7, #4]
 8003608:	f000 f852 	bl	80036b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800360c:	6878      	ldr	r0, [r7, #4]
 800360e:	f000 f863 	bl	80036d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2200      	movs	r2, #0
 8003616:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003618:	68bb      	ldr	r3, [r7, #8]
 800361a:	f003 0301 	and.w	r3, r3, #1
 800361e:	2b00      	cmp	r3, #0
 8003620:	d00c      	beq.n	800363c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	f003 0301 	and.w	r3, r3, #1
 8003628:	2b00      	cmp	r3, #0
 800362a:	d007      	beq.n	800363c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f06f 0201 	mvn.w	r2, #1
 8003634:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003636:	6878      	ldr	r0, [r7, #4]
 8003638:	f7fe f8de 	bl	80017f8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800363c:	68bb      	ldr	r3, [r7, #8]
 800363e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003642:	2b00      	cmp	r3, #0
 8003644:	d00c      	beq.n	8003660 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800364c:	2b00      	cmp	r3, #0
 800364e:	d007      	beq.n	8003660 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003658:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800365a:	6878      	ldr	r0, [r7, #4]
 800365c:	f000 f982 	bl	8003964 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003660:	68bb      	ldr	r3, [r7, #8]
 8003662:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003666:	2b00      	cmp	r3, #0
 8003668:	d00c      	beq.n	8003684 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003670:	2b00      	cmp	r3, #0
 8003672:	d007      	beq.n	8003684 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800367c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800367e:	6878      	ldr	r0, [r7, #4]
 8003680:	f000 f834 	bl	80036ec <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003684:	68bb      	ldr	r3, [r7, #8]
 8003686:	f003 0320 	and.w	r3, r3, #32
 800368a:	2b00      	cmp	r3, #0
 800368c:	d00c      	beq.n	80036a8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	f003 0320 	and.w	r3, r3, #32
 8003694:	2b00      	cmp	r3, #0
 8003696:	d007      	beq.n	80036a8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f06f 0220 	mvn.w	r2, #32
 80036a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80036a2:	6878      	ldr	r0, [r7, #4]
 80036a4:	f000 f954 	bl	8003950 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80036a8:	bf00      	nop
 80036aa:	3710      	adds	r7, #16
 80036ac:	46bd      	mov	sp, r7
 80036ae:	bd80      	pop	{r7, pc}

080036b0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80036b0:	b480      	push	{r7}
 80036b2:	b083      	sub	sp, #12
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80036b8:	bf00      	nop
 80036ba:	370c      	adds	r7, #12
 80036bc:	46bd      	mov	sp, r7
 80036be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c2:	4770      	bx	lr

080036c4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80036c4:	b480      	push	{r7}
 80036c6:	b083      	sub	sp, #12
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80036cc:	bf00      	nop
 80036ce:	370c      	adds	r7, #12
 80036d0:	46bd      	mov	sp, r7
 80036d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d6:	4770      	bx	lr

080036d8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80036d8:	b480      	push	{r7}
 80036da:	b083      	sub	sp, #12
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80036e0:	bf00      	nop
 80036e2:	370c      	adds	r7, #12
 80036e4:	46bd      	mov	sp, r7
 80036e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ea:	4770      	bx	lr

080036ec <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80036ec:	b480      	push	{r7}
 80036ee:	b083      	sub	sp, #12
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80036f4:	bf00      	nop
 80036f6:	370c      	adds	r7, #12
 80036f8:	46bd      	mov	sp, r7
 80036fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fe:	4770      	bx	lr

08003700 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003700:	b480      	push	{r7}
 8003702:	b085      	sub	sp, #20
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
 8003708:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	4a46      	ldr	r2, [pc, #280]	@ (800382c <TIM_Base_SetConfig+0x12c>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d013      	beq.n	8003740 <TIM_Base_SetConfig+0x40>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800371e:	d00f      	beq.n	8003740 <TIM_Base_SetConfig+0x40>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	4a43      	ldr	r2, [pc, #268]	@ (8003830 <TIM_Base_SetConfig+0x130>)
 8003724:	4293      	cmp	r3, r2
 8003726:	d00b      	beq.n	8003740 <TIM_Base_SetConfig+0x40>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	4a42      	ldr	r2, [pc, #264]	@ (8003834 <TIM_Base_SetConfig+0x134>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d007      	beq.n	8003740 <TIM_Base_SetConfig+0x40>
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	4a41      	ldr	r2, [pc, #260]	@ (8003838 <TIM_Base_SetConfig+0x138>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d003      	beq.n	8003740 <TIM_Base_SetConfig+0x40>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	4a40      	ldr	r2, [pc, #256]	@ (800383c <TIM_Base_SetConfig+0x13c>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d108      	bne.n	8003752 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003746:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	68fa      	ldr	r2, [r7, #12]
 800374e:	4313      	orrs	r3, r2
 8003750:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	4a35      	ldr	r2, [pc, #212]	@ (800382c <TIM_Base_SetConfig+0x12c>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d02b      	beq.n	80037b2 <TIM_Base_SetConfig+0xb2>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003760:	d027      	beq.n	80037b2 <TIM_Base_SetConfig+0xb2>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	4a32      	ldr	r2, [pc, #200]	@ (8003830 <TIM_Base_SetConfig+0x130>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d023      	beq.n	80037b2 <TIM_Base_SetConfig+0xb2>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	4a31      	ldr	r2, [pc, #196]	@ (8003834 <TIM_Base_SetConfig+0x134>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d01f      	beq.n	80037b2 <TIM_Base_SetConfig+0xb2>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	4a30      	ldr	r2, [pc, #192]	@ (8003838 <TIM_Base_SetConfig+0x138>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d01b      	beq.n	80037b2 <TIM_Base_SetConfig+0xb2>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	4a2f      	ldr	r2, [pc, #188]	@ (800383c <TIM_Base_SetConfig+0x13c>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d017      	beq.n	80037b2 <TIM_Base_SetConfig+0xb2>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	4a2e      	ldr	r2, [pc, #184]	@ (8003840 <TIM_Base_SetConfig+0x140>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d013      	beq.n	80037b2 <TIM_Base_SetConfig+0xb2>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	4a2d      	ldr	r2, [pc, #180]	@ (8003844 <TIM_Base_SetConfig+0x144>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d00f      	beq.n	80037b2 <TIM_Base_SetConfig+0xb2>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	4a2c      	ldr	r2, [pc, #176]	@ (8003848 <TIM_Base_SetConfig+0x148>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d00b      	beq.n	80037b2 <TIM_Base_SetConfig+0xb2>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	4a2b      	ldr	r2, [pc, #172]	@ (800384c <TIM_Base_SetConfig+0x14c>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d007      	beq.n	80037b2 <TIM_Base_SetConfig+0xb2>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	4a2a      	ldr	r2, [pc, #168]	@ (8003850 <TIM_Base_SetConfig+0x150>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d003      	beq.n	80037b2 <TIM_Base_SetConfig+0xb2>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	4a29      	ldr	r2, [pc, #164]	@ (8003854 <TIM_Base_SetConfig+0x154>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d108      	bne.n	80037c4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80037b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	68db      	ldr	r3, [r3, #12]
 80037be:	68fa      	ldr	r2, [r7, #12]
 80037c0:	4313      	orrs	r3, r2
 80037c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	695b      	ldr	r3, [r3, #20]
 80037ce:	4313      	orrs	r3, r2
 80037d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	68fa      	ldr	r2, [r7, #12]
 80037d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	689a      	ldr	r2, [r3, #8]
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	681a      	ldr	r2, [r3, #0]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	4a10      	ldr	r2, [pc, #64]	@ (800382c <TIM_Base_SetConfig+0x12c>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d003      	beq.n	80037f8 <TIM_Base_SetConfig+0xf8>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	4a12      	ldr	r2, [pc, #72]	@ (800383c <TIM_Base_SetConfig+0x13c>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d103      	bne.n	8003800 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	691a      	ldr	r2, [r3, #16]
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2201      	movs	r2, #1
 8003804:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	691b      	ldr	r3, [r3, #16]
 800380a:	f003 0301 	and.w	r3, r3, #1
 800380e:	2b01      	cmp	r3, #1
 8003810:	d105      	bne.n	800381e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	691b      	ldr	r3, [r3, #16]
 8003816:	f023 0201 	bic.w	r2, r3, #1
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	611a      	str	r2, [r3, #16]
  }
}
 800381e:	bf00      	nop
 8003820:	3714      	adds	r7, #20
 8003822:	46bd      	mov	sp, r7
 8003824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003828:	4770      	bx	lr
 800382a:	bf00      	nop
 800382c:	40010000 	.word	0x40010000
 8003830:	40000400 	.word	0x40000400
 8003834:	40000800 	.word	0x40000800
 8003838:	40000c00 	.word	0x40000c00
 800383c:	40010400 	.word	0x40010400
 8003840:	40014000 	.word	0x40014000
 8003844:	40014400 	.word	0x40014400
 8003848:	40014800 	.word	0x40014800
 800384c:	40001800 	.word	0x40001800
 8003850:	40001c00 	.word	0x40001c00
 8003854:	40002000 	.word	0x40002000

08003858 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003858:	b480      	push	{r7}
 800385a:	b085      	sub	sp, #20
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
 8003860:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003868:	2b01      	cmp	r3, #1
 800386a:	d101      	bne.n	8003870 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800386c:	2302      	movs	r3, #2
 800386e:	e05a      	b.n	8003926 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2201      	movs	r2, #1
 8003874:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2202      	movs	r2, #2
 800387c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	689b      	ldr	r3, [r3, #8]
 800388e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003896:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	68fa      	ldr	r2, [r7, #12]
 800389e:	4313      	orrs	r3, r2
 80038a0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	68fa      	ldr	r2, [r7, #12]
 80038a8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4a21      	ldr	r2, [pc, #132]	@ (8003934 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d022      	beq.n	80038fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80038bc:	d01d      	beq.n	80038fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4a1d      	ldr	r2, [pc, #116]	@ (8003938 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d018      	beq.n	80038fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4a1b      	ldr	r2, [pc, #108]	@ (800393c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d013      	beq.n	80038fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4a1a      	ldr	r2, [pc, #104]	@ (8003940 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80038d8:	4293      	cmp	r3, r2
 80038da:	d00e      	beq.n	80038fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4a18      	ldr	r2, [pc, #96]	@ (8003944 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d009      	beq.n	80038fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4a17      	ldr	r2, [pc, #92]	@ (8003948 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d004      	beq.n	80038fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4a15      	ldr	r2, [pc, #84]	@ (800394c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d10c      	bne.n	8003914 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80038fa:	68bb      	ldr	r3, [r7, #8]
 80038fc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003900:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	68ba      	ldr	r2, [r7, #8]
 8003908:	4313      	orrs	r3, r2
 800390a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	68ba      	ldr	r2, [r7, #8]
 8003912:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2201      	movs	r2, #1
 8003918:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2200      	movs	r2, #0
 8003920:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003924:	2300      	movs	r3, #0
}
 8003926:	4618      	mov	r0, r3
 8003928:	3714      	adds	r7, #20
 800392a:	46bd      	mov	sp, r7
 800392c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003930:	4770      	bx	lr
 8003932:	bf00      	nop
 8003934:	40010000 	.word	0x40010000
 8003938:	40000400 	.word	0x40000400
 800393c:	40000800 	.word	0x40000800
 8003940:	40000c00 	.word	0x40000c00
 8003944:	40010400 	.word	0x40010400
 8003948:	40014000 	.word	0x40014000
 800394c:	40001800 	.word	0x40001800

08003950 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003950:	b480      	push	{r7}
 8003952:	b083      	sub	sp, #12
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003958:	bf00      	nop
 800395a:	370c      	adds	r7, #12
 800395c:	46bd      	mov	sp, r7
 800395e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003962:	4770      	bx	lr

08003964 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003964:	b480      	push	{r7}
 8003966:	b083      	sub	sp, #12
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800396c:	bf00      	nop
 800396e:	370c      	adds	r7, #12
 8003970:	46bd      	mov	sp, r7
 8003972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003976:	4770      	bx	lr

08003978 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b082      	sub	sp, #8
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d101      	bne.n	800398a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003986:	2301      	movs	r3, #1
 8003988:	e042      	b.n	8003a10 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003990:	b2db      	uxtb	r3, r3
 8003992:	2b00      	cmp	r3, #0
 8003994:	d106      	bne.n	80039a4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2200      	movs	r2, #0
 800399a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800399e:	6878      	ldr	r0, [r7, #4]
 80039a0:	f7fe f80c 	bl	80019bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2224      	movs	r2, #36	@ 0x24
 80039a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	68da      	ldr	r2, [r3, #12]
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80039ba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80039bc:	6878      	ldr	r0, [r7, #4]
 80039be:	f000 fcdb 	bl	8004378 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	691a      	ldr	r2, [r3, #16]
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80039d0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	695a      	ldr	r2, [r3, #20]
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80039e0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	68da      	ldr	r2, [r3, #12]
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80039f0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2200      	movs	r2, #0
 80039f6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2220      	movs	r2, #32
 80039fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2220      	movs	r2, #32
 8003a04:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003a0e:	2300      	movs	r3, #0
}
 8003a10:	4618      	mov	r0, r3
 8003a12:	3708      	adds	r7, #8
 8003a14:	46bd      	mov	sp, r7
 8003a16:	bd80      	pop	{r7, pc}

08003a18 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b084      	sub	sp, #16
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	60f8      	str	r0, [r7, #12]
 8003a20:	60b9      	str	r1, [r7, #8]
 8003a22:	4613      	mov	r3, r2
 8003a24:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003a2c:	b2db      	uxtb	r3, r3
 8003a2e:	2b20      	cmp	r3, #32
 8003a30:	d112      	bne.n	8003a58 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a32:	68bb      	ldr	r3, [r7, #8]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d002      	beq.n	8003a3e <HAL_UART_Receive_IT+0x26>
 8003a38:	88fb      	ldrh	r3, [r7, #6]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d101      	bne.n	8003a42 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003a3e:	2301      	movs	r3, #1
 8003a40:	e00b      	b.n	8003a5a <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	2200      	movs	r2, #0
 8003a46:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003a48:	88fb      	ldrh	r3, [r7, #6]
 8003a4a:	461a      	mov	r2, r3
 8003a4c:	68b9      	ldr	r1, [r7, #8]
 8003a4e:	68f8      	ldr	r0, [r7, #12]
 8003a50:	f000 faba 	bl	8003fc8 <UART_Start_Receive_IT>
 8003a54:	4603      	mov	r3, r0
 8003a56:	e000      	b.n	8003a5a <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003a58:	2302      	movs	r3, #2
  }
}
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	3710      	adds	r7, #16
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bd80      	pop	{r7, pc}
	...

08003a64 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b0ba      	sub	sp, #232	@ 0xe8
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	68db      	ldr	r3, [r3, #12]
 8003a7c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	695b      	ldr	r3, [r3, #20]
 8003a86:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003a90:	2300      	movs	r3, #0
 8003a92:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003a96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a9a:	f003 030f 	and.w	r3, r3, #15
 8003a9e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003aa2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d10f      	bne.n	8003aca <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003aaa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003aae:	f003 0320 	and.w	r3, r3, #32
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d009      	beq.n	8003aca <HAL_UART_IRQHandler+0x66>
 8003ab6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003aba:	f003 0320 	and.w	r3, r3, #32
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d003      	beq.n	8003aca <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003ac2:	6878      	ldr	r0, [r7, #4]
 8003ac4:	f000 fb99 	bl	80041fa <UART_Receive_IT>
      return;
 8003ac8:	e25b      	b.n	8003f82 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003aca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	f000 80de 	beq.w	8003c90 <HAL_UART_IRQHandler+0x22c>
 8003ad4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003ad8:	f003 0301 	and.w	r3, r3, #1
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d106      	bne.n	8003aee <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003ae0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003ae4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	f000 80d1 	beq.w	8003c90 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003aee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003af2:	f003 0301 	and.w	r3, r3, #1
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d00b      	beq.n	8003b12 <HAL_UART_IRQHandler+0xae>
 8003afa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003afe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d005      	beq.n	8003b12 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b0a:	f043 0201 	orr.w	r2, r3, #1
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003b12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b16:	f003 0304 	and.w	r3, r3, #4
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d00b      	beq.n	8003b36 <HAL_UART_IRQHandler+0xd2>
 8003b1e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003b22:	f003 0301 	and.w	r3, r3, #1
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d005      	beq.n	8003b36 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b2e:	f043 0202 	orr.w	r2, r3, #2
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003b36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b3a:	f003 0302 	and.w	r3, r3, #2
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d00b      	beq.n	8003b5a <HAL_UART_IRQHandler+0xf6>
 8003b42:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003b46:	f003 0301 	and.w	r3, r3, #1
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d005      	beq.n	8003b5a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b52:	f043 0204 	orr.w	r2, r3, #4
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003b5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b5e:	f003 0308 	and.w	r3, r3, #8
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d011      	beq.n	8003b8a <HAL_UART_IRQHandler+0x126>
 8003b66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b6a:	f003 0320 	and.w	r3, r3, #32
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d105      	bne.n	8003b7e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003b72:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003b76:	f003 0301 	and.w	r3, r3, #1
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d005      	beq.n	8003b8a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b82:	f043 0208 	orr.w	r2, r3, #8
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	f000 81f2 	beq.w	8003f78 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003b94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b98:	f003 0320 	and.w	r3, r3, #32
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d008      	beq.n	8003bb2 <HAL_UART_IRQHandler+0x14e>
 8003ba0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003ba4:	f003 0320 	and.w	r3, r3, #32
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d002      	beq.n	8003bb2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003bac:	6878      	ldr	r0, [r7, #4]
 8003bae:	f000 fb24 	bl	80041fa <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	695b      	ldr	r3, [r3, #20]
 8003bb8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003bbc:	2b40      	cmp	r3, #64	@ 0x40
 8003bbe:	bf0c      	ite	eq
 8003bc0:	2301      	moveq	r3, #1
 8003bc2:	2300      	movne	r3, #0
 8003bc4:	b2db      	uxtb	r3, r3
 8003bc6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bce:	f003 0308 	and.w	r3, r3, #8
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d103      	bne.n	8003bde <HAL_UART_IRQHandler+0x17a>
 8003bd6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d04f      	beq.n	8003c7e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003bde:	6878      	ldr	r0, [r7, #4]
 8003be0:	f000 fa2c 	bl	800403c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	695b      	ldr	r3, [r3, #20]
 8003bea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003bee:	2b40      	cmp	r3, #64	@ 0x40
 8003bf0:	d141      	bne.n	8003c76 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	3314      	adds	r3, #20
 8003bf8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bfc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003c00:	e853 3f00 	ldrex	r3, [r3]
 8003c04:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003c08:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003c0c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003c10:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	3314      	adds	r3, #20
 8003c1a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003c1e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003c22:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c26:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003c2a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003c2e:	e841 2300 	strex	r3, r2, [r1]
 8003c32:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003c36:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d1d9      	bne.n	8003bf2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d013      	beq.n	8003c6e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c4a:	4a7e      	ldr	r2, [pc, #504]	@ (8003e44 <HAL_UART_IRQHandler+0x3e0>)
 8003c4c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c52:	4618      	mov	r0, r3
 8003c54:	f7fe fcc1 	bl	80025da <HAL_DMA_Abort_IT>
 8003c58:	4603      	mov	r3, r0
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d016      	beq.n	8003c8c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c62:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c64:	687a      	ldr	r2, [r7, #4]
 8003c66:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003c68:	4610      	mov	r0, r2
 8003c6a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c6c:	e00e      	b.n	8003c8c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003c6e:	6878      	ldr	r0, [r7, #4]
 8003c70:	f000 f994 	bl	8003f9c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c74:	e00a      	b.n	8003c8c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003c76:	6878      	ldr	r0, [r7, #4]
 8003c78:	f000 f990 	bl	8003f9c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c7c:	e006      	b.n	8003c8c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003c7e:	6878      	ldr	r0, [r7, #4]
 8003c80:	f000 f98c 	bl	8003f9c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2200      	movs	r2, #0
 8003c88:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003c8a:	e175      	b.n	8003f78 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c8c:	bf00      	nop
    return;
 8003c8e:	e173      	b.n	8003f78 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c94:	2b01      	cmp	r3, #1
 8003c96:	f040 814f 	bne.w	8003f38 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003c9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c9e:	f003 0310 	and.w	r3, r3, #16
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	f000 8148 	beq.w	8003f38 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003ca8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003cac:	f003 0310 	and.w	r3, r3, #16
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	f000 8141 	beq.w	8003f38 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	60bb      	str	r3, [r7, #8]
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	60bb      	str	r3, [r7, #8]
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	60bb      	str	r3, [r7, #8]
 8003cca:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	695b      	ldr	r3, [r3, #20]
 8003cd2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cd6:	2b40      	cmp	r3, #64	@ 0x40
 8003cd8:	f040 80b6 	bne.w	8003e48 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	685b      	ldr	r3, [r3, #4]
 8003ce4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003ce8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	f000 8145 	beq.w	8003f7c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003cf6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003cfa:	429a      	cmp	r2, r3
 8003cfc:	f080 813e 	bcs.w	8003f7c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003d06:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d0c:	69db      	ldr	r3, [r3, #28]
 8003d0e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003d12:	f000 8088 	beq.w	8003e26 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	330c      	adds	r3, #12
 8003d1c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d20:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003d24:	e853 3f00 	ldrex	r3, [r3]
 8003d28:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003d2c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003d30:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003d34:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	330c      	adds	r3, #12
 8003d3e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003d42:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003d46:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d4a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003d4e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003d52:	e841 2300 	strex	r3, r2, [r1]
 8003d56:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003d5a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d1d9      	bne.n	8003d16 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	3314      	adds	r3, #20
 8003d68:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d6a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003d6c:	e853 3f00 	ldrex	r3, [r3]
 8003d70:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003d72:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003d74:	f023 0301 	bic.w	r3, r3, #1
 8003d78:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	3314      	adds	r3, #20
 8003d82:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003d86:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003d8a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d8c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003d8e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003d92:	e841 2300 	strex	r3, r2, [r1]
 8003d96:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003d98:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d1e1      	bne.n	8003d62 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	3314      	adds	r3, #20
 8003da4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003da6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003da8:	e853 3f00 	ldrex	r3, [r3]
 8003dac:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003dae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003db0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003db4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	3314      	adds	r3, #20
 8003dbe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003dc2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003dc4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dc6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003dc8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003dca:	e841 2300 	strex	r3, r2, [r1]
 8003dce:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003dd0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d1e3      	bne.n	8003d9e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2220      	movs	r2, #32
 8003dda:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2200      	movs	r2, #0
 8003de2:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	330c      	adds	r3, #12
 8003dea:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003dee:	e853 3f00 	ldrex	r3, [r3]
 8003df2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003df4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003df6:	f023 0310 	bic.w	r3, r3, #16
 8003dfa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	330c      	adds	r3, #12
 8003e04:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003e08:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003e0a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e0c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003e0e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003e10:	e841 2300 	strex	r3, r2, [r1]
 8003e14:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003e16:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d1e3      	bne.n	8003de4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e20:	4618      	mov	r0, r3
 8003e22:	f7fe fb6a 	bl	80024fa <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2202      	movs	r2, #2
 8003e2a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003e34:	b29b      	uxth	r3, r3
 8003e36:	1ad3      	subs	r3, r2, r3
 8003e38:	b29b      	uxth	r3, r3
 8003e3a:	4619      	mov	r1, r3
 8003e3c:	6878      	ldr	r0, [r7, #4]
 8003e3e:	f000 f8b7 	bl	8003fb0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003e42:	e09b      	b.n	8003f7c <HAL_UART_IRQHandler+0x518>
 8003e44:	08004103 	.word	0x08004103
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003e50:	b29b      	uxth	r3, r3
 8003e52:	1ad3      	subs	r3, r2, r3
 8003e54:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003e5c:	b29b      	uxth	r3, r3
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	f000 808e 	beq.w	8003f80 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003e64:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	f000 8089 	beq.w	8003f80 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	330c      	adds	r3, #12
 8003e74:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e78:	e853 3f00 	ldrex	r3, [r3]
 8003e7c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003e7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e80:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003e84:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	330c      	adds	r3, #12
 8003e8e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003e92:	647a      	str	r2, [r7, #68]	@ 0x44
 8003e94:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e96:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003e98:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003e9a:	e841 2300 	strex	r3, r2, [r1]
 8003e9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003ea0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d1e3      	bne.n	8003e6e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	3314      	adds	r3, #20
 8003eac:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003eb0:	e853 3f00 	ldrex	r3, [r3]
 8003eb4:	623b      	str	r3, [r7, #32]
   return(result);
 8003eb6:	6a3b      	ldr	r3, [r7, #32]
 8003eb8:	f023 0301 	bic.w	r3, r3, #1
 8003ebc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	3314      	adds	r3, #20
 8003ec6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003eca:	633a      	str	r2, [r7, #48]	@ 0x30
 8003ecc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ece:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003ed0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003ed2:	e841 2300 	strex	r3, r2, [r1]
 8003ed6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003ed8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d1e3      	bne.n	8003ea6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2220      	movs	r2, #32
 8003ee2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2200      	movs	r2, #0
 8003eea:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	330c      	adds	r3, #12
 8003ef2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ef4:	693b      	ldr	r3, [r7, #16]
 8003ef6:	e853 3f00 	ldrex	r3, [r3]
 8003efa:	60fb      	str	r3, [r7, #12]
   return(result);
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	f023 0310 	bic.w	r3, r3, #16
 8003f02:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	330c      	adds	r3, #12
 8003f0c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003f10:	61fa      	str	r2, [r7, #28]
 8003f12:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f14:	69b9      	ldr	r1, [r7, #24]
 8003f16:	69fa      	ldr	r2, [r7, #28]
 8003f18:	e841 2300 	strex	r3, r2, [r1]
 8003f1c:	617b      	str	r3, [r7, #20]
   return(result);
 8003f1e:	697b      	ldr	r3, [r7, #20]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d1e3      	bne.n	8003eec <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2202      	movs	r2, #2
 8003f28:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003f2a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003f2e:	4619      	mov	r1, r3
 8003f30:	6878      	ldr	r0, [r7, #4]
 8003f32:	f000 f83d 	bl	8003fb0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003f36:	e023      	b.n	8003f80 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003f38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f3c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d009      	beq.n	8003f58 <HAL_UART_IRQHandler+0x4f4>
 8003f44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f48:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d003      	beq.n	8003f58 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003f50:	6878      	ldr	r0, [r7, #4]
 8003f52:	f000 f8ea 	bl	800412a <UART_Transmit_IT>
    return;
 8003f56:	e014      	b.n	8003f82 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003f58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d00e      	beq.n	8003f82 <HAL_UART_IRQHandler+0x51e>
 8003f64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d008      	beq.n	8003f82 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003f70:	6878      	ldr	r0, [r7, #4]
 8003f72:	f000 f92a 	bl	80041ca <UART_EndTransmit_IT>
    return;
 8003f76:	e004      	b.n	8003f82 <HAL_UART_IRQHandler+0x51e>
    return;
 8003f78:	bf00      	nop
 8003f7a:	e002      	b.n	8003f82 <HAL_UART_IRQHandler+0x51e>
      return;
 8003f7c:	bf00      	nop
 8003f7e:	e000      	b.n	8003f82 <HAL_UART_IRQHandler+0x51e>
      return;
 8003f80:	bf00      	nop
  }
}
 8003f82:	37e8      	adds	r7, #232	@ 0xe8
 8003f84:	46bd      	mov	sp, r7
 8003f86:	bd80      	pop	{r7, pc}

08003f88 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003f88:	b480      	push	{r7}
 8003f8a:	b083      	sub	sp, #12
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003f90:	bf00      	nop
 8003f92:	370c      	adds	r7, #12
 8003f94:	46bd      	mov	sp, r7
 8003f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9a:	4770      	bx	lr

08003f9c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	b083      	sub	sp, #12
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003fa4:	bf00      	nop
 8003fa6:	370c      	adds	r7, #12
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fae:	4770      	bx	lr

08003fb0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	b083      	sub	sp, #12
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
 8003fb8:	460b      	mov	r3, r1
 8003fba:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003fbc:	bf00      	nop
 8003fbe:	370c      	adds	r7, #12
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc6:	4770      	bx	lr

08003fc8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003fc8:	b480      	push	{r7}
 8003fca:	b085      	sub	sp, #20
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	60f8      	str	r0, [r7, #12]
 8003fd0:	60b9      	str	r1, [r7, #8]
 8003fd2:	4613      	mov	r3, r2
 8003fd4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	68ba      	ldr	r2, [r7, #8]
 8003fda:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	88fa      	ldrh	r2, [r7, #6]
 8003fe0:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	88fa      	ldrh	r2, [r7, #6]
 8003fe6:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	2200      	movs	r2, #0
 8003fec:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	2222      	movs	r2, #34	@ 0x22
 8003ff2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	691b      	ldr	r3, [r3, #16]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d007      	beq.n	800400e <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	68da      	ldr	r2, [r3, #12]
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800400c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	695a      	ldr	r2, [r3, #20]
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f042 0201 	orr.w	r2, r2, #1
 800401c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	68da      	ldr	r2, [r3, #12]
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f042 0220 	orr.w	r2, r2, #32
 800402c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800402e:	2300      	movs	r3, #0
}
 8004030:	4618      	mov	r0, r3
 8004032:	3714      	adds	r7, #20
 8004034:	46bd      	mov	sp, r7
 8004036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403a:	4770      	bx	lr

0800403c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800403c:	b480      	push	{r7}
 800403e:	b095      	sub	sp, #84	@ 0x54
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	330c      	adds	r3, #12
 800404a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800404c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800404e:	e853 3f00 	ldrex	r3, [r3]
 8004052:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004054:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004056:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800405a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	330c      	adds	r3, #12
 8004062:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004064:	643a      	str	r2, [r7, #64]	@ 0x40
 8004066:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004068:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800406a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800406c:	e841 2300 	strex	r3, r2, [r1]
 8004070:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004072:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004074:	2b00      	cmp	r3, #0
 8004076:	d1e5      	bne.n	8004044 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	3314      	adds	r3, #20
 800407e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004080:	6a3b      	ldr	r3, [r7, #32]
 8004082:	e853 3f00 	ldrex	r3, [r3]
 8004086:	61fb      	str	r3, [r7, #28]
   return(result);
 8004088:	69fb      	ldr	r3, [r7, #28]
 800408a:	f023 0301 	bic.w	r3, r3, #1
 800408e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	3314      	adds	r3, #20
 8004096:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004098:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800409a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800409c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800409e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80040a0:	e841 2300 	strex	r3, r2, [r1]
 80040a4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80040a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d1e5      	bne.n	8004078 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040b0:	2b01      	cmp	r3, #1
 80040b2:	d119      	bne.n	80040e8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	330c      	adds	r3, #12
 80040ba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	e853 3f00 	ldrex	r3, [r3]
 80040c2:	60bb      	str	r3, [r7, #8]
   return(result);
 80040c4:	68bb      	ldr	r3, [r7, #8]
 80040c6:	f023 0310 	bic.w	r3, r3, #16
 80040ca:	647b      	str	r3, [r7, #68]	@ 0x44
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	330c      	adds	r3, #12
 80040d2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80040d4:	61ba      	str	r2, [r7, #24]
 80040d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040d8:	6979      	ldr	r1, [r7, #20]
 80040da:	69ba      	ldr	r2, [r7, #24]
 80040dc:	e841 2300 	strex	r3, r2, [r1]
 80040e0:	613b      	str	r3, [r7, #16]
   return(result);
 80040e2:	693b      	ldr	r3, [r7, #16]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d1e5      	bne.n	80040b4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2220      	movs	r2, #32
 80040ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2200      	movs	r2, #0
 80040f4:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80040f6:	bf00      	nop
 80040f8:	3754      	adds	r7, #84	@ 0x54
 80040fa:	46bd      	mov	sp, r7
 80040fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004100:	4770      	bx	lr

08004102 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004102:	b580      	push	{r7, lr}
 8004104:	b084      	sub	sp, #16
 8004106:	af00      	add	r7, sp, #0
 8004108:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800410e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	2200      	movs	r2, #0
 8004114:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	2200      	movs	r2, #0
 800411a:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800411c:	68f8      	ldr	r0, [r7, #12]
 800411e:	f7ff ff3d 	bl	8003f9c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004122:	bf00      	nop
 8004124:	3710      	adds	r7, #16
 8004126:	46bd      	mov	sp, r7
 8004128:	bd80      	pop	{r7, pc}

0800412a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800412a:	b480      	push	{r7}
 800412c:	b085      	sub	sp, #20
 800412e:	af00      	add	r7, sp, #0
 8004130:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004138:	b2db      	uxtb	r3, r3
 800413a:	2b21      	cmp	r3, #33	@ 0x21
 800413c:	d13e      	bne.n	80041bc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	689b      	ldr	r3, [r3, #8]
 8004142:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004146:	d114      	bne.n	8004172 <UART_Transmit_IT+0x48>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	691b      	ldr	r3, [r3, #16]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d110      	bne.n	8004172 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6a1b      	ldr	r3, [r3, #32]
 8004154:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	881b      	ldrh	r3, [r3, #0]
 800415a:	461a      	mov	r2, r3
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004164:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6a1b      	ldr	r3, [r3, #32]
 800416a:	1c9a      	adds	r2, r3, #2
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	621a      	str	r2, [r3, #32]
 8004170:	e008      	b.n	8004184 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6a1b      	ldr	r3, [r3, #32]
 8004176:	1c59      	adds	r1, r3, #1
 8004178:	687a      	ldr	r2, [r7, #4]
 800417a:	6211      	str	r1, [r2, #32]
 800417c:	781a      	ldrb	r2, [r3, #0]
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004188:	b29b      	uxth	r3, r3
 800418a:	3b01      	subs	r3, #1
 800418c:	b29b      	uxth	r3, r3
 800418e:	687a      	ldr	r2, [r7, #4]
 8004190:	4619      	mov	r1, r3
 8004192:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004194:	2b00      	cmp	r3, #0
 8004196:	d10f      	bne.n	80041b8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	68da      	ldr	r2, [r3, #12]
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80041a6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	68da      	ldr	r2, [r3, #12]
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80041b6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80041b8:	2300      	movs	r3, #0
 80041ba:	e000      	b.n	80041be <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80041bc:	2302      	movs	r3, #2
  }
}
 80041be:	4618      	mov	r0, r3
 80041c0:	3714      	adds	r7, #20
 80041c2:	46bd      	mov	sp, r7
 80041c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c8:	4770      	bx	lr

080041ca <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80041ca:	b580      	push	{r7, lr}
 80041cc:	b082      	sub	sp, #8
 80041ce:	af00      	add	r7, sp, #0
 80041d0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	68da      	ldr	r2, [r3, #12]
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80041e0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2220      	movs	r2, #32
 80041e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80041ea:	6878      	ldr	r0, [r7, #4]
 80041ec:	f7ff fecc 	bl	8003f88 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80041f0:	2300      	movs	r3, #0
}
 80041f2:	4618      	mov	r0, r3
 80041f4:	3708      	adds	r7, #8
 80041f6:	46bd      	mov	sp, r7
 80041f8:	bd80      	pop	{r7, pc}

080041fa <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80041fa:	b580      	push	{r7, lr}
 80041fc:	b08c      	sub	sp, #48	@ 0x30
 80041fe:	af00      	add	r7, sp, #0
 8004200:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004208:	b2db      	uxtb	r3, r3
 800420a:	2b22      	cmp	r3, #34	@ 0x22
 800420c:	f040 80ae 	bne.w	800436c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	689b      	ldr	r3, [r3, #8]
 8004214:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004218:	d117      	bne.n	800424a <UART_Receive_IT+0x50>
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	691b      	ldr	r3, [r3, #16]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d113      	bne.n	800424a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004222:	2300      	movs	r3, #0
 8004224:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800422a:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	685b      	ldr	r3, [r3, #4]
 8004232:	b29b      	uxth	r3, r3
 8004234:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004238:	b29a      	uxth	r2, r3
 800423a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800423c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004242:	1c9a      	adds	r2, r3, #2
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	629a      	str	r2, [r3, #40]	@ 0x28
 8004248:	e026      	b.n	8004298 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800424e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004250:	2300      	movs	r3, #0
 8004252:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	689b      	ldr	r3, [r3, #8]
 8004258:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800425c:	d007      	beq.n	800426e <UART_Receive_IT+0x74>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	689b      	ldr	r3, [r3, #8]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d10a      	bne.n	800427c <UART_Receive_IT+0x82>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	691b      	ldr	r3, [r3, #16]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d106      	bne.n	800427c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	685b      	ldr	r3, [r3, #4]
 8004274:	b2da      	uxtb	r2, r3
 8004276:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004278:	701a      	strb	r2, [r3, #0]
 800427a:	e008      	b.n	800428e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	685b      	ldr	r3, [r3, #4]
 8004282:	b2db      	uxtb	r3, r3
 8004284:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004288:	b2da      	uxtb	r2, r3
 800428a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800428c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004292:	1c5a      	adds	r2, r3, #1
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800429c:	b29b      	uxth	r3, r3
 800429e:	3b01      	subs	r3, #1
 80042a0:	b29b      	uxth	r3, r3
 80042a2:	687a      	ldr	r2, [r7, #4]
 80042a4:	4619      	mov	r1, r3
 80042a6:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d15d      	bne.n	8004368 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	68da      	ldr	r2, [r3, #12]
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f022 0220 	bic.w	r2, r2, #32
 80042ba:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	68da      	ldr	r2, [r3, #12]
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80042ca:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	695a      	ldr	r2, [r3, #20]
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f022 0201 	bic.w	r2, r2, #1
 80042da:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2220      	movs	r2, #32
 80042e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2200      	movs	r2, #0
 80042e8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042ee:	2b01      	cmp	r3, #1
 80042f0:	d135      	bne.n	800435e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2200      	movs	r2, #0
 80042f6:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	330c      	adds	r3, #12
 80042fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004300:	697b      	ldr	r3, [r7, #20]
 8004302:	e853 3f00 	ldrex	r3, [r3]
 8004306:	613b      	str	r3, [r7, #16]
   return(result);
 8004308:	693b      	ldr	r3, [r7, #16]
 800430a:	f023 0310 	bic.w	r3, r3, #16
 800430e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	330c      	adds	r3, #12
 8004316:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004318:	623a      	str	r2, [r7, #32]
 800431a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800431c:	69f9      	ldr	r1, [r7, #28]
 800431e:	6a3a      	ldr	r2, [r7, #32]
 8004320:	e841 2300 	strex	r3, r2, [r1]
 8004324:	61bb      	str	r3, [r7, #24]
   return(result);
 8004326:	69bb      	ldr	r3, [r7, #24]
 8004328:	2b00      	cmp	r3, #0
 800432a:	d1e5      	bne.n	80042f8 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f003 0310 	and.w	r3, r3, #16
 8004336:	2b10      	cmp	r3, #16
 8004338:	d10a      	bne.n	8004350 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800433a:	2300      	movs	r3, #0
 800433c:	60fb      	str	r3, [r7, #12]
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	60fb      	str	r3, [r7, #12]
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	685b      	ldr	r3, [r3, #4]
 800434c:	60fb      	str	r3, [r7, #12]
 800434e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004354:	4619      	mov	r1, r3
 8004356:	6878      	ldr	r0, [r7, #4]
 8004358:	f7ff fe2a 	bl	8003fb0 <HAL_UARTEx_RxEventCallback>
 800435c:	e002      	b.n	8004364 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800435e:	6878      	ldr	r0, [r7, #4]
 8004360:	f7fd fa2e 	bl	80017c0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004364:	2300      	movs	r3, #0
 8004366:	e002      	b.n	800436e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004368:	2300      	movs	r3, #0
 800436a:	e000      	b.n	800436e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800436c:	2302      	movs	r3, #2
  }
}
 800436e:	4618      	mov	r0, r3
 8004370:	3730      	adds	r7, #48	@ 0x30
 8004372:	46bd      	mov	sp, r7
 8004374:	bd80      	pop	{r7, pc}
	...

08004378 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004378:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800437c:	b0c0      	sub	sp, #256	@ 0x100
 800437e:	af00      	add	r7, sp, #0
 8004380:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004384:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	691b      	ldr	r3, [r3, #16]
 800438c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004390:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004394:	68d9      	ldr	r1, [r3, #12]
 8004396:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800439a:	681a      	ldr	r2, [r3, #0]
 800439c:	ea40 0301 	orr.w	r3, r0, r1
 80043a0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80043a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043a6:	689a      	ldr	r2, [r3, #8]
 80043a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043ac:	691b      	ldr	r3, [r3, #16]
 80043ae:	431a      	orrs	r2, r3
 80043b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043b4:	695b      	ldr	r3, [r3, #20]
 80043b6:	431a      	orrs	r2, r3
 80043b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043bc:	69db      	ldr	r3, [r3, #28]
 80043be:	4313      	orrs	r3, r2
 80043c0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80043c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	68db      	ldr	r3, [r3, #12]
 80043cc:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80043d0:	f021 010c 	bic.w	r1, r1, #12
 80043d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043d8:	681a      	ldr	r2, [r3, #0]
 80043da:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80043de:	430b      	orrs	r3, r1
 80043e0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80043e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	695b      	ldr	r3, [r3, #20]
 80043ea:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80043ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043f2:	6999      	ldr	r1, [r3, #24]
 80043f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043f8:	681a      	ldr	r2, [r3, #0]
 80043fa:	ea40 0301 	orr.w	r3, r0, r1
 80043fe:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004400:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004404:	681a      	ldr	r2, [r3, #0]
 8004406:	4b8f      	ldr	r3, [pc, #572]	@ (8004644 <UART_SetConfig+0x2cc>)
 8004408:	429a      	cmp	r2, r3
 800440a:	d005      	beq.n	8004418 <UART_SetConfig+0xa0>
 800440c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004410:	681a      	ldr	r2, [r3, #0]
 8004412:	4b8d      	ldr	r3, [pc, #564]	@ (8004648 <UART_SetConfig+0x2d0>)
 8004414:	429a      	cmp	r2, r3
 8004416:	d104      	bne.n	8004422 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004418:	f7fe ff86 	bl	8003328 <HAL_RCC_GetPCLK2Freq>
 800441c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004420:	e003      	b.n	800442a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004422:	f7fe ff6d 	bl	8003300 <HAL_RCC_GetPCLK1Freq>
 8004426:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800442a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800442e:	69db      	ldr	r3, [r3, #28]
 8004430:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004434:	f040 810c 	bne.w	8004650 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004438:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800443c:	2200      	movs	r2, #0
 800443e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004442:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004446:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800444a:	4622      	mov	r2, r4
 800444c:	462b      	mov	r3, r5
 800444e:	1891      	adds	r1, r2, r2
 8004450:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004452:	415b      	adcs	r3, r3
 8004454:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004456:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800445a:	4621      	mov	r1, r4
 800445c:	eb12 0801 	adds.w	r8, r2, r1
 8004460:	4629      	mov	r1, r5
 8004462:	eb43 0901 	adc.w	r9, r3, r1
 8004466:	f04f 0200 	mov.w	r2, #0
 800446a:	f04f 0300 	mov.w	r3, #0
 800446e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004472:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004476:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800447a:	4690      	mov	r8, r2
 800447c:	4699      	mov	r9, r3
 800447e:	4623      	mov	r3, r4
 8004480:	eb18 0303 	adds.w	r3, r8, r3
 8004484:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004488:	462b      	mov	r3, r5
 800448a:	eb49 0303 	adc.w	r3, r9, r3
 800448e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004492:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	2200      	movs	r2, #0
 800449a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800449e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80044a2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80044a6:	460b      	mov	r3, r1
 80044a8:	18db      	adds	r3, r3, r3
 80044aa:	653b      	str	r3, [r7, #80]	@ 0x50
 80044ac:	4613      	mov	r3, r2
 80044ae:	eb42 0303 	adc.w	r3, r2, r3
 80044b2:	657b      	str	r3, [r7, #84]	@ 0x54
 80044b4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80044b8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80044bc:	f7fb fed8 	bl	8000270 <__aeabi_uldivmod>
 80044c0:	4602      	mov	r2, r0
 80044c2:	460b      	mov	r3, r1
 80044c4:	4b61      	ldr	r3, [pc, #388]	@ (800464c <UART_SetConfig+0x2d4>)
 80044c6:	fba3 2302 	umull	r2, r3, r3, r2
 80044ca:	095b      	lsrs	r3, r3, #5
 80044cc:	011c      	lsls	r4, r3, #4
 80044ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80044d2:	2200      	movs	r2, #0
 80044d4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80044d8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80044dc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80044e0:	4642      	mov	r2, r8
 80044e2:	464b      	mov	r3, r9
 80044e4:	1891      	adds	r1, r2, r2
 80044e6:	64b9      	str	r1, [r7, #72]	@ 0x48
 80044e8:	415b      	adcs	r3, r3
 80044ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80044ec:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80044f0:	4641      	mov	r1, r8
 80044f2:	eb12 0a01 	adds.w	sl, r2, r1
 80044f6:	4649      	mov	r1, r9
 80044f8:	eb43 0b01 	adc.w	fp, r3, r1
 80044fc:	f04f 0200 	mov.w	r2, #0
 8004500:	f04f 0300 	mov.w	r3, #0
 8004504:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004508:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800450c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004510:	4692      	mov	sl, r2
 8004512:	469b      	mov	fp, r3
 8004514:	4643      	mov	r3, r8
 8004516:	eb1a 0303 	adds.w	r3, sl, r3
 800451a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800451e:	464b      	mov	r3, r9
 8004520:	eb4b 0303 	adc.w	r3, fp, r3
 8004524:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004528:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800452c:	685b      	ldr	r3, [r3, #4]
 800452e:	2200      	movs	r2, #0
 8004530:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004534:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004538:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800453c:	460b      	mov	r3, r1
 800453e:	18db      	adds	r3, r3, r3
 8004540:	643b      	str	r3, [r7, #64]	@ 0x40
 8004542:	4613      	mov	r3, r2
 8004544:	eb42 0303 	adc.w	r3, r2, r3
 8004548:	647b      	str	r3, [r7, #68]	@ 0x44
 800454a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800454e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004552:	f7fb fe8d 	bl	8000270 <__aeabi_uldivmod>
 8004556:	4602      	mov	r2, r0
 8004558:	460b      	mov	r3, r1
 800455a:	4611      	mov	r1, r2
 800455c:	4b3b      	ldr	r3, [pc, #236]	@ (800464c <UART_SetConfig+0x2d4>)
 800455e:	fba3 2301 	umull	r2, r3, r3, r1
 8004562:	095b      	lsrs	r3, r3, #5
 8004564:	2264      	movs	r2, #100	@ 0x64
 8004566:	fb02 f303 	mul.w	r3, r2, r3
 800456a:	1acb      	subs	r3, r1, r3
 800456c:	00db      	lsls	r3, r3, #3
 800456e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004572:	4b36      	ldr	r3, [pc, #216]	@ (800464c <UART_SetConfig+0x2d4>)
 8004574:	fba3 2302 	umull	r2, r3, r3, r2
 8004578:	095b      	lsrs	r3, r3, #5
 800457a:	005b      	lsls	r3, r3, #1
 800457c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004580:	441c      	add	r4, r3
 8004582:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004586:	2200      	movs	r2, #0
 8004588:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800458c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004590:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004594:	4642      	mov	r2, r8
 8004596:	464b      	mov	r3, r9
 8004598:	1891      	adds	r1, r2, r2
 800459a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800459c:	415b      	adcs	r3, r3
 800459e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80045a0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80045a4:	4641      	mov	r1, r8
 80045a6:	1851      	adds	r1, r2, r1
 80045a8:	6339      	str	r1, [r7, #48]	@ 0x30
 80045aa:	4649      	mov	r1, r9
 80045ac:	414b      	adcs	r3, r1
 80045ae:	637b      	str	r3, [r7, #52]	@ 0x34
 80045b0:	f04f 0200 	mov.w	r2, #0
 80045b4:	f04f 0300 	mov.w	r3, #0
 80045b8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80045bc:	4659      	mov	r1, fp
 80045be:	00cb      	lsls	r3, r1, #3
 80045c0:	4651      	mov	r1, sl
 80045c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80045c6:	4651      	mov	r1, sl
 80045c8:	00ca      	lsls	r2, r1, #3
 80045ca:	4610      	mov	r0, r2
 80045cc:	4619      	mov	r1, r3
 80045ce:	4603      	mov	r3, r0
 80045d0:	4642      	mov	r2, r8
 80045d2:	189b      	adds	r3, r3, r2
 80045d4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80045d8:	464b      	mov	r3, r9
 80045da:	460a      	mov	r2, r1
 80045dc:	eb42 0303 	adc.w	r3, r2, r3
 80045e0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80045e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045e8:	685b      	ldr	r3, [r3, #4]
 80045ea:	2200      	movs	r2, #0
 80045ec:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80045f0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80045f4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80045f8:	460b      	mov	r3, r1
 80045fa:	18db      	adds	r3, r3, r3
 80045fc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80045fe:	4613      	mov	r3, r2
 8004600:	eb42 0303 	adc.w	r3, r2, r3
 8004604:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004606:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800460a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800460e:	f7fb fe2f 	bl	8000270 <__aeabi_uldivmod>
 8004612:	4602      	mov	r2, r0
 8004614:	460b      	mov	r3, r1
 8004616:	4b0d      	ldr	r3, [pc, #52]	@ (800464c <UART_SetConfig+0x2d4>)
 8004618:	fba3 1302 	umull	r1, r3, r3, r2
 800461c:	095b      	lsrs	r3, r3, #5
 800461e:	2164      	movs	r1, #100	@ 0x64
 8004620:	fb01 f303 	mul.w	r3, r1, r3
 8004624:	1ad3      	subs	r3, r2, r3
 8004626:	00db      	lsls	r3, r3, #3
 8004628:	3332      	adds	r3, #50	@ 0x32
 800462a:	4a08      	ldr	r2, [pc, #32]	@ (800464c <UART_SetConfig+0x2d4>)
 800462c:	fba2 2303 	umull	r2, r3, r2, r3
 8004630:	095b      	lsrs	r3, r3, #5
 8004632:	f003 0207 	and.w	r2, r3, #7
 8004636:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	4422      	add	r2, r4
 800463e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004640:	e106      	b.n	8004850 <UART_SetConfig+0x4d8>
 8004642:	bf00      	nop
 8004644:	40011000 	.word	0x40011000
 8004648:	40011400 	.word	0x40011400
 800464c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004650:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004654:	2200      	movs	r2, #0
 8004656:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800465a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800465e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004662:	4642      	mov	r2, r8
 8004664:	464b      	mov	r3, r9
 8004666:	1891      	adds	r1, r2, r2
 8004668:	6239      	str	r1, [r7, #32]
 800466a:	415b      	adcs	r3, r3
 800466c:	627b      	str	r3, [r7, #36]	@ 0x24
 800466e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004672:	4641      	mov	r1, r8
 8004674:	1854      	adds	r4, r2, r1
 8004676:	4649      	mov	r1, r9
 8004678:	eb43 0501 	adc.w	r5, r3, r1
 800467c:	f04f 0200 	mov.w	r2, #0
 8004680:	f04f 0300 	mov.w	r3, #0
 8004684:	00eb      	lsls	r3, r5, #3
 8004686:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800468a:	00e2      	lsls	r2, r4, #3
 800468c:	4614      	mov	r4, r2
 800468e:	461d      	mov	r5, r3
 8004690:	4643      	mov	r3, r8
 8004692:	18e3      	adds	r3, r4, r3
 8004694:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004698:	464b      	mov	r3, r9
 800469a:	eb45 0303 	adc.w	r3, r5, r3
 800469e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80046a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046a6:	685b      	ldr	r3, [r3, #4]
 80046a8:	2200      	movs	r2, #0
 80046aa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80046ae:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80046b2:	f04f 0200 	mov.w	r2, #0
 80046b6:	f04f 0300 	mov.w	r3, #0
 80046ba:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80046be:	4629      	mov	r1, r5
 80046c0:	008b      	lsls	r3, r1, #2
 80046c2:	4621      	mov	r1, r4
 80046c4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80046c8:	4621      	mov	r1, r4
 80046ca:	008a      	lsls	r2, r1, #2
 80046cc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80046d0:	f7fb fdce 	bl	8000270 <__aeabi_uldivmod>
 80046d4:	4602      	mov	r2, r0
 80046d6:	460b      	mov	r3, r1
 80046d8:	4b60      	ldr	r3, [pc, #384]	@ (800485c <UART_SetConfig+0x4e4>)
 80046da:	fba3 2302 	umull	r2, r3, r3, r2
 80046de:	095b      	lsrs	r3, r3, #5
 80046e0:	011c      	lsls	r4, r3, #4
 80046e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80046e6:	2200      	movs	r2, #0
 80046e8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80046ec:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80046f0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80046f4:	4642      	mov	r2, r8
 80046f6:	464b      	mov	r3, r9
 80046f8:	1891      	adds	r1, r2, r2
 80046fa:	61b9      	str	r1, [r7, #24]
 80046fc:	415b      	adcs	r3, r3
 80046fe:	61fb      	str	r3, [r7, #28]
 8004700:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004704:	4641      	mov	r1, r8
 8004706:	1851      	adds	r1, r2, r1
 8004708:	6139      	str	r1, [r7, #16]
 800470a:	4649      	mov	r1, r9
 800470c:	414b      	adcs	r3, r1
 800470e:	617b      	str	r3, [r7, #20]
 8004710:	f04f 0200 	mov.w	r2, #0
 8004714:	f04f 0300 	mov.w	r3, #0
 8004718:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800471c:	4659      	mov	r1, fp
 800471e:	00cb      	lsls	r3, r1, #3
 8004720:	4651      	mov	r1, sl
 8004722:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004726:	4651      	mov	r1, sl
 8004728:	00ca      	lsls	r2, r1, #3
 800472a:	4610      	mov	r0, r2
 800472c:	4619      	mov	r1, r3
 800472e:	4603      	mov	r3, r0
 8004730:	4642      	mov	r2, r8
 8004732:	189b      	adds	r3, r3, r2
 8004734:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004738:	464b      	mov	r3, r9
 800473a:	460a      	mov	r2, r1
 800473c:	eb42 0303 	adc.w	r3, r2, r3
 8004740:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004744:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004748:	685b      	ldr	r3, [r3, #4]
 800474a:	2200      	movs	r2, #0
 800474c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800474e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004750:	f04f 0200 	mov.w	r2, #0
 8004754:	f04f 0300 	mov.w	r3, #0
 8004758:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800475c:	4649      	mov	r1, r9
 800475e:	008b      	lsls	r3, r1, #2
 8004760:	4641      	mov	r1, r8
 8004762:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004766:	4641      	mov	r1, r8
 8004768:	008a      	lsls	r2, r1, #2
 800476a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800476e:	f7fb fd7f 	bl	8000270 <__aeabi_uldivmod>
 8004772:	4602      	mov	r2, r0
 8004774:	460b      	mov	r3, r1
 8004776:	4611      	mov	r1, r2
 8004778:	4b38      	ldr	r3, [pc, #224]	@ (800485c <UART_SetConfig+0x4e4>)
 800477a:	fba3 2301 	umull	r2, r3, r3, r1
 800477e:	095b      	lsrs	r3, r3, #5
 8004780:	2264      	movs	r2, #100	@ 0x64
 8004782:	fb02 f303 	mul.w	r3, r2, r3
 8004786:	1acb      	subs	r3, r1, r3
 8004788:	011b      	lsls	r3, r3, #4
 800478a:	3332      	adds	r3, #50	@ 0x32
 800478c:	4a33      	ldr	r2, [pc, #204]	@ (800485c <UART_SetConfig+0x4e4>)
 800478e:	fba2 2303 	umull	r2, r3, r2, r3
 8004792:	095b      	lsrs	r3, r3, #5
 8004794:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004798:	441c      	add	r4, r3
 800479a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800479e:	2200      	movs	r2, #0
 80047a0:	673b      	str	r3, [r7, #112]	@ 0x70
 80047a2:	677a      	str	r2, [r7, #116]	@ 0x74
 80047a4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80047a8:	4642      	mov	r2, r8
 80047aa:	464b      	mov	r3, r9
 80047ac:	1891      	adds	r1, r2, r2
 80047ae:	60b9      	str	r1, [r7, #8]
 80047b0:	415b      	adcs	r3, r3
 80047b2:	60fb      	str	r3, [r7, #12]
 80047b4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80047b8:	4641      	mov	r1, r8
 80047ba:	1851      	adds	r1, r2, r1
 80047bc:	6039      	str	r1, [r7, #0]
 80047be:	4649      	mov	r1, r9
 80047c0:	414b      	adcs	r3, r1
 80047c2:	607b      	str	r3, [r7, #4]
 80047c4:	f04f 0200 	mov.w	r2, #0
 80047c8:	f04f 0300 	mov.w	r3, #0
 80047cc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80047d0:	4659      	mov	r1, fp
 80047d2:	00cb      	lsls	r3, r1, #3
 80047d4:	4651      	mov	r1, sl
 80047d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80047da:	4651      	mov	r1, sl
 80047dc:	00ca      	lsls	r2, r1, #3
 80047de:	4610      	mov	r0, r2
 80047e0:	4619      	mov	r1, r3
 80047e2:	4603      	mov	r3, r0
 80047e4:	4642      	mov	r2, r8
 80047e6:	189b      	adds	r3, r3, r2
 80047e8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80047ea:	464b      	mov	r3, r9
 80047ec:	460a      	mov	r2, r1
 80047ee:	eb42 0303 	adc.w	r3, r2, r3
 80047f2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80047f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047f8:	685b      	ldr	r3, [r3, #4]
 80047fa:	2200      	movs	r2, #0
 80047fc:	663b      	str	r3, [r7, #96]	@ 0x60
 80047fe:	667a      	str	r2, [r7, #100]	@ 0x64
 8004800:	f04f 0200 	mov.w	r2, #0
 8004804:	f04f 0300 	mov.w	r3, #0
 8004808:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800480c:	4649      	mov	r1, r9
 800480e:	008b      	lsls	r3, r1, #2
 8004810:	4641      	mov	r1, r8
 8004812:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004816:	4641      	mov	r1, r8
 8004818:	008a      	lsls	r2, r1, #2
 800481a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800481e:	f7fb fd27 	bl	8000270 <__aeabi_uldivmod>
 8004822:	4602      	mov	r2, r0
 8004824:	460b      	mov	r3, r1
 8004826:	4b0d      	ldr	r3, [pc, #52]	@ (800485c <UART_SetConfig+0x4e4>)
 8004828:	fba3 1302 	umull	r1, r3, r3, r2
 800482c:	095b      	lsrs	r3, r3, #5
 800482e:	2164      	movs	r1, #100	@ 0x64
 8004830:	fb01 f303 	mul.w	r3, r1, r3
 8004834:	1ad3      	subs	r3, r2, r3
 8004836:	011b      	lsls	r3, r3, #4
 8004838:	3332      	adds	r3, #50	@ 0x32
 800483a:	4a08      	ldr	r2, [pc, #32]	@ (800485c <UART_SetConfig+0x4e4>)
 800483c:	fba2 2303 	umull	r2, r3, r2, r3
 8004840:	095b      	lsrs	r3, r3, #5
 8004842:	f003 020f 	and.w	r2, r3, #15
 8004846:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	4422      	add	r2, r4
 800484e:	609a      	str	r2, [r3, #8]
}
 8004850:	bf00      	nop
 8004852:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004856:	46bd      	mov	sp, r7
 8004858:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800485c:	51eb851f 	.word	0x51eb851f

08004860 <siprintf>:
 8004860:	b40e      	push	{r1, r2, r3}
 8004862:	b500      	push	{lr}
 8004864:	b09c      	sub	sp, #112	@ 0x70
 8004866:	ab1d      	add	r3, sp, #116	@ 0x74
 8004868:	9002      	str	r0, [sp, #8]
 800486a:	9006      	str	r0, [sp, #24]
 800486c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004870:	4809      	ldr	r0, [pc, #36]	@ (8004898 <siprintf+0x38>)
 8004872:	9107      	str	r1, [sp, #28]
 8004874:	9104      	str	r1, [sp, #16]
 8004876:	4909      	ldr	r1, [pc, #36]	@ (800489c <siprintf+0x3c>)
 8004878:	f853 2b04 	ldr.w	r2, [r3], #4
 800487c:	9105      	str	r1, [sp, #20]
 800487e:	6800      	ldr	r0, [r0, #0]
 8004880:	9301      	str	r3, [sp, #4]
 8004882:	a902      	add	r1, sp, #8
 8004884:	f000 f994 	bl	8004bb0 <_svfiprintf_r>
 8004888:	9b02      	ldr	r3, [sp, #8]
 800488a:	2200      	movs	r2, #0
 800488c:	701a      	strb	r2, [r3, #0]
 800488e:	b01c      	add	sp, #112	@ 0x70
 8004890:	f85d eb04 	ldr.w	lr, [sp], #4
 8004894:	b003      	add	sp, #12
 8004896:	4770      	bx	lr
 8004898:	200000c8 	.word	0x200000c8
 800489c:	ffff0208 	.word	0xffff0208

080048a0 <memset>:
 80048a0:	4402      	add	r2, r0
 80048a2:	4603      	mov	r3, r0
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d100      	bne.n	80048aa <memset+0xa>
 80048a8:	4770      	bx	lr
 80048aa:	f803 1b01 	strb.w	r1, [r3], #1
 80048ae:	e7f9      	b.n	80048a4 <memset+0x4>

080048b0 <__errno>:
 80048b0:	4b01      	ldr	r3, [pc, #4]	@ (80048b8 <__errno+0x8>)
 80048b2:	6818      	ldr	r0, [r3, #0]
 80048b4:	4770      	bx	lr
 80048b6:	bf00      	nop
 80048b8:	200000c8 	.word	0x200000c8

080048bc <__libc_init_array>:
 80048bc:	b570      	push	{r4, r5, r6, lr}
 80048be:	4d0d      	ldr	r5, [pc, #52]	@ (80048f4 <__libc_init_array+0x38>)
 80048c0:	4c0d      	ldr	r4, [pc, #52]	@ (80048f8 <__libc_init_array+0x3c>)
 80048c2:	1b64      	subs	r4, r4, r5
 80048c4:	10a4      	asrs	r4, r4, #2
 80048c6:	2600      	movs	r6, #0
 80048c8:	42a6      	cmp	r6, r4
 80048ca:	d109      	bne.n	80048e0 <__libc_init_array+0x24>
 80048cc:	4d0b      	ldr	r5, [pc, #44]	@ (80048fc <__libc_init_array+0x40>)
 80048ce:	4c0c      	ldr	r4, [pc, #48]	@ (8004900 <__libc_init_array+0x44>)
 80048d0:	f000 fc66 	bl	80051a0 <_init>
 80048d4:	1b64      	subs	r4, r4, r5
 80048d6:	10a4      	asrs	r4, r4, #2
 80048d8:	2600      	movs	r6, #0
 80048da:	42a6      	cmp	r6, r4
 80048dc:	d105      	bne.n	80048ea <__libc_init_array+0x2e>
 80048de:	bd70      	pop	{r4, r5, r6, pc}
 80048e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80048e4:	4798      	blx	r3
 80048e6:	3601      	adds	r6, #1
 80048e8:	e7ee      	b.n	80048c8 <__libc_init_array+0xc>
 80048ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80048ee:	4798      	blx	r3
 80048f0:	3601      	adds	r6, #1
 80048f2:	e7f2      	b.n	80048da <__libc_init_array+0x1e>
 80048f4:	080052c8 	.word	0x080052c8
 80048f8:	080052c8 	.word	0x080052c8
 80048fc:	080052c8 	.word	0x080052c8
 8004900:	080052cc 	.word	0x080052cc

08004904 <__retarget_lock_acquire_recursive>:
 8004904:	4770      	bx	lr

08004906 <__retarget_lock_release_recursive>:
 8004906:	4770      	bx	lr

08004908 <_free_r>:
 8004908:	b538      	push	{r3, r4, r5, lr}
 800490a:	4605      	mov	r5, r0
 800490c:	2900      	cmp	r1, #0
 800490e:	d041      	beq.n	8004994 <_free_r+0x8c>
 8004910:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004914:	1f0c      	subs	r4, r1, #4
 8004916:	2b00      	cmp	r3, #0
 8004918:	bfb8      	it	lt
 800491a:	18e4      	addlt	r4, r4, r3
 800491c:	f000 f8e0 	bl	8004ae0 <__malloc_lock>
 8004920:	4a1d      	ldr	r2, [pc, #116]	@ (8004998 <_free_r+0x90>)
 8004922:	6813      	ldr	r3, [r2, #0]
 8004924:	b933      	cbnz	r3, 8004934 <_free_r+0x2c>
 8004926:	6063      	str	r3, [r4, #4]
 8004928:	6014      	str	r4, [r2, #0]
 800492a:	4628      	mov	r0, r5
 800492c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004930:	f000 b8dc 	b.w	8004aec <__malloc_unlock>
 8004934:	42a3      	cmp	r3, r4
 8004936:	d908      	bls.n	800494a <_free_r+0x42>
 8004938:	6820      	ldr	r0, [r4, #0]
 800493a:	1821      	adds	r1, r4, r0
 800493c:	428b      	cmp	r3, r1
 800493e:	bf01      	itttt	eq
 8004940:	6819      	ldreq	r1, [r3, #0]
 8004942:	685b      	ldreq	r3, [r3, #4]
 8004944:	1809      	addeq	r1, r1, r0
 8004946:	6021      	streq	r1, [r4, #0]
 8004948:	e7ed      	b.n	8004926 <_free_r+0x1e>
 800494a:	461a      	mov	r2, r3
 800494c:	685b      	ldr	r3, [r3, #4]
 800494e:	b10b      	cbz	r3, 8004954 <_free_r+0x4c>
 8004950:	42a3      	cmp	r3, r4
 8004952:	d9fa      	bls.n	800494a <_free_r+0x42>
 8004954:	6811      	ldr	r1, [r2, #0]
 8004956:	1850      	adds	r0, r2, r1
 8004958:	42a0      	cmp	r0, r4
 800495a:	d10b      	bne.n	8004974 <_free_r+0x6c>
 800495c:	6820      	ldr	r0, [r4, #0]
 800495e:	4401      	add	r1, r0
 8004960:	1850      	adds	r0, r2, r1
 8004962:	4283      	cmp	r3, r0
 8004964:	6011      	str	r1, [r2, #0]
 8004966:	d1e0      	bne.n	800492a <_free_r+0x22>
 8004968:	6818      	ldr	r0, [r3, #0]
 800496a:	685b      	ldr	r3, [r3, #4]
 800496c:	6053      	str	r3, [r2, #4]
 800496e:	4408      	add	r0, r1
 8004970:	6010      	str	r0, [r2, #0]
 8004972:	e7da      	b.n	800492a <_free_r+0x22>
 8004974:	d902      	bls.n	800497c <_free_r+0x74>
 8004976:	230c      	movs	r3, #12
 8004978:	602b      	str	r3, [r5, #0]
 800497a:	e7d6      	b.n	800492a <_free_r+0x22>
 800497c:	6820      	ldr	r0, [r4, #0]
 800497e:	1821      	adds	r1, r4, r0
 8004980:	428b      	cmp	r3, r1
 8004982:	bf04      	itt	eq
 8004984:	6819      	ldreq	r1, [r3, #0]
 8004986:	685b      	ldreq	r3, [r3, #4]
 8004988:	6063      	str	r3, [r4, #4]
 800498a:	bf04      	itt	eq
 800498c:	1809      	addeq	r1, r1, r0
 800498e:	6021      	streq	r1, [r4, #0]
 8004990:	6054      	str	r4, [r2, #4]
 8004992:	e7ca      	b.n	800492a <_free_r+0x22>
 8004994:	bd38      	pop	{r3, r4, r5, pc}
 8004996:	bf00      	nop
 8004998:	20000330 	.word	0x20000330

0800499c <sbrk_aligned>:
 800499c:	b570      	push	{r4, r5, r6, lr}
 800499e:	4e0f      	ldr	r6, [pc, #60]	@ (80049dc <sbrk_aligned+0x40>)
 80049a0:	460c      	mov	r4, r1
 80049a2:	6831      	ldr	r1, [r6, #0]
 80049a4:	4605      	mov	r5, r0
 80049a6:	b911      	cbnz	r1, 80049ae <sbrk_aligned+0x12>
 80049a8:	f000 fba6 	bl	80050f8 <_sbrk_r>
 80049ac:	6030      	str	r0, [r6, #0]
 80049ae:	4621      	mov	r1, r4
 80049b0:	4628      	mov	r0, r5
 80049b2:	f000 fba1 	bl	80050f8 <_sbrk_r>
 80049b6:	1c43      	adds	r3, r0, #1
 80049b8:	d103      	bne.n	80049c2 <sbrk_aligned+0x26>
 80049ba:	f04f 34ff 	mov.w	r4, #4294967295
 80049be:	4620      	mov	r0, r4
 80049c0:	bd70      	pop	{r4, r5, r6, pc}
 80049c2:	1cc4      	adds	r4, r0, #3
 80049c4:	f024 0403 	bic.w	r4, r4, #3
 80049c8:	42a0      	cmp	r0, r4
 80049ca:	d0f8      	beq.n	80049be <sbrk_aligned+0x22>
 80049cc:	1a21      	subs	r1, r4, r0
 80049ce:	4628      	mov	r0, r5
 80049d0:	f000 fb92 	bl	80050f8 <_sbrk_r>
 80049d4:	3001      	adds	r0, #1
 80049d6:	d1f2      	bne.n	80049be <sbrk_aligned+0x22>
 80049d8:	e7ef      	b.n	80049ba <sbrk_aligned+0x1e>
 80049da:	bf00      	nop
 80049dc:	2000032c 	.word	0x2000032c

080049e0 <_malloc_r>:
 80049e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80049e4:	1ccd      	adds	r5, r1, #3
 80049e6:	f025 0503 	bic.w	r5, r5, #3
 80049ea:	3508      	adds	r5, #8
 80049ec:	2d0c      	cmp	r5, #12
 80049ee:	bf38      	it	cc
 80049f0:	250c      	movcc	r5, #12
 80049f2:	2d00      	cmp	r5, #0
 80049f4:	4606      	mov	r6, r0
 80049f6:	db01      	blt.n	80049fc <_malloc_r+0x1c>
 80049f8:	42a9      	cmp	r1, r5
 80049fa:	d904      	bls.n	8004a06 <_malloc_r+0x26>
 80049fc:	230c      	movs	r3, #12
 80049fe:	6033      	str	r3, [r6, #0]
 8004a00:	2000      	movs	r0, #0
 8004a02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004a06:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004adc <_malloc_r+0xfc>
 8004a0a:	f000 f869 	bl	8004ae0 <__malloc_lock>
 8004a0e:	f8d8 3000 	ldr.w	r3, [r8]
 8004a12:	461c      	mov	r4, r3
 8004a14:	bb44      	cbnz	r4, 8004a68 <_malloc_r+0x88>
 8004a16:	4629      	mov	r1, r5
 8004a18:	4630      	mov	r0, r6
 8004a1a:	f7ff ffbf 	bl	800499c <sbrk_aligned>
 8004a1e:	1c43      	adds	r3, r0, #1
 8004a20:	4604      	mov	r4, r0
 8004a22:	d158      	bne.n	8004ad6 <_malloc_r+0xf6>
 8004a24:	f8d8 4000 	ldr.w	r4, [r8]
 8004a28:	4627      	mov	r7, r4
 8004a2a:	2f00      	cmp	r7, #0
 8004a2c:	d143      	bne.n	8004ab6 <_malloc_r+0xd6>
 8004a2e:	2c00      	cmp	r4, #0
 8004a30:	d04b      	beq.n	8004aca <_malloc_r+0xea>
 8004a32:	6823      	ldr	r3, [r4, #0]
 8004a34:	4639      	mov	r1, r7
 8004a36:	4630      	mov	r0, r6
 8004a38:	eb04 0903 	add.w	r9, r4, r3
 8004a3c:	f000 fb5c 	bl	80050f8 <_sbrk_r>
 8004a40:	4581      	cmp	r9, r0
 8004a42:	d142      	bne.n	8004aca <_malloc_r+0xea>
 8004a44:	6821      	ldr	r1, [r4, #0]
 8004a46:	1a6d      	subs	r5, r5, r1
 8004a48:	4629      	mov	r1, r5
 8004a4a:	4630      	mov	r0, r6
 8004a4c:	f7ff ffa6 	bl	800499c <sbrk_aligned>
 8004a50:	3001      	adds	r0, #1
 8004a52:	d03a      	beq.n	8004aca <_malloc_r+0xea>
 8004a54:	6823      	ldr	r3, [r4, #0]
 8004a56:	442b      	add	r3, r5
 8004a58:	6023      	str	r3, [r4, #0]
 8004a5a:	f8d8 3000 	ldr.w	r3, [r8]
 8004a5e:	685a      	ldr	r2, [r3, #4]
 8004a60:	bb62      	cbnz	r2, 8004abc <_malloc_r+0xdc>
 8004a62:	f8c8 7000 	str.w	r7, [r8]
 8004a66:	e00f      	b.n	8004a88 <_malloc_r+0xa8>
 8004a68:	6822      	ldr	r2, [r4, #0]
 8004a6a:	1b52      	subs	r2, r2, r5
 8004a6c:	d420      	bmi.n	8004ab0 <_malloc_r+0xd0>
 8004a6e:	2a0b      	cmp	r2, #11
 8004a70:	d917      	bls.n	8004aa2 <_malloc_r+0xc2>
 8004a72:	1961      	adds	r1, r4, r5
 8004a74:	42a3      	cmp	r3, r4
 8004a76:	6025      	str	r5, [r4, #0]
 8004a78:	bf18      	it	ne
 8004a7a:	6059      	strne	r1, [r3, #4]
 8004a7c:	6863      	ldr	r3, [r4, #4]
 8004a7e:	bf08      	it	eq
 8004a80:	f8c8 1000 	streq.w	r1, [r8]
 8004a84:	5162      	str	r2, [r4, r5]
 8004a86:	604b      	str	r3, [r1, #4]
 8004a88:	4630      	mov	r0, r6
 8004a8a:	f000 f82f 	bl	8004aec <__malloc_unlock>
 8004a8e:	f104 000b 	add.w	r0, r4, #11
 8004a92:	1d23      	adds	r3, r4, #4
 8004a94:	f020 0007 	bic.w	r0, r0, #7
 8004a98:	1ac2      	subs	r2, r0, r3
 8004a9a:	bf1c      	itt	ne
 8004a9c:	1a1b      	subne	r3, r3, r0
 8004a9e:	50a3      	strne	r3, [r4, r2]
 8004aa0:	e7af      	b.n	8004a02 <_malloc_r+0x22>
 8004aa2:	6862      	ldr	r2, [r4, #4]
 8004aa4:	42a3      	cmp	r3, r4
 8004aa6:	bf0c      	ite	eq
 8004aa8:	f8c8 2000 	streq.w	r2, [r8]
 8004aac:	605a      	strne	r2, [r3, #4]
 8004aae:	e7eb      	b.n	8004a88 <_malloc_r+0xa8>
 8004ab0:	4623      	mov	r3, r4
 8004ab2:	6864      	ldr	r4, [r4, #4]
 8004ab4:	e7ae      	b.n	8004a14 <_malloc_r+0x34>
 8004ab6:	463c      	mov	r4, r7
 8004ab8:	687f      	ldr	r7, [r7, #4]
 8004aba:	e7b6      	b.n	8004a2a <_malloc_r+0x4a>
 8004abc:	461a      	mov	r2, r3
 8004abe:	685b      	ldr	r3, [r3, #4]
 8004ac0:	42a3      	cmp	r3, r4
 8004ac2:	d1fb      	bne.n	8004abc <_malloc_r+0xdc>
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	6053      	str	r3, [r2, #4]
 8004ac8:	e7de      	b.n	8004a88 <_malloc_r+0xa8>
 8004aca:	230c      	movs	r3, #12
 8004acc:	6033      	str	r3, [r6, #0]
 8004ace:	4630      	mov	r0, r6
 8004ad0:	f000 f80c 	bl	8004aec <__malloc_unlock>
 8004ad4:	e794      	b.n	8004a00 <_malloc_r+0x20>
 8004ad6:	6005      	str	r5, [r0, #0]
 8004ad8:	e7d6      	b.n	8004a88 <_malloc_r+0xa8>
 8004ada:	bf00      	nop
 8004adc:	20000330 	.word	0x20000330

08004ae0 <__malloc_lock>:
 8004ae0:	4801      	ldr	r0, [pc, #4]	@ (8004ae8 <__malloc_lock+0x8>)
 8004ae2:	f7ff bf0f 	b.w	8004904 <__retarget_lock_acquire_recursive>
 8004ae6:	bf00      	nop
 8004ae8:	20000328 	.word	0x20000328

08004aec <__malloc_unlock>:
 8004aec:	4801      	ldr	r0, [pc, #4]	@ (8004af4 <__malloc_unlock+0x8>)
 8004aee:	f7ff bf0a 	b.w	8004906 <__retarget_lock_release_recursive>
 8004af2:	bf00      	nop
 8004af4:	20000328 	.word	0x20000328

08004af8 <__ssputs_r>:
 8004af8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004afc:	688e      	ldr	r6, [r1, #8]
 8004afe:	461f      	mov	r7, r3
 8004b00:	42be      	cmp	r6, r7
 8004b02:	680b      	ldr	r3, [r1, #0]
 8004b04:	4682      	mov	sl, r0
 8004b06:	460c      	mov	r4, r1
 8004b08:	4690      	mov	r8, r2
 8004b0a:	d82d      	bhi.n	8004b68 <__ssputs_r+0x70>
 8004b0c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004b10:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004b14:	d026      	beq.n	8004b64 <__ssputs_r+0x6c>
 8004b16:	6965      	ldr	r5, [r4, #20]
 8004b18:	6909      	ldr	r1, [r1, #16]
 8004b1a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004b1e:	eba3 0901 	sub.w	r9, r3, r1
 8004b22:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004b26:	1c7b      	adds	r3, r7, #1
 8004b28:	444b      	add	r3, r9
 8004b2a:	106d      	asrs	r5, r5, #1
 8004b2c:	429d      	cmp	r5, r3
 8004b2e:	bf38      	it	cc
 8004b30:	461d      	movcc	r5, r3
 8004b32:	0553      	lsls	r3, r2, #21
 8004b34:	d527      	bpl.n	8004b86 <__ssputs_r+0x8e>
 8004b36:	4629      	mov	r1, r5
 8004b38:	f7ff ff52 	bl	80049e0 <_malloc_r>
 8004b3c:	4606      	mov	r6, r0
 8004b3e:	b360      	cbz	r0, 8004b9a <__ssputs_r+0xa2>
 8004b40:	6921      	ldr	r1, [r4, #16]
 8004b42:	464a      	mov	r2, r9
 8004b44:	f000 fae8 	bl	8005118 <memcpy>
 8004b48:	89a3      	ldrh	r3, [r4, #12]
 8004b4a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004b4e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004b52:	81a3      	strh	r3, [r4, #12]
 8004b54:	6126      	str	r6, [r4, #16]
 8004b56:	6165      	str	r5, [r4, #20]
 8004b58:	444e      	add	r6, r9
 8004b5a:	eba5 0509 	sub.w	r5, r5, r9
 8004b5e:	6026      	str	r6, [r4, #0]
 8004b60:	60a5      	str	r5, [r4, #8]
 8004b62:	463e      	mov	r6, r7
 8004b64:	42be      	cmp	r6, r7
 8004b66:	d900      	bls.n	8004b6a <__ssputs_r+0x72>
 8004b68:	463e      	mov	r6, r7
 8004b6a:	6820      	ldr	r0, [r4, #0]
 8004b6c:	4632      	mov	r2, r6
 8004b6e:	4641      	mov	r1, r8
 8004b70:	f000 faa8 	bl	80050c4 <memmove>
 8004b74:	68a3      	ldr	r3, [r4, #8]
 8004b76:	1b9b      	subs	r3, r3, r6
 8004b78:	60a3      	str	r3, [r4, #8]
 8004b7a:	6823      	ldr	r3, [r4, #0]
 8004b7c:	4433      	add	r3, r6
 8004b7e:	6023      	str	r3, [r4, #0]
 8004b80:	2000      	movs	r0, #0
 8004b82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b86:	462a      	mov	r2, r5
 8004b88:	f000 fad4 	bl	8005134 <_realloc_r>
 8004b8c:	4606      	mov	r6, r0
 8004b8e:	2800      	cmp	r0, #0
 8004b90:	d1e0      	bne.n	8004b54 <__ssputs_r+0x5c>
 8004b92:	6921      	ldr	r1, [r4, #16]
 8004b94:	4650      	mov	r0, sl
 8004b96:	f7ff feb7 	bl	8004908 <_free_r>
 8004b9a:	230c      	movs	r3, #12
 8004b9c:	f8ca 3000 	str.w	r3, [sl]
 8004ba0:	89a3      	ldrh	r3, [r4, #12]
 8004ba2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004ba6:	81a3      	strh	r3, [r4, #12]
 8004ba8:	f04f 30ff 	mov.w	r0, #4294967295
 8004bac:	e7e9      	b.n	8004b82 <__ssputs_r+0x8a>
	...

08004bb0 <_svfiprintf_r>:
 8004bb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bb4:	4698      	mov	r8, r3
 8004bb6:	898b      	ldrh	r3, [r1, #12]
 8004bb8:	061b      	lsls	r3, r3, #24
 8004bba:	b09d      	sub	sp, #116	@ 0x74
 8004bbc:	4607      	mov	r7, r0
 8004bbe:	460d      	mov	r5, r1
 8004bc0:	4614      	mov	r4, r2
 8004bc2:	d510      	bpl.n	8004be6 <_svfiprintf_r+0x36>
 8004bc4:	690b      	ldr	r3, [r1, #16]
 8004bc6:	b973      	cbnz	r3, 8004be6 <_svfiprintf_r+0x36>
 8004bc8:	2140      	movs	r1, #64	@ 0x40
 8004bca:	f7ff ff09 	bl	80049e0 <_malloc_r>
 8004bce:	6028      	str	r0, [r5, #0]
 8004bd0:	6128      	str	r0, [r5, #16]
 8004bd2:	b930      	cbnz	r0, 8004be2 <_svfiprintf_r+0x32>
 8004bd4:	230c      	movs	r3, #12
 8004bd6:	603b      	str	r3, [r7, #0]
 8004bd8:	f04f 30ff 	mov.w	r0, #4294967295
 8004bdc:	b01d      	add	sp, #116	@ 0x74
 8004bde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004be2:	2340      	movs	r3, #64	@ 0x40
 8004be4:	616b      	str	r3, [r5, #20]
 8004be6:	2300      	movs	r3, #0
 8004be8:	9309      	str	r3, [sp, #36]	@ 0x24
 8004bea:	2320      	movs	r3, #32
 8004bec:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004bf0:	f8cd 800c 	str.w	r8, [sp, #12]
 8004bf4:	2330      	movs	r3, #48	@ 0x30
 8004bf6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004d94 <_svfiprintf_r+0x1e4>
 8004bfa:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004bfe:	f04f 0901 	mov.w	r9, #1
 8004c02:	4623      	mov	r3, r4
 8004c04:	469a      	mov	sl, r3
 8004c06:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004c0a:	b10a      	cbz	r2, 8004c10 <_svfiprintf_r+0x60>
 8004c0c:	2a25      	cmp	r2, #37	@ 0x25
 8004c0e:	d1f9      	bne.n	8004c04 <_svfiprintf_r+0x54>
 8004c10:	ebba 0b04 	subs.w	fp, sl, r4
 8004c14:	d00b      	beq.n	8004c2e <_svfiprintf_r+0x7e>
 8004c16:	465b      	mov	r3, fp
 8004c18:	4622      	mov	r2, r4
 8004c1a:	4629      	mov	r1, r5
 8004c1c:	4638      	mov	r0, r7
 8004c1e:	f7ff ff6b 	bl	8004af8 <__ssputs_r>
 8004c22:	3001      	adds	r0, #1
 8004c24:	f000 80a7 	beq.w	8004d76 <_svfiprintf_r+0x1c6>
 8004c28:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004c2a:	445a      	add	r2, fp
 8004c2c:	9209      	str	r2, [sp, #36]	@ 0x24
 8004c2e:	f89a 3000 	ldrb.w	r3, [sl]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	f000 809f 	beq.w	8004d76 <_svfiprintf_r+0x1c6>
 8004c38:	2300      	movs	r3, #0
 8004c3a:	f04f 32ff 	mov.w	r2, #4294967295
 8004c3e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004c42:	f10a 0a01 	add.w	sl, sl, #1
 8004c46:	9304      	str	r3, [sp, #16]
 8004c48:	9307      	str	r3, [sp, #28]
 8004c4a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004c4e:	931a      	str	r3, [sp, #104]	@ 0x68
 8004c50:	4654      	mov	r4, sl
 8004c52:	2205      	movs	r2, #5
 8004c54:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004c58:	484e      	ldr	r0, [pc, #312]	@ (8004d94 <_svfiprintf_r+0x1e4>)
 8004c5a:	f7fb fab9 	bl	80001d0 <memchr>
 8004c5e:	9a04      	ldr	r2, [sp, #16]
 8004c60:	b9d8      	cbnz	r0, 8004c9a <_svfiprintf_r+0xea>
 8004c62:	06d0      	lsls	r0, r2, #27
 8004c64:	bf44      	itt	mi
 8004c66:	2320      	movmi	r3, #32
 8004c68:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004c6c:	0711      	lsls	r1, r2, #28
 8004c6e:	bf44      	itt	mi
 8004c70:	232b      	movmi	r3, #43	@ 0x2b
 8004c72:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004c76:	f89a 3000 	ldrb.w	r3, [sl]
 8004c7a:	2b2a      	cmp	r3, #42	@ 0x2a
 8004c7c:	d015      	beq.n	8004caa <_svfiprintf_r+0xfa>
 8004c7e:	9a07      	ldr	r2, [sp, #28]
 8004c80:	4654      	mov	r4, sl
 8004c82:	2000      	movs	r0, #0
 8004c84:	f04f 0c0a 	mov.w	ip, #10
 8004c88:	4621      	mov	r1, r4
 8004c8a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004c8e:	3b30      	subs	r3, #48	@ 0x30
 8004c90:	2b09      	cmp	r3, #9
 8004c92:	d94b      	bls.n	8004d2c <_svfiprintf_r+0x17c>
 8004c94:	b1b0      	cbz	r0, 8004cc4 <_svfiprintf_r+0x114>
 8004c96:	9207      	str	r2, [sp, #28]
 8004c98:	e014      	b.n	8004cc4 <_svfiprintf_r+0x114>
 8004c9a:	eba0 0308 	sub.w	r3, r0, r8
 8004c9e:	fa09 f303 	lsl.w	r3, r9, r3
 8004ca2:	4313      	orrs	r3, r2
 8004ca4:	9304      	str	r3, [sp, #16]
 8004ca6:	46a2      	mov	sl, r4
 8004ca8:	e7d2      	b.n	8004c50 <_svfiprintf_r+0xa0>
 8004caa:	9b03      	ldr	r3, [sp, #12]
 8004cac:	1d19      	adds	r1, r3, #4
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	9103      	str	r1, [sp, #12]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	bfbb      	ittet	lt
 8004cb6:	425b      	neglt	r3, r3
 8004cb8:	f042 0202 	orrlt.w	r2, r2, #2
 8004cbc:	9307      	strge	r3, [sp, #28]
 8004cbe:	9307      	strlt	r3, [sp, #28]
 8004cc0:	bfb8      	it	lt
 8004cc2:	9204      	strlt	r2, [sp, #16]
 8004cc4:	7823      	ldrb	r3, [r4, #0]
 8004cc6:	2b2e      	cmp	r3, #46	@ 0x2e
 8004cc8:	d10a      	bne.n	8004ce0 <_svfiprintf_r+0x130>
 8004cca:	7863      	ldrb	r3, [r4, #1]
 8004ccc:	2b2a      	cmp	r3, #42	@ 0x2a
 8004cce:	d132      	bne.n	8004d36 <_svfiprintf_r+0x186>
 8004cd0:	9b03      	ldr	r3, [sp, #12]
 8004cd2:	1d1a      	adds	r2, r3, #4
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	9203      	str	r2, [sp, #12]
 8004cd8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004cdc:	3402      	adds	r4, #2
 8004cde:	9305      	str	r3, [sp, #20]
 8004ce0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004da4 <_svfiprintf_r+0x1f4>
 8004ce4:	7821      	ldrb	r1, [r4, #0]
 8004ce6:	2203      	movs	r2, #3
 8004ce8:	4650      	mov	r0, sl
 8004cea:	f7fb fa71 	bl	80001d0 <memchr>
 8004cee:	b138      	cbz	r0, 8004d00 <_svfiprintf_r+0x150>
 8004cf0:	9b04      	ldr	r3, [sp, #16]
 8004cf2:	eba0 000a 	sub.w	r0, r0, sl
 8004cf6:	2240      	movs	r2, #64	@ 0x40
 8004cf8:	4082      	lsls	r2, r0
 8004cfa:	4313      	orrs	r3, r2
 8004cfc:	3401      	adds	r4, #1
 8004cfe:	9304      	str	r3, [sp, #16]
 8004d00:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004d04:	4824      	ldr	r0, [pc, #144]	@ (8004d98 <_svfiprintf_r+0x1e8>)
 8004d06:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004d0a:	2206      	movs	r2, #6
 8004d0c:	f7fb fa60 	bl	80001d0 <memchr>
 8004d10:	2800      	cmp	r0, #0
 8004d12:	d036      	beq.n	8004d82 <_svfiprintf_r+0x1d2>
 8004d14:	4b21      	ldr	r3, [pc, #132]	@ (8004d9c <_svfiprintf_r+0x1ec>)
 8004d16:	bb1b      	cbnz	r3, 8004d60 <_svfiprintf_r+0x1b0>
 8004d18:	9b03      	ldr	r3, [sp, #12]
 8004d1a:	3307      	adds	r3, #7
 8004d1c:	f023 0307 	bic.w	r3, r3, #7
 8004d20:	3308      	adds	r3, #8
 8004d22:	9303      	str	r3, [sp, #12]
 8004d24:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004d26:	4433      	add	r3, r6
 8004d28:	9309      	str	r3, [sp, #36]	@ 0x24
 8004d2a:	e76a      	b.n	8004c02 <_svfiprintf_r+0x52>
 8004d2c:	fb0c 3202 	mla	r2, ip, r2, r3
 8004d30:	460c      	mov	r4, r1
 8004d32:	2001      	movs	r0, #1
 8004d34:	e7a8      	b.n	8004c88 <_svfiprintf_r+0xd8>
 8004d36:	2300      	movs	r3, #0
 8004d38:	3401      	adds	r4, #1
 8004d3a:	9305      	str	r3, [sp, #20]
 8004d3c:	4619      	mov	r1, r3
 8004d3e:	f04f 0c0a 	mov.w	ip, #10
 8004d42:	4620      	mov	r0, r4
 8004d44:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004d48:	3a30      	subs	r2, #48	@ 0x30
 8004d4a:	2a09      	cmp	r2, #9
 8004d4c:	d903      	bls.n	8004d56 <_svfiprintf_r+0x1a6>
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d0c6      	beq.n	8004ce0 <_svfiprintf_r+0x130>
 8004d52:	9105      	str	r1, [sp, #20]
 8004d54:	e7c4      	b.n	8004ce0 <_svfiprintf_r+0x130>
 8004d56:	fb0c 2101 	mla	r1, ip, r1, r2
 8004d5a:	4604      	mov	r4, r0
 8004d5c:	2301      	movs	r3, #1
 8004d5e:	e7f0      	b.n	8004d42 <_svfiprintf_r+0x192>
 8004d60:	ab03      	add	r3, sp, #12
 8004d62:	9300      	str	r3, [sp, #0]
 8004d64:	462a      	mov	r2, r5
 8004d66:	4b0e      	ldr	r3, [pc, #56]	@ (8004da0 <_svfiprintf_r+0x1f0>)
 8004d68:	a904      	add	r1, sp, #16
 8004d6a:	4638      	mov	r0, r7
 8004d6c:	f3af 8000 	nop.w
 8004d70:	1c42      	adds	r2, r0, #1
 8004d72:	4606      	mov	r6, r0
 8004d74:	d1d6      	bne.n	8004d24 <_svfiprintf_r+0x174>
 8004d76:	89ab      	ldrh	r3, [r5, #12]
 8004d78:	065b      	lsls	r3, r3, #25
 8004d7a:	f53f af2d 	bmi.w	8004bd8 <_svfiprintf_r+0x28>
 8004d7e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004d80:	e72c      	b.n	8004bdc <_svfiprintf_r+0x2c>
 8004d82:	ab03      	add	r3, sp, #12
 8004d84:	9300      	str	r3, [sp, #0]
 8004d86:	462a      	mov	r2, r5
 8004d88:	4b05      	ldr	r3, [pc, #20]	@ (8004da0 <_svfiprintf_r+0x1f0>)
 8004d8a:	a904      	add	r1, sp, #16
 8004d8c:	4638      	mov	r0, r7
 8004d8e:	f000 f879 	bl	8004e84 <_printf_i>
 8004d92:	e7ed      	b.n	8004d70 <_svfiprintf_r+0x1c0>
 8004d94:	0800528c 	.word	0x0800528c
 8004d98:	08005296 	.word	0x08005296
 8004d9c:	00000000 	.word	0x00000000
 8004da0:	08004af9 	.word	0x08004af9
 8004da4:	08005292 	.word	0x08005292

08004da8 <_printf_common>:
 8004da8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004dac:	4616      	mov	r6, r2
 8004dae:	4698      	mov	r8, r3
 8004db0:	688a      	ldr	r2, [r1, #8]
 8004db2:	690b      	ldr	r3, [r1, #16]
 8004db4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004db8:	4293      	cmp	r3, r2
 8004dba:	bfb8      	it	lt
 8004dbc:	4613      	movlt	r3, r2
 8004dbe:	6033      	str	r3, [r6, #0]
 8004dc0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004dc4:	4607      	mov	r7, r0
 8004dc6:	460c      	mov	r4, r1
 8004dc8:	b10a      	cbz	r2, 8004dce <_printf_common+0x26>
 8004dca:	3301      	adds	r3, #1
 8004dcc:	6033      	str	r3, [r6, #0]
 8004dce:	6823      	ldr	r3, [r4, #0]
 8004dd0:	0699      	lsls	r1, r3, #26
 8004dd2:	bf42      	ittt	mi
 8004dd4:	6833      	ldrmi	r3, [r6, #0]
 8004dd6:	3302      	addmi	r3, #2
 8004dd8:	6033      	strmi	r3, [r6, #0]
 8004dda:	6825      	ldr	r5, [r4, #0]
 8004ddc:	f015 0506 	ands.w	r5, r5, #6
 8004de0:	d106      	bne.n	8004df0 <_printf_common+0x48>
 8004de2:	f104 0a19 	add.w	sl, r4, #25
 8004de6:	68e3      	ldr	r3, [r4, #12]
 8004de8:	6832      	ldr	r2, [r6, #0]
 8004dea:	1a9b      	subs	r3, r3, r2
 8004dec:	42ab      	cmp	r3, r5
 8004dee:	dc26      	bgt.n	8004e3e <_printf_common+0x96>
 8004df0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004df4:	6822      	ldr	r2, [r4, #0]
 8004df6:	3b00      	subs	r3, #0
 8004df8:	bf18      	it	ne
 8004dfa:	2301      	movne	r3, #1
 8004dfc:	0692      	lsls	r2, r2, #26
 8004dfe:	d42b      	bmi.n	8004e58 <_printf_common+0xb0>
 8004e00:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004e04:	4641      	mov	r1, r8
 8004e06:	4638      	mov	r0, r7
 8004e08:	47c8      	blx	r9
 8004e0a:	3001      	adds	r0, #1
 8004e0c:	d01e      	beq.n	8004e4c <_printf_common+0xa4>
 8004e0e:	6823      	ldr	r3, [r4, #0]
 8004e10:	6922      	ldr	r2, [r4, #16]
 8004e12:	f003 0306 	and.w	r3, r3, #6
 8004e16:	2b04      	cmp	r3, #4
 8004e18:	bf02      	ittt	eq
 8004e1a:	68e5      	ldreq	r5, [r4, #12]
 8004e1c:	6833      	ldreq	r3, [r6, #0]
 8004e1e:	1aed      	subeq	r5, r5, r3
 8004e20:	68a3      	ldr	r3, [r4, #8]
 8004e22:	bf0c      	ite	eq
 8004e24:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004e28:	2500      	movne	r5, #0
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	bfc4      	itt	gt
 8004e2e:	1a9b      	subgt	r3, r3, r2
 8004e30:	18ed      	addgt	r5, r5, r3
 8004e32:	2600      	movs	r6, #0
 8004e34:	341a      	adds	r4, #26
 8004e36:	42b5      	cmp	r5, r6
 8004e38:	d11a      	bne.n	8004e70 <_printf_common+0xc8>
 8004e3a:	2000      	movs	r0, #0
 8004e3c:	e008      	b.n	8004e50 <_printf_common+0xa8>
 8004e3e:	2301      	movs	r3, #1
 8004e40:	4652      	mov	r2, sl
 8004e42:	4641      	mov	r1, r8
 8004e44:	4638      	mov	r0, r7
 8004e46:	47c8      	blx	r9
 8004e48:	3001      	adds	r0, #1
 8004e4a:	d103      	bne.n	8004e54 <_printf_common+0xac>
 8004e4c:	f04f 30ff 	mov.w	r0, #4294967295
 8004e50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e54:	3501      	adds	r5, #1
 8004e56:	e7c6      	b.n	8004de6 <_printf_common+0x3e>
 8004e58:	18e1      	adds	r1, r4, r3
 8004e5a:	1c5a      	adds	r2, r3, #1
 8004e5c:	2030      	movs	r0, #48	@ 0x30
 8004e5e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004e62:	4422      	add	r2, r4
 8004e64:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004e68:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004e6c:	3302      	adds	r3, #2
 8004e6e:	e7c7      	b.n	8004e00 <_printf_common+0x58>
 8004e70:	2301      	movs	r3, #1
 8004e72:	4622      	mov	r2, r4
 8004e74:	4641      	mov	r1, r8
 8004e76:	4638      	mov	r0, r7
 8004e78:	47c8      	blx	r9
 8004e7a:	3001      	adds	r0, #1
 8004e7c:	d0e6      	beq.n	8004e4c <_printf_common+0xa4>
 8004e7e:	3601      	adds	r6, #1
 8004e80:	e7d9      	b.n	8004e36 <_printf_common+0x8e>
	...

08004e84 <_printf_i>:
 8004e84:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004e88:	7e0f      	ldrb	r7, [r1, #24]
 8004e8a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004e8c:	2f78      	cmp	r7, #120	@ 0x78
 8004e8e:	4691      	mov	r9, r2
 8004e90:	4680      	mov	r8, r0
 8004e92:	460c      	mov	r4, r1
 8004e94:	469a      	mov	sl, r3
 8004e96:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004e9a:	d807      	bhi.n	8004eac <_printf_i+0x28>
 8004e9c:	2f62      	cmp	r7, #98	@ 0x62
 8004e9e:	d80a      	bhi.n	8004eb6 <_printf_i+0x32>
 8004ea0:	2f00      	cmp	r7, #0
 8004ea2:	f000 80d2 	beq.w	800504a <_printf_i+0x1c6>
 8004ea6:	2f58      	cmp	r7, #88	@ 0x58
 8004ea8:	f000 80b9 	beq.w	800501e <_printf_i+0x19a>
 8004eac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004eb0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004eb4:	e03a      	b.n	8004f2c <_printf_i+0xa8>
 8004eb6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004eba:	2b15      	cmp	r3, #21
 8004ebc:	d8f6      	bhi.n	8004eac <_printf_i+0x28>
 8004ebe:	a101      	add	r1, pc, #4	@ (adr r1, 8004ec4 <_printf_i+0x40>)
 8004ec0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004ec4:	08004f1d 	.word	0x08004f1d
 8004ec8:	08004f31 	.word	0x08004f31
 8004ecc:	08004ead 	.word	0x08004ead
 8004ed0:	08004ead 	.word	0x08004ead
 8004ed4:	08004ead 	.word	0x08004ead
 8004ed8:	08004ead 	.word	0x08004ead
 8004edc:	08004f31 	.word	0x08004f31
 8004ee0:	08004ead 	.word	0x08004ead
 8004ee4:	08004ead 	.word	0x08004ead
 8004ee8:	08004ead 	.word	0x08004ead
 8004eec:	08004ead 	.word	0x08004ead
 8004ef0:	08005031 	.word	0x08005031
 8004ef4:	08004f5b 	.word	0x08004f5b
 8004ef8:	08004feb 	.word	0x08004feb
 8004efc:	08004ead 	.word	0x08004ead
 8004f00:	08004ead 	.word	0x08004ead
 8004f04:	08005053 	.word	0x08005053
 8004f08:	08004ead 	.word	0x08004ead
 8004f0c:	08004f5b 	.word	0x08004f5b
 8004f10:	08004ead 	.word	0x08004ead
 8004f14:	08004ead 	.word	0x08004ead
 8004f18:	08004ff3 	.word	0x08004ff3
 8004f1c:	6833      	ldr	r3, [r6, #0]
 8004f1e:	1d1a      	adds	r2, r3, #4
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	6032      	str	r2, [r6, #0]
 8004f24:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004f28:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004f2c:	2301      	movs	r3, #1
 8004f2e:	e09d      	b.n	800506c <_printf_i+0x1e8>
 8004f30:	6833      	ldr	r3, [r6, #0]
 8004f32:	6820      	ldr	r0, [r4, #0]
 8004f34:	1d19      	adds	r1, r3, #4
 8004f36:	6031      	str	r1, [r6, #0]
 8004f38:	0606      	lsls	r6, r0, #24
 8004f3a:	d501      	bpl.n	8004f40 <_printf_i+0xbc>
 8004f3c:	681d      	ldr	r5, [r3, #0]
 8004f3e:	e003      	b.n	8004f48 <_printf_i+0xc4>
 8004f40:	0645      	lsls	r5, r0, #25
 8004f42:	d5fb      	bpl.n	8004f3c <_printf_i+0xb8>
 8004f44:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004f48:	2d00      	cmp	r5, #0
 8004f4a:	da03      	bge.n	8004f54 <_printf_i+0xd0>
 8004f4c:	232d      	movs	r3, #45	@ 0x2d
 8004f4e:	426d      	negs	r5, r5
 8004f50:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004f54:	4859      	ldr	r0, [pc, #356]	@ (80050bc <_printf_i+0x238>)
 8004f56:	230a      	movs	r3, #10
 8004f58:	e011      	b.n	8004f7e <_printf_i+0xfa>
 8004f5a:	6821      	ldr	r1, [r4, #0]
 8004f5c:	6833      	ldr	r3, [r6, #0]
 8004f5e:	0608      	lsls	r0, r1, #24
 8004f60:	f853 5b04 	ldr.w	r5, [r3], #4
 8004f64:	d402      	bmi.n	8004f6c <_printf_i+0xe8>
 8004f66:	0649      	lsls	r1, r1, #25
 8004f68:	bf48      	it	mi
 8004f6a:	b2ad      	uxthmi	r5, r5
 8004f6c:	2f6f      	cmp	r7, #111	@ 0x6f
 8004f6e:	4853      	ldr	r0, [pc, #332]	@ (80050bc <_printf_i+0x238>)
 8004f70:	6033      	str	r3, [r6, #0]
 8004f72:	bf14      	ite	ne
 8004f74:	230a      	movne	r3, #10
 8004f76:	2308      	moveq	r3, #8
 8004f78:	2100      	movs	r1, #0
 8004f7a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004f7e:	6866      	ldr	r6, [r4, #4]
 8004f80:	60a6      	str	r6, [r4, #8]
 8004f82:	2e00      	cmp	r6, #0
 8004f84:	bfa2      	ittt	ge
 8004f86:	6821      	ldrge	r1, [r4, #0]
 8004f88:	f021 0104 	bicge.w	r1, r1, #4
 8004f8c:	6021      	strge	r1, [r4, #0]
 8004f8e:	b90d      	cbnz	r5, 8004f94 <_printf_i+0x110>
 8004f90:	2e00      	cmp	r6, #0
 8004f92:	d04b      	beq.n	800502c <_printf_i+0x1a8>
 8004f94:	4616      	mov	r6, r2
 8004f96:	fbb5 f1f3 	udiv	r1, r5, r3
 8004f9a:	fb03 5711 	mls	r7, r3, r1, r5
 8004f9e:	5dc7      	ldrb	r7, [r0, r7]
 8004fa0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004fa4:	462f      	mov	r7, r5
 8004fa6:	42bb      	cmp	r3, r7
 8004fa8:	460d      	mov	r5, r1
 8004faa:	d9f4      	bls.n	8004f96 <_printf_i+0x112>
 8004fac:	2b08      	cmp	r3, #8
 8004fae:	d10b      	bne.n	8004fc8 <_printf_i+0x144>
 8004fb0:	6823      	ldr	r3, [r4, #0]
 8004fb2:	07df      	lsls	r7, r3, #31
 8004fb4:	d508      	bpl.n	8004fc8 <_printf_i+0x144>
 8004fb6:	6923      	ldr	r3, [r4, #16]
 8004fb8:	6861      	ldr	r1, [r4, #4]
 8004fba:	4299      	cmp	r1, r3
 8004fbc:	bfde      	ittt	le
 8004fbe:	2330      	movle	r3, #48	@ 0x30
 8004fc0:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004fc4:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004fc8:	1b92      	subs	r2, r2, r6
 8004fca:	6122      	str	r2, [r4, #16]
 8004fcc:	f8cd a000 	str.w	sl, [sp]
 8004fd0:	464b      	mov	r3, r9
 8004fd2:	aa03      	add	r2, sp, #12
 8004fd4:	4621      	mov	r1, r4
 8004fd6:	4640      	mov	r0, r8
 8004fd8:	f7ff fee6 	bl	8004da8 <_printf_common>
 8004fdc:	3001      	adds	r0, #1
 8004fde:	d14a      	bne.n	8005076 <_printf_i+0x1f2>
 8004fe0:	f04f 30ff 	mov.w	r0, #4294967295
 8004fe4:	b004      	add	sp, #16
 8004fe6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004fea:	6823      	ldr	r3, [r4, #0]
 8004fec:	f043 0320 	orr.w	r3, r3, #32
 8004ff0:	6023      	str	r3, [r4, #0]
 8004ff2:	4833      	ldr	r0, [pc, #204]	@ (80050c0 <_printf_i+0x23c>)
 8004ff4:	2778      	movs	r7, #120	@ 0x78
 8004ff6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004ffa:	6823      	ldr	r3, [r4, #0]
 8004ffc:	6831      	ldr	r1, [r6, #0]
 8004ffe:	061f      	lsls	r7, r3, #24
 8005000:	f851 5b04 	ldr.w	r5, [r1], #4
 8005004:	d402      	bmi.n	800500c <_printf_i+0x188>
 8005006:	065f      	lsls	r7, r3, #25
 8005008:	bf48      	it	mi
 800500a:	b2ad      	uxthmi	r5, r5
 800500c:	6031      	str	r1, [r6, #0]
 800500e:	07d9      	lsls	r1, r3, #31
 8005010:	bf44      	itt	mi
 8005012:	f043 0320 	orrmi.w	r3, r3, #32
 8005016:	6023      	strmi	r3, [r4, #0]
 8005018:	b11d      	cbz	r5, 8005022 <_printf_i+0x19e>
 800501a:	2310      	movs	r3, #16
 800501c:	e7ac      	b.n	8004f78 <_printf_i+0xf4>
 800501e:	4827      	ldr	r0, [pc, #156]	@ (80050bc <_printf_i+0x238>)
 8005020:	e7e9      	b.n	8004ff6 <_printf_i+0x172>
 8005022:	6823      	ldr	r3, [r4, #0]
 8005024:	f023 0320 	bic.w	r3, r3, #32
 8005028:	6023      	str	r3, [r4, #0]
 800502a:	e7f6      	b.n	800501a <_printf_i+0x196>
 800502c:	4616      	mov	r6, r2
 800502e:	e7bd      	b.n	8004fac <_printf_i+0x128>
 8005030:	6833      	ldr	r3, [r6, #0]
 8005032:	6825      	ldr	r5, [r4, #0]
 8005034:	6961      	ldr	r1, [r4, #20]
 8005036:	1d18      	adds	r0, r3, #4
 8005038:	6030      	str	r0, [r6, #0]
 800503a:	062e      	lsls	r6, r5, #24
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	d501      	bpl.n	8005044 <_printf_i+0x1c0>
 8005040:	6019      	str	r1, [r3, #0]
 8005042:	e002      	b.n	800504a <_printf_i+0x1c6>
 8005044:	0668      	lsls	r0, r5, #25
 8005046:	d5fb      	bpl.n	8005040 <_printf_i+0x1bc>
 8005048:	8019      	strh	r1, [r3, #0]
 800504a:	2300      	movs	r3, #0
 800504c:	6123      	str	r3, [r4, #16]
 800504e:	4616      	mov	r6, r2
 8005050:	e7bc      	b.n	8004fcc <_printf_i+0x148>
 8005052:	6833      	ldr	r3, [r6, #0]
 8005054:	1d1a      	adds	r2, r3, #4
 8005056:	6032      	str	r2, [r6, #0]
 8005058:	681e      	ldr	r6, [r3, #0]
 800505a:	6862      	ldr	r2, [r4, #4]
 800505c:	2100      	movs	r1, #0
 800505e:	4630      	mov	r0, r6
 8005060:	f7fb f8b6 	bl	80001d0 <memchr>
 8005064:	b108      	cbz	r0, 800506a <_printf_i+0x1e6>
 8005066:	1b80      	subs	r0, r0, r6
 8005068:	6060      	str	r0, [r4, #4]
 800506a:	6863      	ldr	r3, [r4, #4]
 800506c:	6123      	str	r3, [r4, #16]
 800506e:	2300      	movs	r3, #0
 8005070:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005074:	e7aa      	b.n	8004fcc <_printf_i+0x148>
 8005076:	6923      	ldr	r3, [r4, #16]
 8005078:	4632      	mov	r2, r6
 800507a:	4649      	mov	r1, r9
 800507c:	4640      	mov	r0, r8
 800507e:	47d0      	blx	sl
 8005080:	3001      	adds	r0, #1
 8005082:	d0ad      	beq.n	8004fe0 <_printf_i+0x15c>
 8005084:	6823      	ldr	r3, [r4, #0]
 8005086:	079b      	lsls	r3, r3, #30
 8005088:	d413      	bmi.n	80050b2 <_printf_i+0x22e>
 800508a:	68e0      	ldr	r0, [r4, #12]
 800508c:	9b03      	ldr	r3, [sp, #12]
 800508e:	4298      	cmp	r0, r3
 8005090:	bfb8      	it	lt
 8005092:	4618      	movlt	r0, r3
 8005094:	e7a6      	b.n	8004fe4 <_printf_i+0x160>
 8005096:	2301      	movs	r3, #1
 8005098:	4632      	mov	r2, r6
 800509a:	4649      	mov	r1, r9
 800509c:	4640      	mov	r0, r8
 800509e:	47d0      	blx	sl
 80050a0:	3001      	adds	r0, #1
 80050a2:	d09d      	beq.n	8004fe0 <_printf_i+0x15c>
 80050a4:	3501      	adds	r5, #1
 80050a6:	68e3      	ldr	r3, [r4, #12]
 80050a8:	9903      	ldr	r1, [sp, #12]
 80050aa:	1a5b      	subs	r3, r3, r1
 80050ac:	42ab      	cmp	r3, r5
 80050ae:	dcf2      	bgt.n	8005096 <_printf_i+0x212>
 80050b0:	e7eb      	b.n	800508a <_printf_i+0x206>
 80050b2:	2500      	movs	r5, #0
 80050b4:	f104 0619 	add.w	r6, r4, #25
 80050b8:	e7f5      	b.n	80050a6 <_printf_i+0x222>
 80050ba:	bf00      	nop
 80050bc:	0800529d 	.word	0x0800529d
 80050c0:	080052ae 	.word	0x080052ae

080050c4 <memmove>:
 80050c4:	4288      	cmp	r0, r1
 80050c6:	b510      	push	{r4, lr}
 80050c8:	eb01 0402 	add.w	r4, r1, r2
 80050cc:	d902      	bls.n	80050d4 <memmove+0x10>
 80050ce:	4284      	cmp	r4, r0
 80050d0:	4623      	mov	r3, r4
 80050d2:	d807      	bhi.n	80050e4 <memmove+0x20>
 80050d4:	1e43      	subs	r3, r0, #1
 80050d6:	42a1      	cmp	r1, r4
 80050d8:	d008      	beq.n	80050ec <memmove+0x28>
 80050da:	f811 2b01 	ldrb.w	r2, [r1], #1
 80050de:	f803 2f01 	strb.w	r2, [r3, #1]!
 80050e2:	e7f8      	b.n	80050d6 <memmove+0x12>
 80050e4:	4402      	add	r2, r0
 80050e6:	4601      	mov	r1, r0
 80050e8:	428a      	cmp	r2, r1
 80050ea:	d100      	bne.n	80050ee <memmove+0x2a>
 80050ec:	bd10      	pop	{r4, pc}
 80050ee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80050f2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80050f6:	e7f7      	b.n	80050e8 <memmove+0x24>

080050f8 <_sbrk_r>:
 80050f8:	b538      	push	{r3, r4, r5, lr}
 80050fa:	4d06      	ldr	r5, [pc, #24]	@ (8005114 <_sbrk_r+0x1c>)
 80050fc:	2300      	movs	r3, #0
 80050fe:	4604      	mov	r4, r0
 8005100:	4608      	mov	r0, r1
 8005102:	602b      	str	r3, [r5, #0]
 8005104:	f7fc ffe0 	bl	80020c8 <_sbrk>
 8005108:	1c43      	adds	r3, r0, #1
 800510a:	d102      	bne.n	8005112 <_sbrk_r+0x1a>
 800510c:	682b      	ldr	r3, [r5, #0]
 800510e:	b103      	cbz	r3, 8005112 <_sbrk_r+0x1a>
 8005110:	6023      	str	r3, [r4, #0]
 8005112:	bd38      	pop	{r3, r4, r5, pc}
 8005114:	20000324 	.word	0x20000324

08005118 <memcpy>:
 8005118:	440a      	add	r2, r1
 800511a:	4291      	cmp	r1, r2
 800511c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005120:	d100      	bne.n	8005124 <memcpy+0xc>
 8005122:	4770      	bx	lr
 8005124:	b510      	push	{r4, lr}
 8005126:	f811 4b01 	ldrb.w	r4, [r1], #1
 800512a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800512e:	4291      	cmp	r1, r2
 8005130:	d1f9      	bne.n	8005126 <memcpy+0xe>
 8005132:	bd10      	pop	{r4, pc}

08005134 <_realloc_r>:
 8005134:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005138:	4680      	mov	r8, r0
 800513a:	4615      	mov	r5, r2
 800513c:	460c      	mov	r4, r1
 800513e:	b921      	cbnz	r1, 800514a <_realloc_r+0x16>
 8005140:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005144:	4611      	mov	r1, r2
 8005146:	f7ff bc4b 	b.w	80049e0 <_malloc_r>
 800514a:	b92a      	cbnz	r2, 8005158 <_realloc_r+0x24>
 800514c:	f7ff fbdc 	bl	8004908 <_free_r>
 8005150:	2400      	movs	r4, #0
 8005152:	4620      	mov	r0, r4
 8005154:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005158:	f000 f81a 	bl	8005190 <_malloc_usable_size_r>
 800515c:	4285      	cmp	r5, r0
 800515e:	4606      	mov	r6, r0
 8005160:	d802      	bhi.n	8005168 <_realloc_r+0x34>
 8005162:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8005166:	d8f4      	bhi.n	8005152 <_realloc_r+0x1e>
 8005168:	4629      	mov	r1, r5
 800516a:	4640      	mov	r0, r8
 800516c:	f7ff fc38 	bl	80049e0 <_malloc_r>
 8005170:	4607      	mov	r7, r0
 8005172:	2800      	cmp	r0, #0
 8005174:	d0ec      	beq.n	8005150 <_realloc_r+0x1c>
 8005176:	42b5      	cmp	r5, r6
 8005178:	462a      	mov	r2, r5
 800517a:	4621      	mov	r1, r4
 800517c:	bf28      	it	cs
 800517e:	4632      	movcs	r2, r6
 8005180:	f7ff ffca 	bl	8005118 <memcpy>
 8005184:	4621      	mov	r1, r4
 8005186:	4640      	mov	r0, r8
 8005188:	f7ff fbbe 	bl	8004908 <_free_r>
 800518c:	463c      	mov	r4, r7
 800518e:	e7e0      	b.n	8005152 <_realloc_r+0x1e>

08005190 <_malloc_usable_size_r>:
 8005190:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005194:	1f18      	subs	r0, r3, #4
 8005196:	2b00      	cmp	r3, #0
 8005198:	bfbc      	itt	lt
 800519a:	580b      	ldrlt	r3, [r1, r0]
 800519c:	18c0      	addlt	r0, r0, r3
 800519e:	4770      	bx	lr

080051a0 <_init>:
 80051a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051a2:	bf00      	nop
 80051a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80051a6:	bc08      	pop	{r3}
 80051a8:	469e      	mov	lr, r3
 80051aa:	4770      	bx	lr

080051ac <_fini>:
 80051ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051ae:	bf00      	nop
 80051b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80051b2:	bc08      	pop	{r3}
 80051b4:	469e      	mov	lr, r3
 80051b6:	4770      	bx	lr
