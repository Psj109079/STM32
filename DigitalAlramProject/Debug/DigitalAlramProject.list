
DigitalAlramProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003d1c  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08003ea4  08003ea4  00004ea4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003ebc  08003ebc  00005020  2**0
                  CONTENTS
  4 .ARM          00000008  08003ebc  08003ebc  00004ebc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003ec4  08003ec4  00005020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003ec4  08003ec4  00004ec4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003ec8  08003ec8  00004ec8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000020  20000000  08003ecc  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00005020  2**0
                  CONTENTS
 10 .bss          000000b8  20000020  20000020  00005020  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200000d8  200000d8  00005020  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00005020  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d798  00000000  00000000  00005050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002017  00000000  00000000  000127e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ce0  00000000  00000000  00014800  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a0e  00000000  00000000  000154e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020b4f  00000000  00000000  00015eee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f8e5  00000000  00000000  00036a3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c8362  00000000  00000000  00046322  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0010e684  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003554  00000000  00000000  0010e6c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006d  00000000  00000000  00111c1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000020 	.word	0x20000020
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003e8c 	.word	0x08003e8c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000024 	.word	0x20000024
 80001c4:	08003e8c 	.word	0x08003e8c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <_7SEG_GPIO_Init>:
#include "7seg.h"

void _7SEG_GPIO_Init()
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b08a      	sub	sp, #40	@ 0x28
 80004bc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct;

	/* GPIOA,D,E Periph clock enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80004be:	2300      	movs	r3, #0
 80004c0:	613b      	str	r3, [r7, #16]
 80004c2:	4b6b      	ldr	r3, [pc, #428]	@ (8000670 <_7SEG_GPIO_Init+0x1b8>)
 80004c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004c6:	4a6a      	ldr	r2, [pc, #424]	@ (8000670 <_7SEG_GPIO_Init+0x1b8>)
 80004c8:	f043 0301 	orr.w	r3, r3, #1
 80004cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80004ce:	4b68      	ldr	r3, [pc, #416]	@ (8000670 <_7SEG_GPIO_Init+0x1b8>)
 80004d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004d2:	f003 0301 	and.w	r3, r3, #1
 80004d6:	613b      	str	r3, [r7, #16]
 80004d8:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80004da:	2300      	movs	r3, #0
 80004dc:	60fb      	str	r3, [r7, #12]
 80004de:	4b64      	ldr	r3, [pc, #400]	@ (8000670 <_7SEG_GPIO_Init+0x1b8>)
 80004e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004e2:	4a63      	ldr	r2, [pc, #396]	@ (8000670 <_7SEG_GPIO_Init+0x1b8>)
 80004e4:	f043 0304 	orr.w	r3, r3, #4
 80004e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80004ea:	4b61      	ldr	r3, [pc, #388]	@ (8000670 <_7SEG_GPIO_Init+0x1b8>)
 80004ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004ee:	f003 0304 	and.w	r3, r3, #4
 80004f2:	60fb      	str	r3, [r7, #12]
 80004f4:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80004f6:	2300      	movs	r3, #0
 80004f8:	60bb      	str	r3, [r7, #8]
 80004fa:	4b5d      	ldr	r3, [pc, #372]	@ (8000670 <_7SEG_GPIO_Init+0x1b8>)
 80004fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004fe:	4a5c      	ldr	r2, [pc, #368]	@ (8000670 <_7SEG_GPIO_Init+0x1b8>)
 8000500:	f043 0308 	orr.w	r3, r3, #8
 8000504:	6313      	str	r3, [r2, #48]	@ 0x30
 8000506:	4b5a      	ldr	r3, [pc, #360]	@ (8000670 <_7SEG_GPIO_Init+0x1b8>)
 8000508:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800050a:	f003 0308 	and.w	r3, r3, #8
 800050e:	60bb      	str	r3, [r7, #8]
 8000510:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8000512:	2300      	movs	r3, #0
 8000514:	607b      	str	r3, [r7, #4]
 8000516:	4b56      	ldr	r3, [pc, #344]	@ (8000670 <_7SEG_GPIO_Init+0x1b8>)
 8000518:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800051a:	4a55      	ldr	r2, [pc, #340]	@ (8000670 <_7SEG_GPIO_Init+0x1b8>)
 800051c:	f043 0310 	orr.w	r3, r3, #16
 8000520:	6313      	str	r3, [r2, #48]	@ 0x30
 8000522:	4b53      	ldr	r3, [pc, #332]	@ (8000670 <_7SEG_GPIO_Init+0x1b8>)
 8000524:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000526:	f003 0310 	and.w	r3, r3, #16
 800052a:	607b      	str	r3, [r7, #4]
 800052c:	687b      	ldr	r3, [r7, #4]

	//Digit1
	GPIO_InitStruct.Pin = GPIO_PIN_DGT1_A;
 800052e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000532:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000534:	2301      	movs	r3, #1
 8000536:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000538:	2300      	movs	r3, #0
 800053a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800053c:	2300      	movs	r3, #0
 800053e:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIO_DGT1_A, &GPIO_InitStruct);
 8000540:	f107 0314 	add.w	r3, r7, #20
 8000544:	4619      	mov	r1, r3
 8000546:	484b      	ldr	r0, [pc, #300]	@ (8000674 <_7SEG_GPIO_Init+0x1bc>)
 8000548:	f001 fb54 	bl	8001bf4 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_DGT1_B;
 800054c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000550:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT1_B, &GPIO_InitStruct);
 8000552:	f107 0314 	add.w	r3, r7, #20
 8000556:	4619      	mov	r1, r3
 8000558:	4847      	ldr	r0, [pc, #284]	@ (8000678 <_7SEG_GPIO_Init+0x1c0>)
 800055a:	f001 fb4b 	bl	8001bf4 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_DGT1_C;
 800055e:	2340      	movs	r3, #64	@ 0x40
 8000560:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT1_C, &GPIO_InitStruct);
 8000562:	f107 0314 	add.w	r3, r7, #20
 8000566:	4619      	mov	r1, r3
 8000568:	4842      	ldr	r0, [pc, #264]	@ (8000674 <_7SEG_GPIO_Init+0x1bc>)
 800056a:	f001 fb43 	bl	8001bf4 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_DGT1_D;
 800056e:	2320      	movs	r3, #32
 8000570:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT1_D, &GPIO_InitStruct);
 8000572:	f107 0314 	add.w	r3, r7, #20
 8000576:	4619      	mov	r1, r3
 8000578:	483e      	ldr	r0, [pc, #248]	@ (8000674 <_7SEG_GPIO_Init+0x1bc>)
 800057a:	f001 fb3b 	bl	8001bf4 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_DGT1_E;
 800057e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000582:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT1_E, &GPIO_InitStruct);
 8000584:	f107 0314 	add.w	r3, r7, #20
 8000588:	4619      	mov	r1, r3
 800058a:	483c      	ldr	r0, [pc, #240]	@ (800067c <_7SEG_GPIO_Init+0x1c4>)
 800058c:	f001 fb32 	bl	8001bf4 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_DGT1_F;
 8000590:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000594:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT1_F, &GPIO_InitStruct);
 8000596:	f107 0314 	add.w	r3, r7, #20
 800059a:	4619      	mov	r1, r3
 800059c:	4837      	ldr	r0, [pc, #220]	@ (800067c <_7SEG_GPIO_Init+0x1c4>)
 800059e:	f001 fb29 	bl	8001bf4 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_DGT1_G;
 80005a2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80005a6:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT1_G, &GPIO_InitStruct);
 80005a8:	f107 0314 	add.w	r3, r7, #20
 80005ac:	4619      	mov	r1, r3
 80005ae:	4831      	ldr	r0, [pc, #196]	@ (8000674 <_7SEG_GPIO_Init+0x1bc>)
 80005b0:	f001 fb20 	bl	8001bf4 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_DGT1_DP;
 80005b4:	2380      	movs	r3, #128	@ 0x80
 80005b6:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT1_DP, &GPIO_InitStruct);
 80005b8:	f107 0314 	add.w	r3, r7, #20
 80005bc:	4619      	mov	r1, r3
 80005be:	482d      	ldr	r0, [pc, #180]	@ (8000674 <_7SEG_GPIO_Init+0x1bc>)
 80005c0:	f001 fb18 	bl	8001bf4 <HAL_GPIO_Init>

	//Digit2
	GPIO_InitStruct.Pin = GPIO_PIN_DGT2_A;
 80005c4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80005c8:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT2_A, &GPIO_InitStruct);
 80005ca:	f107 0314 	add.w	r3, r7, #20
 80005ce:	4619      	mov	r1, r3
 80005d0:	482b      	ldr	r0, [pc, #172]	@ (8000680 <_7SEG_GPIO_Init+0x1c8>)
 80005d2:	f001 fb0f 	bl	8001bf4 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_DGT2_B;
 80005d6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80005da:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT2_B, &GPIO_InitStruct);
 80005dc:	f107 0314 	add.w	r3, r7, #20
 80005e0:	4619      	mov	r1, r3
 80005e2:	4827      	ldr	r0, [pc, #156]	@ (8000680 <_7SEG_GPIO_Init+0x1c8>)
 80005e4:	f001 fb06 	bl	8001bf4 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_DGT2_C;
 80005e8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80005ec:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT2_C, &GPIO_InitStruct);
 80005ee:	f107 0314 	add.w	r3, r7, #20
 80005f2:	4619      	mov	r1, r3
 80005f4:	4822      	ldr	r0, [pc, #136]	@ (8000680 <_7SEG_GPIO_Init+0x1c8>)
 80005f6:	f001 fafd 	bl	8001bf4 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_DGT2_D;
 80005fa:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80005fe:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT2_D, &GPIO_InitStruct);
 8000600:	f107 0314 	add.w	r3, r7, #20
 8000604:	4619      	mov	r1, r3
 8000606:	481e      	ldr	r0, [pc, #120]	@ (8000680 <_7SEG_GPIO_Init+0x1c8>)
 8000608:	f001 faf4 	bl	8001bf4 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_DGT2_E;
 800060c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000610:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT2_E, &GPIO_InitStruct);
 8000612:	f107 0314 	add.w	r3, r7, #20
 8000616:	4619      	mov	r1, r3
 8000618:	4819      	ldr	r0, [pc, #100]	@ (8000680 <_7SEG_GPIO_Init+0x1c8>)
 800061a:	f001 faeb 	bl	8001bf4 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_DGT2_F;
 800061e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000622:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT2_F, &GPIO_InitStruct);
 8000624:	f107 0314 	add.w	r3, r7, #20
 8000628:	4619      	mov	r1, r3
 800062a:	4815      	ldr	r0, [pc, #84]	@ (8000680 <_7SEG_GPIO_Init+0x1c8>)
 800062c:	f001 fae2 	bl	8001bf4 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_DGT2_G;
 8000630:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000634:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT2_G, &GPIO_InitStruct);
 8000636:	f107 0314 	add.w	r3, r7, #20
 800063a:	4619      	mov	r1, r3
 800063c:	4810      	ldr	r0, [pc, #64]	@ (8000680 <_7SEG_GPIO_Init+0x1c8>)
 800063e:	f001 fad9 	bl	8001bf4 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_DGT2_DP;
 8000642:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000646:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT2_DP, &GPIO_InitStruct);
 8000648:	f107 0314 	add.w	r3, r7, #20
 800064c:	4619      	mov	r1, r3
 800064e:	480c      	ldr	r0, [pc, #48]	@ (8000680 <_7SEG_GPIO_Init+0x1c8>)
 8000650:	f001 fad0 	bl	8001bf4 <HAL_GPIO_Init>

	
	_7SEG_SetNumber(DGT1, 0, ON);
 8000654:	2201      	movs	r2, #1
 8000656:	2100      	movs	r1, #0
 8000658:	2000      	movs	r0, #0
 800065a:	f000 f813 	bl	8000684 <_7SEG_SetNumber>
	_7SEG_SetNumber(DGT2, 0, ON);
 800065e:	2201      	movs	r2, #1
 8000660:	2100      	movs	r1, #0
 8000662:	2001      	movs	r0, #1
 8000664:	f000 f80e 	bl	8000684 <_7SEG_SetNumber>
}
 8000668:	bf00      	nop
 800066a:	3728      	adds	r7, #40	@ 0x28
 800066c:	46bd      	mov	sp, r7
 800066e:	bd80      	pop	{r7, pc}
 8000670:	40023800 	.word	0x40023800
 8000674:	40020c00 	.word	0x40020c00
 8000678:	40020000 	.word	0x40020000
 800067c:	40020800 	.word	0x40020800
 8000680:	40021000 	.word	0x40021000

08000684 <_7SEG_SetNumber>:


void _7SEG_SetNumber(int dgt, int num, int dp)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b084      	sub	sp, #16
 8000688:	af00      	add	r7, sp, #0
 800068a:	60f8      	str	r0, [r7, #12]
 800068c:	60b9      	str	r1, [r7, #8]
 800068e:	607a      	str	r2, [r7, #4]
	if(dgt == DGT1)
 8000690:	68fb      	ldr	r3, [r7, #12]
 8000692:	2b00      	cmp	r3, #0
 8000694:	f040 81dc 	bne.w	8000a50 <_7SEG_SetNumber+0x3cc>
	{
		switch(num%10)
 8000698:	68b9      	ldr	r1, [r7, #8]
 800069a:	4bcb      	ldr	r3, [pc, #812]	@ (80009c8 <_7SEG_SetNumber+0x344>)
 800069c:	fb83 2301 	smull	r2, r3, r3, r1
 80006a0:	109a      	asrs	r2, r3, #2
 80006a2:	17cb      	asrs	r3, r1, #31
 80006a4:	1ad2      	subs	r2, r2, r3
 80006a6:	4613      	mov	r3, r2
 80006a8:	009b      	lsls	r3, r3, #2
 80006aa:	4413      	add	r3, r2
 80006ac:	005b      	lsls	r3, r3, #1
 80006ae:	1aca      	subs	r2, r1, r3
 80006b0:	2a09      	cmp	r2, #9
 80006b2:	f200 81ba 	bhi.w	8000a2a <_7SEG_SetNumber+0x3a6>
 80006b6:	a301      	add	r3, pc, #4	@ (adr r3, 80006bc <_7SEG_SetNumber+0x38>)
 80006b8:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 80006bc:	080006e5 	.word	0x080006e5
 80006c0:	08000737 	.word	0x08000737
 80006c4:	08000789 	.word	0x08000789
 80006c8:	080007db 	.word	0x080007db
 80006cc:	0800082d 	.word	0x0800082d
 80006d0:	0800087f 	.word	0x0800087f
 80006d4:	080008d1 	.word	0x080008d1
 80006d8:	08000923 	.word	0x08000923
 80006dc:	08000975 	.word	0x08000975
 80006e0:	080009d9 	.word	0x080009d9
		{
			case 0: DGT1_A_ON; DGT1_B_ON; DGT1_C_ON; DGT1_D_ON; DGT1_E_ON; DGT1_F_ON;
 80006e4:	2200      	movs	r2, #0
 80006e6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80006ea:	48b8      	ldr	r0, [pc, #736]	@ (80009cc <_7SEG_SetNumber+0x348>)
 80006ec:	f001 fc36 	bl	8001f5c <HAL_GPIO_WritePin>
 80006f0:	2200      	movs	r2, #0
 80006f2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80006f6:	48b6      	ldr	r0, [pc, #728]	@ (80009d0 <_7SEG_SetNumber+0x34c>)
 80006f8:	f001 fc30 	bl	8001f5c <HAL_GPIO_WritePin>
 80006fc:	2200      	movs	r2, #0
 80006fe:	2140      	movs	r1, #64	@ 0x40
 8000700:	48b2      	ldr	r0, [pc, #712]	@ (80009cc <_7SEG_SetNumber+0x348>)
 8000702:	f001 fc2b 	bl	8001f5c <HAL_GPIO_WritePin>
 8000706:	2200      	movs	r2, #0
 8000708:	2120      	movs	r1, #32
 800070a:	48b0      	ldr	r0, [pc, #704]	@ (80009cc <_7SEG_SetNumber+0x348>)
 800070c:	f001 fc26 	bl	8001f5c <HAL_GPIO_WritePin>
 8000710:	2200      	movs	r2, #0
 8000712:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000716:	48af      	ldr	r0, [pc, #700]	@ (80009d4 <_7SEG_SetNumber+0x350>)
 8000718:	f001 fc20 	bl	8001f5c <HAL_GPIO_WritePin>
 800071c:	2200      	movs	r2, #0
 800071e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000722:	48ac      	ldr	r0, [pc, #688]	@ (80009d4 <_7SEG_SetNumber+0x350>)
 8000724:	f001 fc1a 	bl	8001f5c <HAL_GPIO_WritePin>
					DGT1_G_OFF;
 8000728:	2201      	movs	r2, #1
 800072a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800072e:	48a7      	ldr	r0, [pc, #668]	@ (80009cc <_7SEG_SetNumber+0x348>)
 8000730:	f001 fc14 	bl	8001f5c <HAL_GPIO_WritePin>
				break;
 8000734:	e179      	b.n	8000a2a <_7SEG_SetNumber+0x3a6>
			case 1: DGT1_B_ON; DGT1_C_ON;
 8000736:	2200      	movs	r2, #0
 8000738:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800073c:	48a4      	ldr	r0, [pc, #656]	@ (80009d0 <_7SEG_SetNumber+0x34c>)
 800073e:	f001 fc0d 	bl	8001f5c <HAL_GPIO_WritePin>
 8000742:	2200      	movs	r2, #0
 8000744:	2140      	movs	r1, #64	@ 0x40
 8000746:	48a1      	ldr	r0, [pc, #644]	@ (80009cc <_7SEG_SetNumber+0x348>)
 8000748:	f001 fc08 	bl	8001f5c <HAL_GPIO_WritePin>
					DGT1_A_OFF; DGT1_D_OFF; DGT1_E_OFF; DGT1_F_OFF; DGT1_G_OFF;
 800074c:	2201      	movs	r2, #1
 800074e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000752:	489e      	ldr	r0, [pc, #632]	@ (80009cc <_7SEG_SetNumber+0x348>)
 8000754:	f001 fc02 	bl	8001f5c <HAL_GPIO_WritePin>
 8000758:	2201      	movs	r2, #1
 800075a:	2120      	movs	r1, #32
 800075c:	489b      	ldr	r0, [pc, #620]	@ (80009cc <_7SEG_SetNumber+0x348>)
 800075e:	f001 fbfd 	bl	8001f5c <HAL_GPIO_WritePin>
 8000762:	2201      	movs	r2, #1
 8000764:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000768:	489a      	ldr	r0, [pc, #616]	@ (80009d4 <_7SEG_SetNumber+0x350>)
 800076a:	f001 fbf7 	bl	8001f5c <HAL_GPIO_WritePin>
 800076e:	2201      	movs	r2, #1
 8000770:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000774:	4897      	ldr	r0, [pc, #604]	@ (80009d4 <_7SEG_SetNumber+0x350>)
 8000776:	f001 fbf1 	bl	8001f5c <HAL_GPIO_WritePin>
 800077a:	2201      	movs	r2, #1
 800077c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000780:	4892      	ldr	r0, [pc, #584]	@ (80009cc <_7SEG_SetNumber+0x348>)
 8000782:	f001 fbeb 	bl	8001f5c <HAL_GPIO_WritePin>
				break;
 8000786:	e150      	b.n	8000a2a <_7SEG_SetNumber+0x3a6>
			case 2: DGT1_A_ON; DGT1_B_ON; DGT1_G_ON; DGT1_E_ON; DGT1_D_ON;
 8000788:	2200      	movs	r2, #0
 800078a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800078e:	488f      	ldr	r0, [pc, #572]	@ (80009cc <_7SEG_SetNumber+0x348>)
 8000790:	f001 fbe4 	bl	8001f5c <HAL_GPIO_WritePin>
 8000794:	2200      	movs	r2, #0
 8000796:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800079a:	488d      	ldr	r0, [pc, #564]	@ (80009d0 <_7SEG_SetNumber+0x34c>)
 800079c:	f001 fbde 	bl	8001f5c <HAL_GPIO_WritePin>
 80007a0:	2200      	movs	r2, #0
 80007a2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80007a6:	4889      	ldr	r0, [pc, #548]	@ (80009cc <_7SEG_SetNumber+0x348>)
 80007a8:	f001 fbd8 	bl	8001f5c <HAL_GPIO_WritePin>
 80007ac:	2200      	movs	r2, #0
 80007ae:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80007b2:	4888      	ldr	r0, [pc, #544]	@ (80009d4 <_7SEG_SetNumber+0x350>)
 80007b4:	f001 fbd2 	bl	8001f5c <HAL_GPIO_WritePin>
 80007b8:	2200      	movs	r2, #0
 80007ba:	2120      	movs	r1, #32
 80007bc:	4883      	ldr	r0, [pc, #524]	@ (80009cc <_7SEG_SetNumber+0x348>)
 80007be:	f001 fbcd 	bl	8001f5c <HAL_GPIO_WritePin>
					DGT1_C_OFF; DGT1_F_OFF;
 80007c2:	2201      	movs	r2, #1
 80007c4:	2140      	movs	r1, #64	@ 0x40
 80007c6:	4881      	ldr	r0, [pc, #516]	@ (80009cc <_7SEG_SetNumber+0x348>)
 80007c8:	f001 fbc8 	bl	8001f5c <HAL_GPIO_WritePin>
 80007cc:	2201      	movs	r2, #1
 80007ce:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80007d2:	4880      	ldr	r0, [pc, #512]	@ (80009d4 <_7SEG_SetNumber+0x350>)
 80007d4:	f001 fbc2 	bl	8001f5c <HAL_GPIO_WritePin>
				break;
 80007d8:	e127      	b.n	8000a2a <_7SEG_SetNumber+0x3a6>
			case 3: DGT1_A_ON; DGT1_B_ON; DGT1_C_ON; DGT1_D_ON; DGT1_G_ON;
 80007da:	2200      	movs	r2, #0
 80007dc:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80007e0:	487a      	ldr	r0, [pc, #488]	@ (80009cc <_7SEG_SetNumber+0x348>)
 80007e2:	f001 fbbb 	bl	8001f5c <HAL_GPIO_WritePin>
 80007e6:	2200      	movs	r2, #0
 80007e8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80007ec:	4878      	ldr	r0, [pc, #480]	@ (80009d0 <_7SEG_SetNumber+0x34c>)
 80007ee:	f001 fbb5 	bl	8001f5c <HAL_GPIO_WritePin>
 80007f2:	2200      	movs	r2, #0
 80007f4:	2140      	movs	r1, #64	@ 0x40
 80007f6:	4875      	ldr	r0, [pc, #468]	@ (80009cc <_7SEG_SetNumber+0x348>)
 80007f8:	f001 fbb0 	bl	8001f5c <HAL_GPIO_WritePin>
 80007fc:	2200      	movs	r2, #0
 80007fe:	2120      	movs	r1, #32
 8000800:	4872      	ldr	r0, [pc, #456]	@ (80009cc <_7SEG_SetNumber+0x348>)
 8000802:	f001 fbab 	bl	8001f5c <HAL_GPIO_WritePin>
 8000806:	2200      	movs	r2, #0
 8000808:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800080c:	486f      	ldr	r0, [pc, #444]	@ (80009cc <_7SEG_SetNumber+0x348>)
 800080e:	f001 fba5 	bl	8001f5c <HAL_GPIO_WritePin>
					DGT1_E_OFF; DGT1_F_OFF;
 8000812:	2201      	movs	r2, #1
 8000814:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000818:	486e      	ldr	r0, [pc, #440]	@ (80009d4 <_7SEG_SetNumber+0x350>)
 800081a:	f001 fb9f 	bl	8001f5c <HAL_GPIO_WritePin>
 800081e:	2201      	movs	r2, #1
 8000820:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000824:	486b      	ldr	r0, [pc, #428]	@ (80009d4 <_7SEG_SetNumber+0x350>)
 8000826:	f001 fb99 	bl	8001f5c <HAL_GPIO_WritePin>
				break;
 800082a:	e0fe      	b.n	8000a2a <_7SEG_SetNumber+0x3a6>
			case 4: DGT1_F_ON; DGT1_G_ON; DGT1_B_ON; DGT1_C_ON;
 800082c:	2200      	movs	r2, #0
 800082e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000832:	4868      	ldr	r0, [pc, #416]	@ (80009d4 <_7SEG_SetNumber+0x350>)
 8000834:	f001 fb92 	bl	8001f5c <HAL_GPIO_WritePin>
 8000838:	2200      	movs	r2, #0
 800083a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800083e:	4863      	ldr	r0, [pc, #396]	@ (80009cc <_7SEG_SetNumber+0x348>)
 8000840:	f001 fb8c 	bl	8001f5c <HAL_GPIO_WritePin>
 8000844:	2200      	movs	r2, #0
 8000846:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800084a:	4861      	ldr	r0, [pc, #388]	@ (80009d0 <_7SEG_SetNumber+0x34c>)
 800084c:	f001 fb86 	bl	8001f5c <HAL_GPIO_WritePin>
 8000850:	2200      	movs	r2, #0
 8000852:	2140      	movs	r1, #64	@ 0x40
 8000854:	485d      	ldr	r0, [pc, #372]	@ (80009cc <_7SEG_SetNumber+0x348>)
 8000856:	f001 fb81 	bl	8001f5c <HAL_GPIO_WritePin>
					DGT1_A_OFF; DGT1_D_OFF; DGT1_E_OFF;
 800085a:	2201      	movs	r2, #1
 800085c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000860:	485a      	ldr	r0, [pc, #360]	@ (80009cc <_7SEG_SetNumber+0x348>)
 8000862:	f001 fb7b 	bl	8001f5c <HAL_GPIO_WritePin>
 8000866:	2201      	movs	r2, #1
 8000868:	2120      	movs	r1, #32
 800086a:	4858      	ldr	r0, [pc, #352]	@ (80009cc <_7SEG_SetNumber+0x348>)
 800086c:	f001 fb76 	bl	8001f5c <HAL_GPIO_WritePin>
 8000870:	2201      	movs	r2, #1
 8000872:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000876:	4857      	ldr	r0, [pc, #348]	@ (80009d4 <_7SEG_SetNumber+0x350>)
 8000878:	f001 fb70 	bl	8001f5c <HAL_GPIO_WritePin>
				break;
 800087c:	e0d5      	b.n	8000a2a <_7SEG_SetNumber+0x3a6>
			case 5: DGT1_A_ON; DGT1_F_ON; DGT1_G_ON; DGT1_C_ON; DGT1_D_ON;
 800087e:	2200      	movs	r2, #0
 8000880:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000884:	4851      	ldr	r0, [pc, #324]	@ (80009cc <_7SEG_SetNumber+0x348>)
 8000886:	f001 fb69 	bl	8001f5c <HAL_GPIO_WritePin>
 800088a:	2200      	movs	r2, #0
 800088c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000890:	4850      	ldr	r0, [pc, #320]	@ (80009d4 <_7SEG_SetNumber+0x350>)
 8000892:	f001 fb63 	bl	8001f5c <HAL_GPIO_WritePin>
 8000896:	2200      	movs	r2, #0
 8000898:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800089c:	484b      	ldr	r0, [pc, #300]	@ (80009cc <_7SEG_SetNumber+0x348>)
 800089e:	f001 fb5d 	bl	8001f5c <HAL_GPIO_WritePin>
 80008a2:	2200      	movs	r2, #0
 80008a4:	2140      	movs	r1, #64	@ 0x40
 80008a6:	4849      	ldr	r0, [pc, #292]	@ (80009cc <_7SEG_SetNumber+0x348>)
 80008a8:	f001 fb58 	bl	8001f5c <HAL_GPIO_WritePin>
 80008ac:	2200      	movs	r2, #0
 80008ae:	2120      	movs	r1, #32
 80008b0:	4846      	ldr	r0, [pc, #280]	@ (80009cc <_7SEG_SetNumber+0x348>)
 80008b2:	f001 fb53 	bl	8001f5c <HAL_GPIO_WritePin>
					DGT1_B_OFF; DGT1_E_OFF;
 80008b6:	2201      	movs	r2, #1
 80008b8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80008bc:	4844      	ldr	r0, [pc, #272]	@ (80009d0 <_7SEG_SetNumber+0x34c>)
 80008be:	f001 fb4d 	bl	8001f5c <HAL_GPIO_WritePin>
 80008c2:	2201      	movs	r2, #1
 80008c4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80008c8:	4842      	ldr	r0, [pc, #264]	@ (80009d4 <_7SEG_SetNumber+0x350>)
 80008ca:	f001 fb47 	bl	8001f5c <HAL_GPIO_WritePin>
				break;
 80008ce:	e0ac      	b.n	8000a2a <_7SEG_SetNumber+0x3a6>
			case 6: DGT1_A_ON; DGT1_C_ON; DGT1_D_ON; DGT1_E_ON; DGT1_F_ON; DGT1_G_ON;
 80008d0:	2200      	movs	r2, #0
 80008d2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80008d6:	483d      	ldr	r0, [pc, #244]	@ (80009cc <_7SEG_SetNumber+0x348>)
 80008d8:	f001 fb40 	bl	8001f5c <HAL_GPIO_WritePin>
 80008dc:	2200      	movs	r2, #0
 80008de:	2140      	movs	r1, #64	@ 0x40
 80008e0:	483a      	ldr	r0, [pc, #232]	@ (80009cc <_7SEG_SetNumber+0x348>)
 80008e2:	f001 fb3b 	bl	8001f5c <HAL_GPIO_WritePin>
 80008e6:	2200      	movs	r2, #0
 80008e8:	2120      	movs	r1, #32
 80008ea:	4838      	ldr	r0, [pc, #224]	@ (80009cc <_7SEG_SetNumber+0x348>)
 80008ec:	f001 fb36 	bl	8001f5c <HAL_GPIO_WritePin>
 80008f0:	2200      	movs	r2, #0
 80008f2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80008f6:	4837      	ldr	r0, [pc, #220]	@ (80009d4 <_7SEG_SetNumber+0x350>)
 80008f8:	f001 fb30 	bl	8001f5c <HAL_GPIO_WritePin>
 80008fc:	2200      	movs	r2, #0
 80008fe:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000902:	4834      	ldr	r0, [pc, #208]	@ (80009d4 <_7SEG_SetNumber+0x350>)
 8000904:	f001 fb2a 	bl	8001f5c <HAL_GPIO_WritePin>
 8000908:	2200      	movs	r2, #0
 800090a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800090e:	482f      	ldr	r0, [pc, #188]	@ (80009cc <_7SEG_SetNumber+0x348>)
 8000910:	f001 fb24 	bl	8001f5c <HAL_GPIO_WritePin>
					DGT1_B_OFF;
 8000914:	2201      	movs	r2, #1
 8000916:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800091a:	482d      	ldr	r0, [pc, #180]	@ (80009d0 <_7SEG_SetNumber+0x34c>)
 800091c:	f001 fb1e 	bl	8001f5c <HAL_GPIO_WritePin>
				break;
 8000920:	e083      	b.n	8000a2a <_7SEG_SetNumber+0x3a6>
			case 7: DGT1_F_ON; DGT1_A_ON; DGT1_B_ON; DGT1_C_ON;
 8000922:	2200      	movs	r2, #0
 8000924:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000928:	482a      	ldr	r0, [pc, #168]	@ (80009d4 <_7SEG_SetNumber+0x350>)
 800092a:	f001 fb17 	bl	8001f5c <HAL_GPIO_WritePin>
 800092e:	2200      	movs	r2, #0
 8000930:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000934:	4825      	ldr	r0, [pc, #148]	@ (80009cc <_7SEG_SetNumber+0x348>)
 8000936:	f001 fb11 	bl	8001f5c <HAL_GPIO_WritePin>
 800093a:	2200      	movs	r2, #0
 800093c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000940:	4823      	ldr	r0, [pc, #140]	@ (80009d0 <_7SEG_SetNumber+0x34c>)
 8000942:	f001 fb0b 	bl	8001f5c <HAL_GPIO_WritePin>
 8000946:	2200      	movs	r2, #0
 8000948:	2140      	movs	r1, #64	@ 0x40
 800094a:	4820      	ldr	r0, [pc, #128]	@ (80009cc <_7SEG_SetNumber+0x348>)
 800094c:	f001 fb06 	bl	8001f5c <HAL_GPIO_WritePin>
					DGT1_D_OFF; DGT1_E_OFF; DGT1_G_OFF;
 8000950:	2201      	movs	r2, #1
 8000952:	2120      	movs	r1, #32
 8000954:	481d      	ldr	r0, [pc, #116]	@ (80009cc <_7SEG_SetNumber+0x348>)
 8000956:	f001 fb01 	bl	8001f5c <HAL_GPIO_WritePin>
 800095a:	2201      	movs	r2, #1
 800095c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000960:	481c      	ldr	r0, [pc, #112]	@ (80009d4 <_7SEG_SetNumber+0x350>)
 8000962:	f001 fafb 	bl	8001f5c <HAL_GPIO_WritePin>
 8000966:	2201      	movs	r2, #1
 8000968:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800096c:	4817      	ldr	r0, [pc, #92]	@ (80009cc <_7SEG_SetNumber+0x348>)
 800096e:	f001 faf5 	bl	8001f5c <HAL_GPIO_WritePin>
				break;
 8000972:	e05a      	b.n	8000a2a <_7SEG_SetNumber+0x3a6>
			case 8: DGT1_A_ON; DGT1_B_ON; DGT1_C_ON; DGT1_D_ON; DGT1_E_ON; DGT1_F_ON; DGT1_G_ON;
 8000974:	2200      	movs	r2, #0
 8000976:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800097a:	4814      	ldr	r0, [pc, #80]	@ (80009cc <_7SEG_SetNumber+0x348>)
 800097c:	f001 faee 	bl	8001f5c <HAL_GPIO_WritePin>
 8000980:	2200      	movs	r2, #0
 8000982:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000986:	4812      	ldr	r0, [pc, #72]	@ (80009d0 <_7SEG_SetNumber+0x34c>)
 8000988:	f001 fae8 	bl	8001f5c <HAL_GPIO_WritePin>
 800098c:	2200      	movs	r2, #0
 800098e:	2140      	movs	r1, #64	@ 0x40
 8000990:	480e      	ldr	r0, [pc, #56]	@ (80009cc <_7SEG_SetNumber+0x348>)
 8000992:	f001 fae3 	bl	8001f5c <HAL_GPIO_WritePin>
 8000996:	2200      	movs	r2, #0
 8000998:	2120      	movs	r1, #32
 800099a:	480c      	ldr	r0, [pc, #48]	@ (80009cc <_7SEG_SetNumber+0x348>)
 800099c:	f001 fade 	bl	8001f5c <HAL_GPIO_WritePin>
 80009a0:	2200      	movs	r2, #0
 80009a2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80009a6:	480b      	ldr	r0, [pc, #44]	@ (80009d4 <_7SEG_SetNumber+0x350>)
 80009a8:	f001 fad8 	bl	8001f5c <HAL_GPIO_WritePin>
 80009ac:	2200      	movs	r2, #0
 80009ae:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80009b2:	4808      	ldr	r0, [pc, #32]	@ (80009d4 <_7SEG_SetNumber+0x350>)
 80009b4:	f001 fad2 	bl	8001f5c <HAL_GPIO_WritePin>
 80009b8:	2200      	movs	r2, #0
 80009ba:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80009be:	4803      	ldr	r0, [pc, #12]	@ (80009cc <_7SEG_SetNumber+0x348>)
 80009c0:	f001 facc 	bl	8001f5c <HAL_GPIO_WritePin>
				break;
 80009c4:	e031      	b.n	8000a2a <_7SEG_SetNumber+0x3a6>
 80009c6:	bf00      	nop
 80009c8:	66666667 	.word	0x66666667
 80009cc:	40020c00 	.word	0x40020c00
 80009d0:	40020000 	.word	0x40020000
 80009d4:	40020800 	.word	0x40020800
			case 9: DGT1_A_ON; DGT1_B_ON; DGT1_C_ON; DGT1_D_ON; DGT1_F_ON; DGT1_G_ON;
 80009d8:	2200      	movs	r2, #0
 80009da:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80009de:	48c8      	ldr	r0, [pc, #800]	@ (8000d00 <_7SEG_SetNumber+0x67c>)
 80009e0:	f001 fabc 	bl	8001f5c <HAL_GPIO_WritePin>
 80009e4:	2200      	movs	r2, #0
 80009e6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80009ea:	48c6      	ldr	r0, [pc, #792]	@ (8000d04 <_7SEG_SetNumber+0x680>)
 80009ec:	f001 fab6 	bl	8001f5c <HAL_GPIO_WritePin>
 80009f0:	2200      	movs	r2, #0
 80009f2:	2140      	movs	r1, #64	@ 0x40
 80009f4:	48c2      	ldr	r0, [pc, #776]	@ (8000d00 <_7SEG_SetNumber+0x67c>)
 80009f6:	f001 fab1 	bl	8001f5c <HAL_GPIO_WritePin>
 80009fa:	2200      	movs	r2, #0
 80009fc:	2120      	movs	r1, #32
 80009fe:	48c0      	ldr	r0, [pc, #768]	@ (8000d00 <_7SEG_SetNumber+0x67c>)
 8000a00:	f001 faac 	bl	8001f5c <HAL_GPIO_WritePin>
 8000a04:	2200      	movs	r2, #0
 8000a06:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a0a:	48bf      	ldr	r0, [pc, #764]	@ (8000d08 <_7SEG_SetNumber+0x684>)
 8000a0c:	f001 faa6 	bl	8001f5c <HAL_GPIO_WritePin>
 8000a10:	2200      	movs	r2, #0
 8000a12:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000a16:	48ba      	ldr	r0, [pc, #744]	@ (8000d00 <_7SEG_SetNumber+0x67c>)
 8000a18:	f001 faa0 	bl	8001f5c <HAL_GPIO_WritePin>
					DGT1_E_OFF;
 8000a1c:	2201      	movs	r2, #1
 8000a1e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000a22:	48b9      	ldr	r0, [pc, #740]	@ (8000d08 <_7SEG_SetNumber+0x684>)
 8000a24:	f001 fa9a 	bl	8001f5c <HAL_GPIO_WritePin>
				break;
 8000a28:	bf00      	nop
		}

		if(dp == ON)
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	2b01      	cmp	r3, #1
 8000a2e:	d105      	bne.n	8000a3c <_7SEG_SetNumber+0x3b8>
		{
			DGT1_DP_ON;
 8000a30:	2200      	movs	r2, #0
 8000a32:	2180      	movs	r1, #128	@ 0x80
 8000a34:	48b2      	ldr	r0, [pc, #712]	@ (8000d00 <_7SEG_SetNumber+0x67c>)
 8000a36:	f001 fa91 	bl	8001f5c <HAL_GPIO_WritePin>
		else if(dp == OFF)
		{
			DGT2_DP_OFF;
		}
	}
}
 8000a3a:	e1ff      	b.n	8000e3c <_7SEG_SetNumber+0x7b8>
		else if(dp == OFF)
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	f040 81fc 	bne.w	8000e3c <_7SEG_SetNumber+0x7b8>
			DGT1_DP_OFF;
 8000a44:	2201      	movs	r2, #1
 8000a46:	2180      	movs	r1, #128	@ 0x80
 8000a48:	48ad      	ldr	r0, [pc, #692]	@ (8000d00 <_7SEG_SetNumber+0x67c>)
 8000a4a:	f001 fa87 	bl	8001f5c <HAL_GPIO_WritePin>
}
 8000a4e:	e1f5      	b.n	8000e3c <_7SEG_SetNumber+0x7b8>
	else if(dgt == DGT2)
 8000a50:	68fb      	ldr	r3, [r7, #12]
 8000a52:	2b01      	cmp	r3, #1
 8000a54:	f040 81f2 	bne.w	8000e3c <_7SEG_SetNumber+0x7b8>
		switch(num%10)
 8000a58:	68b9      	ldr	r1, [r7, #8]
 8000a5a:	4bac      	ldr	r3, [pc, #688]	@ (8000d0c <_7SEG_SetNumber+0x688>)
 8000a5c:	fb83 2301 	smull	r2, r3, r3, r1
 8000a60:	109a      	asrs	r2, r3, #2
 8000a62:	17cb      	asrs	r3, r1, #31
 8000a64:	1ad2      	subs	r2, r2, r3
 8000a66:	4613      	mov	r3, r2
 8000a68:	009b      	lsls	r3, r3, #2
 8000a6a:	4413      	add	r3, r2
 8000a6c:	005b      	lsls	r3, r3, #1
 8000a6e:	1aca      	subs	r2, r1, r3
 8000a70:	2a09      	cmp	r2, #9
 8000a72:	f200 81d0 	bhi.w	8000e16 <_7SEG_SetNumber+0x792>
 8000a76:	a301      	add	r3, pc, #4	@ (adr r3, 8000a7c <_7SEG_SetNumber+0x3f8>)
 8000a78:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 8000a7c:	08000aa5 	.word	0x08000aa5
 8000a80:	08000afb 	.word	0x08000afb
 8000a84:	08000b51 	.word	0x08000b51
 8000a88:	08000ba7 	.word	0x08000ba7
 8000a8c:	08000bfd 	.word	0x08000bfd
 8000a90:	08000c53 	.word	0x08000c53
 8000a94:	08000ca9 	.word	0x08000ca9
 8000a98:	08000d15 	.word	0x08000d15
 8000a9c:	08000d6b 	.word	0x08000d6b
 8000aa0:	08000dc1 	.word	0x08000dc1
			case 0: DGT2_A_ON; DGT2_B_ON; DGT2_C_ON; DGT2_D_ON; DGT2_E_ON; DGT2_F_ON;
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000aaa:	4899      	ldr	r0, [pc, #612]	@ (8000d10 <_7SEG_SetNumber+0x68c>)
 8000aac:	f001 fa56 	bl	8001f5c <HAL_GPIO_WritePin>
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000ab6:	4896      	ldr	r0, [pc, #600]	@ (8000d10 <_7SEG_SetNumber+0x68c>)
 8000ab8:	f001 fa50 	bl	8001f5c <HAL_GPIO_WritePin>
 8000abc:	2200      	movs	r2, #0
 8000abe:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000ac2:	4893      	ldr	r0, [pc, #588]	@ (8000d10 <_7SEG_SetNumber+0x68c>)
 8000ac4:	f001 fa4a 	bl	8001f5c <HAL_GPIO_WritePin>
 8000ac8:	2200      	movs	r2, #0
 8000aca:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000ace:	4890      	ldr	r0, [pc, #576]	@ (8000d10 <_7SEG_SetNumber+0x68c>)
 8000ad0:	f001 fa44 	bl	8001f5c <HAL_GPIO_WritePin>
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000ada:	488d      	ldr	r0, [pc, #564]	@ (8000d10 <_7SEG_SetNumber+0x68c>)
 8000adc:	f001 fa3e 	bl	8001f5c <HAL_GPIO_WritePin>
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000ae6:	488a      	ldr	r0, [pc, #552]	@ (8000d10 <_7SEG_SetNumber+0x68c>)
 8000ae8:	f001 fa38 	bl	8001f5c <HAL_GPIO_WritePin>
					DGT2_G_OFF;
 8000aec:	2201      	movs	r2, #1
 8000aee:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000af2:	4887      	ldr	r0, [pc, #540]	@ (8000d10 <_7SEG_SetNumber+0x68c>)
 8000af4:	f001 fa32 	bl	8001f5c <HAL_GPIO_WritePin>
				break;
 8000af8:	e18d      	b.n	8000e16 <_7SEG_SetNumber+0x792>
			case 1: DGT2_B_ON; DGT2_C_ON;
 8000afa:	2200      	movs	r2, #0
 8000afc:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000b00:	4883      	ldr	r0, [pc, #524]	@ (8000d10 <_7SEG_SetNumber+0x68c>)
 8000b02:	f001 fa2b 	bl	8001f5c <HAL_GPIO_WritePin>
 8000b06:	2200      	movs	r2, #0
 8000b08:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000b0c:	4880      	ldr	r0, [pc, #512]	@ (8000d10 <_7SEG_SetNumber+0x68c>)
 8000b0e:	f001 fa25 	bl	8001f5c <HAL_GPIO_WritePin>
					DGT2_A_OFF; DGT2_D_OFF; DGT2_E_OFF; DGT2_F_OFF; DGT2_G_OFF;
 8000b12:	2201      	movs	r2, #1
 8000b14:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000b18:	487d      	ldr	r0, [pc, #500]	@ (8000d10 <_7SEG_SetNumber+0x68c>)
 8000b1a:	f001 fa1f 	bl	8001f5c <HAL_GPIO_WritePin>
 8000b1e:	2201      	movs	r2, #1
 8000b20:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000b24:	487a      	ldr	r0, [pc, #488]	@ (8000d10 <_7SEG_SetNumber+0x68c>)
 8000b26:	f001 fa19 	bl	8001f5c <HAL_GPIO_WritePin>
 8000b2a:	2201      	movs	r2, #1
 8000b2c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000b30:	4877      	ldr	r0, [pc, #476]	@ (8000d10 <_7SEG_SetNumber+0x68c>)
 8000b32:	f001 fa13 	bl	8001f5c <HAL_GPIO_WritePin>
 8000b36:	2201      	movs	r2, #1
 8000b38:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000b3c:	4874      	ldr	r0, [pc, #464]	@ (8000d10 <_7SEG_SetNumber+0x68c>)
 8000b3e:	f001 fa0d 	bl	8001f5c <HAL_GPIO_WritePin>
 8000b42:	2201      	movs	r2, #1
 8000b44:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000b48:	4871      	ldr	r0, [pc, #452]	@ (8000d10 <_7SEG_SetNumber+0x68c>)
 8000b4a:	f001 fa07 	bl	8001f5c <HAL_GPIO_WritePin>
				break;
 8000b4e:	e162      	b.n	8000e16 <_7SEG_SetNumber+0x792>
			case 2: DGT2_A_ON; DGT2_B_ON; DGT2_G_ON; DGT2_E_ON; DGT2_D_ON;
 8000b50:	2200      	movs	r2, #0
 8000b52:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000b56:	486e      	ldr	r0, [pc, #440]	@ (8000d10 <_7SEG_SetNumber+0x68c>)
 8000b58:	f001 fa00 	bl	8001f5c <HAL_GPIO_WritePin>
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000b62:	486b      	ldr	r0, [pc, #428]	@ (8000d10 <_7SEG_SetNumber+0x68c>)
 8000b64:	f001 f9fa 	bl	8001f5c <HAL_GPIO_WritePin>
 8000b68:	2200      	movs	r2, #0
 8000b6a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000b6e:	4868      	ldr	r0, [pc, #416]	@ (8000d10 <_7SEG_SetNumber+0x68c>)
 8000b70:	f001 f9f4 	bl	8001f5c <HAL_GPIO_WritePin>
 8000b74:	2200      	movs	r2, #0
 8000b76:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000b7a:	4865      	ldr	r0, [pc, #404]	@ (8000d10 <_7SEG_SetNumber+0x68c>)
 8000b7c:	f001 f9ee 	bl	8001f5c <HAL_GPIO_WritePin>
 8000b80:	2200      	movs	r2, #0
 8000b82:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000b86:	4862      	ldr	r0, [pc, #392]	@ (8000d10 <_7SEG_SetNumber+0x68c>)
 8000b88:	f001 f9e8 	bl	8001f5c <HAL_GPIO_WritePin>
					DGT2_C_OFF; DGT2_F_OFF;
 8000b8c:	2201      	movs	r2, #1
 8000b8e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000b92:	485f      	ldr	r0, [pc, #380]	@ (8000d10 <_7SEG_SetNumber+0x68c>)
 8000b94:	f001 f9e2 	bl	8001f5c <HAL_GPIO_WritePin>
 8000b98:	2201      	movs	r2, #1
 8000b9a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000b9e:	485c      	ldr	r0, [pc, #368]	@ (8000d10 <_7SEG_SetNumber+0x68c>)
 8000ba0:	f001 f9dc 	bl	8001f5c <HAL_GPIO_WritePin>
				break;
 8000ba4:	e137      	b.n	8000e16 <_7SEG_SetNumber+0x792>
			case 3: DGT2_A_ON; DGT2_B_ON; DGT2_C_ON; DGT2_D_ON; DGT2_G_ON;
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000bac:	4858      	ldr	r0, [pc, #352]	@ (8000d10 <_7SEG_SetNumber+0x68c>)
 8000bae:	f001 f9d5 	bl	8001f5c <HAL_GPIO_WritePin>
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000bb8:	4855      	ldr	r0, [pc, #340]	@ (8000d10 <_7SEG_SetNumber+0x68c>)
 8000bba:	f001 f9cf 	bl	8001f5c <HAL_GPIO_WritePin>
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000bc4:	4852      	ldr	r0, [pc, #328]	@ (8000d10 <_7SEG_SetNumber+0x68c>)
 8000bc6:	f001 f9c9 	bl	8001f5c <HAL_GPIO_WritePin>
 8000bca:	2200      	movs	r2, #0
 8000bcc:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000bd0:	484f      	ldr	r0, [pc, #316]	@ (8000d10 <_7SEG_SetNumber+0x68c>)
 8000bd2:	f001 f9c3 	bl	8001f5c <HAL_GPIO_WritePin>
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000bdc:	484c      	ldr	r0, [pc, #304]	@ (8000d10 <_7SEG_SetNumber+0x68c>)
 8000bde:	f001 f9bd 	bl	8001f5c <HAL_GPIO_WritePin>
					DGT2_E_OFF; DGT2_F_OFF;
 8000be2:	2201      	movs	r2, #1
 8000be4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000be8:	4849      	ldr	r0, [pc, #292]	@ (8000d10 <_7SEG_SetNumber+0x68c>)
 8000bea:	f001 f9b7 	bl	8001f5c <HAL_GPIO_WritePin>
 8000bee:	2201      	movs	r2, #1
 8000bf0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000bf4:	4846      	ldr	r0, [pc, #280]	@ (8000d10 <_7SEG_SetNumber+0x68c>)
 8000bf6:	f001 f9b1 	bl	8001f5c <HAL_GPIO_WritePin>
				break;
 8000bfa:	e10c      	b.n	8000e16 <_7SEG_SetNumber+0x792>
			case 4: DGT2_F_ON; DGT2_G_ON; DGT2_B_ON; DGT2_C_ON;
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000c02:	4843      	ldr	r0, [pc, #268]	@ (8000d10 <_7SEG_SetNumber+0x68c>)
 8000c04:	f001 f9aa 	bl	8001f5c <HAL_GPIO_WritePin>
 8000c08:	2200      	movs	r2, #0
 8000c0a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000c0e:	4840      	ldr	r0, [pc, #256]	@ (8000d10 <_7SEG_SetNumber+0x68c>)
 8000c10:	f001 f9a4 	bl	8001f5c <HAL_GPIO_WritePin>
 8000c14:	2200      	movs	r2, #0
 8000c16:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000c1a:	483d      	ldr	r0, [pc, #244]	@ (8000d10 <_7SEG_SetNumber+0x68c>)
 8000c1c:	f001 f99e 	bl	8001f5c <HAL_GPIO_WritePin>
 8000c20:	2200      	movs	r2, #0
 8000c22:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000c26:	483a      	ldr	r0, [pc, #232]	@ (8000d10 <_7SEG_SetNumber+0x68c>)
 8000c28:	f001 f998 	bl	8001f5c <HAL_GPIO_WritePin>
					DGT2_A_OFF; DGT2_D_OFF; DGT2_E_OFF;
 8000c2c:	2201      	movs	r2, #1
 8000c2e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000c32:	4837      	ldr	r0, [pc, #220]	@ (8000d10 <_7SEG_SetNumber+0x68c>)
 8000c34:	f001 f992 	bl	8001f5c <HAL_GPIO_WritePin>
 8000c38:	2201      	movs	r2, #1
 8000c3a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000c3e:	4834      	ldr	r0, [pc, #208]	@ (8000d10 <_7SEG_SetNumber+0x68c>)
 8000c40:	f001 f98c 	bl	8001f5c <HAL_GPIO_WritePin>
 8000c44:	2201      	movs	r2, #1
 8000c46:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000c4a:	4831      	ldr	r0, [pc, #196]	@ (8000d10 <_7SEG_SetNumber+0x68c>)
 8000c4c:	f001 f986 	bl	8001f5c <HAL_GPIO_WritePin>
				break;
 8000c50:	e0e1      	b.n	8000e16 <_7SEG_SetNumber+0x792>
			case 5: DGT2_A_ON; DGT2_F_ON; DGT2_G_ON; DGT2_C_ON; DGT2_D_ON;
 8000c52:	2200      	movs	r2, #0
 8000c54:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000c58:	482d      	ldr	r0, [pc, #180]	@ (8000d10 <_7SEG_SetNumber+0x68c>)
 8000c5a:	f001 f97f 	bl	8001f5c <HAL_GPIO_WritePin>
 8000c5e:	2200      	movs	r2, #0
 8000c60:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000c64:	482a      	ldr	r0, [pc, #168]	@ (8000d10 <_7SEG_SetNumber+0x68c>)
 8000c66:	f001 f979 	bl	8001f5c <HAL_GPIO_WritePin>
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000c70:	4827      	ldr	r0, [pc, #156]	@ (8000d10 <_7SEG_SetNumber+0x68c>)
 8000c72:	f001 f973 	bl	8001f5c <HAL_GPIO_WritePin>
 8000c76:	2200      	movs	r2, #0
 8000c78:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000c7c:	4824      	ldr	r0, [pc, #144]	@ (8000d10 <_7SEG_SetNumber+0x68c>)
 8000c7e:	f001 f96d 	bl	8001f5c <HAL_GPIO_WritePin>
 8000c82:	2200      	movs	r2, #0
 8000c84:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000c88:	4821      	ldr	r0, [pc, #132]	@ (8000d10 <_7SEG_SetNumber+0x68c>)
 8000c8a:	f001 f967 	bl	8001f5c <HAL_GPIO_WritePin>
					DGT2_B_OFF; DGT2_E_OFF;
 8000c8e:	2201      	movs	r2, #1
 8000c90:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000c94:	481e      	ldr	r0, [pc, #120]	@ (8000d10 <_7SEG_SetNumber+0x68c>)
 8000c96:	f001 f961 	bl	8001f5c <HAL_GPIO_WritePin>
 8000c9a:	2201      	movs	r2, #1
 8000c9c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000ca0:	481b      	ldr	r0, [pc, #108]	@ (8000d10 <_7SEG_SetNumber+0x68c>)
 8000ca2:	f001 f95b 	bl	8001f5c <HAL_GPIO_WritePin>
				break;
 8000ca6:	e0b6      	b.n	8000e16 <_7SEG_SetNumber+0x792>
			case 6: DGT2_A_ON; DGT2_C_ON; DGT2_D_ON; DGT2_E_ON; DGT2_F_ON; DGT2_G_ON;
 8000ca8:	2200      	movs	r2, #0
 8000caa:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000cae:	4818      	ldr	r0, [pc, #96]	@ (8000d10 <_7SEG_SetNumber+0x68c>)
 8000cb0:	f001 f954 	bl	8001f5c <HAL_GPIO_WritePin>
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000cba:	4815      	ldr	r0, [pc, #84]	@ (8000d10 <_7SEG_SetNumber+0x68c>)
 8000cbc:	f001 f94e 	bl	8001f5c <HAL_GPIO_WritePin>
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000cc6:	4812      	ldr	r0, [pc, #72]	@ (8000d10 <_7SEG_SetNumber+0x68c>)
 8000cc8:	f001 f948 	bl	8001f5c <HAL_GPIO_WritePin>
 8000ccc:	2200      	movs	r2, #0
 8000cce:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000cd2:	480f      	ldr	r0, [pc, #60]	@ (8000d10 <_7SEG_SetNumber+0x68c>)
 8000cd4:	f001 f942 	bl	8001f5c <HAL_GPIO_WritePin>
 8000cd8:	2200      	movs	r2, #0
 8000cda:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000cde:	480c      	ldr	r0, [pc, #48]	@ (8000d10 <_7SEG_SetNumber+0x68c>)
 8000ce0:	f001 f93c 	bl	8001f5c <HAL_GPIO_WritePin>
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000cea:	4809      	ldr	r0, [pc, #36]	@ (8000d10 <_7SEG_SetNumber+0x68c>)
 8000cec:	f001 f936 	bl	8001f5c <HAL_GPIO_WritePin>
					DGT2_B_OFF;
 8000cf0:	2201      	movs	r2, #1
 8000cf2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000cf6:	4806      	ldr	r0, [pc, #24]	@ (8000d10 <_7SEG_SetNumber+0x68c>)
 8000cf8:	f001 f930 	bl	8001f5c <HAL_GPIO_WritePin>
				break;
 8000cfc:	e08b      	b.n	8000e16 <_7SEG_SetNumber+0x792>
 8000cfe:	bf00      	nop
 8000d00:	40020c00 	.word	0x40020c00
 8000d04:	40020000 	.word	0x40020000
 8000d08:	40020800 	.word	0x40020800
 8000d0c:	66666667 	.word	0x66666667
 8000d10:	40021000 	.word	0x40021000
			case 7: DGT2_F_ON; DGT2_A_ON; DGT2_B_ON; DGT2_C_ON;
 8000d14:	2200      	movs	r2, #0
 8000d16:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000d1a:	484a      	ldr	r0, [pc, #296]	@ (8000e44 <_7SEG_SetNumber+0x7c0>)
 8000d1c:	f001 f91e 	bl	8001f5c <HAL_GPIO_WritePin>
 8000d20:	2200      	movs	r2, #0
 8000d22:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000d26:	4847      	ldr	r0, [pc, #284]	@ (8000e44 <_7SEG_SetNumber+0x7c0>)
 8000d28:	f001 f918 	bl	8001f5c <HAL_GPIO_WritePin>
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000d32:	4844      	ldr	r0, [pc, #272]	@ (8000e44 <_7SEG_SetNumber+0x7c0>)
 8000d34:	f001 f912 	bl	8001f5c <HAL_GPIO_WritePin>
 8000d38:	2200      	movs	r2, #0
 8000d3a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000d3e:	4841      	ldr	r0, [pc, #260]	@ (8000e44 <_7SEG_SetNumber+0x7c0>)
 8000d40:	f001 f90c 	bl	8001f5c <HAL_GPIO_WritePin>
					DGT2_D_OFF; DGT2_E_OFF; DGT2_G_OFF;
 8000d44:	2201      	movs	r2, #1
 8000d46:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000d4a:	483e      	ldr	r0, [pc, #248]	@ (8000e44 <_7SEG_SetNumber+0x7c0>)
 8000d4c:	f001 f906 	bl	8001f5c <HAL_GPIO_WritePin>
 8000d50:	2201      	movs	r2, #1
 8000d52:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000d56:	483b      	ldr	r0, [pc, #236]	@ (8000e44 <_7SEG_SetNumber+0x7c0>)
 8000d58:	f001 f900 	bl	8001f5c <HAL_GPIO_WritePin>
 8000d5c:	2201      	movs	r2, #1
 8000d5e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000d62:	4838      	ldr	r0, [pc, #224]	@ (8000e44 <_7SEG_SetNumber+0x7c0>)
 8000d64:	f001 f8fa 	bl	8001f5c <HAL_GPIO_WritePin>
				break;
 8000d68:	e055      	b.n	8000e16 <_7SEG_SetNumber+0x792>
			case 8: DGT2_A_ON; DGT2_B_ON; DGT2_C_ON; DGT2_D_ON; DGT2_E_ON; DGT2_F_ON; DGT2_G_ON;
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000d70:	4834      	ldr	r0, [pc, #208]	@ (8000e44 <_7SEG_SetNumber+0x7c0>)
 8000d72:	f001 f8f3 	bl	8001f5c <HAL_GPIO_WritePin>
 8000d76:	2200      	movs	r2, #0
 8000d78:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000d7c:	4831      	ldr	r0, [pc, #196]	@ (8000e44 <_7SEG_SetNumber+0x7c0>)
 8000d7e:	f001 f8ed 	bl	8001f5c <HAL_GPIO_WritePin>
 8000d82:	2200      	movs	r2, #0
 8000d84:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000d88:	482e      	ldr	r0, [pc, #184]	@ (8000e44 <_7SEG_SetNumber+0x7c0>)
 8000d8a:	f001 f8e7 	bl	8001f5c <HAL_GPIO_WritePin>
 8000d8e:	2200      	movs	r2, #0
 8000d90:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000d94:	482b      	ldr	r0, [pc, #172]	@ (8000e44 <_7SEG_SetNumber+0x7c0>)
 8000d96:	f001 f8e1 	bl	8001f5c <HAL_GPIO_WritePin>
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000da0:	4828      	ldr	r0, [pc, #160]	@ (8000e44 <_7SEG_SetNumber+0x7c0>)
 8000da2:	f001 f8db 	bl	8001f5c <HAL_GPIO_WritePin>
 8000da6:	2200      	movs	r2, #0
 8000da8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000dac:	4825      	ldr	r0, [pc, #148]	@ (8000e44 <_7SEG_SetNumber+0x7c0>)
 8000dae:	f001 f8d5 	bl	8001f5c <HAL_GPIO_WritePin>
 8000db2:	2200      	movs	r2, #0
 8000db4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000db8:	4822      	ldr	r0, [pc, #136]	@ (8000e44 <_7SEG_SetNumber+0x7c0>)
 8000dba:	f001 f8cf 	bl	8001f5c <HAL_GPIO_WritePin>
				break;
 8000dbe:	e02a      	b.n	8000e16 <_7SEG_SetNumber+0x792>
			case 9: DGT2_A_ON; DGT2_B_ON; DGT2_C_ON; DGT2_D_ON; DGT2_F_ON; DGT2_G_ON;
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000dc6:	481f      	ldr	r0, [pc, #124]	@ (8000e44 <_7SEG_SetNumber+0x7c0>)
 8000dc8:	f001 f8c8 	bl	8001f5c <HAL_GPIO_WritePin>
 8000dcc:	2200      	movs	r2, #0
 8000dce:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000dd2:	481c      	ldr	r0, [pc, #112]	@ (8000e44 <_7SEG_SetNumber+0x7c0>)
 8000dd4:	f001 f8c2 	bl	8001f5c <HAL_GPIO_WritePin>
 8000dd8:	2200      	movs	r2, #0
 8000dda:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000dde:	4819      	ldr	r0, [pc, #100]	@ (8000e44 <_7SEG_SetNumber+0x7c0>)
 8000de0:	f001 f8bc 	bl	8001f5c <HAL_GPIO_WritePin>
 8000de4:	2200      	movs	r2, #0
 8000de6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000dea:	4816      	ldr	r0, [pc, #88]	@ (8000e44 <_7SEG_SetNumber+0x7c0>)
 8000dec:	f001 f8b6 	bl	8001f5c <HAL_GPIO_WritePin>
 8000df0:	2200      	movs	r2, #0
 8000df2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000df6:	4813      	ldr	r0, [pc, #76]	@ (8000e44 <_7SEG_SetNumber+0x7c0>)
 8000df8:	f001 f8b0 	bl	8001f5c <HAL_GPIO_WritePin>
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000e02:	4810      	ldr	r0, [pc, #64]	@ (8000e44 <_7SEG_SetNumber+0x7c0>)
 8000e04:	f001 f8aa 	bl	8001f5c <HAL_GPIO_WritePin>
					DGT2_E_OFF;
 8000e08:	2201      	movs	r2, #1
 8000e0a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000e0e:	480d      	ldr	r0, [pc, #52]	@ (8000e44 <_7SEG_SetNumber+0x7c0>)
 8000e10:	f001 f8a4 	bl	8001f5c <HAL_GPIO_WritePin>
				break;
 8000e14:	bf00      	nop
		if(dp == ON)
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	2b01      	cmp	r3, #1
 8000e1a:	d106      	bne.n	8000e2a <_7SEG_SetNumber+0x7a6>
			DGT2_DP_ON;
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000e22:	4808      	ldr	r0, [pc, #32]	@ (8000e44 <_7SEG_SetNumber+0x7c0>)
 8000e24:	f001 f89a 	bl	8001f5c <HAL_GPIO_WritePin>
}
 8000e28:	e008      	b.n	8000e3c <_7SEG_SetNumber+0x7b8>
		else if(dp == OFF)
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d105      	bne.n	8000e3c <_7SEG_SetNumber+0x7b8>
			DGT2_DP_OFF;
 8000e30:	2201      	movs	r2, #1
 8000e32:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000e36:	4803      	ldr	r0, [pc, #12]	@ (8000e44 <_7SEG_SetNumber+0x7c0>)
 8000e38:	f001 f890 	bl	8001f5c <HAL_GPIO_WritePin>
}
 8000e3c:	bf00      	nop
 8000e3e:	3710      	adds	r7, #16
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	40021000 	.word	0x40021000

08000e48 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e4c:	f000 fcbc 	bl	80017c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e50:	f000 f846 	bl	8000ee0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e54:	f000 f932 	bl	80010bc <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000e58:	f000 f906 	bl	8001068 <MX_USART3_UART_Init>
  MX_TIM6_Init();
 8000e5c:	f000 f8ce 	bl	8000ffc <MX_TIM6_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8000e60:	f000 f8a8 	bl	8000fb4 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  // UART call
  HAL_UART_Receive_IT(&huart3, &uartRxfd.uart3_rx_data, sizeof(uartRxfd.uart3_rx_data));
 8000e64:	2201      	movs	r2, #1
 8000e66:	4918      	ldr	r1, [pc, #96]	@ (8000ec8 <main+0x80>)
 8000e68:	4818      	ldr	r0, [pc, #96]	@ (8000ecc <main+0x84>)
 8000e6a:	f002 f8bf 	bl	8002fec <HAL_UART_Receive_IT>
  HAL_TIM_Base_Start_IT(&htim6);
 8000e6e:	4818      	ldr	r0, [pc, #96]	@ (8000ed0 <main+0x88>)
 8000e70:	f001 fda8 	bl	80029c4 <HAL_TIM_Base_Start_IT>
  _7SEG_GPIO_Init();
 8000e74:	f7ff fb20 	bl	80004b8 <_7SEG_GPIO_Init>

  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, 1);
 8000e78:	2201      	movs	r2, #1
 8000e7a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000e7e:	4815      	ldr	r0, [pc, #84]	@ (8000ed4 <main+0x8c>)
 8000e80:	f001 f86c 	bl	8001f5c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);
 8000e84:	2201      	movs	r2, #1
 8000e86:	2140      	movs	r1, #64	@ 0x40
 8000e88:	4813      	ldr	r0, [pc, #76]	@ (8000ed8 <main+0x90>)
 8000e8a:	f001 f867 	bl	8001f5c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, 1);
 8000e8e:	2201      	movs	r2, #1
 8000e90:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000e94:	480f      	ldr	r0, [pc, #60]	@ (8000ed4 <main+0x8c>)
 8000e96:	f001 f861 	bl	8001f5c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 1);
 8000e9a:	2201      	movs	r2, #1
 8000e9c:	2120      	movs	r1, #32
 8000e9e:	480f      	ldr	r0, [pc, #60]	@ (8000edc <main+0x94>)
 8000ea0:	f001 f85c 	bl	8001f5c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, 1);
 8000ea4:	2201      	movs	r2, #1
 8000ea6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000eaa:	480a      	ldr	r0, [pc, #40]	@ (8000ed4 <main+0x8c>)
 8000eac:	f001 f856 	bl	8001f5c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 1);
 8000eb0:	2201      	movs	r2, #1
 8000eb2:	2101      	movs	r1, #1
 8000eb4:	4809      	ldr	r0, [pc, #36]	@ (8000edc <main+0x94>)
 8000eb6:	f001 f851 	bl	8001f5c <HAL_GPIO_WritePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  sw2StopWatchControll();
 8000eba:	f000 fc0b 	bl	80016d4 <sw2StopWatchControll>
	  sw3StopWatchReset();
 8000ebe:	f000 fc2d 	bl	800171c <sw3StopWatchReset>
	  sw2StopWatchControll();
 8000ec2:	bf00      	nop
 8000ec4:	e7f9      	b.n	8000eba <main+0x72>
 8000ec6:	bf00      	nop
 8000ec8:	200000d0 	.word	0x200000d0
 8000ecc:	20000084 	.word	0x20000084
 8000ed0:	2000003c 	.word	0x2000003c
 8000ed4:	40020c00 	.word	0x40020c00
 8000ed8:	40020800 	.word	0x40020800
 8000edc:	40020400 	.word	0x40020400

08000ee0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b094      	sub	sp, #80	@ 0x50
 8000ee4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ee6:	f107 0320 	add.w	r3, r7, #32
 8000eea:	2230      	movs	r2, #48	@ 0x30
 8000eec:	2100      	movs	r1, #0
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f002 ffa0 	bl	8003e34 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ef4:	f107 030c 	add.w	r3, r7, #12
 8000ef8:	2200      	movs	r2, #0
 8000efa:	601a      	str	r2, [r3, #0]
 8000efc:	605a      	str	r2, [r3, #4]
 8000efe:	609a      	str	r2, [r3, #8]
 8000f00:	60da      	str	r2, [r3, #12]
 8000f02:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f04:	2300      	movs	r3, #0
 8000f06:	60bb      	str	r3, [r7, #8]
 8000f08:	4b28      	ldr	r3, [pc, #160]	@ (8000fac <SystemClock_Config+0xcc>)
 8000f0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f0c:	4a27      	ldr	r2, [pc, #156]	@ (8000fac <SystemClock_Config+0xcc>)
 8000f0e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f12:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f14:	4b25      	ldr	r3, [pc, #148]	@ (8000fac <SystemClock_Config+0xcc>)
 8000f16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f18:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f1c:	60bb      	str	r3, [r7, #8]
 8000f1e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f20:	2300      	movs	r3, #0
 8000f22:	607b      	str	r3, [r7, #4]
 8000f24:	4b22      	ldr	r3, [pc, #136]	@ (8000fb0 <SystemClock_Config+0xd0>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	4a21      	ldr	r2, [pc, #132]	@ (8000fb0 <SystemClock_Config+0xd0>)
 8000f2a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f2e:	6013      	str	r3, [r2, #0]
 8000f30:	4b1f      	ldr	r3, [pc, #124]	@ (8000fb0 <SystemClock_Config+0xd0>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f38:	607b      	str	r3, [r7, #4]
 8000f3a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f3c:	2301      	movs	r3, #1
 8000f3e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f40:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000f44:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f46:	2302      	movs	r3, #2
 8000f48:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f4a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000f4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000f50:	2304      	movs	r3, #4
 8000f52:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000f54:	23a8      	movs	r3, #168	@ 0xa8
 8000f56:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f58:	2302      	movs	r3, #2
 8000f5a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000f5c:	2304      	movs	r3, #4
 8000f5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f60:	f107 0320 	add.w	r3, r7, #32
 8000f64:	4618      	mov	r0, r3
 8000f66:	f001 f845 	bl	8001ff4 <HAL_RCC_OscConfig>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d001      	beq.n	8000f74 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000f70:	f000 fa14 	bl	800139c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f74:	230f      	movs	r3, #15
 8000f76:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f78:	2302      	movs	r3, #2
 8000f7a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000f80:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000f84:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000f86:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f8a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000f8c:	f107 030c 	add.w	r3, r7, #12
 8000f90:	2105      	movs	r1, #5
 8000f92:	4618      	mov	r0, r3
 8000f94:	f001 faa6 	bl	80024e4 <HAL_RCC_ClockConfig>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d001      	beq.n	8000fa2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000f9e:	f000 f9fd 	bl	800139c <Error_Handler>
  }
}
 8000fa2:	bf00      	nop
 8000fa4:	3750      	adds	r7, #80	@ 0x50
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	40023800 	.word	0x40023800
 8000fb0:	40007000 	.word	0x40007000

08000fb4 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	af00      	add	r7, sp, #0
  /* USART3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000fb8:	2200      	movs	r2, #0
 8000fba:	2100      	movs	r1, #0
 8000fbc:	2027      	movs	r0, #39	@ 0x27
 8000fbe:	f000 fd50 	bl	8001a62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000fc2:	2027      	movs	r0, #39	@ 0x27
 8000fc4:	f000 fd69 	bl	8001a9a <HAL_NVIC_EnableIRQ>
  /* EXTI4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8000fc8:	2200      	movs	r2, #0
 8000fca:	2100      	movs	r1, #0
 8000fcc:	200a      	movs	r0, #10
 8000fce:	f000 fd48 	bl	8001a62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000fd2:	200a      	movs	r0, #10
 8000fd4:	f000 fd61 	bl	8001a9a <HAL_NVIC_EnableIRQ>
  /* EXTI15_10_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000fd8:	2200      	movs	r2, #0
 8000fda:	2100      	movs	r1, #0
 8000fdc:	2028      	movs	r0, #40	@ 0x28
 8000fde:	f000 fd40 	bl	8001a62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000fe2:	2028      	movs	r0, #40	@ 0x28
 8000fe4:	f000 fd59 	bl	8001a9a <HAL_NVIC_EnableIRQ>
  /* TIM6_DAC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8000fe8:	2200      	movs	r2, #0
 8000fea:	2100      	movs	r1, #0
 8000fec:	2036      	movs	r0, #54	@ 0x36
 8000fee:	f000 fd38 	bl	8001a62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000ff2:	2036      	movs	r0, #54	@ 0x36
 8000ff4:	f000 fd51 	bl	8001a9a <HAL_NVIC_EnableIRQ>
}
 8000ff8:	bf00      	nop
 8000ffa:	bd80      	pop	{r7, pc}

08000ffc <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b082      	sub	sp, #8
 8001000:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001002:	463b      	mov	r3, r7
 8001004:	2200      	movs	r2, #0
 8001006:	601a      	str	r2, [r3, #0]
 8001008:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800100a:	4b15      	ldr	r3, [pc, #84]	@ (8001060 <MX_TIM6_Init+0x64>)
 800100c:	4a15      	ldr	r2, [pc, #84]	@ (8001064 <MX_TIM6_Init+0x68>)
 800100e:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 99;
 8001010:	4b13      	ldr	r3, [pc, #76]	@ (8001060 <MX_TIM6_Init+0x64>)
 8001012:	2263      	movs	r2, #99	@ 0x63
 8001014:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001016:	4b12      	ldr	r3, [pc, #72]	@ (8001060 <MX_TIM6_Init+0x64>)
 8001018:	2200      	movs	r2, #0
 800101a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 839;
 800101c:	4b10      	ldr	r3, [pc, #64]	@ (8001060 <MX_TIM6_Init+0x64>)
 800101e:	f240 3247 	movw	r2, #839	@ 0x347
 8001022:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001024:	4b0e      	ldr	r3, [pc, #56]	@ (8001060 <MX_TIM6_Init+0x64>)
 8001026:	2280      	movs	r2, #128	@ 0x80
 8001028:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800102a:	480d      	ldr	r0, [pc, #52]	@ (8001060 <MX_TIM6_Init+0x64>)
 800102c:	f001 fc7a 	bl	8002924 <HAL_TIM_Base_Init>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d001      	beq.n	800103a <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8001036:	f000 f9b1 	bl	800139c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800103a:	2300      	movs	r3, #0
 800103c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800103e:	2300      	movs	r3, #0
 8001040:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001042:	463b      	mov	r3, r7
 8001044:	4619      	mov	r1, r3
 8001046:	4806      	ldr	r0, [pc, #24]	@ (8001060 <MX_TIM6_Init+0x64>)
 8001048:	f001 fef0 	bl	8002e2c <HAL_TIMEx_MasterConfigSynchronization>
 800104c:	4603      	mov	r3, r0
 800104e:	2b00      	cmp	r3, #0
 8001050:	d001      	beq.n	8001056 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8001052:	f000 f9a3 	bl	800139c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001056:	bf00      	nop
 8001058:	3708      	adds	r7, #8
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	2000003c 	.word	0x2000003c
 8001064:	40001000 	.word	0x40001000

08001068 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800106c:	4b11      	ldr	r3, [pc, #68]	@ (80010b4 <MX_USART3_UART_Init+0x4c>)
 800106e:	4a12      	ldr	r2, [pc, #72]	@ (80010b8 <MX_USART3_UART_Init+0x50>)
 8001070:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001072:	4b10      	ldr	r3, [pc, #64]	@ (80010b4 <MX_USART3_UART_Init+0x4c>)
 8001074:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001078:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800107a:	4b0e      	ldr	r3, [pc, #56]	@ (80010b4 <MX_USART3_UART_Init+0x4c>)
 800107c:	2200      	movs	r2, #0
 800107e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001080:	4b0c      	ldr	r3, [pc, #48]	@ (80010b4 <MX_USART3_UART_Init+0x4c>)
 8001082:	2200      	movs	r2, #0
 8001084:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001086:	4b0b      	ldr	r3, [pc, #44]	@ (80010b4 <MX_USART3_UART_Init+0x4c>)
 8001088:	2200      	movs	r2, #0
 800108a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800108c:	4b09      	ldr	r3, [pc, #36]	@ (80010b4 <MX_USART3_UART_Init+0x4c>)
 800108e:	220c      	movs	r2, #12
 8001090:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001092:	4b08      	ldr	r3, [pc, #32]	@ (80010b4 <MX_USART3_UART_Init+0x4c>)
 8001094:	2200      	movs	r2, #0
 8001096:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001098:	4b06      	ldr	r3, [pc, #24]	@ (80010b4 <MX_USART3_UART_Init+0x4c>)
 800109a:	2200      	movs	r2, #0
 800109c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800109e:	4805      	ldr	r0, [pc, #20]	@ (80010b4 <MX_USART3_UART_Init+0x4c>)
 80010a0:	f001 ff54 	bl	8002f4c <HAL_UART_Init>
 80010a4:	4603      	mov	r3, r0
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d001      	beq.n	80010ae <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80010aa:	f000 f977 	bl	800139c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80010ae:	bf00      	nop
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	20000084 	.word	0x20000084
 80010b8:	40004800 	.word	0x40004800

080010bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b08a      	sub	sp, #40	@ 0x28
 80010c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010c2:	f107 0314 	add.w	r3, r7, #20
 80010c6:	2200      	movs	r2, #0
 80010c8:	601a      	str	r2, [r3, #0]
 80010ca:	605a      	str	r2, [r3, #4]
 80010cc:	609a      	str	r2, [r3, #8]
 80010ce:	60da      	str	r2, [r3, #12]
 80010d0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80010d2:	2300      	movs	r3, #0
 80010d4:	613b      	str	r3, [r7, #16]
 80010d6:	4b5a      	ldr	r3, [pc, #360]	@ (8001240 <MX_GPIO_Init+0x184>)
 80010d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010da:	4a59      	ldr	r2, [pc, #356]	@ (8001240 <MX_GPIO_Init+0x184>)
 80010dc:	f043 0310 	orr.w	r3, r3, #16
 80010e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80010e2:	4b57      	ldr	r3, [pc, #348]	@ (8001240 <MX_GPIO_Init+0x184>)
 80010e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010e6:	f003 0310 	and.w	r3, r3, #16
 80010ea:	613b      	str	r3, [r7, #16]
 80010ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010ee:	2300      	movs	r3, #0
 80010f0:	60fb      	str	r3, [r7, #12]
 80010f2:	4b53      	ldr	r3, [pc, #332]	@ (8001240 <MX_GPIO_Init+0x184>)
 80010f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010f6:	4a52      	ldr	r2, [pc, #328]	@ (8001240 <MX_GPIO_Init+0x184>)
 80010f8:	f043 0304 	orr.w	r3, r3, #4
 80010fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80010fe:	4b50      	ldr	r3, [pc, #320]	@ (8001240 <MX_GPIO_Init+0x184>)
 8001100:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001102:	f003 0304 	and.w	r3, r3, #4
 8001106:	60fb      	str	r3, [r7, #12]
 8001108:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800110a:	2300      	movs	r3, #0
 800110c:	60bb      	str	r3, [r7, #8]
 800110e:	4b4c      	ldr	r3, [pc, #304]	@ (8001240 <MX_GPIO_Init+0x184>)
 8001110:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001112:	4a4b      	ldr	r2, [pc, #300]	@ (8001240 <MX_GPIO_Init+0x184>)
 8001114:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001118:	6313      	str	r3, [r2, #48]	@ 0x30
 800111a:	4b49      	ldr	r3, [pc, #292]	@ (8001240 <MX_GPIO_Init+0x184>)
 800111c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800111e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001122:	60bb      	str	r3, [r7, #8]
 8001124:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001126:	2300      	movs	r3, #0
 8001128:	607b      	str	r3, [r7, #4]
 800112a:	4b45      	ldr	r3, [pc, #276]	@ (8001240 <MX_GPIO_Init+0x184>)
 800112c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800112e:	4a44      	ldr	r2, [pc, #272]	@ (8001240 <MX_GPIO_Init+0x184>)
 8001130:	f043 0302 	orr.w	r3, r3, #2
 8001134:	6313      	str	r3, [r2, #48]	@ 0x30
 8001136:	4b42      	ldr	r3, [pc, #264]	@ (8001240 <MX_GPIO_Init+0x184>)
 8001138:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800113a:	f003 0302 	and.w	r3, r3, #2
 800113e:	607b      	str	r3, [r7, #4]
 8001140:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001142:	2300      	movs	r3, #0
 8001144:	603b      	str	r3, [r7, #0]
 8001146:	4b3e      	ldr	r3, [pc, #248]	@ (8001240 <MX_GPIO_Init+0x184>)
 8001148:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800114a:	4a3d      	ldr	r2, [pc, #244]	@ (8001240 <MX_GPIO_Init+0x184>)
 800114c:	f043 0308 	orr.w	r3, r3, #8
 8001150:	6313      	str	r3, [r2, #48]	@ 0x30
 8001152:	4b3b      	ldr	r3, [pc, #236]	@ (8001240 <MX_GPIO_Init+0x184>)
 8001154:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001156:	f003 0308 	and.w	r3, r3, #8
 800115a:	603b      	str	r3, [r7, #0]
 800115c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_5, GPIO_PIN_RESET);
 800115e:	2200      	movs	r2, #0
 8001160:	2121      	movs	r1, #33	@ 0x21
 8001162:	4838      	ldr	r0, [pc, #224]	@ (8001244 <MX_GPIO_Init+0x188>)
 8001164:	f000 fefa 	bl	8001f5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 8001168:	2200      	movs	r2, #0
 800116a:	f44f 41e0 	mov.w	r1, #28672	@ 0x7000
 800116e:	4836      	ldr	r0, [pc, #216]	@ (8001248 <MX_GPIO_Init+0x18c>)
 8001170:	f000 fef4 	bl	8001f5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 8001174:	2200      	movs	r2, #0
 8001176:	2140      	movs	r1, #64	@ 0x40
 8001178:	4834      	ldr	r0, [pc, #208]	@ (800124c <MX_GPIO_Init+0x190>)
 800117a:	f000 feef 	bl	8001f5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800117e:	2308      	movs	r3, #8
 8001180:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001182:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8001186:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001188:	2300      	movs	r3, #0
 800118a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800118c:	f107 0314 	add.w	r3, r7, #20
 8001190:	4619      	mov	r1, r3
 8001192:	482f      	ldr	r0, [pc, #188]	@ (8001250 <MX_GPIO_Init+0x194>)
 8001194:	f000 fd2e 	bl	8001bf4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001198:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800119c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800119e:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 80011a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a4:	2300      	movs	r3, #0
 80011a6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011a8:	f107 0314 	add.w	r3, r7, #20
 80011ac:	4619      	mov	r1, r3
 80011ae:	4827      	ldr	r0, [pc, #156]	@ (800124c <MX_GPIO_Init+0x190>)
 80011b0:	f000 fd20 	bl	8001bf4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_5;
 80011b4:	2321      	movs	r3, #33	@ 0x21
 80011b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011b8:	2301      	movs	r3, #1
 80011ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011bc:	2300      	movs	r3, #0
 80011be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011c0:	2300      	movs	r3, #0
 80011c2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011c4:	f107 0314 	add.w	r3, r7, #20
 80011c8:	4619      	mov	r1, r3
 80011ca:	481e      	ldr	r0, [pc, #120]	@ (8001244 <MX_GPIO_Init+0x188>)
 80011cc:	f000 fd12 	bl	8001bf4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD10 PD4 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_4;
 80011d0:	f44f 6382 	mov.w	r3, #1040	@ 0x410
 80011d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80011d6:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 80011da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011dc:	2300      	movs	r3, #0
 80011de:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011e0:	f107 0314 	add.w	r3, r7, #20
 80011e4:	4619      	mov	r1, r3
 80011e6:	4818      	ldr	r0, [pc, #96]	@ (8001248 <MX_GPIO_Init+0x18c>)
 80011e8:	f000 fd04 	bl	8001bf4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 80011ec:	f44f 43e0 	mov.w	r3, #28672	@ 0x7000
 80011f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011f2:	2301      	movs	r3, #1
 80011f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f6:	2300      	movs	r3, #0
 80011f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011fa:	2300      	movs	r3, #0
 80011fc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011fe:	f107 0314 	add.w	r3, r7, #20
 8001202:	4619      	mov	r1, r3
 8001204:	4810      	ldr	r0, [pc, #64]	@ (8001248 <MX_GPIO_Init+0x18c>)
 8001206:	f000 fcf5 	bl	8001bf4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800120a:	2340      	movs	r3, #64	@ 0x40
 800120c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800120e:	2301      	movs	r3, #1
 8001210:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001212:	2300      	movs	r3, #0
 8001214:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001216:	2300      	movs	r3, #0
 8001218:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800121a:	f107 0314 	add.w	r3, r7, #20
 800121e:	4619      	mov	r1, r3
 8001220:	480a      	ldr	r0, [pc, #40]	@ (800124c <MX_GPIO_Init+0x190>)
 8001222:	f000 fce7 	bl	8001bf4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8001226:	2200      	movs	r2, #0
 8001228:	2100      	movs	r1, #0
 800122a:	2009      	movs	r0, #9
 800122c:	f000 fc19 	bl	8001a62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001230:	2009      	movs	r0, #9
 8001232:	f000 fc32 	bl	8001a9a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001236:	bf00      	nop
 8001238:	3728      	adds	r7, #40	@ 0x28
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	40023800 	.word	0x40023800
 8001244:	40020400 	.word	0x40020400
 8001248:	40020c00 	.word	0x40020c00
 800124c:	40020800 	.word	0x40020800
 8001250:	40021000 	.word	0x40021000

08001254 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b082      	sub	sp, #8
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  if(huart -> Instance == USART3) {
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4a07      	ldr	r2, [pc, #28]	@ (8001280 <HAL_UART_RxCpltCallback+0x2c>)
 8001262:	4293      	cmp	r3, r2
 8001264:	d107      	bne.n	8001276 <HAL_UART_RxCpltCallback+0x22>
	  HAL_UART_Receive_IT(&huart3, &uartRxfd.uart3_rx_data, sizeof(uartRxfd.uart3_rx_data));
 8001266:	2201      	movs	r2, #1
 8001268:	4906      	ldr	r1, [pc, #24]	@ (8001284 <HAL_UART_RxCpltCallback+0x30>)
 800126a:	4807      	ldr	r0, [pc, #28]	@ (8001288 <HAL_UART_RxCpltCallback+0x34>)
 800126c:	f001 febe 	bl	8002fec <HAL_UART_Receive_IT>
	  uartRxfd.uart3_rx_flag = 1;
 8001270:	4b04      	ldr	r3, [pc, #16]	@ (8001284 <HAL_UART_RxCpltCallback+0x30>)
 8001272:	2201      	movs	r2, #1
 8001274:	705a      	strb	r2, [r3, #1]
  }
}
 8001276:	bf00      	nop
 8001278:	3708      	adds	r7, #8
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	40004800 	.word	0x40004800
 8001284:	200000d0 	.word	0x200000d0
 8001288:	20000084 	.word	0x20000084

0800128c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b082      	sub	sp, #8
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM6) {
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4a06      	ldr	r2, [pc, #24]	@ (80012b4 <HAL_TIM_PeriodElapsedCallback+0x28>)
 800129a:	4293      	cmp	r3, r2
 800129c:	d106      	bne.n	80012ac <HAL_TIM_PeriodElapsedCallback+0x20>
		swState.time.millisecond++;
 800129e:	4b06      	ldr	r3, [pc, #24]	@ (80012b8 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80012a0:	691b      	ldr	r3, [r3, #16]
 80012a2:	3301      	adds	r3, #1
 80012a4:	4a04      	ldr	r2, [pc, #16]	@ (80012b8 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80012a6:	6113      	str	r3, [r2, #16]
		saveTime();
 80012a8:	f000 f9d2 	bl	8001650 <saveTime>

	}
}
 80012ac:	bf00      	nop
 80012ae:	3708      	adds	r7, #8
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	40001000 	.word	0x40001000
 80012b8:	20000000 	.word	0x20000000

080012bc <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b082      	sub	sp, #8
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	4603      	mov	r3, r0
 80012c4:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_3 && HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_3)) {
 80012c6:	88fb      	ldrh	r3, [r7, #6]
 80012c8:	2b08      	cmp	r3, #8
 80012ca:	d10b      	bne.n	80012e4 <HAL_GPIO_EXTI_Callback+0x28>
 80012cc:	2108      	movs	r1, #8
 80012ce:	482d      	ldr	r0, [pc, #180]	@ (8001384 <HAL_GPIO_EXTI_Callback+0xc8>)
 80012d0:	f000 fe2c 	bl	8001f2c <HAL_GPIO_ReadPin>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d004      	beq.n	80012e4 <HAL_GPIO_EXTI_Callback+0x28>
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 80012da:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80012de:	482a      	ldr	r0, [pc, #168]	@ (8001388 <HAL_GPIO_EXTI_Callback+0xcc>)
 80012e0:	f000 fe55 	bl	8001f8e <HAL_GPIO_TogglePin>
	}

	if(GPIO_Pin == GPIO_PIN_15 && HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_15)) {
 80012e4:	88fb      	ldrh	r3, [r7, #6]
 80012e6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80012ea:	d116      	bne.n	800131a <HAL_GPIO_EXTI_Callback+0x5e>
 80012ec:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80012f0:	4826      	ldr	r0, [pc, #152]	@ (800138c <HAL_GPIO_EXTI_Callback+0xd0>)
 80012f2:	f000 fe1b 	bl	8001f2c <HAL_GPIO_ReadPin>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d00e      	beq.n	800131a <HAL_GPIO_EXTI_Callback+0x5e>
		PC15_State = !PC15_State;
 80012fc:	4b24      	ldr	r3, [pc, #144]	@ (8001390 <HAL_GPIO_EXTI_Callback+0xd4>)
 80012fe:	781b      	ldrb	r3, [r3, #0]
 8001300:	2b00      	cmp	r3, #0
 8001302:	bf0c      	ite	eq
 8001304:	2301      	moveq	r3, #1
 8001306:	2300      	movne	r3, #0
 8001308:	b2db      	uxtb	r3, r3
 800130a:	461a      	mov	r2, r3
 800130c:	4b20      	ldr	r3, [pc, #128]	@ (8001390 <HAL_GPIO_EXTI_Callback+0xd4>)
 800130e:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 8001310:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001314:	481c      	ldr	r0, [pc, #112]	@ (8001388 <HAL_GPIO_EXTI_Callback+0xcc>)
 8001316:	f000 fe3a 	bl	8001f8e <HAL_GPIO_TogglePin>
	}
	if(GPIO_Pin == GPIO_PIN_4 && HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_4)) {
 800131a:	88fb      	ldrh	r3, [r7, #6]
 800131c:	2b10      	cmp	r3, #16
 800131e:	d117      	bne.n	8001350 <HAL_GPIO_EXTI_Callback+0x94>
 8001320:	2110      	movs	r1, #16
 8001322:	4819      	ldr	r0, [pc, #100]	@ (8001388 <HAL_GPIO_EXTI_Callback+0xcc>)
 8001324:	f000 fe02 	bl	8001f2c <HAL_GPIO_ReadPin>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d010      	beq.n	8001350 <HAL_GPIO_EXTI_Callback+0x94>
		PD4_State = 1;
 800132e:	4b19      	ldr	r3, [pc, #100]	@ (8001394 <HAL_GPIO_EXTI_Callback+0xd8>)
 8001330:	2201      	movs	r2, #1
 8001332:	701a      	strb	r2, [r3, #0]
		if(swState.state == PAUSE || swState.state == STOP) {
 8001334:	4b18      	ldr	r3, [pc, #96]	@ (8001398 <HAL_GPIO_EXTI_Callback+0xdc>)
 8001336:	781b      	ldrb	r3, [r3, #0]
 8001338:	2b01      	cmp	r3, #1
 800133a:	d003      	beq.n	8001344 <HAL_GPIO_EXTI_Callback+0x88>
 800133c:	4b16      	ldr	r3, [pc, #88]	@ (8001398 <HAL_GPIO_EXTI_Callback+0xdc>)
 800133e:	781b      	ldrb	r3, [r3, #0]
 8001340:	2b02      	cmp	r3, #2
 8001342:	d109      	bne.n	8001358 <HAL_GPIO_EXTI_Callback+0x9c>
			HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 8001344:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001348:	480f      	ldr	r0, [pc, #60]	@ (8001388 <HAL_GPIO_EXTI_Callback+0xcc>)
 800134a:	f000 fe20 	bl	8001f8e <HAL_GPIO_TogglePin>
		if(swState.state == PAUSE || swState.state == STOP) {
 800134e:	e003      	b.n	8001358 <HAL_GPIO_EXTI_Callback+0x9c>
		}
	} else {
		PD4_State = 0;
 8001350:	4b10      	ldr	r3, [pc, #64]	@ (8001394 <HAL_GPIO_EXTI_Callback+0xd8>)
 8001352:	2200      	movs	r2, #0
 8001354:	701a      	strb	r2, [r3, #0]
 8001356:	e000      	b.n	800135a <HAL_GPIO_EXTI_Callback+0x9e>
		if(swState.state == PAUSE || swState.state == STOP) {
 8001358:	bf00      	nop
	}
	if(GPIO_Pin == GPIO_PIN_10 && HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_10)) {
 800135a:	88fb      	ldrh	r3, [r7, #6]
 800135c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001360:	d10b      	bne.n	800137a <HAL_GPIO_EXTI_Callback+0xbe>
 8001362:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001366:	4808      	ldr	r0, [pc, #32]	@ (8001388 <HAL_GPIO_EXTI_Callback+0xcc>)
 8001368:	f000 fde0 	bl	8001f2c <HAL_GPIO_ReadPin>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d003      	beq.n	800137a <HAL_GPIO_EXTI_Callback+0xbe>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_6);
 8001372:	2140      	movs	r1, #64	@ 0x40
 8001374:	4805      	ldr	r0, [pc, #20]	@ (800138c <HAL_GPIO_EXTI_Callback+0xd0>)
 8001376:	f000 fe0a 	bl	8001f8e <HAL_GPIO_TogglePin>
	}

}
 800137a:	bf00      	nop
 800137c:	3708      	adds	r7, #8
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	40021000 	.word	0x40021000
 8001388:	40020c00 	.word	0x40020c00
 800138c:	40020800 	.word	0x40020800
 8001390:	200000cc 	.word	0x200000cc
 8001394:	200000cd 	.word	0x200000cd
 8001398:	20000000 	.word	0x20000000

0800139c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013a0:	b672      	cpsid	i
}
 80013a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013a4:	bf00      	nop
 80013a6:	e7fd      	b.n	80013a4 <Error_Handler+0x8>

080013a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013a8:	b480      	push	{r7}
 80013aa:	b083      	sub	sp, #12
 80013ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013ae:	2300      	movs	r3, #0
 80013b0:	607b      	str	r3, [r7, #4]
 80013b2:	4b10      	ldr	r3, [pc, #64]	@ (80013f4 <HAL_MspInit+0x4c>)
 80013b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013b6:	4a0f      	ldr	r2, [pc, #60]	@ (80013f4 <HAL_MspInit+0x4c>)
 80013b8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80013bc:	6453      	str	r3, [r2, #68]	@ 0x44
 80013be:	4b0d      	ldr	r3, [pc, #52]	@ (80013f4 <HAL_MspInit+0x4c>)
 80013c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013c2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80013c6:	607b      	str	r3, [r7, #4]
 80013c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013ca:	2300      	movs	r3, #0
 80013cc:	603b      	str	r3, [r7, #0]
 80013ce:	4b09      	ldr	r3, [pc, #36]	@ (80013f4 <HAL_MspInit+0x4c>)
 80013d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013d2:	4a08      	ldr	r2, [pc, #32]	@ (80013f4 <HAL_MspInit+0x4c>)
 80013d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80013da:	4b06      	ldr	r3, [pc, #24]	@ (80013f4 <HAL_MspInit+0x4c>)
 80013dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013e2:	603b      	str	r3, [r7, #0]
 80013e4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013e6:	bf00      	nop
 80013e8:	370c      	adds	r7, #12
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr
 80013f2:	bf00      	nop
 80013f4:	40023800 	.word	0x40023800

080013f8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80013f8:	b480      	push	{r7}
 80013fa:	b085      	sub	sp, #20
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4a0b      	ldr	r2, [pc, #44]	@ (8001434 <HAL_TIM_Base_MspInit+0x3c>)
 8001406:	4293      	cmp	r3, r2
 8001408:	d10d      	bne.n	8001426 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800140a:	2300      	movs	r3, #0
 800140c:	60fb      	str	r3, [r7, #12]
 800140e:	4b0a      	ldr	r3, [pc, #40]	@ (8001438 <HAL_TIM_Base_MspInit+0x40>)
 8001410:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001412:	4a09      	ldr	r2, [pc, #36]	@ (8001438 <HAL_TIM_Base_MspInit+0x40>)
 8001414:	f043 0310 	orr.w	r3, r3, #16
 8001418:	6413      	str	r3, [r2, #64]	@ 0x40
 800141a:	4b07      	ldr	r3, [pc, #28]	@ (8001438 <HAL_TIM_Base_MspInit+0x40>)
 800141c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800141e:	f003 0310 	and.w	r3, r3, #16
 8001422:	60fb      	str	r3, [r7, #12]
 8001424:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8001426:	bf00      	nop
 8001428:	3714      	adds	r7, #20
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr
 8001432:	bf00      	nop
 8001434:	40001000 	.word	0x40001000
 8001438:	40023800 	.word	0x40023800

0800143c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b08a      	sub	sp, #40	@ 0x28
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001444:	f107 0314 	add.w	r3, r7, #20
 8001448:	2200      	movs	r2, #0
 800144a:	601a      	str	r2, [r3, #0]
 800144c:	605a      	str	r2, [r3, #4]
 800144e:	609a      	str	r2, [r3, #8]
 8001450:	60da      	str	r2, [r3, #12]
 8001452:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4a19      	ldr	r2, [pc, #100]	@ (80014c0 <HAL_UART_MspInit+0x84>)
 800145a:	4293      	cmp	r3, r2
 800145c:	d12c      	bne.n	80014b8 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800145e:	2300      	movs	r3, #0
 8001460:	613b      	str	r3, [r7, #16]
 8001462:	4b18      	ldr	r3, [pc, #96]	@ (80014c4 <HAL_UART_MspInit+0x88>)
 8001464:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001466:	4a17      	ldr	r2, [pc, #92]	@ (80014c4 <HAL_UART_MspInit+0x88>)
 8001468:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800146c:	6413      	str	r3, [r2, #64]	@ 0x40
 800146e:	4b15      	ldr	r3, [pc, #84]	@ (80014c4 <HAL_UART_MspInit+0x88>)
 8001470:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001472:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001476:	613b      	str	r3, [r7, #16]
 8001478:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800147a:	2300      	movs	r3, #0
 800147c:	60fb      	str	r3, [r7, #12]
 800147e:	4b11      	ldr	r3, [pc, #68]	@ (80014c4 <HAL_UART_MspInit+0x88>)
 8001480:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001482:	4a10      	ldr	r2, [pc, #64]	@ (80014c4 <HAL_UART_MspInit+0x88>)
 8001484:	f043 0308 	orr.w	r3, r3, #8
 8001488:	6313      	str	r3, [r2, #48]	@ 0x30
 800148a:	4b0e      	ldr	r3, [pc, #56]	@ (80014c4 <HAL_UART_MspInit+0x88>)
 800148c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800148e:	f003 0308 	and.w	r3, r3, #8
 8001492:	60fb      	str	r3, [r7, #12]
 8001494:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001496:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800149a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800149c:	2302      	movs	r3, #2
 800149e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a0:	2300      	movs	r3, #0
 80014a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014a4:	2303      	movs	r3, #3
 80014a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80014a8:	2307      	movs	r3, #7
 80014aa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014ac:	f107 0314 	add.w	r3, r7, #20
 80014b0:	4619      	mov	r1, r3
 80014b2:	4805      	ldr	r0, [pc, #20]	@ (80014c8 <HAL_UART_MspInit+0x8c>)
 80014b4:	f000 fb9e 	bl	8001bf4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80014b8:	bf00      	nop
 80014ba:	3728      	adds	r7, #40	@ 0x28
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	40004800 	.word	0x40004800
 80014c4:	40023800 	.word	0x40023800
 80014c8:	40020c00 	.word	0x40020c00

080014cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80014d0:	bf00      	nop
 80014d2:	e7fd      	b.n	80014d0 <NMI_Handler+0x4>

080014d4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014d4:	b480      	push	{r7}
 80014d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014d8:	bf00      	nop
 80014da:	e7fd      	b.n	80014d8 <HardFault_Handler+0x4>

080014dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014dc:	b480      	push	{r7}
 80014de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014e0:	bf00      	nop
 80014e2:	e7fd      	b.n	80014e0 <MemManage_Handler+0x4>

080014e4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014e8:	bf00      	nop
 80014ea:	e7fd      	b.n	80014e8 <BusFault_Handler+0x4>

080014ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014ec:	b480      	push	{r7}
 80014ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014f0:	bf00      	nop
 80014f2:	e7fd      	b.n	80014f0 <UsageFault_Handler+0x4>

080014f4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014f8:	bf00      	nop
 80014fa:	46bd      	mov	sp, r7
 80014fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001500:	4770      	bx	lr

08001502 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001502:	b480      	push	{r7}
 8001504:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001506:	bf00      	nop
 8001508:	46bd      	mov	sp, r7
 800150a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150e:	4770      	bx	lr

08001510 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001510:	b480      	push	{r7}
 8001512:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001514:	bf00      	nop
 8001516:	46bd      	mov	sp, r7
 8001518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151c:	4770      	bx	lr

0800151e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800151e:	b580      	push	{r7, lr}
 8001520:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001522:	f000 f9a3 	bl	800186c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001526:	bf00      	nop
 8001528:	bd80      	pop	{r7, pc}

0800152a <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 800152a:	b580      	push	{r7, lr}
 800152c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 800152e:	2008      	movs	r0, #8
 8001530:	f000 fd48 	bl	8001fc4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001534:	bf00      	nop
 8001536:	bd80      	pop	{r7, pc}

08001538 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 800153c:	2010      	movs	r0, #16
 800153e:	f000 fd41 	bl	8001fc4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001542:	bf00      	nop
 8001544:	bd80      	pop	{r7, pc}
	...

08001548 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800154c:	4802      	ldr	r0, [pc, #8]	@ (8001558 <USART3_IRQHandler+0x10>)
 800154e:	f001 fd73 	bl	8003038 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001552:	bf00      	nop
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	20000084 	.word	0x20000084

0800155c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8001560:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8001564:	f000 fd2e 	bl	8001fc4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8001568:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800156c:	f000 fd2a 	bl	8001fc4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001570:	bf00      	nop
 8001572:	bd80      	pop	{r7, pc}

08001574 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001578:	4802      	ldr	r0, [pc, #8]	@ (8001584 <TIM6_DAC_IRQHandler+0x10>)
 800157a:	f001 fa93 	bl	8002aa4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800157e:	bf00      	nop
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	2000003c 	.word	0x2000003c

08001588 <segUpCount>:
uint8_t PC15_State;
uint8_t PD4_State;



void segUpCount() {
 8001588:	b580      	push	{r7, lr}
 800158a:	af00      	add	r7, sp, #0
	if(swState.time.millisecond < 500) {
 800158c:	4b1b      	ldr	r3, [pc, #108]	@ (80015fc <segUpCount+0x74>)
 800158e:	691b      	ldr	r3, [r3, #16]
 8001590:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001594:	da11      	bge.n	80015ba <segUpCount+0x32>
		_7SEG_SetNumber(DGT1, swState.time.second % 10, 1);
 8001596:	4b19      	ldr	r3, [pc, #100]	@ (80015fc <segUpCount+0x74>)
 8001598:	68da      	ldr	r2, [r3, #12]
 800159a:	4b19      	ldr	r3, [pc, #100]	@ (8001600 <segUpCount+0x78>)
 800159c:	fb83 1302 	smull	r1, r3, r3, r2
 80015a0:	1099      	asrs	r1, r3, #2
 80015a2:	17d3      	asrs	r3, r2, #31
 80015a4:	1ac9      	subs	r1, r1, r3
 80015a6:	460b      	mov	r3, r1
 80015a8:	009b      	lsls	r3, r3, #2
 80015aa:	440b      	add	r3, r1
 80015ac:	005b      	lsls	r3, r3, #1
 80015ae:	1ad1      	subs	r1, r2, r3
 80015b0:	2201      	movs	r2, #1
 80015b2:	2000      	movs	r0, #0
 80015b4:	f7ff f866 	bl	8000684 <_7SEG_SetNumber>
 80015b8:	e010      	b.n	80015dc <segUpCount+0x54>
	} else {
		_7SEG_SetNumber(DGT1, swState.time.second % 10, 0);
 80015ba:	4b10      	ldr	r3, [pc, #64]	@ (80015fc <segUpCount+0x74>)
 80015bc:	68da      	ldr	r2, [r3, #12]
 80015be:	4b10      	ldr	r3, [pc, #64]	@ (8001600 <segUpCount+0x78>)
 80015c0:	fb83 1302 	smull	r1, r3, r3, r2
 80015c4:	1099      	asrs	r1, r3, #2
 80015c6:	17d3      	asrs	r3, r2, #31
 80015c8:	1ac9      	subs	r1, r1, r3
 80015ca:	460b      	mov	r3, r1
 80015cc:	009b      	lsls	r3, r3, #2
 80015ce:	440b      	add	r3, r1
 80015d0:	005b      	lsls	r3, r3, #1
 80015d2:	1ad1      	subs	r1, r2, r3
 80015d4:	2200      	movs	r2, #0
 80015d6:	2000      	movs	r0, #0
 80015d8:	f7ff f854 	bl	8000684 <_7SEG_SetNumber>
	}
	_7SEG_SetNumber(DGT2, swState.time.millisecond / 100, 0);
 80015dc:	4b07      	ldr	r3, [pc, #28]	@ (80015fc <segUpCount+0x74>)
 80015de:	691b      	ldr	r3, [r3, #16]
 80015e0:	4a08      	ldr	r2, [pc, #32]	@ (8001604 <segUpCount+0x7c>)
 80015e2:	fb82 1203 	smull	r1, r2, r2, r3
 80015e6:	1152      	asrs	r2, r2, #5
 80015e8:	17db      	asrs	r3, r3, #31
 80015ea:	1ad3      	subs	r3, r2, r3
 80015ec:	2200      	movs	r2, #0
 80015ee:	4619      	mov	r1, r3
 80015f0:	2001      	movs	r0, #1
 80015f2:	f7ff f847 	bl	8000684 <_7SEG_SetNumber>

}
 80015f6:	bf00      	nop
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	20000000 	.word	0x20000000
 8001600:	66666667 	.word	0x66666667
 8001604:	51eb851f 	.word	0x51eb851f

08001608 <segReset>:

void segReset() {
 8001608:	b580      	push	{r7, lr}
 800160a:	af00      	add	r7, sp, #0
	_7SEG_SetNumber(DGT1, 0, 1);
 800160c:	2201      	movs	r2, #1
 800160e:	2100      	movs	r1, #0
 8001610:	2000      	movs	r0, #0
 8001612:	f7ff f837 	bl	8000684 <_7SEG_SetNumber>
	_7SEG_SetNumber(DGT2, 0, 0);
 8001616:	2200      	movs	r2, #0
 8001618:	2100      	movs	r1, #0
 800161a:	2001      	movs	r0, #1
 800161c:	f7ff f832 	bl	8000684 <_7SEG_SetNumber>
}
 8001620:	bf00      	nop
 8001622:	bd80      	pop	{r7, pc}

08001624 <timerReset>:

void timerReset() {
 8001624:	b480      	push	{r7}
 8001626:	af00      	add	r7, sp, #0
	swState.time.hour = 0;
 8001628:	4b08      	ldr	r3, [pc, #32]	@ (800164c <timerReset+0x28>)
 800162a:	2200      	movs	r2, #0
 800162c:	605a      	str	r2, [r3, #4]
	swState.time.minute = 0;
 800162e:	4b07      	ldr	r3, [pc, #28]	@ (800164c <timerReset+0x28>)
 8001630:	2200      	movs	r2, #0
 8001632:	609a      	str	r2, [r3, #8]
	swState.time.second = 0;
 8001634:	4b05      	ldr	r3, [pc, #20]	@ (800164c <timerReset+0x28>)
 8001636:	2200      	movs	r2, #0
 8001638:	60da      	str	r2, [r3, #12]
	swState.time.millisecond = 0;
 800163a:	4b04      	ldr	r3, [pc, #16]	@ (800164c <timerReset+0x28>)
 800163c:	2200      	movs	r2, #0
 800163e:	611a      	str	r2, [r3, #16]
}
 8001640:	bf00      	nop
 8001642:	46bd      	mov	sp, r7
 8001644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001648:	4770      	bx	lr
 800164a:	bf00      	nop
 800164c:	20000000 	.word	0x20000000

08001650 <saveTime>:

void saveTime() {
 8001650:	b480      	push	{r7}
 8001652:	af00      	add	r7, sp, #0

	if(swState.time.millisecond % 1000 == 0) {
 8001654:	4b1d      	ldr	r3, [pc, #116]	@ (80016cc <saveTime+0x7c>)
 8001656:	691a      	ldr	r2, [r3, #16]
 8001658:	4b1d      	ldr	r3, [pc, #116]	@ (80016d0 <saveTime+0x80>)
 800165a:	fb83 1302 	smull	r1, r3, r3, r2
 800165e:	1199      	asrs	r1, r3, #6
 8001660:	17d3      	asrs	r3, r2, #31
 8001662:	1acb      	subs	r3, r1, r3
 8001664:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001668:	fb01 f303 	mul.w	r3, r1, r3
 800166c:	1ad3      	subs	r3, r2, r3
 800166e:	2b00      	cmp	r3, #0
 8001670:	d107      	bne.n	8001682 <saveTime+0x32>
		swState.time.millisecond = 0;
 8001672:	4b16      	ldr	r3, [pc, #88]	@ (80016cc <saveTime+0x7c>)
 8001674:	2200      	movs	r2, #0
 8001676:	611a      	str	r2, [r3, #16]
		swState.time.second++;
 8001678:	4b14      	ldr	r3, [pc, #80]	@ (80016cc <saveTime+0x7c>)
 800167a:	68db      	ldr	r3, [r3, #12]
 800167c:	3301      	adds	r3, #1
 800167e:	4a13      	ldr	r2, [pc, #76]	@ (80016cc <saveTime+0x7c>)
 8001680:	60d3      	str	r3, [r2, #12]
	}
	if(swState.time.second == 60) {
 8001682:	4b12      	ldr	r3, [pc, #72]	@ (80016cc <saveTime+0x7c>)
 8001684:	68db      	ldr	r3, [r3, #12]
 8001686:	2b3c      	cmp	r3, #60	@ 0x3c
 8001688:	d107      	bne.n	800169a <saveTime+0x4a>
		swState.time.second = 0;
 800168a:	4b10      	ldr	r3, [pc, #64]	@ (80016cc <saveTime+0x7c>)
 800168c:	2200      	movs	r2, #0
 800168e:	60da      	str	r2, [r3, #12]
		swState.time.minute++;
 8001690:	4b0e      	ldr	r3, [pc, #56]	@ (80016cc <saveTime+0x7c>)
 8001692:	689b      	ldr	r3, [r3, #8]
 8001694:	3301      	adds	r3, #1
 8001696:	4a0d      	ldr	r2, [pc, #52]	@ (80016cc <saveTime+0x7c>)
 8001698:	6093      	str	r3, [r2, #8]
	}
	if(swState.time.minute == 60) {
 800169a:	4b0c      	ldr	r3, [pc, #48]	@ (80016cc <saveTime+0x7c>)
 800169c:	689b      	ldr	r3, [r3, #8]
 800169e:	2b3c      	cmp	r3, #60	@ 0x3c
 80016a0:	d107      	bne.n	80016b2 <saveTime+0x62>
		swState.time.minute = 0;
 80016a2:	4b0a      	ldr	r3, [pc, #40]	@ (80016cc <saveTime+0x7c>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	609a      	str	r2, [r3, #8]
		swState.time.hour++;
 80016a8:	4b08      	ldr	r3, [pc, #32]	@ (80016cc <saveTime+0x7c>)
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	3301      	adds	r3, #1
 80016ae:	4a07      	ldr	r2, [pc, #28]	@ (80016cc <saveTime+0x7c>)
 80016b0:	6053      	str	r3, [r2, #4]
	}
	if(swState.time.hour == 24) {
 80016b2:	4b06      	ldr	r3, [pc, #24]	@ (80016cc <saveTime+0x7c>)
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	2b18      	cmp	r3, #24
 80016b8:	d102      	bne.n	80016c0 <saveTime+0x70>
		swState.time.hour = 0;
 80016ba:	4b04      	ldr	r3, [pc, #16]	@ (80016cc <saveTime+0x7c>)
 80016bc:	2200      	movs	r2, #0
 80016be:	605a      	str	r2, [r3, #4]
	}
}
 80016c0:	bf00      	nop
 80016c2:	46bd      	mov	sp, r7
 80016c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c8:	4770      	bx	lr
 80016ca:	bf00      	nop
 80016cc:	20000000 	.word	0x20000000
 80016d0:	10624dd3 	.word	0x10624dd3

080016d4 <sw2StopWatchControll>:

void sw2StopWatchControll() {
 80016d4:	b580      	push	{r7, lr}
 80016d6:	af00      	add	r7, sp, #0
	// SW2 PC15, PD13
	if (PC15_State == TRUE) {
 80016d8:	4b0e      	ldr	r3, [pc, #56]	@ (8001714 <sw2StopWatchControll+0x40>)
 80016da:	781b      	ldrb	r3, [r3, #0]
 80016dc:	2b01      	cmp	r3, #1
 80016de:	d10b      	bne.n	80016f8 <sw2StopWatchControll+0x24>
		if(swState.state == STOP) {
 80016e0:	4b0d      	ldr	r3, [pc, #52]	@ (8001718 <sw2StopWatchControll+0x44>)
 80016e2:	781b      	ldrb	r3, [r3, #0]
 80016e4:	2b02      	cmp	r3, #2
 80016e6:	d101      	bne.n	80016ec <sw2StopWatchControll+0x18>
			timerReset();
 80016e8:	f7ff ff9c 	bl	8001624 <timerReset>
		}
		swState.state = RUN;
 80016ec:	4b0a      	ldr	r3, [pc, #40]	@ (8001718 <sw2StopWatchControll+0x44>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	701a      	strb	r2, [r3, #0]
		segUpCount();
 80016f2:	f7ff ff49 	bl	8001588 <segUpCount>
	} else if(PC15_State == FALSE && swState.state == RUN) {
		swState.state = PAUSE;
	}
}
 80016f6:	e00a      	b.n	800170e <sw2StopWatchControll+0x3a>
	} else if(PC15_State == FALSE && swState.state == RUN) {
 80016f8:	4b06      	ldr	r3, [pc, #24]	@ (8001714 <sw2StopWatchControll+0x40>)
 80016fa:	781b      	ldrb	r3, [r3, #0]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d106      	bne.n	800170e <sw2StopWatchControll+0x3a>
 8001700:	4b05      	ldr	r3, [pc, #20]	@ (8001718 <sw2StopWatchControll+0x44>)
 8001702:	781b      	ldrb	r3, [r3, #0]
 8001704:	2b00      	cmp	r3, #0
 8001706:	d102      	bne.n	800170e <sw2StopWatchControll+0x3a>
		swState.state = PAUSE;
 8001708:	4b03      	ldr	r3, [pc, #12]	@ (8001718 <sw2StopWatchControll+0x44>)
 800170a:	2201      	movs	r2, #1
 800170c:	701a      	strb	r2, [r3, #0]
}
 800170e:	bf00      	nop
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	200000cc 	.word	0x200000cc
 8001718:	20000000 	.word	0x20000000

0800171c <sw3StopWatchReset>:

void sw3StopWatchReset() {
 800171c:	b580      	push	{r7, lr}
 800171e:	af00      	add	r7, sp, #0
	// SW3 PD4, PD14
	if(PD4_State) {
 8001720:	4b09      	ldr	r3, [pc, #36]	@ (8001748 <sw3StopWatchReset+0x2c>)
 8001722:	781b      	ldrb	r3, [r3, #0]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d00c      	beq.n	8001742 <sw3StopWatchReset+0x26>
		if(swState.state == PAUSE || swState.state == STOP) {
 8001728:	4b08      	ldr	r3, [pc, #32]	@ (800174c <sw3StopWatchReset+0x30>)
 800172a:	781b      	ldrb	r3, [r3, #0]
 800172c:	2b01      	cmp	r3, #1
 800172e:	d003      	beq.n	8001738 <sw3StopWatchReset+0x1c>
 8001730:	4b06      	ldr	r3, [pc, #24]	@ (800174c <sw3StopWatchReset+0x30>)
 8001732:	781b      	ldrb	r3, [r3, #0]
 8001734:	2b02      	cmp	r3, #2
 8001736:	d104      	bne.n	8001742 <sw3StopWatchReset+0x26>
			swState.state = STOP;
 8001738:	4b04      	ldr	r3, [pc, #16]	@ (800174c <sw3StopWatchReset+0x30>)
 800173a:	2202      	movs	r2, #2
 800173c:	701a      	strb	r2, [r3, #0]
			segReset();
 800173e:	f7ff ff63 	bl	8001608 <segReset>
		}
	}
}
 8001742:	bf00      	nop
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	200000cd 	.word	0x200000cd
 800174c:	20000000 	.word	0x20000000

08001750 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001750:	b480      	push	{r7}
 8001752:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001754:	4b06      	ldr	r3, [pc, #24]	@ (8001770 <SystemInit+0x20>)
 8001756:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800175a:	4a05      	ldr	r2, [pc, #20]	@ (8001770 <SystemInit+0x20>)
 800175c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001760:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001764:	bf00      	nop
 8001766:	46bd      	mov	sp, r7
 8001768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176c:	4770      	bx	lr
 800176e:	bf00      	nop
 8001770:	e000ed00 	.word	0xe000ed00

08001774 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001774:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80017ac <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001778:	f7ff ffea 	bl	8001750 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800177c:	480c      	ldr	r0, [pc, #48]	@ (80017b0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800177e:	490d      	ldr	r1, [pc, #52]	@ (80017b4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001780:	4a0d      	ldr	r2, [pc, #52]	@ (80017b8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001782:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001784:	e002      	b.n	800178c <LoopCopyDataInit>

08001786 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001786:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001788:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800178a:	3304      	adds	r3, #4

0800178c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800178c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800178e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001790:	d3f9      	bcc.n	8001786 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001792:	4a0a      	ldr	r2, [pc, #40]	@ (80017bc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001794:	4c0a      	ldr	r4, [pc, #40]	@ (80017c0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001796:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001798:	e001      	b.n	800179e <LoopFillZerobss>

0800179a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800179a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800179c:	3204      	adds	r2, #4

0800179e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800179e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017a0:	d3fb      	bcc.n	800179a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80017a2:	f002 fb4f 	bl	8003e44 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017a6:	f7ff fb4f 	bl	8000e48 <main>
  bx  lr    
 80017aa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80017ac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80017b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017b4:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 80017b8:	08003ecc 	.word	0x08003ecc
  ldr r2, =_sbss
 80017bc:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 80017c0:	200000d8 	.word	0x200000d8

080017c4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017c4:	e7fe      	b.n	80017c4 <ADC_IRQHandler>
	...

080017c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80017cc:	4b0e      	ldr	r3, [pc, #56]	@ (8001808 <HAL_Init+0x40>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4a0d      	ldr	r2, [pc, #52]	@ (8001808 <HAL_Init+0x40>)
 80017d2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80017d6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80017d8:	4b0b      	ldr	r3, [pc, #44]	@ (8001808 <HAL_Init+0x40>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4a0a      	ldr	r2, [pc, #40]	@ (8001808 <HAL_Init+0x40>)
 80017de:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80017e2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017e4:	4b08      	ldr	r3, [pc, #32]	@ (8001808 <HAL_Init+0x40>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4a07      	ldr	r2, [pc, #28]	@ (8001808 <HAL_Init+0x40>)
 80017ea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80017ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017f0:	2003      	movs	r0, #3
 80017f2:	f000 f92b 	bl	8001a4c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017f6:	200f      	movs	r0, #15
 80017f8:	f000 f808 	bl	800180c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017fc:	f7ff fdd4 	bl	80013a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001800:	2300      	movs	r3, #0
}
 8001802:	4618      	mov	r0, r3
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	40023c00 	.word	0x40023c00

0800180c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b082      	sub	sp, #8
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001814:	4b12      	ldr	r3, [pc, #72]	@ (8001860 <HAL_InitTick+0x54>)
 8001816:	681a      	ldr	r2, [r3, #0]
 8001818:	4b12      	ldr	r3, [pc, #72]	@ (8001864 <HAL_InitTick+0x58>)
 800181a:	781b      	ldrb	r3, [r3, #0]
 800181c:	4619      	mov	r1, r3
 800181e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001822:	fbb3 f3f1 	udiv	r3, r3, r1
 8001826:	fbb2 f3f3 	udiv	r3, r2, r3
 800182a:	4618      	mov	r0, r3
 800182c:	f000 f943 	bl	8001ab6 <HAL_SYSTICK_Config>
 8001830:	4603      	mov	r3, r0
 8001832:	2b00      	cmp	r3, #0
 8001834:	d001      	beq.n	800183a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001836:	2301      	movs	r3, #1
 8001838:	e00e      	b.n	8001858 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	2b0f      	cmp	r3, #15
 800183e:	d80a      	bhi.n	8001856 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001840:	2200      	movs	r2, #0
 8001842:	6879      	ldr	r1, [r7, #4]
 8001844:	f04f 30ff 	mov.w	r0, #4294967295
 8001848:	f000 f90b 	bl	8001a62 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800184c:	4a06      	ldr	r2, [pc, #24]	@ (8001868 <HAL_InitTick+0x5c>)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001852:	2300      	movs	r3, #0
 8001854:	e000      	b.n	8001858 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001856:	2301      	movs	r3, #1
}
 8001858:	4618      	mov	r0, r3
 800185a:	3708      	adds	r7, #8
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}
 8001860:	20000014 	.word	0x20000014
 8001864:	2000001c 	.word	0x2000001c
 8001868:	20000018 	.word	0x20000018

0800186c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800186c:	b480      	push	{r7}
 800186e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001870:	4b06      	ldr	r3, [pc, #24]	@ (800188c <HAL_IncTick+0x20>)
 8001872:	781b      	ldrb	r3, [r3, #0]
 8001874:	461a      	mov	r2, r3
 8001876:	4b06      	ldr	r3, [pc, #24]	@ (8001890 <HAL_IncTick+0x24>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4413      	add	r3, r2
 800187c:	4a04      	ldr	r2, [pc, #16]	@ (8001890 <HAL_IncTick+0x24>)
 800187e:	6013      	str	r3, [r2, #0]
}
 8001880:	bf00      	nop
 8001882:	46bd      	mov	sp, r7
 8001884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001888:	4770      	bx	lr
 800188a:	bf00      	nop
 800188c:	2000001c 	.word	0x2000001c
 8001890:	200000d4 	.word	0x200000d4

08001894 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001894:	b480      	push	{r7}
 8001896:	af00      	add	r7, sp, #0
  return uwTick;
 8001898:	4b03      	ldr	r3, [pc, #12]	@ (80018a8 <HAL_GetTick+0x14>)
 800189a:	681b      	ldr	r3, [r3, #0]
}
 800189c:	4618      	mov	r0, r3
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr
 80018a6:	bf00      	nop
 80018a8:	200000d4 	.word	0x200000d4

080018ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b085      	sub	sp, #20
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	f003 0307 	and.w	r3, r3, #7
 80018ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018bc:	4b0c      	ldr	r3, [pc, #48]	@ (80018f0 <__NVIC_SetPriorityGrouping+0x44>)
 80018be:	68db      	ldr	r3, [r3, #12]
 80018c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018c2:	68ba      	ldr	r2, [r7, #8]
 80018c4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80018c8:	4013      	ands	r3, r2
 80018ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018d0:	68bb      	ldr	r3, [r7, #8]
 80018d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018d4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80018d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80018dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018de:	4a04      	ldr	r2, [pc, #16]	@ (80018f0 <__NVIC_SetPriorityGrouping+0x44>)
 80018e0:	68bb      	ldr	r3, [r7, #8]
 80018e2:	60d3      	str	r3, [r2, #12]
}
 80018e4:	bf00      	nop
 80018e6:	3714      	adds	r7, #20
 80018e8:	46bd      	mov	sp, r7
 80018ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ee:	4770      	bx	lr
 80018f0:	e000ed00 	.word	0xe000ed00

080018f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018f4:	b480      	push	{r7}
 80018f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018f8:	4b04      	ldr	r3, [pc, #16]	@ (800190c <__NVIC_GetPriorityGrouping+0x18>)
 80018fa:	68db      	ldr	r3, [r3, #12]
 80018fc:	0a1b      	lsrs	r3, r3, #8
 80018fe:	f003 0307 	and.w	r3, r3, #7
}
 8001902:	4618      	mov	r0, r3
 8001904:	46bd      	mov	sp, r7
 8001906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190a:	4770      	bx	lr
 800190c:	e000ed00 	.word	0xe000ed00

08001910 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001910:	b480      	push	{r7}
 8001912:	b083      	sub	sp, #12
 8001914:	af00      	add	r7, sp, #0
 8001916:	4603      	mov	r3, r0
 8001918:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800191a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800191e:	2b00      	cmp	r3, #0
 8001920:	db0b      	blt.n	800193a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001922:	79fb      	ldrb	r3, [r7, #7]
 8001924:	f003 021f 	and.w	r2, r3, #31
 8001928:	4907      	ldr	r1, [pc, #28]	@ (8001948 <__NVIC_EnableIRQ+0x38>)
 800192a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800192e:	095b      	lsrs	r3, r3, #5
 8001930:	2001      	movs	r0, #1
 8001932:	fa00 f202 	lsl.w	r2, r0, r2
 8001936:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800193a:	bf00      	nop
 800193c:	370c      	adds	r7, #12
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr
 8001946:	bf00      	nop
 8001948:	e000e100 	.word	0xe000e100

0800194c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800194c:	b480      	push	{r7}
 800194e:	b083      	sub	sp, #12
 8001950:	af00      	add	r7, sp, #0
 8001952:	4603      	mov	r3, r0
 8001954:	6039      	str	r1, [r7, #0]
 8001956:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001958:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800195c:	2b00      	cmp	r3, #0
 800195e:	db0a      	blt.n	8001976 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	b2da      	uxtb	r2, r3
 8001964:	490c      	ldr	r1, [pc, #48]	@ (8001998 <__NVIC_SetPriority+0x4c>)
 8001966:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800196a:	0112      	lsls	r2, r2, #4
 800196c:	b2d2      	uxtb	r2, r2
 800196e:	440b      	add	r3, r1
 8001970:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001974:	e00a      	b.n	800198c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	b2da      	uxtb	r2, r3
 800197a:	4908      	ldr	r1, [pc, #32]	@ (800199c <__NVIC_SetPriority+0x50>)
 800197c:	79fb      	ldrb	r3, [r7, #7]
 800197e:	f003 030f 	and.w	r3, r3, #15
 8001982:	3b04      	subs	r3, #4
 8001984:	0112      	lsls	r2, r2, #4
 8001986:	b2d2      	uxtb	r2, r2
 8001988:	440b      	add	r3, r1
 800198a:	761a      	strb	r2, [r3, #24]
}
 800198c:	bf00      	nop
 800198e:	370c      	adds	r7, #12
 8001990:	46bd      	mov	sp, r7
 8001992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001996:	4770      	bx	lr
 8001998:	e000e100 	.word	0xe000e100
 800199c:	e000ed00 	.word	0xe000ed00

080019a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019a0:	b480      	push	{r7}
 80019a2:	b089      	sub	sp, #36	@ 0x24
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	60f8      	str	r0, [r7, #12]
 80019a8:	60b9      	str	r1, [r7, #8]
 80019aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	f003 0307 	and.w	r3, r3, #7
 80019b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019b4:	69fb      	ldr	r3, [r7, #28]
 80019b6:	f1c3 0307 	rsb	r3, r3, #7
 80019ba:	2b04      	cmp	r3, #4
 80019bc:	bf28      	it	cs
 80019be:	2304      	movcs	r3, #4
 80019c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019c2:	69fb      	ldr	r3, [r7, #28]
 80019c4:	3304      	adds	r3, #4
 80019c6:	2b06      	cmp	r3, #6
 80019c8:	d902      	bls.n	80019d0 <NVIC_EncodePriority+0x30>
 80019ca:	69fb      	ldr	r3, [r7, #28]
 80019cc:	3b03      	subs	r3, #3
 80019ce:	e000      	b.n	80019d2 <NVIC_EncodePriority+0x32>
 80019d0:	2300      	movs	r3, #0
 80019d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019d4:	f04f 32ff 	mov.w	r2, #4294967295
 80019d8:	69bb      	ldr	r3, [r7, #24]
 80019da:	fa02 f303 	lsl.w	r3, r2, r3
 80019de:	43da      	mvns	r2, r3
 80019e0:	68bb      	ldr	r3, [r7, #8]
 80019e2:	401a      	ands	r2, r3
 80019e4:	697b      	ldr	r3, [r7, #20]
 80019e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019e8:	f04f 31ff 	mov.w	r1, #4294967295
 80019ec:	697b      	ldr	r3, [r7, #20]
 80019ee:	fa01 f303 	lsl.w	r3, r1, r3
 80019f2:	43d9      	mvns	r1, r3
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019f8:	4313      	orrs	r3, r2
         );
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	3724      	adds	r7, #36	@ 0x24
 80019fe:	46bd      	mov	sp, r7
 8001a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a04:	4770      	bx	lr
	...

08001a08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b082      	sub	sp, #8
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	3b01      	subs	r3, #1
 8001a14:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001a18:	d301      	bcc.n	8001a1e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	e00f      	b.n	8001a3e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a1e:	4a0a      	ldr	r2, [pc, #40]	@ (8001a48 <SysTick_Config+0x40>)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	3b01      	subs	r3, #1
 8001a24:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a26:	210f      	movs	r1, #15
 8001a28:	f04f 30ff 	mov.w	r0, #4294967295
 8001a2c:	f7ff ff8e 	bl	800194c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a30:	4b05      	ldr	r3, [pc, #20]	@ (8001a48 <SysTick_Config+0x40>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a36:	4b04      	ldr	r3, [pc, #16]	@ (8001a48 <SysTick_Config+0x40>)
 8001a38:	2207      	movs	r2, #7
 8001a3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a3c:	2300      	movs	r3, #0
}
 8001a3e:	4618      	mov	r0, r3
 8001a40:	3708      	adds	r7, #8
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	e000e010 	.word	0xe000e010

08001a4c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b082      	sub	sp, #8
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a54:	6878      	ldr	r0, [r7, #4]
 8001a56:	f7ff ff29 	bl	80018ac <__NVIC_SetPriorityGrouping>
}
 8001a5a:	bf00      	nop
 8001a5c:	3708      	adds	r7, #8
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}

08001a62 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a62:	b580      	push	{r7, lr}
 8001a64:	b086      	sub	sp, #24
 8001a66:	af00      	add	r7, sp, #0
 8001a68:	4603      	mov	r3, r0
 8001a6a:	60b9      	str	r1, [r7, #8]
 8001a6c:	607a      	str	r2, [r7, #4]
 8001a6e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a70:	2300      	movs	r3, #0
 8001a72:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a74:	f7ff ff3e 	bl	80018f4 <__NVIC_GetPriorityGrouping>
 8001a78:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a7a:	687a      	ldr	r2, [r7, #4]
 8001a7c:	68b9      	ldr	r1, [r7, #8]
 8001a7e:	6978      	ldr	r0, [r7, #20]
 8001a80:	f7ff ff8e 	bl	80019a0 <NVIC_EncodePriority>
 8001a84:	4602      	mov	r2, r0
 8001a86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a8a:	4611      	mov	r1, r2
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f7ff ff5d 	bl	800194c <__NVIC_SetPriority>
}
 8001a92:	bf00      	nop
 8001a94:	3718      	adds	r7, #24
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}

08001a9a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a9a:	b580      	push	{r7, lr}
 8001a9c:	b082      	sub	sp, #8
 8001a9e:	af00      	add	r7, sp, #0
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001aa4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f7ff ff31 	bl	8001910 <__NVIC_EnableIRQ>
}
 8001aae:	bf00      	nop
 8001ab0:	3708      	adds	r7, #8
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}

08001ab6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ab6:	b580      	push	{r7, lr}
 8001ab8:	b082      	sub	sp, #8
 8001aba:	af00      	add	r7, sp, #0
 8001abc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001abe:	6878      	ldr	r0, [r7, #4]
 8001ac0:	f7ff ffa2 	bl	8001a08 <SysTick_Config>
 8001ac4:	4603      	mov	r3, r0
}
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	3708      	adds	r7, #8
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}

08001ace <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001ace:	b580      	push	{r7, lr}
 8001ad0:	b084      	sub	sp, #16
 8001ad2:	af00      	add	r7, sp, #0
 8001ad4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ada:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001adc:	f7ff feda 	bl	8001894 <HAL_GetTick>
 8001ae0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001ae8:	b2db      	uxtb	r3, r3
 8001aea:	2b02      	cmp	r3, #2
 8001aec:	d008      	beq.n	8001b00 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	2280      	movs	r2, #128	@ 0x80
 8001af2:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2200      	movs	r2, #0
 8001af8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001afc:	2301      	movs	r3, #1
 8001afe:	e052      	b.n	8001ba6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	681a      	ldr	r2, [r3, #0]
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f022 0216 	bic.w	r2, r2, #22
 8001b0e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	695a      	ldr	r2, [r3, #20]
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001b1e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d103      	bne.n	8001b30 <HAL_DMA_Abort+0x62>
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d007      	beq.n	8001b40 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	681a      	ldr	r2, [r3, #0]
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f022 0208 	bic.w	r2, r2, #8
 8001b3e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	681a      	ldr	r2, [r3, #0]
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f022 0201 	bic.w	r2, r2, #1
 8001b4e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b50:	e013      	b.n	8001b7a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001b52:	f7ff fe9f 	bl	8001894 <HAL_GetTick>
 8001b56:	4602      	mov	r2, r0
 8001b58:	68bb      	ldr	r3, [r7, #8]
 8001b5a:	1ad3      	subs	r3, r2, r3
 8001b5c:	2b05      	cmp	r3, #5
 8001b5e:	d90c      	bls.n	8001b7a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2220      	movs	r2, #32
 8001b64:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2203      	movs	r2, #3
 8001b6a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2200      	movs	r2, #0
 8001b72:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001b76:	2303      	movs	r3, #3
 8001b78:	e015      	b.n	8001ba6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f003 0301 	and.w	r3, r3, #1
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d1e4      	bne.n	8001b52 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b8c:	223f      	movs	r2, #63	@ 0x3f
 8001b8e:	409a      	lsls	r2, r3
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2201      	movs	r2, #1
 8001b98:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001ba4:	2300      	movs	r3, #0
}
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	3710      	adds	r7, #16
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}

08001bae <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001bae:	b480      	push	{r7}
 8001bb0:	b083      	sub	sp, #12
 8001bb2:	af00      	add	r7, sp, #0
 8001bb4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001bbc:	b2db      	uxtb	r3, r3
 8001bbe:	2b02      	cmp	r3, #2
 8001bc0:	d004      	beq.n	8001bcc <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2280      	movs	r2, #128	@ 0x80
 8001bc6:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	e00c      	b.n	8001be6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2205      	movs	r2, #5
 8001bd0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	681a      	ldr	r2, [r3, #0]
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f022 0201 	bic.w	r2, r2, #1
 8001be2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001be4:	2300      	movs	r3, #0
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	370c      	adds	r7, #12
 8001bea:	46bd      	mov	sp, r7
 8001bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf0:	4770      	bx	lr
	...

08001bf4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b089      	sub	sp, #36	@ 0x24
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
 8001bfc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c02:	2300      	movs	r3, #0
 8001c04:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c06:	2300      	movs	r3, #0
 8001c08:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	61fb      	str	r3, [r7, #28]
 8001c0e:	e16b      	b.n	8001ee8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c10:	2201      	movs	r2, #1
 8001c12:	69fb      	ldr	r3, [r7, #28]
 8001c14:	fa02 f303 	lsl.w	r3, r2, r3
 8001c18:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	697a      	ldr	r2, [r7, #20]
 8001c20:	4013      	ands	r3, r2
 8001c22:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c24:	693a      	ldr	r2, [r7, #16]
 8001c26:	697b      	ldr	r3, [r7, #20]
 8001c28:	429a      	cmp	r2, r3
 8001c2a:	f040 815a 	bne.w	8001ee2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	f003 0303 	and.w	r3, r3, #3
 8001c36:	2b01      	cmp	r3, #1
 8001c38:	d005      	beq.n	8001c46 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c42:	2b02      	cmp	r3, #2
 8001c44:	d130      	bne.n	8001ca8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	689b      	ldr	r3, [r3, #8]
 8001c4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c4c:	69fb      	ldr	r3, [r7, #28]
 8001c4e:	005b      	lsls	r3, r3, #1
 8001c50:	2203      	movs	r2, #3
 8001c52:	fa02 f303 	lsl.w	r3, r2, r3
 8001c56:	43db      	mvns	r3, r3
 8001c58:	69ba      	ldr	r2, [r7, #24]
 8001c5a:	4013      	ands	r3, r2
 8001c5c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	68da      	ldr	r2, [r3, #12]
 8001c62:	69fb      	ldr	r3, [r7, #28]
 8001c64:	005b      	lsls	r3, r3, #1
 8001c66:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6a:	69ba      	ldr	r2, [r7, #24]
 8001c6c:	4313      	orrs	r3, r2
 8001c6e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	69ba      	ldr	r2, [r7, #24]
 8001c74:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c7c:	2201      	movs	r2, #1
 8001c7e:	69fb      	ldr	r3, [r7, #28]
 8001c80:	fa02 f303 	lsl.w	r3, r2, r3
 8001c84:	43db      	mvns	r3, r3
 8001c86:	69ba      	ldr	r2, [r7, #24]
 8001c88:	4013      	ands	r3, r2
 8001c8a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	091b      	lsrs	r3, r3, #4
 8001c92:	f003 0201 	and.w	r2, r3, #1
 8001c96:	69fb      	ldr	r3, [r7, #28]
 8001c98:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9c:	69ba      	ldr	r2, [r7, #24]
 8001c9e:	4313      	orrs	r3, r2
 8001ca0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	69ba      	ldr	r2, [r7, #24]
 8001ca6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	f003 0303 	and.w	r3, r3, #3
 8001cb0:	2b03      	cmp	r3, #3
 8001cb2:	d017      	beq.n	8001ce4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	68db      	ldr	r3, [r3, #12]
 8001cb8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001cba:	69fb      	ldr	r3, [r7, #28]
 8001cbc:	005b      	lsls	r3, r3, #1
 8001cbe:	2203      	movs	r2, #3
 8001cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc4:	43db      	mvns	r3, r3
 8001cc6:	69ba      	ldr	r2, [r7, #24]
 8001cc8:	4013      	ands	r3, r2
 8001cca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	689a      	ldr	r2, [r3, #8]
 8001cd0:	69fb      	ldr	r3, [r7, #28]
 8001cd2:	005b      	lsls	r3, r3, #1
 8001cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd8:	69ba      	ldr	r2, [r7, #24]
 8001cda:	4313      	orrs	r3, r2
 8001cdc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	69ba      	ldr	r2, [r7, #24]
 8001ce2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	f003 0303 	and.w	r3, r3, #3
 8001cec:	2b02      	cmp	r3, #2
 8001cee:	d123      	bne.n	8001d38 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001cf0:	69fb      	ldr	r3, [r7, #28]
 8001cf2:	08da      	lsrs	r2, r3, #3
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	3208      	adds	r2, #8
 8001cf8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cfc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001cfe:	69fb      	ldr	r3, [r7, #28]
 8001d00:	f003 0307 	and.w	r3, r3, #7
 8001d04:	009b      	lsls	r3, r3, #2
 8001d06:	220f      	movs	r2, #15
 8001d08:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0c:	43db      	mvns	r3, r3
 8001d0e:	69ba      	ldr	r2, [r7, #24]
 8001d10:	4013      	ands	r3, r2
 8001d12:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	691a      	ldr	r2, [r3, #16]
 8001d18:	69fb      	ldr	r3, [r7, #28]
 8001d1a:	f003 0307 	and.w	r3, r3, #7
 8001d1e:	009b      	lsls	r3, r3, #2
 8001d20:	fa02 f303 	lsl.w	r3, r2, r3
 8001d24:	69ba      	ldr	r2, [r7, #24]
 8001d26:	4313      	orrs	r3, r2
 8001d28:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d2a:	69fb      	ldr	r3, [r7, #28]
 8001d2c:	08da      	lsrs	r2, r3, #3
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	3208      	adds	r2, #8
 8001d32:	69b9      	ldr	r1, [r7, #24]
 8001d34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d3e:	69fb      	ldr	r3, [r7, #28]
 8001d40:	005b      	lsls	r3, r3, #1
 8001d42:	2203      	movs	r2, #3
 8001d44:	fa02 f303 	lsl.w	r3, r2, r3
 8001d48:	43db      	mvns	r3, r3
 8001d4a:	69ba      	ldr	r2, [r7, #24]
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	f003 0203 	and.w	r2, r3, #3
 8001d58:	69fb      	ldr	r3, [r7, #28]
 8001d5a:	005b      	lsls	r3, r3, #1
 8001d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d60:	69ba      	ldr	r2, [r7, #24]
 8001d62:	4313      	orrs	r3, r2
 8001d64:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	69ba      	ldr	r2, [r7, #24]
 8001d6a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	f000 80b4 	beq.w	8001ee2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	60fb      	str	r3, [r7, #12]
 8001d7e:	4b60      	ldr	r3, [pc, #384]	@ (8001f00 <HAL_GPIO_Init+0x30c>)
 8001d80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d82:	4a5f      	ldr	r2, [pc, #380]	@ (8001f00 <HAL_GPIO_Init+0x30c>)
 8001d84:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d88:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d8a:	4b5d      	ldr	r3, [pc, #372]	@ (8001f00 <HAL_GPIO_Init+0x30c>)
 8001d8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d8e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d92:	60fb      	str	r3, [r7, #12]
 8001d94:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d96:	4a5b      	ldr	r2, [pc, #364]	@ (8001f04 <HAL_GPIO_Init+0x310>)
 8001d98:	69fb      	ldr	r3, [r7, #28]
 8001d9a:	089b      	lsrs	r3, r3, #2
 8001d9c:	3302      	adds	r3, #2
 8001d9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001da2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001da4:	69fb      	ldr	r3, [r7, #28]
 8001da6:	f003 0303 	and.w	r3, r3, #3
 8001daa:	009b      	lsls	r3, r3, #2
 8001dac:	220f      	movs	r2, #15
 8001dae:	fa02 f303 	lsl.w	r3, r2, r3
 8001db2:	43db      	mvns	r3, r3
 8001db4:	69ba      	ldr	r2, [r7, #24]
 8001db6:	4013      	ands	r3, r2
 8001db8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	4a52      	ldr	r2, [pc, #328]	@ (8001f08 <HAL_GPIO_Init+0x314>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d02b      	beq.n	8001e1a <HAL_GPIO_Init+0x226>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	4a51      	ldr	r2, [pc, #324]	@ (8001f0c <HAL_GPIO_Init+0x318>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d025      	beq.n	8001e16 <HAL_GPIO_Init+0x222>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	4a50      	ldr	r2, [pc, #320]	@ (8001f10 <HAL_GPIO_Init+0x31c>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d01f      	beq.n	8001e12 <HAL_GPIO_Init+0x21e>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	4a4f      	ldr	r2, [pc, #316]	@ (8001f14 <HAL_GPIO_Init+0x320>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d019      	beq.n	8001e0e <HAL_GPIO_Init+0x21a>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	4a4e      	ldr	r2, [pc, #312]	@ (8001f18 <HAL_GPIO_Init+0x324>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d013      	beq.n	8001e0a <HAL_GPIO_Init+0x216>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	4a4d      	ldr	r2, [pc, #308]	@ (8001f1c <HAL_GPIO_Init+0x328>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d00d      	beq.n	8001e06 <HAL_GPIO_Init+0x212>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	4a4c      	ldr	r2, [pc, #304]	@ (8001f20 <HAL_GPIO_Init+0x32c>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d007      	beq.n	8001e02 <HAL_GPIO_Init+0x20e>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	4a4b      	ldr	r2, [pc, #300]	@ (8001f24 <HAL_GPIO_Init+0x330>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d101      	bne.n	8001dfe <HAL_GPIO_Init+0x20a>
 8001dfa:	2307      	movs	r3, #7
 8001dfc:	e00e      	b.n	8001e1c <HAL_GPIO_Init+0x228>
 8001dfe:	2308      	movs	r3, #8
 8001e00:	e00c      	b.n	8001e1c <HAL_GPIO_Init+0x228>
 8001e02:	2306      	movs	r3, #6
 8001e04:	e00a      	b.n	8001e1c <HAL_GPIO_Init+0x228>
 8001e06:	2305      	movs	r3, #5
 8001e08:	e008      	b.n	8001e1c <HAL_GPIO_Init+0x228>
 8001e0a:	2304      	movs	r3, #4
 8001e0c:	e006      	b.n	8001e1c <HAL_GPIO_Init+0x228>
 8001e0e:	2303      	movs	r3, #3
 8001e10:	e004      	b.n	8001e1c <HAL_GPIO_Init+0x228>
 8001e12:	2302      	movs	r3, #2
 8001e14:	e002      	b.n	8001e1c <HAL_GPIO_Init+0x228>
 8001e16:	2301      	movs	r3, #1
 8001e18:	e000      	b.n	8001e1c <HAL_GPIO_Init+0x228>
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	69fa      	ldr	r2, [r7, #28]
 8001e1e:	f002 0203 	and.w	r2, r2, #3
 8001e22:	0092      	lsls	r2, r2, #2
 8001e24:	4093      	lsls	r3, r2
 8001e26:	69ba      	ldr	r2, [r7, #24]
 8001e28:	4313      	orrs	r3, r2
 8001e2a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e2c:	4935      	ldr	r1, [pc, #212]	@ (8001f04 <HAL_GPIO_Init+0x310>)
 8001e2e:	69fb      	ldr	r3, [r7, #28]
 8001e30:	089b      	lsrs	r3, r3, #2
 8001e32:	3302      	adds	r3, #2
 8001e34:	69ba      	ldr	r2, [r7, #24]
 8001e36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e3a:	4b3b      	ldr	r3, [pc, #236]	@ (8001f28 <HAL_GPIO_Init+0x334>)
 8001e3c:	689b      	ldr	r3, [r3, #8]
 8001e3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e40:	693b      	ldr	r3, [r7, #16]
 8001e42:	43db      	mvns	r3, r3
 8001e44:	69ba      	ldr	r2, [r7, #24]
 8001e46:	4013      	ands	r3, r2
 8001e48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d003      	beq.n	8001e5e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001e56:	69ba      	ldr	r2, [r7, #24]
 8001e58:	693b      	ldr	r3, [r7, #16]
 8001e5a:	4313      	orrs	r3, r2
 8001e5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e5e:	4a32      	ldr	r2, [pc, #200]	@ (8001f28 <HAL_GPIO_Init+0x334>)
 8001e60:	69bb      	ldr	r3, [r7, #24]
 8001e62:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e64:	4b30      	ldr	r3, [pc, #192]	@ (8001f28 <HAL_GPIO_Init+0x334>)
 8001e66:	68db      	ldr	r3, [r3, #12]
 8001e68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e6a:	693b      	ldr	r3, [r7, #16]
 8001e6c:	43db      	mvns	r3, r3
 8001e6e:	69ba      	ldr	r2, [r7, #24]
 8001e70:	4013      	ands	r3, r2
 8001e72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d003      	beq.n	8001e88 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001e80:	69ba      	ldr	r2, [r7, #24]
 8001e82:	693b      	ldr	r3, [r7, #16]
 8001e84:	4313      	orrs	r3, r2
 8001e86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e88:	4a27      	ldr	r2, [pc, #156]	@ (8001f28 <HAL_GPIO_Init+0x334>)
 8001e8a:	69bb      	ldr	r3, [r7, #24]
 8001e8c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001e8e:	4b26      	ldr	r3, [pc, #152]	@ (8001f28 <HAL_GPIO_Init+0x334>)
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e94:	693b      	ldr	r3, [r7, #16]
 8001e96:	43db      	mvns	r3, r3
 8001e98:	69ba      	ldr	r2, [r7, #24]
 8001e9a:	4013      	ands	r3, r2
 8001e9c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d003      	beq.n	8001eb2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001eaa:	69ba      	ldr	r2, [r7, #24]
 8001eac:	693b      	ldr	r3, [r7, #16]
 8001eae:	4313      	orrs	r3, r2
 8001eb0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001eb2:	4a1d      	ldr	r2, [pc, #116]	@ (8001f28 <HAL_GPIO_Init+0x334>)
 8001eb4:	69bb      	ldr	r3, [r7, #24]
 8001eb6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001eb8:	4b1b      	ldr	r3, [pc, #108]	@ (8001f28 <HAL_GPIO_Init+0x334>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ebe:	693b      	ldr	r3, [r7, #16]
 8001ec0:	43db      	mvns	r3, r3
 8001ec2:	69ba      	ldr	r2, [r7, #24]
 8001ec4:	4013      	ands	r3, r2
 8001ec6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d003      	beq.n	8001edc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001ed4:	69ba      	ldr	r2, [r7, #24]
 8001ed6:	693b      	ldr	r3, [r7, #16]
 8001ed8:	4313      	orrs	r3, r2
 8001eda:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001edc:	4a12      	ldr	r2, [pc, #72]	@ (8001f28 <HAL_GPIO_Init+0x334>)
 8001ede:	69bb      	ldr	r3, [r7, #24]
 8001ee0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ee2:	69fb      	ldr	r3, [r7, #28]
 8001ee4:	3301      	adds	r3, #1
 8001ee6:	61fb      	str	r3, [r7, #28]
 8001ee8:	69fb      	ldr	r3, [r7, #28]
 8001eea:	2b0f      	cmp	r3, #15
 8001eec:	f67f ae90 	bls.w	8001c10 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ef0:	bf00      	nop
 8001ef2:	bf00      	nop
 8001ef4:	3724      	adds	r7, #36	@ 0x24
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efc:	4770      	bx	lr
 8001efe:	bf00      	nop
 8001f00:	40023800 	.word	0x40023800
 8001f04:	40013800 	.word	0x40013800
 8001f08:	40020000 	.word	0x40020000
 8001f0c:	40020400 	.word	0x40020400
 8001f10:	40020800 	.word	0x40020800
 8001f14:	40020c00 	.word	0x40020c00
 8001f18:	40021000 	.word	0x40021000
 8001f1c:	40021400 	.word	0x40021400
 8001f20:	40021800 	.word	0x40021800
 8001f24:	40021c00 	.word	0x40021c00
 8001f28:	40013c00 	.word	0x40013c00

08001f2c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b085      	sub	sp, #20
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
 8001f34:	460b      	mov	r3, r1
 8001f36:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	691a      	ldr	r2, [r3, #16]
 8001f3c:	887b      	ldrh	r3, [r7, #2]
 8001f3e:	4013      	ands	r3, r2
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d002      	beq.n	8001f4a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001f44:	2301      	movs	r3, #1
 8001f46:	73fb      	strb	r3, [r7, #15]
 8001f48:	e001      	b.n	8001f4e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001f4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f50:	4618      	mov	r0, r3
 8001f52:	3714      	adds	r7, #20
 8001f54:	46bd      	mov	sp, r7
 8001f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5a:	4770      	bx	lr

08001f5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b083      	sub	sp, #12
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
 8001f64:	460b      	mov	r3, r1
 8001f66:	807b      	strh	r3, [r7, #2]
 8001f68:	4613      	mov	r3, r2
 8001f6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f6c:	787b      	ldrb	r3, [r7, #1]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d003      	beq.n	8001f7a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f72:	887a      	ldrh	r2, [r7, #2]
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001f78:	e003      	b.n	8001f82 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001f7a:	887b      	ldrh	r3, [r7, #2]
 8001f7c:	041a      	lsls	r2, r3, #16
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	619a      	str	r2, [r3, #24]
}
 8001f82:	bf00      	nop
 8001f84:	370c      	adds	r7, #12
 8001f86:	46bd      	mov	sp, r7
 8001f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8c:	4770      	bx	lr

08001f8e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001f8e:	b480      	push	{r7}
 8001f90:	b085      	sub	sp, #20
 8001f92:	af00      	add	r7, sp, #0
 8001f94:	6078      	str	r0, [r7, #4]
 8001f96:	460b      	mov	r3, r1
 8001f98:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	695b      	ldr	r3, [r3, #20]
 8001f9e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001fa0:	887a      	ldrh	r2, [r7, #2]
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	041a      	lsls	r2, r3, #16
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	43d9      	mvns	r1, r3
 8001fac:	887b      	ldrh	r3, [r7, #2]
 8001fae:	400b      	ands	r3, r1
 8001fb0:	431a      	orrs	r2, r3
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	619a      	str	r2, [r3, #24]
}
 8001fb6:	bf00      	nop
 8001fb8:	3714      	adds	r7, #20
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc0:	4770      	bx	lr
	...

08001fc4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b082      	sub	sp, #8
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	4603      	mov	r3, r0
 8001fcc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001fce:	4b08      	ldr	r3, [pc, #32]	@ (8001ff0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001fd0:	695a      	ldr	r2, [r3, #20]
 8001fd2:	88fb      	ldrh	r3, [r7, #6]
 8001fd4:	4013      	ands	r3, r2
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d006      	beq.n	8001fe8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001fda:	4a05      	ldr	r2, [pc, #20]	@ (8001ff0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001fdc:	88fb      	ldrh	r3, [r7, #6]
 8001fde:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001fe0:	88fb      	ldrh	r3, [r7, #6]
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f7ff f96a 	bl	80012bc <HAL_GPIO_EXTI_Callback>
  }
}
 8001fe8:	bf00      	nop
 8001fea:	3708      	adds	r7, #8
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bd80      	pop	{r7, pc}
 8001ff0:	40013c00 	.word	0x40013c00

08001ff4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b086      	sub	sp, #24
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d101      	bne.n	8002006 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002002:	2301      	movs	r3, #1
 8002004:	e267      	b.n	80024d6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f003 0301 	and.w	r3, r3, #1
 800200e:	2b00      	cmp	r3, #0
 8002010:	d075      	beq.n	80020fe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002012:	4b88      	ldr	r3, [pc, #544]	@ (8002234 <HAL_RCC_OscConfig+0x240>)
 8002014:	689b      	ldr	r3, [r3, #8]
 8002016:	f003 030c 	and.w	r3, r3, #12
 800201a:	2b04      	cmp	r3, #4
 800201c:	d00c      	beq.n	8002038 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800201e:	4b85      	ldr	r3, [pc, #532]	@ (8002234 <HAL_RCC_OscConfig+0x240>)
 8002020:	689b      	ldr	r3, [r3, #8]
 8002022:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002026:	2b08      	cmp	r3, #8
 8002028:	d112      	bne.n	8002050 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800202a:	4b82      	ldr	r3, [pc, #520]	@ (8002234 <HAL_RCC_OscConfig+0x240>)
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002032:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002036:	d10b      	bne.n	8002050 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002038:	4b7e      	ldr	r3, [pc, #504]	@ (8002234 <HAL_RCC_OscConfig+0x240>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002040:	2b00      	cmp	r3, #0
 8002042:	d05b      	beq.n	80020fc <HAL_RCC_OscConfig+0x108>
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d157      	bne.n	80020fc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800204c:	2301      	movs	r3, #1
 800204e:	e242      	b.n	80024d6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002058:	d106      	bne.n	8002068 <HAL_RCC_OscConfig+0x74>
 800205a:	4b76      	ldr	r3, [pc, #472]	@ (8002234 <HAL_RCC_OscConfig+0x240>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4a75      	ldr	r2, [pc, #468]	@ (8002234 <HAL_RCC_OscConfig+0x240>)
 8002060:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002064:	6013      	str	r3, [r2, #0]
 8002066:	e01d      	b.n	80020a4 <HAL_RCC_OscConfig+0xb0>
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002070:	d10c      	bne.n	800208c <HAL_RCC_OscConfig+0x98>
 8002072:	4b70      	ldr	r3, [pc, #448]	@ (8002234 <HAL_RCC_OscConfig+0x240>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4a6f      	ldr	r2, [pc, #444]	@ (8002234 <HAL_RCC_OscConfig+0x240>)
 8002078:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800207c:	6013      	str	r3, [r2, #0]
 800207e:	4b6d      	ldr	r3, [pc, #436]	@ (8002234 <HAL_RCC_OscConfig+0x240>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4a6c      	ldr	r2, [pc, #432]	@ (8002234 <HAL_RCC_OscConfig+0x240>)
 8002084:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002088:	6013      	str	r3, [r2, #0]
 800208a:	e00b      	b.n	80020a4 <HAL_RCC_OscConfig+0xb0>
 800208c:	4b69      	ldr	r3, [pc, #420]	@ (8002234 <HAL_RCC_OscConfig+0x240>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a68      	ldr	r2, [pc, #416]	@ (8002234 <HAL_RCC_OscConfig+0x240>)
 8002092:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002096:	6013      	str	r3, [r2, #0]
 8002098:	4b66      	ldr	r3, [pc, #408]	@ (8002234 <HAL_RCC_OscConfig+0x240>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a65      	ldr	r2, [pc, #404]	@ (8002234 <HAL_RCC_OscConfig+0x240>)
 800209e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80020a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d013      	beq.n	80020d4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020ac:	f7ff fbf2 	bl	8001894 <HAL_GetTick>
 80020b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020b2:	e008      	b.n	80020c6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020b4:	f7ff fbee 	bl	8001894 <HAL_GetTick>
 80020b8:	4602      	mov	r2, r0
 80020ba:	693b      	ldr	r3, [r7, #16]
 80020bc:	1ad3      	subs	r3, r2, r3
 80020be:	2b64      	cmp	r3, #100	@ 0x64
 80020c0:	d901      	bls.n	80020c6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80020c2:	2303      	movs	r3, #3
 80020c4:	e207      	b.n	80024d6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020c6:	4b5b      	ldr	r3, [pc, #364]	@ (8002234 <HAL_RCC_OscConfig+0x240>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d0f0      	beq.n	80020b4 <HAL_RCC_OscConfig+0xc0>
 80020d2:	e014      	b.n	80020fe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020d4:	f7ff fbde 	bl	8001894 <HAL_GetTick>
 80020d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020da:	e008      	b.n	80020ee <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020dc:	f7ff fbda 	bl	8001894 <HAL_GetTick>
 80020e0:	4602      	mov	r2, r0
 80020e2:	693b      	ldr	r3, [r7, #16]
 80020e4:	1ad3      	subs	r3, r2, r3
 80020e6:	2b64      	cmp	r3, #100	@ 0x64
 80020e8:	d901      	bls.n	80020ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80020ea:	2303      	movs	r3, #3
 80020ec:	e1f3      	b.n	80024d6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020ee:	4b51      	ldr	r3, [pc, #324]	@ (8002234 <HAL_RCC_OscConfig+0x240>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d1f0      	bne.n	80020dc <HAL_RCC_OscConfig+0xe8>
 80020fa:	e000      	b.n	80020fe <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f003 0302 	and.w	r3, r3, #2
 8002106:	2b00      	cmp	r3, #0
 8002108:	d063      	beq.n	80021d2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800210a:	4b4a      	ldr	r3, [pc, #296]	@ (8002234 <HAL_RCC_OscConfig+0x240>)
 800210c:	689b      	ldr	r3, [r3, #8]
 800210e:	f003 030c 	and.w	r3, r3, #12
 8002112:	2b00      	cmp	r3, #0
 8002114:	d00b      	beq.n	800212e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002116:	4b47      	ldr	r3, [pc, #284]	@ (8002234 <HAL_RCC_OscConfig+0x240>)
 8002118:	689b      	ldr	r3, [r3, #8]
 800211a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800211e:	2b08      	cmp	r3, #8
 8002120:	d11c      	bne.n	800215c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002122:	4b44      	ldr	r3, [pc, #272]	@ (8002234 <HAL_RCC_OscConfig+0x240>)
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800212a:	2b00      	cmp	r3, #0
 800212c:	d116      	bne.n	800215c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800212e:	4b41      	ldr	r3, [pc, #260]	@ (8002234 <HAL_RCC_OscConfig+0x240>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f003 0302 	and.w	r3, r3, #2
 8002136:	2b00      	cmp	r3, #0
 8002138:	d005      	beq.n	8002146 <HAL_RCC_OscConfig+0x152>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	68db      	ldr	r3, [r3, #12]
 800213e:	2b01      	cmp	r3, #1
 8002140:	d001      	beq.n	8002146 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002142:	2301      	movs	r3, #1
 8002144:	e1c7      	b.n	80024d6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002146:	4b3b      	ldr	r3, [pc, #236]	@ (8002234 <HAL_RCC_OscConfig+0x240>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	691b      	ldr	r3, [r3, #16]
 8002152:	00db      	lsls	r3, r3, #3
 8002154:	4937      	ldr	r1, [pc, #220]	@ (8002234 <HAL_RCC_OscConfig+0x240>)
 8002156:	4313      	orrs	r3, r2
 8002158:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800215a:	e03a      	b.n	80021d2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	68db      	ldr	r3, [r3, #12]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d020      	beq.n	80021a6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002164:	4b34      	ldr	r3, [pc, #208]	@ (8002238 <HAL_RCC_OscConfig+0x244>)
 8002166:	2201      	movs	r2, #1
 8002168:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800216a:	f7ff fb93 	bl	8001894 <HAL_GetTick>
 800216e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002170:	e008      	b.n	8002184 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002172:	f7ff fb8f 	bl	8001894 <HAL_GetTick>
 8002176:	4602      	mov	r2, r0
 8002178:	693b      	ldr	r3, [r7, #16]
 800217a:	1ad3      	subs	r3, r2, r3
 800217c:	2b02      	cmp	r3, #2
 800217e:	d901      	bls.n	8002184 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002180:	2303      	movs	r3, #3
 8002182:	e1a8      	b.n	80024d6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002184:	4b2b      	ldr	r3, [pc, #172]	@ (8002234 <HAL_RCC_OscConfig+0x240>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f003 0302 	and.w	r3, r3, #2
 800218c:	2b00      	cmp	r3, #0
 800218e:	d0f0      	beq.n	8002172 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002190:	4b28      	ldr	r3, [pc, #160]	@ (8002234 <HAL_RCC_OscConfig+0x240>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	691b      	ldr	r3, [r3, #16]
 800219c:	00db      	lsls	r3, r3, #3
 800219e:	4925      	ldr	r1, [pc, #148]	@ (8002234 <HAL_RCC_OscConfig+0x240>)
 80021a0:	4313      	orrs	r3, r2
 80021a2:	600b      	str	r3, [r1, #0]
 80021a4:	e015      	b.n	80021d2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021a6:	4b24      	ldr	r3, [pc, #144]	@ (8002238 <HAL_RCC_OscConfig+0x244>)
 80021a8:	2200      	movs	r2, #0
 80021aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021ac:	f7ff fb72 	bl	8001894 <HAL_GetTick>
 80021b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021b2:	e008      	b.n	80021c6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021b4:	f7ff fb6e 	bl	8001894 <HAL_GetTick>
 80021b8:	4602      	mov	r2, r0
 80021ba:	693b      	ldr	r3, [r7, #16]
 80021bc:	1ad3      	subs	r3, r2, r3
 80021be:	2b02      	cmp	r3, #2
 80021c0:	d901      	bls.n	80021c6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80021c2:	2303      	movs	r3, #3
 80021c4:	e187      	b.n	80024d6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021c6:	4b1b      	ldr	r3, [pc, #108]	@ (8002234 <HAL_RCC_OscConfig+0x240>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f003 0302 	and.w	r3, r3, #2
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d1f0      	bne.n	80021b4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f003 0308 	and.w	r3, r3, #8
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d036      	beq.n	800224c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	695b      	ldr	r3, [r3, #20]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d016      	beq.n	8002214 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021e6:	4b15      	ldr	r3, [pc, #84]	@ (800223c <HAL_RCC_OscConfig+0x248>)
 80021e8:	2201      	movs	r2, #1
 80021ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021ec:	f7ff fb52 	bl	8001894 <HAL_GetTick>
 80021f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021f2:	e008      	b.n	8002206 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021f4:	f7ff fb4e 	bl	8001894 <HAL_GetTick>
 80021f8:	4602      	mov	r2, r0
 80021fa:	693b      	ldr	r3, [r7, #16]
 80021fc:	1ad3      	subs	r3, r2, r3
 80021fe:	2b02      	cmp	r3, #2
 8002200:	d901      	bls.n	8002206 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002202:	2303      	movs	r3, #3
 8002204:	e167      	b.n	80024d6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002206:	4b0b      	ldr	r3, [pc, #44]	@ (8002234 <HAL_RCC_OscConfig+0x240>)
 8002208:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800220a:	f003 0302 	and.w	r3, r3, #2
 800220e:	2b00      	cmp	r3, #0
 8002210:	d0f0      	beq.n	80021f4 <HAL_RCC_OscConfig+0x200>
 8002212:	e01b      	b.n	800224c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002214:	4b09      	ldr	r3, [pc, #36]	@ (800223c <HAL_RCC_OscConfig+0x248>)
 8002216:	2200      	movs	r2, #0
 8002218:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800221a:	f7ff fb3b 	bl	8001894 <HAL_GetTick>
 800221e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002220:	e00e      	b.n	8002240 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002222:	f7ff fb37 	bl	8001894 <HAL_GetTick>
 8002226:	4602      	mov	r2, r0
 8002228:	693b      	ldr	r3, [r7, #16]
 800222a:	1ad3      	subs	r3, r2, r3
 800222c:	2b02      	cmp	r3, #2
 800222e:	d907      	bls.n	8002240 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002230:	2303      	movs	r3, #3
 8002232:	e150      	b.n	80024d6 <HAL_RCC_OscConfig+0x4e2>
 8002234:	40023800 	.word	0x40023800
 8002238:	42470000 	.word	0x42470000
 800223c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002240:	4b88      	ldr	r3, [pc, #544]	@ (8002464 <HAL_RCC_OscConfig+0x470>)
 8002242:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002244:	f003 0302 	and.w	r3, r3, #2
 8002248:	2b00      	cmp	r3, #0
 800224a:	d1ea      	bne.n	8002222 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f003 0304 	and.w	r3, r3, #4
 8002254:	2b00      	cmp	r3, #0
 8002256:	f000 8097 	beq.w	8002388 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800225a:	2300      	movs	r3, #0
 800225c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800225e:	4b81      	ldr	r3, [pc, #516]	@ (8002464 <HAL_RCC_OscConfig+0x470>)
 8002260:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002262:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002266:	2b00      	cmp	r3, #0
 8002268:	d10f      	bne.n	800228a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800226a:	2300      	movs	r3, #0
 800226c:	60bb      	str	r3, [r7, #8]
 800226e:	4b7d      	ldr	r3, [pc, #500]	@ (8002464 <HAL_RCC_OscConfig+0x470>)
 8002270:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002272:	4a7c      	ldr	r2, [pc, #496]	@ (8002464 <HAL_RCC_OscConfig+0x470>)
 8002274:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002278:	6413      	str	r3, [r2, #64]	@ 0x40
 800227a:	4b7a      	ldr	r3, [pc, #488]	@ (8002464 <HAL_RCC_OscConfig+0x470>)
 800227c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800227e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002282:	60bb      	str	r3, [r7, #8]
 8002284:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002286:	2301      	movs	r3, #1
 8002288:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800228a:	4b77      	ldr	r3, [pc, #476]	@ (8002468 <HAL_RCC_OscConfig+0x474>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002292:	2b00      	cmp	r3, #0
 8002294:	d118      	bne.n	80022c8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002296:	4b74      	ldr	r3, [pc, #464]	@ (8002468 <HAL_RCC_OscConfig+0x474>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4a73      	ldr	r2, [pc, #460]	@ (8002468 <HAL_RCC_OscConfig+0x474>)
 800229c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80022a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022a2:	f7ff faf7 	bl	8001894 <HAL_GetTick>
 80022a6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022a8:	e008      	b.n	80022bc <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022aa:	f7ff faf3 	bl	8001894 <HAL_GetTick>
 80022ae:	4602      	mov	r2, r0
 80022b0:	693b      	ldr	r3, [r7, #16]
 80022b2:	1ad3      	subs	r3, r2, r3
 80022b4:	2b02      	cmp	r3, #2
 80022b6:	d901      	bls.n	80022bc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80022b8:	2303      	movs	r3, #3
 80022ba:	e10c      	b.n	80024d6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022bc:	4b6a      	ldr	r3, [pc, #424]	@ (8002468 <HAL_RCC_OscConfig+0x474>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d0f0      	beq.n	80022aa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	689b      	ldr	r3, [r3, #8]
 80022cc:	2b01      	cmp	r3, #1
 80022ce:	d106      	bne.n	80022de <HAL_RCC_OscConfig+0x2ea>
 80022d0:	4b64      	ldr	r3, [pc, #400]	@ (8002464 <HAL_RCC_OscConfig+0x470>)
 80022d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022d4:	4a63      	ldr	r2, [pc, #396]	@ (8002464 <HAL_RCC_OscConfig+0x470>)
 80022d6:	f043 0301 	orr.w	r3, r3, #1
 80022da:	6713      	str	r3, [r2, #112]	@ 0x70
 80022dc:	e01c      	b.n	8002318 <HAL_RCC_OscConfig+0x324>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	689b      	ldr	r3, [r3, #8]
 80022e2:	2b05      	cmp	r3, #5
 80022e4:	d10c      	bne.n	8002300 <HAL_RCC_OscConfig+0x30c>
 80022e6:	4b5f      	ldr	r3, [pc, #380]	@ (8002464 <HAL_RCC_OscConfig+0x470>)
 80022e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022ea:	4a5e      	ldr	r2, [pc, #376]	@ (8002464 <HAL_RCC_OscConfig+0x470>)
 80022ec:	f043 0304 	orr.w	r3, r3, #4
 80022f0:	6713      	str	r3, [r2, #112]	@ 0x70
 80022f2:	4b5c      	ldr	r3, [pc, #368]	@ (8002464 <HAL_RCC_OscConfig+0x470>)
 80022f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022f6:	4a5b      	ldr	r2, [pc, #364]	@ (8002464 <HAL_RCC_OscConfig+0x470>)
 80022f8:	f043 0301 	orr.w	r3, r3, #1
 80022fc:	6713      	str	r3, [r2, #112]	@ 0x70
 80022fe:	e00b      	b.n	8002318 <HAL_RCC_OscConfig+0x324>
 8002300:	4b58      	ldr	r3, [pc, #352]	@ (8002464 <HAL_RCC_OscConfig+0x470>)
 8002302:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002304:	4a57      	ldr	r2, [pc, #348]	@ (8002464 <HAL_RCC_OscConfig+0x470>)
 8002306:	f023 0301 	bic.w	r3, r3, #1
 800230a:	6713      	str	r3, [r2, #112]	@ 0x70
 800230c:	4b55      	ldr	r3, [pc, #340]	@ (8002464 <HAL_RCC_OscConfig+0x470>)
 800230e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002310:	4a54      	ldr	r2, [pc, #336]	@ (8002464 <HAL_RCC_OscConfig+0x470>)
 8002312:	f023 0304 	bic.w	r3, r3, #4
 8002316:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	689b      	ldr	r3, [r3, #8]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d015      	beq.n	800234c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002320:	f7ff fab8 	bl	8001894 <HAL_GetTick>
 8002324:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002326:	e00a      	b.n	800233e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002328:	f7ff fab4 	bl	8001894 <HAL_GetTick>
 800232c:	4602      	mov	r2, r0
 800232e:	693b      	ldr	r3, [r7, #16]
 8002330:	1ad3      	subs	r3, r2, r3
 8002332:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002336:	4293      	cmp	r3, r2
 8002338:	d901      	bls.n	800233e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800233a:	2303      	movs	r3, #3
 800233c:	e0cb      	b.n	80024d6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800233e:	4b49      	ldr	r3, [pc, #292]	@ (8002464 <HAL_RCC_OscConfig+0x470>)
 8002340:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002342:	f003 0302 	and.w	r3, r3, #2
 8002346:	2b00      	cmp	r3, #0
 8002348:	d0ee      	beq.n	8002328 <HAL_RCC_OscConfig+0x334>
 800234a:	e014      	b.n	8002376 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800234c:	f7ff faa2 	bl	8001894 <HAL_GetTick>
 8002350:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002352:	e00a      	b.n	800236a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002354:	f7ff fa9e 	bl	8001894 <HAL_GetTick>
 8002358:	4602      	mov	r2, r0
 800235a:	693b      	ldr	r3, [r7, #16]
 800235c:	1ad3      	subs	r3, r2, r3
 800235e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002362:	4293      	cmp	r3, r2
 8002364:	d901      	bls.n	800236a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002366:	2303      	movs	r3, #3
 8002368:	e0b5      	b.n	80024d6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800236a:	4b3e      	ldr	r3, [pc, #248]	@ (8002464 <HAL_RCC_OscConfig+0x470>)
 800236c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800236e:	f003 0302 	and.w	r3, r3, #2
 8002372:	2b00      	cmp	r3, #0
 8002374:	d1ee      	bne.n	8002354 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002376:	7dfb      	ldrb	r3, [r7, #23]
 8002378:	2b01      	cmp	r3, #1
 800237a:	d105      	bne.n	8002388 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800237c:	4b39      	ldr	r3, [pc, #228]	@ (8002464 <HAL_RCC_OscConfig+0x470>)
 800237e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002380:	4a38      	ldr	r2, [pc, #224]	@ (8002464 <HAL_RCC_OscConfig+0x470>)
 8002382:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002386:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	699b      	ldr	r3, [r3, #24]
 800238c:	2b00      	cmp	r3, #0
 800238e:	f000 80a1 	beq.w	80024d4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002392:	4b34      	ldr	r3, [pc, #208]	@ (8002464 <HAL_RCC_OscConfig+0x470>)
 8002394:	689b      	ldr	r3, [r3, #8]
 8002396:	f003 030c 	and.w	r3, r3, #12
 800239a:	2b08      	cmp	r3, #8
 800239c:	d05c      	beq.n	8002458 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	699b      	ldr	r3, [r3, #24]
 80023a2:	2b02      	cmp	r3, #2
 80023a4:	d141      	bne.n	800242a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023a6:	4b31      	ldr	r3, [pc, #196]	@ (800246c <HAL_RCC_OscConfig+0x478>)
 80023a8:	2200      	movs	r2, #0
 80023aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023ac:	f7ff fa72 	bl	8001894 <HAL_GetTick>
 80023b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023b2:	e008      	b.n	80023c6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023b4:	f7ff fa6e 	bl	8001894 <HAL_GetTick>
 80023b8:	4602      	mov	r2, r0
 80023ba:	693b      	ldr	r3, [r7, #16]
 80023bc:	1ad3      	subs	r3, r2, r3
 80023be:	2b02      	cmp	r3, #2
 80023c0:	d901      	bls.n	80023c6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80023c2:	2303      	movs	r3, #3
 80023c4:	e087      	b.n	80024d6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023c6:	4b27      	ldr	r3, [pc, #156]	@ (8002464 <HAL_RCC_OscConfig+0x470>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d1f0      	bne.n	80023b4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	69da      	ldr	r2, [r3, #28]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6a1b      	ldr	r3, [r3, #32]
 80023da:	431a      	orrs	r2, r3
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023e0:	019b      	lsls	r3, r3, #6
 80023e2:	431a      	orrs	r2, r3
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023e8:	085b      	lsrs	r3, r3, #1
 80023ea:	3b01      	subs	r3, #1
 80023ec:	041b      	lsls	r3, r3, #16
 80023ee:	431a      	orrs	r2, r3
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023f4:	061b      	lsls	r3, r3, #24
 80023f6:	491b      	ldr	r1, [pc, #108]	@ (8002464 <HAL_RCC_OscConfig+0x470>)
 80023f8:	4313      	orrs	r3, r2
 80023fa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80023fc:	4b1b      	ldr	r3, [pc, #108]	@ (800246c <HAL_RCC_OscConfig+0x478>)
 80023fe:	2201      	movs	r2, #1
 8002400:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002402:	f7ff fa47 	bl	8001894 <HAL_GetTick>
 8002406:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002408:	e008      	b.n	800241c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800240a:	f7ff fa43 	bl	8001894 <HAL_GetTick>
 800240e:	4602      	mov	r2, r0
 8002410:	693b      	ldr	r3, [r7, #16]
 8002412:	1ad3      	subs	r3, r2, r3
 8002414:	2b02      	cmp	r3, #2
 8002416:	d901      	bls.n	800241c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002418:	2303      	movs	r3, #3
 800241a:	e05c      	b.n	80024d6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800241c:	4b11      	ldr	r3, [pc, #68]	@ (8002464 <HAL_RCC_OscConfig+0x470>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002424:	2b00      	cmp	r3, #0
 8002426:	d0f0      	beq.n	800240a <HAL_RCC_OscConfig+0x416>
 8002428:	e054      	b.n	80024d4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800242a:	4b10      	ldr	r3, [pc, #64]	@ (800246c <HAL_RCC_OscConfig+0x478>)
 800242c:	2200      	movs	r2, #0
 800242e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002430:	f7ff fa30 	bl	8001894 <HAL_GetTick>
 8002434:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002436:	e008      	b.n	800244a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002438:	f7ff fa2c 	bl	8001894 <HAL_GetTick>
 800243c:	4602      	mov	r2, r0
 800243e:	693b      	ldr	r3, [r7, #16]
 8002440:	1ad3      	subs	r3, r2, r3
 8002442:	2b02      	cmp	r3, #2
 8002444:	d901      	bls.n	800244a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002446:	2303      	movs	r3, #3
 8002448:	e045      	b.n	80024d6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800244a:	4b06      	ldr	r3, [pc, #24]	@ (8002464 <HAL_RCC_OscConfig+0x470>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002452:	2b00      	cmp	r3, #0
 8002454:	d1f0      	bne.n	8002438 <HAL_RCC_OscConfig+0x444>
 8002456:	e03d      	b.n	80024d4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	699b      	ldr	r3, [r3, #24]
 800245c:	2b01      	cmp	r3, #1
 800245e:	d107      	bne.n	8002470 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002460:	2301      	movs	r3, #1
 8002462:	e038      	b.n	80024d6 <HAL_RCC_OscConfig+0x4e2>
 8002464:	40023800 	.word	0x40023800
 8002468:	40007000 	.word	0x40007000
 800246c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002470:	4b1b      	ldr	r3, [pc, #108]	@ (80024e0 <HAL_RCC_OscConfig+0x4ec>)
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	699b      	ldr	r3, [r3, #24]
 800247a:	2b01      	cmp	r3, #1
 800247c:	d028      	beq.n	80024d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002488:	429a      	cmp	r2, r3
 800248a:	d121      	bne.n	80024d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002496:	429a      	cmp	r2, r3
 8002498:	d11a      	bne.n	80024d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800249a:	68fa      	ldr	r2, [r7, #12]
 800249c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80024a0:	4013      	ands	r3, r2
 80024a2:	687a      	ldr	r2, [r7, #4]
 80024a4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80024a6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d111      	bne.n	80024d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024b6:	085b      	lsrs	r3, r3, #1
 80024b8:	3b01      	subs	r3, #1
 80024ba:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80024bc:	429a      	cmp	r2, r3
 80024be:	d107      	bne.n	80024d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024ca:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80024cc:	429a      	cmp	r2, r3
 80024ce:	d001      	beq.n	80024d4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80024d0:	2301      	movs	r3, #1
 80024d2:	e000      	b.n	80024d6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80024d4:	2300      	movs	r3, #0
}
 80024d6:	4618      	mov	r0, r3
 80024d8:	3718      	adds	r7, #24
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}
 80024de:	bf00      	nop
 80024e0:	40023800 	.word	0x40023800

080024e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b084      	sub	sp, #16
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
 80024ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d101      	bne.n	80024f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80024f4:	2301      	movs	r3, #1
 80024f6:	e0cc      	b.n	8002692 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80024f8:	4b68      	ldr	r3, [pc, #416]	@ (800269c <HAL_RCC_ClockConfig+0x1b8>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f003 0307 	and.w	r3, r3, #7
 8002500:	683a      	ldr	r2, [r7, #0]
 8002502:	429a      	cmp	r2, r3
 8002504:	d90c      	bls.n	8002520 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002506:	4b65      	ldr	r3, [pc, #404]	@ (800269c <HAL_RCC_ClockConfig+0x1b8>)
 8002508:	683a      	ldr	r2, [r7, #0]
 800250a:	b2d2      	uxtb	r2, r2
 800250c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800250e:	4b63      	ldr	r3, [pc, #396]	@ (800269c <HAL_RCC_ClockConfig+0x1b8>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f003 0307 	and.w	r3, r3, #7
 8002516:	683a      	ldr	r2, [r7, #0]
 8002518:	429a      	cmp	r2, r3
 800251a:	d001      	beq.n	8002520 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800251c:	2301      	movs	r3, #1
 800251e:	e0b8      	b.n	8002692 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f003 0302 	and.w	r3, r3, #2
 8002528:	2b00      	cmp	r3, #0
 800252a:	d020      	beq.n	800256e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f003 0304 	and.w	r3, r3, #4
 8002534:	2b00      	cmp	r3, #0
 8002536:	d005      	beq.n	8002544 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002538:	4b59      	ldr	r3, [pc, #356]	@ (80026a0 <HAL_RCC_ClockConfig+0x1bc>)
 800253a:	689b      	ldr	r3, [r3, #8]
 800253c:	4a58      	ldr	r2, [pc, #352]	@ (80026a0 <HAL_RCC_ClockConfig+0x1bc>)
 800253e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002542:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f003 0308 	and.w	r3, r3, #8
 800254c:	2b00      	cmp	r3, #0
 800254e:	d005      	beq.n	800255c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002550:	4b53      	ldr	r3, [pc, #332]	@ (80026a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002552:	689b      	ldr	r3, [r3, #8]
 8002554:	4a52      	ldr	r2, [pc, #328]	@ (80026a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002556:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800255a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800255c:	4b50      	ldr	r3, [pc, #320]	@ (80026a0 <HAL_RCC_ClockConfig+0x1bc>)
 800255e:	689b      	ldr	r3, [r3, #8]
 8002560:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	689b      	ldr	r3, [r3, #8]
 8002568:	494d      	ldr	r1, [pc, #308]	@ (80026a0 <HAL_RCC_ClockConfig+0x1bc>)
 800256a:	4313      	orrs	r3, r2
 800256c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f003 0301 	and.w	r3, r3, #1
 8002576:	2b00      	cmp	r3, #0
 8002578:	d044      	beq.n	8002604 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	2b01      	cmp	r3, #1
 8002580:	d107      	bne.n	8002592 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002582:	4b47      	ldr	r3, [pc, #284]	@ (80026a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800258a:	2b00      	cmp	r3, #0
 800258c:	d119      	bne.n	80025c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800258e:	2301      	movs	r3, #1
 8002590:	e07f      	b.n	8002692 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	2b02      	cmp	r3, #2
 8002598:	d003      	beq.n	80025a2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800259e:	2b03      	cmp	r3, #3
 80025a0:	d107      	bne.n	80025b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025a2:	4b3f      	ldr	r3, [pc, #252]	@ (80026a0 <HAL_RCC_ClockConfig+0x1bc>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d109      	bne.n	80025c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025ae:	2301      	movs	r3, #1
 80025b0:	e06f      	b.n	8002692 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025b2:	4b3b      	ldr	r3, [pc, #236]	@ (80026a0 <HAL_RCC_ClockConfig+0x1bc>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f003 0302 	and.w	r3, r3, #2
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d101      	bne.n	80025c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025be:	2301      	movs	r3, #1
 80025c0:	e067      	b.n	8002692 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80025c2:	4b37      	ldr	r3, [pc, #220]	@ (80026a0 <HAL_RCC_ClockConfig+0x1bc>)
 80025c4:	689b      	ldr	r3, [r3, #8]
 80025c6:	f023 0203 	bic.w	r2, r3, #3
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	4934      	ldr	r1, [pc, #208]	@ (80026a0 <HAL_RCC_ClockConfig+0x1bc>)
 80025d0:	4313      	orrs	r3, r2
 80025d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80025d4:	f7ff f95e 	bl	8001894 <HAL_GetTick>
 80025d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025da:	e00a      	b.n	80025f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025dc:	f7ff f95a 	bl	8001894 <HAL_GetTick>
 80025e0:	4602      	mov	r2, r0
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	1ad3      	subs	r3, r2, r3
 80025e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d901      	bls.n	80025f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80025ee:	2303      	movs	r3, #3
 80025f0:	e04f      	b.n	8002692 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025f2:	4b2b      	ldr	r3, [pc, #172]	@ (80026a0 <HAL_RCC_ClockConfig+0x1bc>)
 80025f4:	689b      	ldr	r3, [r3, #8]
 80025f6:	f003 020c 	and.w	r2, r3, #12
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	009b      	lsls	r3, r3, #2
 8002600:	429a      	cmp	r2, r3
 8002602:	d1eb      	bne.n	80025dc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002604:	4b25      	ldr	r3, [pc, #148]	@ (800269c <HAL_RCC_ClockConfig+0x1b8>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f003 0307 	and.w	r3, r3, #7
 800260c:	683a      	ldr	r2, [r7, #0]
 800260e:	429a      	cmp	r2, r3
 8002610:	d20c      	bcs.n	800262c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002612:	4b22      	ldr	r3, [pc, #136]	@ (800269c <HAL_RCC_ClockConfig+0x1b8>)
 8002614:	683a      	ldr	r2, [r7, #0]
 8002616:	b2d2      	uxtb	r2, r2
 8002618:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800261a:	4b20      	ldr	r3, [pc, #128]	@ (800269c <HAL_RCC_ClockConfig+0x1b8>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f003 0307 	and.w	r3, r3, #7
 8002622:	683a      	ldr	r2, [r7, #0]
 8002624:	429a      	cmp	r2, r3
 8002626:	d001      	beq.n	800262c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002628:	2301      	movs	r3, #1
 800262a:	e032      	b.n	8002692 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f003 0304 	and.w	r3, r3, #4
 8002634:	2b00      	cmp	r3, #0
 8002636:	d008      	beq.n	800264a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002638:	4b19      	ldr	r3, [pc, #100]	@ (80026a0 <HAL_RCC_ClockConfig+0x1bc>)
 800263a:	689b      	ldr	r3, [r3, #8]
 800263c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	68db      	ldr	r3, [r3, #12]
 8002644:	4916      	ldr	r1, [pc, #88]	@ (80026a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002646:	4313      	orrs	r3, r2
 8002648:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f003 0308 	and.w	r3, r3, #8
 8002652:	2b00      	cmp	r3, #0
 8002654:	d009      	beq.n	800266a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002656:	4b12      	ldr	r3, [pc, #72]	@ (80026a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002658:	689b      	ldr	r3, [r3, #8]
 800265a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	691b      	ldr	r3, [r3, #16]
 8002662:	00db      	lsls	r3, r3, #3
 8002664:	490e      	ldr	r1, [pc, #56]	@ (80026a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002666:	4313      	orrs	r3, r2
 8002668:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800266a:	f000 f821 	bl	80026b0 <HAL_RCC_GetSysClockFreq>
 800266e:	4602      	mov	r2, r0
 8002670:	4b0b      	ldr	r3, [pc, #44]	@ (80026a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002672:	689b      	ldr	r3, [r3, #8]
 8002674:	091b      	lsrs	r3, r3, #4
 8002676:	f003 030f 	and.w	r3, r3, #15
 800267a:	490a      	ldr	r1, [pc, #40]	@ (80026a4 <HAL_RCC_ClockConfig+0x1c0>)
 800267c:	5ccb      	ldrb	r3, [r1, r3]
 800267e:	fa22 f303 	lsr.w	r3, r2, r3
 8002682:	4a09      	ldr	r2, [pc, #36]	@ (80026a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002684:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002686:	4b09      	ldr	r3, [pc, #36]	@ (80026ac <HAL_RCC_ClockConfig+0x1c8>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4618      	mov	r0, r3
 800268c:	f7ff f8be 	bl	800180c <HAL_InitTick>

  return HAL_OK;
 8002690:	2300      	movs	r3, #0
}
 8002692:	4618      	mov	r0, r3
 8002694:	3710      	adds	r7, #16
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}
 800269a:	bf00      	nop
 800269c:	40023c00 	.word	0x40023c00
 80026a0:	40023800 	.word	0x40023800
 80026a4:	08003ea4 	.word	0x08003ea4
 80026a8:	20000014 	.word	0x20000014
 80026ac:	20000018 	.word	0x20000018

080026b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80026b4:	b094      	sub	sp, #80	@ 0x50
 80026b6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80026b8:	2300      	movs	r3, #0
 80026ba:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80026bc:	2300      	movs	r3, #0
 80026be:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80026c0:	2300      	movs	r3, #0
 80026c2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80026c4:	2300      	movs	r3, #0
 80026c6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80026c8:	4b79      	ldr	r3, [pc, #484]	@ (80028b0 <HAL_RCC_GetSysClockFreq+0x200>)
 80026ca:	689b      	ldr	r3, [r3, #8]
 80026cc:	f003 030c 	and.w	r3, r3, #12
 80026d0:	2b08      	cmp	r3, #8
 80026d2:	d00d      	beq.n	80026f0 <HAL_RCC_GetSysClockFreq+0x40>
 80026d4:	2b08      	cmp	r3, #8
 80026d6:	f200 80e1 	bhi.w	800289c <HAL_RCC_GetSysClockFreq+0x1ec>
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d002      	beq.n	80026e4 <HAL_RCC_GetSysClockFreq+0x34>
 80026de:	2b04      	cmp	r3, #4
 80026e0:	d003      	beq.n	80026ea <HAL_RCC_GetSysClockFreq+0x3a>
 80026e2:	e0db      	b.n	800289c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80026e4:	4b73      	ldr	r3, [pc, #460]	@ (80028b4 <HAL_RCC_GetSysClockFreq+0x204>)
 80026e6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80026e8:	e0db      	b.n	80028a2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80026ea:	4b73      	ldr	r3, [pc, #460]	@ (80028b8 <HAL_RCC_GetSysClockFreq+0x208>)
 80026ec:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80026ee:	e0d8      	b.n	80028a2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80026f0:	4b6f      	ldr	r3, [pc, #444]	@ (80028b0 <HAL_RCC_GetSysClockFreq+0x200>)
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80026f8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80026fa:	4b6d      	ldr	r3, [pc, #436]	@ (80028b0 <HAL_RCC_GetSysClockFreq+0x200>)
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002702:	2b00      	cmp	r3, #0
 8002704:	d063      	beq.n	80027ce <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002706:	4b6a      	ldr	r3, [pc, #424]	@ (80028b0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	099b      	lsrs	r3, r3, #6
 800270c:	2200      	movs	r2, #0
 800270e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002710:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002712:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002714:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002718:	633b      	str	r3, [r7, #48]	@ 0x30
 800271a:	2300      	movs	r3, #0
 800271c:	637b      	str	r3, [r7, #52]	@ 0x34
 800271e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002722:	4622      	mov	r2, r4
 8002724:	462b      	mov	r3, r5
 8002726:	f04f 0000 	mov.w	r0, #0
 800272a:	f04f 0100 	mov.w	r1, #0
 800272e:	0159      	lsls	r1, r3, #5
 8002730:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002734:	0150      	lsls	r0, r2, #5
 8002736:	4602      	mov	r2, r0
 8002738:	460b      	mov	r3, r1
 800273a:	4621      	mov	r1, r4
 800273c:	1a51      	subs	r1, r2, r1
 800273e:	6139      	str	r1, [r7, #16]
 8002740:	4629      	mov	r1, r5
 8002742:	eb63 0301 	sbc.w	r3, r3, r1
 8002746:	617b      	str	r3, [r7, #20]
 8002748:	f04f 0200 	mov.w	r2, #0
 800274c:	f04f 0300 	mov.w	r3, #0
 8002750:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002754:	4659      	mov	r1, fp
 8002756:	018b      	lsls	r3, r1, #6
 8002758:	4651      	mov	r1, sl
 800275a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800275e:	4651      	mov	r1, sl
 8002760:	018a      	lsls	r2, r1, #6
 8002762:	4651      	mov	r1, sl
 8002764:	ebb2 0801 	subs.w	r8, r2, r1
 8002768:	4659      	mov	r1, fp
 800276a:	eb63 0901 	sbc.w	r9, r3, r1
 800276e:	f04f 0200 	mov.w	r2, #0
 8002772:	f04f 0300 	mov.w	r3, #0
 8002776:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800277a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800277e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002782:	4690      	mov	r8, r2
 8002784:	4699      	mov	r9, r3
 8002786:	4623      	mov	r3, r4
 8002788:	eb18 0303 	adds.w	r3, r8, r3
 800278c:	60bb      	str	r3, [r7, #8]
 800278e:	462b      	mov	r3, r5
 8002790:	eb49 0303 	adc.w	r3, r9, r3
 8002794:	60fb      	str	r3, [r7, #12]
 8002796:	f04f 0200 	mov.w	r2, #0
 800279a:	f04f 0300 	mov.w	r3, #0
 800279e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80027a2:	4629      	mov	r1, r5
 80027a4:	024b      	lsls	r3, r1, #9
 80027a6:	4621      	mov	r1, r4
 80027a8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80027ac:	4621      	mov	r1, r4
 80027ae:	024a      	lsls	r2, r1, #9
 80027b0:	4610      	mov	r0, r2
 80027b2:	4619      	mov	r1, r3
 80027b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80027b6:	2200      	movs	r2, #0
 80027b8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80027ba:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80027bc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80027c0:	f7fd fd02 	bl	80001c8 <__aeabi_uldivmod>
 80027c4:	4602      	mov	r2, r0
 80027c6:	460b      	mov	r3, r1
 80027c8:	4613      	mov	r3, r2
 80027ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80027cc:	e058      	b.n	8002880 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027ce:	4b38      	ldr	r3, [pc, #224]	@ (80028b0 <HAL_RCC_GetSysClockFreq+0x200>)
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	099b      	lsrs	r3, r3, #6
 80027d4:	2200      	movs	r2, #0
 80027d6:	4618      	mov	r0, r3
 80027d8:	4611      	mov	r1, r2
 80027da:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80027de:	623b      	str	r3, [r7, #32]
 80027e0:	2300      	movs	r3, #0
 80027e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80027e4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80027e8:	4642      	mov	r2, r8
 80027ea:	464b      	mov	r3, r9
 80027ec:	f04f 0000 	mov.w	r0, #0
 80027f0:	f04f 0100 	mov.w	r1, #0
 80027f4:	0159      	lsls	r1, r3, #5
 80027f6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80027fa:	0150      	lsls	r0, r2, #5
 80027fc:	4602      	mov	r2, r0
 80027fe:	460b      	mov	r3, r1
 8002800:	4641      	mov	r1, r8
 8002802:	ebb2 0a01 	subs.w	sl, r2, r1
 8002806:	4649      	mov	r1, r9
 8002808:	eb63 0b01 	sbc.w	fp, r3, r1
 800280c:	f04f 0200 	mov.w	r2, #0
 8002810:	f04f 0300 	mov.w	r3, #0
 8002814:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002818:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800281c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002820:	ebb2 040a 	subs.w	r4, r2, sl
 8002824:	eb63 050b 	sbc.w	r5, r3, fp
 8002828:	f04f 0200 	mov.w	r2, #0
 800282c:	f04f 0300 	mov.w	r3, #0
 8002830:	00eb      	lsls	r3, r5, #3
 8002832:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002836:	00e2      	lsls	r2, r4, #3
 8002838:	4614      	mov	r4, r2
 800283a:	461d      	mov	r5, r3
 800283c:	4643      	mov	r3, r8
 800283e:	18e3      	adds	r3, r4, r3
 8002840:	603b      	str	r3, [r7, #0]
 8002842:	464b      	mov	r3, r9
 8002844:	eb45 0303 	adc.w	r3, r5, r3
 8002848:	607b      	str	r3, [r7, #4]
 800284a:	f04f 0200 	mov.w	r2, #0
 800284e:	f04f 0300 	mov.w	r3, #0
 8002852:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002856:	4629      	mov	r1, r5
 8002858:	028b      	lsls	r3, r1, #10
 800285a:	4621      	mov	r1, r4
 800285c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002860:	4621      	mov	r1, r4
 8002862:	028a      	lsls	r2, r1, #10
 8002864:	4610      	mov	r0, r2
 8002866:	4619      	mov	r1, r3
 8002868:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800286a:	2200      	movs	r2, #0
 800286c:	61bb      	str	r3, [r7, #24]
 800286e:	61fa      	str	r2, [r7, #28]
 8002870:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002874:	f7fd fca8 	bl	80001c8 <__aeabi_uldivmod>
 8002878:	4602      	mov	r2, r0
 800287a:	460b      	mov	r3, r1
 800287c:	4613      	mov	r3, r2
 800287e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002880:	4b0b      	ldr	r3, [pc, #44]	@ (80028b0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	0c1b      	lsrs	r3, r3, #16
 8002886:	f003 0303 	and.w	r3, r3, #3
 800288a:	3301      	adds	r3, #1
 800288c:	005b      	lsls	r3, r3, #1
 800288e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002890:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002892:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002894:	fbb2 f3f3 	udiv	r3, r2, r3
 8002898:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800289a:	e002      	b.n	80028a2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800289c:	4b05      	ldr	r3, [pc, #20]	@ (80028b4 <HAL_RCC_GetSysClockFreq+0x204>)
 800289e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80028a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80028a2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80028a4:	4618      	mov	r0, r3
 80028a6:	3750      	adds	r7, #80	@ 0x50
 80028a8:	46bd      	mov	sp, r7
 80028aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80028ae:	bf00      	nop
 80028b0:	40023800 	.word	0x40023800
 80028b4:	00f42400 	.word	0x00f42400
 80028b8:	007a1200 	.word	0x007a1200

080028bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80028bc:	b480      	push	{r7}
 80028be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80028c0:	4b03      	ldr	r3, [pc, #12]	@ (80028d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80028c2:	681b      	ldr	r3, [r3, #0]
}
 80028c4:	4618      	mov	r0, r3
 80028c6:	46bd      	mov	sp, r7
 80028c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028cc:	4770      	bx	lr
 80028ce:	bf00      	nop
 80028d0:	20000014 	.word	0x20000014

080028d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80028d8:	f7ff fff0 	bl	80028bc <HAL_RCC_GetHCLKFreq>
 80028dc:	4602      	mov	r2, r0
 80028de:	4b05      	ldr	r3, [pc, #20]	@ (80028f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80028e0:	689b      	ldr	r3, [r3, #8]
 80028e2:	0a9b      	lsrs	r3, r3, #10
 80028e4:	f003 0307 	and.w	r3, r3, #7
 80028e8:	4903      	ldr	r1, [pc, #12]	@ (80028f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80028ea:	5ccb      	ldrb	r3, [r1, r3]
 80028ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	bd80      	pop	{r7, pc}
 80028f4:	40023800 	.word	0x40023800
 80028f8:	08003eb4 	.word	0x08003eb4

080028fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002900:	f7ff ffdc 	bl	80028bc <HAL_RCC_GetHCLKFreq>
 8002904:	4602      	mov	r2, r0
 8002906:	4b05      	ldr	r3, [pc, #20]	@ (800291c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	0b5b      	lsrs	r3, r3, #13
 800290c:	f003 0307 	and.w	r3, r3, #7
 8002910:	4903      	ldr	r1, [pc, #12]	@ (8002920 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002912:	5ccb      	ldrb	r3, [r1, r3]
 8002914:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002918:	4618      	mov	r0, r3
 800291a:	bd80      	pop	{r7, pc}
 800291c:	40023800 	.word	0x40023800
 8002920:	08003eb4 	.word	0x08003eb4

08002924 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b082      	sub	sp, #8
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d101      	bne.n	8002936 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002932:	2301      	movs	r3, #1
 8002934:	e041      	b.n	80029ba <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800293c:	b2db      	uxtb	r3, r3
 800293e:	2b00      	cmp	r3, #0
 8002940:	d106      	bne.n	8002950 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2200      	movs	r2, #0
 8002946:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800294a:	6878      	ldr	r0, [r7, #4]
 800294c:	f7fe fd54 	bl	80013f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2202      	movs	r2, #2
 8002954:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681a      	ldr	r2, [r3, #0]
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	3304      	adds	r3, #4
 8002960:	4619      	mov	r1, r3
 8002962:	4610      	mov	r0, r2
 8002964:	f000 f9b6 	bl	8002cd4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2201      	movs	r2, #1
 800296c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2201      	movs	r2, #1
 8002974:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2201      	movs	r2, #1
 800297c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2201      	movs	r2, #1
 8002984:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2201      	movs	r2, #1
 800298c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2201      	movs	r2, #1
 8002994:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2201      	movs	r2, #1
 800299c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2201      	movs	r2, #1
 80029a4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2201      	movs	r2, #1
 80029ac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2201      	movs	r2, #1
 80029b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80029b8:	2300      	movs	r3, #0
}
 80029ba:	4618      	mov	r0, r3
 80029bc:	3708      	adds	r7, #8
 80029be:	46bd      	mov	sp, r7
 80029c0:	bd80      	pop	{r7, pc}
	...

080029c4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80029c4:	b480      	push	{r7}
 80029c6:	b085      	sub	sp, #20
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80029d2:	b2db      	uxtb	r3, r3
 80029d4:	2b01      	cmp	r3, #1
 80029d6:	d001      	beq.n	80029dc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80029d8:	2301      	movs	r3, #1
 80029da:	e04e      	b.n	8002a7a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2202      	movs	r2, #2
 80029e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	68da      	ldr	r2, [r3, #12]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f042 0201 	orr.w	r2, r2, #1
 80029f2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a23      	ldr	r2, [pc, #140]	@ (8002a88 <HAL_TIM_Base_Start_IT+0xc4>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d022      	beq.n	8002a44 <HAL_TIM_Base_Start_IT+0x80>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a06:	d01d      	beq.n	8002a44 <HAL_TIM_Base_Start_IT+0x80>
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a1f      	ldr	r2, [pc, #124]	@ (8002a8c <HAL_TIM_Base_Start_IT+0xc8>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d018      	beq.n	8002a44 <HAL_TIM_Base_Start_IT+0x80>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4a1e      	ldr	r2, [pc, #120]	@ (8002a90 <HAL_TIM_Base_Start_IT+0xcc>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d013      	beq.n	8002a44 <HAL_TIM_Base_Start_IT+0x80>
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a1c      	ldr	r2, [pc, #112]	@ (8002a94 <HAL_TIM_Base_Start_IT+0xd0>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d00e      	beq.n	8002a44 <HAL_TIM_Base_Start_IT+0x80>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a1b      	ldr	r2, [pc, #108]	@ (8002a98 <HAL_TIM_Base_Start_IT+0xd4>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d009      	beq.n	8002a44 <HAL_TIM_Base_Start_IT+0x80>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a19      	ldr	r2, [pc, #100]	@ (8002a9c <HAL_TIM_Base_Start_IT+0xd8>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d004      	beq.n	8002a44 <HAL_TIM_Base_Start_IT+0x80>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4a18      	ldr	r2, [pc, #96]	@ (8002aa0 <HAL_TIM_Base_Start_IT+0xdc>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d111      	bne.n	8002a68 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	689b      	ldr	r3, [r3, #8]
 8002a4a:	f003 0307 	and.w	r3, r3, #7
 8002a4e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	2b06      	cmp	r3, #6
 8002a54:	d010      	beq.n	8002a78 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	681a      	ldr	r2, [r3, #0]
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f042 0201 	orr.w	r2, r2, #1
 8002a64:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a66:	e007      	b.n	8002a78 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	681a      	ldr	r2, [r3, #0]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f042 0201 	orr.w	r2, r2, #1
 8002a76:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002a78:	2300      	movs	r3, #0
}
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	3714      	adds	r7, #20
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a84:	4770      	bx	lr
 8002a86:	bf00      	nop
 8002a88:	40010000 	.word	0x40010000
 8002a8c:	40000400 	.word	0x40000400
 8002a90:	40000800 	.word	0x40000800
 8002a94:	40000c00 	.word	0x40000c00
 8002a98:	40010400 	.word	0x40010400
 8002a9c:	40014000 	.word	0x40014000
 8002aa0:	40001800 	.word	0x40001800

08002aa4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b084      	sub	sp, #16
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	68db      	ldr	r3, [r3, #12]
 8002ab2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	691b      	ldr	r3, [r3, #16]
 8002aba:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002abc:	68bb      	ldr	r3, [r7, #8]
 8002abe:	f003 0302 	and.w	r3, r3, #2
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d020      	beq.n	8002b08 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	f003 0302 	and.w	r3, r3, #2
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d01b      	beq.n	8002b08 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f06f 0202 	mvn.w	r2, #2
 8002ad8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2201      	movs	r2, #1
 8002ade:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	699b      	ldr	r3, [r3, #24]
 8002ae6:	f003 0303 	and.w	r3, r3, #3
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d003      	beq.n	8002af6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002aee:	6878      	ldr	r0, [r7, #4]
 8002af0:	f000 f8d2 	bl	8002c98 <HAL_TIM_IC_CaptureCallback>
 8002af4:	e005      	b.n	8002b02 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002af6:	6878      	ldr	r0, [r7, #4]
 8002af8:	f000 f8c4 	bl	8002c84 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002afc:	6878      	ldr	r0, [r7, #4]
 8002afe:	f000 f8d5 	bl	8002cac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2200      	movs	r2, #0
 8002b06:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002b08:	68bb      	ldr	r3, [r7, #8]
 8002b0a:	f003 0304 	and.w	r3, r3, #4
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d020      	beq.n	8002b54 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	f003 0304 	and.w	r3, r3, #4
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d01b      	beq.n	8002b54 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f06f 0204 	mvn.w	r2, #4
 8002b24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2202      	movs	r2, #2
 8002b2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	699b      	ldr	r3, [r3, #24]
 8002b32:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d003      	beq.n	8002b42 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b3a:	6878      	ldr	r0, [r7, #4]
 8002b3c:	f000 f8ac 	bl	8002c98 <HAL_TIM_IC_CaptureCallback>
 8002b40:	e005      	b.n	8002b4e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b42:	6878      	ldr	r0, [r7, #4]
 8002b44:	f000 f89e 	bl	8002c84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b48:	6878      	ldr	r0, [r7, #4]
 8002b4a:	f000 f8af 	bl	8002cac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2200      	movs	r2, #0
 8002b52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	f003 0308 	and.w	r3, r3, #8
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d020      	beq.n	8002ba0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	f003 0308 	and.w	r3, r3, #8
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d01b      	beq.n	8002ba0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f06f 0208 	mvn.w	r2, #8
 8002b70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2204      	movs	r2, #4
 8002b76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	69db      	ldr	r3, [r3, #28]
 8002b7e:	f003 0303 	and.w	r3, r3, #3
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d003      	beq.n	8002b8e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b86:	6878      	ldr	r0, [r7, #4]
 8002b88:	f000 f886 	bl	8002c98 <HAL_TIM_IC_CaptureCallback>
 8002b8c:	e005      	b.n	8002b9a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b8e:	6878      	ldr	r0, [r7, #4]
 8002b90:	f000 f878 	bl	8002c84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b94:	6878      	ldr	r0, [r7, #4]
 8002b96:	f000 f889 	bl	8002cac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002ba0:	68bb      	ldr	r3, [r7, #8]
 8002ba2:	f003 0310 	and.w	r3, r3, #16
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d020      	beq.n	8002bec <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	f003 0310 	and.w	r3, r3, #16
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d01b      	beq.n	8002bec <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f06f 0210 	mvn.w	r2, #16
 8002bbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2208      	movs	r2, #8
 8002bc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	69db      	ldr	r3, [r3, #28]
 8002bca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d003      	beq.n	8002bda <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002bd2:	6878      	ldr	r0, [r7, #4]
 8002bd4:	f000 f860 	bl	8002c98 <HAL_TIM_IC_CaptureCallback>
 8002bd8:	e005      	b.n	8002be6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bda:	6878      	ldr	r0, [r7, #4]
 8002bdc:	f000 f852 	bl	8002c84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002be0:	6878      	ldr	r0, [r7, #4]
 8002be2:	f000 f863 	bl	8002cac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2200      	movs	r2, #0
 8002bea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002bec:	68bb      	ldr	r3, [r7, #8]
 8002bee:	f003 0301 	and.w	r3, r3, #1
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d00c      	beq.n	8002c10 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	f003 0301 	and.w	r3, r3, #1
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d007      	beq.n	8002c10 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f06f 0201 	mvn.w	r2, #1
 8002c08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002c0a:	6878      	ldr	r0, [r7, #4]
 8002c0c:	f7fe fb3e 	bl	800128c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002c10:	68bb      	ldr	r3, [r7, #8]
 8002c12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d00c      	beq.n	8002c34 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d007      	beq.n	8002c34 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002c2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002c2e:	6878      	ldr	r0, [r7, #4]
 8002c30:	f000 f982 	bl	8002f38 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002c34:	68bb      	ldr	r3, [r7, #8]
 8002c36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d00c      	beq.n	8002c58 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d007      	beq.n	8002c58 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002c50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002c52:	6878      	ldr	r0, [r7, #4]
 8002c54:	f000 f834 	bl	8002cc0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002c58:	68bb      	ldr	r3, [r7, #8]
 8002c5a:	f003 0320 	and.w	r3, r3, #32
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d00c      	beq.n	8002c7c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	f003 0320 	and.w	r3, r3, #32
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d007      	beq.n	8002c7c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f06f 0220 	mvn.w	r2, #32
 8002c74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002c76:	6878      	ldr	r0, [r7, #4]
 8002c78:	f000 f954 	bl	8002f24 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002c7c:	bf00      	nop
 8002c7e:	3710      	adds	r7, #16
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bd80      	pop	{r7, pc}

08002c84 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c84:	b480      	push	{r7}
 8002c86:	b083      	sub	sp, #12
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002c8c:	bf00      	nop
 8002c8e:	370c      	adds	r7, #12
 8002c90:	46bd      	mov	sp, r7
 8002c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c96:	4770      	bx	lr

08002c98 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	b083      	sub	sp, #12
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002ca0:	bf00      	nop
 8002ca2:	370c      	adds	r7, #12
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002caa:	4770      	bx	lr

08002cac <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002cac:	b480      	push	{r7}
 8002cae:	b083      	sub	sp, #12
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002cb4:	bf00      	nop
 8002cb6:	370c      	adds	r7, #12
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbe:	4770      	bx	lr

08002cc0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	b083      	sub	sp, #12
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002cc8:	bf00      	nop
 8002cca:	370c      	adds	r7, #12
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd2:	4770      	bx	lr

08002cd4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	b085      	sub	sp, #20
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
 8002cdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	4a46      	ldr	r2, [pc, #280]	@ (8002e00 <TIM_Base_SetConfig+0x12c>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d013      	beq.n	8002d14 <TIM_Base_SetConfig+0x40>
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002cf2:	d00f      	beq.n	8002d14 <TIM_Base_SetConfig+0x40>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	4a43      	ldr	r2, [pc, #268]	@ (8002e04 <TIM_Base_SetConfig+0x130>)
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d00b      	beq.n	8002d14 <TIM_Base_SetConfig+0x40>
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	4a42      	ldr	r2, [pc, #264]	@ (8002e08 <TIM_Base_SetConfig+0x134>)
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d007      	beq.n	8002d14 <TIM_Base_SetConfig+0x40>
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	4a41      	ldr	r2, [pc, #260]	@ (8002e0c <TIM_Base_SetConfig+0x138>)
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d003      	beq.n	8002d14 <TIM_Base_SetConfig+0x40>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	4a40      	ldr	r2, [pc, #256]	@ (8002e10 <TIM_Base_SetConfig+0x13c>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d108      	bne.n	8002d26 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002d1a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	68fa      	ldr	r2, [r7, #12]
 8002d22:	4313      	orrs	r3, r2
 8002d24:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	4a35      	ldr	r2, [pc, #212]	@ (8002e00 <TIM_Base_SetConfig+0x12c>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d02b      	beq.n	8002d86 <TIM_Base_SetConfig+0xb2>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d34:	d027      	beq.n	8002d86 <TIM_Base_SetConfig+0xb2>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	4a32      	ldr	r2, [pc, #200]	@ (8002e04 <TIM_Base_SetConfig+0x130>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d023      	beq.n	8002d86 <TIM_Base_SetConfig+0xb2>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	4a31      	ldr	r2, [pc, #196]	@ (8002e08 <TIM_Base_SetConfig+0x134>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d01f      	beq.n	8002d86 <TIM_Base_SetConfig+0xb2>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	4a30      	ldr	r2, [pc, #192]	@ (8002e0c <TIM_Base_SetConfig+0x138>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d01b      	beq.n	8002d86 <TIM_Base_SetConfig+0xb2>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	4a2f      	ldr	r2, [pc, #188]	@ (8002e10 <TIM_Base_SetConfig+0x13c>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d017      	beq.n	8002d86 <TIM_Base_SetConfig+0xb2>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	4a2e      	ldr	r2, [pc, #184]	@ (8002e14 <TIM_Base_SetConfig+0x140>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d013      	beq.n	8002d86 <TIM_Base_SetConfig+0xb2>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	4a2d      	ldr	r2, [pc, #180]	@ (8002e18 <TIM_Base_SetConfig+0x144>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d00f      	beq.n	8002d86 <TIM_Base_SetConfig+0xb2>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	4a2c      	ldr	r2, [pc, #176]	@ (8002e1c <TIM_Base_SetConfig+0x148>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d00b      	beq.n	8002d86 <TIM_Base_SetConfig+0xb2>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	4a2b      	ldr	r2, [pc, #172]	@ (8002e20 <TIM_Base_SetConfig+0x14c>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d007      	beq.n	8002d86 <TIM_Base_SetConfig+0xb2>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	4a2a      	ldr	r2, [pc, #168]	@ (8002e24 <TIM_Base_SetConfig+0x150>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d003      	beq.n	8002d86 <TIM_Base_SetConfig+0xb2>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	4a29      	ldr	r2, [pc, #164]	@ (8002e28 <TIM_Base_SetConfig+0x154>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d108      	bne.n	8002d98 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002d8c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	68db      	ldr	r3, [r3, #12]
 8002d92:	68fa      	ldr	r2, [r7, #12]
 8002d94:	4313      	orrs	r3, r2
 8002d96:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	695b      	ldr	r3, [r3, #20]
 8002da2:	4313      	orrs	r3, r2
 8002da4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	68fa      	ldr	r2, [r7, #12]
 8002daa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	689a      	ldr	r2, [r3, #8]
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	681a      	ldr	r2, [r3, #0]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	4a10      	ldr	r2, [pc, #64]	@ (8002e00 <TIM_Base_SetConfig+0x12c>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d003      	beq.n	8002dcc <TIM_Base_SetConfig+0xf8>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	4a12      	ldr	r2, [pc, #72]	@ (8002e10 <TIM_Base_SetConfig+0x13c>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d103      	bne.n	8002dd4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	691a      	ldr	r2, [r3, #16]
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2201      	movs	r2, #1
 8002dd8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	691b      	ldr	r3, [r3, #16]
 8002dde:	f003 0301 	and.w	r3, r3, #1
 8002de2:	2b01      	cmp	r3, #1
 8002de4:	d105      	bne.n	8002df2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	691b      	ldr	r3, [r3, #16]
 8002dea:	f023 0201 	bic.w	r2, r3, #1
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	611a      	str	r2, [r3, #16]
  }
}
 8002df2:	bf00      	nop
 8002df4:	3714      	adds	r7, #20
 8002df6:	46bd      	mov	sp, r7
 8002df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfc:	4770      	bx	lr
 8002dfe:	bf00      	nop
 8002e00:	40010000 	.word	0x40010000
 8002e04:	40000400 	.word	0x40000400
 8002e08:	40000800 	.word	0x40000800
 8002e0c:	40000c00 	.word	0x40000c00
 8002e10:	40010400 	.word	0x40010400
 8002e14:	40014000 	.word	0x40014000
 8002e18:	40014400 	.word	0x40014400
 8002e1c:	40014800 	.word	0x40014800
 8002e20:	40001800 	.word	0x40001800
 8002e24:	40001c00 	.word	0x40001c00
 8002e28:	40002000 	.word	0x40002000

08002e2c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	b085      	sub	sp, #20
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
 8002e34:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002e3c:	2b01      	cmp	r3, #1
 8002e3e:	d101      	bne.n	8002e44 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002e40:	2302      	movs	r3, #2
 8002e42:	e05a      	b.n	8002efa <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2201      	movs	r2, #1
 8002e48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2202      	movs	r2, #2
 8002e50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	689b      	ldr	r3, [r3, #8]
 8002e62:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002e6a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	68fa      	ldr	r2, [r7, #12]
 8002e72:	4313      	orrs	r3, r2
 8002e74:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	68fa      	ldr	r2, [r7, #12]
 8002e7c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4a21      	ldr	r2, [pc, #132]	@ (8002f08 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d022      	beq.n	8002ece <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e90:	d01d      	beq.n	8002ece <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4a1d      	ldr	r2, [pc, #116]	@ (8002f0c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d018      	beq.n	8002ece <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a1b      	ldr	r2, [pc, #108]	@ (8002f10 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d013      	beq.n	8002ece <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4a1a      	ldr	r2, [pc, #104]	@ (8002f14 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d00e      	beq.n	8002ece <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4a18      	ldr	r2, [pc, #96]	@ (8002f18 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d009      	beq.n	8002ece <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4a17      	ldr	r2, [pc, #92]	@ (8002f1c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d004      	beq.n	8002ece <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a15      	ldr	r2, [pc, #84]	@ (8002f20 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d10c      	bne.n	8002ee8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002ece:	68bb      	ldr	r3, [r7, #8]
 8002ed0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002ed4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	68ba      	ldr	r2, [r7, #8]
 8002edc:	4313      	orrs	r3, r2
 8002ede:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	68ba      	ldr	r2, [r7, #8]
 8002ee6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2201      	movs	r2, #1
 8002eec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002ef8:	2300      	movs	r3, #0
}
 8002efa:	4618      	mov	r0, r3
 8002efc:	3714      	adds	r7, #20
 8002efe:	46bd      	mov	sp, r7
 8002f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f04:	4770      	bx	lr
 8002f06:	bf00      	nop
 8002f08:	40010000 	.word	0x40010000
 8002f0c:	40000400 	.word	0x40000400
 8002f10:	40000800 	.word	0x40000800
 8002f14:	40000c00 	.word	0x40000c00
 8002f18:	40010400 	.word	0x40010400
 8002f1c:	40014000 	.word	0x40014000
 8002f20:	40001800 	.word	0x40001800

08002f24 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002f24:	b480      	push	{r7}
 8002f26:	b083      	sub	sp, #12
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002f2c:	bf00      	nop
 8002f2e:	370c      	adds	r7, #12
 8002f30:	46bd      	mov	sp, r7
 8002f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f36:	4770      	bx	lr

08002f38 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	b083      	sub	sp, #12
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002f40:	bf00      	nop
 8002f42:	370c      	adds	r7, #12
 8002f44:	46bd      	mov	sp, r7
 8002f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4a:	4770      	bx	lr

08002f4c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b082      	sub	sp, #8
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d101      	bne.n	8002f5e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	e042      	b.n	8002fe4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f64:	b2db      	uxtb	r3, r3
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d106      	bne.n	8002f78 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f72:	6878      	ldr	r0, [r7, #4]
 8002f74:	f7fe fa62 	bl	800143c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2224      	movs	r2, #36	@ 0x24
 8002f7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	68da      	ldr	r2, [r3, #12]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002f8e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002f90:	6878      	ldr	r0, [r7, #4]
 8002f92:	f000 fcdb 	bl	800394c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	691a      	ldr	r2, [r3, #16]
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002fa4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	695a      	ldr	r2, [r3, #20]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002fb4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	68da      	ldr	r2, [r3, #12]
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002fc4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2200      	movs	r2, #0
 8002fca:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2220      	movs	r2, #32
 8002fd0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2220      	movs	r2, #32
 8002fd8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2200      	movs	r2, #0
 8002fe0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002fe2:	2300      	movs	r3, #0
}
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	3708      	adds	r7, #8
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	bd80      	pop	{r7, pc}

08002fec <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b084      	sub	sp, #16
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	60f8      	str	r0, [r7, #12]
 8002ff4:	60b9      	str	r1, [r7, #8]
 8002ff6:	4613      	mov	r3, r2
 8002ff8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003000:	b2db      	uxtb	r3, r3
 8003002:	2b20      	cmp	r3, #32
 8003004:	d112      	bne.n	800302c <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003006:	68bb      	ldr	r3, [r7, #8]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d002      	beq.n	8003012 <HAL_UART_Receive_IT+0x26>
 800300c:	88fb      	ldrh	r3, [r7, #6]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d101      	bne.n	8003016 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003012:	2301      	movs	r3, #1
 8003014:	e00b      	b.n	800302e <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	2200      	movs	r2, #0
 800301a:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800301c:	88fb      	ldrh	r3, [r7, #6]
 800301e:	461a      	mov	r2, r3
 8003020:	68b9      	ldr	r1, [r7, #8]
 8003022:	68f8      	ldr	r0, [r7, #12]
 8003024:	f000 faba 	bl	800359c <UART_Start_Receive_IT>
 8003028:	4603      	mov	r3, r0
 800302a:	e000      	b.n	800302e <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800302c:	2302      	movs	r3, #2
  }
}
 800302e:	4618      	mov	r0, r3
 8003030:	3710      	adds	r7, #16
 8003032:	46bd      	mov	sp, r7
 8003034:	bd80      	pop	{r7, pc}
	...

08003038 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b0ba      	sub	sp, #232	@ 0xe8
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	68db      	ldr	r3, [r3, #12]
 8003050:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	695b      	ldr	r3, [r3, #20]
 800305a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800305e:	2300      	movs	r3, #0
 8003060:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003064:	2300      	movs	r3, #0
 8003066:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800306a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800306e:	f003 030f 	and.w	r3, r3, #15
 8003072:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003076:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800307a:	2b00      	cmp	r3, #0
 800307c:	d10f      	bne.n	800309e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800307e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003082:	f003 0320 	and.w	r3, r3, #32
 8003086:	2b00      	cmp	r3, #0
 8003088:	d009      	beq.n	800309e <HAL_UART_IRQHandler+0x66>
 800308a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800308e:	f003 0320 	and.w	r3, r3, #32
 8003092:	2b00      	cmp	r3, #0
 8003094:	d003      	beq.n	800309e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003096:	6878      	ldr	r0, [r7, #4]
 8003098:	f000 fb99 	bl	80037ce <UART_Receive_IT>
      return;
 800309c:	e25b      	b.n	8003556 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800309e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	f000 80de 	beq.w	8003264 <HAL_UART_IRQHandler+0x22c>
 80030a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80030ac:	f003 0301 	and.w	r3, r3, #1
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d106      	bne.n	80030c2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80030b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80030b8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80030bc:	2b00      	cmp	r3, #0
 80030be:	f000 80d1 	beq.w	8003264 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80030c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80030c6:	f003 0301 	and.w	r3, r3, #1
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d00b      	beq.n	80030e6 <HAL_UART_IRQHandler+0xae>
 80030ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80030d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d005      	beq.n	80030e6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030de:	f043 0201 	orr.w	r2, r3, #1
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80030e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80030ea:	f003 0304 	and.w	r3, r3, #4
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d00b      	beq.n	800310a <HAL_UART_IRQHandler+0xd2>
 80030f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80030f6:	f003 0301 	and.w	r3, r3, #1
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d005      	beq.n	800310a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003102:	f043 0202 	orr.w	r2, r3, #2
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800310a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800310e:	f003 0302 	and.w	r3, r3, #2
 8003112:	2b00      	cmp	r3, #0
 8003114:	d00b      	beq.n	800312e <HAL_UART_IRQHandler+0xf6>
 8003116:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800311a:	f003 0301 	and.w	r3, r3, #1
 800311e:	2b00      	cmp	r3, #0
 8003120:	d005      	beq.n	800312e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003126:	f043 0204 	orr.w	r2, r3, #4
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800312e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003132:	f003 0308 	and.w	r3, r3, #8
 8003136:	2b00      	cmp	r3, #0
 8003138:	d011      	beq.n	800315e <HAL_UART_IRQHandler+0x126>
 800313a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800313e:	f003 0320 	and.w	r3, r3, #32
 8003142:	2b00      	cmp	r3, #0
 8003144:	d105      	bne.n	8003152 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003146:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800314a:	f003 0301 	and.w	r3, r3, #1
 800314e:	2b00      	cmp	r3, #0
 8003150:	d005      	beq.n	800315e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003156:	f043 0208 	orr.w	r2, r3, #8
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003162:	2b00      	cmp	r3, #0
 8003164:	f000 81f2 	beq.w	800354c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003168:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800316c:	f003 0320 	and.w	r3, r3, #32
 8003170:	2b00      	cmp	r3, #0
 8003172:	d008      	beq.n	8003186 <HAL_UART_IRQHandler+0x14e>
 8003174:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003178:	f003 0320 	and.w	r3, r3, #32
 800317c:	2b00      	cmp	r3, #0
 800317e:	d002      	beq.n	8003186 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003180:	6878      	ldr	r0, [r7, #4]
 8003182:	f000 fb24 	bl	80037ce <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	695b      	ldr	r3, [r3, #20]
 800318c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003190:	2b40      	cmp	r3, #64	@ 0x40
 8003192:	bf0c      	ite	eq
 8003194:	2301      	moveq	r3, #1
 8003196:	2300      	movne	r3, #0
 8003198:	b2db      	uxtb	r3, r3
 800319a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031a2:	f003 0308 	and.w	r3, r3, #8
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d103      	bne.n	80031b2 <HAL_UART_IRQHandler+0x17a>
 80031aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d04f      	beq.n	8003252 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80031b2:	6878      	ldr	r0, [r7, #4]
 80031b4:	f000 fa2c 	bl	8003610 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	695b      	ldr	r3, [r3, #20]
 80031be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031c2:	2b40      	cmp	r3, #64	@ 0x40
 80031c4:	d141      	bne.n	800324a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	3314      	adds	r3, #20
 80031cc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031d0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80031d4:	e853 3f00 	ldrex	r3, [r3]
 80031d8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80031dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80031e0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80031e4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	3314      	adds	r3, #20
 80031ee:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80031f2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80031f6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031fa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80031fe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003202:	e841 2300 	strex	r3, r2, [r1]
 8003206:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800320a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800320e:	2b00      	cmp	r3, #0
 8003210:	d1d9      	bne.n	80031c6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003216:	2b00      	cmp	r3, #0
 8003218:	d013      	beq.n	8003242 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800321e:	4a7e      	ldr	r2, [pc, #504]	@ (8003418 <HAL_UART_IRQHandler+0x3e0>)
 8003220:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003226:	4618      	mov	r0, r3
 8003228:	f7fe fcc1 	bl	8001bae <HAL_DMA_Abort_IT>
 800322c:	4603      	mov	r3, r0
 800322e:	2b00      	cmp	r3, #0
 8003230:	d016      	beq.n	8003260 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003236:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003238:	687a      	ldr	r2, [r7, #4]
 800323a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800323c:	4610      	mov	r0, r2
 800323e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003240:	e00e      	b.n	8003260 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003242:	6878      	ldr	r0, [r7, #4]
 8003244:	f000 f994 	bl	8003570 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003248:	e00a      	b.n	8003260 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800324a:	6878      	ldr	r0, [r7, #4]
 800324c:	f000 f990 	bl	8003570 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003250:	e006      	b.n	8003260 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003252:	6878      	ldr	r0, [r7, #4]
 8003254:	f000 f98c 	bl	8003570 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2200      	movs	r2, #0
 800325c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800325e:	e175      	b.n	800354c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003260:	bf00      	nop
    return;
 8003262:	e173      	b.n	800354c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003268:	2b01      	cmp	r3, #1
 800326a:	f040 814f 	bne.w	800350c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800326e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003272:	f003 0310 	and.w	r3, r3, #16
 8003276:	2b00      	cmp	r3, #0
 8003278:	f000 8148 	beq.w	800350c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800327c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003280:	f003 0310 	and.w	r3, r3, #16
 8003284:	2b00      	cmp	r3, #0
 8003286:	f000 8141 	beq.w	800350c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800328a:	2300      	movs	r3, #0
 800328c:	60bb      	str	r3, [r7, #8]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	60bb      	str	r3, [r7, #8]
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	60bb      	str	r3, [r7, #8]
 800329e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	695b      	ldr	r3, [r3, #20]
 80032a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032aa:	2b40      	cmp	r3, #64	@ 0x40
 80032ac:	f040 80b6 	bne.w	800341c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80032bc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	f000 8145 	beq.w	8003550 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80032ca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80032ce:	429a      	cmp	r2, r3
 80032d0:	f080 813e 	bcs.w	8003550 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80032da:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032e0:	69db      	ldr	r3, [r3, #28]
 80032e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80032e6:	f000 8088 	beq.w	80033fa <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	330c      	adds	r3, #12
 80032f0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032f4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80032f8:	e853 3f00 	ldrex	r3, [r3]
 80032fc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003300:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003304:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003308:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	330c      	adds	r3, #12
 8003312:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003316:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800331a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800331e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003322:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003326:	e841 2300 	strex	r3, r2, [r1]
 800332a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800332e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003332:	2b00      	cmp	r3, #0
 8003334:	d1d9      	bne.n	80032ea <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	3314      	adds	r3, #20
 800333c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800333e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003340:	e853 3f00 	ldrex	r3, [r3]
 8003344:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003346:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003348:	f023 0301 	bic.w	r3, r3, #1
 800334c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	3314      	adds	r3, #20
 8003356:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800335a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800335e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003360:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003362:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003366:	e841 2300 	strex	r3, r2, [r1]
 800336a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800336c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800336e:	2b00      	cmp	r3, #0
 8003370:	d1e1      	bne.n	8003336 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	3314      	adds	r3, #20
 8003378:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800337a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800337c:	e853 3f00 	ldrex	r3, [r3]
 8003380:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003382:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003384:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003388:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	3314      	adds	r3, #20
 8003392:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003396:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003398:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800339a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800339c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800339e:	e841 2300 	strex	r3, r2, [r1]
 80033a2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80033a4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d1e3      	bne.n	8003372 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2220      	movs	r2, #32
 80033ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2200      	movs	r2, #0
 80033b6:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	330c      	adds	r3, #12
 80033be:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033c0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80033c2:	e853 3f00 	ldrex	r3, [r3]
 80033c6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80033c8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80033ca:	f023 0310 	bic.w	r3, r3, #16
 80033ce:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	330c      	adds	r3, #12
 80033d8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80033dc:	65ba      	str	r2, [r7, #88]	@ 0x58
 80033de:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033e0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80033e2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80033e4:	e841 2300 	strex	r3, r2, [r1]
 80033e8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80033ea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d1e3      	bne.n	80033b8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033f4:	4618      	mov	r0, r3
 80033f6:	f7fe fb6a 	bl	8001ace <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2202      	movs	r2, #2
 80033fe:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003408:	b29b      	uxth	r3, r3
 800340a:	1ad3      	subs	r3, r2, r3
 800340c:	b29b      	uxth	r3, r3
 800340e:	4619      	mov	r1, r3
 8003410:	6878      	ldr	r0, [r7, #4]
 8003412:	f000 f8b7 	bl	8003584 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003416:	e09b      	b.n	8003550 <HAL_UART_IRQHandler+0x518>
 8003418:	080036d7 	.word	0x080036d7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003424:	b29b      	uxth	r3, r3
 8003426:	1ad3      	subs	r3, r2, r3
 8003428:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003430:	b29b      	uxth	r3, r3
 8003432:	2b00      	cmp	r3, #0
 8003434:	f000 808e 	beq.w	8003554 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003438:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800343c:	2b00      	cmp	r3, #0
 800343e:	f000 8089 	beq.w	8003554 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	330c      	adds	r3, #12
 8003448:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800344a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800344c:	e853 3f00 	ldrex	r3, [r3]
 8003450:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003452:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003454:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003458:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	330c      	adds	r3, #12
 8003462:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003466:	647a      	str	r2, [r7, #68]	@ 0x44
 8003468:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800346a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800346c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800346e:	e841 2300 	strex	r3, r2, [r1]
 8003472:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003474:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003476:	2b00      	cmp	r3, #0
 8003478:	d1e3      	bne.n	8003442 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	3314      	adds	r3, #20
 8003480:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003482:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003484:	e853 3f00 	ldrex	r3, [r3]
 8003488:	623b      	str	r3, [r7, #32]
   return(result);
 800348a:	6a3b      	ldr	r3, [r7, #32]
 800348c:	f023 0301 	bic.w	r3, r3, #1
 8003490:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	3314      	adds	r3, #20
 800349a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800349e:	633a      	str	r2, [r7, #48]	@ 0x30
 80034a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034a2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80034a4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80034a6:	e841 2300 	strex	r3, r2, [r1]
 80034aa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80034ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d1e3      	bne.n	800347a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2220      	movs	r2, #32
 80034b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2200      	movs	r2, #0
 80034be:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	330c      	adds	r3, #12
 80034c6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034c8:	693b      	ldr	r3, [r7, #16]
 80034ca:	e853 3f00 	ldrex	r3, [r3]
 80034ce:	60fb      	str	r3, [r7, #12]
   return(result);
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	f023 0310 	bic.w	r3, r3, #16
 80034d6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	330c      	adds	r3, #12
 80034e0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80034e4:	61fa      	str	r2, [r7, #28]
 80034e6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034e8:	69b9      	ldr	r1, [r7, #24]
 80034ea:	69fa      	ldr	r2, [r7, #28]
 80034ec:	e841 2300 	strex	r3, r2, [r1]
 80034f0:	617b      	str	r3, [r7, #20]
   return(result);
 80034f2:	697b      	ldr	r3, [r7, #20]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d1e3      	bne.n	80034c0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2202      	movs	r2, #2
 80034fc:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80034fe:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003502:	4619      	mov	r1, r3
 8003504:	6878      	ldr	r0, [r7, #4]
 8003506:	f000 f83d 	bl	8003584 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800350a:	e023      	b.n	8003554 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800350c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003510:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003514:	2b00      	cmp	r3, #0
 8003516:	d009      	beq.n	800352c <HAL_UART_IRQHandler+0x4f4>
 8003518:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800351c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003520:	2b00      	cmp	r3, #0
 8003522:	d003      	beq.n	800352c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003524:	6878      	ldr	r0, [r7, #4]
 8003526:	f000 f8ea 	bl	80036fe <UART_Transmit_IT>
    return;
 800352a:	e014      	b.n	8003556 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800352c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003530:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003534:	2b00      	cmp	r3, #0
 8003536:	d00e      	beq.n	8003556 <HAL_UART_IRQHandler+0x51e>
 8003538:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800353c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003540:	2b00      	cmp	r3, #0
 8003542:	d008      	beq.n	8003556 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003544:	6878      	ldr	r0, [r7, #4]
 8003546:	f000 f92a 	bl	800379e <UART_EndTransmit_IT>
    return;
 800354a:	e004      	b.n	8003556 <HAL_UART_IRQHandler+0x51e>
    return;
 800354c:	bf00      	nop
 800354e:	e002      	b.n	8003556 <HAL_UART_IRQHandler+0x51e>
      return;
 8003550:	bf00      	nop
 8003552:	e000      	b.n	8003556 <HAL_UART_IRQHandler+0x51e>
      return;
 8003554:	bf00      	nop
  }
}
 8003556:	37e8      	adds	r7, #232	@ 0xe8
 8003558:	46bd      	mov	sp, r7
 800355a:	bd80      	pop	{r7, pc}

0800355c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800355c:	b480      	push	{r7}
 800355e:	b083      	sub	sp, #12
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003564:	bf00      	nop
 8003566:	370c      	adds	r7, #12
 8003568:	46bd      	mov	sp, r7
 800356a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356e:	4770      	bx	lr

08003570 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003570:	b480      	push	{r7}
 8003572:	b083      	sub	sp, #12
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003578:	bf00      	nop
 800357a:	370c      	adds	r7, #12
 800357c:	46bd      	mov	sp, r7
 800357e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003582:	4770      	bx	lr

08003584 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003584:	b480      	push	{r7}
 8003586:	b083      	sub	sp, #12
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
 800358c:	460b      	mov	r3, r1
 800358e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003590:	bf00      	nop
 8003592:	370c      	adds	r7, #12
 8003594:	46bd      	mov	sp, r7
 8003596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359a:	4770      	bx	lr

0800359c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800359c:	b480      	push	{r7}
 800359e:	b085      	sub	sp, #20
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	60f8      	str	r0, [r7, #12]
 80035a4:	60b9      	str	r1, [r7, #8]
 80035a6:	4613      	mov	r3, r2
 80035a8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	68ba      	ldr	r2, [r7, #8]
 80035ae:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	88fa      	ldrh	r2, [r7, #6]
 80035b4:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	88fa      	ldrh	r2, [r7, #6]
 80035ba:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	2200      	movs	r2, #0
 80035c0:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	2222      	movs	r2, #34	@ 0x22
 80035c6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	691b      	ldr	r3, [r3, #16]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d007      	beq.n	80035e2 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	68da      	ldr	r2, [r3, #12]
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80035e0:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	695a      	ldr	r2, [r3, #20]
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f042 0201 	orr.w	r2, r2, #1
 80035f0:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	68da      	ldr	r2, [r3, #12]
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f042 0220 	orr.w	r2, r2, #32
 8003600:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003602:	2300      	movs	r3, #0
}
 8003604:	4618      	mov	r0, r3
 8003606:	3714      	adds	r7, #20
 8003608:	46bd      	mov	sp, r7
 800360a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360e:	4770      	bx	lr

08003610 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003610:	b480      	push	{r7}
 8003612:	b095      	sub	sp, #84	@ 0x54
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	330c      	adds	r3, #12
 800361e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003620:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003622:	e853 3f00 	ldrex	r3, [r3]
 8003626:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003628:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800362a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800362e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	330c      	adds	r3, #12
 8003636:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003638:	643a      	str	r2, [r7, #64]	@ 0x40
 800363a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800363c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800363e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003640:	e841 2300 	strex	r3, r2, [r1]
 8003644:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003646:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003648:	2b00      	cmp	r3, #0
 800364a:	d1e5      	bne.n	8003618 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	3314      	adds	r3, #20
 8003652:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003654:	6a3b      	ldr	r3, [r7, #32]
 8003656:	e853 3f00 	ldrex	r3, [r3]
 800365a:	61fb      	str	r3, [r7, #28]
   return(result);
 800365c:	69fb      	ldr	r3, [r7, #28]
 800365e:	f023 0301 	bic.w	r3, r3, #1
 8003662:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	3314      	adds	r3, #20
 800366a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800366c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800366e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003670:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003672:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003674:	e841 2300 	strex	r3, r2, [r1]
 8003678:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800367a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800367c:	2b00      	cmp	r3, #0
 800367e:	d1e5      	bne.n	800364c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003684:	2b01      	cmp	r3, #1
 8003686:	d119      	bne.n	80036bc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	330c      	adds	r3, #12
 800368e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	e853 3f00 	ldrex	r3, [r3]
 8003696:	60bb      	str	r3, [r7, #8]
   return(result);
 8003698:	68bb      	ldr	r3, [r7, #8]
 800369a:	f023 0310 	bic.w	r3, r3, #16
 800369e:	647b      	str	r3, [r7, #68]	@ 0x44
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	330c      	adds	r3, #12
 80036a6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80036a8:	61ba      	str	r2, [r7, #24]
 80036aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036ac:	6979      	ldr	r1, [r7, #20]
 80036ae:	69ba      	ldr	r2, [r7, #24]
 80036b0:	e841 2300 	strex	r3, r2, [r1]
 80036b4:	613b      	str	r3, [r7, #16]
   return(result);
 80036b6:	693b      	ldr	r3, [r7, #16]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d1e5      	bne.n	8003688 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2220      	movs	r2, #32
 80036c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2200      	movs	r2, #0
 80036c8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80036ca:	bf00      	nop
 80036cc:	3754      	adds	r7, #84	@ 0x54
 80036ce:	46bd      	mov	sp, r7
 80036d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d4:	4770      	bx	lr

080036d6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80036d6:	b580      	push	{r7, lr}
 80036d8:	b084      	sub	sp, #16
 80036da:	af00      	add	r7, sp, #0
 80036dc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036e2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	2200      	movs	r2, #0
 80036e8:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	2200      	movs	r2, #0
 80036ee:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80036f0:	68f8      	ldr	r0, [r7, #12]
 80036f2:	f7ff ff3d 	bl	8003570 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80036f6:	bf00      	nop
 80036f8:	3710      	adds	r7, #16
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bd80      	pop	{r7, pc}

080036fe <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80036fe:	b480      	push	{r7}
 8003700:	b085      	sub	sp, #20
 8003702:	af00      	add	r7, sp, #0
 8003704:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800370c:	b2db      	uxtb	r3, r3
 800370e:	2b21      	cmp	r3, #33	@ 0x21
 8003710:	d13e      	bne.n	8003790 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	689b      	ldr	r3, [r3, #8]
 8003716:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800371a:	d114      	bne.n	8003746 <UART_Transmit_IT+0x48>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	691b      	ldr	r3, [r3, #16]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d110      	bne.n	8003746 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6a1b      	ldr	r3, [r3, #32]
 8003728:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	881b      	ldrh	r3, [r3, #0]
 800372e:	461a      	mov	r2, r3
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003738:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6a1b      	ldr	r3, [r3, #32]
 800373e:	1c9a      	adds	r2, r3, #2
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	621a      	str	r2, [r3, #32]
 8003744:	e008      	b.n	8003758 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6a1b      	ldr	r3, [r3, #32]
 800374a:	1c59      	adds	r1, r3, #1
 800374c:	687a      	ldr	r2, [r7, #4]
 800374e:	6211      	str	r1, [r2, #32]
 8003750:	781a      	ldrb	r2, [r3, #0]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800375c:	b29b      	uxth	r3, r3
 800375e:	3b01      	subs	r3, #1
 8003760:	b29b      	uxth	r3, r3
 8003762:	687a      	ldr	r2, [r7, #4]
 8003764:	4619      	mov	r1, r3
 8003766:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003768:	2b00      	cmp	r3, #0
 800376a:	d10f      	bne.n	800378c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	68da      	ldr	r2, [r3, #12]
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800377a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	68da      	ldr	r2, [r3, #12]
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800378a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800378c:	2300      	movs	r3, #0
 800378e:	e000      	b.n	8003792 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003790:	2302      	movs	r3, #2
  }
}
 8003792:	4618      	mov	r0, r3
 8003794:	3714      	adds	r7, #20
 8003796:	46bd      	mov	sp, r7
 8003798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379c:	4770      	bx	lr

0800379e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800379e:	b580      	push	{r7, lr}
 80037a0:	b082      	sub	sp, #8
 80037a2:	af00      	add	r7, sp, #0
 80037a4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	68da      	ldr	r2, [r3, #12]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80037b4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2220      	movs	r2, #32
 80037ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80037be:	6878      	ldr	r0, [r7, #4]
 80037c0:	f7ff fecc 	bl	800355c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80037c4:	2300      	movs	r3, #0
}
 80037c6:	4618      	mov	r0, r3
 80037c8:	3708      	adds	r7, #8
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bd80      	pop	{r7, pc}

080037ce <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80037ce:	b580      	push	{r7, lr}
 80037d0:	b08c      	sub	sp, #48	@ 0x30
 80037d2:	af00      	add	r7, sp, #0
 80037d4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80037dc:	b2db      	uxtb	r3, r3
 80037de:	2b22      	cmp	r3, #34	@ 0x22
 80037e0:	f040 80ae 	bne.w	8003940 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	689b      	ldr	r3, [r3, #8]
 80037e8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80037ec:	d117      	bne.n	800381e <UART_Receive_IT+0x50>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	691b      	ldr	r3, [r3, #16]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d113      	bne.n	800381e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80037f6:	2300      	movs	r3, #0
 80037f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037fe:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	b29b      	uxth	r3, r3
 8003808:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800380c:	b29a      	uxth	r2, r3
 800380e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003810:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003816:	1c9a      	adds	r2, r3, #2
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	629a      	str	r2, [r3, #40]	@ 0x28
 800381c:	e026      	b.n	800386c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003822:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8003824:	2300      	movs	r3, #0
 8003826:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	689b      	ldr	r3, [r3, #8]
 800382c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003830:	d007      	beq.n	8003842 <UART_Receive_IT+0x74>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	689b      	ldr	r3, [r3, #8]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d10a      	bne.n	8003850 <UART_Receive_IT+0x82>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	691b      	ldr	r3, [r3, #16]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d106      	bne.n	8003850 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	b2da      	uxtb	r2, r3
 800384a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800384c:	701a      	strb	r2, [r3, #0]
 800384e:	e008      	b.n	8003862 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	b2db      	uxtb	r3, r3
 8003858:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800385c:	b2da      	uxtb	r2, r3
 800385e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003860:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003866:	1c5a      	adds	r2, r3, #1
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003870:	b29b      	uxth	r3, r3
 8003872:	3b01      	subs	r3, #1
 8003874:	b29b      	uxth	r3, r3
 8003876:	687a      	ldr	r2, [r7, #4]
 8003878:	4619      	mov	r1, r3
 800387a:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800387c:	2b00      	cmp	r3, #0
 800387e:	d15d      	bne.n	800393c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	68da      	ldr	r2, [r3, #12]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f022 0220 	bic.w	r2, r2, #32
 800388e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	68da      	ldr	r2, [r3, #12]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800389e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	695a      	ldr	r2, [r3, #20]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f022 0201 	bic.w	r2, r2, #1
 80038ae:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2220      	movs	r2, #32
 80038b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2200      	movs	r2, #0
 80038bc:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038c2:	2b01      	cmp	r3, #1
 80038c4:	d135      	bne.n	8003932 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2200      	movs	r2, #0
 80038ca:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	330c      	adds	r3, #12
 80038d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038d4:	697b      	ldr	r3, [r7, #20]
 80038d6:	e853 3f00 	ldrex	r3, [r3]
 80038da:	613b      	str	r3, [r7, #16]
   return(result);
 80038dc:	693b      	ldr	r3, [r7, #16]
 80038de:	f023 0310 	bic.w	r3, r3, #16
 80038e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	330c      	adds	r3, #12
 80038ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80038ec:	623a      	str	r2, [r7, #32]
 80038ee:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038f0:	69f9      	ldr	r1, [r7, #28]
 80038f2:	6a3a      	ldr	r2, [r7, #32]
 80038f4:	e841 2300 	strex	r3, r2, [r1]
 80038f8:	61bb      	str	r3, [r7, #24]
   return(result);
 80038fa:	69bb      	ldr	r3, [r7, #24]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d1e5      	bne.n	80038cc <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f003 0310 	and.w	r3, r3, #16
 800390a:	2b10      	cmp	r3, #16
 800390c:	d10a      	bne.n	8003924 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800390e:	2300      	movs	r3, #0
 8003910:	60fb      	str	r3, [r7, #12]
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	60fb      	str	r3, [r7, #12]
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	60fb      	str	r3, [r7, #12]
 8003922:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003928:	4619      	mov	r1, r3
 800392a:	6878      	ldr	r0, [r7, #4]
 800392c:	f7ff fe2a 	bl	8003584 <HAL_UARTEx_RxEventCallback>
 8003930:	e002      	b.n	8003938 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003932:	6878      	ldr	r0, [r7, #4]
 8003934:	f7fd fc8e 	bl	8001254 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003938:	2300      	movs	r3, #0
 800393a:	e002      	b.n	8003942 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800393c:	2300      	movs	r3, #0
 800393e:	e000      	b.n	8003942 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003940:	2302      	movs	r3, #2
  }
}
 8003942:	4618      	mov	r0, r3
 8003944:	3730      	adds	r7, #48	@ 0x30
 8003946:	46bd      	mov	sp, r7
 8003948:	bd80      	pop	{r7, pc}
	...

0800394c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800394c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003950:	b0c0      	sub	sp, #256	@ 0x100
 8003952:	af00      	add	r7, sp, #0
 8003954:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003958:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	691b      	ldr	r3, [r3, #16]
 8003960:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003964:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003968:	68d9      	ldr	r1, [r3, #12]
 800396a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800396e:	681a      	ldr	r2, [r3, #0]
 8003970:	ea40 0301 	orr.w	r3, r0, r1
 8003974:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003976:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800397a:	689a      	ldr	r2, [r3, #8]
 800397c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003980:	691b      	ldr	r3, [r3, #16]
 8003982:	431a      	orrs	r2, r3
 8003984:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003988:	695b      	ldr	r3, [r3, #20]
 800398a:	431a      	orrs	r2, r3
 800398c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003990:	69db      	ldr	r3, [r3, #28]
 8003992:	4313      	orrs	r3, r2
 8003994:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003998:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	68db      	ldr	r3, [r3, #12]
 80039a0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80039a4:	f021 010c 	bic.w	r1, r1, #12
 80039a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039ac:	681a      	ldr	r2, [r3, #0]
 80039ae:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80039b2:	430b      	orrs	r3, r1
 80039b4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80039b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	695b      	ldr	r3, [r3, #20]
 80039be:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80039c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039c6:	6999      	ldr	r1, [r3, #24]
 80039c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039cc:	681a      	ldr	r2, [r3, #0]
 80039ce:	ea40 0301 	orr.w	r3, r0, r1
 80039d2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80039d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039d8:	681a      	ldr	r2, [r3, #0]
 80039da:	4b8f      	ldr	r3, [pc, #572]	@ (8003c18 <UART_SetConfig+0x2cc>)
 80039dc:	429a      	cmp	r2, r3
 80039de:	d005      	beq.n	80039ec <UART_SetConfig+0xa0>
 80039e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039e4:	681a      	ldr	r2, [r3, #0]
 80039e6:	4b8d      	ldr	r3, [pc, #564]	@ (8003c1c <UART_SetConfig+0x2d0>)
 80039e8:	429a      	cmp	r2, r3
 80039ea:	d104      	bne.n	80039f6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80039ec:	f7fe ff86 	bl	80028fc <HAL_RCC_GetPCLK2Freq>
 80039f0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80039f4:	e003      	b.n	80039fe <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80039f6:	f7fe ff6d 	bl	80028d4 <HAL_RCC_GetPCLK1Freq>
 80039fa:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80039fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a02:	69db      	ldr	r3, [r3, #28]
 8003a04:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003a08:	f040 810c 	bne.w	8003c24 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003a0c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003a10:	2200      	movs	r2, #0
 8003a12:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003a16:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003a1a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003a1e:	4622      	mov	r2, r4
 8003a20:	462b      	mov	r3, r5
 8003a22:	1891      	adds	r1, r2, r2
 8003a24:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003a26:	415b      	adcs	r3, r3
 8003a28:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003a2a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003a2e:	4621      	mov	r1, r4
 8003a30:	eb12 0801 	adds.w	r8, r2, r1
 8003a34:	4629      	mov	r1, r5
 8003a36:	eb43 0901 	adc.w	r9, r3, r1
 8003a3a:	f04f 0200 	mov.w	r2, #0
 8003a3e:	f04f 0300 	mov.w	r3, #0
 8003a42:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003a46:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003a4a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003a4e:	4690      	mov	r8, r2
 8003a50:	4699      	mov	r9, r3
 8003a52:	4623      	mov	r3, r4
 8003a54:	eb18 0303 	adds.w	r3, r8, r3
 8003a58:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003a5c:	462b      	mov	r3, r5
 8003a5e:	eb49 0303 	adc.w	r3, r9, r3
 8003a62:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003a66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003a72:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003a76:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003a7a:	460b      	mov	r3, r1
 8003a7c:	18db      	adds	r3, r3, r3
 8003a7e:	653b      	str	r3, [r7, #80]	@ 0x50
 8003a80:	4613      	mov	r3, r2
 8003a82:	eb42 0303 	adc.w	r3, r2, r3
 8003a86:	657b      	str	r3, [r7, #84]	@ 0x54
 8003a88:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003a8c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003a90:	f7fc fb9a 	bl	80001c8 <__aeabi_uldivmod>
 8003a94:	4602      	mov	r2, r0
 8003a96:	460b      	mov	r3, r1
 8003a98:	4b61      	ldr	r3, [pc, #388]	@ (8003c20 <UART_SetConfig+0x2d4>)
 8003a9a:	fba3 2302 	umull	r2, r3, r3, r2
 8003a9e:	095b      	lsrs	r3, r3, #5
 8003aa0:	011c      	lsls	r4, r3, #4
 8003aa2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003aac:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003ab0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003ab4:	4642      	mov	r2, r8
 8003ab6:	464b      	mov	r3, r9
 8003ab8:	1891      	adds	r1, r2, r2
 8003aba:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003abc:	415b      	adcs	r3, r3
 8003abe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003ac0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003ac4:	4641      	mov	r1, r8
 8003ac6:	eb12 0a01 	adds.w	sl, r2, r1
 8003aca:	4649      	mov	r1, r9
 8003acc:	eb43 0b01 	adc.w	fp, r3, r1
 8003ad0:	f04f 0200 	mov.w	r2, #0
 8003ad4:	f04f 0300 	mov.w	r3, #0
 8003ad8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003adc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003ae0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003ae4:	4692      	mov	sl, r2
 8003ae6:	469b      	mov	fp, r3
 8003ae8:	4643      	mov	r3, r8
 8003aea:	eb1a 0303 	adds.w	r3, sl, r3
 8003aee:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003af2:	464b      	mov	r3, r9
 8003af4:	eb4b 0303 	adc.w	r3, fp, r3
 8003af8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003afc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	2200      	movs	r2, #0
 8003b04:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003b08:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003b0c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003b10:	460b      	mov	r3, r1
 8003b12:	18db      	adds	r3, r3, r3
 8003b14:	643b      	str	r3, [r7, #64]	@ 0x40
 8003b16:	4613      	mov	r3, r2
 8003b18:	eb42 0303 	adc.w	r3, r2, r3
 8003b1c:	647b      	str	r3, [r7, #68]	@ 0x44
 8003b1e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003b22:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003b26:	f7fc fb4f 	bl	80001c8 <__aeabi_uldivmod>
 8003b2a:	4602      	mov	r2, r0
 8003b2c:	460b      	mov	r3, r1
 8003b2e:	4611      	mov	r1, r2
 8003b30:	4b3b      	ldr	r3, [pc, #236]	@ (8003c20 <UART_SetConfig+0x2d4>)
 8003b32:	fba3 2301 	umull	r2, r3, r3, r1
 8003b36:	095b      	lsrs	r3, r3, #5
 8003b38:	2264      	movs	r2, #100	@ 0x64
 8003b3a:	fb02 f303 	mul.w	r3, r2, r3
 8003b3e:	1acb      	subs	r3, r1, r3
 8003b40:	00db      	lsls	r3, r3, #3
 8003b42:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003b46:	4b36      	ldr	r3, [pc, #216]	@ (8003c20 <UART_SetConfig+0x2d4>)
 8003b48:	fba3 2302 	umull	r2, r3, r3, r2
 8003b4c:	095b      	lsrs	r3, r3, #5
 8003b4e:	005b      	lsls	r3, r3, #1
 8003b50:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003b54:	441c      	add	r4, r3
 8003b56:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003b60:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003b64:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003b68:	4642      	mov	r2, r8
 8003b6a:	464b      	mov	r3, r9
 8003b6c:	1891      	adds	r1, r2, r2
 8003b6e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003b70:	415b      	adcs	r3, r3
 8003b72:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003b74:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003b78:	4641      	mov	r1, r8
 8003b7a:	1851      	adds	r1, r2, r1
 8003b7c:	6339      	str	r1, [r7, #48]	@ 0x30
 8003b7e:	4649      	mov	r1, r9
 8003b80:	414b      	adcs	r3, r1
 8003b82:	637b      	str	r3, [r7, #52]	@ 0x34
 8003b84:	f04f 0200 	mov.w	r2, #0
 8003b88:	f04f 0300 	mov.w	r3, #0
 8003b8c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003b90:	4659      	mov	r1, fp
 8003b92:	00cb      	lsls	r3, r1, #3
 8003b94:	4651      	mov	r1, sl
 8003b96:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003b9a:	4651      	mov	r1, sl
 8003b9c:	00ca      	lsls	r2, r1, #3
 8003b9e:	4610      	mov	r0, r2
 8003ba0:	4619      	mov	r1, r3
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	4642      	mov	r2, r8
 8003ba6:	189b      	adds	r3, r3, r2
 8003ba8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003bac:	464b      	mov	r3, r9
 8003bae:	460a      	mov	r2, r1
 8003bb0:	eb42 0303 	adc.w	r3, r2, r3
 8003bb4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003bb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bbc:	685b      	ldr	r3, [r3, #4]
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003bc4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003bc8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003bcc:	460b      	mov	r3, r1
 8003bce:	18db      	adds	r3, r3, r3
 8003bd0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003bd2:	4613      	mov	r3, r2
 8003bd4:	eb42 0303 	adc.w	r3, r2, r3
 8003bd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003bda:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003bde:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003be2:	f7fc faf1 	bl	80001c8 <__aeabi_uldivmod>
 8003be6:	4602      	mov	r2, r0
 8003be8:	460b      	mov	r3, r1
 8003bea:	4b0d      	ldr	r3, [pc, #52]	@ (8003c20 <UART_SetConfig+0x2d4>)
 8003bec:	fba3 1302 	umull	r1, r3, r3, r2
 8003bf0:	095b      	lsrs	r3, r3, #5
 8003bf2:	2164      	movs	r1, #100	@ 0x64
 8003bf4:	fb01 f303 	mul.w	r3, r1, r3
 8003bf8:	1ad3      	subs	r3, r2, r3
 8003bfa:	00db      	lsls	r3, r3, #3
 8003bfc:	3332      	adds	r3, #50	@ 0x32
 8003bfe:	4a08      	ldr	r2, [pc, #32]	@ (8003c20 <UART_SetConfig+0x2d4>)
 8003c00:	fba2 2303 	umull	r2, r3, r2, r3
 8003c04:	095b      	lsrs	r3, r3, #5
 8003c06:	f003 0207 	and.w	r2, r3, #7
 8003c0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4422      	add	r2, r4
 8003c12:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003c14:	e106      	b.n	8003e24 <UART_SetConfig+0x4d8>
 8003c16:	bf00      	nop
 8003c18:	40011000 	.word	0x40011000
 8003c1c:	40011400 	.word	0x40011400
 8003c20:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003c24:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003c28:	2200      	movs	r2, #0
 8003c2a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003c2e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003c32:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003c36:	4642      	mov	r2, r8
 8003c38:	464b      	mov	r3, r9
 8003c3a:	1891      	adds	r1, r2, r2
 8003c3c:	6239      	str	r1, [r7, #32]
 8003c3e:	415b      	adcs	r3, r3
 8003c40:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c42:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003c46:	4641      	mov	r1, r8
 8003c48:	1854      	adds	r4, r2, r1
 8003c4a:	4649      	mov	r1, r9
 8003c4c:	eb43 0501 	adc.w	r5, r3, r1
 8003c50:	f04f 0200 	mov.w	r2, #0
 8003c54:	f04f 0300 	mov.w	r3, #0
 8003c58:	00eb      	lsls	r3, r5, #3
 8003c5a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003c5e:	00e2      	lsls	r2, r4, #3
 8003c60:	4614      	mov	r4, r2
 8003c62:	461d      	mov	r5, r3
 8003c64:	4643      	mov	r3, r8
 8003c66:	18e3      	adds	r3, r4, r3
 8003c68:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003c6c:	464b      	mov	r3, r9
 8003c6e:	eb45 0303 	adc.w	r3, r5, r3
 8003c72:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003c76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003c82:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003c86:	f04f 0200 	mov.w	r2, #0
 8003c8a:	f04f 0300 	mov.w	r3, #0
 8003c8e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003c92:	4629      	mov	r1, r5
 8003c94:	008b      	lsls	r3, r1, #2
 8003c96:	4621      	mov	r1, r4
 8003c98:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003c9c:	4621      	mov	r1, r4
 8003c9e:	008a      	lsls	r2, r1, #2
 8003ca0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003ca4:	f7fc fa90 	bl	80001c8 <__aeabi_uldivmod>
 8003ca8:	4602      	mov	r2, r0
 8003caa:	460b      	mov	r3, r1
 8003cac:	4b60      	ldr	r3, [pc, #384]	@ (8003e30 <UART_SetConfig+0x4e4>)
 8003cae:	fba3 2302 	umull	r2, r3, r3, r2
 8003cb2:	095b      	lsrs	r3, r3, #5
 8003cb4:	011c      	lsls	r4, r3, #4
 8003cb6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003cba:	2200      	movs	r2, #0
 8003cbc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003cc0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003cc4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003cc8:	4642      	mov	r2, r8
 8003cca:	464b      	mov	r3, r9
 8003ccc:	1891      	adds	r1, r2, r2
 8003cce:	61b9      	str	r1, [r7, #24]
 8003cd0:	415b      	adcs	r3, r3
 8003cd2:	61fb      	str	r3, [r7, #28]
 8003cd4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003cd8:	4641      	mov	r1, r8
 8003cda:	1851      	adds	r1, r2, r1
 8003cdc:	6139      	str	r1, [r7, #16]
 8003cde:	4649      	mov	r1, r9
 8003ce0:	414b      	adcs	r3, r1
 8003ce2:	617b      	str	r3, [r7, #20]
 8003ce4:	f04f 0200 	mov.w	r2, #0
 8003ce8:	f04f 0300 	mov.w	r3, #0
 8003cec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003cf0:	4659      	mov	r1, fp
 8003cf2:	00cb      	lsls	r3, r1, #3
 8003cf4:	4651      	mov	r1, sl
 8003cf6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003cfa:	4651      	mov	r1, sl
 8003cfc:	00ca      	lsls	r2, r1, #3
 8003cfe:	4610      	mov	r0, r2
 8003d00:	4619      	mov	r1, r3
 8003d02:	4603      	mov	r3, r0
 8003d04:	4642      	mov	r2, r8
 8003d06:	189b      	adds	r3, r3, r2
 8003d08:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003d0c:	464b      	mov	r3, r9
 8003d0e:	460a      	mov	r2, r1
 8003d10:	eb42 0303 	adc.w	r3, r2, r3
 8003d14:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003d18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d1c:	685b      	ldr	r3, [r3, #4]
 8003d1e:	2200      	movs	r2, #0
 8003d20:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003d22:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003d24:	f04f 0200 	mov.w	r2, #0
 8003d28:	f04f 0300 	mov.w	r3, #0
 8003d2c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003d30:	4649      	mov	r1, r9
 8003d32:	008b      	lsls	r3, r1, #2
 8003d34:	4641      	mov	r1, r8
 8003d36:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003d3a:	4641      	mov	r1, r8
 8003d3c:	008a      	lsls	r2, r1, #2
 8003d3e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003d42:	f7fc fa41 	bl	80001c8 <__aeabi_uldivmod>
 8003d46:	4602      	mov	r2, r0
 8003d48:	460b      	mov	r3, r1
 8003d4a:	4611      	mov	r1, r2
 8003d4c:	4b38      	ldr	r3, [pc, #224]	@ (8003e30 <UART_SetConfig+0x4e4>)
 8003d4e:	fba3 2301 	umull	r2, r3, r3, r1
 8003d52:	095b      	lsrs	r3, r3, #5
 8003d54:	2264      	movs	r2, #100	@ 0x64
 8003d56:	fb02 f303 	mul.w	r3, r2, r3
 8003d5a:	1acb      	subs	r3, r1, r3
 8003d5c:	011b      	lsls	r3, r3, #4
 8003d5e:	3332      	adds	r3, #50	@ 0x32
 8003d60:	4a33      	ldr	r2, [pc, #204]	@ (8003e30 <UART_SetConfig+0x4e4>)
 8003d62:	fba2 2303 	umull	r2, r3, r2, r3
 8003d66:	095b      	lsrs	r3, r3, #5
 8003d68:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003d6c:	441c      	add	r4, r3
 8003d6e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003d72:	2200      	movs	r2, #0
 8003d74:	673b      	str	r3, [r7, #112]	@ 0x70
 8003d76:	677a      	str	r2, [r7, #116]	@ 0x74
 8003d78:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003d7c:	4642      	mov	r2, r8
 8003d7e:	464b      	mov	r3, r9
 8003d80:	1891      	adds	r1, r2, r2
 8003d82:	60b9      	str	r1, [r7, #8]
 8003d84:	415b      	adcs	r3, r3
 8003d86:	60fb      	str	r3, [r7, #12]
 8003d88:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003d8c:	4641      	mov	r1, r8
 8003d8e:	1851      	adds	r1, r2, r1
 8003d90:	6039      	str	r1, [r7, #0]
 8003d92:	4649      	mov	r1, r9
 8003d94:	414b      	adcs	r3, r1
 8003d96:	607b      	str	r3, [r7, #4]
 8003d98:	f04f 0200 	mov.w	r2, #0
 8003d9c:	f04f 0300 	mov.w	r3, #0
 8003da0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003da4:	4659      	mov	r1, fp
 8003da6:	00cb      	lsls	r3, r1, #3
 8003da8:	4651      	mov	r1, sl
 8003daa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003dae:	4651      	mov	r1, sl
 8003db0:	00ca      	lsls	r2, r1, #3
 8003db2:	4610      	mov	r0, r2
 8003db4:	4619      	mov	r1, r3
 8003db6:	4603      	mov	r3, r0
 8003db8:	4642      	mov	r2, r8
 8003dba:	189b      	adds	r3, r3, r2
 8003dbc:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003dbe:	464b      	mov	r3, r9
 8003dc0:	460a      	mov	r2, r1
 8003dc2:	eb42 0303 	adc.w	r3, r2, r3
 8003dc6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003dc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dcc:	685b      	ldr	r3, [r3, #4]
 8003dce:	2200      	movs	r2, #0
 8003dd0:	663b      	str	r3, [r7, #96]	@ 0x60
 8003dd2:	667a      	str	r2, [r7, #100]	@ 0x64
 8003dd4:	f04f 0200 	mov.w	r2, #0
 8003dd8:	f04f 0300 	mov.w	r3, #0
 8003ddc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003de0:	4649      	mov	r1, r9
 8003de2:	008b      	lsls	r3, r1, #2
 8003de4:	4641      	mov	r1, r8
 8003de6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003dea:	4641      	mov	r1, r8
 8003dec:	008a      	lsls	r2, r1, #2
 8003dee:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003df2:	f7fc f9e9 	bl	80001c8 <__aeabi_uldivmod>
 8003df6:	4602      	mov	r2, r0
 8003df8:	460b      	mov	r3, r1
 8003dfa:	4b0d      	ldr	r3, [pc, #52]	@ (8003e30 <UART_SetConfig+0x4e4>)
 8003dfc:	fba3 1302 	umull	r1, r3, r3, r2
 8003e00:	095b      	lsrs	r3, r3, #5
 8003e02:	2164      	movs	r1, #100	@ 0x64
 8003e04:	fb01 f303 	mul.w	r3, r1, r3
 8003e08:	1ad3      	subs	r3, r2, r3
 8003e0a:	011b      	lsls	r3, r3, #4
 8003e0c:	3332      	adds	r3, #50	@ 0x32
 8003e0e:	4a08      	ldr	r2, [pc, #32]	@ (8003e30 <UART_SetConfig+0x4e4>)
 8003e10:	fba2 2303 	umull	r2, r3, r2, r3
 8003e14:	095b      	lsrs	r3, r3, #5
 8003e16:	f003 020f 	and.w	r2, r3, #15
 8003e1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4422      	add	r2, r4
 8003e22:	609a      	str	r2, [r3, #8]
}
 8003e24:	bf00      	nop
 8003e26:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e30:	51eb851f 	.word	0x51eb851f

08003e34 <memset>:
 8003e34:	4402      	add	r2, r0
 8003e36:	4603      	mov	r3, r0
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d100      	bne.n	8003e3e <memset+0xa>
 8003e3c:	4770      	bx	lr
 8003e3e:	f803 1b01 	strb.w	r1, [r3], #1
 8003e42:	e7f9      	b.n	8003e38 <memset+0x4>

08003e44 <__libc_init_array>:
 8003e44:	b570      	push	{r4, r5, r6, lr}
 8003e46:	4d0d      	ldr	r5, [pc, #52]	@ (8003e7c <__libc_init_array+0x38>)
 8003e48:	4c0d      	ldr	r4, [pc, #52]	@ (8003e80 <__libc_init_array+0x3c>)
 8003e4a:	1b64      	subs	r4, r4, r5
 8003e4c:	10a4      	asrs	r4, r4, #2
 8003e4e:	2600      	movs	r6, #0
 8003e50:	42a6      	cmp	r6, r4
 8003e52:	d109      	bne.n	8003e68 <__libc_init_array+0x24>
 8003e54:	4d0b      	ldr	r5, [pc, #44]	@ (8003e84 <__libc_init_array+0x40>)
 8003e56:	4c0c      	ldr	r4, [pc, #48]	@ (8003e88 <__libc_init_array+0x44>)
 8003e58:	f000 f818 	bl	8003e8c <_init>
 8003e5c:	1b64      	subs	r4, r4, r5
 8003e5e:	10a4      	asrs	r4, r4, #2
 8003e60:	2600      	movs	r6, #0
 8003e62:	42a6      	cmp	r6, r4
 8003e64:	d105      	bne.n	8003e72 <__libc_init_array+0x2e>
 8003e66:	bd70      	pop	{r4, r5, r6, pc}
 8003e68:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e6c:	4798      	blx	r3
 8003e6e:	3601      	adds	r6, #1
 8003e70:	e7ee      	b.n	8003e50 <__libc_init_array+0xc>
 8003e72:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e76:	4798      	blx	r3
 8003e78:	3601      	adds	r6, #1
 8003e7a:	e7f2      	b.n	8003e62 <__libc_init_array+0x1e>
 8003e7c:	08003ec4 	.word	0x08003ec4
 8003e80:	08003ec4 	.word	0x08003ec4
 8003e84:	08003ec4 	.word	0x08003ec4
 8003e88:	08003ec8 	.word	0x08003ec8

08003e8c <_init>:
 8003e8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e8e:	bf00      	nop
 8003e90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e92:	bc08      	pop	{r3}
 8003e94:	469e      	mov	lr, r3
 8003e96:	4770      	bx	lr

08003e98 <_fini>:
 8003e98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e9a:	bf00      	nop
 8003e9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e9e:	bc08      	pop	{r3}
 8003ea0:	469e      	mov	lr, r3
 8003ea2:	4770      	bx	lr
